Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_compile_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_compile_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Compile code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 6, 7, 8, 42, 43, 44, 47, 747, 758, 781], "The": [0, 2, 3, 6, 8, 9, 10, 11, 17, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 133, 134, 136, 138, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 176, 177, 179, 180, 182, 183, 184, 185, 191, 192, 193, 194, 195, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 443, 446, 447, 452, 453, 455, 456, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 529, 531, 534, 535, 538, 540, 541, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 750, 751, 752, 753, 754, 756, 757, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 782, 783, 784, 787, 788, 789, 791, 793, 794, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "transpil": [0, 1, 3, 9, 11, 12, 17, 18, 21, 31, 756, 770, 777, 783, 784, 785, 793, 794, 803, 809, 810], "ar": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 46, 49, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 94, 96, 97, 121, 136, 138, 141, 146, 200, 205, 207, 212, 236, 238, 239, 242, 246, 267, 268, 272, 277, 278, 282, 284, 289, 290, 291, 315, 317, 318, 320, 321, 323, 324, 325, 327, 328, 333, 338, 341, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 370, 371, 377, 378, 379, 380, 383, 388, 390, 398, 403, 404, 407, 415, 416, 417, 419, 420, 423, 427, 428, 429, 437, 438, 439, 441, 447, 450, 452, 454, 461, 463, 467, 468, 469, 470, 471, 481, 486, 487, 488, 489, 490, 492, 495, 496, 497, 506, 512, 517, 521, 532, 533, 542, 552, 564, 574, 586, 588, 589, 591, 592, 593, 594, 596, 598, 600, 601, 602, 616, 617, 619, 620, 622, 626, 627, 628, 632, 633, 635, 638, 642, 643, 647, 648, 649, 654, 655, 658, 662, 664, 674, 679, 684, 685, 686, 694, 695, 696, 699, 700, 701, 702, 704, 706, 730, 731, 734, 737, 738, 744, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810], "publicli": [0, 2], "avail": [0, 2, 4, 6, 8, 10, 28, 29, 44, 55, 78, 195, 201, 203, 204, 215, 358, 452, 504, 588, 591, 750, 757, 758, 764, 765, 766, 767, 769, 770, 777, 779, 782, 792, 793, 796, 808, 809], "yet": [0, 2, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 44, 348, 350, 351, 359, 360, 364, 756, 757, 792], "so": [0, 1, 2, 3, 4, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 40, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 352, 365, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 593, 598, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 638, 639, 640, 642, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 684, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 750, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 792, 796, 797, 803, 804, 805, 807], "certain": [0, 1, 2, 71, 121, 137, 138, 586, 757, 758, 760, 766, 773, 779, 782, 792, 807], "part": [0, 2, 17, 18, 21, 50, 53, 54, 76, 77, 82, 96, 106, 109, 112, 144, 145, 146, 252, 256, 279, 315, 316, 337, 349, 352, 356, 358, 367, 404, 447, 490, 583, 586, 589, 594, 627, 628, 733, 734, 750, 752, 756, 758, 760, 763, 766, 771, 773, 776, 777, 779, 780, 782, 784, 785, 789, 791, 792, 801, 803, 808, 809, 810], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 167, 170, 171, 172, 174, 178, 179, 193, 196, 206, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 538, 544, 549, 550, 551, 552, 554, 556, 557, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 675, 677, 679, 680, 685, 686, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 731, 732, 734, 735, 736, 737, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "doc": [0, 2, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 44, 77, 146, 315, 349, 483, 586, 750, 751, 755, 756, 759, 768, 769, 771, 772, 779, 784, 787, 788], "won": [0, 2, 757, 758, 764, 766, 789, 793, 797, 798], "t": [0, 1, 2, 3, 7, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 40, 42, 43, 44, 54, 58, 69, 77, 81, 92, 94, 96, 331, 346, 352, 354, 356, 404, 520, 538, 552, 574, 591, 592, 593, 598, 617, 618, 681, 732, 750, 752, 753, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 771, 773, 774, 775, 776, 779, 780, 782, 784, 786, 787, 788, 789, 792, 793, 797, 798, 801, 803, 805], "work": [0, 1, 2, 3, 26, 28, 29, 40, 41, 43, 47, 54, 77, 94, 367, 490, 598, 680, 681, 685, 690, 691, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 776, 777, 778, 779, 780, 783, 784, 786, 788, 789, 793, 798, 801, 803, 805, 807, 810], "expect": [0, 2, 6, 8, 9, 11, 21, 25, 28, 29, 31, 44, 45, 47, 54, 59, 60, 77, 83, 178, 246, 290, 355, 377, 398, 494, 587, 589, 591, 595, 637, 651, 730, 731, 732, 734, 750, 757, 758, 760, 766, 767, 770, 771, 774, 776, 778, 779, 782, 792, 793, 798], "now": [0, 2, 3, 7, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 44, 732, 733, 734, 750, 757, 760, 761, 762, 763, 764, 765, 766, 767, 772, 774, 777, 778, 779, 780, 782, 786, 787, 789, 791, 792, 798, 803], "when": [0, 1, 2, 8, 10, 19, 21, 23, 24, 28, 29, 31, 33, 34, 35, 43, 45, 49, 50, 51, 53, 54, 59, 60, 63, 64, 67, 71, 73, 74, 76, 77, 82, 83, 86, 87, 90, 97, 141, 151, 222, 239, 244, 246, 262, 272, 277, 290, 291, 295, 347, 355, 356, 358, 361, 362, 367, 377, 390, 404, 407, 416, 419, 452, 461, 463, 468, 488, 490, 520, 536, 544, 550, 586, 587, 589, 591, 593, 594, 595, 596, 598, 600, 601, 604, 606, 619, 635, 640, 651, 652, 653, 661, 673, 674, 683, 684, 685, 694, 695, 696, 699, 700, 702, 703, 715, 717, 719, 721, 730, 731, 732, 733, 734, 735, 741, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 789, 792, 796, 797, 801, 803, 806, 807, 808, 809], "we": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 45, 46, 47, 54, 59, 60, 61, 69, 77, 82, 83, 92, 94, 112, 346, 354, 358, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 456, 459, 503, 513, 552, 574, 575, 577, 582, 583, 591, 592, 594, 595, 596, 635, 651, 657, 658, 659, 661, 663, 664, 666, 668, 730, 734, 741, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 808, 809], "call": [0, 2, 6, 9, 13, 15, 19, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 42, 46, 54, 69, 74, 77, 92, 94, 97, 117, 171, 172, 212, 356, 367, 414, 488, 538, 544, 558, 574, 575, 577, 585, 588, 591, 592, 594, 598, 640, 673, 679, 683, 684, 730, 732, 733, 734, 736, 741, 750, 756, 758, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789, 792, 797, 803, 804, 807], "an": [0, 1, 2, 3, 5, 6, 17, 18, 19, 21, 24, 26, 28, 29, 34, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 174, 178, 179, 209, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 304, 305, 307, 308, 309, 311, 312, 315, 316, 317, 318, 319, 322, 325, 327, 332, 336, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 386, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 403, 404, 405, 422, 426, 427, 428, 429, 432, 433, 435, 442, 446, 447, 452, 453, 458, 459, 461, 462, 463, 467, 468, 470, 473, 474, 479, 480, 481, 482, 483, 484, 485, 488, 491, 496, 498, 499, 507, 510, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 529, 535, 538, 539, 548, 552, 556, 557, 558, 571, 574, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 679, 692, 694, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 750, 752, 754, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 791, 792, 794, 797, 798, 799, 801, 802, 803, 804, 806, 807, 809, 810], "ivi": [0, 3, 4, 5, 9, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 755, 757, 759, 760, 762, 764, 766, 767, 769, 771, 772, 773, 774, 776, 782, 783, 790, 792, 793, 794, 797, 798, 799, 810], "function": [0, 6, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 165, 166, 167, 170, 171, 172, 174, 178, 179, 196, 198, 199, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 533, 534, 535, 538, 539, 542, 544, 546, 549, 550, 551, 552, 554, 556, 557, 558, 564, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 683, 684, 685, 686, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 734, 741, 746, 750, 754, 757, 758, 759, 760, 761, 762, 763, 765, 768, 769, 776, 783, 785, 786, 787, 788, 790, 791, 794, 796, 800, 801, 802, 803, 804, 809, 810], "i": [0, 2, 3, 6, 7, 8, 9, 10, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 191, 193, 195, 196, 198, 199, 201, 203, 206, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 383, 386, 388, 390, 391, 392, 393, 394, 397, 398, 401, 402, 403, 404, 406, 407, 408, 410, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 435, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 530, 531, 534, 535, 536, 538, 544, 548, 549, 550, 552, 554, 556, 557, 558, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 730, 731, 732, 733, 734, 735, 736, 738, 741, 744, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "alwai": [0, 50, 51, 54, 55, 61, 73, 74, 77, 84, 104, 123, 151, 222, 272, 328, 352, 356, 358, 417, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 513, 520, 583, 587, 589, 591, 596, 657, 658, 659, 661, 663, 664, 666, 668, 750, 756, 757, 758, 761, 762, 764, 766, 769, 771, 772, 773, 776, 777, 778, 779, 780, 782, 784, 792], "small": [0, 2, 8, 44, 53, 54, 59, 62, 76, 77, 82, 85, 239, 246, 272, 273, 320, 333, 352, 356, 361, 411, 461, 462, 463, 589, 594, 599, 635, 638, 640, 692, 731, 735, 750, 757, 765, 768, 773, 778, 782, 784, 788, 792, 804], "perform": [0, 2, 8, 21, 23, 25, 28, 29, 31, 33, 40, 42, 50, 54, 58, 59, 67, 68, 73, 77, 78, 81, 82, 90, 91, 107, 111, 137, 138, 209, 217, 239, 272, 293, 325, 345, 352, 353, 355, 356, 358, 365, 367, 377, 378, 379, 380, 382, 383, 387, 388, 396, 416, 426, 474, 482, 483, 503, 504, 505, 518, 519, 520, 536, 546, 583, 586, 588, 589, 591, 593, 594, 597, 598, 604, 605, 616, 618, 642, 644, 649, 670, 671, 672, 680, 681, 712, 713, 722, 723, 732, 760, 761, 762, 764, 766, 767, 768, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 787, 792, 798, 800, 803, 804, 805, 806, 807, 808, 810], "hit": [0, 779, 784], "due": [0, 2, 21, 28, 29, 31, 45, 47, 272, 282, 589, 752, 757, 760, 765, 770, 776, 777, 797, 803], "ad": [0, 54, 61, 77, 84, 92, 239, 272, 320, 333, 352, 361, 461, 462, 463, 549, 550, 589, 591, 594, 596, 627, 628, 657, 732, 737, 750, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 788, 792, 797, 802, 803], "python": [0, 10, 13, 19, 31, 36, 40, 42, 43, 44, 46, 47, 54, 63, 77, 86, 121, 206, 218, 246, 281, 362, 467, 468, 469, 470, 471, 571, 586, 588, 589, 591, 600, 693, 694, 695, 696, 698, 741, 744, 755, 757, 758, 760, 763, 764, 765, 770, 777, 779, 784, 786, 787, 792, 794, 795, 796, 797, 800, 803, 804, 805, 809, 810], "wrap": [0, 2, 19, 21, 28, 29, 31, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 358, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 546, 549, 550, 551, 552, 554, 556, 557, 568, 570, 572, 573, 576, 578, 579, 580, 581, 591, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 638, 639, 640, 642, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 750, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 772, 773, 776, 777, 779, 784, 786, 789, 792, 794, 799, 803, 804, 809, 810], "overhead": [0, 8, 21, 28, 29, 31, 792, 806], "becom": [0, 28, 54, 77, 94, 328, 352, 358, 429, 596, 654, 741, 758, 764, 768, 770, 776, 792, 796, 798], "increasingli": [0, 768], "notic": [0, 756, 761, 765, 771, 779, 782], "larg": [0, 43, 53, 54, 76, 77, 222, 239, 246, 272, 273, 367, 481, 589, 594, 640, 757, 758, 765, 787, 803], "model": [0, 2, 4, 5, 6, 12, 17, 18, 19, 45, 47, 54, 239, 272, 357, 420, 589, 750, 787, 788, 794, 801, 802, 803, 804, 805, 806, 807, 809, 810], "multipl": [0, 19, 28, 53, 54, 59, 62, 67, 68, 71, 76, 77, 78, 79, 82, 84, 85, 90, 91, 134, 233, 257, 264, 270, 271, 272, 274, 355, 356, 358, 365, 376, 383, 386, 388, 414, 433, 442, 459, 474, 492, 530, 572, 573, 576, 578, 580, 581, 586, 589, 591, 592, 593, 594, 596, 599, 601, 604, 605, 608, 609, 610, 611, 621, 630, 632, 633, 654, 657, 662, 663, 692, 699, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 750, 756, 758, 761, 762, 764, 768, 770, 771, 773, 776, 777, 778, 779, 782, 784, 792, 798, 801, 802, 803, 810], "improv": [0, 9, 11, 28, 31, 758, 766, 772, 773, 782, 784, 794, 798, 801, 803, 805, 806], "remov": [0, 2, 17, 18, 21, 28, 29, 31, 59, 71, 82, 594, 596, 597, 598, 625, 632, 646, 664, 670, 671, 687, 747, 750, 756, 762, 763, 765, 766, 769, 773, 779, 782, 789, 803], "extra": [0, 2, 29, 71, 97, 117, 571, 585, 591, 761, 766, 768, 774, 776, 777, 778, 782, 784, 800, 805], "around": [0, 3, 12, 13, 15, 17, 71, 97, 358, 447, 452, 758, 760, 761, 763, 767, 772, 773, 777, 780, 786, 792, 794, 801, 803, 810], "each": [0, 2, 9, 11, 21, 22, 23, 28, 29, 31, 32, 33, 35, 42, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 65, 67, 71, 74, 76, 77, 78, 79, 81, 82, 84, 87, 88, 90, 94, 96, 97, 105, 106, 108, 109, 110, 112, 117, 139, 152, 164, 167, 212, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 298, 299, 301, 302, 307, 314, 317, 318, 322, 328, 332, 336, 341, 344, 347, 349, 352, 355, 356, 358, 362, 365, 367, 373, 374, 375, 378, 379, 380, 383, 391, 392, 393, 394, 397, 398, 403, 404, 408, 415, 416, 418, 419, 427, 428, 429, 432, 433, 438, 439, 441, 442, 444, 446, 447, 450, 458, 459, 467, 474, 479, 480, 481, 482, 483, 484, 492, 495, 503, 510, 511, 527, 551, 571, 573, 574, 576, 578, 579, 580, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 598, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 622, 623, 626, 627, 628, 632, 634, 635, 636, 638, 640, 641, 642, 647, 656, 660, 662, 663, 665, 667, 669, 679, 686, 693, 702, 704, 705, 707, 713, 714, 721, 732, 735, 736, 737, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 789, 791, 792, 796, 797, 798, 799, 800, 804, 806, 809], "take": [0, 2, 6, 10, 19, 26, 28, 29, 34, 40, 42, 45, 54, 59, 61, 67, 77, 84, 94, 117, 118, 120, 141, 234, 279, 286, 297, 347, 355, 356, 358, 374, 382, 387, 392, 406, 431, 437, 455, 482, 483, 585, 586, 589, 593, 594, 596, 597, 619, 632, 636, 661, 672, 712, 731, 732, 744, 750, 751, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 776, 777, 778, 779, 782, 784, 786, 788, 789, 792, 793, 798, 800, 801, 809], "ani": [0, 1, 2, 3, 8, 13, 15, 17, 18, 19, 20, 21, 30, 31, 34, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 59, 68, 69, 73, 75, 76, 77, 78, 91, 92, 94, 96, 97, 117, 118, 120, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 155, 170, 174, 178, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 300, 304, 315, 316, 322, 325, 347, 349, 352, 355, 356, 358, 361, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 398, 404, 408, 436, 447, 461, 462, 463, 481, 484, 487, 488, 492, 502, 503, 504, 505, 506, 510, 514, 516, 518, 522, 524, 525, 543, 550, 557, 558, 565, 571, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 679, 680, 682, 683, 690, 692, 696, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 731, 732, 734, 735, 736, 737, 741, 744, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 801, 802, 803, 804, 806, 809, 810], "framework": [0, 2, 6, 7, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 42, 44, 46, 49, 55, 169, 191, 201, 204, 215, 501, 517, 521, 552, 555, 587, 588, 591, 598, 675, 729, 736, 741, 754, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 807], "specif": [0, 2, 19, 20, 25, 26, 28, 29, 30, 32, 34, 42, 52, 54, 55, 75, 77, 78, 179, 210, 213, 246, 267, 268, 277, 362, 471, 503, 504, 505, 531, 587, 588, 589, 591, 594, 596, 597, 600, 603, 604, 627, 628, 644, 665, 670, 671, 672, 693, 710, 715, 716, 717, 719, 733, 734, 741, 746, 750, 754, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 770, 771, 772, 773, 776, 777, 778, 779, 780, 782, 784, 785, 786, 788, 789, 791, 792, 793, 794, 796, 799, 801, 802, 804, 805, 806, 810], "backend": [0, 2, 6, 20, 21, 22, 29, 31, 32, 34, 49, 50, 54, 55, 59, 71, 77, 78, 82, 96, 129, 165, 166, 169, 191, 198, 199, 201, 204, 215, 356, 402, 404, 488, 496, 508, 509, 517, 520, 521, 531, 538, 552, 555, 586, 587, 588, 591, 594, 642, 729, 734, 736, 740, 741, 754, 755, 757, 758, 759, 760, 761, 765, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 785, 786, 789, 794, 796, 803, 806, 809, 810], "composit": [0, 19, 28, 165, 166, 198, 199, 291, 356, 409, 508, 509, 587, 588, 589, 591, 756, 759, 761, 762, 764, 766, 767, 774, 776, 777, 778, 779, 782, 784, 788, 789, 792, 794, 804], "both": [0, 2, 9, 10, 11, 13, 15, 23, 25, 28, 29, 33, 34, 41, 43, 50, 53, 54, 55, 58, 59, 73, 76, 77, 78, 81, 82, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 177, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 323, 325, 328, 333, 349, 352, 355, 356, 358, 362, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 441, 447, 467, 481, 484, 510, 514, 516, 518, 527, 557, 581, 582, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 750, 756, 758, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 776, 777, 779, 782, 784, 786, 787, 788, 789, 791, 792, 803, 806, 808, 809, 810], "produc": [0, 41, 54, 55, 58, 77, 81, 297, 300, 303, 306, 347, 349, 593, 620, 756, 766, 771, 776, 778, 779, 780, 804, 806], "simplifi": [0, 744, 770, 777, 784, 785, 788, 797, 799, 801, 802, 803, 806, 809, 810], "execut": [0, 9, 11, 19, 20, 21, 23, 28, 29, 31, 33, 36, 43, 45, 47, 118, 120, 558, 585, 588, 591, 757, 758, 763, 764, 765, 766, 767, 768, 770, 773, 774, 776, 779, 782, 784, 786, 789, 792, 794, 799, 803, 804, 805, 806, 807, 809], "comput": [0, 2, 25, 26, 28, 29, 35, 36, 41, 42, 44, 48, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 71, 76, 77, 78, 79, 81, 82, 83, 90, 94, 107, 111, 212, 222, 229, 232, 234, 239, 240, 241, 246, 247, 248, 250, 251, 257, 258, 259, 266, 267, 268, 269, 271, 272, 275, 280, 281, 295, 305, 308, 309, 317, 318, 322, 326, 329, 331, 332, 336, 338, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 365, 367, 373, 374, 375, 376, 377, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 407, 409, 412, 414, 416, 418, 419, 420, 421, 422, 423, 424, 441, 444, 456, 461, 463, 473, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 497, 498, 499, 543, 565, 572, 574, 575, 577, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 598, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 621, 622, 626, 627, 628, 631, 632, 633, 635, 637, 639, 641, 642, 644, 646, 648, 649, 651, 652, 653, 657, 679, 704, 705, 706, 707, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 732, 735, 750, 757, 764, 765, 766, 773, 775, 777, 779, 781, 782, 784, 787, 792, 794, 797, 798, 799, 801, 803, 804, 806, 807, 809], "compos": [0, 6, 9, 10, 28, 29, 42, 54, 77, 355, 369, 370, 371, 730, 757, 764, 777, 779, 792, 803, 810], "from": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 87, 90, 91, 92, 94, 97, 121, 123, 131, 133, 134, 135, 136, 139, 140, 143, 146, 148, 154, 172, 178, 179, 195, 200, 205, 211, 212, 238, 246, 247, 274, 278, 279, 286, 290, 303, 304, 310, 315, 317, 318, 323, 326, 328, 329, 331, 332, 344, 349, 352, 355, 356, 358, 362, 367, 378, 379, 380, 394, 398, 411, 417, 420, 431, 433, 442, 447, 453, 455, 458, 459, 467, 468, 469, 470, 471, 482, 483, 502, 510, 511, 513, 533, 544, 554, 571, 573, 574, 578, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 604, 605, 607, 615, 616, 622, 625, 642, 646, 647, 648, 655, 658, 661, 664, 670, 671, 672, 674, 685, 686, 687, 693, 694, 695, 696, 700, 703, 704, 706, 712, 713, 718, 719, 720, 721, 722, 723, 729, 730, 731, 732, 734, 736, 741, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 792, 794, 796, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810], "onli": [0, 2, 13, 15, 28, 29, 34, 40, 42, 44, 46, 50, 53, 54, 59, 61, 63, 71, 73, 76, 77, 82, 84, 86, 94, 96, 112, 138, 177, 178, 207, 267, 268, 273, 279, 303, 326, 331, 349, 352, 355, 356, 358, 362, 367, 377, 390, 404, 408, 418, 419, 427, 428, 429, 437, 467, 468, 484, 497, 583, 586, 587, 588, 589, 591, 593, 594, 596, 598, 600, 601, 603, 604, 619, 632, 639, 642, 658, 661, 673, 674, 680, 681, 683, 684, 685, 690, 691, 694, 695, 696, 699, 700, 710, 716, 719, 732, 734, 736, 744, 750, 751, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 792, 796, 802, 803, 804, 809, 810], "which": [0, 2, 3, 6, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 162, 164, 167, 169, 172, 179, 191, 196, 200, 205, 207, 210, 211, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 337, 338, 339, 341, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 365, 367, 377, 378, 379, 380, 382, 383, 387, 388, 397, 398, 401, 404, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 432, 452, 453, 454, 455, 456, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 526, 527, 532, 533, 534, 535, 549, 550, 552, 554, 556, 557, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 640, 641, 642, 646, 648, 649, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 668, 669, 678, 679, 680, 681, 686, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 746, 750, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 809, 810], "result": [0, 2, 3, 6, 8, 9, 10, 11, 13, 15, 28, 29, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 179, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 406, 408, 409, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 426, 432, 435, 437, 438, 439, 440, 441, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 498, 499, 503, 504, 505, 510, 511, 520, 527, 534, 535, 572, 573, 574, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 676, 679, 680, 682, 686, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 738, 748, 750, 754, 756, 758, 760, 761, 763, 764, 765, 766, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 784, 787, 792, 804, 806], "code": [0, 2, 3, 7, 9, 11, 17, 18, 25, 26, 28, 30, 31, 32, 33, 34, 35, 42, 43, 52, 53, 71, 75, 76, 97, 213, 259, 367, 488, 496, 504, 505, 520, 534, 538, 552, 588, 591, 593, 594, 596, 615, 634, 635, 636, 665, 748, 750, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810], "all": [0, 2, 3, 4, 6, 7, 8, 10, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 41, 42, 44, 45, 47, 49, 50, 54, 55, 58, 59, 61, 63, 68, 69, 71, 72, 73, 76, 77, 78, 81, 82, 84, 86, 91, 92, 94, 121, 134, 141, 144, 145, 146, 200, 207, 239, 243, 271, 272, 315, 316, 325, 342, 349, 352, 355, 356, 358, 367, 388, 397, 398, 404, 408, 416, 419, 447, 458, 487, 492, 495, 512, 532, 533, 549, 556, 557, 571, 574, 586, 588, 589, 591, 592, 593, 594, 596, 597, 598, 600, 601, 605, 616, 618, 619, 622, 635, 640, 641, 644, 649, 658, 662, 664, 670, 671, 672, 673, 674, 675, 684, 685, 686, 687, 693, 696, 701, 730, 731, 732, 738, 741, 746, 750, 751, 752, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 809, 810], "don": [0, 3, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 69, 92, 750, 756, 757, 758, 765, 766, 767, 771, 775, 779, 782, 788, 792, 798], "contribut": [0, 43, 54, 77, 367, 484, 752, 755, 756, 757, 758, 763, 771, 777, 784, 793, 807], "output": [0, 2, 6, 7, 8, 10, 19, 25, 26, 28, 29, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 352, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 404, 406, 408, 409, 412, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 431, 432, 435, 437, 438, 439, 440, 441, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 497, 498, 499, 503, 504, 505, 507, 511, 520, 527, 534, 535, 536, 559, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 686, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 744, 750, 753, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 788, 789, 792, 794, 804], "print": [0, 6, 7, 9, 10, 13, 15, 19, 20, 22, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 165, 166, 169, 171, 172, 174, 179, 191, 192, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 213, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 311, 312, 315, 320, 322, 335, 336, 341, 345, 347, 349, 352, 355, 356, 357, 358, 361, 367, 373, 374, 375, 376, 378, 379, 381, 383, 386, 388, 391, 392, 393, 394, 396, 398, 402, 404, 406, 414, 420, 421, 422, 423, 424, 430, 431, 432, 443, 447, 452, 453, 455, 456, 460, 464, 465, 466, 481, 482, 483, 484, 490, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 530, 533, 534, 535, 539, 540, 541, 544, 547, 548, 549, 550, 552, 554, 556, 557, 558, 562, 563, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 640, 642, 643, 644, 646, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 741, 744, 748, 750, 757, 758, 764, 768, 778, 779, 781, 784, 786, 787, 788], "statement": [0, 2, 36, 41, 765, 776, 779, 782, 792], "logger": 0, "etc": [0, 3, 31, 36, 43, 50, 54, 63, 65, 69, 73, 77, 86, 92, 129, 137, 138, 141, 355, 362, 383, 388, 398, 467, 468, 470, 471, 586, 600, 602, 693, 694, 695, 696, 704, 705, 706, 707, 731, 732, 733, 734, 735, 736, 737, 756, 757, 758, 760, 761, 762, 763, 764, 766, 768, 770, 772, 777, 778, 779, 780, 784, 786, 787, 792, 794, 798, 801, 803, 809], "ha": [0, 1, 3, 6, 8, 10, 13, 15, 19, 21, 25, 28, 29, 31, 34, 36, 40, 47, 50, 54, 59, 61, 65, 67, 71, 74, 77, 78, 82, 84, 88, 90, 94, 139, 195, 219, 239, 242, 244, 246, 256, 272, 274, 277, 279, 282, 284, 285, 289, 317, 318, 349, 355, 357, 358, 367, 390, 422, 431, 454, 455, 458, 480, 482, 483, 485, 516, 586, 588, 589, 593, 594, 596, 601, 602, 604, 619, 632, 633, 641, 642, 644, 646, 649, 657, 664, 702, 705, 706, 707, 712, 713, 716, 718, 719, 720, 721, 730, 741, 756, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 788, 789, 791, 792, 796, 797, 798, 799, 802, 803, 805, 806, 809], "": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 43, 45, 46, 47, 50, 54, 55, 56, 59, 67, 77, 79, 82, 90, 117, 139, 144, 145, 165, 166, 195, 198, 199, 211, 246, 281, 316, 320, 322, 331, 333, 339, 343, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 370, 371, 377, 383, 388, 398, 402, 406, 411, 418, 422, 438, 439, 447, 461, 462, 463, 471, 481, 490, 508, 509, 529, 551, 552, 573, 575, 576, 577, 578, 580, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 598, 604, 608, 610, 612, 614, 624, 635, 642, 643, 649, 685, 719, 721, 730, 731, 732, 733, 734, 735, 736, 737, 741, 750, 751, 752, 754, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 791, 792, 793, 794, 797, 798, 799, 802, 803, 804, 806, 807, 808, 809], "likewis": [0, 2, 19, 24, 28, 35, 750, 758, 764, 766, 769, 772, 773, 777, 782, 787, 809], "redund": [0, 750, 766, 770, 777], "oper": [0, 19, 20, 25, 28, 29, 30, 34, 41, 44, 50, 51, 53, 54, 55, 58, 71, 73, 74, 76, 77, 78, 81, 97, 112, 137, 138, 179, 209, 217, 222, 224, 233, 236, 239, 246, 261, 263, 272, 273, 277, 281, 284, 289, 297, 317, 318, 346, 347, 349, 354, 355, 358, 369, 370, 371, 373, 374, 375, 381, 382, 383, 387, 391, 392, 393, 394, 396, 397, 398, 454, 496, 503, 504, 505, 552, 583, 586, 587, 588, 589, 591, 593, 594, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 644, 646, 718, 720, 732, 750, 756, 757, 759, 760, 761, 764, 766, 767, 768, 769, 770, 773, 776, 777, 779, 782, 784, 787, 788, 794, 796, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810], "origin": [0, 2, 9, 11, 26, 28, 29, 30, 31, 32, 34, 41, 42, 43, 47, 54, 59, 61, 67, 71, 77, 82, 84, 90, 94, 96, 97, 227, 252, 279, 310, 349, 356, 358, 367, 416, 440, 446, 448, 451, 482, 483, 487, 488, 489, 490, 589, 594, 596, 604, 633, 661, 662, 713, 741, 750, 756, 757, 758, 762, 763, 765, 766, 774, 776, 777, 778, 784, 798, 803, 804], "also": [0, 2, 3, 6, 7, 9, 11, 13, 15, 19, 21, 23, 24, 26, 28, 29, 31, 33, 34, 35, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 167, 170, 171, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 355, 356, 358, 365, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 586, 587, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 683, 684, 685, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 741, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 787, 788, 789, 791, 792, 793, 796, 797, 799, 800, 801, 802, 803, 804, 806, 808, 809, 810], "increas": [0, 9, 11, 21, 28, 31, 54, 59, 61, 77, 82, 84, 358, 367, 447, 484, 594, 596, 598, 647, 656, 669, 685, 766, 770, 777, 780, 782, 796, 803], "its": [0, 3, 11, 19, 21, 28, 29, 31, 34, 41, 42, 44, 49, 51, 54, 61, 71, 74, 77, 78, 84, 106, 109, 112, 118, 152, 157, 158, 159, 160, 161, 212, 239, 272, 291, 297, 347, 355, 358, 367, 394, 458, 484, 507, 555, 583, 585, 587, 588, 589, 591, 594, 596, 598, 632, 657, 661, 662, 666, 679, 730, 750, 756, 757, 761, 764, 765, 766, 767, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 789, 792, 794, 802, 803, 809], "overal": [0, 593, 616, 764, 766, 767, 769, 789, 799, 801, 802, 803], "obj": [0, 2, 46, 122, 123, 586], "none": [0, 2, 6, 8, 9, 11, 28, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 171, 172, 174, 176, 179, 189, 191, 194, 195, 207, 208, 209, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 523, 526, 531, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 549, 550, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 743, 750, 754, 760, 761, 762, 764, 765, 766, 767, 768, 770, 772, 773, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789], "arg_stateful_idx": [0, 733, 734], "kwarg_stateful_idx": [0, 733, 734], "include_gener": 0, "true": [0, 2, 6, 7, 8, 9, 10, 11, 13, 15, 19, 22, 23, 25, 26, 28, 29, 33, 34, 35, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 120, 123, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 191, 195, 196, 198, 199, 203, 206, 207, 208, 209, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 534, 535, 536, 539, 542, 543, 545, 546, 548, 549, 550, 552, 554, 556, 557, 559, 564, 565, 567, 568, 570, 573, 574, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 684, 685, 686, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 732, 733, 734, 735, 736, 738, 741, 744, 748, 750, 754, 757, 762, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 778, 779, 781, 782, 784, 787, 788, 789], "array_cach": 0, "return_backend_compiled_fn": [0, 28, 29], "fals": [0, 2, 8, 9, 11, 15, 19, 28, 31, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 123, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 196, 201, 203, 206, 207, 209, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 530, 534, 535, 536, 539, 542, 543, 545, 546, 548, 549, 550, 552, 554, 556, 557, 559, 564, 565, 567, 568, 570, 573, 574, 576, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 683, 684, 685, 686, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 732, 733, 734, 736, 738, 741, 744, 745, 748, 750, 754, 757, 760, 762, 765, 766, 767, 768, 770, 776, 777, 778, 779, 781, 782, 784, 787, 788, 789], "static_argnum": [0, 784], "static_argnam": [0, 784], "arg": [0, 2, 6, 8, 9, 10, 13, 15, 23, 24, 26, 28, 29, 33, 34, 35, 46, 49, 71, 93, 100, 117, 202, 212, 558, 585, 586, 588, 591, 728, 729, 732, 734, 738, 741, 744, 748, 750, 761, 766, 767, 770, 775, 776, 777, 782, 784, 788], "kwarg": [0, 2, 6, 7, 8, 11, 28, 42, 46, 49, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 100, 202, 358, 447, 530, 558, 586, 588, 591, 728, 729, 732, 734, 741, 748, 750, 761, 766, 767, 770, 773, 776, 777, 782, 784, 788], "callabl": [0, 2, 46, 54, 55, 69, 77, 78, 81, 92, 117, 118, 120, 124, 125, 126, 127, 128, 165, 166, 198, 199, 212, 345, 353, 355, 358, 397, 426, 447, 493, 497, 502, 504, 508, 509, 530, 558, 571, 575, 577, 582, 585, 586, 587, 588, 591, 592, 597, 598, 670, 671, 672, 679, 680, 681, 683, 684, 685, 686, 736, 745, 764, 770, 775, 777, 784], "set": [0, 2, 6, 13, 15, 21, 28, 29, 31, 34, 42, 43, 44, 45, 46, 49, 54, 55, 58, 59, 64, 66, 67, 71, 77, 78, 81, 82, 87, 89, 90, 109, 112, 120, 144, 146, 180, 181, 182, 183, 184, 195, 208, 209, 210, 211, 212, 227, 315, 324, 338, 340, 345, 349, 352, 353, 355, 356, 358, 367, 377, 401, 405, 407, 423, 437, 447, 450, 456, 481, 486, 487, 488, 489, 490, 492, 496, 503, 520, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 552, 560, 583, 585, 586, 587, 588, 589, 591, 593, 594, 598, 600, 601, 603, 604, 616, 620, 622, 633, 635, 638, 641, 642, 673, 680, 683, 684, 685, 690, 691, 697, 699, 700, 704, 706, 707, 708, 711, 719, 721, 730, 731, 732, 734, 736, 741, 747, 751, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 787, 793, 796, 801, 802, 803, 804, 805, 807, 810], "them": [0, 2, 5, 6, 9, 11, 13, 15, 17, 28, 29, 34, 497, 533, 591, 732, 750, 753, 756, 758, 760, 761, 762, 763, 764, 765, 766, 770, 771, 774, 776, 777, 778, 779, 781, 784, 786, 787, 788, 792, 794, 795, 796, 797, 798, 800, 801, 803, 805, 809], "If": [0, 1, 2, 3, 4, 6, 7, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 179, 195, 211, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 316, 317, 320, 321, 322, 324, 325, 326, 328, 332, 333, 338, 339, 341, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 383, 386, 388, 390, 391, 392, 393, 398, 402, 404, 406, 407, 408, 413, 415, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 435, 437, 438, 439, 442, 446, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 526, 527, 534, 535, 539, 549, 550, 552, 554, 556, 557, 570, 571, 574, 576, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 616, 617, 619, 620, 621, 622, 624, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 685, 686, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 731, 732, 734, 735, 741, 750, 751, 752, 753, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 789, 792, 793, 796], "specifi": [0, 2, 25, 26, 28, 29, 33, 34, 35, 46, 48, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 91, 94, 104, 106, 109, 112, 121, 130, 135, 137, 142, 144, 145, 147, 151, 153, 200, 205, 207, 211, 212, 213, 281, 290, 316, 320, 333, 338, 349, 352, 355, 356, 357, 358, 362, 367, 373, 374, 375, 377, 383, 388, 398, 404, 413, 415, 418, 422, 423, 425, 437, 440, 449, 450, 452, 453, 468, 479, 481, 482, 483, 486, 487, 490, 493, 510, 511, 513, 516, 529, 539, 571, 583, 586, 587, 588, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 619, 620, 622, 624, 625, 627, 628, 633, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 662, 664, 665, 668, 669, 677, 678, 680, 681, 688, 689, 690, 691, 694, 695, 696, 698, 699, 700, 702, 705, 706, 707, 708, 712, 713, 714, 718, 720, 722, 723, 728, 730, 732, 733, 734, 757, 759, 763, 766, 767, 772, 773, 774, 776, 777, 778, 779, 784, 787, 788, 809], "eagerli": [0, 2, 23, 24, 28, 29, 33, 34, 35, 42, 750], "otherwis": [0, 1, 2, 28, 29, 46, 49, 50, 51, 53, 54, 55, 58, 59, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 121, 123, 129, 134, 136, 137, 138, 141, 143, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 170, 174, 178, 179, 195, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 301, 302, 304, 313, 314, 320, 321, 322, 324, 325, 326, 332, 333, 339, 341, 343, 344, 345, 347, 349, 352, 355, 356, 361, 373, 374, 375, 378, 379, 380, 406, 417, 418, 420, 421, 423, 424, 427, 428, 429, 432, 433, 435, 437, 438, 439, 446, 453, 455, 456, 459, 461, 463, 464, 465, 466, 468, 480, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 527, 534, 535, 549, 550, 552, 554, 556, 557, 558, 570, 574, 576, 581, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 616, 617, 619, 620, 621, 622, 623, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 642, 646, 648, 649, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 686, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 734, 735, 741, 750, 758, 761, 764, 766, 767, 768, 773, 774, 776, 779, 784], "happen": [0, 2, 24, 28, 29, 291, 589, 750, 757, 758, 767, 776, 779, 787, 798], "lazili": [0, 2, 23, 24, 25, 28, 29, 33, 35, 46, 750], "paramet": [0, 2, 15, 26, 28, 29, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 531, 534, 535, 538, 539, 540, 541, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 746, 750, 756, 761, 769, 770, 772, 777, 778, 779, 780, 784, 786, 787, 791, 804], "creat": [0, 1, 2, 8, 19, 20, 21, 23, 24, 28, 29, 30, 31, 33, 34, 35, 42, 43, 44, 46, 47, 50, 53, 54, 63, 71, 73, 76, 77, 82, 86, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 273, 303, 304, 313, 314, 315, 349, 355, 356, 358, 362, 373, 374, 375, 396, 407, 416, 419, 425, 447, 452, 467, 468, 469, 470, 471, 538, 554, 571, 582, 586, 589, 591, 592, 600, 637, 693, 694, 695, 696, 698, 729, 731, 732, 733, 734, 735, 736, 737, 751, 752, 757, 758, 761, 762, 763, 765, 766, 767, 770, 773, 774, 776, 777, 778, 779, 782, 784, 785, 788, 790, 791, 794, 797, 803, 804, 809], "option": [0, 2, 34, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 169, 179, 191, 195, 207, 210, 211, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 501, 503, 504, 505, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 526, 531, 534, 535, 539, 549, 550, 552, 554, 556, 557, 558, 570, 572, 573, 574, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 683, 684, 685, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 731, 734, 736, 737, 744, 748, 756, 757, 758, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 782, 784, 789, 792, 803, 809], "list": [0, 3, 7, 8, 9, 10, 44, 49, 50, 51, 53, 54, 55, 58, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 134, 136, 139, 140, 141, 143, 148, 152, 154, 167, 171, 172, 179, 195, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 339, 340, 341, 343, 344, 345, 352, 355, 356, 358, 365, 373, 374, 375, 377, 378, 379, 380, 391, 392, 393, 394, 404, 407, 410, 415, 416, 419, 420, 421, 423, 424, 427, 428, 429, 430, 432, 433, 442, 453, 455, 456, 459, 461, 463, 464, 465, 466, 468, 473, 481, 482, 483, 484, 492, 494, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 512, 514, 516, 518, 519, 520, 522, 523, 526, 530, 534, 535, 549, 550, 552, 554, 555, 556, 557, 558, 570, 571, 576, 581, 586, 587, 588, 589, 591, 593, 594, 596, 598, 599, 602, 603, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 644, 646, 651, 652, 653, 654, 655, 658, 661, 662, 663, 664, 665, 668, 669, 673, 674, 675, 676, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 709, 710, 712, 713, 716, 718, 719, 721, 722, 723, 729, 730, 732, 738, 744, 755, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 784, 787, 788, 789, 792, 803, 804, 809], "instanc": [0, 19, 25, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 171, 172, 174, 179, 196, 208, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 355, 356, 357, 358, 361, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 545, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 752, 756, 757, 758, 760, 761, 762, 766, 768, 769, 770, 772, 773, 774, 775, 776, 779, 787, 788, 789, 794, 804], "consid": [0, 23, 33, 34, 54, 59, 65, 77, 82, 112, 146, 267, 268, 315, 320, 323, 333, 349, 352, 356, 367, 404, 407, 416, 481, 583, 586, 589, 594, 602, 624, 635, 704, 705, 706, 707, 731, 761, 762, 765, 766, 773, 775, 780, 782, 785, 786, 787, 796, 797, 800, 804, 808, 810], "dure": [0, 9, 11, 21, 23, 28, 31, 33, 34, 52, 56, 67, 71, 75, 79, 90, 213, 355, 378, 379, 380, 538, 558, 572, 573, 578, 588, 591, 592, 593, 594, 597, 604, 616, 632, 670, 671, 672, 719, 721, 730, 733, 734, 735, 736, 757, 764, 766, 767, 770, 773, 774, 776, 777, 778, 779, 782, 792, 803, 804, 809], "posit": [0, 44, 46, 49, 53, 54, 55, 59, 60, 61, 76, 77, 78, 82, 83, 84, 94, 132, 134, 146, 164, 219, 220, 221, 225, 228, 239, 246, 253, 254, 260, 262, 272, 273, 280, 281, 285, 286, 290, 304, 315, 320, 323, 333, 349, 352, 356, 358, 401, 417, 423, 446, 497, 507, 571, 584, 586, 587, 589, 591, 594, 595, 596, 600, 601, 605, 621, 624, 646, 651, 657, 662, 697, 702, 722, 723, 729, 750, 756, 758, 760, 764, 777, 779, 780, 787, 791, 805], "argument": [0, 2, 23, 25, 26, 28, 29, 31, 33, 34, 35, 40, 42, 44, 46, 49, 50, 53, 54, 55, 59, 71, 72, 76, 77, 78, 94, 97, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 391, 392, 393, 394, 404, 447, 481, 484, 488, 493, 494, 496, 497, 502, 504, 505, 510, 514, 516, 518, 520, 530, 534, 535, 552, 557, 558, 571, 581, 586, 587, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 679, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 732, 733, 734, 741, 744, 746, 750, 756, 759, 760, 761, 762, 763, 764, 768, 769, 771, 773, 778, 779, 780, 782, 784, 786, 787, 794, 796, 803], "keyword": [0, 2, 26, 28, 29, 44, 46, 49, 50, 54, 71, 77, 97, 139, 273, 358, 367, 447, 481, 494, 497, 530, 558, 586, 589, 591, 598, 604, 679, 720, 733, 734, 744, 756, 761, 764, 766, 767, 774, 776, 777, 778, 779, 780, 782, 787], "str": [0, 2, 44, 46, 49, 50, 54, 55, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 139, 141, 143, 148, 149, 152, 154, 156, 157, 158, 159, 163, 164, 167, 168, 169, 170, 171, 172, 174, 176, 179, 180, 181, 182, 183, 184, 191, 192, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 355, 356, 357, 358, 361, 367, 373, 374, 375, 377, 378, 379, 380, 382, 383, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 404, 416, 419, 420, 421, 422, 423, 424, 427, 428, 429, 431, 432, 437, 453, 455, 456, 461, 462, 463, 464, 465, 466, 468, 470, 481, 482, 483, 484, 490, 492, 493, 495, 496, 498, 499, 501, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 531, 534, 535, 537, 538, 547, 549, 550, 552, 554, 556, 557, 570, 574, 581, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 679, 680, 685, 690, 693, 694, 695, 696, 698, 701, 704, 705, 706, 708, 712, 713, 714, 716, 718, 719, 721, 722, 723, 732, 734, 735, 744, 766, 767, 770, 773, 776, 777, 780, 784, 789], "current": [0, 19, 28, 29, 42, 43, 54, 55, 71, 77, 97, 117, 165, 166, 169, 186, 187, 188, 189, 190, 191, 197, 198, 199, 200, 205, 207, 356, 358, 402, 403, 447, 508, 509, 512, 517, 521, 532, 533, 552, 585, 587, 588, 591, 594, 598, 626, 673, 683, 684, 730, 734, 741, 747, 750, 753, 756, 757, 758, 760, 762, 764, 765, 766, 767, 770, 771, 773, 776, 777, 778, 779, 782, 784, 789, 791, 792, 798, 803, 809, 810], "bool": [0, 2, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 129, 134, 135, 136, 137, 138, 139, 141, 143, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 187, 191, 195, 196, 198, 199, 201, 203, 206, 207, 212, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 316, 320, 321, 322, 324, 326, 332, 333, 338, 339, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 373, 374, 375, 377, 378, 379, 380, 390, 391, 392, 393, 396, 404, 407, 410, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 432, 433, 435, 436, 437, 438, 439, 442, 446, 450, 453, 455, 456, 459, 461, 463, 464, 465, 466, 468, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 534, 535, 539, 548, 549, 550, 552, 554, 556, 557, 570, 573, 574, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 616, 617, 619, 620, 621, 622, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 639, 640, 642, 646, 647, 649, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 684, 685, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 732, 735, 736, 744, 748, 766, 768, 770, 776, 777, 779, 780, 782, 784, 789], "includ": [0, 2, 3, 17, 21, 31, 36, 50, 53, 54, 55, 59, 64, 67, 68, 71, 73, 76, 77, 78, 82, 87, 90, 91, 121, 122, 123, 137, 138, 140, 146, 219, 243, 247, 248, 249, 252, 254, 257, 265, 273, 286, 291, 305, 308, 309, 310, 315, 317, 319, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 340, 343, 344, 349, 355, 358, 367, 373, 374, 375, 400, 403, 405, 438, 439, 441, 444, 446, 448, 451, 469, 471, 472, 480, 484, 486, 487, 489, 490, 516, 570, 586, 589, 591, 594, 598, 600, 601, 604, 605, 626, 647, 649, 673, 696, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 735, 746, 750, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 776, 777, 778, 779, 780, 782, 784, 791, 792, 797, 800, 801, 803, 805, 808, 809, 810], "creation": [0, 44, 54, 71, 77, 97, 763, 766, 767, 772, 774, 777, 778, 779, 780, 784, 803, 805, 809], "constant": [0, 13, 15, 20, 23, 24, 30, 33, 35, 40, 54, 61, 62, 77, 84, 85, 94, 357, 358, 422, 447, 596, 598, 599, 656, 679, 692, 731, 733, 734, 735, 750, 773, 778, 780, 788, 789, 792], "appear": [0, 358, 438, 439, 571, 591, 757, 758, 760, 777, 782], "whether": [0, 2, 17, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 122, 123, 134, 136, 141, 143, 148, 151, 152, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 179, 191, 195, 196, 198, 199, 201, 203, 206, 207, 209, 212, 213, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 316, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 349, 352, 355, 356, 357, 358, 367, 373, 374, 375, 377, 378, 379, 380, 396, 411, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 432, 433, 435, 437, 438, 439, 442, 446, 453, 455, 456, 459, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 530, 534, 535, 536, 537, 539, 542, 543, 545, 546, 548, 549, 550, 552, 554, 556, 557, 564, 565, 568, 570, 573, 574, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 604, 605, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 631, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 684, 685, 686, 690, 691, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 728, 729, 732, 733, 734, 735, 736, 744, 750, 751, 756, 757, 761, 764, 766, 768, 772, 776, 777, 779, 781, 782], "appli": [0, 2, 9, 11, 25, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 390, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 583, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 640, 642, 646, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 679, 682, 685, 686, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 728, 732, 735, 750, 751, 753, 756, 757, 758, 761, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 782, 786, 787, 788, 789, 790, 792, 794, 804], "nativ": [0, 2, 6, 7, 19, 28, 29, 49, 50, 52, 55, 72, 75, 78, 96, 100, 140, 149, 150, 156, 157, 158, 159, 160, 161, 175, 178, 193, 194, 195, 196, 206, 214, 218, 520, 522, 526, 533, 538, 555, 586, 587, 588, 591, 729, 741, 750, 754, 756, 762, 766, 767, 770, 773, 774, 776, 777, 778, 779, 784, 786, 787, 794, 801, 810], "e": [0, 28, 45, 46, 50, 54, 59, 63, 65, 66, 67, 69, 76, 77, 82, 86, 89, 90, 92, 94, 96, 129, 138, 139, 142, 143, 146, 150, 179, 192, 219, 220, 221, 225, 227, 228, 231, 233, 235, 239, 240, 242, 245, 246, 252, 253, 260, 261, 262, 263, 270, 271, 272, 273, 275, 277, 279, 281, 282, 285, 286, 290, 296, 315, 349, 355, 356, 362, 367, 368, 373, 374, 377, 391, 392, 393, 394, 406, 408, 414, 467, 468, 469, 470, 471, 482, 483, 491, 584, 586, 587, 588, 589, 593, 594, 596, 598, 600, 602, 603, 604, 619, 622, 627, 628, 632, 633, 635, 638, 641, 642, 643, 646, 649, 657, 665, 676, 680, 681, 682, 685, 690, 691, 694, 695, 696, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 732, 744, 750, 751, 752, 754, 756, 757, 758, 759, 760, 762, 764, 766, 770, 775, 777, 779, 784, 787, 792, 793, 794, 797, 798, 799], "tf": [0, 2, 6, 8, 13, 15, 20, 23, 24, 26, 28, 29, 30, 31, 33, 35, 40, 45, 46, 750, 761, 762, 766, 767, 772, 776, 777, 779, 780, 782, 784, 789, 792, 794, 803], "after": [0, 2, 6, 7, 8, 9, 10, 11, 28, 29, 43, 54, 55, 56, 58, 62, 71, 77, 78, 79, 81, 85, 185, 286, 339, 352, 355, 356, 358, 377, 378, 379, 380, 397, 414, 436, 447, 520, 573, 576, 578, 579, 580, 587, 589, 591, 592, 593, 598, 599, 606, 607, 608, 609, 611, 613, 615, 616, 684, 692, 736, 741, 750, 752, 756, 757, 758, 760, 762, 763, 765, 766, 768, 770, 772, 775, 778, 779, 783, 793, 803], "union": [0, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 526, 527, 529, 530, 534, 535, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 681, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 736, 737, 761, 764, 766, 767, 768, 770, 772, 773, 776, 780, 782, 784, 789], "int": [0, 8, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 100, 107, 111, 112, 122, 123, 132, 134, 135, 136, 137, 138, 141, 144, 145, 146, 153, 160, 163, 164, 167, 174, 189, 203, 204, 205, 212, 213, 222, 229, 230, 231, 232, 233, 234, 246, 249, 273, 282, 288, 291, 295, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 324, 325, 327, 331, 338, 340, 342, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 404, 406, 407, 408, 410, 413, 415, 416, 418, 419, 422, 425, 426, 430, 432, 433, 436, 437, 440, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 493, 503, 504, 505, 507, 510, 511, 514, 529, 532, 534, 549, 550, 551, 555, 571, 572, 573, 574, 575, 578, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 622, 624, 625, 633, 634, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 679, 680, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 744, 764, 766, 767, 768, 770, 772, 773, 776, 778, 779, 780, 782, 784, 789], "iter": [0, 42, 44, 49, 54, 55, 61, 69, 71, 77, 78, 84, 92, 97, 117, 118, 120, 212, 311, 312, 349, 356, 358, 407, 416, 419, 447, 492, 530, 585, 588, 591, 596, 598, 656, 660, 667, 669, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 689, 691, 744, 760, 762, 764, 784, 787, 798], "For": [0, 1, 9, 10, 11, 19, 21, 28, 29, 31, 34, 36, 50, 54, 59, 65, 77, 82, 121, 139, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 274, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 317, 318, 322, 341, 349, 352, 356, 358, 413, 415, 429, 447, 450, 586, 589, 594, 596, 602, 604, 640, 642, 646, 654, 665, 704, 705, 706, 707, 715, 717, 718, 720, 729, 752, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789, 791, 792, 796, 797, 798, 800, 801, 804, 809, 810], "jax": [0, 2, 5, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 34, 40, 42, 46, 48, 53, 54, 55, 65, 70, 76, 78, 104, 106, 109, 112, 290, 331, 352, 367, 490, 520, 552, 571, 583, 589, 591, 602, 704, 705, 706, 707, 728, 741, 750, 754, 755, 756, 757, 758, 760, 762, 766, 767, 770, 772, 775, 776, 777, 778, 779, 780, 782, 784, 786, 789, 792, 797, 798, 804, 806, 809, 810], "jit": [0, 6, 9, 11, 28, 31, 784, 792, 803], "tupl": [0, 2, 46, 49, 50, 51, 53, 54, 55, 58, 59, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 122, 123, 134, 136, 140, 141, 143, 146, 148, 152, 153, 154, 165, 166, 167, 171, 172, 178, 179, 185, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 307, 312, 315, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 352, 354, 355, 356, 358, 361, 362, 363, 365, 367, 373, 374, 375, 377, 378, 379, 380, 382, 387, 388, 391, 392, 393, 394, 396, 397, 398, 403, 404, 407, 411, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 430, 432, 442, 447, 453, 455, 456, 458, 461, 463, 464, 465, 466, 468, 469, 471, 472, 473, 481, 482, 483, 484, 486, 487, 488, 489, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 539, 549, 550, 551, 552, 554, 555, 556, 557, 570, 571, 572, 573, 574, 576, 578, 581, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 642, 644, 645, 646, 649, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 693, 694, 695, 696, 698, 701, 702, 704, 705, 706, 707, 708, 709, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 734, 744, 761, 766, 772, 773, 776, 778, 779, 784, 787, 788, 792], "dict": [0, 2, 19, 28, 29, 42, 46, 49, 55, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 165, 166, 167, 171, 172, 179, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 358, 377, 378, 379, 380, 420, 421, 423, 424, 427, 428, 429, 432, 447, 453, 455, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 493, 495, 496, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 530, 534, 535, 549, 550, 552, 554, 556, 557, 570, 581, 587, 588, 591, 598, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 673, 674, 676, 679, 680, 681, 682, 684, 685, 686, 690, 691, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 729, 732, 734, 741, 761, 764, 787, 788, 794], "return": [0, 2, 6, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 730, 731, 732, 734, 736, 741, 744, 745, 746, 747, 750, 757, 758, 761, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 792, 804], "type": [0, 2, 7, 9, 13, 15, 19, 25, 28, 29, 34, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 731, 732, 734, 738, 741, 744, 745, 748, 750, 752, 756, 757, 758, 759, 760, 761, 764, 767, 768, 769, 770, 772, 774, 776, 778, 779, 780, 782, 784, 786, 787, 803, 804, 807], "lazygraph": [0, 2], "modul": [0, 6, 8, 9, 11, 13, 15, 17, 18, 19, 25, 26, 28, 29, 30, 34, 40, 41, 42, 44, 45, 46, 69, 71, 92, 97, 348, 350, 351, 359, 360, 364, 531, 591, 605, 724, 728, 729, 730, 732, 733, 735, 737, 740, 741, 750, 753, 757, 761, 762, 763, 770, 773, 776, 777, 779, 784, 785, 787, 789, 791, 792, 798, 803, 804, 806], "moduletyp": [0, 2, 69, 92], "A": [0, 1, 2, 28, 29, 43, 50, 51, 54, 55, 61, 63, 67, 68, 71, 74, 76, 77, 78, 81, 82, 84, 86, 88, 91, 94, 97, 117, 118, 120, 132, 140, 146, 152, 193, 212, 274, 276, 280, 304, 315, 317, 318, 320, 330, 333, 337, 338, 349, 352, 355, 356, 358, 361, 362, 367, 383, 397, 404, 414, 423, 432, 435, 453, 456, 461, 462, 463, 464, 467, 468, 469, 470, 471, 479, 488, 490, 495, 497, 506, 518, 519, 549, 550, 551, 554, 582, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 598, 600, 604, 605, 616, 625, 627, 630, 631, 636, 637, 641, 642, 654, 657, 659, 663, 665, 673, 676, 678, 680, 681, 682, 683, 684, 688, 689, 690, 691, 693, 694, 695, 696, 698, 704, 714, 722, 723, 730, 731, 748, 750, 755, 756, 757, 759, 764, 766, 767, 770, 772, 773, 777, 778, 779, 784, 787, 792, 794, 795, 796, 797, 798, 803, 804], "non": [0, 2, 21, 31, 51, 53, 54, 59, 63, 64, 67, 68, 74, 76, 77, 82, 86, 87, 90, 91, 134, 151, 169, 178, 247, 267, 268, 273, 324, 329, 342, 352, 356, 358, 367, 404, 407, 411, 428, 429, 484, 487, 586, 587, 589, 594, 598, 600, 601, 604, 605, 622, 623, 633, 635, 642, 644, 648, 649, 686, 695, 699, 700, 701, 702, 715, 716, 717, 718, 719, 721, 722, 723, 731, 733, 734, 736, 761, 764, 766, 768, 784, 803], "initi": [0, 2, 7, 28, 29, 45, 54, 58, 71, 77, 81, 97, 356, 367, 407, 416, 419, 489, 593, 618, 729, 730, 732, 733, 734, 736, 737, 750, 758, 762, 766, 767, 778, 779, 784, 797, 803, 809, 810], "object": [0, 2, 19, 24, 26, 28, 42, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 129, 133, 134, 155, 164, 167, 175, 178, 213, 271, 468, 574, 586, 587, 588, 592, 598, 600, 676, 677, 678, 680, 681, 682, 688, 689, 690, 691, 698, 729, 732, 733, 734, 741, 744, 750, 761, 762, 764, 765, 773, 774, 777, 778, 779, 782, 786, 789, 803, 809], "forward": [0, 8, 10, 15, 28, 29, 42, 44, 54, 77, 355, 377, 382, 383, 387, 388, 398, 729, 731, 733, 734, 736, 750, 757, 762, 769, 775, 779, 780, 782, 789, 791, 792, 803, 804], "pass": [0, 2, 6, 8, 9, 10, 11, 13, 15, 19, 26, 28, 29, 35, 41, 42, 44, 46, 47, 53, 54, 69, 71, 76, 77, 92, 97, 117, 118, 120, 156, 178, 193, 212, 227, 273, 358, 361, 362, 367, 437, 461, 463, 467, 487, 488, 520, 585, 587, 588, 589, 591, 597, 670, 671, 729, 733, 734, 736, 737, 741, 744, 748, 750, 754, 756, 758, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 792, 801], "same": [0, 2, 6, 7, 8, 9, 11, 15, 21, 23, 28, 31, 33, 35, 40, 41, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 90, 94, 95, 96, 110, 121, 131, 136, 138, 139, 141, 143, 144, 145, 146, 148, 151, 152, 153, 164, 167, 212, 219, 220, 221, 222, 224, 226, 230, 232, 235, 239, 245, 246, 252, 272, 274, 276, 279, 281, 282, 283, 292, 296, 304, 314, 315, 316, 317, 318, 322, 328, 344, 347, 349, 352, 355, 356, 358, 361, 363, 365, 367, 373, 374, 375, 391, 392, 393, 394, 396, 397, 398, 403, 407, 408, 416, 417, 418, 419, 431, 432, 447, 455, 461, 463, 472, 474, 479, 480, 481, 482, 483, 484, 485, 490, 527, 581, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 655, 658, 659, 661, 662, 664, 665, 670, 671, 686, 696, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 732, 744, 750, 752, 757, 758, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789, 792, 796, 798, 800, 802, 809, 810], "copi": [0, 2, 3, 44, 47, 50, 51, 52, 53, 54, 55, 61, 71, 73, 74, 75, 76, 77, 78, 84, 94, 95, 122, 123, 129, 133, 151, 213, 273, 358, 425, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 513, 539, 549, 556, 557, 586, 587, 588, 589, 591, 596, 598, 603, 657, 658, 659, 661, 663, 664, 666, 668, 674, 709, 711, 757, 758, 760, 762, 765, 766, 769, 777, 778, 784, 791, 792], "everi": [0, 2, 25, 28, 29, 34, 42, 50, 54, 55, 77, 78, 135, 136, 296, 331, 347, 352, 355, 358, 391, 392, 393, 458, 492, 586, 591, 752, 756, 758, 760, 762, 763, 765, 766, 768, 771, 772, 773, 774, 776, 777, 778, 779, 784, 786, 788, 803], "method": [0, 2, 19, 28, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 151, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 356, 357, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 586, 587, 589, 591, 592, 594, 595, 598, 601, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 684, 685, 686, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 730, 731, 732, 733, 734, 756, 758, 760, 761, 762, 765, 766, 767, 768, 769, 772, 779, 780, 784, 785, 788, 789, 792, 804, 810], "To": [0, 1, 2, 3, 10, 13, 15, 19, 28, 29, 40, 43, 44, 45, 246, 357, 422, 544, 589, 591, 731, 752, 756, 757, 760, 761, 762, 763, 766, 768, 770, 771, 773, 774, 777, 778, 779, 780, 787, 788, 789], "you": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 77, 78, 94, 96, 97, 358, 367, 435, 488, 510, 511, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 619, 728, 729, 731, 732, 734, 735, 736, 737, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 803], "need": [0, 1, 2, 3, 6, 9, 11, 17, 19, 25, 26, 28, 29, 42, 43, 44, 54, 55, 61, 77, 78, 84, 355, 356, 367, 377, 382, 383, 387, 403, 488, 498, 499, 520, 591, 593, 594, 596, 598, 619, 626, 654, 657, 684, 750, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 780, 782, 784, 786, 787, 791, 792, 798, 799, 803, 804, 805, 809], "correspond": [0, 2, 3, 6, 9, 11, 15, 28, 29, 43, 51, 53, 54, 55, 58, 61, 64, 65, 67, 71, 74, 76, 77, 81, 84, 90, 94, 97, 152, 164, 167, 227, 277, 291, 317, 327, 328, 349, 352, 355, 356, 358, 361, 367, 377, 383, 394, 398, 400, 403, 404, 405, 438, 439, 452, 461, 462, 463, 482, 483, 549, 571, 587, 589, 591, 593, 594, 596, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 622, 626, 627, 633, 640, 641, 661, 662, 693, 699, 700, 704, 705, 706, 707, 712, 713, 718, 719, 720, 721, 744, 750, 756, 758, 761, 762, 764, 765, 766, 768, 769, 770, 772, 773, 775, 777, 779, 782, 784, 803], "input": [0, 2, 7, 8, 11, 13, 15, 25, 26, 28, 33, 34, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 193, 195, 196, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 513, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 732, 734, 735, 744, 760, 761, 762, 764, 766, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 792, 804, 807], "let": [0, 2, 6, 7, 8, 9, 11, 13, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 45, 47, 55, 67, 78, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 283, 285, 286, 290, 510, 511, 589, 591, 594, 604, 646, 716, 718, 719, 720, 721, 750, 752, 756, 761, 763, 764, 766, 767, 768, 769, 770, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 798, 810], "start": [0, 1, 2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 50, 54, 71, 73, 77, 81, 121, 134, 137, 138, 335, 345, 352, 353, 355, 358, 367, 397, 437, 440, 448, 450, 457, 489, 586, 730, 744, 750, 751, 752, 756, 757, 758, 759, 765, 766, 768, 769, 771, 772, 777, 779, 782, 783, 784, 786, 787, 788, 791, 792, 803, 809], "simpl": [0, 2, 6, 13, 17, 18, 20, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 42, 44, 47, 54, 77, 367, 481, 732, 750, 756, 757, 758, 761, 763, 764, 766, 767, 768, 769, 773, 776, 777, 779, 780, 782, 786, 788, 789, 792, 794, 796, 802, 803, 804, 805], "import": [0, 1, 2, 6, 9, 11, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 45, 46, 47, 54, 65, 69, 73, 77, 92, 193, 194, 198, 208, 210, 367, 481, 588, 597, 602, 672, 707, 741, 750, 752, 755, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 784, 786, 787, 789, 792, 797, 799, 801, 803, 806, 807, 809], "set_backend": [0, 2, 6, 7, 8, 10, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 34, 35, 41, 43, 44, 45, 53, 55, 69, 76, 78, 166, 175, 193, 194, 208, 210, 223, 496, 520, 587, 588, 591, 597, 672, 741, 750, 760, 762, 766, 767, 773, 774, 775, 784, 786, 789], "torch": [0, 2, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 45, 46, 47, 50, 55, 59, 69, 78, 82, 129, 166, 193, 194, 208, 210, 282, 496, 520, 552, 586, 587, 588, 589, 591, 594, 597, 642, 672, 729, 741, 750, 754, 757, 758, 760, 761, 762, 763, 765, 766, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 786, 787, 789, 792, 794, 809], "def": [0, 2, 6, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 53, 76, 117, 223, 497, 585, 591, 597, 598, 672, 679, 744, 750, 756, 757, 760, 761, 764, 766, 767, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789], "fn": [0, 7, 45, 47, 54, 71, 74, 77, 100, 124, 125, 126, 127, 128, 165, 166, 198, 199, 202, 358, 426, 493, 508, 509, 558, 586, 587, 588, 591, 598, 679, 680, 681, 683, 684, 685, 738, 741, 745, 746, 748, 767, 770, 776, 777, 784], "x": [0, 2, 6, 8, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 123, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 171, 172, 174, 179, 195, 196, 200, 205, 206, 207, 211, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 315, 316, 319, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 432, 434, 435, 437, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 539, 540, 541, 544, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 570, 571, 573, 574, 575, 577, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 676, 679, 680, 681, 682, 683, 684, 685, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 738, 741, 744, 748, 750, 756, 761, 762, 764, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789], "y": [0, 28, 29, 40, 41, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 151, 152, 153, 162, 164, 167, 179, 192, 196, 200, 205, 206, 207, 211, 213, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 304, 320, 326, 332, 333, 334, 335, 336, 341, 343, 345, 347, 349, 352, 355, 356, 357, 358, 361, 367, 374, 376, 378, 379, 383, 386, 388, 392, 400, 404, 409, 414, 420, 421, 422, 423, 424, 432, 434, 443, 447, 455, 456, 460, 464, 465, 466, 474, 480, 481, 482, 483, 484, 487, 489, 490, 492, 495, 498, 499, 502, 503, 505, 506, 507, 510, 511, 512, 516, 518, 519, 520, 522, 523, 526, 527, 532, 539, 540, 541, 544, 547, 548, 549, 550, 552, 554, 556, 557, 558, 562, 563, 566, 569, 570, 571, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 608, 610, 612, 615, 616, 617, 621, 622, 623, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 640, 642, 643, 644, 646, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 676, 679, 680, 682, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 748, 750, 762, 764, 767, 768, 775, 777, 778, 779, 780, 782, 784, 786], "z": [0, 19, 28, 29, 41, 42, 50, 53, 54, 55, 59, 60, 63, 65, 67, 73, 76, 77, 78, 82, 83, 84, 86, 90, 96, 97, 137, 138, 140, 141, 200, 222, 223, 227, 229, 232, 234, 239, 250, 251, 254, 255, 256, 258, 259, 264, 266, 268, 269, 270, 271, 279, 288, 295, 296, 322, 347, 352, 357, 367, 420, 421, 422, 423, 424, 430, 432, 443, 480, 481, 484, 490, 495, 507, 510, 511, 518, 519, 535, 548, 549, 550, 558, 571, 586, 588, 589, 591, 594, 595, 596, 598, 600, 601, 602, 604, 622, 632, 637, 638, 642, 649, 651, 652, 653, 654, 676, 680, 682, 690, 694, 695, 696, 699, 704, 714, 715, 717, 718, 719, 731, 750, 762, 764, 767, 768, 784, 786], "k": [0, 7, 9, 41, 44, 50, 54, 58, 59, 63, 73, 76, 77, 81, 82, 86, 94, 117, 132, 144, 145, 146, 266, 304, 315, 316, 349, 356, 358, 362, 365, 367, 401, 413, 453, 456, 467, 468, 469, 470, 471, 474, 484, 495, 585, 586, 591, 593, 594, 598, 600, 601, 620, 624, 632, 633, 639, 641, 642, 643, 646, 681, 694, 695, 696, 702, 750, 759, 760, 777, 778, 784, 799, 803], "j": [0, 50, 53, 54, 59, 67, 73, 76, 77, 82, 94, 120, 141, 220, 221, 222, 223, 225, 228, 237, 239, 242, 244, 252, 260, 262, 266, 272, 283, 285, 286, 289, 290, 322, 352, 355, 356, 367, 382, 383, 387, 398, 399, 403, 405, 413, 490, 495, 585, 586, 589, 591, 594, 604, 626, 646, 714, 758, 759, 763, 799], "concat": [0, 8, 40, 45, 55, 61, 71, 84, 212, 507, 588, 591, 596, 669, 778, 782, 784], "sum_j": 0, "sum": [0, 2, 42, 44, 53, 54, 55, 58, 59, 60, 67, 71, 76, 77, 78, 81, 82, 83, 90, 94, 96, 97, 212, 222, 264, 288, 318, 338, 349, 352, 356, 357, 367, 397, 402, 420, 421, 422, 423, 424, 487, 488, 504, 534, 535, 588, 589, 591, 593, 594, 595, 604, 616, 620, 633, 642, 646, 649, 651, 652, 653, 713, 714, 731, 733, 744, 750, 764, 766, 773, 775, 776, 777, 784], "1": [0, 2, 4, 6, 7, 8, 9, 10, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 153, 154, 158, 162, 163, 164, 167, 172, 174, 179, 195, 196, 200, 204, 205, 207, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 532, 534, 535, 539, 548, 549, 550, 551, 552, 554, 556, 557, 558, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 750, 754, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 792, 797, 798], "2": [0, 2, 6, 7, 8, 9, 10, 11, 13, 19, 21, 22, 23, 25, 26, 28, 29, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 195, 196, 197, 200, 203, 205, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 315, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 412, 414, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 441, 442, 443, 444, 446, 447, 452, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 469, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 532, 534, 535, 539, 548, 549, 550, 551, 552, 554, 558, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 732, 741, 744, 750, 754, 757, 758, 760, 762, 763, 764, 765, 766, 768, 770, 772, 773, 775, 776, 777, 778, 779, 783, 784, 786, 787, 788, 789, 792, 809, 810], "3": [0, 2, 6, 8, 9, 10, 13, 15, 19, 22, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 132, 134, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 193, 195, 196, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 414, 419, 420, 421, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 441, 442, 443, 444, 446, 447, 452, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 469, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 534, 535, 548, 549, 550, 554, 557, 558, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 744, 750, 756, 757, 760, 761, 762, 764, 765, 766, 768, 770, 773, 775, 778, 779, 784, 786, 787, 788, 789, 810], "4": [0, 6, 7, 8, 9, 10, 11, 13, 19, 21, 22, 23, 24, 25, 26, 28, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 122, 123, 129, 132, 134, 136, 137, 138, 139, 140, 141, 143, 146, 148, 152, 153, 154, 162, 164, 167, 172, 174, 179, 196, 197, 205, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 306, 311, 312, 315, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 420, 421, 423, 425, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 442, 443, 444, 446, 447, 452, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 469, 471, 472, 474, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 513, 516, 518, 519, 520, 527, 534, 535, 549, 550, 551, 552, 554, 558, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 646, 647, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 736, 744, 750, 754, 756, 757, 762, 763, 764, 765, 766, 768, 775, 778, 779, 782, 784, 786, 787, 788, 789, 798, 803, 809, 810], "compiled_fn": 0, "In": [0, 2, 5, 6, 7, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 47, 52, 54, 55, 61, 75, 78, 84, 94, 206, 213, 214, 218, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 355, 358, 361, 378, 379, 380, 427, 428, 429, 433, 435, 437, 438, 439, 440, 442, 446, 453, 459, 461, 463, 493, 513, 520, 538, 588, 589, 591, 594, 596, 600, 640, 657, 658, 659, 661, 663, 664, 666, 668, 696, 750, 752, 756, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 791, 792, 796, 798, 799, 801, 803, 804, 806, 809], "case": [0, 2, 13, 15, 21, 23, 28, 29, 31, 32, 33, 34, 42, 49, 50, 54, 55, 61, 67, 71, 73, 77, 78, 84, 94, 97, 123, 139, 165, 166, 193, 198, 199, 206, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 329, 331, 341, 352, 355, 358, 361, 362, 368, 378, 379, 380, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 461, 463, 469, 491, 513, 520, 534, 535, 536, 586, 587, 588, 589, 591, 594, 596, 598, 604, 640, 646, 657, 658, 659, 661, 663, 664, 666, 668, 676, 682, 715, 716, 717, 718, 719, 720, 721, 733, 734, 736, 750, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789, 792, 797, 802, 806], "would": [0, 1, 8, 22, 28, 29, 32, 34, 36, 44, 50, 52, 54, 73, 75, 77, 84, 107, 111, 123, 213, 355, 358, 382, 387, 427, 428, 433, 435, 437, 438, 439, 446, 450, 459, 583, 588, 657, 658, 659, 661, 663, 664, 666, 668, 750, 751, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 772, 774, 776, 777, 778, 779, 780, 782, 783, 784, 786, 788, 789, 792, 797, 803, 809], "can": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 50, 51, 54, 55, 59, 61, 63, 65, 73, 74, 77, 78, 82, 84, 86, 88, 94, 106, 109, 122, 123, 138, 140, 154, 193, 210, 211, 212, 297, 300, 310, 347, 349, 355, 356, 361, 362, 365, 367, 377, 390, 408, 413, 415, 418, 432, 461, 468, 469, 474, 481, 527, 538, 571, 574, 583, 586, 587, 588, 591, 592, 593, 594, 596, 600, 619, 625, 632, 642, 646, 661, 665, 694, 695, 696, 704, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810], "observ": [0, 54, 77, 367, 480, 481, 758, 770, 784, 805], "As": [0, 2, 6, 8, 9, 11, 13, 15, 21, 25, 26, 28, 29, 31, 34, 40, 41, 65, 69, 92, 602, 704, 705, 706, 707, 750, 756, 757, 758, 761, 763, 764, 765, 766, 767, 770, 771, 772, 773, 776, 777, 778, 779, 782, 786, 787, 788, 792, 796, 803, 808], "variabl": [0, 1, 41, 43, 44, 46, 54, 55, 56, 62, 71, 77, 78, 79, 85, 117, 118, 120, 356, 362, 367, 417, 469, 480, 481, 496, 520, 521, 522, 523, 526, 552, 573, 574, 576, 578, 579, 580, 585, 591, 592, 594, 597, 599, 641, 670, 671, 672, 692, 729, 730, 731, 732, 733, 734, 735, 736, 737, 758, 762, 766, 769, 772, 775, 776, 779, 780, 784, 787, 788, 789, 792, 804], "calcul": [0, 6, 42, 53, 54, 55, 60, 67, 71, 76, 77, 78, 82, 83, 90, 97, 219, 220, 221, 222, 223, 224, 225, 226, 227, 236, 237, 239, 242, 243, 244, 260, 261, 262, 263, 264, 265, 270, 271, 272, 277, 284, 285, 286, 288, 289, 290, 331, 341, 352, 355, 356, 358, 361, 367, 373, 374, 375, 404, 447, 461, 463, 488, 527, 589, 591, 594, 595, 604, 628, 637, 640, 651, 652, 653, 715, 716, 717, 718, 719, 720, 721, 731, 732, 735, 756, 769, 784, 797], "valu": [0, 7, 40, 41, 43, 44, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 96, 97, 99, 112, 117, 118, 120, 121, 132, 135, 136, 137, 138, 141, 146, 151, 168, 172, 178, 211, 212, 219, 220, 221, 222, 224, 226, 227, 228, 235, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 297, 302, 304, 311, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 330, 331, 333, 334, 336, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 366, 367, 377, 390, 397, 401, 404, 407, 411, 416, 417, 418, 419, 420, 421, 423, 431, 436, 441, 447, 452, 454, 455, 456, 458, 461, 463, 467, 468, 470, 471, 477, 479, 482, 483, 484, 487, 488, 489, 490, 496, 498, 499, 500, 502, 507, 510, 511, 513, 515, 518, 519, 520, 527, 534, 535, 539, 540, 541, 544, 552, 557, 562, 563, 566, 569, 570, 571, 572, 573, 574, 578, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 624, 627, 628, 633, 634, 635, 638, 639, 640, 641, 642, 643, 646, 649, 654, 655, 656, 660, 661, 669, 670, 671, 675, 677, 678, 679, 680, 681, 686, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 730, 731, 732, 733, 734, 735, 736, 754, 757, 758, 760, 763, 764, 766, 767, 768, 769, 770, 772, 773, 776, 777, 779, 781, 782, 784, 786, 792, 803, 804], "wa": [0, 2, 28, 29, 34, 43, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 320, 321, 322, 324, 326, 332, 333, 339, 340, 341, 343, 344, 345, 349, 352, 378, 379, 380, 420, 421, 423, 424, 427, 428, 429, 432, 453, 455, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 558, 570, 576, 581, 589, 591, 598, 604, 605, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 741, 750, 754, 758, 760, 765, 768, 773, 775, 777, 784, 786, 797, 802, 803, 805], "like": [0, 2, 7, 9, 11, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 45, 47, 50, 53, 54, 61, 73, 76, 77, 81, 84, 89, 138, 155, 178, 223, 243, 249, 252, 265, 283, 325, 328, 340, 352, 355, 356, 358, 365, 367, 397, 398, 403, 428, 429, 437, 473, 474, 490, 586, 587, 589, 594, 596, 600, 603, 626, 661, 696, 709, 750, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 791, 792, 797, 803, 808], "were": [0, 6, 8, 45, 71, 74, 167, 171, 172, 246, 589, 758, 766, 770, 771, 775, 776, 778, 779, 780, 782, 784, 803, 804, 809], "exclud": [0, 36, 67, 77, 90, 121, 146, 315, 349, 482, 483, 586, 600, 696, 712, 741, 768, 784], "process": [0, 6, 8, 23, 28, 29, 33, 42, 206, 218, 588, 751, 757, 758, 763, 764, 765, 771, 773, 775, 777, 778, 779, 782, 784, 789, 797, 798, 801, 802, 803, 806, 807, 809, 810], "tensor": [0, 2, 6, 7, 9, 10, 11, 13, 15, 19, 20, 23, 24, 26, 28, 29, 30, 34, 40, 42, 50, 53, 54, 55, 58, 60, 61, 63, 71, 73, 76, 77, 78, 81, 82, 83, 84, 86, 93, 129, 137, 138, 141, 146, 162, 178, 270, 271, 297, 300, 310, 313, 314, 315, 321, 342, 347, 349, 352, 355, 356, 357, 358, 367, 368, 373, 374, 377, 381, 390, 391, 392, 393, 406, 407, 408, 411, 413, 415, 416, 419, 423, 437, 440, 445, 448, 449, 450, 451, 454, 457, 487, 491, 534, 535, 586, 587, 589, 591, 593, 594, 595, 596, 600, 616, 618, 619, 631, 644, 651, 661, 663, 693, 732, 741, 750, 761, 762, 766, 767, 772, 773, 776, 777, 778, 779, 780, 782, 784, 786, 787, 789, 792, 794, 796, 800, 801, 804, 806, 807, 810], "shape": [0, 2, 6, 7, 8, 13, 15, 21, 22, 23, 24, 28, 29, 34, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 207, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 312, 313, 314, 315, 316, 321, 322, 323, 325, 328, 330, 332, 334, 335, 336, 337, 341, 342, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 435, 440, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 482, 483, 484, 498, 499, 503, 504, 505, 507, 510, 511, 514, 520, 527, 534, 535, 545, 553, 555, 567, 571, 572, 573, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 708, 709, 711, 712, 713, 714, 716, 718, 719, 721, 722, 723, 731, 732, 735, 744, 750, 758, 764, 766, 767, 768, 769, 770, 772, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789], "indic": [0, 6, 10, 50, 54, 55, 58, 59, 61, 62, 64, 65, 66, 71, 73, 74, 77, 78, 81, 82, 84, 85, 87, 88, 89, 94, 122, 123, 141, 144, 146, 167, 171, 172, 283, 315, 316, 331, 349, 352, 355, 356, 358, 363, 365, 373, 374, 375, 377, 381, 382, 383, 387, 388, 391, 392, 393, 394, 398, 404, 419, 427, 428, 429, 431, 433, 435, 437, 438, 439, 442, 446, 452, 453, 455, 456, 458, 459, 472, 473, 474, 495, 510, 511, 513, 534, 535, 539, 571, 574, 575, 586, 589, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 607, 609, 610, 611, 612, 615, 619, 635, 649, 657, 658, 659, 661, 662, 663, 664, 666, 668, 673, 676, 678, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 699, 700, 701, 702, 704, 706, 708, 710, 711, 730, 732, 733, 734, 738, 744, 746, 765, 772, 775, 777, 789], "trace": [0, 2, 9, 11, 23, 25, 28, 29, 31, 33, 34, 46, 55, 59, 71, 78, 82, 522, 523, 526, 537, 546, 560, 568, 591, 594, 750, 760, 766, 781, 784, 792, 794, 804, 809], "doesn": [0, 34, 520, 538, 591, 732, 757, 762, 764, 765, 766, 767, 768, 771, 773, 775, 779, 782, 784, 792, 801], "impos": 0, "addit": [0, 52, 54, 55, 62, 75, 77, 78, 85, 118, 120, 213, 222, 282, 367, 480, 485, 503, 504, 505, 571, 585, 588, 589, 591, 597, 599, 672, 692, 732, 756, 757, 758, 762, 766, 768, 769, 771, 773, 775, 776, 777, 779, 780, 782, 786, 787, 789, 803, 804, 805, 809], "restrict": [0, 764, 765, 777, 784, 800], "datatyp": [0, 50, 71, 73, 123, 136, 140, 156, 177, 181, 586, 587, 780], "out": [0, 2, 6, 8, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 43, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 162, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 406, 408, 409, 410, 412, 413, 414, 415, 420, 421, 422, 423, 424, 430, 431, 432, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 498, 499, 503, 504, 505, 507, 510, 511, 520, 530, 534, 535, 572, 573, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 731, 732, 734, 735, 736, 737, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 796, 797, 798, 803, 810], "differ": [0, 1, 2, 6, 7, 9, 11, 13, 17, 18, 22, 23, 24, 28, 29, 32, 33, 34, 35, 53, 54, 55, 59, 67, 71, 77, 78, 90, 96, 97, 106, 109, 164, 222, 239, 246, 247, 272, 288, 320, 325, 328, 329, 333, 352, 355, 356, 358, 367, 388, 398, 416, 419, 438, 439, 453, 482, 483, 490, 510, 511, 583, 587, 589, 591, 593, 594, 596, 604, 616, 617, 629, 640, 655, 665, 712, 713, 718, 720, 721, 734, 750, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 792, 796, 797, 798, 800, 801, 802, 803, 806, 809, 810], "b": [0, 34, 48, 53, 54, 55, 58, 59, 67, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 129, 134, 135, 136, 138, 141, 143, 148, 151, 152, 153, 154, 162, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 362, 365, 367, 373, 374, 375, 376, 378, 379, 382, 386, 387, 388, 391, 392, 393, 397, 402, 404, 406, 409, 414, 419, 420, 421, 423, 427, 428, 429, 430, 432, 433, 434, 437, 438, 439, 441, 442, 443, 444, 446, 447, 453, 455, 456, 459, 460, 465, 466, 468, 469, 471, 472, 474, 481, 482, 483, 484, 486, 488, 490, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 527, 534, 535, 549, 550, 552, 556, 557, 570, 572, 573, 574, 576, 578, 580, 581, 583, 586, 587, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 676, 679, 680, 681, 682, 684, 685, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 744, 750, 751, 754, 758, 759, 760, 762, 764, 765, 768, 773, 775, 778, 783, 784, 785, 787, 788, 789, 790, 795, 798, 799], "new": [0, 1, 3, 9, 11, 12, 13, 15, 17, 20, 26, 28, 29, 30, 44, 46, 54, 55, 56, 61, 62, 71, 73, 77, 78, 79, 82, 84, 85, 130, 133, 135, 136, 141, 142, 143, 147, 148, 185, 228, 274, 276, 280, 320, 323, 333, 338, 352, 358, 367, 425, 432, 446, 452, 488, 503, 504, 505, 507, 510, 511, 513, 534, 535, 538, 540, 547, 549, 550, 556, 573, 576, 578, 579, 580, 586, 587, 589, 591, 592, 596, 598, 599, 629, 637, 657, 661, 665, 678, 690, 691, 692, 729, 732, 735, 736, 741, 750, 751, 756, 757, 758, 759, 761, 762, 764, 765, 766, 768, 769, 771, 774, 776, 777, 778, 779, 780, 782, 783, 786, 789, 791, 794, 796, 797, 798, 801, 805, 809, 810], "run": [0, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 42, 44, 45, 46, 54, 56, 77, 79, 361, 461, 463, 572, 573, 578, 592, 597, 670, 671, 672, 732, 733, 734, 735, 744, 750, 752, 753, 756, 757, 759, 761, 762, 765, 767, 768, 770, 771, 772, 774, 777, 778, 784, 785, 786, 787, 788, 789, 791, 792, 793, 801, 803, 804, 805, 806, 808, 809, 810], "under": [0, 2, 19, 28, 29, 357, 422, 744, 750, 756, 757, 759, 760, 767, 768, 769, 771, 777, 778, 779, 782, 783, 784, 787, 789, 792, 803, 806, 810], "hood": [0, 2, 19, 28, 29, 750, 759, 767, 768, 771, 777, 779, 782, 783, 784, 787, 789, 810], "track": [0, 19, 28, 29, 41, 42, 598, 685, 730, 733, 734, 757, 758, 760, 775, 776, 803], "befor": [0, 2, 6, 7, 8, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 42, 54, 58, 59, 61, 65, 67, 71, 77, 81, 82, 209, 212, 217, 355, 358, 367, 382, 387, 397, 438, 439, 440, 447, 482, 483, 588, 593, 594, 596, 597, 598, 602, 604, 606, 607, 608, 609, 611, 613, 615, 619, 620, 632, 649, 655, 670, 671, 685, 704, 705, 706, 707, 712, 713, 718, 720, 730, 741, 744, 756, 757, 758, 760, 761, 763, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 784, 787, 792, 803], "instead": [0, 2, 13, 15, 19, 28, 35, 42, 47, 53, 54, 59, 76, 77, 82, 193, 281, 307, 349, 355, 367, 391, 392, 393, 481, 484, 588, 589, 594, 635, 756, 757, 758, 760, 763, 765, 766, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 782, 784, 786, 787, 792, 801, 803, 809, 810], "allow": [0, 2, 26, 28, 29, 40, 54, 77, 137, 277, 367, 484, 488, 530, 586, 589, 591, 603, 710, 730, 733, 734, 748, 750, 752, 756, 758, 761, 762, 765, 766, 770, 771, 773, 774, 775, 776, 777, 778, 779, 782, 784, 786, 792, 794, 797, 801, 803, 807, 808], "dynam": [0, 35, 596, 661, 741, 759, 765, 766, 767, 776, 777, 781, 784, 803, 807], "done": [0, 2, 42, 44, 47, 594, 628, 755, 756, 757, 758, 760, 763, 765, 767, 768, 771, 776, 777, 779, 787, 803], "first": [0, 1, 2, 6, 7, 8, 10, 13, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 42, 45, 46, 47, 50, 53, 54, 59, 61, 63, 64, 65, 67, 73, 76, 77, 78, 82, 84, 86, 88, 90, 94, 96, 97, 117, 118, 137, 138, 146, 177, 185, 195, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 289, 297, 303, 304, 315, 317, 318, 320, 329, 331, 332, 333, 339, 343, 344, 347, 349, 352, 355, 356, 357, 358, 365, 367, 377, 402, 403, 404, 406, 409, 423, 433, 437, 444, 447, 449, 450, 453, 458, 468, 470, 474, 482, 483, 484, 490, 495, 585, 586, 587, 588, 589, 591, 593, 594, 596, 597, 598, 601, 602, 603, 604, 619, 622, 625, 626, 627, 629, 632, 637, 639, 640, 642, 644, 648, 661, 662, 665, 666, 670, 671, 672, 673, 674, 683, 684, 686, 698, 699, 700, 704, 705, 706, 709, 710, 712, 713, 731, 732, 733, 734, 736, 741, 750, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 767, 768, 771, 772, 773, 774, 776, 777, 779, 782, 784, 786, 787, 789, 796, 797, 801, 803, 804, 808], "invok": [0, 2, 54, 355, 377, 750, 771], "onc": [0, 1, 6, 8, 28, 29, 40, 42, 59, 63, 82, 86, 212, 356, 403, 588, 594, 600, 626, 627, 628, 642, 693, 756, 757, 758, 764, 765, 766, 767, 768, 771, 776, 777, 779, 782, 784, 787, 792, 798], "been": [0, 1, 13, 15, 23, 25, 28, 29, 54, 55, 63, 77, 78, 86, 195, 282, 358, 454, 503, 504, 505, 588, 589, 591, 600, 693, 744, 756, 758, 760, 762, 764, 765, 766, 767, 769, 770, 772, 773, 776, 779, 784, 786, 791, 792, 794, 803, 810], "directli": [0, 1, 2, 13, 15, 19, 22, 26, 28, 29, 32, 356, 408, 598, 685, 750, 758, 760, 761, 764, 765, 766, 767, 769, 771, 773, 774, 776, 777, 778, 780, 781, 784, 786, 788, 789, 791, 792, 798, 807, 808, 809], "here": [0, 2, 4, 6, 14, 16, 19, 24, 27, 28, 29, 40, 42, 43, 44, 45, 47, 77, 282, 424, 589, 750, 754, 755, 756, 757, 758, 760, 762, 763, 764, 765, 766, 768, 771, 772, 774, 775, 776, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 791, 792, 803, 804], "eager_graph": [0, 2, 28, 29, 750], "doe": [0, 19, 28, 41, 43, 53, 54, 55, 61, 71, 76, 77, 84, 94, 146, 234, 273, 275, 283, 315, 349, 356, 357, 367, 368, 403, 422, 487, 488, 491, 520, 586, 589, 591, 594, 596, 626, 663, 754, 756, 758, 759, 762, 765, 766, 768, 769, 771, 772, 773, 776, 777, 778, 779, 782, 784, 786, 787, 792, 794, 797, 799, 803, 804, 810], "lazy_graph": [0, 2, 28, 29, 750], "up": [0, 6, 8, 9, 11, 28, 54, 55, 77, 78, 355, 358, 377, 390, 439, 527, 591, 593, 616, 730, 751, 752, 754, 756, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 804, 809, 810], "enabl": [0, 6, 7, 8, 9, 10, 11, 26, 43, 54, 59, 71, 82, 97, 355, 357, 377, 422, 538, 591, 594, 635, 750, 757, 758, 761, 764, 766, 773, 774, 775, 776, 777, 779, 780, 783, 785, 787, 789, 792, 794, 797, 801, 802, 803, 804, 805, 806, 809, 810], "delai": [0, 758], "until": [0, 6, 8, 758, 776, 784, 792, 797, 810], "have": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 40, 42, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 164, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 316, 321, 322, 330, 332, 334, 335, 336, 337, 341, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 404, 408, 409, 412, 413, 414, 415, 418, 420, 421, 422, 423, 424, 428, 429, 432, 433, 435, 440, 448, 449, 450, 451, 453, 456, 457, 464, 465, 466, 467, 468, 470, 471, 472, 474, 481, 482, 483, 484, 488, 491, 498, 499, 503, 504, 505, 510, 511, 520, 534, 535, 538, 572, 573, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 734, 735, 736, 737, 744, 750, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 809, 810], "necessari": [0, 2, 34, 50, 54, 73, 77, 84, 123, 239, 272, 358, 427, 428, 429, 433, 435, 437, 438, 439, 446, 459, 543, 565, 589, 591, 657, 658, 659, 661, 663, 664, 666, 668, 750, 757, 761, 762, 764, 768, 776, 777, 779, 781, 782], "particularli": [0, 758, 787, 792, 801], "librari": [0, 7, 9, 11, 17, 18, 24, 26, 40, 42, 52, 65, 75, 213, 244, 246, 262, 267, 268, 290, 588, 589, 594, 602, 604, 627, 628, 704, 705, 706, 707, 715, 716, 717, 719, 750, 751, 753, 756, 757, 760, 789, 790, 792, 794, 796, 797, 798, 799, 800, 801, 803, 807, 810], "where": [0, 3, 9, 21, 25, 31, 32, 36, 44, 50, 53, 54, 55, 59, 61, 63, 64, 67, 68, 71, 73, 76, 77, 78, 82, 84, 86, 87, 90, 91, 94, 135, 136, 139, 141, 146, 227, 237, 239, 242, 244, 246, 247, 256, 261, 262, 263, 270, 271, 272, 277, 279, 283, 285, 289, 295, 297, 315, 317, 318, 329, 333, 340, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 369, 370, 371, 377, 382, 383, 387, 403, 404, 407, 408, 410, 416, 419, 420, 427, 428, 429, 441, 447, 461, 462, 463, 467, 468, 470, 471, 481, 489, 490, 520, 534, 571, 586, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 619, 622, 626, 627, 631, 633, 635, 637, 638, 639, 642, 643, 646, 648, 654, 656, 657, 659, 665, 669, 677, 684, 693, 694, 695, 696, 701, 702, 719, 721, 722, 723, 731, 735, 750, 751, 754, 757, 758, 760, 761, 762, 763, 764, 766, 767, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 787, 788, 789, 792, 793, 796, 797, 798, 801, 810], "feasibl": [0, 756, 765, 797], "provid": [0, 2, 17, 19, 23, 26, 28, 29, 33, 34, 40, 46, 50, 54, 55, 59, 61, 64, 67, 68, 71, 73, 77, 78, 82, 84, 87, 90, 91, 117, 139, 141, 157, 158, 159, 160, 161, 169, 179, 191, 195, 291, 356, 358, 361, 367, 402, 406, 416, 419, 433, 442, 459, 461, 463, 490, 502, 534, 535, 585, 586, 587, 588, 589, 591, 593, 594, 596, 598, 601, 604, 605, 619, 634, 637, 648, 657, 658, 665, 677, 699, 719, 721, 722, 723, 732, 736, 741, 750, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 786, 788, 791, 792, 796, 801, 802, 803, 804, 805, 806, 807, 810], "valid": [0, 8, 42, 44, 54, 58, 68, 77, 81, 91, 94, 156, 355, 356, 373, 374, 375, 391, 392, 393, 394, 396, 397, 414, 419, 523, 587, 591, 593, 596, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 657, 665, 722, 723, 732, 744, 757, 762, 766, 768, 771, 775, 778, 779, 804], "look": [0, 3, 8, 19, 28, 29, 42, 44, 47, 750, 752, 756, 757, 758, 762, 763, 764, 766, 767, 768, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 784, 786, 788, 789, 793, 796, 799, 803], "find": [0, 1, 17, 43, 44, 47, 59, 65, 71, 82, 594, 598, 602, 635, 675, 704, 705, 706, 707, 744, 750, 751, 755, 756, 757, 758, 760, 763, 765, 775, 779, 782, 784, 787, 794, 796], "abl": [0, 3, 6, 8, 30, 34, 45, 47, 71, 94, 757, 758, 760, 766, 773, 776, 777, 780, 784, 789, 806, 809], "through": [0, 29, 34, 42, 54, 77, 227, 367, 487, 488, 589, 598, 676, 682, 734, 744, 750, 751, 754, 755, 756, 758, 759, 762, 763, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 791, 801, 803, 804, 805], "flag": [0, 2, 71, 195, 367, 481, 588, 593, 619, 735, 758, 766, 767, 776, 777, 778, 779], "reduc": [0, 54, 55, 59, 64, 67, 68, 71, 77, 78, 82, 87, 90, 91, 212, 338, 352, 353, 367, 486, 487, 488, 489, 490, 504, 588, 591, 594, 601, 604, 605, 639, 699, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 744, 765, 770, 777, 782, 784, 786, 801, 805, 806, 807], "time": [0, 1, 2, 6, 7, 9, 11, 26, 28, 29, 34, 42, 44, 45, 46, 54, 56, 59, 65, 77, 79, 88, 94, 134, 325, 352, 355, 356, 358, 367, 383, 388, 415, 419, 447, 453, 481, 573, 578, 586, 592, 593, 594, 596, 597, 601, 602, 616, 618, 632, 667, 670, 671, 672, 699, 700, 704, 705, 732, 733, 734, 756, 757, 758, 762, 764, 765, 766, 768, 772, 773, 774, 776, 777, 779, 780, 784, 787, 789, 792, 796, 797, 798, 801, 803, 804, 807, 808, 809], "comp_func": 0, "default": [0, 3, 6, 8, 28, 29, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 195, 196, 198, 199, 203, 206, 207, 208, 210, 211, 212, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 544, 548, 549, 550, 552, 554, 556, 557, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 744, 756, 757, 758, 762, 763, 766, 767, 768, 769, 770, 772, 773, 777, 779, 782, 784, 788, 794, 803], "follow": [0, 3, 22, 23, 28, 29, 32, 33, 34, 40, 43, 44, 54, 55, 56, 58, 59, 65, 71, 77, 78, 79, 81, 82, 134, 167, 212, 222, 239, 246, 272, 274, 281, 282, 310, 349, 355, 358, 361, 377, 390, 435, 447, 452, 461, 463, 518, 519, 520, 549, 550, 573, 576, 578, 579, 580, 586, 587, 588, 589, 591, 592, 593, 594, 598, 602, 619, 620, 633, 639, 649, 679, 685, 704, 705, 706, 707, 732, 736, 750, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 796, 797, 800, 803, 806], "show": [0, 5, 6, 7, 10, 17, 23, 28, 29, 30, 31, 33, 40, 42, 44, 45, 537, 546, 568, 591, 730, 750, 756, 757, 758, 763, 765, 768, 771, 776, 777, 779, 781, 791, 792, 803], "simpler": [0, 756, 758, 771, 804, 810], "obtain": [0, 28, 29, 47, 54, 77, 310, 349, 355, 394, 593, 619, 777], "howev": [0, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 59, 82, 246, 289, 290, 361, 461, 463, 538, 589, 591, 594, 640, 642, 741, 756, 757, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 782, 784, 786, 787, 788, 789, 792, 797, 802, 803, 809], "desir": [0, 51, 52, 54, 64, 71, 74, 75, 77, 87, 94, 151, 153, 154, 213, 310, 342, 349, 352, 358, 367, 445, 487, 489, 490, 587, 588, 594, 601, 644, 701, 731, 732, 758, 762, 765, 766, 767, 777, 784, 796, 803], "below": [0, 2, 4, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 40, 43, 44, 45, 50, 54, 59, 82, 90, 144, 145, 146, 246, 256, 279, 315, 316, 322, 349, 352, 586, 589, 594, 625, 646, 721, 750, 751, 756, 757, 759, 760, 764, 765, 766, 767, 768, 770, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 799, 801, 806, 808], "ultim": [0, 19, 28], "trade": 0, "off": [0, 21, 31, 58, 59, 81, 82, 378, 379, 380, 593, 594, 616, 625, 646, 731, 732, 757, 783, 798, 809], "between": [0, 2, 17, 18, 23, 33, 34, 35, 40, 53, 54, 55, 58, 59, 60, 61, 65, 71, 76, 77, 81, 82, 83, 84, 97, 121, 164, 227, 240, 275, 277, 291, 320, 333, 335, 352, 355, 356, 357, 358, 367, 378, 379, 380, 391, 392, 393, 402, 406, 420, 421, 422, 423, 424, 447, 490, 586, 587, 589, 593, 595, 596, 598, 600, 602, 616, 637, 651, 652, 653, 657, 665, 679, 694, 705, 706, 707, 736, 761, 762, 768, 772, 773, 774, 776, 777, 778, 779, 782, 783, 785, 786, 787, 789, 791, 796, 799, 800, 802, 803, 804, 809], "memori": [0, 6, 8, 50, 54, 61, 73, 77, 84, 123, 139, 194, 206, 212, 214, 218, 358, 367, 427, 428, 433, 435, 437, 438, 439, 446, 459, 488, 533, 538, 561, 586, 588, 591, 593, 596, 618, 657, 658, 659, 661, 663, 664, 666, 668, 750, 765, 766, 767, 776, 777, 782, 784, 790, 792, 803, 805, 806, 807], "store": [0, 42, 44, 47, 51, 54, 55, 59, 61, 71, 74, 77, 78, 82, 84, 153, 355, 356, 398, 402, 406, 507, 591, 594, 596, 646, 663, 732, 733, 734, 753, 758, 761, 762, 764, 769, 774, 776, 777, 778, 784, 786, 787, 788, 794], "thei": [0, 3, 35, 40, 45, 54, 59, 63, 65, 71, 82, 86, 88, 177, 291, 328, 352, 587, 589, 594, 597, 600, 602, 647, 670, 671, 693, 704, 737, 750, 755, 756, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 786, 787, 788, 789, 792, 800, 803, 805, 806, 809, 810], "By": [0, 20, 40, 47, 54, 60, 61, 67, 68, 77, 83, 84, 90, 91, 286, 319, 331, 338, 349, 352, 355, 357, 365, 367, 377, 422, 474, 481, 484, 538, 589, 591, 594, 595, 596, 604, 605, 622, 648, 651, 660, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 757, 762, 766, 768, 770, 773, 775, 776, 777, 784, 788, 789], "choos": [0, 7, 42, 44, 52, 64, 65, 75, 213, 239, 246, 267, 268, 272, 358, 588, 589, 601, 602, 604, 703, 704, 705, 706, 707, 715, 716, 717, 719, 756, 757, 758, 774, 779, 785, 789], "node": [0, 2, 71, 78, 97, 496, 506, 552, 598, 683, 684, 731, 740, 763, 764, 777, 797, 804], "bake": 0, "randint": [0, 58, 63, 65, 81, 86, 600, 602, 615, 618, 704, 766], "0": [0, 2, 6, 7, 8, 9, 10, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 129, 132, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 167, 168, 172, 174, 179, 192, 195, 197, 200, 205, 206, 207, 208, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 373, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 400, 401, 403, 404, 405, 407, 408, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 426, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 497, 498, 499, 502, 503, 504, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 530, 532, 534, 535, 539, 544, 548, 549, 550, 552, 554, 556, 557, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 632, 633, 634, 635, 636, 638, 640, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 744, 750, 754, 757, 758, 760, 762, 764, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 784, 786, 787, 788, 789, 792], "100": [0, 9, 11, 40, 42, 44, 50, 53, 54, 73, 76, 77, 78, 81, 95, 138, 146, 233, 273, 286, 315, 333, 342, 349, 352, 355, 356, 378, 379, 416, 419, 511, 519, 535, 586, 589, 591, 594, 598, 630, 679, 750, 765, 766, 779, 787, 788, 789, 792, 797, 798], "size": [0, 8, 13, 15, 20, 23, 24, 30, 31, 33, 34, 35, 42, 44, 47, 54, 55, 58, 59, 61, 63, 64, 71, 77, 78, 81, 82, 84, 86, 87, 94, 96, 97, 134, 137, 210, 211, 212, 303, 306, 310, 317, 318, 319, 324, 338, 345, 349, 352, 353, 355, 356, 358, 361, 362, 365, 367, 369, 370, 371, 372, 373, 374, 390, 391, 392, 394, 395, 404, 416, 419, 433, 445, 456, 462, 463, 469, 474, 486, 487, 488, 489, 490, 529, 534, 586, 588, 591, 593, 594, 596, 600, 601, 605, 620, 622, 625, 629, 633, 637, 639, 642, 648, 657, 662, 663, 664, 693, 699, 702, 722, 723, 732, 750, 776, 778, 779, 782, 787], "rand": [0, 26, 28, 29, 44, 744, 750], "And": [0, 9, 11, 13, 15, 20, 23, 28, 29, 30, 43, 74, 750, 760, 763, 771, 773, 779], "final": [0, 2, 9, 11, 13, 15, 17, 25, 28, 29, 34, 40, 41, 50, 55, 77, 78, 94, 120, 137, 138, 355, 398, 507, 585, 586, 591, 593, 619, 756, 758, 760, 761, 762, 763, 765, 766, 768, 769, 773, 775, 776, 777, 782, 783, 787, 799, 809], "__setattr__": [0, 764], "__getattr__": [0, 764], "arbitrari": [0, 2, 21, 31, 50, 51, 54, 71, 74, 139, 152, 179, 427, 428, 429, 574, 586, 587, 592, 772, 773, 775, 776, 777, 779, 788, 792, 804, 809], "class": [0, 2, 6, 8, 10, 13, 15, 19, 28, 29, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 134, 143, 148, 164, 167, 180, 182, 183, 242, 279, 322, 342, 352, 366, 367, 374, 375, 403, 487, 488, 494, 503, 507, 520, 530, 552, 586, 587, 588, 589, 591, 593, 595, 598, 599, 618, 620, 626, 637, 642, 651, 667, 673, 674, 685, 692, 707, 714, 718, 719, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 744, 748, 750, 756, 762, 763, 764, 766, 767, 768, 769, 772, 774, 775, 778, 779, 782, 784, 785, 787, 788, 789, 790, 791, 792, 794, 801, 803, 804, 810], "cont": 0, "new_attribut": 0, "contain": [0, 19, 28, 29, 43, 48, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 165, 166, 167, 170, 171, 172, 174, 176, 179, 196, 198, 199, 200, 205, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 354, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 539, 542, 544, 549, 550, 551, 552, 554, 556, 557, 564, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 680, 681, 682, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 732, 733, 734, 736, 737, 741, 744, 750, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 765, 766, 768, 769, 772, 773, 774, 775, 776, 778, 779, 781, 782, 783, 784, 785, 788, 792, 793, 794, 796, 803, 804, 809], "cont_deep_copi": [0, 71, 787], "some": [0, 2, 7, 8, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 34, 40, 44, 45, 71, 79, 244, 246, 262, 355, 378, 379, 380, 572, 573, 576, 578, 579, 580, 588, 589, 592, 598, 684, 732, 750, 754, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 791, 792, 793, 794, 797, 798, 799, 800, 802, 803, 804, 809, 810], "still": [0, 2, 22, 24, 25, 28, 29, 31, 32, 35, 59, 71, 82, 594, 642, 756, 758, 761, 762, 766, 769, 770, 771, 773, 776, 777, 779, 782, 788, 792, 797, 800, 803, 809], "develop": [0, 2, 13, 27, 28, 29, 750, 751, 752, 754, 755, 756, 757, 758, 760, 763, 765, 780, 791, 792, 794, 796, 797, 798, 801, 802, 803, 804, 805, 808, 809, 810], "account": [0, 34, 44, 46, 54, 61, 77, 84, 286, 358, 437, 589, 596, 661, 731, 744, 757, 765, 769, 777, 780], "point": [0, 17, 26, 51, 53, 54, 59, 63, 65, 67, 74, 76, 77, 82, 86, 90, 121, 122, 123, 130, 132, 135, 142, 143, 147, 151, 164, 168, 172, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 255, 260, 261, 262, 263, 264, 272, 274, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 303, 304, 306, 335, 336, 339, 341, 349, 352, 355, 356, 357, 362, 367, 378, 379, 380, 403, 418, 420, 467, 468, 469, 470, 471, 481, 482, 483, 490, 584, 586, 587, 589, 594, 600, 601, 602, 603, 604, 621, 623, 626, 627, 628, 630, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 646, 649, 695, 696, 702, 704, 705, 706, 707, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 741, 754, 756, 757, 758, 760, 761, 762, 763, 765, 768, 769, 772, 776, 777, 779, 780, 782, 784, 786, 787, 791, 798, 809], "wip": [0, 771], "ll": [0, 1, 2, 6, 8, 9, 11, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 43, 750, 751, 754, 756, 757, 758, 763, 768, 771, 775, 776, 787, 798], "soon": [0, 756, 758, 765, 766, 790, 792], "control": [0, 36, 54, 77, 146, 294, 315, 347, 349, 355, 358, 378, 379, 380, 431, 455, 538, 586, 591, 594, 624, 730, 764, 766, 767, 775, 776, 777, 778, 782, 786, 787, 791, 794, 803, 809], "flow": [0, 36, 764, 791, 803, 804], "built": [0, 28, 29, 34, 42, 44, 47, 121, 586, 732, 733, 734, 750, 757, 758, 763, 764, 779, 785, 793, 794, 802, 803, 807], "moment": [0, 2, 6, 56, 79, 572, 573, 578, 592, 736, 756, 762, 792], "condit": [0, 64, 77, 87, 118, 356, 400, 585, 598, 601, 683, 684, 703, 760, 766, 768, 770, 773, 774, 776, 779, 791], "branch": [0, 45, 227, 239, 242, 244, 272, 284, 285, 286, 289, 589, 757, 758, 760, 765, 771, 792, 803], "loop": [0, 9, 11, 21, 36, 69, 92, 117, 120, 585, 597, 670, 671, 672, 750, 762, 792], "regist": [0, 758], "correctli": [0, 2, 3, 25, 28, 29, 42, 54, 59, 64, 77, 82, 87, 324, 352, 367, 487, 488, 489, 490, 594, 601, 633, 699, 756, 757, 758, 761, 764, 766, 768, 770, 771, 772, 778, 779, 782, 788, 792], "while": [0, 1, 28, 29, 36, 54, 58, 71, 77, 81, 94, 97, 120, 141, 178, 246, 247, 267, 268, 329, 352, 355, 356, 358, 398, 414, 449, 450, 480, 585, 586, 587, 589, 593, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 704, 716, 719, 754, 756, 757, 758, 761, 762, 763, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 786, 788, 789, 792, 796, 797, 803, 809, 810], "your": [0, 1, 2, 3, 5, 6, 7, 9, 11, 13, 15, 17, 18, 19, 21, 22, 25, 28, 29, 32, 40, 42, 44, 46, 750, 751, 752, 754, 755, 756, 757, 760, 762, 763, 765, 769, 771, 775, 777, 780, 782, 787, 788, 792, 793, 797, 798, 803], "depend": [0, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 33, 50, 51, 54, 55, 59, 65, 66, 74, 77, 82, 89, 90, 118, 129, 151, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 260, 261, 262, 263, 272, 274, 277, 284, 285, 289, 290, 341, 352, 356, 403, 417, 552, 585, 586, 587, 589, 591, 594, 601, 603, 626, 627, 639, 640, 641, 642, 703, 708, 711, 721, 750, 752, 753, 754, 756, 757, 758, 763, 766, 767, 769, 774, 776, 777, 778, 779, 782, 784, 792, 793, 797, 801, 803, 804], "chang": [0, 6, 7, 19, 29, 42, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 358, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 583, 589, 596, 598, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 638, 639, 640, 642, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 685, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 750, 752, 756, 757, 758, 760, 762, 763, 764, 765, 766, 768, 769, 771, 777, 778, 779, 780, 781, 782, 784, 788, 792, 793, 798, 806, 809], "number": [0, 42, 44, 45, 46, 47, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 94, 96, 97, 100, 121, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 152, 157, 158, 159, 160, 161, 163, 164, 167, 170, 171, 172, 174, 176, 179, 203, 204, 205, 219, 220, 221, 222, 223, 225, 227, 228, 235, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 256, 260, 262, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 290, 292, 300, 310, 313, 314, 315, 317, 318, 320, 322, 323, 324, 325, 333, 338, 342, 347, 349, 352, 355, 356, 358, 361, 367, 388, 398, 400, 403, 407, 408, 416, 418, 419, 427, 428, 429, 447, 448, 449, 450, 451, 453, 456, 458, 461, 462, 463, 479, 481, 482, 483, 484, 489, 507, 514, 532, 549, 550, 557, 570, 571, 584, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 600, 601, 602, 604, 605, 606, 613, 614, 616, 619, 622, 626, 627, 628, 635, 640, 642, 646, 647, 648, 651, 654, 656, 657, 659, 660, 662, 663, 665, 667, 669, 670, 671, 672, 693, 697, 702, 704, 705, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 731, 732, 735, 750, 757, 758, 764, 765, 766, 767, 768, 774, 775, 776, 779, 780, 781, 782, 784, 787, 795, 796], "underli": [0, 19, 28, 29, 40, 54, 61, 77, 84, 229, 232, 234, 269, 358, 437, 589, 594, 596, 640, 661, 764, 776, 782, 803], "piec": [0, 758, 761, 773, 774, 784, 799, 801], "insid": [0, 44, 59, 82, 97, 358, 456, 594, 635, 757, 758, 761, 764, 766, 767, 773, 774, 779, 780, 809], "said": [0, 28, 29, 780, 798], "other": [0, 2, 6, 9, 11, 13, 15, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 51, 53, 54, 55, 61, 67, 71, 74, 76, 77, 78, 84, 90, 94, 96, 97, 121, 141, 152, 178, 239, 244, 246, 262, 271, 272, 321, 325, 352, 358, 432, 440, 452, 492, 493, 586, 587, 589, 591, 600, 604, 655, 665, 696, 719, 721, 750, 752, 756, 757, 758, 760, 761, 764, 765, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789, 790, 791, 792, 793, 794, 797, 799, 801, 802, 803, 809, 810], "numpi": [0, 2, 6, 7, 8, 9, 11, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 53, 54, 55, 67, 76, 77, 78, 146, 175, 193, 223, 283, 315, 349, 367, 481, 488, 496, 520, 549, 552, 556, 586, 587, 588, 589, 591, 604, 714, 741, 744, 750, 755, 756, 757, 758, 760, 761, 762, 765, 766, 767, 770, 772, 776, 778, 779, 780, 782, 784, 786, 789, 793, 794, 796, 797, 805, 810], "len": [0, 8, 42, 44, 50, 54, 59, 77, 82, 139, 307, 349, 355, 356, 367, 388, 398, 406, 408, 416, 419, 490, 586, 594, 647, 750, 764, 765, 770, 776, 777, 779, 786, 789], "incorrectli": [0, 769], "There": [0, 19, 26, 29, 34, 94, 348, 350, 351, 359, 360, 364, 750, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 770, 771, 773, 775, 777, 778, 781, 784, 787, 792, 796, 804, 805, 809, 810], "succe": [0, 757], "hide": [0, 770], "shouldn": [0, 780], "realli": [0, 7, 40, 757, 764, 792, 808, 809], "check": [0, 6, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 45, 47, 49, 51, 55, 59, 71, 74, 78, 82, 112, 155, 156, 165, 166, 169, 171, 172, 173, 176, 191, 198, 199, 206, 218, 496, 506, 508, 509, 516, 522, 523, 524, 525, 526, 542, 552, 564, 570, 583, 587, 588, 591, 594, 598, 627, 628, 635, 673, 674, 683, 684, 685, 730, 744, 750, 753, 755, 756, 757, 758, 760, 764, 765, 767, 768, 770, 774, 776, 777, 778, 779, 780, 781, 783, 784, 786, 787, 788, 793], "recommend": [0, 267, 268, 281, 589, 604, 716, 719, 757, 762, 763, 771, 774, 775], "nois": [0, 2, 13, 15, 28, 29, 750], "anoth": [0, 2, 6, 19, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 133, 152, 154, 586, 587, 750, 756, 757, 758, 762, 764, 766, 767, 770, 771, 773, 776, 777, 779, 784, 786, 789, 794, 797, 803, 809], "right": [0, 43, 54, 59, 71, 77, 82, 97, 115, 116, 231, 233, 286, 332, 352, 355, 356, 358, 389, 411, 417, 418, 438, 503, 585, 589, 591, 594, 603, 642, 647, 710, 751, 756, 757, 758, 759, 760, 768, 782, 787], "feel": [0, 1, 3, 43, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783], "free": [0, 1, 3, 8, 42, 43, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 752, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 791, 804, 806], "open": [0, 1, 2, 3, 6, 8, 9, 10, 11, 25, 28, 29, 42, 43, 44, 45, 55, 63, 86, 121, 586, 600, 694, 696, 750, 751, 757, 758, 763, 766, 769, 777, 778, 782, 791, 796, 797, 798, 801, 802, 803, 805, 806], "issu": [0, 731, 751, 754, 755, 757, 760, 762, 765, 766, 767, 768, 770, 777, 779, 780, 782, 784, 788, 792, 798], "minim": [0, 42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 638, 639, 640, 642, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 769, 776, 778, 782, 784, 801, 809], "resnet50": 0, "hug": [0, 11, 28], "face": [0, 11, 28, 751, 757, 760, 771, 775, 782, 784, 803, 809], "classifi": [0, 2, 6, 13, 15, 28, 29, 42, 44, 45, 750], "breed": 0, "cat": [0, 2, 6, 10, 43, 778, 782, 784, 789], "transform": [0, 2, 6, 7, 9, 10, 11, 25, 28, 29, 42, 43, 45, 54, 58, 77, 81, 355, 356, 376, 377, 382, 383, 386, 387, 388, 398, 411, 593, 617, 732, 750, 774, 779, 789, 791, 794, 801, 803, 804, 805], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 28, 71, 750, 787, 790], "load_dataset": [0, 2, 42], "download": [0, 2, 6, 10, 13, 15, 28, 29, 43, 44, 47, 757, 779], "imag": [0, 2, 5, 6, 9, 11, 13, 17, 25, 28, 29, 42, 43, 44, 45, 46, 47, 53, 54, 58, 76, 77, 81, 96, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 282, 283, 285, 286, 290, 355, 373, 374, 390, 391, 392, 394, 503, 589, 591, 593, 606, 607, 608, 609, 610, 613, 614, 615, 732, 750, 752, 757, 782, 784, 785, 787, 789, 791, 793, 803], "huggingfac": [0, 2, 42], "test": [0, 2, 7, 20, 21, 23, 24, 30, 31, 33, 34, 35, 43, 44, 53, 55, 68, 76, 78, 91, 120, 170, 174, 253, 254, 255, 256, 279, 355, 378, 379, 380, 527, 585, 587, 589, 591, 605, 722, 723, 750, 754, 755, 756, 759, 763, 766, 768, 770, 771, 774, 777, 780, 792, 793, 798, 803], "image_processor": [0, 2, 45], "from_pretrain": [0, 2, 7, 11, 28, 45], "microsoft": [0, 2, 11, 28, 797, 803, 808, 810], "resnet": [0, 2, 5, 11, 17, 28], "50": [0, 2, 11, 28, 29, 40, 44, 54, 67, 76, 77, 78, 238, 278, 339, 352, 355, 356, 383, 402, 409, 505, 511, 518, 519, 535, 549, 589, 591, 594, 598, 601, 604, 630, 637, 674, 676, 702, 714, 775, 786], "preprocess": [0, 6, 10, 28, 29, 42, 45], "return_tensor": [0, 2, 7, 11, 28, 45], "pt": [0, 7, 11, 28], "normal": [0, 4, 6, 10, 13, 14, 15, 16, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 54, 62, 63, 77, 85, 86, 94, 341, 352, 355, 361, 367, 376, 377, 382, 383, 386, 387, 388, 398, 461, 462, 463, 464, 465, 466, 481, 484, 596, 599, 600, 655, 665, 692, 693, 695, 731, 732, 735, 750, 756, 776, 777, 782, 787, 801], "feed": [0, 6, 212, 588, 803, 804], "itself": [0, 6, 23, 33, 53, 94, 273, 493, 558, 589, 591, 598, 685, 754, 757, 758, 760, 763, 764, 765, 766, 767, 770, 771, 776, 777, 788, 791, 792, 796, 802, 803, 804, 809], "without": [0, 3, 6, 31, 40, 44, 47, 65, 71, 544, 558, 591, 596, 598, 602, 661, 674, 704, 705, 706, 707, 744, 758, 761, 762, 764, 765, 766, 767, 768, 770, 772, 773, 777, 779, 780, 782, 786, 787, 788, 791, 792, 800, 803, 804, 805, 809], "pytorch": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 26, 28, 29, 40, 47, 282, 589, 736, 750, 755, 756, 761, 766, 767, 770, 772, 773, 776, 777, 778, 782, 784, 789, 792, 794, 797, 798, 804, 806, 807, 809, 810], "no_grad": [0, 7, 42], "logit": [0, 6, 7, 8, 10, 42, 43, 44, 45, 54, 60, 77, 83, 347, 362, 467, 470, 595, 651, 653, 728, 750], "With": [0, 6, 21, 31, 40, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 167, 174, 179, 180, 181, 182, 183, 193, 196, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 306, 322, 324, 330, 333, 334, 335, 337, 338, 341, 347, 349, 352, 355, 356, 357, 358, 367, 376, 378, 379, 386, 400, 401, 402, 404, 405, 406, 414, 423, 437, 438, 439, 441, 444, 446, 447, 453, 456, 458, 472, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 496, 497, 498, 499, 502, 503, 504, 505, 506, 510, 511, 514, 516, 518, 519, 520, 534, 535, 549, 550, 552, 554, 556, 557, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 620, 621, 622, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 640, 642, 643, 644, 646, 647, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 757, 768, 777, 779, 782, 784, 797, 798, 803, 806], "compiled_graph": 0, "our": [0, 6, 9, 11, 13, 15, 17, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 46, 69, 92, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 770, 771, 774, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 792, 796, 797, 808, 809], "predicted_label": 0, "argmax": [0, 8, 43, 44, 45, 64, 87, 601, 750, 777], "item": [0, 3, 7, 28, 29, 40, 42, 44, 49, 55, 69, 71, 73, 76, 77, 78, 134, 158, 195, 249, 265, 273, 325, 327, 340, 500, 510, 511, 515, 549, 550, 586, 587, 588, 591, 598, 605, 678, 679, 680, 681, 685, 690, 691, 725, 733, 734, 750, 756, 764, 766, 784, 786, 787, 789], "config": [0, 7, 8, 9, 11, 22, 28, 29, 42, 43, 45, 71, 598, 686, 750, 752, 757, 760, 763, 765, 771, 778, 787, 804], "id2label": [0, 45], "us": [1, 3, 4, 5, 6, 7, 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 87, 92, 94, 97, 104, 138, 141, 151, 163, 165, 166, 177, 178, 198, 199, 201, 206, 210, 211, 212, 213, 215, 218, 224, 232, 260, 261, 263, 264, 266, 267, 268, 270, 271, 273, 282, 286, 291, 303, 305, 306, 308, 309, 310, 314, 331, 334, 335, 338, 349, 352, 355, 356, 358, 361, 362, 363, 365, 367, 373, 374, 375, 377, 378, 379, 380, 381, 383, 388, 390, 391, 392, 393, 396, 398, 402, 404, 407, 411, 413, 415, 416, 417, 418, 419, 437, 441, 445, 447, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 481, 488, 490, 508, 509, 518, 519, 530, 538, 540, 541, 543, 549, 550, 562, 563, 565, 572, 573, 578, 579, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 604, 617, 619, 620, 625, 627, 635, 643, 649, 651, 660, 661, 662, 666, 670, 671, 672, 673, 675, 676, 682, 683, 684, 686, 693, 694, 695, 696, 698, 699, 700, 701, 704, 706, 714, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 748, 751, 752, 755, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 794, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "compil": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 22, 26, 32, 36, 45, 47, 290, 589, 733, 734, 736, 750, 764, 777, 780, 782, 783, 785, 792, 793, 794, 799, 802, 803, 804, 807, 810], "grant": [1, 750], "pilot": [1, 750, 755], "access": [1, 2, 3, 25, 28, 29, 71, 750, 756, 757, 758, 765, 766, 771, 776, 777, 803, 805, 807], "user": [1, 17, 28, 43, 44, 46, 273, 290, 358, 447, 538, 589, 591, 730, 732, 733, 734, 744, 750, 752, 757, 758, 759, 761, 762, 764, 765, 766, 767, 770, 774, 775, 776, 777, 779, 781, 782, 783, 784, 792, 793, 796, 797, 801, 803, 809, 810], "join": [1, 43, 44, 61, 71, 77, 84, 432, 596, 655, 665, 750], "waitlist": [1, 750], "want": [1, 2, 6, 8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 41, 42, 44, 54, 69, 77, 92, 239, 272, 358, 435, 589, 730, 734, 750, 751, 753, 756, 757, 758, 763, 765, 767, 770, 771, 773, 774, 775, 776, 779, 782, 787, 788, 789, 792, 793, 797], "get": [1, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 42, 43, 45, 52, 59, 71, 75, 82, 96, 162, 163, 164, 167, 195, 196, 197, 200, 206, 211, 214, 218, 494, 512, 533, 551, 587, 588, 591, 594, 598, 649, 675, 730, 731, 732, 744, 750, 751, 755, 756, 757, 759, 760, 765, 766, 767, 773, 774, 775, 776, 777, 778, 779, 784, 785, 786, 787, 788, 794, 798, 803, 809], "one": [1, 2, 6, 9, 11, 13, 15, 17, 18, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 46, 50, 54, 55, 58, 59, 61, 64, 65, 67, 71, 73, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 94, 121, 129, 139, 141, 142, 143, 152, 154, 212, 233, 239, 246, 247, 264, 270, 271, 272, 291, 297, 303, 306, 307, 320, 324, 329, 330, 333, 334, 335, 337, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 376, 378, 382, 383, 386, 387, 390, 399, 400, 408, 415, 423, 427, 428, 429, 437, 438, 439, 444, 446, 451, 454, 461, 462, 463, 467, 472, 482, 483, 486, 487, 488, 489, 490, 492, 530, 534, 535, 537, 554, 556, 557, 570, 572, 573, 576, 578, 580, 581, 586, 587, 588, 589, 591, 592, 593, 594, 596, 599, 601, 602, 604, 607, 608, 609, 610, 611, 612, 615, 629, 632, 633, 637, 639, 648, 649, 657, 658, 659, 662, 664, 668, 692, 699, 702, 704, 705, 706, 707, 712, 714, 735, 738, 741, 747, 750, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 786, 787, 789, 792, 794, 797, 798, 803, 804, 806, 809], "directori": [1, 42, 43, 44, 47, 547, 569, 588, 591, 752, 753, 756, 757, 758, 763, 765, 777, 779], "keep": [1, 2, 3, 4, 13, 15, 19, 25, 26, 28, 54, 61, 71, 77, 84, 94, 342, 356, 419, 596, 668, 755, 756, 757, 758, 760, 762, 763, 764, 765, 770, 776, 777, 779, 780, 782, 787, 789, 793], "locat": [1, 3, 44, 141, 367, 482, 586, 598, 600, 603, 677, 693, 710, 756, 758, 762, 763, 767, 777, 778, 779, 780, 801], "ivy_root": 1, "environ": [1, 6, 8, 43, 46, 750, 751, 752, 758, 791, 793, 803, 805], "path": [1, 3, 43, 44, 740, 757, 763, 776, 777, 778, 803], "either": [1, 2, 23, 24, 33, 34, 35, 36, 40, 46, 53, 54, 55, 58, 67, 71, 76, 77, 78, 81, 82, 106, 109, 112, 118, 133, 134, 219, 220, 221, 222, 227, 237, 239, 240, 242, 244, 246, 253, 254, 260, 261, 262, 263, 264, 272, 281, 283, 284, 286, 289, 290, 321, 341, 352, 355, 367, 376, 386, 396, 397, 482, 483, 502, 522, 530, 531, 539, 558, 583, 585, 586, 589, 591, 593, 594, 597, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 632, 637, 640, 644, 670, 671, 672, 712, 713, 718, 720, 730, 732, 733, 734, 741, 756, 757, 758, 762, 764, 766, 767, 768, 769, 770, 771, 773, 776, 777, 778, 779, 782, 784, 787, 792, 803], "manual": [1, 4, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 598, 673, 683, 684, 756, 757, 758, 766, 771, 779, 788], "automat": [1, 6, 8, 10, 28, 29, 34, 756, 757, 758, 759, 762, 763, 765, 766, 771, 773, 776, 779, 782, 783, 785, 788, 789, 794, 798, 803, 806, 810], "past": [1, 758, 760, 778, 779, 803], "content": [1, 3, 4, 14, 16, 27, 28, 43, 44, 54, 71, 77, 367, 488, 756, 758, 763, 767, 776, 784, 787], "pem": 1, "file": [1, 3, 42, 43, 44, 55, 71, 547, 569, 591, 734, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771, 773, 777, 778, 779, 780, 784, 787, 799, 802, 803, 804], "refer": [1, 3, 8, 54, 61, 67, 68, 77, 79, 84, 90, 91, 132, 146, 244, 262, 304, 315, 340, 349, 352, 355, 356, 358, 383, 388, 398, 401, 419, 437, 572, 573, 586, 589, 592, 594, 596, 604, 605, 622, 624, 648, 661, 719, 721, 722, 723, 732, 750, 755, 756, 757, 758, 760, 761, 763, 765, 766, 772, 773, 774, 775, 776, 777, 778, 779, 792, 794, 803], "equival": [1, 2, 9, 11, 28, 59, 82, 94, 121, 233, 246, 267, 268, 281, 282, 358, 458, 586, 589, 594, 635, 638, 641, 649, 741, 776, 777, 782, 787, 789], "echo": [1, 757, 765], "n": [1, 2, 40, 43, 44, 45, 47, 50, 53, 54, 58, 59, 61, 63, 64, 67, 68, 76, 77, 81, 82, 84, 86, 87, 90, 91, 94, 96, 139, 144, 145, 146, 219, 289, 291, 315, 316, 325, 349, 352, 355, 356, 358, 361, 362, 365, 367, 369, 370, 371, 376, 377, 382, 383, 386, 387, 388, 396, 397, 398, 404, 405, 413, 415, 419, 429, 433, 436, 440, 442, 453, 459, 461, 462, 463, 467, 468, 469, 470, 471, 474, 481, 490, 586, 589, 593, 594, 596, 598, 600, 601, 604, 605, 606, 607, 608, 609, 611, 613, 615, 622, 625, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 646, 647, 648, 649, 656, 657, 659, 665, 669, 681, 694, 695, 696, 702, 716, 718, 719, 720, 721, 722, 723, 732, 735, 744, 750, 759, 763, 765, 779], "api_kei": 1, "bug": [1, 246, 589, 750, 756, 758, 763, 771, 777, 779], "pleas": [1, 3, 34, 43, 47, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 796, 797, 798], "rais": [1, 43, 44, 50, 54, 55, 63, 65, 68, 71, 73, 77, 78, 84, 86, 88, 91, 123, 153, 242, 277, 328, 352, 355, 358, 362, 367, 388, 398, 427, 428, 433, 435, 437, 438, 439, 446, 452, 459, 468, 487, 488, 496, 520, 538, 540, 550, 552, 558, 562, 587, 589, 591, 594, 596, 600, 601, 602, 604, 605, 632, 634, 648, 657, 658, 659, 661, 663, 664, 665, 666, 668, 694, 695, 696, 702, 707, 715, 717, 722, 723, 733, 734, 736, 750, 758, 760, 762, 766, 767, 770, 776, 777, 780, 781, 784, 786, 797], "github": [1, 4, 6, 7, 8, 10, 28, 42, 43, 44, 45, 46, 750, 752, 753, 755, 758, 760, 765, 766, 768, 769, 771, 779, 793, 796], "add": [1, 3, 21, 31, 44, 46, 53, 54, 62, 69, 71, 76, 77, 85, 92, 96, 97, 345, 353, 355, 397, 530, 558, 589, 591, 594, 599, 604, 646, 692, 720, 732, 735, 750, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 774, 776, 777, 779, 780, 782, 784, 786, 792, 799, 801, 803], "label": [1, 42, 43, 44, 54, 60, 77, 83, 357, 420, 422, 423, 424, 595, 651, 652, 653, 750, 756, 760, 777, 783, 784, 785, 789, 803], "accordingli": [1, 3, 59, 64, 65, 67, 68, 82, 87, 90, 91, 139, 239, 244, 246, 262, 272, 286, 586, 589, 594, 601, 602, 604, 605, 649, 700, 704, 705, 706, 707, 715, 716, 717, 718, 719, 720, 721, 722, 723, 777, 784], "member": [1, 756, 758, 777, 797], "team": [1, 3, 750, 751, 756, 757, 758, 777, 805], "back": [1, 42, 54, 61, 77, 84, 358, 437, 536, 559, 591, 593, 596, 619, 661, 731, 733, 734, 736, 757, 761, 766, 767, 770, 774, 775, 781, 783, 792, 797, 801, 805], "asap": 1, "haven": [1, 28, 29, 34, 803], "found": [1, 42, 44, 45, 47, 59, 61, 65, 71, 77, 82, 84, 88, 97, 200, 367, 432, 482, 588, 598, 625, 632, 665, 684, 704, 730, 752, 756, 757, 758, 761, 762, 763, 764, 766, 767, 769, 771, 774, 776, 777, 805], "ask": [1, 750, 756, 757, 768, 784, 786, 792, 798], "suggest": [1, 3, 756, 757, 758, 763, 766, 771, 775, 777, 779, 780, 781], "someth": [1, 750, 758, 762, 771, 780, 787, 788, 792, 809], "help": [1, 3, 17, 44, 46, 493, 538, 591, 604, 720, 731, 750, 751, 752, 753, 756, 757, 761, 762, 763, 764, 765, 766, 768, 771, 773, 774, 776, 777, 779, 780, 786, 787, 788, 790, 794, 799, 803, 805, 809], "post": [1, 6, 8, 42, 62, 85, 599, 692, 757, 775, 789], "forum": [1, 763], "discord": [1, 3, 43, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 796, 797, 798], "server": [1, 42, 750, 757, 758, 763, 803], "convert": [2, 5, 8, 9, 11, 13, 15, 17, 18, 20, 22, 25, 26, 28, 29, 30, 32, 34, 42, 45, 47, 49, 50, 53, 71, 72, 73, 76, 94, 122, 123, 140, 149, 150, 192, 193, 194, 195, 206, 214, 218, 238, 278, 358, 363, 427, 428, 429, 472, 536, 553, 555, 556, 557, 559, 586, 587, 588, 589, 591, 594, 598, 650, 674, 685, 686, 741, 744, 750, 756, 761, 762, 774, 775, 777, 779, 781, 784, 792, 794, 798, 801, 802, 809], "written": [2, 5, 6, 7, 17, 19, 28, 29, 42, 55, 750, 757, 760, 761, 769, 771, 772, 776, 777, 780, 784, 786, 789, 792, 796, 801, 803, 807, 809, 810], "choic": [2, 29, 46, 54, 67, 77, 90, 356, 358, 417, 431, 604, 719, 721, 750, 757, 765, 776, 777, 787, 798, 803, 810], "preserv": [2, 54, 55, 56, 71, 77, 78, 79, 97, 355, 356, 358, 367, 390, 416, 427, 428, 429, 438, 439, 488, 520, 581, 591, 592, 596, 658, 779, 789, 792], "logic": [2, 68, 91, 203, 239, 240, 266, 267, 268, 272, 275, 588, 589, 605, 722, 723, 756, 761, 765, 766, 767, 770, 773, 774, 775, 776, 777, 779, 782, 786], "target": [2, 13, 15, 21, 23, 24, 26, 28, 29, 31, 32, 33, 34, 35, 44, 54, 77, 194, 357, 421, 422, 423, 424, 588, 732, 734, 740, 750, 754, 757, 759, 762, 771, 778, 783, 787, 788, 789, 799, 801, 802, 803, 806, 808, 809], "optim": [2, 9, 11, 19, 28, 29, 42, 44, 45, 47, 56, 79, 303, 349, 357, 422, 494, 580, 591, 592, 597, 670, 671, 672, 731, 750, 766, 776, 782, 785, 787, 789, 791, 798, 801, 802, 803, 804, 805, 806, 807, 810], "tool": [2, 19, 28, 29, 750, 757, 758, 768, 771, 785, 789, 791, 792, 795, 798, 801, 802, 803, 804, 806, 809, 810], "make": [2, 3, 6, 8, 9, 10, 11, 20, 28, 29, 30, 42, 46, 741, 750, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 786, 787, 789, 793, 797, 798, 801, 803, 804, 805, 806, 809, 810], "ml": [2, 6, 7, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 47, 750, 751, 755, 777, 783, 784, 785, 787, 788, 789, 791, 795, 797, 798, 799, 800, 801, 802, 803, 806, 808, 810], "relat": [2, 26, 246, 589, 750, 752, 755, 756, 757, 758, 770, 777, 779, 780, 781, 782, 791, 806], "project": [2, 17, 22, 28, 29, 32, 593, 619, 732, 750, 753, 756, 757, 758, 761, 762, 763, 779, 788, 791, 792, 796, 797, 798, 799, 801, 803, 806, 810], "independ": [2, 19, 29, 54, 63, 77, 86, 222, 239, 272, 282, 362, 467, 589, 594, 600, 622, 641, 693, 750, 760, 766, 768, 774, 784, 789, 801], "research": [2, 28, 29, 42, 750, 791, 796, 803, 810], "deploi": [2, 42, 750, 765, 794, 801, 802, 803, 805, 809], "system": [2, 44, 594, 641, 750, 757, 758, 762, 765, 766, 792, 801, 803, 806, 808, 810], "build": [2, 12, 16, 17, 19, 26, 28, 29, 32, 33, 34, 35, 40, 42, 47, 65, 71, 97, 602, 704, 705, 706, 707, 732, 733, 734, 750, 751, 752, 757, 759, 765, 766, 773, 775, 783, 785, 788, 789, 792, 794, 797, 801, 803, 805, 808, 809, 810], "block": [2, 9, 28, 29, 32, 33, 34, 35, 356, 409, 750, 758, 764, 766, 770, 773, 779, 783, 785, 789, 792, 794, 808, 810], "neural": [2, 593, 728, 732, 750, 791, 799, 801, 802, 803, 807, 809, 810], "network": [2, 19, 26, 28, 29, 40, 42, 47, 593, 617, 728, 730, 731, 732, 733, 734, 750, 764, 773, 784, 788, 791, 797, 799, 801, 802, 803, 807, 809, 810], "layer": [2, 13, 15, 19, 25, 26, 28, 29, 40, 45, 54, 62, 77, 85, 599, 618, 619, 692, 729, 730, 731, 733, 734, 735, 736, 737, 750, 769, 777, 780, 782, 784, 785, 788, 796, 801, 803, 807, 810], "activ": [2, 13, 26, 28, 29, 54, 55, 58, 69, 77, 81, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 294, 298, 299, 301, 302, 552, 593, 619, 620, 731, 732, 750, 752, 757, 758, 766, 771, 780, 781, 788, 803, 806], "train": [2, 13, 15, 26, 28, 29, 45, 54, 56, 58, 77, 79, 81, 355, 361, 378, 379, 380, 461, 463, 572, 573, 578, 592, 593, 616, 619, 620, 731, 732, 733, 734, 735, 750, 764, 767, 773, 787, 788, 789, 790, 791, 792, 794, 798, 801, 802, 807, 809, 810], "pipelin": [2, 750, 753, 759, 760, 761, 778, 780, 789, 794, 796, 803, 804, 809], "publish": [2, 42, 750, 792, 798], "ex": [2, 765], "haiku": [2, 6, 7, 8, 9, 11, 26, 28, 29, 40, 42, 46, 729, 750, 789, 798, 803], "latest": [2, 42, 44, 53, 76, 154, 242, 252, 253, 268, 367, 481, 587, 589, 594, 596, 604, 640, 669, 719, 732, 750, 756, 757, 758, 760, 762, 765, 769, 780, 792, 793, 808], "integr": [2, 6, 7, 13, 15, 22, 29, 32, 51, 53, 54, 74, 76, 77, 151, 291, 337, 352, 367, 484, 587, 589, 750, 755, 757, 759, 774, 801, 803, 805, 806, 807], "kornia": [2, 17, 18, 25, 28, 29, 42, 46, 750], "advantag": [2, 26, 28, 29, 750, 757, 758, 776, 777, 793, 803], "featur": [2, 6, 11, 13, 15, 17, 19, 28, 29, 42, 46, 54, 77, 355, 369, 370, 371, 378, 379, 380, 731, 732, 750, 756, 757, 758, 761, 762, 765, 772, 780, 782, 787, 792, 803, 804, 805, 809], "tensorflow": [2, 12, 13, 17, 19, 20, 23, 24, 26, 28, 29, 30, 33, 34, 35, 40, 46, 53, 54, 55, 76, 77, 146, 193, 223, 315, 349, 356, 404, 552, 586, 588, 591, 741, 750, 754, 755, 756, 757, 758, 760, 762, 765, 766, 767, 772, 776, 777, 778, 779, 780, 782, 784, 789, 792, 794, 797, 798, 801, 804, 806, 807, 809, 810], "deploy": [2, 757, 802, 805, 806, 809, 810], "definit": [2, 47, 53, 59, 76, 82, 291, 589, 594, 621, 750, 758, 761, 766, 773, 786], "job": [2, 28, 29, 750, 763, 765], "graph": [2, 3, 6, 8, 17, 18, 21, 25, 26, 29, 35, 36, 41, 46, 47, 65, 602, 704, 705, 706, 707, 733, 734, 750, 764, 773, 777, 782, 785, 792, 794, 798, 799, 803, 806], "leverag": [2, 25, 28, 29, 750, 757, 776, 801, 803], "frontend": [2, 537, 591, 750, 755, 758, 759, 765, 766, 770, 775, 779, 782, 783, 785, 794, 803], "link": [2, 3, 19, 28, 29, 43, 750, 752, 756, 757, 758, 763, 765, 766, 771, 777, 799, 801], "swap": [2, 61, 84, 596, 666, 741], "replac": [2, 14, 16, 27, 43, 53, 55, 61, 63, 71, 76, 78, 84, 86, 132, 273, 304, 349, 534, 535, 539, 586, 589, 591, 596, 600, 654, 693, 758, 763, 764, 766, 767, 774, 777, 779, 786, 789, 792, 797, 810], "sourc": [2, 6, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 756, 757, 758, 760, 761, 763, 764, 765, 777, 796, 797, 798, 802, 803, 804, 805, 806], "debug_mod": 2, "params_v": [2, 42, 750], "must": [2, 34, 42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 306, 316, 317, 318, 321, 322, 323, 325, 328, 330, 332, 334, 335, 336, 337, 341, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 408, 409, 412, 413, 414, 415, 418, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 435, 437, 438, 439, 440, 442, 446, 448, 449, 450, 451, 453, 455, 456, 457, 459, 464, 465, 466, 467, 468, 470, 471, 474, 481, 482, 483, 484, 490, 498, 499, 503, 504, 505, 510, 511, 513, 520, 534, 535, 571, 572, 573, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 736, 738, 752, 755, 756, 757, 758, 760, 761, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 779, 780, 781, 782, 784, 788, 789, 796, 798, 804, 810], "unless": [2, 50, 54, 59, 73, 77, 141, 272, 320, 333, 338, 352, 586, 589, 594, 635, 762, 767, 776, 792], "explicitli": [2, 594, 627, 628, 644, 732, 733, 734, 760, 761, 762, 764, 766, 769, 770, 773, 774, 775, 776, 778, 779, 784, 792, 803], "nn": [2, 6, 8, 15, 26, 28, 29, 42, 46, 139, 586, 750, 773, 778, 782, 789, 804], "kera": [2, 12, 13, 15, 17, 18, 26, 28, 29, 45, 46, 729, 750, 798, 809], "hk": [2, 9, 11, 28, 42, 46, 750, 789], "trainabl": [2, 13, 15, 19, 25, 26, 28, 29, 46, 729, 733, 734, 737, 750, 769, 785, 787, 788], "transpile_kwarg": 2, "It": [2, 3, 6, 20, 28, 29, 30, 31, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 316, 321, 322, 330, 332, 334, 335, 336, 337, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 368, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 399, 400, 401, 408, 409, 412, 413, 414, 415, 420, 421, 422, 423, 424, 432, 435, 440, 448, 449, 450, 451, 453, 457, 461, 464, 465, 466, 467, 468, 470, 471, 481, 482, 483, 484, 491, 498, 499, 503, 504, 505, 510, 511, 520, 534, 535, 536, 572, 573, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 672, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 707, 708, 711, 712, 713, 716, 718, 719, 721, 722, 723, 731, 732, 750, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 801, 803, 804, 806, 807, 808, 809, 810], "alia": [2, 19, 28, 584, 756, 777], "similar": [2, 3, 19, 28, 29, 281, 589, 593, 619, 732, 754, 756, 757, 764, 765, 766, 767, 770, 771, 773, 774, 775, 777, 778, 779, 780, 787, 792, 796, 799, 800, 801, 802, 809], "instantli": [2, 750], "proper": [2, 750, 756, 777], "arrai": [2, 6, 7, 10, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 185, 195, 196, 200, 205, 207, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 538, 539, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 737, 741, 744, 746, 750, 754, 756, 757, 758, 759, 762, 763, 764, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 792, 794, 801, 802, 803, 805, 809, 810], "snippet": [2, 779], "test_fn": [2, 120, 585, 750], "x1": [2, 8, 19, 28, 29, 47, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 89, 96, 97, 101, 152, 162, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 304, 320, 323, 328, 329, 330, 332, 334, 339, 343, 349, 352, 358, 367, 441, 481, 492, 495, 587, 588, 589, 591, 594, 601, 603, 622, 629, 632, 637, 641, 644, 645, 648, 703, 710, 738, 750, 760, 766, 768, 770, 772, 776, 777], "effici": [2, 8, 9, 10, 11, 17, 18, 20, 21, 28, 29, 30, 31, 59, 82, 356, 357, 411, 422, 594, 635, 750, 757, 758, 764, 773, 774, 776, 779, 784, 787, 792, 803, 805, 806], "ret": [2, 13, 15, 28, 29, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 409, 412, 414, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 729, 730, 734, 736, 741, 746, 750, 766, 767, 769, 770, 775, 776, 777, 778, 780, 784, 789], "entir": [2, 19, 28, 29, 31, 44, 54, 67, 68, 71, 77, 78, 90, 91, 212, 242, 244, 284, 285, 355, 358, 367, 378, 379, 380, 447, 484, 516, 588, 589, 604, 605, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 756, 757, 758, 760, 761, 764, 766, 768, 770, 776, 777, 778, 779, 782, 784, 787, 788, 789, 792, 797, 798, 803, 809, 810], "just": [2, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 44, 54, 59, 67, 82, 94, 146, 315, 349, 356, 415, 586, 594, 604, 635, 714, 732, 750, 757, 758, 760, 762, 765, 766, 767, 768, 769, 773, 774, 776, 777, 778, 779, 784, 786, 787, 792, 797, 798, 803, 804, 809], "line": [2, 9, 11, 17, 18, 21, 22, 25, 28, 29, 31, 32, 43, 44, 289, 589, 750, 757, 760, 761, 762, 765, 767, 768, 770, 777, 779, 782, 785, 786, 787, 788, 790, 798, 806], "request": [2, 9, 11, 25, 28, 29, 42, 45, 54, 203, 362, 471, 588, 750, 751, 756, 768, 771, 780, 782, 798], "jnp": [2, 7, 20, 25, 28, 29, 30, 31, 34, 40, 42, 46, 750, 766, 767, 770, 772, 776, 780, 784, 789], "pil": [2, 6, 8, 9, 10, 11, 25, 28, 29, 43, 44, 45, 750], "jax_kornia": [2, 25, 28, 29, 750], "url": [2, 9, 11, 25, 28, 29, 42, 45, 750], "http": [2, 4, 6, 7, 8, 9, 10, 11, 15, 25, 28, 29, 42, 43, 44, 45, 46, 47, 53, 76, 79, 146, 154, 242, 252, 253, 268, 315, 349, 367, 481, 572, 573, 586, 587, 589, 592, 594, 596, 604, 640, 669, 719, 750, 752, 753, 757, 758, 760, 763, 765, 766, 769, 793], "cocodataset": [2, 9, 11, 25, 28, 29, 45, 750], "org": [2, 9, 11, 25, 28, 29, 42, 44, 45, 47, 53, 76, 79, 146, 154, 242, 252, 253, 268, 315, 349, 367, 481, 572, 573, 586, 587, 589, 592, 594, 596, 604, 640, 669, 719, 750, 769], "train2017": [2, 9, 11, 25, 28, 29, 750], "000000000034": [2, 25, 28, 29, 750], "jpg": [2, 6, 8, 9, 10, 11, 25, 28, 29, 44, 45, 750], "raw_img": [2, 25, 28, 29, 750], "stream": [2, 9, 11, 25, 28, 29, 42, 45, 52, 75, 213, 588, 750, 807], "raw": [2, 6, 8, 9, 10, 11, 25, 28, 29, 42, 45, 46, 71, 750, 769, 804], "format": [2, 3, 25, 26, 28, 29, 40, 42, 43, 44, 52, 55, 67, 70, 71, 72, 75, 112, 162, 196, 355, 366, 396, 477, 503, 583, 587, 588, 591, 593, 604, 605, 606, 607, 609, 610, 611, 613, 614, 714, 724, 725, 750, 758, 759, 765, 766, 767, 768, 769, 770, 777, 780, 784, 786, 787, 799, 801, 803, 804], "img": [2, 6, 8, 10, 25, 28, 29, 42, 43, 44, 46, 750, 787], "transpos": [2, 8, 25, 28, 29, 46, 54, 58, 59, 71, 77, 81, 82, 96, 356, 399, 413, 415, 480, 593, 594, 606, 608, 610, 612, 613, 614, 632, 636, 638, 644, 732, 750, 776, 786, 789], "expand_dim": [2, 25, 28, 29, 44, 46, 61, 84, 593, 596, 615, 750, 777, 784, 787], "255": [2, 8, 25, 28, 29, 42, 43, 44, 46, 58, 77, 81, 233, 589, 615, 750], "version": [2, 6, 25, 31, 42, 43, 44, 47, 48, 54, 77, 94, 104, 290, 324, 326, 352, 367, 486, 490, 571, 589, 591, 594, 627, 628, 741, 750, 757, 758, 763, 765, 766, 769, 776, 778, 784, 796, 797, 798, 809, 810], "enhanc": [2, 25, 28, 29, 750], "5": [2, 6, 7, 8, 9, 10, 13, 21, 24, 25, 26, 28, 29, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 121, 122, 123, 134, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 154, 158, 162, 164, 172, 174, 179, 196, 205, 210, 213, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 319, 322, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 402, 403, 405, 406, 407, 416, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 437, 438, 441, 442, 443, 446, 447, 452, 453, 454, 455, 456, 459, 460, 465, 466, 469, 471, 472, 474, 479, 481, 482, 483, 484, 485, 486, 488, 490, 496, 497, 498, 499, 502, 503, 504, 505, 507, 510, 511, 513, 516, 518, 519, 520, 534, 535, 539, 549, 550, 551, 552, 554, 558, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 642, 643, 644, 646, 647, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 744, 750, 756, 757, 758, 760, 762, 764, 765, 766, 768, 770, 772, 775, 778, 779, 786, 787, 788], "last": [2, 21, 26, 28, 31, 50, 54, 58, 59, 60, 61, 64, 66, 67, 68, 71, 73, 77, 81, 82, 83, 84, 89, 90, 91, 96, 137, 138, 141, 195, 304, 325, 349, 352, 355, 356, 357, 358, 365, 367, 383, 388, 398, 406, 422, 437, 447, 449, 474, 482, 483, 586, 588, 593, 594, 595, 596, 601, 603, 604, 605, 618, 619, 622, 625, 637, 646, 648, 652, 653, 655, 658, 661, 662, 663, 665, 699, 700, 708, 710, 711, 712, 713, 722, 723, 732, 741, 750, 758, 760, 762, 763, 766, 768, 776, 778, 779, 782, 784, 792, 798, 803], "least": [2, 28, 53, 54, 59, 76, 77, 239, 257, 272, 355, 358, 367, 382, 387, 427, 428, 429, 436, 438, 481, 589, 594, 601, 632, 702, 750, 758, 761, 765, 766, 767, 768, 773, 776, 779], "support": [2, 7, 19, 28, 31, 43, 52, 54, 55, 59, 75, 77, 78, 82, 146, 165, 169, 191, 198, 213, 222, 239, 246, 267, 268, 272, 282, 297, 315, 331, 347, 349, 352, 355, 356, 390, 403, 496, 508, 517, 520, 521, 538, 552, 586, 587, 588, 589, 591, 593, 594, 617, 626, 627, 628, 631, 633, 642, 649, 736, 741, 744, 752, 754, 756, 757, 758, 760, 761, 767, 768, 769, 772, 773, 775, 776, 778, 779, 780, 782, 783, 784, 786, 787, 789, 793, 794, 796, 797, 798, 800, 802, 803, 806, 808, 809, 810], "timm": [2, 12, 13, 17, 28, 29, 750], "pretrain": [2, 7, 9, 13, 14, 15, 28, 29, 47, 750], "mlp_encod": [2, 13, 28, 29, 750], "create_model": [2, 13, 28, 29, 750], "mixer_b16_224": [2, 13, 28, 29, 750], "num_class": [2, 6, 13, 15, 28, 29, 42, 44, 46, 750, 789], "randn": [2, 13, 15, 28, 29, 750], "224": [2, 6, 10, 13, 15, 28, 29, 42, 43, 45, 750], "encod": [2, 7, 13, 15, 28, 29, 42, 44, 55, 60, 78, 83, 507, 591, 595, 651, 750, 787, 797], "__init__": [2, 6, 8, 13, 15, 28, 29, 40, 41, 42, 44, 71, 93, 94, 95, 96, 97, 99, 100, 728, 731, 732, 733, 734, 735, 736, 737, 740, 741, 744, 745, 748, 750, 756, 761, 762, 766, 770, 777, 780, 784, 786, 787, 788, 789], "self": [2, 6, 8, 13, 15, 28, 29, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 593, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 736, 744, 750, 758, 761, 764, 770, 777, 778, 784, 786, 787, 788, 789], "1000": [2, 6, 9, 13, 28, 29, 42, 43, 44, 45, 47, 50, 73, 138, 586, 750, 787], "super": [2, 3, 6, 8, 13, 15, 28, 29, 42, 54, 77, 356, 404, 750, 770, 784, 787, 788, 789], "fc": [2, 15, 42, 750, 788], "linear": [2, 6, 15, 27, 28, 29, 40, 41, 42, 44, 47, 54, 55, 58, 70, 77, 78, 81, 104, 106, 108, 109, 112, 298, 299, 301, 302, 335, 347, 352, 355, 358, 367, 390, 447, 490, 507, 530, 583, 591, 593, 598, 619, 641, 680, 731, 732, 750, 764, 769, 773, 774, 776, 777, 779, 782, 784, 787, 788, 789, 801, 802, 803, 806], "output_s": [2, 54, 77, 355, 369, 370, 371, 732, 750], "with_bia": [2, 8, 732, 750, 788], "__call__": [2, 42, 732, 733, 734, 750], "_forward_classifi": [2, 750], "standard": [2, 53, 59, 62, 63, 67, 76, 85, 86, 90, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 356, 367, 418, 481, 571, 586, 587, 589, 591, 594, 596, 599, 600, 601, 602, 603, 604, 605, 621, 622, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 655, 657, 658, 659, 661, 662, 664, 665, 669, 692, 695, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 735, 744, 750, 759, 760, 761, 764, 766, 769, 772, 776, 779, 780, 792, 795, 799, 801, 802, 805, 806, 808], "rng_kei": [2, 9, 11, 28, 750], "random": [2, 9, 11, 13, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 42, 44, 45, 54, 58, 71, 77, 81, 313, 314, 349, 356, 407, 416, 419, 467, 468, 469, 470, 471, 593, 616, 693, 694, 695, 696, 697, 698, 731, 744, 750, 756, 767, 778, 779, 780, 789, 791, 803], "prngkei": [2, 9, 11, 21, 22, 28, 29, 42, 750, 789], "42": [2, 9, 11, 21, 22, 28, 29, 40, 42, 43, 48, 63, 70, 79, 86, 112, 233, 355, 376, 386, 572, 576, 583, 589, 592, 594, 599, 600, 604, 633, 637, 692, 693, 694, 695, 696, 697, 712, 714, 750, 784, 789], "uniform": [2, 20, 21, 22, 23, 24, 28, 29, 30, 31, 33, 34, 35, 42, 54, 63, 77, 86, 367, 484, 600, 693, 694, 696, 731, 750, 788, 810], "kei": [2, 9, 21, 22, 28, 29, 44, 46, 49, 54, 58, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 365, 378, 379, 380, 420, 421, 423, 424, 432, 453, 456, 461, 463, 464, 465, 466, 468, 474, 481, 482, 483, 484, 492, 493, 495, 496, 498, 499, 500, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 591, 593, 597, 598, 607, 608, 609, 610, 616, 617, 619, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 670, 671, 676, 682, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 729, 730, 732, 736, 750, 763, 764, 765, 773, 776, 777, 778, 779, 787, 793, 803, 806, 810], "dtype": [2, 6, 8, 10, 15, 21, 23, 24, 40, 43, 50, 51, 54, 55, 58, 59, 63, 64, 67, 73, 74, 76, 77, 78, 81, 82, 86, 87, 90, 96, 99, 100, 101, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 207, 273, 303, 304, 305, 306, 307, 308, 309, 313, 314, 319, 322, 324, 338, 349, 352, 355, 362, 367, 376, 386, 398, 467, 468, 469, 470, 471, 481, 482, 483, 484, 487, 489, 490, 507, 508, 509, 511, 520, 529, 556, 586, 587, 588, 591, 593, 594, 597, 598, 600, 601, 603, 604, 605, 609, 616, 633, 649, 672, 673, 694, 695, 696, 699, 700, 701, 710, 711, 712, 713, 718, 720, 722, 723, 731, 732, 734, 735, 737, 738, 750, 754, 760, 762, 766, 767, 768, 770, 773, 774, 776, 777, 778, 779, 780, 784, 786], "float32": [2, 6, 8, 10, 13, 15, 20, 21, 40, 42, 43, 44, 50, 51, 55, 58, 73, 74, 78, 81, 90, 138, 141, 143, 148, 149, 150, 154, 158, 159, 162, 163, 164, 165, 168, 171, 172, 174, 179, 182, 188, 252, 279, 319, 328, 349, 352, 355, 367, 376, 386, 398, 484, 520, 556, 586, 587, 589, 591, 593, 594, 597, 609, 611, 612, 615, 640, 642, 643, 649, 672, 750, 766, 768, 778, 779, 780], "forward_classifi": [2, 750], "param": [2, 9, 11, 28, 42, 43, 44, 46, 71, 78, 97, 493, 510, 511, 591, 738, 750, 789], "init": [2, 9, 11, 28, 42, 44, 54, 77, 356, 407, 416, 419, 731, 750, 760, 789], "rng": [2, 9, 11, 28, 42, 750, 789], "mention": [2, 13, 15, 28, 29, 34, 756, 757, 758, 761, 762, 768, 772, 773, 776, 777, 779, 782, 797, 803], "abov": [2, 19, 24, 28, 29, 34, 35, 50, 53, 54, 59, 63, 70, 76, 77, 82, 86, 112, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 302, 304, 315, 316, 322, 325, 347, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 388, 391, 392, 393, 394, 398, 403, 404, 447, 481, 484, 510, 514, 516, 518, 520, 557, 581, 583, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 694, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 782, 784, 786, 787, 788, 789, 803, 808], "exactli": [2, 17, 21, 31, 40, 41, 45, 289, 589, 764, 765, 766, 767, 768, 770, 779, 782, 796, 798], "wai": [2, 17, 18, 19, 22, 24, 28, 32, 34, 40, 94, 750, 753, 755, 757, 760, 761, 762, 763, 765, 766, 767, 776, 777, 778, 779, 782, 786, 787, 788, 789, 792, 793, 796, 797, 805, 809, 810], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 19, 779], "rough": 2, "edg": [2, 46, 54, 61, 77, 84, 310, 349, 355, 358, 367, 390, 447, 484, 596, 654, 656, 669, 760, 779, 803, 805, 809], "These": [2, 35, 54, 77, 356, 358, 367, 403, 446, 481, 593, 594, 619, 626, 627, 750, 752, 755, 756, 757, 758, 760, 764, 766, 768, 769, 772, 773, 776, 777, 779, 784, 785, 787, 788, 789, 792, 794, 796, 797, 798, 803, 807, 809, 810], "subclass": [2, 19, 28, 29, 774, 777, 782], "within": [2, 13, 15, 19, 28, 29, 49, 54, 77, 121, 320, 333, 352, 355, 391, 392, 393, 427, 428, 429, 586, 600, 696, 734, 750, 756, 758, 761, 765, 766, 777, 778, 779, 788, 792, 799, 800, 804], "sequenti": [2, 6, 8, 26, 28, 29, 44, 750, 763, 764, 788], "more": [2, 13, 16, 17, 19, 20, 21, 24, 26, 28, 29, 30, 31, 40, 42, 43, 44, 48, 53, 54, 59, 61, 65, 70, 76, 77, 82, 84, 88, 104, 106, 109, 112, 121, 152, 244, 246, 262, 277, 290, 345, 353, 356, 357, 358, 399, 400, 411, 414, 422, 427, 428, 429, 432, 453, 538, 583, 586, 587, 589, 591, 594, 596, 602, 625, 631, 632, 635, 638, 640, 642, 649, 658, 665, 704, 705, 706, 707, 728, 750, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 801, 802, 803, 804, 805, 806, 809, 810], "complex": [2, 26, 28, 29, 42, 48, 53, 54, 59, 70, 74, 76, 77, 82, 104, 106, 109, 112, 142, 143, 157, 171, 180, 186, 219, 220, 221, 222, 223, 224, 225, 228, 236, 237, 239, 240, 242, 244, 252, 253, 254, 255, 256, 260, 261, 262, 263, 272, 274, 277, 279, 282, 283, 284, 285, 286, 289, 290, 322, 352, 355, 356, 367, 377, 388, 398, 399, 403, 404, 405, 413, 415, 489, 549, 550, 583, 586, 587, 589, 591, 594, 601, 604, 626, 627, 628, 633, 640, 642, 644, 646, 649, 702, 718, 720, 728, 752, 756, 763, 766, 768, 774, 777, 779, 780, 782, 787, 788, 789, 792, 794, 799, 801, 803, 805, 809, 810], "should": [2, 3, 7, 45, 48, 50, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 76, 77, 78, 79, 81, 82, 84, 86, 87, 89, 90, 92, 94, 96, 97, 107, 111, 120, 139, 141, 144, 145, 153, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 304, 316, 330, 334, 335, 336, 337, 341, 346, 347, 349, 352, 354, 355, 356, 357, 358, 362, 367, 378, 379, 380, 382, 387, 407, 416, 419, 423, 446, 447, 467, 468, 481, 482, 483, 497, 520, 571, 573, 576, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 646, 648, 649, 661, 677, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 720, 721, 728, 729, 730, 731, 732, 734, 735, 736, 737, 744, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 795, 797, 799, 800, 803, 805, 810], "util": [2, 8, 26, 42, 45, 54, 77, 197, 356, 417, 588, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 757, 763, 767, 770, 773, 776, 779, 780, 784, 801, 809, 810], "requir": [2, 23, 33, 42, 43, 44, 47, 53, 54, 71, 76, 77, 273, 286, 290, 356, 358, 403, 404, 447, 589, 594, 596, 626, 627, 628, 665, 729, 752, 753, 756, 757, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 774, 777, 778, 779, 780, 782, 784, 786, 792, 803, 809], "state": [2, 16, 27, 42, 58, 81, 186, 187, 188, 189, 190, 272, 559, 561, 564, 566, 567, 587, 589, 591, 593, 618, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 750, 754, 757, 763, 766, 767, 769, 770, 771, 772, 777, 779, 783, 784, 785, 787, 791, 797, 809, 810], "mean": [2, 6, 9, 10, 11, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 44, 54, 55, 58, 60, 61, 63, 67, 69, 71, 73, 77, 78, 81, 83, 84, 86, 90, 92, 94, 134, 212, 324, 352, 355, 356, 357, 358, 361, 362, 367, 383, 388, 401, 411, 420, 421, 422, 423, 424, 432, 437, 447, 461, 463, 468, 487, 488, 504, 574, 575, 577, 582, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 600, 604, 608, 610, 611, 612, 615, 616, 624, 651, 661, 670, 671, 672, 679, 694, 695, 731, 732, 735, 750, 757, 758, 759, 760, 762, 764, 766, 767, 768, 773, 775, 776, 777, 779, 780, 782, 784, 786, 787, 788, 789, 791, 792, 794, 800, 803], "transformed_with_st": 2, "map": [2, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 352, 355, 378, 379, 380, 420, 421, 423, 424, 427, 428, 429, 432, 453, 455, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 571, 576, 581, 591, 598, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 680, 681, 685, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 761, 764, 766, 772, 773, 777, 779, 780, 787, 791, 792, 794, 804], "convolut": [2, 26, 54, 58, 77, 81, 355, 375, 393, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732, 801, 803], "c": [2, 19, 28, 34, 43, 44, 50, 54, 55, 56, 58, 61, 67, 73, 74, 76, 77, 78, 79, 81, 82, 84, 88, 90, 94, 110, 122, 123, 138, 141, 164, 167, 222, 233, 239, 240, 260, 261, 272, 275, 283, 290, 355, 356, 358, 361, 367, 369, 370, 371, 382, 387, 399, 400, 402, 403, 405, 414, 427, 428, 429, 437, 461, 462, 463, 483, 495, 503, 504, 505, 506, 514, 518, 519, 557, 572, 573, 576, 578, 579, 580, 583, 586, 587, 589, 591, 592, 593, 594, 596, 598, 601, 602, 604, 607, 608, 609, 610, 611, 612, 626, 628, 630, 661, 665, 673, 676, 680, 681, 682, 684, 685, 690, 691, 702, 707, 713, 714, 719, 721, 735, 744, 751, 757, 759, 762, 763, 764, 768, 773, 775, 783, 784, 785, 787, 792, 794, 795, 797, 798, 799, 803, 807, 808, 810], "h": [2, 8, 54, 55, 58, 77, 78, 81, 355, 374, 375, 392, 393, 503, 505, 591, 593, 598, 606, 609, 610, 611, 612, 613, 614, 615, 676, 680, 682, 685, 690, 759, 763, 764, 765, 799], "w": [2, 8, 43, 44, 54, 55, 56, 58, 71, 76, 77, 78, 79, 81, 94, 266, 331, 346, 352, 354, 355, 356, 373, 374, 375, 377, 391, 392, 393, 394, 405, 419, 480, 503, 505, 549, 572, 573, 574, 576, 578, 579, 580, 591, 592, 593, 598, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 679, 750, 759, 775, 784, 787, 788], "bigger": 2, "permut": [2, 8, 10, 42, 61, 84, 96, 365, 473, 596, 659, 666], "infer": [2, 5, 9, 11, 17, 21, 31, 33, 34, 43, 45, 47, 50, 54, 55, 58, 61, 73, 77, 78, 81, 84, 121, 123, 131, 135, 136, 140, 143, 148, 157, 158, 159, 160, 161, 303, 304, 362, 469, 514, 548, 586, 587, 591, 593, 596, 616, 661, 741, 759, 762, 766, 767, 779, 784, 789, 801, 802, 805, 807], "correct": [2, 9, 13, 15, 24, 34, 40, 42, 44, 67, 90, 185, 356, 417, 587, 596, 604, 654, 719, 721, 750, 756, 758, 759, 764, 765, 766, 767, 770, 772, 773, 776, 778, 779], "mind": [2, 4, 13, 15, 19, 25, 28, 32, 756, 761, 762, 764, 779, 793], "well": [2, 28, 29, 42, 43, 44, 78, 357, 422, 516, 591, 594, 641, 750, 753, 756, 758, 763, 765, 766, 770, 776, 777, 778, 779, 788, 789, 791, 802, 803, 804, 808], "hf": 2, "tf_model": 2, "tf_input": 2, "repo": [3, 13, 42, 752, 755, 758, 760, 763, 765, 766, 778, 779, 796], "hold": [3, 54, 55, 59, 67, 77, 82, 90, 94, 320, 333, 338, 352, 367, 433, 459, 482, 483, 488, 534, 535, 591, 594, 604, 633, 713, 750, 787, 804], "jupyt": [3, 797, 805], "exampl": [3, 9, 11, 19, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 412, 414, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 441, 442, 443, 444, 446, 447, 452, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 469, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 741, 744, 748, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 776, 777, 779, 780, 784, 786, 787, 788, 789, 791, 792, 798, 800, 801, 804, 806, 809, 810], "tab": [3, 756, 757, 765, 787], "web": 3, "relev": [3, 50, 73, 138, 586, 736, 750, 756, 757, 758, 761, 764, 765, 766, 768, 774, 775, 778, 779, 787, 793, 797, 801, 808, 809], "task": [3, 45, 597, 670, 671, 672, 750, 751, 758, 777, 778, 791, 803, 809, 810], "avil": 3, "discuss": [3, 756, 758, 763, 766, 767, 776, 777, 779, 782, 785, 786, 787, 792, 798, 799, 804], "comprehens": [3, 17, 758, 760], "possibl": [3, 6, 34, 50, 54, 73, 77, 84, 94, 123, 246, 289, 303, 349, 355, 357, 358, 377, 420, 427, 428, 429, 433, 435, 437, 438, 439, 446, 459, 530, 589, 591, 593, 604, 616, 657, 658, 659, 661, 663, 664, 666, 668, 715, 717, 747, 750, 751, 756, 757, 758, 760, 763, 764, 766, 768, 769, 771, 773, 775, 776, 777, 778, 779, 782, 784, 787, 791, 792, 797, 801, 803, 809], "easi": [3, 28, 29, 42, 757, 758, 761, 762, 764, 773, 775, 778, 779, 782, 797, 801, 803, 809, 810], "attract": 3, "visual": [3, 46, 748, 750, 757, 777, 779, 792, 803, 805, 808], "nice": [3, 779, 798, 803], "gener": [3, 8, 17, 21, 28, 29, 31, 34, 42, 44, 46, 47, 50, 53, 54, 58, 63, 69, 73, 76, 77, 81, 86, 92, 121, 137, 138, 146, 154, 239, 242, 252, 253, 268, 272, 281, 303, 306, 310, 311, 312, 313, 314, 315, 349, 356, 362, 367, 417, 469, 481, 586, 587, 589, 593, 594, 596, 600, 604, 616, 640, 644, 647, 669, 693, 694, 696, 697, 719, 736, 744, 756, 757, 758, 759, 760, 761, 763, 766, 767, 768, 769, 770, 772, 773, 776, 777, 778, 780, 783, 784, 786, 788, 789, 791, 792, 794, 801, 802, 803, 804, 805, 806, 807, 808, 809], "tone": [3, 7], "emoji": [3, 756], "thing": [3, 26, 40, 42, 744, 755, 756, 757, 758, 762, 777, 779, 782, 786, 787, 796, 797, 798, 803], "seriou": 3, "given": [3, 6, 19, 28, 41, 54, 55, 60, 61, 63, 71, 77, 78, 79, 83, 84, 86, 94, 96, 97, 121, 130, 137, 138, 157, 158, 159, 160, 161, 173, 178, 197, 206, 208, 210, 211, 212, 214, 218, 291, 317, 320, 324, 325, 331, 332, 333, 335, 338, 349, 352, 355, 356, 357, 358, 361, 362, 367, 373, 374, 375, 376, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 398, 404, 408, 421, 422, 423, 424, 425, 426, 434, 435, 436, 443, 445, 456, 460, 464, 465, 466, 467, 468, 469, 470, 471, 481, 482, 483, 484, 489, 511, 534, 535, 545, 572, 573, 576, 578, 579, 580, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 650, 651, 652, 653, 654, 657, 658, 659, 660, 662, 663, 667, 668, 680, 681, 690, 691, 694, 695, 696, 698, 710, 711, 712, 713, 728, 729, 731, 732, 734, 735, 736, 737, 738, 744, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 785, 786, 788, 791, 797, 798, 800, 805, 806, 809, 810], "intern": [3, 71, 99, 100, 101, 598, 673, 683, 684, 731, 732, 733, 734, 735, 737, 761, 764, 767, 769, 776, 778, 779, 781], "releas": [3, 43, 756, 757, 766, 780, 782, 792, 798, 803, 809], "corner": [3, 54, 77, 355, 390, 757, 758, 777], "anybodi": 3, "shortli": 3, "worri": [3, 28, 29, 756, 757, 771], "about": [3, 17, 18, 19, 22, 24, 26, 28, 29, 32, 43, 44, 51, 74, 164, 167, 587, 750, 753, 755, 756, 757, 758, 759, 760, 763, 765, 766, 767, 771, 772, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 798, 804, 805, 808], "style": [3, 42, 44, 358, 447, 601, 702, 758, 771, 803], "stori": 3, "anyon": [3, 750, 751, 758, 765, 792, 797, 809], "question": [3, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 750, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 792, 796, 797, 798], "ping": 3, "me": [3, 758], "guillermo": 3, "commun": [3, 43, 751, 756, 757, 758, 792, 797, 802, 803, 805], "ux": 3, "channel": [3, 26, 44, 54, 55, 58, 77, 78, 81, 96, 97, 355, 361, 378, 379, 380, 390, 461, 462, 463, 503, 507, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 728, 729, 731, 732, 734, 735, 736, 737, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782], "ensur": [3, 13, 15, 26, 54, 55, 77, 78, 355, 356, 391, 392, 393, 417, 520, 591, 750, 756, 757, 758, 761, 766, 767, 768, 770, 771, 772, 774, 776, 777, 778, 779, 780, 793, 803], "across": [3, 40, 64, 71, 78, 87, 96, 210, 211, 239, 246, 272, 290, 361, 463, 495, 516, 551, 588, 589, 591, 593, 598, 601, 616, 619, 679, 699, 700, 732, 756, 760, 766, 768, 770, 772, 773, 775, 779, 782, 801, 803, 808], "templat": [3, 750, 763, 769, 779], "asset": [3, 794], "01_templat": 3, "ipynb": 3, "firstli": [3, 20, 21, 24, 30, 31, 35, 40, 761, 766, 768, 769, 770, 773, 774, 776, 782, 787, 799, 809], "updat": [3, 7, 8, 9, 11, 22, 28, 29, 42, 44, 49, 55, 56, 71, 78, 79, 94, 520, 534, 535, 538, 539, 561, 572, 573, 576, 578, 579, 580, 591, 592, 593, 597, 598, 616, 618, 670, 671, 672, 680, 681, 685, 690, 691, 729, 735, 736, 741, 750, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 772, 774, 775, 777, 778, 779, 782, 784, 786, 787, 789, 792], "name": [3, 9, 28, 29, 40, 42, 43, 44, 54, 59, 65, 69, 82, 88, 92, 246, 356, 358, 403, 456, 458, 493, 494, 589, 591, 594, 602, 626, 627, 631, 639, 640, 642, 647, 704, 705, 706, 734, 741, 743, 756, 757, 758, 762, 763, 764, 765, 768, 769, 770, 772, 777, 778, 779, 780, 781, 782, 784, 787, 789, 803], "match": [3, 51, 54, 71, 74, 77, 151, 246, 281, 323, 325, 352, 355, 358, 398, 431, 452, 455, 530, 587, 589, 591, 594, 627, 628, 633, 649, 754, 756, 761, 763, 764, 768, 778, 804, 809], "topic": [3, 17, 20, 21, 22, 30, 31, 32, 33, 34, 35, 750, 774, 786, 803], "Then": [3, 47, 593, 619, 753, 756, 757, 758, 762, 763, 765, 771, 774, 776, 779, 780, 792], "place": [3, 42, 49, 50, 53, 54, 55, 59, 61, 71, 73, 75, 76, 77, 78, 82, 84, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 303, 304, 307, 315, 316, 320, 322, 325, 326, 330, 332, 333, 334, 335, 337, 338, 339, 343, 344, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 437, 447, 452, 468, 481, 484, 488, 496, 504, 505, 510, 514, 516, 518, 519, 520, 534, 538, 552, 557, 561, 581, 586, 587, 588, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 736, 750, 752, 755, 758, 759, 760, 763, 764, 765, 767, 768, 769, 772, 773, 777, 778, 779, 780, 782, 789, 794, 805], "folder": [3, 44, 750, 752, 757, 758, 760, 763, 765, 773, 777, 779, 780, 781], "next": [3, 8, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 42, 44, 54, 77, 164, 330, 334, 339, 343, 352, 587, 731, 733, 734, 736, 752, 756, 757, 758, 762, 766, 768, 769, 771, 774, 785, 786, 787, 798, 803, 805], "edit": [3, 752, 756, 757, 758, 771], "titl": [3, 14, 16, 27, 43, 46, 750, 756, 758, 763], "descript": [3, 4, 37, 38, 39, 44, 47, 50, 53, 54, 59, 76, 77, 82, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 447, 481, 484, 510, 514, 516, 518, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 756, 758, 769, 775, 776], "render": [3, 763, 769], "webpag": [3, 17], "behind": [3, 19, 28, 750, 759, 772, 779, 783, 785], "exist": [3, 19, 28, 29, 42, 43, 44, 47, 50, 54, 55, 71, 73, 77, 78, 84, 123, 358, 427, 428, 432, 433, 435, 437, 438, 439, 446, 459, 502, 538, 591, 596, 655, 657, 658, 659, 661, 663, 664, 666, 668, 736, 738, 750, 756, 757, 760, 762, 767, 768, 769, 773, 774, 776, 777, 779, 782, 784, 792, 794, 796, 797, 801, 803, 806, 809], "cell": [3, 4, 6, 7, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 58, 81, 593, 618, 732, 765, 784], "h2": [3, 4, 14, 16, 27], "tag": [3, 4, 14, 16, 27, 757, 758], "section": [3, 4, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 48, 54, 65, 77, 106, 355, 358, 388, 398, 433, 442, 459, 602, 704, 705, 706, 707, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 782, 783, 787, 788, 799, 806, 809], "h3": [3, 4, 14, 16, 27], "subsect": [3, 4, 14, 16, 27, 756, 757, 758, 760, 765], "step": [3, 4, 14, 15, 16, 27, 28, 29, 40, 42, 43, 44, 54, 56, 73, 77, 79, 121, 137, 358, 441, 572, 573, 576, 578, 579, 580, 586, 592, 597, 670, 671, 672, 730, 736, 750, 752, 756, 757, 758, 761, 762, 764, 765, 766, 767, 768, 775, 777, 779, 784, 787, 788, 789, 791, 798, 803], "explan": [3, 4, 14, 16, 27, 756, 757, 758, 764, 769, 772, 777, 780, 786], "go": [3, 7, 13, 15, 19, 26, 29, 34, 49, 54, 81, 355, 397, 598, 673, 674, 683, 684, 685, 750, 751, 752, 754, 756, 757, 758, 759, 762, 763, 765, 766, 768, 771, 777, 778, 779, 780, 783, 787, 792, 799, 803, 804, 808, 810], "text": [3, 7, 42, 54, 55, 356, 415, 756, 758, 763, 768, 769], "paragraph": [3, 4, 14, 16, 27, 763], "p": [3, 4, 14, 16, 27, 40, 54, 55, 59, 77, 78, 82, 139, 243, 356, 361, 400, 466, 498, 499, 586, 589, 591, 594, 598, 633, 649, 681, 732, 750, 757, 758, 759], "toctre": [3, 763], "index": [3, 42, 43, 44, 47, 50, 54, 55, 61, 64, 65, 66, 71, 73, 77, 78, 84, 87, 88, 89, 132, 139, 208, 304, 311, 312, 317, 318, 349, 355, 356, 358, 363, 365, 367, 377, 383, 408, 410, 415, 431, 437, 440, 448, 450, 452, 455, 457, 472, 473, 482, 490, 493, 511, 513, 534, 535, 539, 584, 586, 588, 591, 596, 598, 601, 602, 603, 661, 665, 675, 676, 677, 680, 681, 682, 688, 690, 699, 700, 702, 704, 705, 706, 708, 710, 732, 746, 764, 765, 770, 773, 774, 775, 776, 778, 779, 786, 803], "rst": 3, "left": [3, 21, 31, 42, 43, 54, 59, 64, 66, 77, 82, 87, 89, 115, 116, 231, 246, 324, 338, 345, 352, 353, 355, 356, 358, 367, 389, 403, 407, 411, 417, 418, 438, 448, 486, 487, 488, 489, 490, 503, 585, 589, 591, 594, 601, 603, 626, 627, 633, 642, 647, 699, 710, 757, 758, 760, 763, 765, 766, 768], "mai": [3, 52, 53, 54, 59, 65, 66, 75, 76, 82, 89, 96, 97, 121, 133, 213, 239, 240, 246, 251, 259, 267, 268, 272, 273, 275, 290, 383, 502, 538, 586, 588, 589, 591, 594, 602, 603, 604, 640, 649, 704, 705, 706, 707, 708, 711, 715, 716, 717, 719, 755, 756, 757, 758, 760, 764, 765, 766, 770, 773, 774, 775, 777, 778, 779, 782, 785, 786, 788, 798, 810], "grid": [3, 44, 50, 139, 307, 349, 586, 768, 779, 791], "card": [3, 54, 77, 342, 352, 808], "document": [3, 19, 28, 61, 246, 571, 589, 591, 665, 751, 753, 755, 758, 763, 765, 766, 768, 776, 777, 778, 779, 787, 789], "sphinx": [3, 753, 763], "design": [3, 19, 28, 77, 246, 303, 308, 309, 349, 589, 750, 759, 763, 765, 766, 776, 777, 778, 782, 784, 786, 792, 796, 797, 799, 801, 803, 806, 807, 808], "websit": [3, 46, 757, 760, 797], "alreadi": [4, 20, 24, 26, 28, 29, 34, 42, 44, 47, 54, 59, 71, 77, 82, 235, 245, 272, 282, 292, 358, 367, 428, 429, 447, 479, 488, 589, 594, 629, 637, 744, 750, 756, 757, 758, 762, 764, 766, 767, 772, 776, 777, 782, 792, 793, 803, 805, 810], "instal": [4, 8, 9, 11, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 45, 46, 47, 752, 753, 757, 758, 762, 763, 771, 791], "skip": [4, 7, 44, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 356, 358, 378, 379, 380, 408, 410, 415, 420, 421, 423, 424, 427, 428, 429, 432, 448, 451, 453, 455, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 598, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 744, 763, 773, 779], "colab": [4, 7, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 42, 44, 46, 47], "do": [4, 6, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 40, 42, 44, 54, 55, 71, 77, 78, 239, 272, 281, 358, 367, 432, 488, 490, 520, 589, 591, 598, 673, 680, 683, 684, 685, 690, 750, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 784, 786, 787, 788, 789, 792, 794, 798, 804, 809, 810], "packag": [4, 6, 8, 10, 13, 29, 42, 43, 44, 47, 743, 750, 752, 754, 757, 765, 777, 792, 793, 803, 805], "click": [4, 6, 44, 756, 757, 758, 765, 769, 771, 785], "runtim": [4, 6, 7, 8, 9, 10, 11, 21, 28, 31, 42, 43, 759, 773, 779, 782, 803], "restart": [4, 6, 7, 8, 10, 42, 43, 757], "pip": [4, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 752, 754, 757, 763, 771, 791], "q": [4, 6, 7, 8, 9, 10, 11, 42, 43, 44, 54, 58, 59, 77, 81, 82, 344, 352, 356, 367, 403, 490, 593, 594, 598, 620, 626, 627, 639, 681, 757, 758, 759, 778, 792], "git": [4, 6, 7, 8, 10, 28, 42, 43, 44, 45, 750, 752, 753, 755, 757, 758, 760, 763, 765, 771, 779, 793], "clone": [4, 6, 8, 10, 28, 42, 44, 45, 750, 752, 753, 758, 793], "com": [4, 6, 7, 8, 10, 15, 28, 42, 43, 44, 45, 46, 750, 752, 753, 757, 758, 760, 763, 765, 766, 793], "unifyai": [4, 6, 8, 10, 28, 42, 43, 44, 45, 46, 750, 752, 753, 757, 758, 763, 793], "depth": [4, 6, 8, 10, 43, 50, 54, 58, 73, 77, 81, 141, 355, 358, 390, 434, 503, 515, 586, 591, 593, 598, 611, 612, 685, 730, 734, 758, 765, 787, 788, 789, 791, 793], "repositori": [4, 6, 8, 10, 752, 753, 757, 758, 759, 760, 763, 798], "cd": [4, 6, 8, 10, 28, 45, 750, 752, 753, 757, 758, 793], "classif": [5, 6, 10, 17, 42, 750, 803], "acceler": [5, 17, 750, 777, 801, 805, 806, 807, 808], "faster": [5, 6, 9, 11, 17, 28, 29, 45, 47, 54, 59, 77, 82, 356, 418, 594, 642, 755, 794, 805, 808], "mmpretrain": [5, 17], "segment": [5, 17, 54, 77, 317, 318, 349, 763, 768], "unet": [5, 17], "alexnet": [5, 17], "how": [5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 46, 47, 48, 53, 54, 70, 76, 77, 104, 106, 109, 112, 239, 272, 290, 358, 431, 452, 455, 583, 589, 728, 730, 731, 732, 733, 734, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 792, 796, 798, 799, 803], "three": [6, 7, 17, 23, 33, 34, 44, 54, 139, 303, 349, 358, 429, 586, 757, 758, 764, 765, 766, 768, 777, 779, 782, 783, 784, 804, 809], "major": [6, 7, 601, 702, 766, 767, 778, 779, 792, 797, 800, 803], "sinc": [6, 8, 10, 25, 26, 28, 29, 42, 44, 54, 77, 352, 750, 757, 758, 760, 761, 762, 764, 765, 766, 767, 770, 776, 777, 792, 797, 803, 809], "notebook": [6, 7, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 43, 734], "sure": [6, 8, 9, 10, 11, 28, 42, 756, 757, 758, 760, 765, 770, 777, 778, 779, 782, 793], "gpu": [6, 7, 8, 9, 10, 11, 42, 44, 46, 47, 195, 197, 198, 201, 204, 206, 208, 210, 211, 214, 216, 218, 588, 750, 757, 758, 765, 767, 786, 793, 801, 803, 806, 807, 808], "dm": [6, 7, 8, 9, 11, 28, 29, 40, 42], "exit": [6, 8, 10, 25, 28, 29, 767], "imagenet": [6, 15, 43, 45, 750], "wget": [6, 8, 10, 42, 43, 46, 757], "githubusercont": [6, 8, 10, 42, 46], "hub": [6, 8, 10, 42, 45, 47], "master": [6, 8, 10, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 45, 46, 765, 803], "imagenet_class": [6, 10], "txt": [6, 10, 43, 55, 757, 760, 763], "r": [6, 10, 42, 43, 54, 59, 71, 77, 82, 94, 331, 346, 352, 354, 574, 592, 594, 596, 639, 668, 757, 758, 759, 775, 778], "f": [6, 7, 9, 10, 28, 29, 41, 42, 44, 54, 61, 77, 84, 297, 310, 347, 349, 358, 437, 596, 598, 661, 676, 680, 681, 682, 685, 690, 691, 750, 751, 758, 759, 764, 765, 784, 787, 798, 799], "categori": [6, 10, 756, 760, 761, 764, 766, 770, 777, 780, 783], "strip": [6, 10, 21, 31, 797], "readlin": [6, 10, 43], "filenam": [6, 8, 10, 28, 29, 42, 44, 47, 55, 734, 740, 787], "torchvis": [6, 9, 10, 42, 798], "np": [6, 7, 8, 9, 11, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 50, 53, 54, 76, 77, 78, 122, 123, 129, 140, 175, 252, 256, 355, 356, 382, 387, 399, 549, 586, 587, 589, 591, 598, 679, 741, 744, 750, 756, 761, 766, 767, 770, 772, 776, 777, 778, 779, 780, 782, 784, 786, 787, 789, 794], "filterwarn": [6, 7], "ignor": [6, 7, 41, 49, 50, 54, 71, 77, 139, 355, 356, 358, 378, 379, 380, 404, 449, 450, 454, 586, 593, 594, 598, 619, 631, 684, 685, 736, 763, 765, 768, 779, 792, 809], "resiz": [6, 8, 9, 10, 42, 43, 54, 77, 355, 390, 782], "256": [6, 8, 10, 53, 78, 282, 283, 550, 593, 608, 610, 612], "centercrop": [6, 10], "totensor": [6, 9, 10, 42], "485": [6, 10, 42], "456": [6, 10, 42, 779], "406": [6, 10, 42, 54, 77, 376, 498, 591], "std": [6, 9, 10, 11, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 43, 58, 63, 67, 81, 86, 90, 362, 468, 593, 600, 604, 608, 610, 611, 612, 615, 694, 695, 750, 768], "229": [6, 10, 42, 278, 589], "225": [6, 10, 42, 44, 233, 589], "torch_img": [6, 8, 10], "unsqueez": [6, 8, 9, 10], "ipython": [6, 8, 10, 28, 29, 47], "displai": [6, 8, 10, 25, 28, 29, 42, 43, 44, 46, 47, 757, 763, 765, 770, 779, 787], "end": [6, 8, 42, 43, 54, 77, 121, 227, 283, 335, 352, 358, 437, 447, 449, 450, 452, 586, 589, 730, 750, 757, 758, 762, 765, 776, 780, 782, 783, 791, 792, 801, 806], "see": [6, 7, 9, 11, 20, 21, 26, 28, 29, 30, 31, 35, 40, 41, 47, 48, 51, 53, 59, 64, 65, 67, 68, 70, 76, 77, 82, 87, 90, 91, 94, 96, 97, 104, 106, 109, 112, 121, 133, 137, 146, 153, 172, 179, 222, 227, 229, 231, 232, 233, 234, 239, 240, 244, 246, 250, 251, 258, 259, 262, 264, 266, 268, 269, 272, 275, 277, 281, 288, 290, 293, 315, 349, 356, 400, 583, 586, 587, 589, 594, 601, 602, 604, 605, 622, 635, 638, 641, 648, 649, 700, 704, 705, 706, 707, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 750, 751, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 771, 772, 773, 777, 778, 779, 782, 784, 786, 787, 791, 792, 796, 799], "ivy_model": [6, 7, 8, 10, 45], "ivy_alexnet": 6, "order": [6, 22, 32, 34, 42, 45, 47, 50, 54, 55, 58, 59, 61, 65, 66, 71, 77, 81, 82, 84, 88, 89, 94, 96, 97, 122, 123, 139, 146, 227, 246, 289, 315, 331, 349, 352, 356, 358, 361, 365, 400, 403, 404, 405, 406, 410, 414, 416, 419, 437, 438, 439, 444, 445, 456, 461, 462, 463, 474, 586, 589, 593, 594, 596, 597, 601, 602, 603, 607, 608, 609, 610, 611, 612, 615, 626, 627, 633, 642, 643, 647, 649, 658, 661, 670, 671, 702, 704, 705, 706, 707, 708, 710, 711, 730, 734, 735, 737, 750, 756, 757, 758, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 787, 789, 792, 796, 799, 802, 803, 804, 806, 809], "quick": [6, 17, 29, 758, 759, 778, 788], "cost": [6, 56, 79, 572, 573, 576, 578, 579, 580, 592, 597, 670, 671, 672, 782, 801], "asarrai": [6, 7, 8, 9, 10, 43, 50, 54, 55, 66, 73, 77, 78, 89, 122, 365, 473, 474, 503, 514, 518, 519, 549, 550, 586, 591, 593, 602, 603, 607, 705, 709, 770, 774, 777, 778], "cuda": [6, 7, 8, 9, 10, 11, 19, 28, 43, 44, 47, 50, 54, 63, 73, 77, 86, 137, 138, 141, 192, 193, 194, 208, 210, 362, 467, 468, 470, 471, 586, 588, 600, 693, 694, 695, 696, 731, 732, 733, 734, 735, 736, 737, 750, 784, 792, 794, 808], "7": [6, 8, 9, 11, 13, 15, 20, 21, 23, 24, 26, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 106, 107, 108, 109, 121, 122, 123, 137, 140, 141, 158, 164, 167, 197, 219, 222, 225, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 245, 246, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 264, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 282, 283, 284, 286, 289, 290, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 306, 309, 310, 320, 322, 324, 325, 331, 332, 333, 335, 337, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 394, 396, 397, 398, 402, 412, 420, 421, 422, 423, 424, 427, 428, 429, 433, 437, 442, 443, 446, 447, 452, 453, 455, 459, 460, 469, 471, 472, 479, 482, 483, 485, 486, 490, 496, 498, 499, 503, 504, 507, 518, 519, 520, 527, 534, 535, 549, 552, 572, 573, 575, 576, 577, 578, 580, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 612, 615, 616, 617, 620, 622, 623, 624, 625, 628, 629, 632, 634, 637, 640, 642, 643, 644, 646, 647, 651, 652, 653, 654, 657, 658, 663, 665, 666, 668, 673, 674, 681, 685, 692, 693, 694, 695, 696, 698, 703, 704, 706, 708, 709, 711, 712, 713, 714, 716, 718, 720, 721, 757, 758, 762, 764, 765, 768, 773, 776, 779], "softmax": [6, 10, 13, 26, 28, 29, 44, 48, 58, 69, 70, 81, 583, 593, 619, 620, 728, 750], "argsort": [6, 10, 66, 89, 603, 710, 777], "descend": [6, 10, 66, 89, 594, 603, 642, 643, 708, 711], "top": [6, 10, 12, 17, 26, 28, 29, 42, 43, 54, 61, 77, 310, 349, 358, 456, 503, 591, 655, 730, 750, 757, 758, 766, 777, 779, 782, 787, 788, 803, 807], "gather": [6, 10, 42, 54, 55, 77, 78, 317, 318, 349, 511, 513, 591, 810], "to_list": [6, 10, 55, 78, 591], "282": [6, 10], "281": [6, 10, 42, 44], "285": [6, 10, 77], "dev": [6, 9, 10, 11, 21, 42, 44, 47, 52, 71, 75, 200, 207, 588, 757, 767, 773, 786, 788], "64773697": 6, "29496649": 6, "04526037": 6, "39": [6, 7, 9, 10, 13, 15, 19, 40, 42, 43, 44, 45, 47, 48, 53, 54, 59, 63, 70, 76, 77, 79, 82, 86, 106, 225, 260, 262, 264, 294, 347, 355, 367, 374, 376, 393, 396, 482, 572, 583, 589, 592, 594, 604, 629, 637, 695, 714], "tiger": [6, 10], "tabbi": [6, 10], "egyptian": [6, 10], "confirm": [6, 43, 756], "8": [6, 9, 20, 21, 23, 40, 42, 44, 47, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 96, 97, 104, 135, 136, 140, 143, 148, 157, 159, 160, 161, 164, 197, 214, 222, 224, 225, 229, 230, 233, 235, 237, 243, 246, 250, 251, 257, 258, 259, 264, 267, 268, 270, 271, 272, 277, 278, 281, 282, 283, 286, 287, 290, 291, 292, 298, 299, 301, 303, 304, 320, 328, 331, 333, 334, 335, 338, 345, 347, 349, 352, 355, 356, 357, 358, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 392, 394, 396, 397, 402, 409, 420, 421, 423, 424, 425, 427, 428, 429, 433, 437, 442, 443, 452, 453, 455, 456, 459, 460, 469, 471, 483, 486, 487, 490, 496, 497, 499, 503, 504, 507, 510, 514, 518, 519, 520, 522, 523, 526, 529, 534, 535, 539, 549, 550, 551, 552, 572, 575, 577, 580, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 607, 611, 612, 615, 616, 617, 619, 623, 624, 625, 628, 629, 632, 633, 634, 637, 640, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 658, 665, 666, 668, 674, 681, 685, 693, 694, 695, 696, 698, 703, 704, 706, 708, 709, 711, 713, 714, 716, 718, 720, 721, 732, 757, 764, 765, 768, 779, 783, 787], "torch_alexnet": 6, "alexnet_weight": 6, "weight": [6, 13, 15, 28, 29, 42, 43, 54, 56, 58, 60, 77, 79, 81, 83, 94, 306, 310, 335, 349, 352, 355, 356, 367, 381, 408, 479, 481, 484, 572, 573, 576, 578, 579, 580, 592, 593, 595, 597, 617, 618, 619, 620, 651, 672, 731, 732, 734, 736, 750, 764, 773, 779, 784, 788, 789, 802], "imagenet1k_v1": [6, 10], "dropout": [6, 58, 81, 355, 378, 379, 380, 593, 619, 620, 732, 787], "9": [6, 7, 8, 9, 10, 11, 20, 21, 23, 40, 42, 44, 47, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 70, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 89, 90, 96, 97, 104, 121, 122, 123, 140, 157, 158, 159, 160, 161, 164, 167, 220, 222, 224, 225, 228, 229, 230, 233, 239, 240, 246, 253, 259, 260, 261, 267, 268, 270, 271, 272, 275, 277, 278, 282, 283, 286, 287, 288, 293, 295, 298, 299, 326, 327, 331, 337, 338, 345, 347, 352, 353, 355, 357, 358, 365, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 392, 394, 396, 397, 409, 420, 421, 423, 427, 428, 429, 433, 437, 442, 452, 453, 454, 456, 459, 469, 471, 474, 483, 499, 503, 504, 505, 507, 510, 518, 519, 522, 523, 526, 534, 535, 549, 551, 572, 573, 574, 578, 583, 586, 587, 589, 591, 592, 593, 594, 596, 598, 600, 601, 602, 603, 604, 607, 608, 609, 612, 615, 616, 617, 622, 623, 625, 628, 629, 632, 633, 634, 637, 640, 642, 643, 644, 646, 647, 654, 658, 662, 663, 665, 666, 668, 673, 674, 679, 681, 684, 685, 693, 694, 695, 696, 698, 703, 704, 706, 708, 709, 711, 713, 714, 716, 718, 720, 721, 736, 764, 768, 775, 779, 787, 788, 799], "torch_output": [6, 8, 10], "dim": [6, 10, 44, 54, 71, 73, 77, 141, 304, 349, 355, 358, 372, 382, 383, 384, 387, 395, 437, 586, 593, 606, 613, 614, 732, 750, 766, 777, 778, 782], "torch_class": [6, 10], "torch_logit": [6, 10], "devic": [6, 8, 9, 10, 43, 44, 47, 50, 54, 63, 71, 73, 77, 86, 96, 99, 100, 101, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 303, 304, 315, 316, 349, 362, 435, 467, 468, 470, 471, 494, 508, 509, 586, 591, 600, 693, 694, 695, 696, 729, 731, 732, 733, 734, 735, 736, 737, 738, 741, 750, 758, 759, 762, 766, 770, 773, 774, 778, 779, 780, 782, 784, 789, 792, 793, 794, 797, 802, 803, 805, 806, 807, 808], "6477": 6, "2950": 6, "0453": 6, "grad_fn": [6, 10, 26, 40, 575, 582, 592, 787], "lt": [6, 10, 13, 15, 19, 23, 24, 26, 40, 42, 44, 97], "takebackward0": [6, 10], "gt": [6, 10, 13, 15, 19, 23, 24, 26, 40, 42, 44, 47, 97, 778, 784], "great": [6, 8, 750, 758, 779, 784, 786, 797, 798, 809], "u": [6, 9, 42, 44, 46, 47, 54, 59, 73, 77, 82, 94, 138, 356, 411, 417, 418, 594, 598, 621, 628, 642, 681, 750, 751, 757, 758, 759, 764, 765, 771, 774, 776, 777, 778, 779, 780, 782, 788, 792, 797], "try": [6, 20, 30, 40, 43, 47, 71, 558, 591, 731, 741, 750, 756, 757, 758, 760, 761, 764, 765, 766, 770, 771, 776, 778, 784, 786, 792, 795, 797, 798], "10": [6, 8, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 44, 46, 47, 50, 53, 54, 55, 56, 58, 59, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 121, 136, 137, 138, 221, 229, 230, 233, 237, 244, 249, 251, 257, 259, 261, 272, 278, 285, 286, 291, 296, 320, 323, 328, 330, 331, 333, 334, 335, 337, 338, 342, 345, 352, 355, 358, 367, 373, 374, 375, 376, 386, 391, 392, 394, 396, 397, 398, 429, 431, 433, 437, 442, 453, 459, 479, 482, 483, 486, 488, 490, 503, 504, 505, 507, 510, 511, 513, 518, 519, 527, 535, 539, 544, 549, 551, 563, 566, 578, 586, 589, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 616, 623, 625, 629, 630, 632, 633, 634, 637, 642, 643, 644, 658, 663, 664, 665, 666, 668, 679, 681, 684, 685, 692, 693, 694, 695, 696, 702, 704, 710, 712, 713, 714, 715, 717, 718, 720, 721, 736, 750, 757, 760, 764, 765, 766, 768, 775, 778, 779, 784, 786, 787, 797, 808], "11": [6, 8, 19, 21, 23, 40, 42, 43, 44, 47, 53, 54, 55, 58, 59, 63, 67, 76, 77, 78, 81, 82, 84, 86, 90, 97, 222, 226, 229, 244, 281, 282, 288, 335, 352, 355, 356, 358, 373, 374, 386, 391, 392, 394, 396, 397, 405, 431, 433, 437, 442, 444, 459, 482, 483, 497, 503, 504, 510, 519, 535, 589, 591, 593, 594, 595, 596, 598, 600, 601, 602, 604, 607, 608, 616, 617, 625, 628, 629, 630, 632, 633, 637, 642, 643, 651, 653, 658, 663, 664, 666, 668, 679, 681, 691, 694, 695, 696, 703, 704, 712, 713, 714, 721, 764, 765, 766, 768, 775], "st": [6, 7, 9, 760, 778, 779], "perf_count": [6, 9], "raw_logit": 6, "latenc": [6, 9], "axi": [6, 8, 43, 44, 45, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 107, 111, 137, 138, 141, 212, 286, 291, 324, 325, 331, 338, 352, 355, 357, 358, 361, 365, 367, 376, 377, 383, 386, 388, 398, 422, 426, 432, 433, 434, 437, 438, 439, 442, 447, 452, 453, 455, 456, 458, 459, 464, 465, 466, 474, 479, 482, 483, 484, 486, 487, 488, 489, 490, 503, 510, 571, 583, 586, 588, 589, 591, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 615, 622, 625, 633, 648, 649, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 698, 699, 700, 704, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 728, 732, 733, 738, 764, 766, 768, 770, 772, 773, 776, 777, 779, 782, 784, 786, 789, 791], "direct": [6, 54, 77, 325, 330, 334, 339, 343, 352, 355, 358, 388, 398, 438, 439, 453, 603, 711, 756, 761, 763, 777, 782, 788, 789, 791, 799, 803, 804, 807], "tolist": 6, "652289830999962": 6, "int32": [6, 40, 42, 51, 54, 55, 63, 64, 67, 74, 77, 78, 86, 87, 132, 137, 143, 148, 151, 154, 156, 158, 160, 162, 165, 167, 168, 172, 175, 179, 183, 187, 189, 207, 300, 347, 363, 367, 472, 482, 483, 484, 511, 520, 556, 586, 587, 588, 591, 600, 601, 604, 694, 695, 696, 700, 712, 713, 718, 720, 766, 777, 779, 784], "6477362": 6, "29496726": 6, "04526032": 6, "ident": [6, 26, 43, 45, 59, 71, 132, 200, 513, 539, 586, 588, 591, 594, 598, 629, 634, 686, 732, 764, 773, 774, 777, 778, 780, 782, 786, 787, 792, 794, 796, 798], "had": [6, 764, 765, 776, 780, 784, 803, 804], "postprocess": 6, "routin": [6, 765, 776, 777, 782, 792, 803], "carefulli": [6, 277, 589, 731, 777, 801, 806], "rewrit": 6, "easili": [6, 25, 28, 29, 40, 750, 757, 761, 765, 777, 782, 787, 788, 789, 792, 797, 803, 809, 810], "quickest": 6, "particular": [6, 28, 29, 267, 589, 757, 758, 760, 762, 765, 766, 768, 774, 776, 777, 779, 780, 799, 803, 809], "hardwar": [6, 42, 96, 100, 757, 782, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809], "again": [6, 8, 22, 23, 31, 32, 33, 34, 594, 640, 758, 761, 762, 763, 764, 768, 770, 771, 776, 777, 779, 780, 782, 787, 789, 792, 797, 798, 808, 809], "speed": [6, 9, 11, 28, 29, 42, 47, 55, 78, 527, 591, 779, 796, 806], "12": [6, 8, 9, 10, 19, 21, 23, 24, 40, 42, 43, 44, 51, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 85, 86, 90, 96, 97, 167, 222, 224, 229, 233, 234, 237, 239, 240, 241, 259, 272, 275, 282, 285, 292, 293, 308, 309, 331, 334, 335, 349, 352, 355, 358, 367, 373, 374, 375, 376, 378, 382, 383, 391, 392, 396, 397, 398, 431, 433, 437, 442, 459, 471, 482, 488, 489, 499, 503, 504, 535, 541, 549, 563, 589, 591, 593, 594, 596, 598, 599, 600, 601, 602, 604, 607, 611, 616, 617, 625, 629, 633, 637, 643, 644, 646, 658, 662, 664, 666, 668, 685, 692, 694, 695, 696, 703, 704, 712, 713, 714, 718, 720, 757, 762, 764, 766, 768, 775], "repeat": [6, 7, 22, 32, 54, 55, 61, 77, 78, 84, 355, 367, 383, 388, 481, 505, 591, 596, 597, 667, 672, 744, 752, 758, 761, 762, 768, 769, 776, 779], "previou": [6, 21, 22, 23, 25, 31, 32, 33, 35, 56, 79, 186, 187, 188, 189, 190, 346, 354, 559, 561, 562, 563, 564, 566, 567, 569, 573, 578, 587, 591, 592, 731, 747, 758, 760, 762, 765, 767, 772, 777, 779, 782, 789, 792, 806], "13": [6, 8, 9, 10, 19, 24, 40, 42, 44, 48, 53, 54, 58, 59, 63, 67, 76, 77, 78, 79, 81, 84, 86, 90, 96, 112, 167, 197, 222, 234, 237, 246, 257, 277, 286, 331, 338, 345, 352, 355, 358, 375, 376, 386, 391, 397, 431, 433, 437, 442, 459, 471, 482, 483, 498, 499, 503, 504, 519, 541, 549, 572, 583, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 601, 602, 604, 607, 608, 616, 617, 625, 629, 637, 643, 668, 672, 685, 694, 695, 696, 703, 704, 712, 713, 714, 764, 768, 777], "026875037000081647": 6, "14": [6, 8, 9, 10, 24, 40, 42, 43, 44, 51, 53, 54, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 151, 164, 167, 220, 225, 227, 234, 238, 264, 268, 272, 278, 285, 293, 327, 355, 356, 358, 367, 373, 374, 375, 376, 386, 393, 396, 397, 400, 406, 433, 437, 442, 459, 482, 549, 572, 587, 589, 591, 592, 593, 594, 596, 598, 602, 604, 607, 608, 610, 612, 616, 625, 629, 637, 646, 668, 685, 694, 695, 696, 704, 713, 714, 764, 768, 779], "overrid": [6, 8, 34, 43, 50, 54, 73, 77, 141, 367, 481, 586, 761, 763], "behavior": [6, 8, 54, 65, 239, 246, 272, 277, 281, 368, 491, 538, 561, 589, 591, 602, 704, 705, 706, 707, 756, 763, 764, 765, 766, 776, 777, 778, 779, 782, 784, 792, 800], "prealloc": [6, 8], "75": [6, 8, 40, 53, 54, 76, 77, 78, 81, 86, 113, 137, 225, 227, 239, 252, 306, 330, 331, 349, 352, 397, 490, 505, 518, 549, 583, 586, 589, 591, 594, 598, 600, 607, 630, 637, 681, 696], "temporari": [6, 8, 547, 569, 591, 756, 766, 781], "fix": [6, 8, 44, 54, 77, 94, 352, 356, 419, 593, 619, 750, 757, 758, 760, 766, 771, 779, 780], "handl": [6, 8, 40, 42, 48, 52, 53, 54, 70, 71, 75, 76, 77, 97, 104, 106, 109, 112, 192, 193, 194, 195, 196, 200, 205, 206, 214, 218, 224, 236, 261, 277, 283, 284, 289, 290, 358, 431, 452, 455, 583, 588, 589, 594, 604, 646, 718, 720, 728, 736, 751, 759, 764, 765, 766, 771, 772, 773, 775, 776, 777, 778, 779, 781, 782, 788, 800, 810], "o": [6, 8, 41, 42, 43, 44, 46, 530, 591, 750, 757, 759, 765, 784, 793], "xla_python_client_alloc": [6, 8], "platform": [6, 8, 755, 801, 805, 807], "img_jax": [6, 8], "device_put": [6, 9], "15": [6, 8, 10, 11, 24, 40, 42, 43, 44, 47, 53, 54, 55, 59, 63, 67, 73, 74, 76, 77, 78, 81, 82, 84, 86, 90, 97, 136, 164, 222, 229, 233, 239, 250, 257, 258, 264, 272, 281, 282, 283, 331, 345, 352, 353, 355, 356, 358, 367, 373, 374, 391, 393, 396, 397, 402, 433, 437, 442, 459, 482, 499, 503, 504, 507, 518, 519, 544, 549, 566, 586, 587, 589, 591, 593, 594, 596, 598, 600, 601, 602, 604, 607, 617, 625, 628, 629, 630, 637, 643, 644, 662, 668, 673, 685, 694, 695, 702, 704, 712, 713, 714, 757, 765, 768, 775, 806], "warm": 6, "_": [6, 9, 11, 28, 41, 42, 53, 71, 76, 79, 154, 242, 244, 252, 253, 268, 367, 419, 481, 503, 572, 573, 587, 589, 591, 592, 594, 596, 598, 604, 640, 643, 669, 680, 719, 752, 756, 769, 774, 776, 779, 787], "rang": [6, 28, 29, 40, 41, 42, 44, 50, 54, 67, 73, 77, 121, 137, 138, 286, 310, 349, 356, 358, 367, 404, 413, 440, 448, 450, 457, 482, 483, 484, 503, 571, 586, 589, 591, 602, 604, 704, 712, 713, 718, 720, 731, 750, 766, 770, 773, 779, 784, 787, 788, 789, 803, 809], "16": [6, 8, 11, 24, 40, 42, 44, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 96, 97, 167, 233, 262, 282, 289, 328, 331, 335, 352, 355, 358, 367, 373, 374, 376, 382, 386, 387, 391, 392, 394, 397, 437, 482, 488, 504, 507, 529, 549, 550, 582, 587, 589, 591, 592, 593, 594, 596, 598, 600, 601, 604, 615, 617, 621, 625, 628, 629, 637, 643, 668, 681, 685, 694, 695, 696, 703, 713, 714, 750, 758, 768, 787], "0022192720000475674": 6, "64773613": 6, "29496723": 6, "exact": [6, 70, 71, 104, 355, 357, 390, 395, 422, 602, 704, 706, 728, 757, 758, 760, 768, 784], "note": [6, 8, 24, 28, 29, 34, 43, 44, 45, 54, 55, 59, 61, 65, 77, 82, 84, 94, 134, 146, 178, 246, 281, 282, 289, 315, 316, 331, 349, 352, 355, 356, 358, 377, 403, 407, 415, 416, 419, 437, 587, 589, 593, 594, 596, 602, 604, 619, 626, 627, 640, 642, 661, 665, 705, 707, 716, 732, 752, 754, 756, 757, 758, 761, 766, 768, 769, 771, 776, 777, 778, 779, 780, 782], "dog": 6, "18": [6, 24, 40, 42, 44, 53, 54, 63, 76, 77, 81, 82, 86, 90, 107, 234, 239, 281, 285, 294, 331, 352, 355, 358, 376, 382, 386, 387, 391, 394, 397, 437, 583, 589, 594, 600, 604, 611, 625, 632, 637, 694, 695, 696, 713, 714, 718, 764, 768], "19": [6, 24, 40, 42, 43, 44, 47, 53, 54, 63, 76, 77, 81, 82, 86, 225, 234, 262, 272, 289, 355, 356, 358, 367, 375, 376, 387, 391, 394, 397, 402, 437, 482, 589, 594, 598, 600, 603, 625, 633, 646, 684, 694, 695, 696, 711, 768], "006431100999861883": 6, "258": [6, 593, 608, 610, 612], "104": [6, 67, 594, 604, 637, 714], "259": 6, "72447652": 6, "13937832": 6, "05874982": 6, "samoi": 6, "wallabi": 6, "pomeranian": 6, "incorrect": [6, 765], "predict": [6, 8, 10, 42, 43, 44, 45, 54, 60, 77, 83, 357, 420, 422, 424, 595, 651, 652, 653, 750], "down": [6, 21, 31, 45, 54, 77, 355, 358, 390, 439, 730, 757, 779, 794, 803, 809], "20": [6, 15, 40, 42, 43, 44, 47, 53, 54, 58, 63, 67, 76, 77, 78, 81, 82, 86, 90, 234, 238, 242, 278, 282, 286, 331, 333, 335, 352, 355, 358, 373, 375, 391, 394, 397, 431, 503, 510, 511, 513, 535, 539, 549, 589, 591, 594, 600, 601, 604, 607, 608, 618, 625, 630, 633, 637, 644, 694, 702, 703, 712, 713, 714, 718, 720, 750, 765, 782, 786], "004749261999904775": 6, "7245": 6, "1394": 6, "0587": 6, "promis": [6, 797], "21": [6, 40, 42, 44, 47, 53, 54, 55, 63, 73, 76, 77, 81, 82, 86, 90, 96, 138, 167, 222, 225, 227, 233, 234, 257, 272, 338, 355, 356, 358, 367, 373, 376, 386, 391, 394, 397, 398, 400, 431, 482, 535, 586, 587, 589, 594, 595, 598, 604, 625, 637, 653, 679, 694, 695, 712, 713, 714, 770, 775], "v": [6, 7, 8, 17, 18, 21, 28, 29, 31, 34, 35, 40, 43, 44, 54, 58, 66, 73, 77, 81, 89, 138, 237, 242, 244, 285, 356, 358, 404, 411, 417, 436, 589, 593, 597, 603, 620, 672, 710, 730, 732, 733, 734, 735, 736, 737, 750, 752, 753, 757, 758, 759, 763, 784, 787, 788, 789], "_build": [6, 8, 750], "conv2d": [6, 8, 26, 28, 29, 44, 47, 58, 81, 593, 610, 732, 750], "64": [6, 8, 40, 42, 43, 44, 47, 53, 54, 58, 76, 77, 78, 81, 82, 86, 90, 97, 163, 233, 243, 277, 286, 287, 328, 352, 355, 376, 386, 503, 504, 550, 578, 587, 589, 591, 592, 593, 594, 598, 604, 608, 610, 612, 615, 634, 637, 647, 681, 685, 695, 714, 718, 750, 757, 787, 788, 808], "data_format": [6, 44, 54, 58, 77, 81, 355, 361, 373, 374, 375, 378, 379, 380, 391, 392, 393, 394, 396, 461, 462, 463, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732, 735, 750], "nchw": [6, 44, 54, 58, 77, 81, 355, 374, 379, 392, 396, 593, 606, 609, 610, 613, 614, 615, 732, 750], "relu": [6, 8, 26, 28, 29, 40, 47, 48, 54, 69, 70, 77, 106, 297, 298, 302, 347, 583, 728, 750, 778, 787, 788], "maxpool2d": [6, 8, 42, 732, 750], "192": [6, 44, 744], "384": [6, 79, 572, 592], "avgpool": 6, "adaptiveavgpool2d": [6, 732], "6": [6, 9, 11, 13, 21, 23, 24, 25, 26, 28, 29, 40, 42, 43, 44, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 66, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 106, 111, 117, 122, 123, 135, 136, 139, 140, 143, 148, 152, 153, 154, 162, 164, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 264, 265, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 310, 322, 324, 331, 332, 334, 335, 336, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 365, 367, 376, 378, 381, 382, 386, 387, 391, 394, 397, 398, 402, 405, 406, 409, 421, 423, 424, 425, 427, 428, 429, 433, 437, 438, 442, 443, 446, 447, 452, 453, 455, 459, 460, 469, 471, 472, 474, 479, 481, 482, 483, 484, 486, 488, 489, 490, 496, 498, 499, 502, 503, 504, 510, 511, 518, 519, 520, 535, 549, 550, 551, 552, 554, 558, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 628, 629, 632, 633, 634, 637, 640, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 684, 685, 691, 692, 693, 694, 695, 696, 698, 699, 700, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 731, 750, 754, 757, 760, 762, 764, 765, 768, 775, 779, 782, 784, 786, 787, 788], "prob": [6, 44, 54, 58, 77, 81, 86, 355, 362, 378, 379, 380, 467, 593, 600, 616, 693, 732, 750], "4096": 6, "_forward": [6, 8, 9, 11, 28, 29, 40, 41, 44, 750, 769, 784, 787, 788], "reshap": [6, 28, 29, 44, 45, 54, 58, 59, 61, 71, 77, 81, 82, 84, 342, 352, 355, 356, 358, 373, 374, 375, 378, 391, 392, 393, 394, 396, 400, 414, 437, 571, 591, 593, 594, 596, 609, 611, 615, 633, 649, 750, 776, 777, 779, 782, 784, 786, 789], "bidirect": 7, "mlm": 7, "googl": [7, 42, 43, 44, 46, 765, 797], "save": [7, 42, 54, 71, 77, 367, 488, 547, 569, 588, 591, 605, 734, 752, 757, 765, 771, 779, 792, 798, 802], "mohame54": 7, "automodel": [7, 11, 28], "autotoken": 7, "load": [7, 9, 11, 25, 28, 42, 43, 44, 45, 46, 47, 71, 356, 417, 605, 734, 750, 779, 792, 802, 809], "token": [7, 44], "bert_bas": 7, "base": [7, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99, 101, 138, 146, 178, 242, 243, 260, 261, 262, 263, 277, 310, 315, 321, 324, 328, 335, 349, 352, 355, 356, 365, 397, 417, 473, 540, 550, 562, 586, 587, 589, 591, 594, 596, 602, 604, 633, 657, 704, 705, 706, 707, 714, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 745, 748, 750, 757, 758, 760, 764, 765, 766, 770, 772, 774, 775, 776, 778, 779, 780, 781, 782, 784, 791, 803, 808, 810], "uncas": 7, "eval": [7, 8, 10, 734], "evalu": [7, 53, 54, 71, 76, 77, 242, 244, 260, 261, 262, 263, 267, 274, 276, 283, 287, 336, 356, 358, 414, 444, 582, 589, 592, 598, 605, 683, 684, 722, 723, 733, 734, 758, 764, 766, 773, 774, 803], "bert_token": 7, "sampl": [7, 9, 11, 13, 15, 25, 28, 29, 43, 50, 53, 54, 63, 67, 73, 76, 77, 86, 90, 137, 138, 291, 310, 349, 355, 358, 362, 378, 379, 380, 390, 450, 467, 468, 469, 470, 471, 586, 589, 600, 604, 693, 694, 695, 696, 719, 721, 732, 778, 779], "did": [7, 42, 756, 763, 789, 797, 809], "pad": [7, 42, 44, 54, 58, 61, 77, 81, 84, 355, 358, 373, 374, 375, 376, 377, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 507, 591, 593, 596, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 656, 669, 732, 750], "longest": 7, "max_length": [7, 71], "512": [7, 8, 42, 44, 82, 593, 608, 647, 750], "input_id": 7, "101": [7, 43, 593, 594, 598, 617, 630, 679], "1045": 7, "2106": 7, "1005": 7, "1056": 7, "2428": 7, "2066": 7, "2115": 7, "4309": 7, "1012": 7, "102": [7, 54, 77, 86, 376, 694], "token_type_id": 7, "attention_mask": [7, 58, 81, 593, 619], "pooler": 7, "compar": [7, 9, 11, 28, 41, 45, 47, 54, 55, 65, 66, 71, 77, 78, 89, 320, 333, 352, 492, 495, 591, 602, 603, 704, 705, 706, 707, 708, 711, 750, 762, 768, 770, 778, 779, 782, 787, 799, 801, 803, 809, 810], "bert_output": 7, "pooler_output": 7, "ivy_bert": 7, "bert_base_uncas": 7, "ivy_input": 7, "ivy_output": [7, 45], "logits_clos": 7, "allclos": [7, 9, 11, 13, 15, 28, 45, 47, 54, 77, 352], "detach": [7, 9, 11, 13, 15, 28, 775], "rtol": [7, 13, 15, 54, 59, 77, 82, 320, 333, 352, 594, 635, 638, 778], "005": [7, 54, 77, 320, 333, 352, 420], "atol": [7, 9, 11, 28, 54, 59, 77, 82, 320, 333, 352, 594, 635, 778], "equal": [7, 50, 51, 53, 54, 55, 59, 60, 61, 63, 65, 66, 67, 71, 74, 76, 77, 78, 82, 83, 84, 86, 89, 96, 97, 132, 134, 135, 136, 142, 143, 151, 231, 233, 237, 242, 244, 253, 254, 275, 277, 282, 285, 286, 290, 317, 318, 320, 333, 349, 352, 355, 358, 361, 367, 377, 433, 442, 459, 464, 465, 466, 484, 492, 495, 571, 586, 587, 589, 591, 594, 595, 596, 600, 601, 602, 603, 604, 625, 634, 635, 638, 640, 646, 651, 654, 656, 661, 663, 669, 696, 702, 704, 705, 706, 707, 708, 711, 716, 718, 719, 720, 721, 731, 732, 763, 764, 766, 768, 770, 778, 779], "els": [7, 8, 9, 43, 44, 46, 47, 54, 55, 63, 76, 77, 86, 157, 158, 159, 160, 161, 173, 279, 283, 356, 362, 407, 416, 418, 419, 468, 502, 506, 587, 589, 591, 598, 600, 683, 686, 694, 695, 696, 744, 750, 756, 757, 758, 760, 762, 766, 767, 770, 773, 776, 777, 778, 779, 780, 782, 784, 786, 788, 789, 792, 804], "768": 7, "finish": [7, 17, 28, 29, 40, 43, 750, 751, 756, 757, 759], "2f": [7, 9], "sec": 7, "89": [7, 40, 53, 63, 74, 76, 77, 86, 97, 167, 234, 587, 589, 594, 604, 644, 695, 696, 720], "43": [7, 40, 42, 44, 54, 77, 86, 97, 233, 355, 356, 367, 375, 402, 482, 589, 600, 601, 695, 696, 703], "procedur": [7, 763, 765, 768, 778], "60": [7, 40, 44, 53, 67, 76, 78, 86, 90, 223, 257, 511, 519, 535, 549, 571, 589, 591, 594, 598, 604, 637, 676, 694, 712, 714, 718, 765], "big": [7, 731, 751, 792, 803], "jax_enable_x64": [7, 8, 9, 11, 22, 28, 29, 750], "ref": [7, 8, 78, 82, 258, 272, 275, 281, 288, 589, 596, 665, 757, 776], "fast": [7, 23, 33, 54, 355, 377, 803], "demo": [8, 9, 10, 11, 29, 36, 40, 44, 750, 752, 791], "milesi": 8, "blob": [8, 42, 44], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 8, "data_load": 8, "py": [8, 42, 44, 47, 90, 356, 417, 714, 741, 744, 750, 756, 757, 758, 760, 762, 765, 766, 767, 769, 770, 771, 772, 773, 777, 778, 779, 780, 784, 786, 788, 789], "l65": 8, "mask_valu": 8, "pil_img": 8, "scale": [8, 9, 42, 54, 58, 62, 77, 79, 81, 85, 106, 210, 211, 299, 310, 331, 347, 349, 352, 355, 356, 361, 372, 378, 379, 380, 388, 398, 409, 461, 462, 463, 579, 583, 588, 592, 593, 599, 616, 619, 620, 692, 731, 732, 736, 803, 805], "is_mask": 8, "neww": 8, "newh": 8, "assert": [8, 43, 45, 47, 71, 496, 591, 754, 759, 760, 773, 776, 777, 778, 779, 780, 786, 787], "too": [8, 222, 239, 246, 272, 589, 731, 756, 757, 758, 760, 766, 770, 780, 792], "pixel": [8, 42, 54, 77, 355, 390], "resampl": 8, "nearest": [8, 54, 77, 222, 239, 272, 282, 327, 352, 355, 367, 390, 490, 589, 782], "bicub": [8, 54, 77, 355, 390, 782], "zero": [8, 42, 50, 51, 53, 54, 56, 58, 59, 61, 64, 65, 67, 68, 73, 74, 76, 77, 79, 81, 82, 86, 87, 90, 91, 106, 108, 109, 110, 112, 129, 130, 132, 134, 139, 141, 142, 143, 144, 145, 148, 151, 152, 220, 221, 222, 224, 225, 226, 227, 228, 231, 233, 234, 236, 237, 238, 239, 244, 245, 246, 253, 254, 255, 256, 262, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289, 290, 292, 293, 294, 298, 299, 302, 304, 316, 323, 324, 325, 327, 335, 338, 340, 341, 342, 343, 347, 349, 352, 355, 356, 358, 365, 367, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 397, 398, 402, 404, 414, 441, 446, 447, 473, 482, 483, 499, 503, 510, 530, 572, 573, 578, 579, 580, 581, 583, 586, 587, 589, 591, 592, 593, 594, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 620, 621, 623, 628, 630, 631, 632, 633, 634, 635, 636, 638, 640, 648, 649, 656, 657, 658, 659, 661, 662, 669, 692, 694, 695, 696, 699, 700, 701, 702, 704, 705, 706, 707, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 736, 761, 764, 766, 767, 768, 772, 774, 775, 778, 784, 787, 788, 798, 802], "int64": [8, 54, 63, 64, 66, 67, 74, 86, 87, 89, 90, 142, 154, 160, 163, 165, 167, 171, 172, 176, 183, 300, 307, 347, 349, 365, 367, 474, 482, 483, 586, 587, 601, 603, 604, 694, 699, 700, 701, 710, 712, 713, 718, 720, 766, 777, 779, 784], "enumer": [8, 42, 44, 730, 750], "ndim": [8, 54, 59, 64, 77, 82, 87, 96, 100, 356, 358, 415, 416, 419, 427, 428, 429, 440, 448, 450, 457, 571, 591, 594, 601, 639, 642, 702, 764, 773, 779], "newaxi": [8, 584], "car": 8, "full_img": 8, "from_numpi": [8, 787], "img_numpi": 8, "cpu": [8, 9, 11, 28, 42, 43, 44, 46, 47, 50, 52, 54, 63, 73, 75, 77, 86, 121, 132, 135, 137, 138, 141, 142, 143, 148, 192, 193, 195, 196, 197, 198, 203, 206, 208, 210, 213, 214, 216, 218, 362, 467, 468, 470, 471, 586, 588, 594, 600, 631, 693, 694, 695, 696, 731, 732, 733, 734, 735, 736, 737, 750, 754, 757, 758, 763, 766, 767, 777, 779, 792, 801, 803, 806, 808], "torch_unet": 8, "unet_carvana": 8, "ivy_unet": 8, "n_channel": 8, "n_class": 8, "l62": 8, "mask_to_imag": 8, "ndarrai": [8, 50, 54, 55, 73, 77, 122, 123, 140, 355, 356, 358, 367, 398, 416, 452, 487, 488, 556, 586, 591, 741, 744, 756, 761, 766, 767, 770, 772, 776, 777, 778, 780, 782, 784, 786, 789, 794], "isinst": [8, 26, 28, 29, 770, 777, 779, 780, 788, 789], "uint8": [8, 25, 28, 29, 44, 154, 161, 165, 176, 179, 184, 190, 300, 347, 587, 766, 779], "elif": [8, 9, 765, 770, 776, 777, 778], "fromarrai": [8, 25, 28, 29, 44], "interpol": [8, 42, 54, 77, 335, 352, 355, 367, 490, 593, 619, 782, 803], "mode": [8, 34, 46, 54, 59, 71, 77, 82, 93, 94, 95, 209, 212, 217, 222, 239, 272, 314, 349, 355, 356, 358, 385, 390, 398, 406, 407, 413, 415, 416, 419, 431, 440, 445, 447, 448, 450, 452, 455, 457, 536, 537, 538, 542, 543, 545, 546, 559, 560, 564, 565, 567, 568, 588, 589, 591, 594, 639, 732, 733, 734, 747, 752, 757, 758, 759, 764, 767, 768, 782, 792, 803, 806], "bilinear": [8, 54, 77, 355, 390, 782], "torch_mask": 8, "squeez": [8, 42, 61, 84, 596, 803], "torch_result": 8, "to_numpi": [8, 28, 29, 40, 43, 44, 47, 55, 78, 591, 750, 778, 787], "give": [8, 20, 30, 40, 54, 58, 81, 178, 355, 397, 587, 593, 596, 606, 607, 608, 609, 611, 613, 615, 661, 730, 731, 750, 752, 757, 758, 759, 762, 765, 766, 768, 769, 771, 772, 779, 798, 803, 807], "img_tf": 8, "math": [8, 45, 289, 589, 776, 777, 778, 789, 801], "ve": [8, 17, 26, 28, 63, 86, 600, 693, 756, 757, 758, 779, 782, 783, 786, 794], "lot": [8, 750, 765, 766, 774, 779, 792, 797, 798, 802], "far": [8, 28, 29, 598, 673, 684, 767, 768, 785, 808, 809], "space": [8, 50, 53, 54, 55, 73, 76, 77, 78, 121, 137, 138, 291, 331, 352, 503, 507, 586, 589, 591, 782, 797], "del": [8, 765], "empty_cach": 8, "permute_dim": [8, 61, 84, 596], "usr": [8, 42, 43, 44, 47, 757], "local": [8, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 42, 43, 44, 47, 751, 752, 757, 760, 763, 773, 778, 779], "lib": [8, 42, 43, 44, 47], "python3": [8, 10, 28, 42, 44, 47, 750, 752, 757, 758], "dist": [8, 42, 43, 44, 47], "func_wrapp": [8, 48, 53, 70, 76, 104, 106, 109, 112, 290, 583, 589, 728, 767, 777, 781], "242": [8, 77], "userwarn": [8, 47], "mani": [8, 28, 29, 32, 61, 71, 84, 146, 315, 349, 586, 596, 663, 730, 750, 756, 757, 758, 761, 762, 764, 765, 766, 767, 768, 769, 772, 773, 774, 776, 777, 778, 779, 782, 784, 786, 787, 792, 796, 797, 798, 799, 803, 806, 809, 810], "view": [8, 54, 61, 77, 96, 133, 358, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 513, 586, 591, 596, 657, 658, 659, 661, 663, 664, 666, 668, 757, 758, 770, 803], "lead": [8, 59, 71, 82, 97, 246, 356, 411, 538, 589, 591, 594, 639, 642, 765, 766, 768, 780, 792, 797, 798], "inplac": [8, 49, 55, 71, 78, 94, 494, 496, 517, 520, 521, 538, 539, 591, 598, 680, 681, 685, 690, 691, 729, 736, 759, 761, 768, 772, 774, 777, 782, 786, 788], "17": [8, 24, 40, 42, 44, 47, 48, 54, 59, 70, 76, 77, 78, 79, 81, 82, 86, 97, 106, 107, 138, 222, 239, 264, 272, 303, 345, 349, 355, 358, 373, 374, 382, 383, 386, 387, 391, 392, 394, 397, 437, 504, 519, 572, 574, 583, 586, 589, 591, 592, 593, 594, 598, 600, 607, 616, 617, 625, 629, 681, 694, 695, 696, 698, 764], "factor": [8, 54, 56, 58, 59, 77, 79, 81, 82, 93, 94, 210, 211, 212, 355, 356, 388, 398, 407, 408, 416, 419, 572, 573, 578, 579, 588, 592, 593, 594, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 621, 731, 732, 736, 770, 797], "inc": 8, "unetdoubleconv": 8, "down1": 8, "unetdown": 8, "128": [8, 28, 29, 42, 51, 53, 58, 74, 76, 81, 97, 167, 243, 355, 376, 386, 503, 513, 587, 589, 591, 593, 594, 608, 610, 615, 637, 750], "down2": 8, "down3": 8, "down4": 8, "1024": [8, 42, 43, 750], "up1": 8, "unetup": 8, "up2": 8, "up3": 8, "up4": 8, "outc": 8, "unetoutconv": 8, "x2": [8, 19, 28, 29, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 96, 97, 101, 152, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 320, 323, 328, 329, 330, 332, 334, 339, 343, 352, 358, 367, 406, 441, 481, 492, 587, 588, 589, 591, 594, 601, 622, 629, 632, 637, 641, 644, 645, 648, 703, 738, 760, 766, 768, 770, 772, 776, 777], "x3": [8, 51, 55, 152, 492, 587, 591], "x4": 8, "x5": 8, "in_channel": 8, "out_channel": 8, "mid_channel": 8, "double_conv": 8, "batchnorm2d": [8, 735], "downscal": [8, 55, 78, 498, 499, 520, 591], "maxpool": 8, "doubl": [8, 300, 347], "conv": [8, 593, 732, 782], "maxpool_conv": 8, "upscal": 8, "scale_factor": [8, 54, 77, 355, 390, 782], "align_corn": [8, 54, 77, 355, 390, 782], "conv2dtranspos": [8, 732], "bhwc": 8, "diff_h": 8, "diff_w": 8, "pad_width": [8, 54, 61, 77, 84, 358, 447, 596, 656, 669], "constant_pad": [8, 61, 84, 596], "openmim": 9, "mim": 9, "0rc8": 9, "get_model": 9, "list_model": 9, "mmengin": 9, "configdict": 9, "saniti": [9, 11, 28, 777], "checkpoint": [9, 45, 792], "against": [9, 51, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 152, 271, 290, 320, 321, 324, 333, 352, 367, 487, 488, 489, 490, 527, 587, 589, 591, 594, 601, 632, 633, 635, 638, 699, 779, 784, 792, 796, 803], "zoo": 9, "checkpoint_nam": [9, 11, 28], "convnext": 9, "tiny_32xb128": 9, "noema_in1k": 9, "openmmlab": 9, "appropri": [9, 19, 28, 29, 55, 64, 69, 87, 92, 222, 239, 246, 272, 320, 333, 352, 589, 601, 699, 756, 757, 758, 770, 774, 779], "get_scal": 9, "cfg": [9, 771], "input_shap": [9, 15, 26, 28, 29, 355, 395, 750], "val2017": [9, 11, 28, 45], "000000039769": [9, 11, 28, 45], "_config": 9, "train_pipelin": 9, "tensor_imag": 9, "transpiled_graph": [9, 11, 28], "what": [9, 11, 17, 22, 28, 29, 32, 33, 36, 41, 42, 355, 388, 398, 750, 752, 758, 759, 764, 765, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 783, 784, 786, 787, 788, 789, 791, 792, 797, 798, 799, 804, 805, 808], "_f": [9, 11, 28], "comp_model": [9, 11, 28], "np_imag": [9, 25, 28, 29], "jax_imag": 9, "jax_mlp_forward": 9, "timeit": [9, 11, 21, 28, 29, 45, 47], "06": [9, 44, 51, 63, 76, 79, 95, 104, 164, 221, 237, 355, 376, 386, 578, 583, 587, 592, 696, 779, 787], "m": [9, 10, 11, 28, 41, 43, 45, 47, 50, 54, 59, 63, 76, 77, 82, 86, 96, 139, 144, 145, 146, 266, 315, 316, 349, 355, 356, 357, 358, 362, 377, 403, 407, 408, 410, 420, 429, 438, 439, 453, 467, 468, 469, 470, 471, 586, 594, 598, 600, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 681, 694, 695, 696, 750, 752, 757, 758, 759, 765, 784], "per": [9, 11, 21, 42, 44, 54, 58, 77, 81, 310, 349, 355, 356, 358, 373, 374, 375, 391, 392, 393, 394, 415, 454, 593, 607, 609, 610, 611, 612, 615, 619, 732, 758, 765, 774, 777, 787], "block_until_readi": 9, "08": [9, 54, 67, 77, 86, 225, 320, 333, 352, 355, 376, 386, 589, 695, 696, 721, 771], "\u00b5": [9, 11, 21], "made": [9, 11, 28, 54, 61, 77, 356, 358, 409, 427, 428, 429, 665, 752, 756, 758, 760, 761, 764, 765, 770, 771, 773, 775, 776, 777, 780, 782, 784, 786, 797, 803], "significantli": [9, 11, 28, 54, 59, 77, 82, 356, 418, 594, 642, 765, 796, 801], "even": [9, 25, 28, 29, 54, 77, 94, 239, 272, 277, 282, 358, 367, 447, 481, 589, 757, 758, 760, 765, 766, 767, 769, 772, 773, 776, 777, 778, 782, 786, 787, 788, 789, 792, 797, 798, 809], "better": [9, 31, 40, 46, 47, 752, 756, 759, 777, 778, 780, 782, 783, 786, 787, 788, 798, 806], "v100": 9, "3x": 9, "000000283921": [9, 11, 28], "out_torch": [9, 11, 28], "et": [9, 593, 594, 619, 642], "took": [9, 76, 279], "out_jax": [9, 11, 28], "1e": [9, 11, 13, 15, 28, 40, 44, 51, 54, 56, 59, 60, 62, 74, 77, 79, 82, 83, 85, 95, 164, 320, 333, 352, 361, 461, 462, 463, 540, 541, 549, 562, 563, 572, 573, 578, 580, 587, 591, 592, 594, 595, 599, 642, 651, 652, 653, 692, 733, 735, 736, 750, 764, 773, 776, 778, 788, 789], "66m": 9, "53m": 9, "That": [9, 11, 13, 15, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 42, 281, 357, 422, 589, 744, 757, 758, 761, 779, 786, 787, 788, 804], "pretti": [9, 11, 28, 29, 42, 787, 809], "much": [9, 11, 19, 20, 26, 28, 29, 30, 31, 42, 320, 333, 352, 731, 756, 757, 758, 761, 764, 766, 773, 776, 777, 778, 780, 781, 782, 784, 786, 787, 797, 801, 803, 809, 810], "achiev": [9, 11, 28, 750, 765, 766, 773, 774, 779, 782, 787, 789, 794], "solid": [9, 11, 28], "associ": [10, 54, 59, 77, 82, 222, 272, 358, 367, 426, 484, 589, 594, 635, 638, 650, 758, 766, 773, 774, 777, 778, 779, 792], "resnet34_weight": 10, "torch_resnet_34": 10, "resnet_34": 10, "ivy_resnet_34": 10, "comparison": [10, 54, 77, 240, 275, 321, 352, 357, 422, 589, 594, 643, 770], "shown": [10, 26, 28, 69, 71, 92, 256, 279, 322, 352, 589, 756, 757, 758, 760, 763, 765, 766, 768, 770, 771, 772, 777, 778, 779, 780, 781, 784, 786, 792], "8507": 10, "1351": 10, "0069": 10, "85072654": 10, "13506058": 10, "00688287": 10, "resnet50_weight": 10, "torch_resnet_50": 10, "imagenet1k_v2": 10, "resnet_50": 10, "ivy_resnet_50": 10, "3429": 10, "0408": 10, "0121": 10, "34288213": 10, "04077019": 10, "0121203": 10, "autofeatureextractor": [11, 28], "extractor": [11, 13, 15, 28, 44, 750], "arch_nam": [11, 28], "feature_extractor": [11, 28], "inputs_jax": [11, 28], "last_hidden_st": [11, 28], "jax_forward": [11, 28], "jit_appli": 11, "67": [11, 40, 53, 55, 59, 76, 78, 81, 86, 96, 234, 237, 242, 282, 283, 285, 292, 367, 397, 482, 503, 504, 549, 575, 577, 589, 591, 592, 594, 629, 696], "28": [11, 26, 28, 29, 40, 42, 44, 47, 53, 54, 58, 62, 76, 77, 78, 81, 82, 86, 90, 238, 262, 278, 355, 356, 376, 386, 402, 488, 518, 572, 589, 591, 592, 593, 594, 599, 604, 608, 610, 612, 615, 617, 637, 692, 694, 695, 696, 714, 718, 750], "09": [11, 42, 48, 53, 79, 86, 112, 277, 287, 572, 583, 589, 592, 695], "48": [11, 40, 44, 53, 54, 76, 77, 78, 79, 86, 106, 221, 244, 286, 355, 374, 375, 376, 386, 392, 393, 396, 518, 572, 576, 583, 589, 591, 592, 594, 598, 604, 637, 674, 695, 714], "2x": [11, 28], "seen": [13, 15, 20, 26, 28, 356, 362, 408, 469, 741, 765, 766, 768, 770, 777, 779, 784, 786, 787, 796, 797, 809], "veri": [13, 21, 28, 29, 31, 53, 76, 273, 320, 333, 352, 589, 594, 640, 755, 756, 757, 758, 763, 764, 766, 767, 768, 770, 772, 773, 776, 777, 778, 779, 780, 782, 785, 787, 788, 789, 792, 796, 797, 799, 800, 801, 803, 804, 805, 808, 809, 810], "guid": [13, 26, 750, 751, 756, 757, 758, 763, 771, 777, 809], "focu": [13, 26, 756, 775, 801, 802, 805, 810], "involv": [13, 16, 17, 24, 26, 51, 74, 179, 222, 239, 246, 272, 277, 587, 589, 751, 759, 765, 766, 768, 778, 782, 789, 797, 803, 809], "usual": [13, 15, 45, 239, 272, 589, 744, 757, 760, 766, 777, 779, 782], "own": [13, 15, 19, 28, 29, 34, 750, 757, 760, 765, 766, 769, 770, 776, 777, 780, 784, 792, 794, 797, 798, 799, 802, 803, 808, 809], "mlp": 13, "mixer": 13, "retriev": [13, 15, 19, 493, 591, 758, 777], "tf_mlp_encod": [13, 28, 29], "astyp": [13, 15, 20, 42, 43, 44, 51, 58, 74, 81, 587, 593, 609, 611, 612, 615, 750, 766, 776, 777, 782], "output_torch": [13, 15], "output_tf": [13, 15], "output_dens": [13, 28, 29, 750], "dens": [13, 26, 28, 29, 307, 349, 732, 750], "unit": [13, 28, 29, 54, 70, 77, 94, 104, 106, 107, 108, 109, 110, 111, 112, 294, 298, 299, 301, 302, 347, 464, 465, 583, 750, 757, 760, 766, 777, 778, 779, 792, 804, 807], "learn": [13, 15, 19, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 40, 42, 56, 79, 356, 417, 503, 573, 576, 578, 579, 580, 591, 592, 597, 670, 671, 672, 736, 750, 751, 755, 756, 757, 759, 760, 771, 773, 775, 783, 791, 794, 796, 797, 801, 805, 806, 807, 808, 809, 810], "basic": [13, 15, 19, 22, 26, 28, 29, 32, 35, 358, 454, 751, 756, 768, 779], "fulli": [13, 15, 17, 18, 21, 26, 28, 29, 42, 54, 77, 367, 488, 732, 750, 761, 766, 772, 775, 782, 784, 785, 786, 787, 788, 789, 792, 798, 801, 802, 803, 809, 810], "fine": [13, 15, 28, 29, 758, 766, 768, 777, 786, 789, 809], "tune": [13, 15, 28, 29, 808, 809], "ground": [13, 15, 54, 357, 420, 754, 777, 779, 796], "op": [13, 19, 40, 741, 780, 784, 792], "eagertensor": [13, 19, 40, 741, 778], "readi": [13, 15, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 756, 757], "explor": [13, 15, 19, 23, 24, 25, 28, 29, 34, 35, 36, 756, 757, 758, 766, 782, 785, 789, 791, 803, 806], "deepmind": [14, 798], "perceiverio": [14, 798], "backbon": [14, 42, 750, 784, 787], "TO": [14, 16, 27], "efficientnet": 15, "include_top": [15, 750], "eff_encod": [15, 750], "applic": [15, 17, 42, 44, 47, 54, 58, 77, 81, 356, 419, 593, 594, 598, 604, 619, 620, 646, 679, 680, 681, 685, 686, 718, 720, 750, 757, 765, 766, 767, 774, 788, 800, 801, 803, 805, 807, 809], "efficientnet_v2": [15, 750], "efficientnetv2b0": [15, 750], "data": [15, 25, 29, 34, 42, 44, 47, 48, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 89, 90, 91, 96, 97, 99, 100, 101, 104, 106, 109, 112, 121, 122, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 191, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 297, 303, 304, 305, 306, 307, 308, 309, 316, 317, 318, 319, 321, 336, 341, 347, 349, 352, 355, 356, 358, 362, 366, 367, 378, 379, 380, 396, 401, 403, 418, 431, 452, 455, 467, 468, 469, 470, 471, 477, 481, 482, 483, 487, 489, 490, 507, 520, 522, 523, 526, 552, 583, 586, 588, 589, 591, 593, 594, 596, 598, 600, 601, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 616, 617, 621, 622, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 655, 658, 659, 661, 662, 664, 665, 669, 677, 694, 695, 696, 698, 699, 700, 702, 703, 708, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 734, 738, 750, 757, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 776, 778, 780, 782, 784, 786, 794, 795, 797, 803, 804, 805, 807, 808, 809], "storag": [15, 42, 43, 787, 797], "googleapi": [15, 42, 43], "efficientnetv2": 15, "b0_notop": 15, "h5": [15, 71], "24274472": 15, "0u": 15, "torch_eff_encod": [15, 750], "1280": [15, 503, 591, 750], "api": [16, 21, 26, 27, 31, 44, 46, 53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 177, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 481, 586, 587, 589, 594, 596, 601, 602, 603, 604, 605, 621, 622, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 655, 657, 658, 659, 661, 662, 664, 665, 669, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 754, 757, 758, 759, 761, 763, 766, 767, 768, 769, 770, 772, 774, 776, 777, 778, 779, 782, 783, 785, 787, 792, 793, 794, 795, 796, 799, 801, 803, 805, 808, 810], "welcom": [17, 43, 750, 751, 757, 758], "goal": [17, 42, 246, 589, 750, 756, 797, 803, 809], "experi": [17, 44, 757, 770, 779, 785, 787, 792], "varieti": [17, 760, 765, 766, 767, 779, 781, 799, 801, 805, 806, 809, 810], "organ": [17, 761, 764, 773, 777, 780, 794, 797], "main": [17, 29, 50, 54, 59, 77, 82, 132, 144, 145, 146, 304, 315, 316, 349, 356, 358, 401, 436, 586, 594, 624, 625, 646, 756, 757, 758, 760, 763, 764, 774, 776, 801, 803, 804, 809], "rush": [17, 798], "jump": [17, 778], "straight": [17, 750, 765, 777, 779, 786], "quickstart": 17, "introduct": [17, 19, 26, 28, 29, 803], "capabl": [17, 25, 29, 779, 782], "those": [17, 41, 42, 59, 61, 71, 77, 82, 84, 121, 178, 239, 272, 455, 571, 586, 587, 589, 591, 594, 596, 598, 601, 639, 642, 654, 675, 702, 756, 757, 758, 761, 764, 765, 766, 774, 776, 777, 778, 779, 782, 796, 800], "who": [17, 759, 770, 783, 792, 803, 805], "dive": [17, 19, 28, 40, 750, 751, 753, 755, 756, 758, 760, 764, 766, 771, 778, 783, 786, 787, 792, 809], "deeper": [17, 19, 29, 49, 598, 673, 674, 683, 684, 685, 758, 759, 779, 783, 796], "showcas": [17, 750, 791], "real": [17, 25, 53, 54, 67, 76, 77, 90, 96, 106, 109, 112, 142, 143, 219, 220, 221, 222, 224, 225, 226, 227, 228, 237, 239, 240, 242, 244, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 272, 274, 275, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 326, 336, 352, 355, 356, 377, 398, 403, 404, 583, 586, 589, 594, 601, 604, 626, 627, 628, 633, 640, 642, 643, 646, 649, 702, 715, 717, 718, 719, 720, 764, 805], "world": [17, 25, 758, 805], "re": [17, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 45, 47, 54, 55, 64, 77, 87, 212, 310, 349, 358, 448, 449, 503, 588, 591, 594, 596, 601, 644, 662, 701, 703, 751, 756, 757, 758, 759, 760, 766, 775, 776, 777, 778, 780, 782, 786, 789, 792, 795, 796, 797, 803], "beginn": [17, 751, 803], "advanc": [17, 40, 757, 802], "got": [17, 40, 770], "cover": [17, 28, 54, 77, 355, 391, 392, 393, 750, 756, 760, 761, 763, 768, 769, 773, 774, 779, 782, 783], "write": [17, 18, 28, 29, 40, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 316, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 337, 340, 341, 342, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 408, 409, 412, 413, 414, 415, 420, 421, 422, 423, 424, 432, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 498, 499, 503, 504, 505, 510, 511, 520, 534, 535, 572, 573, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 692, 693, 694, 695, 696, 698, 700, 701, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 776, 778, 780, 784, 786, 789, 798, 803, 810], "familiar": [17, 18, 19, 756, 757], "concept": [17, 18, 19], "agnost": [17, 18, 19, 20, 28, 29, 30, 34, 40, 750, 761, 772, 784, 786, 789, 792, 809, 810], "unifi": [17, 18, 19, 21, 22, 28, 31, 32, 36, 43, 71, 212, 588, 759, 760, 761, 766, 770, 774, 775, 777, 782, 784, 792, 795, 797, 799, 800, 801, 803, 807, 810], "alongsid": [17, 18, 19, 20, 30, 593, 619, 797], "turn": [17, 18, 21, 31, 58, 81, 94, 378, 379, 380, 593, 616, 732, 757, 763, 764, 767, 768, 777, 779, 798], "wrapper": [17, 18, 21, 761, 763, 764, 766, 770, 773, 776, 777, 786, 794, 799, 803], "unus": [17, 18, 21, 768, 776], "lazi": [17, 18, 21, 24, 31, 34, 35, 46], "eager": [17, 18, 21, 24, 26, 31, 34, 35, 46, 764, 792, 803], "understand": [17, 18, 19, 23, 40, 46, 752, 754, 755, 756, 757, 758, 759, 760, 763, 768, 769, 772, 778, 783, 798, 799, 809], "decor": [17, 18, 23, 34, 46, 497, 591, 754, 760, 761, 764, 766, 767, 773, 776, 777, 778, 782], "roundup": 19, "over": [19, 26, 29, 31, 42, 54, 59, 67, 68, 69, 74, 77, 81, 82, 90, 91, 92, 94, 117, 311, 312, 331, 338, 349, 352, 355, 356, 358, 365, 367, 369, 370, 371, 374, 383, 388, 392, 396, 397, 398, 415, 426, 437, 452, 455, 474, 484, 489, 538, 571, 585, 591, 594, 599, 600, 604, 605, 622, 633, 644, 646, 648, 649, 692, 696, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 741, 744, 750, 757, 758, 762, 768, 769, 775, 776, 778, 780, 784, 786, 792, 796, 798, 801, 803], "indep": [19, 28], "futur": [19, 28, 42, 594, 627, 628, 750, 757, 758, 765, 766, 779, 780, 782, 786, 792, 796, 798, 809], "proof": [19, 28], "delv": [19, 29], "theori": 19, "deep": [19, 26, 28, 40, 71, 503, 591, 750, 751, 753, 755, 756, 758, 760, 763, 764, 766, 771, 775, 778, 783, 786, 787, 796, 801, 803, 806, 807, 809, 810], "esenti": [19, 28], "abstract": [19, 28, 29, 731, 736, 764, 766, 776, 777, 779, 782, 788, 792, 796, 801, 803, 805, 806, 810], "quirk": [19, 28], "perk": [19, 28, 750, 761, 764], "manag": [19, 26, 28, 538, 561, 591, 750, 751, 762, 766, 767, 776, 792, 798, 805, 807], "simpli": [19, 28, 29, 31, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 589, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 638, 639, 640, 642, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 750, 756, 757, 758, 761, 762, 763, 765, 766, 767, 768, 769, 772, 773, 776, 777, 778, 779, 782, 784, 788, 789, 792, 794, 804, 809], "appropi": 19, "string": [19, 28, 29, 44, 54, 55, 58, 71, 77, 81, 149, 150, 162, 169, 191, 192, 193, 194, 195, 197, 206, 213, 214, 218, 300, 347, 355, 356, 358, 397, 404, 447, 483, 501, 587, 588, 591, 593, 594, 606, 607, 608, 609, 611, 613, 615, 628, 730, 744, 762, 763, 765, 766, 767, 770, 777, 784, 787], "simplest": [19, 757, 768, 779, 782], "interact": [19, 28, 43, 46, 756, 802, 803, 808], "submodul": [19, 28, 42, 44, 96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 730, 731, 732, 734, 735, 736, 737, 756, 757, 758, 760, 763, 765, 767, 773, 774, 779, 783, 784, 788, 794], "ones": [19, 26, 28, 40, 46, 50, 54, 56, 58, 63, 71, 73, 77, 81, 86, 132, 136, 141, 143, 148, 198, 199, 235, 304, 349, 367, 489, 572, 586, 588, 589, 592, 593, 611, 612, 694, 695, 696, 750, 756, 761, 765, 768, 772, 773, 779, 786, 787, 803], "nativearrai": [19, 28, 29, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 122, 123, 129, 131, 136, 137, 138, 139, 140, 141, 143, 144, 145, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 170, 171, 172, 174, 176, 178, 179, 185, 195, 196, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 308, 309, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 481, 482, 483, 484, 485, 492, 495, 496, 498, 499, 503, 504, 505, 507, 510, 511, 512, 513, 514, 516, 518, 519, 520, 523, 526, 527, 529, 534, 535, 536, 539, 548, 549, 550, 551, 552, 554, 556, 557, 559, 570, 572, 573, 574, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 680, 681, 682, 685, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 737, 761, 764, 768, 770, 772, 773, 774, 776, 777, 780, 781, 784, 786, 794], "select": [19, 28, 33, 46, 54, 67, 77, 90, 356, 358, 367, 404, 414, 455, 482, 483, 604, 712, 713, 756, 757, 758, 765, 776, 779, 784, 786, 789, 792, 803, 806, 807], "lastli": [19, 28, 750, 761], "recurs": [19, 28, 29, 42, 44, 49, 71, 72, 165, 166, 198, 199, 508, 509, 587, 588, 591, 598, 673, 674, 677, 683, 684, 685, 757, 760, 763, 764, 773, 776, 788, 792], "native_arrai": [19, 28, 29, 50, 51, 53, 73, 75, 76, 77, 78, 89, 104, 107, 136, 139, 141, 143, 148, 151, 152, 153, 154, 162, 167, 174, 196, 205, 213, 229, 233, 234, 238, 239, 240, 242, 246, 250, 258, 259, 267, 272, 275, 278, 281, 286, 345, 357, 358, 423, 447, 453, 456, 492, 522, 523, 526, 556, 583, 586, 587, 588, 589, 591, 593, 594, 595, 596, 600, 601, 604, 605, 607, 608, 615, 620, 623, 628, 634, 635, 643, 644, 646, 649, 651, 653, 654, 661, 693, 702, 711, 717, 720, 722, 741, 754, 778, 779], "data_class": [19, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 374, 375, 503, 507, 642, 667], "implement": [19, 20, 28, 30, 34, 42, 45, 51, 52, 54, 65, 66, 74, 75, 77, 82, 89, 94, 151, 165, 166, 179, 198, 199, 213, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 272, 274, 277, 281, 284, 285, 289, 290, 341, 352, 356, 367, 402, 403, 487, 488, 508, 509, 587, 588, 589, 591, 593, 594, 602, 603, 604, 619, 626, 627, 628, 637, 646, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 741, 750, 754, 756, 759, 760, 761, 762, 764, 766, 767, 769, 770, 772, 773, 774, 776, 778, 779, 780, 782, 784, 786, 787, 788, 789, 791, 792, 794, 800, 801, 802, 803, 806, 809, 810], "low": [19, 28, 31, 47, 54, 58, 63, 81, 86, 355, 397, 593, 600, 606, 607, 608, 609, 611, 613, 615, 694, 696, 764, 770, 776, 777, 782, 784, 799, 801, 803, 804, 805, 807, 809], "level": [19, 28, 29, 31, 78, 495, 730, 750, 751, 756, 758, 764, 766, 770, 773, 775, 776, 777, 781, 782, 783, 784, 787, 788, 789, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810], "fundament": [19, 28, 765, 777, 782, 784, 796, 803], "common": [19, 22, 28, 32, 53, 54, 71, 76, 178, 249, 257, 323, 328, 352, 587, 589, 751, 754, 756, 757, 763, 766, 767, 768, 773, 774, 777, 780, 782, 792, 796, 800, 803, 810], "signatur": [19, 28, 358, 367, 447, 481, 766, 767, 768, 769, 772, 776, 779, 780, 782, 797, 800, 809], "matmul": [19, 28, 29, 45, 59, 82, 571, 591, 594, 642, 762, 779, 780, 784], "to_n": [19, 28, 29, 40, 49, 72, 784], "jaxlib": [19, 25, 43, 741, 757, 761, 766, 767, 772, 780, 784, 786], "xla_extens": [19, 25, 741, 761, 766, 767, 772, 780, 784, 786], "arrayimpl": [19, 25, 741], "why": [19, 750, 758, 776, 786, 795, 797], "disabl": [19, 28, 763], "array_mod": [19, 28, 536, 559, 591, 781], "set_array_mod": [19, 28, 559, 591, 781], "sigmoid": [19, 28, 29, 40, 48, 54, 70, 77, 296, 347, 362, 467, 583, 728, 784, 787, 788], "divid": [19, 24, 28, 29, 45, 53, 54, 55, 61, 71, 76, 77, 84, 96, 97, 246, 361, 461, 462, 463, 549, 589, 591, 596, 663, 761, 764, 768, 771, 779], "exp": [19, 28, 29, 53, 54, 76, 77, 110, 112, 244, 264, 277, 296, 347, 355, 382, 387, 583, 589, 594, 640, 775, 777], "high": [19, 28, 29, 47, 54, 58, 63, 81, 86, 355, 397, 543, 591, 593, 600, 606, 607, 608, 609, 611, 613, 615, 694, 696, 756, 770, 775, 777, 787, 794, 798, 799, 800, 801, 802, 803, 807, 809, 810], "most": [19, 28, 29, 71, 73, 94, 141, 356, 403, 543, 565, 586, 591, 594, 626, 627, 747, 750, 755, 756, 757, 761, 764, 765, 766, 767, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 792, 797, 803, 804, 806, 807, 809, 810], "further": [19, 71, 97, 758, 760, 761, 765, 768, 770, 772, 773, 776, 777, 779, 783, 784, 787, 788, 797, 798, 808, 809], "tutori": [19, 25, 26, 750, 758, 777, 793], "congratul": [19, 25], "come": [19, 42, 756, 757, 758, 761, 765, 777, 781, 782, 788, 790, 794, 803], "good": [19, 28, 29, 752, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 784, 785, 788], "foundat": [19, 797, 806], "power": [19, 28, 29, 53, 54, 55, 59, 76, 77, 78, 82, 96, 97, 233, 242, 243, 277, 319, 328, 349, 352, 540, 550, 562, 589, 591, 594, 598, 634, 647, 679, 731, 781, 786, 787, 788, 803, 805, 809], "defin": [20, 26, 28, 29, 30, 50, 54, 55, 59, 73, 77, 78, 82, 110, 141, 144, 145, 146, 222, 239, 246, 272, 273, 281, 283, 286, 295, 305, 308, 309, 310, 315, 316, 317, 318, 322, 347, 349, 352, 355, 356, 358, 367, 390, 402, 447, 453, 484, 518, 519, 539, 583, 586, 589, 591, 594, 604, 622, 627, 628, 641, 715, 716, 717, 719, 750, 756, 757, 761, 762, 765, 766, 769, 772, 775, 777, 778, 779, 780, 786, 788, 792, 794, 800, 801, 802, 803, 804, 807, 809, 810], "div": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35], "sub": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 54, 59, 61, 71, 72, 76, 77, 78, 82, 84, 97, 271, 356, 358, 367, 404, 433, 442, 459, 487, 488, 594, 596, 597, 625, 663, 670, 671, 672, 730, 756, 758, 759, 764, 770, 777, 778, 779, 786, 787, 788, 799], "x_": [20, 30, 283, 589], "82997245": 20, "44733784": 20, "32163444": 20, "93330479": 20, "52438271": 20, "20438017": 20, "252316": 20, "0827222": 20, "26017165": 20, "88881904": 20, "compat": [20, 26, 30, 34, 40, 47, 53, 59, 61, 64, 67, 68, 76, 82, 84, 87, 90, 91, 96, 97, 153, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 293, 587, 589, 594, 596, 601, 604, 605, 622, 635, 638, 641, 644, 648, 649, 661, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 762, 772, 777, 778, 780, 784, 792, 797], "sever": [20, 21, 30, 31, 33, 34, 35, 54, 77, 94, 355, 356, 369, 370, 371, 415, 757, 758, 780, 792, 801, 807], "pro": [20, 21, 22, 30, 31, 32, 33, 34, 35], "pick": [21, 31, 731], "purpos": [21, 28, 29, 31, 42, 44, 146, 244, 262, 315, 349, 586, 589, 594, 640, 758, 759, 761, 764, 765, 767, 768, 770, 772, 773, 774, 777, 779, 782, 783, 786, 794, 802, 804, 807, 808, 809], "illustr": [21, 31, 762, 784, 791], "trigger": [21, 31, 734, 756, 771], "unif": [21, 23, 24, 31, 33, 751, 786, 797, 799, 809], "detail": [21, 31, 44, 48, 53, 59, 61, 65, 70, 76, 77, 82, 84, 88, 104, 106, 109, 112, 133, 290, 356, 400, 432, 583, 586, 589, 602, 625, 632, 638, 642, 665, 704, 705, 706, 707, 728, 750, 756, 758, 760, 762, 763, 764, 765, 771, 772, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 805, 809], "55563945": 21, "65538704": 21, "14150524": 21, "46951997": 21, "30220294": 21, "14739668": 21, "57017946": 21, "91962677": 21, "51029003": 21, "59644395": 21, "stack": [21, 31, 40, 44, 54, 59, 61, 71, 77, 82, 84, 96, 144, 145, 316, 349, 356, 358, 403, 432, 434, 443, 460, 537, 546, 568, 586, 591, 594, 596, 598, 623, 625, 626, 627, 628, 630, 632, 634, 635, 636, 638, 639, 640, 642, 643, 646, 673, 683, 684, 732, 750, 755, 760, 762, 776, 784, 799, 801, 808, 809], "constitu": [21, 31, 71, 789], "comp": [21, 31], "manner": [21, 29, 31, 41, 49, 72, 598, 685, 757, 767, 769, 773, 777, 780, 787, 791, 792, 796, 799, 801, 809, 810], "5556394": 21, "655387": 21, "1415051": 21, "4695197": 21, "3022028": 21, "1473966": 21, "5701794": 21, "91962665": 21, "51028997": 21, "5964439": 21, "assess": [21, 31, 756, 782], "985": 21, "76": [21, 40, 53, 67, 74, 76, 77, 86, 167, 221, 237, 285, 386, 587, 589, 594, 598, 604, 644, 681, 695, 714], "000": [21, 76, 273, 754, 765], "69": [21, 40, 47, 53, 79, 86, 220, 262, 355, 376, 386, 576, 589, 592, 594, 633, 634, 695, 779, 787], "24": [21, 40, 42, 53, 54, 59, 67, 76, 77, 78, 81, 82, 86, 96, 234, 242, 257, 259, 272, 282, 283, 286, 331, 334, 352, 355, 367, 373, 375, 376, 386, 391, 392, 393, 394, 397, 482, 503, 504, 589, 591, 594, 598, 604, 607, 625, 633, 637, 674, 685, 694, 695, 696, 712, 714, 770, 787], "slower": [21, 777], "On": [21, 28, 29, 757, 766, 767, 771, 777, 779, 782, 785, 789], "hand": [21, 53, 750, 760, 766, 767, 771, 773, 779, 792], "singl": [21, 31, 40, 45, 53, 63, 71, 76, 86, 291, 333, 352, 356, 362, 414, 468, 557, 570, 574, 589, 591, 592, 593, 600, 602, 619, 694, 695, 696, 704, 732, 756, 757, 758, 760, 765, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 787, 788, 789, 792, 798], "learnt": [22, 32, 791], "two": [22, 32, 34, 40, 50, 54, 59, 65, 77, 78, 82, 96, 97, 118, 121, 132, 139, 144, 145, 146, 177, 185, 233, 247, 248, 282, 315, 316, 320, 329, 330, 332, 333, 335, 337, 344, 349, 352, 355, 356, 357, 358, 367, 383, 401, 402, 403, 414, 423, 428, 447, 453, 456, 481, 490, 495, 585, 586, 587, 589, 591, 594, 596, 602, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 666, 704, 705, 706, 707, 732, 756, 757, 760, 761, 766, 767, 768, 769, 773, 777, 778, 779, 782, 783, 787, 789, 798, 800, 808], "workflow": [22, 32, 43, 756, 758, 762, 766, 775, 777, 787, 790, 794, 798, 802, 809, 810], "ivy_norm": 22, "jax_norm": [22, 28, 29], "wider": [22, 32, 543, 565, 591, 781, 809], "avoid": [22, 32, 34, 54, 61, 77, 239, 244, 246, 262, 272, 358, 361, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 461, 462, 463, 497, 513, 538, 543, 565, 589, 591, 596, 657, 658, 659, 661, 663, 664, 666, 668, 757, 758, 762, 763, 764, 765, 766, 770, 774, 777, 779, 780, 781, 782, 803], "conveni": [22, 32, 756, 766, 767, 772, 778, 785, 787, 788, 794, 809], "act": [22, 32, 54, 77, 345, 353, 758, 768, 781, 792, 810], "shorthand": [22, 32, 34, 779], "pair": [22, 32, 42, 54, 58, 81, 227, 246, 311, 344, 349, 352, 355, 388, 397, 398, 589, 593, 594, 606, 607, 608, 609, 611, 613, 615, 620, 622], "93968587": 22, "26075466": 22, "22723222": 22, "06276492": 22, "47426987": 22, "72835908": 22, "71737559": 22, "50411096": 22, "65419174": 22, "15576624": 22, "variou": [22, 32, 34, 40, 750, 758, 760, 765, 766, 769, 770, 772, 774, 775, 777, 778, 779, 791, 793, 794, 799, 801, 802, 803, 806, 809], "implic": [22, 32, 33, 36, 764], "actual": [23, 33, 754, 758, 759, 765, 773, 774, 776, 777, 778, 779, 782, 783, 788, 792, 804, 809], "occur": [23, 28, 29, 33, 46, 51, 53, 65, 74, 76, 88, 154, 273, 289, 587, 589, 601, 602, 699, 700, 704, 705, 706, 707, 760, 765, 767, 770, 781], "becaus": [23, 31, 33, 43, 54, 355, 377, 757, 758, 760, 761, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 782, 784, 788, 789, 792, 803, 806, 809], "altern": [23, 33, 43, 54, 77, 82, 94, 320, 326, 330, 332, 333, 334, 335, 337, 338, 339, 343, 344, 352, 750, 756, 757, 763, 776, 787, 806], "dummi": [23, 24, 33, 34, 35, 41, 758], "assum": [23, 24, 33, 34, 35, 50, 53, 54, 55, 58, 59, 60, 76, 77, 78, 81, 82, 83, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 316, 322, 325, 341, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 415, 447, 481, 484, 510, 514, 516, 518, 527, 557, 581, 586, 587, 589, 591, 592, 593, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 744, 750, 757, 760, 762, 765, 766, 769, 778, 779, 782, 786, 787, 792], "slowli": [23, 33], "norm": [23, 33, 34, 54, 55, 59, 77, 78, 82, 93, 94, 355, 356, 376, 377, 381, 382, 383, 386, 387, 388, 398, 400, 404, 464, 465, 466, 498, 499, 520, 591, 594, 633, 649, 692, 732, 736, 780], "slow": [23, 33, 757], "54320029": 23, "30825614": 23, "17176882": 23, "14351968": 23, "98934778": 23, "82910388": 23, "89044143": 23, "71881472": 23, "1666683": 23, "14417601": 23, "norm_comp": [23, 33, 34], "float64": [23, 24, 51, 54, 63, 67, 73, 74, 76, 77, 78, 86, 90, 121, 134, 135, 151, 154, 158, 159, 164, 165, 168, 169, 174, 175, 179, 181, 182, 188, 191, 273, 328, 352, 367, 481, 529, 586, 587, 591, 594, 600, 627, 628, 633, 649, 695, 696, 713, 766, 778, 779], "norm_tran": [23, 33], "know": [23, 24, 33, 34, 35, 65, 602, 704, 705, 706, 707, 753, 756, 758, 767, 774, 778, 779, 782, 798, 804], "09422972": 24, "46009917": 24, "0881108": 24, "86487021": 24, "83629996": 24, "10654466": 24, "89883457": 24, "02893805": 24, "15644584": 24, "41495672": 24, "wherea": [24, 35, 758, 761, 762, 764, 766, 767, 768, 772, 773, 779, 789, 800], "subtract": [24, 28, 29, 53, 76, 96, 97, 134, 358, 447, 586, 589, 761, 764, 768], "begin": [24, 54, 77, 283, 358, 447, 448, 449, 450, 451, 589, 598, 673, 684, 730, 757, 760, 765, 778], "demonstr": [25, 28, 29, 43, 766, 768, 770, 786], "scenario": [25, 775], "often": [25, 755, 760, 770, 772, 773, 777, 779, 792, 798, 804, 807, 810], "fortun": [25, 26, 760], "everyth": [25, 43, 744, 750, 756, 757, 758, 759, 765, 768, 776, 777, 778, 779, 785, 792, 793, 798], "practic": [25, 758, 762, 765, 777, 806], "though": [25, 755, 756, 758, 766, 767, 769, 773, 776, 777, 782, 787, 792], "sharp": [25, 28, 29, 750], "verifi": [25, 756, 766, 767, 777, 779, 780], "prefer": [25, 28, 29, 246, 589, 750, 757, 764, 770, 774, 777, 793, 803], "whole": [26, 54, 77, 358, 361, 454, 464, 465, 466, 758, 763, 771], "machin": [26, 31, 32, 40, 46, 54, 59, 77, 82, 164, 167, 356, 404, 587, 594, 635, 638, 757, 760, 773, 791, 794, 797, 801, 803, 805, 806, 807, 808, 809], "full": [26, 54, 59, 77, 81, 82, 94, 164, 251, 259, 313, 314, 349, 356, 357, 358, 418, 422, 448, 451, 537, 546, 560, 568, 586, 587, 589, 591, 593, 594, 608, 610, 611, 612, 635, 639, 641, 642, 750, 757, 758, 763, 766, 769, 770, 772, 773, 777, 779, 782, 784, 792, 797, 798, 801, 803, 809], "neccessari": 26, "32": [26, 28, 29, 40, 42, 43, 44, 53, 54, 63, 76, 77, 81, 82, 86, 96, 97, 106, 163, 221, 233, 234, 243, 257, 279, 282, 283, 322, 352, 355, 356, 358, 367, 374, 375, 376, 386, 396, 397, 402, 406, 431, 482, 503, 519, 583, 587, 589, 591, 593, 594, 600, 601, 604, 608, 610, 611, 612, 615, 617, 632, 637, 694, 695, 696, 703, 714, 750, 765, 775, 787, 808], "kernel_s": [26, 28, 29, 44, 54, 77, 355, 373, 374, 375, 732, 738], "flatten": [26, 28, 29, 42, 44, 47, 54, 55, 59, 61, 64, 65, 77, 78, 82, 84, 87, 88, 324, 338, 352, 356, 358, 367, 401, 446, 450, 455, 458, 479, 486, 487, 488, 489, 490, 503, 507, 591, 594, 596, 601, 602, 629, 637, 649, 655, 660, 662, 699, 700, 704, 705, 706, 707, 730, 750, 776, 782], "input_arrai": [26, 28, 29, 776], "torch_model": [26, 28, 29, 46], "thank": [26, 787, 797], "fledg": [26, 757, 784, 785], "output_arrai": [26, 28, 29], "0768": [26, 111, 583], "0727": 26, "0942": 26, "1300": 26, "1350": [26, 54, 77, 356, 411], "0839": 26, "1511": 26, "1061": 26, "0606": 26, "0896": 26, "softmaxbackward0": 26, "furthermor": 26, "interest": [26, 28, 40, 239, 272, 589, 756, 758], "continu": [26, 28, 29, 44, 120, 286, 585, 589, 750, 755, 756, 757, 759, 760, 776, 779, 792, 797, 798, 803], "regress": [27, 803, 810], "checkout": [28, 43, 758, 760, 779], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 28, "pyvi": [28, 29], "theoret": 28, "aspect": [28, 29, 751, 775, 787, 803], "switch": [28, 40, 762, 770, 773, 774, 810], "easiest": [28, 750, 753, 757, 793], "defer": [28, 29, 756, 761, 766, 767, 773, 776, 777, 779, 809], "similarli": [28, 41, 139, 146, 222, 315, 349, 586, 589, 762, 766, 777, 782, 786, 809], "essenc": [28, 804, 809], "regardless": [28, 29, 40, 71, 751, 766, 770, 786, 789, 798], "being": [28, 29, 40, 54, 71, 77, 92, 96, 100, 121, 356, 358, 411, 447, 544, 586, 591, 594, 628, 730, 731, 750, 757, 758, 760, 761, 762, 764, 766, 767, 768, 772, 774, 776, 777, 778, 779, 780, 782, 784, 787, 791, 792, 797, 798, 799, 801, 802, 803, 804, 809, 810], "slide": [28, 54, 58, 77, 81, 355, 373, 374, 375, 391, 392, 393, 394, 397, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732], "could": [28, 29, 34, 65, 602, 704, 705, 706, 707, 756, 757, 758, 760, 765, 766, 768, 774, 776, 777, 778, 779, 784, 786, 787, 788, 797, 798, 803, 808, 809], "regressor": [28, 29, 750], "input_dim": [28, 29, 43, 750], "output_dim": [28, 29, 43, 750], "linear0": [28, 29, 40, 750, 787, 788], "linear1": [28, 29, 40, 750, 787, 788], "instanti": [28, 29, 769], "adam": [28, 29, 40, 44, 56, 79, 494, 572, 573, 578, 591, 592, 736, 750, 787, 788, 789, 803], "n_training_exampl": [28, 29, 750], "2000": [28, 29, 77, 305, 349, 750], "random_norm": [28, 29, 58, 59, 63, 81, 82, 86, 503, 591, 593, 594, 600, 608, 610, 611, 612, 615, 618, 642, 750], "linspac": [28, 29, 50, 73, 121, 586, 750, 772, 782, 784, 810], "loss_fn": [28, 29, 40, 42, 44, 750, 787, 788, 789], "pred": [28, 29, 43, 44, 54, 60, 77, 83, 357, 420, 422, 595, 651, 652, 653, 750, 764, 773, 776], "epoch": [28, 29, 42, 44, 750], "loss": [28, 29, 42, 44, 54, 77, 94, 420, 421, 422, 423, 424, 543, 565, 591, 651, 652, 653, 750, 765, 766, 773, 777, 780, 781, 787, 788, 789, 803, 810], "gradient": [28, 29, 42, 44, 54, 77, 94, 212, 346, 352, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 588, 597, 670, 671, 672, 736, 750, 759, 780, 787, 788, 791, 792, 803], "grad": [28, 29, 40, 44, 572, 592, 736, 750, 775, 787, 788, 789], "execute_with_gradi": [28, 29, 40, 44, 592, 750, 787, 788, 789, 792], "lambda": [28, 29, 45, 47, 118, 120, 502, 574, 575, 577, 582, 585, 591, 592, 594, 598, 627, 680, 681, 685, 750, 756, 773, 774, 775, 778, 782, 784, 787], "2d": [28, 29, 44, 54, 77, 94, 304, 349, 355, 356, 358, 367, 370, 371, 378, 379, 413, 418, 428, 436, 481, 732, 750, 777, 782], "5f": [28, 29, 750], "nonetheless": [28, 29], "slight": [28, 29, 766, 779, 788], "introduc": [28, 29, 246, 589, 596, 602, 662, 704, 764, 765, 766, 774, 778, 779, 782, 787, 796], "address": [28, 29, 55, 556, 591, 756, 758, 760, 761, 772, 784, 798, 799, 801, 803, 809], "extract": [28, 29, 36, 43, 54, 77, 358, 431, 455, 777, 780, 799, 803, 804, 809], "gc": [28, 29], "decompos": [28, 29, 54, 77, 94, 313, 314, 330, 337, 349, 352, 356, 411, 416, 419, 777], "x0": [28, 29, 47, 78, 495, 591, 768], "normalize_comp": [28, 29], "html": [28, 29, 43, 53, 76, 146, 154, 242, 252, 253, 268, 315, 349, 367, 481, 586, 587, 589, 594, 596, 604, 640, 669, 719, 769, 797], "fname": [28, 29, 45, 47, 734, 787], "anticip": [28, 29], "than": [28, 29, 31, 34, 53, 54, 55, 58, 59, 61, 63, 64, 65, 67, 71, 76, 77, 78, 81, 82, 84, 86, 87, 88, 90, 96, 97, 121, 134, 164, 212, 220, 221, 224, 225, 227, 228, 231, 233, 235, 239, 245, 246, 260, 261, 262, 263, 270, 272, 277, 281, 283, 285, 286, 290, 291, 292, 297, 303, 320, 321, 333, 340, 349, 352, 355, 356, 358, 367, 376, 377, 382, 383, 386, 387, 388, 398, 399, 400, 416, 419, 438, 439, 482, 483, 484, 522, 523, 526, 543, 565, 586, 587, 588, 589, 591, 593, 594, 596, 600, 601, 602, 604, 620, 622, 632, 633, 634, 635, 638, 649, 654, 658, 664, 696, 702, 705, 706, 707, 712, 713, 718, 719, 720, 721, 732, 752, 754, 758, 760, 764, 765, 766, 768, 770, 776, 777, 778, 779, 780, 781, 782, 784, 787, 788, 789, 792, 793, 797, 800, 801, 802, 803, 809, 810], "addition": [28, 29, 764, 776, 777, 809], "normalize_native_comp": [28, 29], "immedi": [28, 29, 752, 757], "summar": [28, 29, 94, 779], "codebas": [28, 29, 210, 211, 588, 751, 759, 766, 771, 776, 777, 779, 780, 783, 798], "thought": [28, 29, 757, 758, 772, 797, 801], "No": [28, 29, 42, 54, 60, 77, 83, 357, 421, 422, 423, 424, 595, 651, 758, 765, 766, 803], "matter": [28, 29, 34, 768, 796], "jax_out": [28, 29], "ideal": [28, 29, 765, 777, 782, 787], "But": [28, 29, 764, 765, 769, 771, 774, 782, 789], "bring": [28, 29, 760, 779, 784, 785, 794, 797], "wise": [28, 48, 53, 54, 59, 70, 76, 77, 82, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 280, 281, 288, 293, 294, 296, 298, 299, 301, 302, 320, 321, 326, 327, 328, 329, 332, 333, 334, 335, 339, 340, 343, 344, 347, 352, 355, 356, 358, 378, 379, 380, 402, 408, 434, 441, 443, 444, 460, 583, 589, 596, 622, 654, 736, 782], "vision": [28, 29, 47, 750, 752, 790, 799, 809], "worth": [28, 29], "differenti": [28, 29, 791, 803], "chosen": [28, 29, 47, 121, 227, 586, 589, 601, 703, 756, 765, 777], "plai": [28, 29, 357, 422, 750, 757, 761, 767, 777, 779, 789, 803, 806], "critic": [28, 29, 803, 809], "role": [28, 29, 750, 758, 767, 777, 785, 804, 806, 810], "dl": [28, 29], "cnn": [28, 29, 803], "effortlessli": [28, 29], "previous": [28, 29, 560, 591, 741, 757, 762, 773, 775, 779, 784], "pre": [28, 29, 750, 752, 754, 756, 779, 789, 792, 793, 803], "default_devic": [28, 29, 205, 208, 209, 210, 216, 217, 588, 767, 770], "as_n": [28, 29, 51, 52, 71, 74, 75, 157, 158, 159, 160, 161, 162, 168, 195, 196, 208, 587, 588, 766], "certainli": [28, 29, 750, 797, 809], "upon": [28, 29, 46, 758, 768, 776, 779, 782, 792, 802, 803], "unnecessari": [28, 29, 777], "consist": [28, 29, 67, 71, 239, 246, 272, 356, 403, 589, 594, 604, 626, 627, 714, 733, 734, 760, 761, 765, 766, 771, 776, 784, 796, 804], "extend": [28, 29, 54, 77, 358, 367, 447, 484, 762, 763, 769, 770, 772, 777, 780, 792, 800, 803, 809], "infrastructur": [28, 29, 799, 805, 806], "coco": 28, "structur": [29, 71, 74, 97, 164, 167, 500, 591, 598, 677, 686, 730, 750, 756, 758, 761, 764, 773, 778, 779, 780, 787, 788, 802, 803], "seamlessli": [29, 779], "benefit": [29, 757, 761, 764, 776, 782, 786, 787, 792, 797, 798, 801, 805, 808], "therefor": [29, 34, 50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 440, 447, 448, 450, 457, 481, 484, 488, 496, 504, 505, 510, 514, 516, 518, 520, 534, 552, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 752, 756, 758, 760, 761, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 788, 792, 796, 800, 803, 809], "wide": [29, 750, 758, 779, 801, 803], "prepar": [29, 42, 44, 47, 750, 765], "plenti": 29, "resourc": [29, 751, 756, 757, 765], "visit": [29, 757, 758, 765], "page": [29, 750, 756, 757, 758, 763, 765, 785, 786, 789, 790, 793], "newli": [30, 31, 43, 45, 51, 74, 151, 497, 587, 591, 758, 762, 765, 776, 779], "randon": [30, 31, 33, 34, 35], "mean_": 30, "std_": 30, "detect": [30, 34, 53, 71, 76, 254, 589, 598, 673, 684, 756, 757, 762, 764, 765, 771, 779, 787, 788], "inspect": [30, 34, 493, 591], "__": [30, 31, 32, 33, 34, 35, 71, 768, 787], "exhibit": [31, 809], "via": [31, 34, 246, 356, 416, 419, 589, 598, 683, 684, 758, 760, 764, 766, 767, 776, 780, 782, 784, 786, 787, 791, 803], "script": [31, 750, 752, 757, 758, 765, 768, 784, 792, 803], "low_level": 31, "chain": [31, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 378, 379, 380, 420, 421, 423, 424, 432, 453, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 597, 598, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 670, 671, 675, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 730, 737, 761, 764, 775, 777, 788, 789, 792, 803], "un": [31, 169, 587, 766, 784], "partial_comp": 31, "time_funct": 31, "slowest": [31, 54, 61, 77, 84, 358, 437, 596, 661], "express": [31, 53, 54, 76, 77, 220, 224, 226, 227, 236, 238, 278, 284, 289, 341, 352, 589, 738, 769, 777, 784, 789, 803, 804], "fastest": [31, 54, 61, 77, 84, 356, 358, 414, 437, 596, 661], "maxim": [31, 773, 776, 784, 800, 801, 805, 806, 807], "conclud": [32, 780], "collect": [32, 42, 44, 46, 47, 49, 71, 72, 583, 588, 591, 592, 593, 595, 598, 599, 600, 686, 728, 732, 733, 735, 736, 757, 765, 770, 774, 775, 778, 779, 791, 801, 803, 806], "global": [33, 34, 44, 55, 71, 78, 97, 157, 158, 159, 160, 161, 210, 211, 212, 540, 541, 544, 549, 550, 562, 563, 566, 587, 588, 591, 735, 741, 757, 761, 762, 765, 766, 767, 770, 773, 777, 784, 803], "approach": [33, 756, 757, 758, 761, 764, 766, 767, 773, 777, 779, 780, 782, 786, 787, 792, 800, 807, 809], "prioriti": [34, 71, 741, 758, 767, 776], "normalize_via_oper": 34, "determin": [34, 53, 54, 59, 61, 65, 68, 71, 76, 77, 78, 82, 89, 91, 94, 96, 97, 132, 154, 156, 163, 169, 170, 171, 172, 174, 175, 176, 191, 201, 203, 204, 215, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 252, 253, 254, 255, 256, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 336, 341, 352, 355, 356, 357, 367, 390, 404, 420, 481, 492, 495, 516, 517, 521, 522, 523, 524, 525, 526, 552, 570, 586, 587, 588, 589, 591, 594, 596, 597, 602, 605, 621, 622, 623, 625, 629, 630, 632, 634, 635, 637, 638, 640, 641, 646, 648, 649, 655, 670, 671, 672, 704, 705, 706, 707, 708, 722, 723, 731, 735, 764, 766, 767, 769, 773, 777, 779, 781, 782, 796], "might": [34, 55, 178, 502, 587, 591, 754, 756, 757, 758, 765, 766, 768, 771, 774, 777, 779, 780, 782, 784, 786, 787, 794], "think": [34, 756, 758, 765, 768, 782, 804], "uniqu": [34, 44, 54, 55, 65, 77, 78, 88, 358, 446, 447, 458, 527, 591, 597, 598, 602, 670, 671, 672, 675, 679, 704, 705, 706, 707, 750, 760, 764, 773, 777, 778, 782, 792, 796, 806], "rule": [34, 51, 53, 54, 59, 74, 76, 77, 82, 151, 154, 177, 178, 179, 228, 239, 272, 274, 281, 283, 291, 293, 358, 367, 435, 481, 587, 589, 594, 596, 621, 622, 629, 634, 637, 641, 655, 744, 760, 761, 764, 765, 766, 768, 771, 772, 773, 775, 779, 782, 804], "broadcast": [34, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 316, 321, 322, 323, 324, 328, 330, 332, 334, 335, 336, 337, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 399, 400, 401, 408, 409, 412, 413, 415, 420, 421, 422, 423, 424, 430, 432, 435, 440, 448, 449, 450, 451, 453, 456, 457, 461, 464, 465, 466, 467, 468, 470, 471, 481, 482, 483, 484, 487, 488, 489, 490, 498, 499, 503, 504, 505, 510, 511, 520, 534, 535, 572, 573, 576, 578, 579, 580, 581, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 673, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 707, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 744, 764, 766, 768, 769, 770, 779, 780, 784], "elementwis": [34, 54, 62, 77, 85, 295, 297, 344, 347, 594, 599, 647, 692, 773, 780, 784], "taken": [34, 54, 59, 77, 82, 325, 352, 355, 398, 594, 625, 756, 765, 777, 780, 789, 804], "rather": [34, 55, 71, 78, 121, 212, 522, 523, 526, 586, 588, 591, 754, 758, 760, 764, 766, 769, 777, 778, 779, 780, 789, 792, 797, 799, 802, 803], "fact": [34, 94, 758, 760, 765, 777, 779, 784, 787], "pure": [34, 44, 750, 769, 772, 777, 782, 786, 789, 792, 803, 809, 810], "consum": [34, 764, 765, 772, 778, 779], "conflict": [34, 757, 758, 765, 777, 787], "error": [34, 45, 47, 53, 54, 58, 71, 76, 77, 81, 104, 241, 289, 356, 357, 367, 368, 416, 419, 420, 421, 488, 491, 538, 583, 589, 591, 593, 594, 604, 620, 640, 643, 715, 717, 733, 734, 736, 747, 751, 755, 757, 758, 760, 761, 762, 765, 766, 767, 768, 771, 772, 777, 779, 780, 781, 786, 792, 798, 803], "thrown": [34, 520, 591, 761, 767, 770, 771, 792], "consider": [34, 756, 768, 772, 782, 796, 800, 801], "combin": [34, 54, 71, 77, 97, 355, 367, 388, 398, 481, 508, 509, 591, 594, 622, 632, 758, 761, 764, 765, 766, 768, 770, 773, 779, 789, 803], "effect": [34, 50, 54, 56, 67, 77, 79, 90, 139, 355, 357, 390, 422, 572, 580, 586, 592, 593, 604, 619, 719, 721, 756, 761, 764, 765, 769, 772, 776, 778, 782, 792, 797], "explain": [34, 54, 77, 355, 388, 398, 750, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 782, 784, 785, 786, 787, 788, 789, 799, 806, 809], "standalon": [35, 756, 761, 779, 794, 799, 804, 809, 810], "static": [35, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 101, 129, 310, 375, 388, 393, 416, 419, 453, 462, 552, 586, 637, 729, 734, 777, 781, 792, 802, 803, 804], "opposit": 36, "todo": [37, 38, 39, 44, 47, 77, 483, 756, 766, 777], "aim": [40, 754, 758, 760, 774, 777, 779, 783, 801, 803, 806], "interfac": [40, 73, 134, 586, 786, 789, 792, 794, 797, 799, 800, 801, 802, 803, 807, 810], "set_framework": [40, 47], "44": [40, 44, 53, 54, 63, 76, 77, 86, 225, 272, 282, 286, 287, 323, 352, 355, 375, 376, 589, 593, 594, 598, 601, 604, 616, 637, 681, 694, 695, 703, 714], "45": [40, 42, 44, 53, 54, 67, 76, 77, 79, 81, 86, 97, 223, 227, 239, 282, 283, 339, 352, 355, 367, 376, 386, 397, 482, 488, 572, 578, 589, 592, 594, 596, 604, 637, 663, 695, 696, 714], "46": [40, 42, 44, 54, 63, 77, 81, 86, 138, 262, 283, 305, 349, 355, 374, 392, 393, 586, 589, 598, 674, 694, 695], "47": [40, 44, 53, 54, 59, 63, 76, 77, 78, 79, 81, 86, 228, 286, 355, 367, 374, 392, 393, 482, 503, 504, 576, 589, 591, 592, 593, 594, 600, 617, 629, 695, 696], "underneath": [40, 765, 801], "sai": [40, 756, 757, 774, 786, 798], "clip": [40, 53, 54, 61, 76, 77, 78, 84, 270, 271, 358, 431, 452, 455, 498, 499, 589, 591, 596, 764, 773, 775, 776, 787, 789], "a_min": 40, "a_max": 40, "tensforflow": 40, "clip_by_valu": [40, 789], "clip_value_min": 40, "clip_value_max": 40, "clamp": [40, 54, 77, 295, 347, 789], "min": [40, 44, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 144, 146, 164, 167, 271, 315, 317, 349, 356, 404, 504, 534, 535, 549, 586, 587, 589, 591, 594, 604, 633, 639, 642, 643, 649, 750], "max": [40, 42, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 164, 167, 270, 355, 356, 358, 373, 374, 375, 391, 392, 393, 394, 396, 404, 454, 498, 499, 504, 520, 534, 535, 587, 589, 591, 594, 604, 633, 635, 638, 732, 736, 765, 777], "sole": [40, 772, 780, 802, 803, 804], "49": [40, 44, 54, 63, 77, 81, 82, 286, 355, 356, 367, 376, 386, 397, 414, 482, 589, 604, 647, 695, 714], "51": [40, 44, 53, 54, 76, 77, 78, 86, 234, 272, 285, 356, 376, 419, 589, 696], "93": [40, 54, 76, 78, 86, 197, 286, 342, 352, 503, 504, 588, 591, 695, 696], "devicearrai": [40, 761, 777, 784, 786], "concaten": [40, 54, 55, 61, 77, 82, 358, 432, 503, 507, 591, 593, 596, 619, 637, 655, 778, 782, 784, 787], "accept": [40, 49, 50, 53, 54, 59, 72, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 326, 346, 349, 352, 354, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 447, 481, 484, 488, 496, 504, 505, 510, 514, 516, 518, 520, 534, 552, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 756, 757, 758, 761, 764, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 786, 794, 801], "jax_concat": 40, "tf_concat": 40, "np_concat": 40, "torch_concat": 40, "85": [40, 48, 54, 63, 70, 76, 77, 79, 81, 86, 97, 106, 224, 233, 234, 278, 294, 300, 347, 367, 482, 549, 576, 583, 589, 591, 592, 593, 600, 617, 694, 695, 696], "86": [40, 63, 77, 86, 355, 367, 386, 482, 572, 592, 695, 696], "mymodel": [40, 787], "87": [40, 79, 81, 233, 262, 367, 397, 482, 572, 589, 592], "88": [40, 79, 86, 106, 234, 367, 482, 576, 583, 589, 592, 594, 600, 604, 637, 696, 714], "x_in": [40, 787, 788, 789], "90": [40, 42, 44, 53, 54, 76, 77, 234, 238, 278, 282, 342, 352, 358, 367, 453, 482, 589, 594, 604, 637, 714, 797], "reduce_mean": [40, 750, 787, 788, 789], "91": [40, 54, 81, 86, 234, 342, 352, 397, 589, 593, 594, 600, 604, 617, 637, 695, 714], "49040043354034424": 40, "48975786566734314": 40, "4892795979976654": 40, "48886892199516296": 40, "4884953498840332": 40, "4881443977355957": 40, "4878086447715759": 40, "48748287558555603": 40, "48716384172439575": 40, "48684927821159363": 40, "48653748631477356": 40, "48622724413871765": 40, "4859171509742737": 40, "48560672998428345": 40, "48529526591300964": 40, "4849821627140045": 40, "48466697335243225": 40, "4843493402004242": 40, "4840289056301117": 40, "4837053418159485": 40, "4833785891532898": 40, "4830484390258789": 40, "22": [40, 42, 44, 47, 48, 53, 54, 55, 63, 67, 70, 77, 78, 81, 86, 107, 112, 234, 242, 355, 356, 358, 363, 367, 373, 374, 376, 391, 392, 393, 394, 397, 402, 431, 472, 482, 504, 535, 570, 583, 589, 593, 594, 598, 601, 604, 616, 617, 625, 630, 637, 681, 691, 694, 695, 696, 703, 713, 714, 757, 764, 770], "48271444439888": 40, "23": [40, 42, 44, 53, 54, 59, 63, 73, 76, 77, 78, 81, 86, 136, 234, 237, 254, 255, 256, 279, 281, 282, 283, 285, 292, 322, 323, 352, 355, 358, 367, 373, 374, 376, 386, 391, 392, 393, 394, 397, 431, 482, 488, 586, 589, 593, 594, 598, 601, 612, 625, 629, 633, 643, 674, 681, 685, 694, 695, 696, 703, 750, 765, 779, 784], "48237672448158264": 40, "48203518986701965": 40, "25": [40, 42, 43, 44, 53, 55, 59, 60, 63, 67, 70, 76, 77, 78, 81, 82, 85, 86, 90, 96, 97, 112, 137, 222, 223, 233, 239, 241, 252, 257, 272, 277, 280, 282, 285, 286, 287, 292, 306, 349, 357, 367, 397, 420, 422, 423, 482, 490, 518, 519, 535, 549, 586, 589, 591, 594, 595, 598, 599, 604, 607, 621, 625, 630, 647, 652, 674, 681, 685, 692, 694, 695, 696, 713, 714, 716, 721, 764, 775], "48168954253196716": 40, "26": [40, 42, 44, 47, 53, 54, 62, 63, 77, 78, 79, 86, 234, 239, 285, 355, 356, 376, 414, 518, 572, 589, 591, 592, 593, 594, 598, 599, 604, 615, 625, 637, 644, 674, 692, 694, 695, 714], "4813397228717804": 40, "27": [40, 42, 47, 53, 54, 59, 63, 76, 77, 81, 82, 86, 90, 233, 234, 237, 277, 285, 286, 328, 352, 355, 376, 386, 519, 589, 591, 594, 598, 604, 632, 637, 647, 674, 681, 695, 714, 718], "4809857904911041": 40, "48062753677368164": 40, "29": [40, 42, 44, 47, 59, 76, 78, 79, 81, 86, 227, 367, 397, 482, 503, 504, 574, 578, 589, 591, 592, 594, 629, 694, 695, 696], "48026490211486816": 40, "30": [40, 42, 53, 54, 77, 78, 86, 90, 97, 272, 331, 339, 352, 355, 358, 376, 386, 397, 431, 472, 503, 505, 510, 511, 518, 519, 535, 544, 549, 589, 591, 594, 598, 604, 630, 637, 682, 694, 695, 713, 714, 718, 731, 765], "479898065328598": 40, "31": [40, 42, 43, 47, 48, 53, 54, 76, 77, 78, 81, 86, 107, 112, 138, 233, 264, 272, 355, 358, 367, 375, 376, 431, 482, 498, 583, 586, 589, 591, 695, 696, 787], "47952669858932495": 40, "4791509211063385": 40, "33": [40, 42, 43, 53, 63, 67, 76, 78, 79, 81, 225, 226, 233, 282, 355, 358, 367, 374, 396, 397, 431, 482, 499, 549, 576, 589, 591, 592, 593, 594, 598, 604, 616, 617, 637, 691, 694, 714, 721], "4787706732749939": 40, "34": [40, 42, 76, 77, 78, 86, 167, 234, 237, 264, 285, 355, 367, 397, 488, 503, 504, 587, 589, 591, 593, 594, 600, 617, 634, 695, 696, 767], "47838595509529114": 40, "35": [40, 48, 58, 59, 70, 76, 77, 81, 82, 86, 107, 227, 286, 355, 376, 386, 589, 593, 594, 601, 604, 617, 622, 629, 695, 703, 714], "4779967665672302": 40, "36": [40, 44, 53, 54, 58, 67, 77, 78, 82, 227, 282, 283, 331, 352, 355, 367, 376, 386, 482, 503, 504, 550, 589, 591, 594, 598, 604, 617, 634, 637, 647, 684, 714], "47760307788848877": 40, "37": [40, 48, 53, 54, 70, 76, 77, 81, 96, 107, 225, 233, 282, 285, 289, 363, 397, 472, 589, 593, 594, 598, 600, 617, 634, 681, 695, 765], "4772048890590668": 40, "38": [40, 42, 44, 47, 51, 54, 76, 77, 86, 164, 289, 339, 352, 355, 367, 374, 393, 396, 397, 482, 587, 589, 594, 634, 768], "47680220007896423": 40, "47639501094818115": 40, "40": [40, 42, 44, 54, 55, 76, 77, 78, 86, 90, 97, 233, 237, 257, 286, 331, 352, 355, 374, 376, 386, 392, 503, 505, 510, 511, 535, 549, 571, 574, 589, 591, 592, 594, 598, 604, 630, 637, 682, 695, 714, 718, 750, 765], "47598329186439514": 40, "41": [40, 42, 47, 53, 54, 59, 76, 77, 78, 81, 82, 107, 226, 234, 272, 286, 355, 356, 363, 367, 374, 392, 397, 411, 472, 482, 498, 499, 583, 589, 591, 594, 604, 621, 629, 720], "4755673110485077": 40, "4751465618610382": 40, "4747215211391449": 40, "4742920398712158": 40, "47385817766189575": 40, "47341999411582947": 40, "47297725081443787": 40, "4725303053855896": 40, "47207894921302795": 40, "47162333130836487": 40, "47116345167160034": 40, "52": [40, 53, 76, 78, 79, 86, 227, 237, 239, 367, 482, 503, 504, 519, 572, 589, 591, 592, 593, 594, 604, 617, 637, 696, 714, 744], "470699280500412": 40, "53": [40, 59, 63, 76, 81, 158, 214, 244, 397, 575, 577, 587, 588, 592, 594, 599, 629, 692, 696], "47023090720176697": 40, "54": [40, 51, 53, 58, 76, 77, 81, 86, 167, 236, 237, 242, 257, 286, 292, 305, 349, 355, 367, 376, 386, 482, 589, 593, 594, 604, 617, 634, 637, 694, 695, 696, 714, 765, 768], "4697583019733429": 40, "55": [40, 48, 77, 86, 112, 233, 292, 367, 482, 518, 589, 591, 594, 600, 604, 630, 637, 695, 696, 714, 760], "46928152441978455": 40, "56": [40, 42, 53, 54, 58, 63, 76, 77, 81, 138, 272, 286, 289, 292, 355, 376, 386, 572, 586, 589, 592, 593, 594, 598, 604, 608, 610, 612, 617, 637, 673, 695, 714, 768], "46880054473876953": 40, "57": [40, 42, 53, 54, 76, 77, 197, 220, 221, 224, 225, 227, 234, 237, 238, 278, 294, 588, 589], "4683155119419098": 40, "58": [40, 498, 591], "4678264260292053": 40, "59": [40, 53, 234, 367, 482], "46733325719833374": 40, "46683603525161743": 40, "61": [40, 42, 53, 54, 59, 76, 77, 79, 83, 86, 225, 260, 262, 287, 376, 572, 589, 592, 593, 594, 595, 615, 629, 651, 653, 696], "4663347601890564": 40, "62": [40, 42, 48, 70, 76, 86, 107, 257, 285, 589, 599, 600, 692, 694, 696], "4658295214176178": 40, "63": [40, 44, 53, 70, 76, 81, 82, 112, 278, 285, 286, 355, 367, 376, 386, 397, 482, 589, 594, 598, 604, 621, 637, 674, 685, 714], "465320348739624": 40, "4648073613643646": 40, "65": [40, 42, 44, 47, 76, 79, 86, 233, 272, 518, 572, 589, 591, 592, 594, 604, 637, 695, 696, 714, 765], "46429020166397095": 40, "66": [40, 42, 44, 67, 77, 78, 79, 234, 355, 386, 503, 504, 576, 589, 591, 592, 594, 604, 637, 714], "4637692868709564": 40, "46324464678764343": 40, "68": [40, 44, 47, 53, 86, 107, 135, 227, 355, 376, 386, 583, 586, 589, 599, 692, 695, 696], "4627160429954529": 40, "4621836841106415": 40, "70": [40, 42, 54, 77, 78, 355, 376, 386, 511, 535, 594, 604, 637, 714, 797], "4616474211215973": 40, "71": [40, 53, 76, 81, 238, 278, 397, 589], "46110764145851135": 40, "72": [40, 54, 63, 77, 79, 244, 331, 352, 355, 376, 386, 576, 589, 592, 594, 604, 637, 695, 714], "460563987493515": 40, "73": [40, 53, 82, 286, 367, 482, 594, 600, 621, 695, 779], "4600166976451874": 40, "74": [40, 42, 53, 86, 234, 264, 589, 594, 634], "45946577191352844": 40, "45891112089157104": 40, "45835286378860474": 40, "77": [40, 44, 78, 234, 550, 589, 594, 604, 637, 714], "4577910006046295": 40, "78": [40, 56, 234, 283, 578, 589, 592, 594, 600, 604, 637, 695, 714], "45722562074661255": 40, "79": [40, 42, 54, 55, 77, 78, 81, 86, 96, 234, 239, 355, 376, 386, 397, 498, 499, 589, 591, 696], "45665669441223145": 40, "80": [40, 54, 77, 331, 352, 356, 367, 414, 482, 594, 598, 604, 637, 684, 714, 797], "4560841917991638": 40, "81": [40, 44, 53, 59, 74, 76, 82, 86, 167, 237, 262, 287, 367, 482, 587, 589, 594, 598, 600, 604, 629, 634, 647, 681, 696, 714, 779], "4555082619190216": 40, "82": [40, 42, 47, 48, 53, 79, 86, 107, 225, 367, 482, 572, 592, 695, 696, 754], "45492875576019287": 40, "83": [40, 59, 81, 86, 286, 355, 367, 376, 386, 397, 482, 589, 593, 594, 617, 629, 695], "45434585213661194": 40, "84": [40, 58, 67, 76, 86, 167, 197, 262, 587, 588, 594, 599, 604, 617, 637, 692, 695, 696, 714], "45375964045524597": 40, "4531698524951935": 40, "4525766670703888": 40, "45198020339012146": 40, "4513803720474243": 40, "4507772624492645": 40, "4501707851886749": 40, "4495610296726227": 40, "92": [40, 44, 54, 55, 86, 342, 352, 570, 580, 592, 594, 623, 695, 696], "4489481747150421": 40, "44833192229270935": 40, "94": [40, 53, 54, 56, 63, 76, 77, 79, 86, 206, 282, 283, 342, 352, 386, 576, 588, 592, 696], "4477125108242035": 40, "95": [40, 54, 56, 59, 63, 70, 79, 81, 86, 104, 342, 352, 397, 572, 576, 580, 583, 592, 594, 600, 629, 695, 696], "44708991050720215": 40, "96": [40, 54, 56, 76, 77, 78, 86, 236, 257, 289, 342, 352, 355, 376, 503, 504, 576, 589, 591, 592, 594, 604, 637, 696, 714], "44646409153938293": 40, "97": [40, 54, 56, 76, 79, 86, 225, 342, 352, 576, 589, 592, 695], "44583529233932495": 40, "98": [40, 48, 54, 56, 63, 70, 76, 79, 86, 107, 234, 237, 285, 342, 352, 576, 583, 589, 592, 594, 598, 601, 604, 637, 674, 685, 694, 696, 703, 714], "4452032148838043": 40, "99": [40, 53, 54, 56, 74, 76, 86, 135, 221, 236, 342, 352, 549, 576, 586, 589, 591, 592, 598, 604, 677, 685, 695, 714], "44456806778907776": 40, "4439": 40, "selectbackward0": 40, "hope": [40, 792, 797, 809], "short": [40, 593, 618, 758, 766, 784, 788], "ivy_compil": 41, "ic": 41, "numer": [41, 50, 51, 53, 54, 55, 59, 63, 64, 67, 74, 76, 77, 78, 82, 86, 87, 89, 96, 97, 139, 151, 219, 222, 235, 239, 244, 245, 246, 253, 254, 255, 258, 267, 268, 272, 274, 275, 276, 277, 281, 282, 283, 287, 288, 292, 293, 362, 367, 468, 481, 540, 541, 549, 550, 562, 563, 586, 587, 589, 591, 594, 600, 601, 604, 622, 629, 632, 637, 640, 642, 644, 646, 648, 694, 695, 696, 698, 699, 700, 702, 703, 708, 715, 718, 720, 731, 754, 766, 775, 777, 778, 779, 780, 781, 782, 784, 788, 800, 803, 809], "anyth": [41, 54, 77, 367, 487, 488, 758, 770, 779, 780, 803, 804], "affect": [41, 47, 765, 777], "intermedi": [41, 801, 802, 803, 804, 809], "original_fn": 41, "100000": 41, "var": [41, 67, 90, 92, 117, 118, 119, 120, 585, 597, 604, 670, 671, 738, 757, 768, 784], "co": [41, 42, 53, 55, 76, 237, 242, 244, 285, 507, 589, 591, 755, 766, 784, 791, 797], "sin": [41, 53, 55, 76, 237, 242, 244, 285, 507, 589, 591, 761, 784], "tan": [41, 53, 76, 494, 589, 591, 769, 772, 773, 776, 777, 784], "comp_fn": 41, "compile_graph": [41, 47, 784, 789], "expected_result": 41, "compiled_result": 41, "irrelev": [41, 765, 766, 768], "opeat": 41, "_layer": [41, 784], "net": [41, 46, 47, 784, 789, 797, 798], "compiled_net": 41, "proceed": 42, "pypi": [42, 44, 47, 756, 757, 780, 792], "pkg": [42, 44, 47], "wheel": [42, 44, 47, 796], "public": [42, 44, 47, 500, 591, 765, 775, 786, 806], "revis": [42, 44, 758], "tmp": [42, 44, 547, 569, 591], "req": [42, 44], "tabqrujw": 42, "command": [42, 44, 750, 753, 757, 760, 763, 765, 771, 793], "filter": [42, 44, 46, 54, 58, 77, 81, 308, 309, 349, 355, 375, 393, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732, 750, 762, 765], "quiet": [42, 44], "resolv": [42, 44, 54, 67, 246, 367, 482, 483, 589, 596, 604, 657, 712, 713, 718, 720, 758, 763, 766, 771, 784], "commit": [42, 44, 752, 754, 756, 760, 768, 779], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 42, "metadata": [42, 44, 47, 776], "setup": [42, 44, 47, 752, 757, 758, 763, 765], "satisfi": [42, 44, 47, 54, 355, 356, 377, 404, 768], "core": [42, 43, 44, 46, 47, 54, 77, 94, 203, 356, 407, 416, 419, 588, 757, 767, 779, 789, 796, 801, 802, 803, 804, 808, 810], "einop": [42, 44, 47, 55, 78, 503, 504, 505, 591, 797], "py3": [42, 44, 47], "whl": [42, 43, 44, 47], "kb": [42, 44, 47], "psutil": [42, 44, 47], "cp39": [42, 44], "manylinux_2_12_x86_64": [42, 44], "manylinux2010_x86_64": [42, 44], "manylinux_2_17_x86_64": [42, 44], "manylinux2014_x86_64": [42, 43, 44], "mb": [42, 44, 47, 765], "eta": [42, 44, 47], "00": [42, 44, 47, 54, 55, 77, 78, 82, 244, 303, 349, 355, 376, 382, 386, 387, 507, 550, 589, 591, 594, 595, 628, 651, 771, 779], "termcolor": [42, 44, 47, 71, 97], "tar": [42, 43, 44, 47], "gz": [42, 43, 44, 47], "colorama": [42, 44], "py2": [42, 44], "nvidia": [42, 44, 47, 807, 808], "495": [42, 44], "nvidia_ml_pi": [42, 44], "diskcach": 42, "pypars": [42, 44, 47], "ivy_cor": [42, 44, 47, 757], "1338326": 42, "sha256": [42, 44, 47], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 42, "ephem": [42, 44], "cach": [42, 44, 47, 194, 497, 588, 591, 741, 771, 773, 776, 779], "njrc_e6b": 42, "07": [42, 44, 56, 60, 76, 79, 83, 86, 227, 260, 264, 283, 355, 386, 562, 572, 573, 575, 576, 577, 578, 589, 591, 592, 595, 652, 653, 695, 733, 736, 788], "2e": [42, 44], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [42, 44], "4845": [42, 44], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 42, "root": [42, 43, 44, 47, 53, 76, 286, 589, 730, 753, 757, 758, 763, 777, 787], "b6": [42, 44], "0d": [42, 44], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [42, 44], "successfulli": [42, 44, 47, 734, 757, 761], "attempt": [42, 44, 47, 757, 781, 792], "uninstal": [42, 44, 47], "cannot": [42, 43, 44, 47, 54, 289, 427, 428, 429, 589, 758, 760, 762, 766, 777, 784, 789, 809], "vnd": [42, 44, 47], "json": [42, 44, 47, 71, 752, 757, 787], "psst": 42, "cv2": [42, 44, 46, 787], "pickl": [42, 43, 71, 734, 764, 787], "imageio": 42, "urllib": [42, 47], "_src": 42, "xla_bridg": 42, "tpu": [42, 193, 199, 210, 215, 588, 767, 803, 806], "fall": [42, 733, 734, 736, 756, 766, 783], "tf_cpp_min_log_level": 42, "rerun": 42, "info": [42, 747, 750, 763, 769, 771], "mkdir": [42, 43, 44, 757, 765], "perceiv": [42, 43], "touch": 42, "io_processor": 42, "position_encod": 42, "absl": 42, "jmp": 42, "tabul": 42, "2023": 42, "04": [42, 43, 50, 56, 70, 74, 79, 106, 107, 138, 164, 244, 540, 572, 573, 578, 583, 586, 587, 589, 591, 592, 757, 779], "185": [42, 70], "199": [42, 225, 589], "111": [42, 598, 691], "133": [42, 58, 499, 591, 617], "108": [42, 593, 604, 617, 714], "109": [42, 59, 594, 629], "connect": [42, 732, 757, 788, 789, 797, 801], "443": [42, 284, 589], "sent": 42, "await": 42, "respons": [42, 758, 765, 766], "200": [42, 78, 81, 233, 355, 378, 379, 511, 535, 589, 591, 744, 787], "ok": [42, 757], "length": [42, 43, 50, 54, 60, 61, 71, 77, 83, 84, 94, 97, 121, 134, 139, 300, 305, 308, 309, 319, 325, 347, 349, 352, 355, 356, 358, 362, 365, 377, 382, 383, 386, 387, 388, 398, 408, 415, 447, 455, 469, 474, 571, 586, 591, 593, 594, 595, 596, 602, 619, 642, 643, 651, 661, 704, 730, 732, 779, 787], "29359": 42, "29k": 42, "plain": 42, "67k": 42, "002": 42, "110": 42, "30179": 42, "47k": 42, "8107": 42, "9k": 42, "92k": 42, "functool": [42, 770, 777, 786], "itertool": 42, "matplotlib": [42, 43, 44, 47], "pyplot": [42, 43, 44, 47], "plt": [42, 43, 44, 47], "preprocessor": 42, "vector": [42, 50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 139, 355, 356, 358, 362, 367, 377, 403, 407, 413, 415, 418, 447, 449, 451, 469, 481, 499, 503, 520, 571, 586, 591, 593, 594, 617, 619, 622, 626, 627, 629, 632, 637, 642, 643, 647, 648, 649, 650, 732, 791, 803], "perceiverbackbon": 42, "input_preprocessor": 42, "_input_preprocessor": 42, "_encod": 42, "is_train": 42, "po": 42, "input_mask": 42, "network_input_is_1d": 42, "_input_is_1d": 42, "queri": [42, 43, 58, 71, 81, 197, 211, 513, 539, 588, 591, 593, 619, 620, 732, 764, 766, 786, 803], "decod": [42, 787], "cross": [42, 44, 59, 60, 82, 83, 594, 595, 651, 652, 653, 750, 765, 766], "attend": [42, 593, 619], "encoder_queri": 42, "latent": [42, 597, 672], "imagepreprocessor": 42, "deal": [42, 754, 767, 773, 775, 777, 792], "image_s": 42, "fourier_pos_config": 42, "position_encoding_typ": 42, "fourier": [42, 54, 77, 355, 377, 382, 383, 387, 388, 398, 507, 591], "fourier_position_encoding_kwarg": 42, "concat_po": 42, "max_resolut": 42, "num_band": [42, 55, 78, 507, 591], "sine_onli": 42, "prep_typ": 42, "spatial_downsampl": 42, "cross_attend_widening_factor": 42, "cross_attention_shape_for_attn": 42, "kv": 42, "dropout_prob": 42, "num_block": 42, "num_cross_attend_head": 42, "num_self_attend_head": 42, "num_self_attends_per_block": 42, "num_z_channel": 42, "self_attend_widening_factor": 42, "use_query_residu": 42, "z_index_dim": 42, "z_pos_enc_init_scal": 42, "02": [42, 50, 55, 56, 62, 63, 76, 79, 86, 138, 224, 225, 264, 355, 376, 386, 387, 549, 550, 572, 573, 578, 586, 589, 591, 592, 595, 599, 600, 651, 692, 695, 696, 778], "perceiver_backbon": [42, 750], "perceiverencod": 42, "At": [42, 756, 757, 758, 760, 779, 780, 797, 803], "almost": [42, 755, 764, 778, 785, 787, 796], "thankfulli": [42, 779], "perceiver_io": [42, 43], "imagenet_fourier_position_encod": 42, "pystat": 42, "imagenet_checkpoint": 42, "rb": 42, "ckpt": 42, "read": [42, 44, 54, 61, 71, 73, 77, 84, 134, 358, 437, 586, 596, 661, 756, 757, 763, 765, 779, 781, 782, 803], "173": [42, 59, 594, 629], "194": 42, "217": [42, 770], "125": [42, 54, 59, 82, 233, 328, 352, 357, 420, 589, 594, 647], "177": [42, 44], "193776248": 42, "185m": 42, "octet": 42, "184": 42, "80m": 42, "144mb": 42, "144": 42, "mean_rgb": 42, "stddev_rgb": 42, "im": 42, "denorm": 42, "resize_and_center_crop": 42, "crop": [42, 54, 77, 355, 383, 388, 398], "center": [42, 731], "image_height": [42, 44, 750], "image_width": [42, 750], "padded_center_crop_s": 42, "minimum": [42, 53, 54, 55, 61, 64, 67, 76, 77, 78, 84, 87, 90, 219, 247, 274, 317, 328, 349, 352, 358, 367, 447, 479, 483, 540, 541, 549, 550, 562, 563, 589, 591, 596, 601, 604, 654, 700, 715, 717, 781, 800, 806, 810], "offset_height": 42, "offset_width": 42, "crop_window": 42, "inter_cub": 42, "ye": [42, 792], "dummy_input": [42, 750], "transpili": 42, "torch_perceiver_backbon": 42, "quicker": 42, "perceiverioclassifi": [42, 750], "max_pool": [42, 750], "Of": [42, 761, 776, 777, 787, 808, 809], "cours": [42, 757, 758, 760, 761, 768, 776, 777, 782, 787, 792, 808, 809], "468": 42, "huggingface_hub": 42, "dill": 42, "multiprocess": [42, 71, 97, 591, 787, 792], "py39": 42, "132": [42, 77], "pyarrow": 42, "xxhash": 42, "212": [42, 54, 58, 77, 341, 352, 617], "panda": [42, 44, 797], "pyyaml": 42, "fsspec": 42, "2021": [42, 54, 77, 344, 352, 750], "aiohttp": 42, "tqdm": [42, 44, 750], "async": 42, "timeout": [42, 71, 97, 544, 566, 591, 781], "0a3": 42, "async_timeout": 42, "frozenlist": 42, "manylinux_2_5_x86_64": [42, 47], "manylinux1_x86_64": [42, 47], "158": 42, "attr": 42, "aiosign": 42, "charset": 42, "multidict": 42, "114": [42, 355, 376, 386], "yarl": 42, "264": 42, "extens": [42, 53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 481, 586, 587, 589, 594, 596, 601, 602, 603, 604, 605, 621, 622, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 655, 657, 658, 659, 661, 662, 664, 665, 669, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 750, 752, 755, 757, 758, 769, 771, 779, 800, 803, 810], "filelock": 42, "certifi": 42, "2017": [42, 593, 619], "2022": [42, 43], "idna": 42, "urllib3": 42, "pytz": 42, "2020": [42, 760, 803], "dateutil": [42, 47], "six": [42, 47, 757, 782], "wikiart": 42, "paint": [42, 750, 784, 796], "n_sampl": [42, 54, 77, 358, 450], "10000": [42, 44, 50, 73, 138, 586], "huggan": 42, "split": [42, 43, 44, 48, 53, 54, 61, 70, 71, 76, 77, 84, 104, 106, 109, 112, 210, 211, 212, 290, 330, 337, 358, 433, 442, 459, 503, 530, 583, 588, 589, 591, 593, 596, 606, 613, 614, 666, 728, 732, 750, 751, 758, 765, 783, 784, 792, 810], "wiki_art": 42, "gib": 42, "unknown": 42, "total": [42, 44, 54, 67, 71, 77, 90, 97, 134, 214, 317, 318, 324, 349, 352, 586, 588, 601, 604, 702, 719, 721, 750, 751, 758, 766, 767, 768, 779, 782, 787, 788, 792, 798], "huggan___parquet": 42, "36ee951979f9b56c": 42, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 42, "parquet": 42, "subsequ": [42, 741, 757, 761, 765, 766, 768, 772, 773, 776, 779, 788, 804], "reus": [42, 50, 73, 77, 84, 123, 427, 428, 433, 435, 437, 438, 439, 446, 459, 657, 658, 659, 661, 663, 664, 666, 668, 770, 779, 808], "curl": [42, 757], "row": [42, 54, 77, 132, 146, 315, 349, 356, 358, 365, 367, 408, 417, 439, 445, 460, 474, 480, 481, 586, 594, 600, 601, 633, 641, 642, 647, 693, 702, 731], "2fwikiart": 42, "receiv": [42, 46, 94, 494, 530, 591, 597, 670, 671, 672, 732, 758, 766, 767, 779, 782], "xferd": 42, "averag": [42, 44, 54, 56, 60, 77, 79, 83, 355, 357, 367, 369, 370, 373, 374, 375, 421, 422, 423, 424, 481, 572, 573, 578, 592, 593, 595, 597, 619, 651, 670, 671, 731, 732], "dload": 42, "upload": [42, 779], "spent": [42, 798], "25936": 42, "278k": 42, "abstract_expression": 42, "action_paint": 42, "analytical_cub": 42, "art_nouveau": 42, "baroqu": 42, "color_field_paint": 42, "contemporary_r": 42, "cubism": 42, "early_renaiss": 42, "expression": 42, "fauvism": 42, "high_renaiss": 42, "impression": 42, "mannerism_late_renaiss": 42, "naive_art_primitiv": 42, "new_real": 42, "northern_renaiss": 42, "pointil": 42, "pop_art": 42, "post_impression": 42, "realism": 42, "rococo": 42, "romantic": 42, "symbol": [42, 744, 756, 757, 803, 804], "synthetic_cub": 42, "ukiyo_": 42, "custom": [42, 54, 77, 302, 346, 347, 354, 744, 753, 765, 770, 774, 778, 779, 782, 788, 797, 803, 807, 808, 809], "hugginfac": 42, "customdataset": 42, "__len__": [42, 764], "__getitem__": [42, 71, 764], "idx": [42, 43, 44, 493, 591, 750, 767, 786], "random_split": 42, "224x224": 42, "train_siz": 42, "val_siz": 42, "test_siz": 42, "dataset_train": 42, "dataset_v": 42, "dataset_test": 42, "dataloader_train": 42, "batch_siz": [42, 44, 47, 54, 58, 63, 77, 81, 86, 355, 357, 373, 374, 375, 391, 392, 393, 394, 424, 593, 600, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 693, 750, 787], "dataloader_v": 42, "dataloader_test": 42, "batch": [42, 43, 44, 54, 55, 59, 71, 77, 78, 82, 210, 211, 355, 361, 369, 370, 371, 377, 390, 461, 462, 463, 507, 510, 511, 571, 588, 591, 593, 594, 597, 599, 617, 619, 631, 649, 670, 671, 672, 692, 732, 735, 750, 764, 773, 778, 787, 801], "train_featur": 42, "train_label": 42, "imshow": [42, 43], "crossentropyloss": [42, 733], "sgd": [42, 736, 803], "lr": [42, 56, 79, 494, 573, 576, 578, 579, 580, 591, 592, 736, 787, 788], "001": [42, 53, 54, 62, 74, 77, 79, 164, 262, 279, 322, 333, 352, 573, 587, 589, 592, 599, 692, 787, 788], "momentum": [42, 54, 77, 361, 461, 463, 735, 797], "train_step": 42, "running_loss": [42, 44, 750], "last_loss": 42, "training_load": 42, "intra": 42, "report": [42, 756, 779], "zero_grad": 42, "backward": [42, 54, 68, 77, 91, 281, 355, 377, 382, 383, 387, 388, 398, 589, 594, 605, 622, 648, 722, 723, 732, 780, 792], "adjust": [42, 67, 90, 356, 417, 604, 719, 721, 741], "999": [42, 56, 76, 79, 290, 572, 573, 578, 580, 589, 592, 736, 788], "epoch_numb": 42, "best_vloss": 42, "1_000_000": 42, "avg_loss": 42, "running_vloss": 42, "vdata": 42, "vinput": 42, "vlabel": 42, "voutput": 42, "vloss": 42, "avg_vloss": 42, "best": [42, 530, 591, 750, 751, 755, 756, 757, 758, 759, 765, 766, 770, 779, 780, 793, 806, 807], "model_path": 42, "model_": 42, "state_dict": 42, "highest": [42, 54, 63, 77, 86, 310, 349, 600, 694, 766], "energi": 42, "accuraci": [42, 44, 47, 766], "augment": 42, "mayb": [42, 43, 49, 750, 757, 765, 784, 786], "meta": [42, 670, 671, 672, 761, 780, 803], "finetun": 42, "present": [43, 54, 71, 77, 322, 352, 361, 461, 462, 463, 756, 758, 764, 766, 767, 772, 776, 784, 796, 800, 801, 810], "percieverio": 43, "ai": [43, 801, 805], "highli": [43, 750, 803], "invit": [43, 756, 777, 782], "g4ar9q7dtn": 43, "step1": 43, "printf": 43, "8packag": 43, "share": [43, 71, 185, 587, 750, 762, 764, 768, 773, 775, 777, 778, 779, 782, 784, 797, 801, 802, 809], "googledr": 43, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 43, "file_id": 43, "drive": [43, 44], "uc": 43, "export": [43, 765, 802, 809], "id": [43, 54, 77, 195, 317, 318, 349, 588, 733, 734, 750, 752, 755, 757, 761, 763, 764, 771, 775, 779, 793], "tee": [43, 757], "file_id_wget_cmd": 43, "perl": 43, "pe": 43, "g": [43, 45, 46, 54, 63, 65, 67, 69, 77, 86, 92, 94, 150, 179, 192, 239, 252, 272, 279, 282, 355, 356, 362, 367, 391, 393, 419, 467, 468, 469, 470, 471, 482, 483, 587, 588, 589, 594, 598, 600, 602, 604, 627, 628, 633, 640, 642, 643, 649, 676, 680, 682, 685, 690, 694, 695, 696, 704, 705, 706, 707, 712, 713, 715, 717, 718, 720, 731, 751, 756, 757, 759, 760, 762, 763, 764, 775, 777, 779, 784, 792, 794, 798, 799], "uuid": 43, "anywai": [43, 761, 774, 777], "bin": [43, 54, 77, 367, 479, 484, 752, 757, 758, 760, 764], "bash": [43, 757, 758, 760], "step2": 43, "interpret": [43, 50, 54, 73, 77, 122, 123, 134, 140, 367, 481, 586, 765, 804], "sudo": [43, 757], "apt": [43, 757], "yf": 43, "step3": 43, "delet": [43, 758, 765], "xvzf": 43, "rm": [43, 45, 752, 753, 758], "step4": 43, "symlink": 43, "unzip": [43, 44], "fr": 43, "l": [43, 59, 76, 82, 266, 356, 403, 594, 621, 626, 627, 628, 632, 646, 758, 759], "d": [43, 54, 55, 58, 59, 61, 73, 77, 78, 81, 82, 84, 110, 138, 146, 179, 222, 239, 240, 272, 275, 315, 349, 355, 356, 358, 362, 365, 373, 374, 375, 382, 387, 391, 392, 393, 394, 396, 401, 414, 429, 433, 435, 438, 442, 455, 459, 467, 473, 495, 506, 583, 586, 587, 589, 593, 594, 596, 598, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 624, 625, 629, 633, 637, 647, 663, 676, 680, 681, 682, 685, 690, 691, 750, 751, 757, 759, 762, 763, 764, 775, 779, 782, 787, 797, 798, 799], "ln": 43, "sf": 43, "la": 43, "step5": 43, "regular": [43, 77, 356, 367, 414, 485, 594, 631, 757, 777, 803], "step6": 43, "ipkykernel": 43, "step7": 43, "engbjapanpython3": 43, "separ": [43, 54, 55, 77, 361, 462, 593, 619, 758, 761, 764, 765, 779, 784, 786, 787, 804, 808], "ipykernel": 43, "reconnect": 43, "sy": 43, "oct": 43, "gcc": [43, 801, 808], "lf": 43, "upgrad": 43, "cuda11": 43, "cudnn805": 43, "cp38": [43, 47], "helper": [43, 750, 763, 766, 770, 787, 794], "feedforward": 43, "prenorm": 43, "perceiveriospec": 43, "fetch": [43, 758, 760, 765], "ogbanugot": 43, "xmartlab": 43, "caffeflow": 43, "fetch_class": 43, "class_label": 43, "append": [43, 44, 54, 59, 71, 77, 231, 325, 352, 589, 594, 596, 625, 632, 657, 750, 765, 779, 784, 787], "ground_truth": 43, "127": [43, 51, 54, 59, 74, 77, 167, 341, 352, 587, 594, 629], "path_to_imag": 43, "get_imag": 43, "ax": [43, 48, 54, 59, 61, 64, 67, 68, 70, 77, 82, 84, 87, 90, 91, 96, 100, 107, 111, 212, 324, 325, 338, 345, 352, 353, 355, 358, 361, 367, 383, 388, 398, 446, 447, 453, 464, 486, 487, 488, 489, 490, 503, 571, 588, 591, 594, 596, 601, 604, 605, 622, 633, 641, 644, 645, 649, 656, 658, 659, 662, 664, 666, 669, 699, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 766, 768, 779, 780, 784, 786], "fig": [43, 44], "subplot": [43, 44], "spine": 43, "set_vis": 43, "bottom": [43, 503, 591, 756, 757, 765, 809], "tick_param": 43, "set_xticklabel": 43, "set_yticklabel": 43, "show_result": 43, "plot": [43, 750, 803], "along": [43, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 89, 90, 91, 94, 107, 111, 117, 137, 138, 212, 286, 289, 291, 317, 318, 324, 325, 338, 345, 349, 352, 353, 355, 356, 357, 358, 361, 367, 376, 382, 383, 386, 387, 388, 398, 416, 422, 432, 433, 434, 438, 439, 447, 452, 456, 464, 465, 466, 482, 483, 484, 486, 487, 488, 489, 490, 503, 510, 585, 586, 588, 589, 591, 594, 595, 596, 597, 600, 601, 603, 604, 605, 622, 637, 646, 648, 649, 651, 652, 653, 655, 658, 659, 660, 662, 663, 665, 667, 668, 670, 671, 672, 698, 699, 700, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 750, 756, 759, 768, 776, 780, 782, 784, 803], "figur": [43, 781], "figsiz": [43, 44], "listdir": [43, 44], "endswith": 43, "jpeg": [43, 44], "this_dir": 43, "dirnam": 43, "add_subplot": 43, "xtick": 43, "ytick": 43, "set_titl": [43, 44], "color": [43, 71, 97, 749], "green": [43, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 749, 756, 757, 758], "red": 43, "io": [43, 46, 757, 765], "perceiver_io_img_classif": 43, "normalize_imag": 43, "batch_shap": [43, 58, 63, 73, 81, 86, 132, 141, 586, 593, 594, 600, 618, 619, 620, 650, 693, 732, 782, 784, 786], "img_dim": 43, "queries_dim": 43, "learn_queri": 43, "load_weight": 43, "num_input_ax": 43, "network_depth": 43, "num_lat_att_per_lay": 43, "query_shap": 43, "num_fourier_freq_band": 43, "weight_fpath": 43, "pretrained_weight": 43, "isfil": 43, "noinspect": [43, 786], "pybroadexcept": 43, "from_disk_as_pickl": 43, "except": [43, 44, 47, 54, 55, 61, 63, 68, 71, 77, 78, 82, 86, 91, 153, 325, 342, 352, 362, 367, 468, 487, 488, 502, 520, 537, 552, 558, 587, 591, 594, 596, 600, 601, 605, 638, 655, 657, 665, 694, 695, 696, 702, 722, 723, 734, 750, 758, 759, 760, 761, 765, 766, 767, 769, 772, 776, 777, 780, 781, 782, 786, 792], "action": [43, 755, 765, 768, 771, 779], "fail": [43, 756, 757, 758, 760, 765, 766, 768, 771, 774, 776, 777, 778], "placehold": [43, 598, 680, 685, 690, 732, 758, 761, 772, 794], "pyunboundlocalvari": 43, "max_fourier_freq": 43, "random_uniform": [43, 47, 63, 86, 600, 767, 770, 779, 784, 788], "03": [43, 50, 53, 55, 56, 76, 79, 86, 138, 237, 262, 549, 550, 573, 578, 586, 589, 591, 592, 594, 595, 630, 651, 695], "817437": 43, "common_runtim": 43, "gpu_bfc_alloc": 43, "cc": 43, "orig_valu": 43, "tf_force_gpu_allow_growth": 43, "autograd": [43, 792], "declar": [43, 758], "_3r2_73j": 44, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 44, "1297564": 44, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 44, "le3bu3_v": 44, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 44, "third": [44, 94, 358, 434, 458, 594, 602, 642, 704, 763, 776, 792, 802, 803, 809], "parti": [44, 763, 792, 797, 802, 803, 809], "csv": [44, 750], "pd": 44, "mount": [44, 752, 753, 758], "mydriv": 44, "chdir": 44, "One": [44, 54, 55, 61, 63, 77, 78, 84, 86, 358, 427, 428, 429, 431, 447, 455, 504, 591, 596, 600, 661, 694, 761, 764, 766, 768, 773, 778, 779, 784, 786, 787], "kaggl": 44, "medium": 44, "articl": [44, 750, 771], "insert": [44, 54, 64, 77, 87, 358, 424, 432, 596, 598, 601, 603, 657, 677, 678, 699, 710, 765, 771], "www": 44, "your_kaggle_usernam": 44, "competit": 44, "digit": 44, "recogn": 44, "zip": [44, 784], "readabl": [44, 761, 764, 770, 771, 772, 779, 780, 786, 787], "chmod": [44, 757, 765], "600": [44, 78, 81, 355, 378, 379, 511, 765], "recent": [44, 747, 757, 758, 779, 796, 797], "modifi": [44, 54, 71, 77, 94, 358, 367, 444, 447, 452, 488, 756, 757, 758, 760, 762, 763, 766, 767, 769, 771, 773, 776, 778, 779, 780, 784], "forc": [44, 763, 765, 767], "archiv": [44, 757], "inflat": [44, 766], "sample_submiss": 44, "frame": [44, 54, 77, 310, 349, 791, 797, 803], "read_csv": 44, "later": [44, 71, 497, 591, 756, 771, 776, 779, 780, 803], "my": [44, 752, 765], "df": 44, "label_df": 44, "mod_train": 44, "drop": [44, 54, 77, 317, 349, 357, 358, 422, 455, 731, 732, 757, 792], "column": [44, 54, 59, 77, 82, 94, 132, 146, 315, 349, 356, 358, 365, 367, 403, 408, 417, 436, 438, 439, 443, 445, 474, 480, 481, 586, 594, 626, 627, 633, 639, 641, 642, 647, 731], "data_valu": 44, "test_data_valu": 44, "correct_label": 44, "train_path": 44, "makedir": 44, "valid_path": 44, "28x28": 44, "pic": 44, "pictur": [44, 750, 756, 784, 796], "int8": [44, 51, 63, 73, 74, 86, 134, 160, 165, 167, 168, 172, 300, 347, 586, 587, 694, 766, 779], "new_img": [44, 46], "builder": [44, 750, 753, 790, 792, 794], "batchwis": 44, "subset": [44, 761, 765, 769, 772, 775, 777, 779, 784, 803], "goe": [44, 358, 431, 759, 762, 771, 776, 782], "seed": [44, 45, 54, 58, 63, 65, 71, 77, 81, 86, 313, 314, 349, 356, 362, 407, 416, 419, 467, 468, 469, 470, 471, 593, 600, 602, 616, 693, 694, 695, 696, 698, 704, 729, 731, 774, 778, 779], "seed_valu": [44, 71, 600, 697], "randomize_dataset": 44, "shuffl": [44, 54, 63, 71, 77, 86, 469, 600], "create_dataset": 44, "num_examples_per_class": 44, "img_arrai": 44, "class_nam": 44, "dir": [44, 752, 787], "img_path": 44, "imread": [44, 46, 787], "imread_grayscal": 44, "generate_batch": [44, 750], "dataset_s": [44, 750], "y_train": [44, 750], "ivyerror": [44, 745, 750, 770], "smaller": [44, 54, 61, 67, 77, 84, 297, 320, 333, 347, 352, 355, 367, 383, 388, 398, 481, 482, 483, 503, 591, 596, 604, 654, 662, 712, 713, 718, 720, 750, 758, 770, 784], "yield": [44, 64, 311, 312, 349, 358, 447, 601, 703, 750, 765], "x_batch_inst": 44, "form": [44, 46, 49, 50, 54, 59, 71, 73, 82, 93, 94, 122, 123, 140, 144, 145, 303, 306, 316, 322, 349, 352, 356, 358, 403, 411, 434, 443, 447, 460, 493, 553, 555, 586, 591, 593, 594, 598, 621, 623, 625, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 674, 685, 731, 751, 756, 773, 779, 782, 788, 789, 797, 803, 804, 809], "intialis": 44, "num_epoch": [44, 750], "inherit": [44, 761, 764, 770, 786, 792, 794], "inform": [44, 46, 51, 54, 56, 74, 79, 164, 167, 310, 349, 493, 581, 587, 591, 592, 597, 672, 750, 755, 756, 757, 758, 760, 764, 765, 770, 773, 774, 776, 778, 779, 806], "ivynet": [44, 750], "h_w": [44, 750], "input_channel": [44, 732, 750, 784, 788], "output_channel": [44, 732, 750, 788], "gelu": [44, 45, 48, 70, 583, 728, 750], "image_widht": 44, "start_dim": [44, 54, 77, 358, 437, 750], "end_dim": [44, 54, 77, 358, 437, 750], "gpu_is_avail": [44, 588, 750], "120": [44, 67, 90, 97, 594, 637, 712, 750], "model_nam": [44, 750], "__name__": [44, 45, 47, 558, 591, 750, 770], "lower": [44, 50, 53, 54, 59, 63, 76, 77, 82, 86, 132, 144, 270, 304, 310, 315, 316, 349, 367, 484, 485, 490, 586, 589, 594, 600, 621, 627, 628, 635, 696, 730, 731, 750, 758, 766, 768, 777, 779, 784, 792, 794, 799, 800, 801, 803, 804, 809, 810], "heavi": [44, 757, 777, 778, 782, 804], "lift": [44, 778, 804], "num_correct": [44, 750], "y_pred": [44, 750], "cross_entropi": [44, 60, 83, 595, 653, 750, 764, 773, 776], "epoch_loss": [44, 750], "field": [44, 59, 65, 82, 88, 356, 358, 403, 458, 594, 602, 626, 627, 639, 640, 642, 704, 705, 706, 750, 765, 791, 801, 809], "training_accuraci": [44, 750], "train_loss": [44, 750], "train_correct": [44, 750], "train_loop": [44, 750], "leav": [44, 49, 54, 72, 74, 76, 77, 78, 81, 82, 84, 90, 97, 164, 167, 239, 295, 296, 358, 432, 437, 449, 450, 451, 464, 465, 466, 482, 483, 488, 507, 554, 596, 598, 612, 620, 625, 642, 656, 660, 665, 667, 668, 673, 674, 683, 684, 685, 686, 712, 713, 744, 750, 756, 764, 765, 766, 768, 769, 772, 773, 776, 777, 779, 787, 788], "xbatch": [44, 750], "ybatch": [44, 750], "to_devic": [44, 52, 75, 195, 588, 750], "entropi": [44, 60, 83, 595, 651, 652, 653, 750], "hot": [44, 50, 73, 141, 586, 750], "ybatch_encod": [44, 750], "one_hot": [44, 50, 73, 586, 750, 789], "loss_prob": [44, 750], "ret_grad_idx": [44, 574, 592, 775], "xs_grad_idx": [44, 574, 592, 775], "batch_loss": [44, 750], "set_descript": [44, 750], "set_postfix": [44, 750], "accuracy_percentag": [44, 750], "naverag": [44, 750], "6f": [44, 750], "_train_summari": [44, 750], "writer": [44, 750], "writerow": [44, 750], "157it": 44, "01": [44, 50, 54, 55, 56, 77, 78, 79, 82, 86, 138, 264, 282, 283, 303, 309, 333, 349, 355, 376, 386, 387, 507, 549, 550, 572, 573, 578, 586, 589, 591, 592, 594, 597, 600, 628, 672, 695, 696, 762, 789], "06it": 44, "475401": 44, "11it": 44, "081436": 44, "13it": 44, "0187": 44, "029279": 44, "0324": 44, "008382": 44, "07it": 44, "00456": 44, "003816": 44, "82it": 44, "00277": 44, "002179": 44, "05it": 44, "00175": 44, "001569": 44, "00147": 44, "001235": 44, "09it": 44, "00128": 44, "001005": 44, "106": 44, "10it": 44, "00112": 44, "000837": 44, "129": 44, "12it": 44, "000989": 44, "000709": 44, "145": 44, "000873": 44, "000606": 44, "168": [44, 498, 591], "08it": 44, "000774": 44, "000524": 44, "000688": 44, "000455": 44, "000613": 44, "000398": 44, "05": [44, 50, 53, 54, 56, 62, 76, 77, 79, 85, 138, 264, 309, 320, 333, 349, 352, 361, 461, 462, 463, 518, 540, 562, 572, 573, 578, 586, 589, 591, 592, 594, 599, 633, 692, 731, 735, 778, 779], "000547": 44, "000350": 44, "205": 44, "000488": 44, "000308": 44, "218": 44, "000437": 44, "000273": 44, "000391": 44, "000243": 44, "238": [44, 246, 589], "98it": 44, "000351": 44, "000216": 44, "260": 44, "plot_summari": 44, "seaborn": 44, "whitegrid": 44, "ax1": 44, "ax2": 44, "nrow": 44, "ncol": 44, "legend": [44, 756], "fontweight": 44, "bold": 44, "set_xlabel": 44, "set_ylabel": 44, "tight_layout": 44, "savefig": 44, "summary_plot": 44, "png": [44, 46, 47, 787], "close": [44, 59, 244, 262, 282, 303, 349, 589, 594, 596, 642, 657, 756, 757, 758, 766, 769, 777, 782, 803], "save_weight": [44, 734], "model_param": 44, "ivynet_weight": 44, "hdf5": [44, 71, 734, 787], "deitimageprocessor": 45, "tfdeitforimageclassif": 45, "tfdeitforimageclassificationwithteach": 45, "head": [45, 46, 593, 619, 732, 750, 755, 757, 765, 777], "distillation_classifi": 45, "cls_classifi": 45, "randomli": [45, 355, 378, 379, 380, 593, 616, 732], "henc": [45, 65, 222, 322, 352, 589, 596, 602, 657, 704, 705, 706, 707, 741, 757, 764, 765, 766, 776, 779], "reproduc": [45, 58, 81, 593, 616, 754, 760], "set_random_se": 45, "facebook": 45, "distil": [45, 804], "patch16": 45, "outputs_from_original_model": 45, "predicted_class_idx": 45, "architectur": [45, 750, 757, 789, 792, 801, 802, 803, 806, 807, 808], "bertforsequenceclassif": 45, "bertforpretrain": 45, "NOT": [45, 267, 589, 744, 756], "probabl": [45, 54, 58, 60, 63, 77, 81, 83, 86, 355, 362, 367, 378, 379, 380, 467, 481, 484, 488, 593, 595, 600, 616, 619, 620, 651, 693, 731, 732, 750, 779, 793, 798], "ptarmigan": 45, "rf": [45, 758], "moduleconvert": [45, 729, 734], "mc": 45, "from_keras_modul": [45, 729], "compiled_func": 45, "return_graph": [45, 47], "compiled_output": 45, "diverg": [45, 246, 589], "_all_funct": [45, 47], "convert_to_tensor_v2_with_dispatch": 45, "transpose_v2": 45, "convolution_v2": 45, "bias_add": 45, "binary_op_wrapp": 45, "cast": [45, 51, 53, 54, 59, 67, 74, 76, 82, 151, 154, 179, 273, 367, 482, 483, 587, 589, 594, 604, 649, 712, 713, 718, 720, 773, 778, 784], "moments_v2": 45, "batch_norm": [45, 47, 54, 77, 361], "tensordot": [45, 59, 82, 594, 766], "softmax_v2": 45, "_slice_help": 45, "save_to_disk": [45, 47, 734], "12265048989200113": 45, "11038777417100028": 45, "1167045795539998": 45, "ivy_api_kei": 46, "combo": [46, 787], "permit": [46, 761, 772, 777, 779, 782], "usabl": [46, 750, 772, 780], "neither": [46, 222, 239, 246, 272, 589, 594, 644, 765, 777, 782], "nor": [46, 222, 239, 246, 272, 589, 765, 777, 807], "specifc": 46, "invoc": 46, "represent": [46, 54, 55, 71, 77, 78, 97, 149, 150, 164, 167, 192, 193, 219, 222, 229, 232, 234, 239, 246, 269, 272, 274, 289, 307, 330, 334, 339, 343, 349, 352, 493, 554, 584, 587, 588, 589, 591, 732, 791, 801, 802, 804, 808, 809], "opt": [46, 757, 762, 766, 776, 779, 782], "externally_link": 46, "logo": 46, "patch": [46, 290, 589, 766, 803], "cv2_imshow": 46, "envrion": 46, "canni": 46, "original_img": 46, "fn_arg": 46, "dilate_edg": 46, "morphologi": 46, "dilat": [46, 54, 58, 77, 81, 355, 358, 391, 392, 393, 396, 397, 447, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732], "hk_model": 46, "resnet18": [46, 47], "keras_model": 46, "count": [46, 54, 61, 65, 68, 73, 77, 84, 88, 91, 134, 205, 324, 352, 358, 367, 458, 479, 484, 586, 588, 594, 596, 602, 605, 622, 648, 655, 658, 704, 705, 722, 723, 763, 764, 768, 787], "odsc": 46, "talk": [46, 808], "networkx": 47, "228": 47, "352": [47, 81, 593, 617, 770], "nvidia_ml_py3": 47, "19190": 47, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 47, "b9": 47, "b1": 47, "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 47, "cycler": 47, "fonttool": 47, "965": 47, "pillow": 47, "kiwisolv": 47, "show_graph": [47, 734], "to_ivy_modul": [47, 729, 789], "image_dim": 47, "v0": [47, 788], "urlerror": 47, "dev_str": 47, "comp_network": 47, "time_chronolog": 47, "ret0_nc": 47, "ret1_nc": 47, "ret0_c": 47, "ret1_c": 47, "pytorch_vision_v0": 47, "distribut": [47, 54, 60, 63, 77, 83, 86, 355, 356, 357, 362, 378, 379, 380, 407, 416, 419, 422, 424, 467, 468, 469, 470, 471, 595, 600, 651, 652, 653, 693, 694, 695, 696, 698, 731, 732, 733, 734, 756, 757, 765, 767, 792, 803, 806], "distributed_c10d": 47, "262": 47, "reduce_op": 47, "deprec": 47, "reduceop": 47, "004645566477999864": 47, "0044566806820000695": 47, "attribut": [47, 71, 164, 165, 166, 167, 198, 199, 207, 508, 509, 587, 588, 591, 762, 763, 764, 766, 769, 770, 773, 774, 776, 777, 782, 785, 786, 787, 788], "max_pool2d": [47, 54, 77, 355, 374], "__iadd__": 47, "adaptive_avg_pool2d": [47, 54, 77, 355], "_arraywithactiv": [48, 96], "abc": [48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 100, 506, 591, 598, 691, 730, 731, 736, 744, 786], "_abc_impl": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "_abc": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "_abc_data": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "approxim": [48, 53, 54, 59, 70, 76, 77, 82, 94, 104, 220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 246, 260, 261, 262, 263, 277, 284, 285, 289, 290, 291, 331, 341, 352, 357, 422, 583, 589, 594, 635, 638, 728, 769, 777], "complex_mod": [48, 53, 70, 76, 104, 106, 109, 112, 290, 583, 589, 728, 774], "variant": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 572, 573, 576, 578, 579, 580, 581, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 638, 639, 640, 642, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 761, 768, 769, 782], "docstr": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 524, 526, 527, 529, 534, 535, 549, 550, 551, 552, 554, 556, 557, 570, 571, 572, 573, 576, 578, 579, 580, 581, 586, 587, 589, 591, 594, 596, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 755, 756, 759, 763, 771, 772, 773, 774, 777, 780], "liter": [48, 53, 54, 59, 70, 76, 77, 82, 104, 106, 109, 112, 290, 355, 356, 358, 376, 386, 390, 407, 411, 416, 419, 447, 583, 589, 594, 603, 633, 649, 710, 728, 782], "magnitud": [48, 53, 70, 76, 104, 106, 109, 112, 219, 222, 239, 246, 272, 290, 583, 589, 594, 642, 643, 728], "handle_complex_input": [48, 53, 70, 76, 104, 106, 109, 112, 290, 583, 589, 728, 774], "element": [48, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 74, 76, 77, 78, 81, 82, 84, 86, 87, 88, 90, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 129, 135, 136, 144, 145, 146, 162, 164, 167, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 315, 316, 317, 318, 320, 321, 322, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 349, 352, 355, 356, 358, 367, 368, 378, 379, 380, 383, 388, 391, 392, 393, 397, 398, 402, 403, 404, 427, 428, 429, 437, 438, 439, 441, 444, 454, 456, 458, 479, 480, 482, 483, 484, 485, 486, 487, 489, 491, 495, 498, 499, 510, 511, 527, 529, 549, 550, 552, 556, 557, 583, 586, 589, 591, 593, 594, 596, 598, 600, 601, 602, 603, 604, 605, 616, 622, 624, 626, 627, 632, 637, 639, 640, 642, 646, 654, 657, 658, 659, 660, 661, 662, 663, 664, 673, 676, 682, 693, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 769, 778, 779, 782, 784, 807], "138": [48, 104, 583], "165": [48, 104, 583, 593, 617], "hardswish": [48, 70, 583, 728], "leaky_relu": [48, 70, 583], "alpha": [48, 53, 54, 70, 76, 77, 101, 106, 222, 288, 294, 305, 347, 349, 356, 362, 404, 468, 469, 470, 583, 589, 728, 772, 777, 778], "float": [48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 65, 67, 70, 73, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 90, 94, 96, 106, 112, 121, 122, 123, 130, 132, 134, 135, 136, 137, 138, 142, 143, 147, 151, 155, 159, 164, 168, 172, 178, 179, 182, 188, 197, 206, 210, 211, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 303, 304, 305, 306, 308, 309, 310, 320, 321, 327, 328, 333, 335, 336, 339, 340, 341, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 378, 379, 380, 397, 400, 403, 404, 406, 416, 418, 419, 420, 423, 436, 454, 461, 462, 463, 466, 467, 468, 469, 470, 471, 481, 482, 483, 484, 489, 490, 497, 498, 499, 507, 516, 540, 541, 544, 549, 550, 570, 572, 573, 576, 578, 579, 580, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 616, 619, 620, 621, 623, 626, 627, 628, 630, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 646, 649, 651, 652, 653, 670, 671, 672, 679, 692, 695, 696, 702, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 728, 731, 732, 735, 736, 760, 764, 766, 769, 770, 772, 773, 775, 776, 778, 779, 780, 782, 784, 786, 788], "slope": [48, 54, 70, 77, 106, 294, 297, 347, 583, 728], "neg": [48, 53, 54, 59, 61, 63, 68, 70, 76, 77, 82, 84, 86, 91, 94, 106, 109, 112, 121, 132, 134, 146, 239, 246, 253, 254, 272, 273, 277, 281, 286, 304, 315, 317, 349, 356, 362, 401, 407, 411, 471, 583, 586, 589, 594, 596, 600, 605, 622, 624, 642, 646, 648, 649, 655, 657, 658, 662, 695, 722, 723, 728, 764, 776], "leaki": [48, 70, 106, 583, 728], "log_softmax": [48, 70, 583], "0719": [48, 70, 107], "221": [48, 107], "mish": [48, 70, 583, 728], "30340147": [48, 108, 583], "86509842": [48, 70, 108, 583], "269": [48, 110], "731": [48, 110], "881": [48, 53, 76, 110, 225, 238, 278, 589], "422": [48, 111, 583], "155": [48, 81, 111, 583, 593, 617], "softplu": [48, 70, 583, 728, 782], "beta": [48, 54, 62, 70, 77, 85, 112, 305, 308, 309, 349, 356, 357, 362, 404, 423, 469, 470, 583, 599, 692, 728, 782], "threshold": [48, 53, 54, 70, 76, 77, 112, 270, 271, 302, 321, 347, 352, 357, 358, 420, 423, 454, 583, 589, 728, 782], "3461": [48, 70, 112, 583], "6491": [48, 70, 112, 583], "535": [48, 70, 112, 583, 770], "_to_ivi": 49, "_to_n": 49, "to_ignor": [49, 69, 92, 598, 684, 685], "args_to_ivi": 49, "include_deriv": [49, 72, 598, 674, 685], "nest": [49, 71, 72, 97, 100, 242, 525, 554, 571, 574, 589, 591, 592, 597, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 730, 733, 734, 736, 761, 763, 764, 773, 775, 780, 787, 788, 792, 794, 803], "unchang": [49, 53, 355, 358, 398, 437, 593, 616], "deriv": [49, 50, 54, 56, 72, 73, 77, 79, 131, 136, 143, 148, 304, 308, 326, 349, 352, 572, 573, 576, 577, 578, 579, 580, 586, 592, 597, 598, 672, 674, 685, 734, 736, 737, 766, 767, 786, 788], "word": [49, 121, 358, 440, 586, 600, 696, 729, 732, 764, 776, 777, 794], "args_to_n": [49, 776], "cont_inplac": 49, "decid": [49, 71, 598, 673, 674, 683, 684, 685, 750, 756, 757, 766, 782], "to_ivi": [49, 72, 598, 686, 776], "leaf": [49, 71, 78, 90, 97, 506, 598, 683, 684, 686, 713, 764, 773, 787], "travers": [49, 72, 598, 677, 685, 764, 766, 770, 784], "lowest": [49, 54, 63, 72, 77, 86, 367, 484, 598, 600, 685, 694, 773, 792, 794, 800, 804, 808], "search": [49, 54, 72, 77, 699, 700, 755, 757, 764, 768, 779, 780, 796], "_arraywithcr": [50, 96], "boolean": [50, 51, 53, 54, 55, 61, 64, 67, 71, 73, 74, 76, 77, 78, 84, 87, 90, 96, 97, 118, 120, 122, 123, 129, 135, 151, 167, 169, 171, 172, 175, 191, 201, 209, 215, 229, 230, 231, 232, 233, 234, 266, 267, 268, 269, 333, 352, 356, 358, 407, 416, 419, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 492, 495, 506, 513, 516, 517, 521, 522, 523, 524, 525, 526, 527, 536, 539, 542, 543, 545, 546, 570, 585, 586, 587, 588, 589, 591, 596, 597, 598, 601, 604, 657, 658, 659, 661, 663, 664, 666, 668, 670, 671, 683, 701, 702, 703, 715, 717, 735, 764, 766, 773, 777, 779, 782], "never": [50, 54, 61, 73, 77, 84, 123, 358, 427, 428, 429, 433, 435, 437, 438, 439, 442, 446, 453, 459, 513, 591, 596, 657, 658, 659, 661, 663, 664, 666, 668, 758, 766, 776, 777, 779], "valueerror": [50, 61, 73, 77, 84, 88, 123, 355, 358, 388, 398, 427, 428, 433, 435, 437, 438, 439, 446, 452, 459, 596, 657, 658, 659, 661, 663, 664, 666, 668, 707, 745, 770], "buffer": [50, 73, 77, 84, 123, 134, 427, 428, 433, 435, 437, 438, 439, 446, 459, 586, 657, 658, 659, 661, 663, 664, 666, 668, 734, 776, 792], "nativedtyp": [50, 51, 54, 58, 59, 63, 64, 67, 73, 77, 82, 86, 87, 90, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 173, 175, 177, 181, 191, 303, 304, 305, 306, 307, 308, 309, 319, 324, 338, 349, 352, 362, 367, 467, 468, 469, 470, 471, 481, 482, 483, 484, 487, 489, 586, 587, 593, 594, 600, 601, 603, 604, 616, 649, 694, 695, 696, 699, 700, 710, 712, 713, 718, 720, 731, 766, 767, 772, 780, 784], "nativedevic": [50, 52, 54, 63, 73, 75, 77, 86, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 193, 194, 195, 196, 197, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 303, 304, 315, 349, 362, 467, 468, 470, 471, 586, 588, 600, 693, 694, 695, 696, 731, 736, 737, 766, 767, 770, 772, 780], "39999998": [50, 122, 123, 586, 602, 705], "5999999": [50, 81, 122, 123, 586, 593, 616, 620], "0999999": [50, 67, 122, 123, 335, 352, 586, 716], "10000038": [50, 122, 123, 586], "90786433e": [50, 122, 123, 586], "310": [50, 122, 123, 586], "copy_arrai": [50, 73, 586], "to_ivy_arrai": [50, 73, 129, 586], "empty_lik": [50, 54, 73, 77, 356, 402, 586], "deafult": [50, 64, 87, 131, 586, 699], "uniniti": [50, 130, 131, 586, 771], "from_dlpack": [50, 73, 586], "full_lik": [50, 73, 586, 780], "fill_valu": [50, 54, 64, 73, 77, 87, 135, 136, 251, 259, 362, 471, 586, 589, 601, 702, 738, 766, 778, 780], "scalar": [50, 53, 54, 55, 59, 70, 73, 76, 77, 78, 82, 94, 106, 136, 141, 222, 243, 288, 300, 322, 323, 325, 328, 331, 333, 335, 340, 347, 352, 356, 358, 404, 427, 428, 429, 441, 557, 570, 586, 589, 591, 594, 649, 766, 775, 777, 792, 803], "fill": [50, 53, 54, 63, 64, 71, 73, 76, 77, 86, 87, 130, 135, 136, 138, 141, 142, 143, 147, 148, 273, 304, 349, 356, 358, 362, 407, 411, 416, 419, 436, 455, 468, 470, 471, 586, 589, 600, 601, 694, 702, 731, 756, 778], "000123": [50, 136, 586], "stop": [50, 54, 56, 73, 77, 79, 121, 137, 138, 212, 356, 416, 419, 536, 573, 576, 578, 579, 580, 581, 586, 588, 591, 592, 597, 598, 670, 671, 672, 684, 736, 772, 775, 782, 784, 792, 803], "num": [50, 73, 137, 138, 586, 758, 772, 784], "endpoint": [50, 73, 137, 138, 586, 731, 772], "logspac": [50, 73, 586, 784], "log": [50, 53, 54, 59, 73, 76, 77, 82, 112, 138, 262, 264, 277, 295, 296, 336, 343, 347, 352, 357, 362, 422, 467, 583, 586, 589, 640, 728, 758, 764, 765, 768, 773, 776, 777, 778, 779, 781, 782, 784, 787], "sequenc": [50, 54, 58, 59, 61, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 138, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 307, 313, 314, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 347, 349, 353, 355, 356, 358, 362, 367, 368, 370, 371, 378, 379, 380, 382, 383, 387, 388, 390, 397, 398, 407, 408, 410, 414, 415, 416, 419, 420, 421, 423, 424, 425, 427, 428, 429, 432, 433, 434, 440, 442, 443, 445, 446, 448, 451, 453, 455, 456, 459, 460, 461, 463, 464, 465, 466, 468, 469, 481, 482, 483, 484, 490, 491, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 530, 534, 535, 549, 550, 552, 554, 556, 557, 570, 571, 574, 575, 576, 581, 586, 589, 591, 592, 593, 594, 596, 598, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 619, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 649, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 668, 669, 673, 680, 690, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 737, 758, 765, 766, 767, 768, 770, 779, 780, 782, 784, 789, 791, 806], "on_valu": [50, 73, 138, 141, 586], "off_valu": [50, 73, 138, 141, 586], "evenli": [50, 53, 54, 58, 61, 71, 73, 76, 81, 84, 121, 137, 138, 291, 355, 397, 586, 589, 593, 596, 606, 607, 608, 609, 611, 613, 615, 663], "hint": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 447, 481, 484, 510, 514, 516, 518, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 756, 761, 769, 772, 773, 776, 777, 780], "simplic": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 447, 481, 484, 510, 514, 516, 518, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 769, 782, 788, 791], "nestabl": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 447, 481, 484, 488, 496, 504, 505, 510, 514, 516, 518, 520, 534, 552, 557, 581, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 692, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 756, 759, 768, 769, 776, 779, 794], "464": [50, 53, 86, 138, 226, 227, 589], "15888336": [50, 138], "2154": [50, 138], "43469003": [50, 138], "meshgrid": [50, 73, 586], "spars": [50, 54, 60, 73, 77, 83, 139, 307, 349, 356, 407, 416, 419, 586, 595, 653], "xy": [50, 73, 139, 586], "dimension": [50, 53, 54, 59, 61, 64, 67, 68, 71, 73, 76, 77, 82, 84, 90, 91, 96, 121, 132, 134, 139, 146, 291, 315, 349, 355, 356, 358, 367, 382, 383, 387, 388, 398, 401, 427, 428, 429, 436, 437, 479, 490, 586, 589, 594, 596, 601, 604, 605, 622, 623, 629, 632, 635, 637, 638, 648, 649, 663, 699, 700, 702, 715, 716, 717, 718, 719, 720, 721, 722, 723, 773, 775, 779, 782, 784, 800, 803, 810], "repres": [50, 53, 54, 58, 59, 76, 77, 81, 82, 120, 139, 141, 163, 221, 222, 225, 228, 237, 239, 246, 272, 285, 289, 290, 307, 317, 318, 331, 349, 352, 355, 356, 358, 361, 362, 365, 397, 409, 447, 461, 462, 463, 467, 473, 480, 585, 586, 587, 589, 593, 594, 616, 617, 629, 637, 640, 641, 731, 735, 761, 782, 786, 800, 801, 804], "coordin": [50, 53, 64, 76, 77, 87, 139, 146, 227, 289, 311, 312, 315, 331, 349, 363, 472, 586, 589, 601, 702], "conserv": [50, 139, 586], "cartesian": [50, 139, 586], "matrix": [50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 96, 139, 144, 145, 146, 315, 316, 349, 356, 358, 367, 400, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 445, 481, 492, 498, 586, 591, 593, 594, 617, 621, 623, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 650, 731, 732, 756, 766, 777, 801, 803], "ij": [50, 67, 139, 586, 604, 714], "respect": [50, 53, 54, 56, 59, 76, 77, 79, 82, 94, 139, 219, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 281, 285, 288, 289, 295, 331, 346, 347, 352, 354, 356, 358, 361, 406, 418, 426, 461, 463, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 586, 589, 592, 593, 594, 597, 606, 613, 614, 622, 639, 642, 670, 671, 672, 731, 755, 756, 757, 758, 761, 762, 764, 765, 766, 767, 768, 772, 773, 775, 776, 777, 779, 780, 781, 799, 809], "rank": [50, 54, 59, 61, 68, 77, 82, 84, 91, 94, 95, 100, 139, 313, 314, 349, 356, 358, 367, 407, 408, 416, 419, 447, 490, 586, 594, 596, 601, 605, 622, 624, 633, 635, 639, 641, 646, 648, 649, 656, 657, 665, 668, 669, 702, 722, 723], "ni": [50, 139, 586], "xi": [50, 139, 586], "scatter": [50, 55, 73, 78, 141, 534, 535, 586, 591, 763, 776, 782, 810], "dimens": [50, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 96, 97, 100, 107, 111, 141, 144, 145, 307, 314, 316, 317, 318, 324, 325, 331, 338, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 369, 370, 371, 373, 374, 375, 377, 382, 383, 387, 391, 392, 393, 394, 397, 399, 400, 403, 417, 422, 427, 428, 429, 437, 448, 449, 450, 451, 453, 461, 462, 463, 469, 471, 474, 484, 486, 487, 488, 489, 490, 503, 504, 505, 507, 514, 548, 551, 571, 583, 586, 591, 593, 594, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 649, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 671, 672, 698, 699, 700, 702, 704, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 768, 770, 775, 777, 778, 779, 782, 784, 787], "ones_lik": [50, 73, 586, 762, 789], "tril": [50, 73, 586], "whose": [50, 53, 54, 55, 59, 61, 65, 67, 73, 76, 77, 78, 82, 84, 88, 90, 96, 136, 144, 145, 221, 225, 228, 236, 237, 238, 277, 278, 284, 285, 289, 290, 291, 316, 330, 334, 335, 337, 341, 349, 356, 358, 403, 446, 458, 497, 552, 586, 589, 591, 594, 596, 602, 604, 621, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 649, 658, 662, 704, 705, 706, 713, 714, 769, 779], "innermost": [50, 54, 59, 82, 144, 145, 316, 349, 356, 403, 586, 594, 621, 623, 625, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646], "mxn": [50, 54, 59, 82, 144, 145, 316, 349, 586, 594, 625, 633, 635, 636, 638, 639, 643, 646], "matric": [50, 54, 59, 77, 82, 94, 96, 139, 144, 145, 316, 349, 356, 358, 403, 407, 408, 410, 414, 415, 418, 436, 586, 593, 594, 617, 621, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 754, 791, 803], "diagon": [50, 54, 59, 77, 82, 132, 144, 145, 146, 304, 315, 316, 349, 356, 358, 401, 404, 411, 436, 586, 594, 624, 646], "triangular": [50, 54, 59, 82, 144, 145, 146, 315, 316, 349, 586, 594, 621, 627, 628, 635, 639], "alloc": [50, 51, 54, 74, 144, 145, 151, 316, 349, 586, 587, 756, 758, 792], "triu": [50, 73, 586], "upper": [50, 54, 59, 63, 77, 82, 86, 132, 145, 146, 304, 316, 349, 367, 484, 586, 594, 600, 621, 627, 628, 639, 696, 730, 776, 779], "zeros_lik": [50, 73, 151, 268, 572, 573, 576, 578, 580, 586, 587, 589, 592, 596, 654, 777, 782], "data_typ": [51, 54, 74, 77, 181, 587, 763, 766, 779, 780], "_arraywithdatatyp": [51, 96], "irrespect": [51, 59, 74, 82, 151, 587, 594, 642, 764, 776, 786, 810], "promot": [51, 53, 54, 59, 74, 76, 77, 82, 89, 96, 97, 151, 154, 177, 178, 179, 185, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 328, 336, 341, 352, 367, 481, 543, 565, 587, 589, 591, 594, 596, 604, 621, 622, 629, 630, 632, 633, 634, 635, 637, 638, 640, 641, 648, 649, 655, 665, 708, 716, 719, 760, 769, 770, 773, 781], "nan": [51, 53, 54, 55, 65, 67, 74, 76, 77, 78, 151, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 289, 290, 292, 295, 320, 329, 333, 338, 341, 347, 352, 367, 479, 480, 487, 488, 489, 516, 570, 584, 587, 589, 591, 602, 604, 605, 704, 705, 706, 707, 715, 716, 717, 719, 720, 721, 722, 723, 760, 766, 769, 775, 780, 781], "infin": [51, 53, 55, 59, 74, 76, 82, 151, 219, 220, 221, 222, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 281, 282, 284, 285, 286, 289, 290, 292, 341, 352, 516, 584, 587, 589, 591, 594, 604, 605, 640, 649, 715, 717, 722, 723, 760, 769], "broadcast_arrai": [51, 74, 587], "mix": [51, 53, 74, 76, 77, 78, 83, 86, 96, 97, 152, 165, 166, 179, 198, 199, 229, 232, 233, 234, 239, 240, 246, 250, 258, 259, 269, 272, 275, 281, 357, 367, 423, 488, 506, 508, 509, 510, 511, 520, 554, 557, 587, 588, 589, 591, 593, 594, 595, 596, 599, 604, 607, 609, 612, 615, 617, 620, 621, 644, 651, 653, 654, 692, 714, 716, 719, 756, 759, 766, 767, 768, 776, 782, 784, 794, 803, 807, 809], "broadcast_to": [51, 74, 587, 766], "can_cast": [51, 74, 587, 766, 773, 777], "accord": [51, 54, 55, 61, 67, 74, 84, 90, 154, 164, 222, 233, 239, 246, 272, 283, 310, 349, 355, 358, 398, 447, 510, 513, 534, 535, 587, 589, 591, 594, 596, 604, 648, 656, 669, 719, 721, 738, 744, 756, 757, 760, 766, 771, 773, 777, 779], "finfo": [51, 74, 587, 779], "resolut": [51, 74, 164, 587, 758], "4028235e": [51, 164, 587], "iinfo": [51, 74, 587], "integ": [51, 53, 54, 58, 59, 61, 63, 67, 68, 71, 76, 77, 78, 81, 82, 84, 86, 90, 91, 96, 97, 121, 135, 167, 168, 174, 178, 179, 183, 219, 229, 230, 231, 232, 233, 234, 235, 245, 246, 257, 269, 274, 277, 281, 282, 292, 293, 317, 318, 324, 327, 328, 349, 352, 355, 358, 362, 365, 367, 382, 387, 397, 433, 442, 447, 459, 467, 468, 469, 470, 471, 473, 474, 479, 481, 482, 483, 488, 490, 513, 529, 539, 571, 586, 587, 589, 591, 593, 594, 596, 600, 603, 604, 605, 606, 607, 608, 609, 611, 613, 615, 622, 624, 634, 648, 649, 663, 693, 694, 695, 696, 697, 698, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 758, 764, 766, 775, 778, 779, 784, 786], "119": [51, 167], "122": [51, 167, 237, 589], "1220": [51, 167], "int16": [51, 54, 63, 67, 74, 86, 154, 158, 160, 165, 167, 174, 189, 300, 347, 367, 482, 483, 587, 604, 694, 712, 713, 718, 720, 766, 777, 779, 784], "32768": [51, 74, 167, 550, 591], "32767": [51, 74, 167], "is_bool_dtyp": [51, 74, 587], "is_float_dtyp": [51, 74, 587, 780], "is_int_dtyp": [51, 74, 587, 778, 780], "is_uint_dtyp": [51, 74, 587, 778, 780], "result_typ": [51, 74, 587, 766], "arrays_and_dtyp": [51, 74, 179, 587], "_arraywithdevic": [52, 96], "move": [52, 54, 75, 77, 146, 209, 213, 217, 315, 349, 358, 446, 586, 588, 750, 758, 767, 780], "__dlpack__": [52, 75, 133, 213, 586, 588], "caveat": [52, 75, 213, 357, 422, 588], "portabl": [52, 75, 213, 588, 750, 801], "_arraywithelementwis": [53, 96], "ab": [53, 59, 69, 76, 92, 96, 97, 277, 320, 333, 352, 358, 454, 589, 594, 598, 633, 643, 649, 681, 684, 744, 754, 761, 766, 774, 777, 779], "absolut": [53, 54, 59, 69, 71, 76, 77, 82, 96, 219, 283, 320, 333, 336, 342, 352, 356, 357, 404, 417, 420, 421, 589, 594, 633, 634, 635, 640, 751, 757], "aco": [53, 76, 589], "invers": [53, 54, 59, 76, 77, 82, 220, 221, 224, 225, 226, 227, 228, 355, 365, 377, 386, 388, 473, 589, 594, 630, 634, 638, 738, 766, 791], "cosin": [53, 76, 220, 221, 236, 237, 303, 306, 349, 355, 376, 386, 589, 732], "acosh": [53, 76, 165, 166, 587, 589, 754], "area": [53, 54, 76, 77, 81, 221, 225, 228, 355, 390, 397, 589, 776, 782, 790, 797, 799], "hyperbol": [53, 76, 221, 225, 228, 237, 285, 289, 290, 589], "sector": [53, 76, 221, 225, 228, 589, 797], "second": [53, 54, 56, 59, 61, 65, 76, 77, 78, 79, 82, 84, 88, 96, 97, 118, 146, 177, 185, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 310, 315, 320, 329, 331, 332, 333, 339, 343, 344, 349, 352, 356, 357, 358, 365, 367, 402, 403, 404, 406, 409, 423, 453, 458, 468, 470, 474, 481, 484, 495, 544, 566, 572, 573, 578, 585, 586, 587, 589, 591, 592, 594, 596, 597, 598, 602, 622, 625, 626, 627, 629, 632, 637, 639, 640, 642, 644, 648, 665, 666, 671, 674, 704, 705, 706, 736, 757, 760, 763, 766, 768, 771, 776, 777, 779, 781, 786, 798, 808], "multipli": [53, 54, 58, 67, 76, 77, 81, 94, 222, 288, 334, 355, 356, 390, 413, 414, 482, 483, 589, 593, 604, 616, 712, 718, 758, 761, 762, 764, 768], "angl": [53, 76, 227, 237, 285, 290, 332, 352, 589, 791], "deg": [53, 76, 223, 589], "radian": [53, 54, 76, 77, 220, 223, 224, 226, 227, 236, 238, 278, 284, 289, 341, 352, 589, 769], "degre": [53, 54, 67, 76, 77, 90, 223, 238, 278, 358, 453, 589, 604, 719, 721, 802], "1j": [53, 76, 77, 223, 224, 236, 237, 242, 244, 256, 279, 284, 285, 289, 322, 549, 589, 591], "2j": [53, 54, 76, 77, 223, 252, 322, 355, 382, 387, 550, 589, 591], "3j": [53, 54, 76, 77, 223, 256, 279, 322, 352, 589], "35619449": [53, 223, 589], "78539816": [53, 223, 589], "135": [53, 223, 498, 589, 591], "asin": [53, 76, 589], "sine": [53, 76, 224, 225, 284, 285, 589], "927": [53, 76, 224], "asinh": [53, 76, 224, 589], "atan": [53, 76, 589], "tangent": [53, 76, 226, 227, 228, 289, 290, 589, 769], "785": [53, 76, 226, 227, 589], "atan2": [53, 76, 589], "quotient": [53, 76, 227, 239, 246, 589], "245": [53, 81, 227, 593, 616, 617], "588": [53, 227, 589], "inf": [53, 54, 55, 59, 76, 77, 78, 82, 227, 244, 253, 254, 255, 256, 260, 261, 273, 295, 336, 347, 352, 356, 367, 400, 484, 516, 570, 584, 589, 591, 594, 633, 649, 754, 766, 775], "719": [53, 227, 589], "197": [53, 227, 589], "atanh": [53, 76, 589], "549": [53, 76, 81, 228, 589, 593, 617], "bitwise_and": [53, 76, 589], "bitwise_invert": [53, 76, 589], "bitiwse_invert": [53, 230], "bitwise_left_shift": [53, 76, 589], "bitwise_or": [53, 76, 589], "bitwise_right_shift": [53, 76, 96, 589], "bitwise_xor": [53, 76, 96, 589], "ceil": [53, 54, 76, 77, 94, 121, 355, 373, 374, 375, 391, 392, 393, 396, 586, 589, 732, 776], "round": [53, 54, 76, 77, 94, 95, 222, 235, 239, 245, 246, 272, 286, 292, 293, 327, 352, 589, 752, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 796, 797, 798], "416": [53, 236, 589], "540": [53, 236], "990": [53, 236], "cosh": [53, 76, 236, 589], "deg2rad": [53, 76, 589], "convers": [53, 54, 77, 238, 278, 536, 546, 591, 756, 762, 783, 785, 789, 791, 792, 794, 798, 802, 809], "180": [53, 76, 238, 278, 589], "270": [53, 76, 238, 278, 589], "360": [53, 76, 238, 278, 589, 765], "dividend": [53, 76, 239, 246, 281, 293, 589], "divisor": [53, 54, 56, 67, 76, 77, 79, 90, 239, 246, 249, 250, 281, 293, 355, 358, 373, 374, 375, 433, 442, 459, 572, 573, 578, 589, 592, 604, 719, 721, 732, 736], "375": [53, 240, 275], "erf": [53, 76, 589], "exponenti": [53, 54, 76, 77, 241, 242, 244, 264, 277, 299, 347, 356, 412, 589], "gauss": [53, 76, 241, 589], "328": [53, 241, 289, 589], "677": [53, 241, 589], "842": [53, 241, 289, 589], "71828198": [53, 76, 242], "38905573": [53, 76, 242], "08553696": [53, 76, 242, 589], "exp2": [53, 76, 589], "expm1": [53, 76, 589, 766], "244": [53, 244, 750], "918": [53, 244], "147": [53, 244, 589], "floor": [53, 54, 76, 77, 94, 233, 246, 355, 373, 374, 375, 377, 391, 392, 393, 396, 589, 732, 776], "floor_divid": [53, 76, 589], "fmin": [53, 76, 589], "gcd": [53, 76, 589, 766], "greater": [53, 54, 58, 61, 63, 76, 77, 81, 86, 96, 97, 134, 220, 221, 224, 225, 227, 228, 231, 233, 239, 245, 246, 260, 262, 277, 281, 283, 285, 286, 290, 291, 292, 321, 352, 355, 377, 382, 387, 586, 589, 593, 594, 596, 600, 620, 622, 634, 664, 696, 758, 778], "greater_equ": [53, 76, 96, 97, 264, 589], "imaginari": [53, 76, 96, 106, 109, 112, 142, 143, 220, 221, 222, 237, 239, 240, 242, 244, 252, 272, 274, 275, 282, 285, 286, 290, 322, 352, 356, 404, 583, 586, 589, 601, 702, 768], "4j": [53, 76, 252, 550, 589, 591], "6j": [53, 54, 76, 252, 256, 322, 589], "isfinit": [53, 76, 589, 777], "out_i": [53, 76, 253, 254, 255, 256, 279, 589], "self_i": [53, 76, 253, 254, 255, 256, 279], "finit": [53, 76, 219, 220, 221, 222, 225, 227, 228, 237, 239, 240, 242, 244, 246, 253, 254, 260, 262, 272, 273, 275, 277, 281, 285, 286, 290, 589], "isinf": [53, 76, 589], "detect_posit": [53, 76, 254, 589], "detect_neg": [53, 76, 254, 589], "isnan": [53, 76, 589], "isreal": [53, 76, 589], "5j": [53, 76, 77, 256, 279, 322, 352, 589], "lcm": [53, 76, 589, 766], "less": [53, 54, 59, 63, 67, 76, 77, 82, 86, 96, 97, 220, 221, 224, 227, 228, 235, 239, 246, 260, 261, 262, 263, 277, 281, 283, 286, 340, 352, 355, 356, 367, 376, 377, 386, 416, 419, 481, 484, 589, 594, 600, 604, 633, 634, 635, 638, 649, 696, 719, 721, 732, 757, 758, 764, 766, 768, 770, 772, 777, 779, 782, 783, 784, 797, 803, 805], "less_equ": [53, 76, 96, 97, 589, 770], "log10": [53, 54, 76, 310, 349, 589], "logarithm": [53, 76, 242, 260, 261, 262, 263, 264, 326, 336, 352, 589, 594, 640], "602": [53, 261, 589], "699": [53, 261, 589], "log1p": [53, 76, 589, 775], "693": [53, 76, 111, 225, 262, 583, 589, 595, 653], "0953": [53, 76, 260, 262, 589], "log2": [53, 76, 265, 589], "logaddexp": [53, 76, 589], "logaddexp2": [53, 76, 589, 754], "169925": [53, 76, 265, 589], "logical_and": [53, 76, 589, 777, 782, 810], "logical_not": [53, 76, 589, 766], "logical_or": [53, 76, 589, 810], "conform": [53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 481, 586, 587, 589, 594, 596, 601, 602, 603, 604, 605, 621, 622, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 649, 655, 657, 658, 659, 661, 662, 664, 665, 669, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 769, 771], "api_specif": [53, 76, 154, 242, 252, 253, 268, 587, 589, 596, 604, 669, 719, 769], "array_api": [53, 76, 154, 242, 252, 253, 268, 587, 589, 594, 596, 604, 640, 669, 719, 769], "logical_xor": [53, 76, 589], "maximum": [53, 54, 55, 56, 61, 64, 67, 71, 76, 77, 78, 79, 84, 87, 90, 97, 212, 329, 342, 352, 355, 356, 358, 367, 371, 381, 416, 419, 447, 482, 484, 498, 499, 507, 578, 588, 589, 591, 592, 594, 596, 598, 601, 604, 633, 654, 685, 699, 700, 715, 717, 758, 768, 776, 787, 810], "use_wher": [53, 76, 270, 271, 589], "formula": [53, 54, 76, 239, 261, 263, 270, 271, 272, 310, 335, 349, 352, 361, 461, 463, 589], "exce": [53, 54, 77, 271, 358, 456, 589], "product": [53, 54, 58, 59, 67, 76, 77, 81, 82, 90, 94, 272, 356, 367, 402, 406, 408, 409, 410, 413, 414, 415, 482, 483, 489, 589, 593, 594, 604, 619, 620, 622, 629, 632, 637, 644, 648, 712, 713, 714, 718, 719, 756, 784, 803, 805], "nan_to_num": [53, 76, 589], "posinf": [53, 76, 273, 589], "neginf": [53, 76, 273, 589], "5e": [53, 56, 76, 77, 273, 339, 578, 589, 592], "not_equ": [53, 76, 96, 97, 589], "pow": [53, 76, 96, 97, 589, 760], "expon": [53, 54, 55, 77, 78, 277, 328, 330, 334, 352, 550, 589, 591, 594, 634], "rad2deg": [53, 76, 589], "286": [53, 77, 278], "458": [53, 278], "573": [53, 278, 589], "reciproc": [53, 76, 589], "333": [53, 76, 239, 280, 499, 589, 591], "remaind": [53, 54, 61, 71, 76, 77, 84, 248, 589, 596, 663, 760, 776], "modulu": [53, 76, 281, 589, 776], "sign": [53, 54, 59, 65, 67, 76, 77, 82, 94, 121, 219, 220, 221, 222, 225, 227, 228, 233, 237, 239, 242, 244, 246, 272, 274, 281, 285, 286, 290, 323, 352, 356, 358, 367, 417, 454, 482, 483, 586, 589, 594, 602, 604, 640, 704, 705, 706, 707, 712, 713, 718, 720, 757, 784, 789, 797], "x2_i": [53, 76, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 589, 760], "decim": [53, 76, 282, 589, 781], "0001": [53, 54, 77, 282, 283, 356, 416, 419, 736], "678": [53, 282, 283], "np_variant": [53, 76, 283, 589], "841": [53, 70, 76, 104, 284, 583, 589], "909": [53, 76, 78, 284, 589], "141": [53, 76, 151, 284, 587, 589], "sinh": [53, 76, 284, 589], "232": [53, 76, 285, 589], "sqrt": [53, 54, 76, 77, 355, 377, 382, 383, 387, 388, 589, 731, 750], "squar": [53, 54, 59, 76, 77, 82, 286, 356, 357, 367, 403, 412, 420, 481, 574, 575, 577, 582, 589, 592, 594, 598, 621, 623, 624, 626, 627, 628, 630, 634, 640, 641, 642, 647, 679, 750], "tanh": [53, 76, 289, 589, 728, 784], "762": [53, 76, 290, 589], "964": [53, 76, 290, 589], "trapz": [53, 76, 589], "dx": [53, 76, 291, 589], "apart": [53, 76, 291, 589], "trapezoid": [53, 76, 291, 589], "trunc": [53, 76, 589], "025": [53, 292, 357, 423, 589, 597, 672], "trunc_divid": [53, 76, 589], "_arraywithactivationsexperiment": [54, 96], "elu": [54, 77, 347, 728], "scaler": [54, 77, 294, 347, 779], "ep": [54, 59, 62, 77, 82, 85, 164, 295, 347, 356, 361, 404, 461, 462, 463, 587, 594, 599, 635, 638, 692, 728, 735], "outpu": [54, 77, 295, 347], "19722438": [54, 77, 295, 347], "38629448": [54, 77, 295, 347], "38629436": [54, 77, 295, 347], "logsigmoid": [54, 77, 347, 728], "31326175": [54, 70, 296, 347], "126928": [54, 77, 296], "01814993": [54, 296], "00004578": [54, 296], "57888985": [54, 296], "31326169": [54, 77, 296, 347], "69314718": [54, 59, 70, 77, 82, 296, 336, 347, 352, 594, 640], "01104775": [54, 296], "prelu": [54, 77, 347, 728], "unidirect": [54, 297, 347], "relu6": [54, 77, 347, 728], "rectifi": [54, 70, 77, 106, 108, 109, 298, 301, 302, 347, 583], "selu": [54, 77, 347, 728], "11133075": [54, 299, 347], "05070102": [54, 77, 299, 347], "10140204": [54, 299, 347], "15210295": [54, 299, 347], "20280409": [54, 299, 347], "25350523": [54, 299, 347], "30420589": [54, 299, 347], "35490704": [54, 299, 347], "silu": [54, 77, 347, 728], "26894143": [54, 301], "73105854": [54, 77, 301], "thresholded_relu": [54, 77, 347], "_arraywithconversionsexperiment": [54, 96], "_arraywithcreationexperiment": [54, 96], "blackman_window": [54, 77, 349], "period": [54, 77, 285, 289, 303, 305, 306, 308, 309, 349, 355, 389, 589, 758], "window": [54, 58, 77, 81, 303, 305, 306, 308, 309, 319, 349, 355, 373, 374, 375, 377, 391, 392, 393, 394, 396, 397, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732, 752, 758, 808], "symmetr": [54, 59, 77, 82, 94, 303, 305, 306, 308, 309, 349, 356, 358, 403, 447, 594, 621, 626, 627, 628, 650, 764], "38777878e": [54, 77, 303, 349], "40000000e": [54, 303, 349], "00000000e": [54, 77, 78, 303, 349, 355, 376, 382, 386, 387, 754], "30000000e": [54, 77, 303, 349], "eye_lik": [54, 77, 349], "elsewher": [54, 77, 132, 304, 349, 586, 601, 703, 757], "mel_weight_matrix": [54, 77, 349], "num_mel_bin": [54, 77, 310, 349], "dft_length": [54, 77, 310, 349, 355, 377], "sample_r": [54, 77, 310, 349], "lower_edge_hertz": [54, 77, 310, 349], "upper_edge_hertz": [54, 77, 310, 349], "3000": [54, 77, 310, 349], "melweightmatrix": [54, 77, 310, 349], "linearli": [54, 55, 78, 310, 349, 507, 591, 594, 641], "frequenc": [54, 55, 77, 78, 310, 349, 367, 481, 507, 591, 758], "spectra": [54, 310, 349], "dft": [54, 77, 310, 349, 355], "stft": [54, 310, 349], "mel": [54, 77, 310, 349], "term": [54, 303, 310, 349, 357, 422, 593, 618, 732, 750, 758, 764, 784, 794, 796, 803], "hertz": [54, 310, 349], "2595": [54, 310, 349], "700": [54, 78, 310, 349, 511], "band": [54, 55, 77, 78, 310, 349, 507, 591], "spectrum": [54, 77, 310, 349], "n_fft": [54, 77, 310, 349, 355, 377], "signal": [54, 77, 310, 349, 355, 369, 370, 371, 376, 377, 386, 732, 802, 803], "bound": [54, 77, 310, 349, 358, 431, 452, 455, 770, 777, 779, 784, 809], "8000": [54, 77, 305, 310, 349], "75694758": [54, 310, 349], "trilu": [54, 77, 349], "retain": [54, 146, 315, 316, 349, 574, 586, 592, 775, 794], "unsorted_segment_min": [54, 77, 349], "segment_id": [54, 77, 317, 318, 349, 738], "num_seg": [54, 77, 317, 318, 349, 738], "th": [54, 77, 317, 318, 325, 349, 352, 356, 367, 401, 407, 490], "identifi": [54, 77, 317, 318, 349, 760, 765, 779, 782], "distinct": [54, 65, 77, 317, 318, 349, 602, 704, 705, 706, 707, 757, 764, 769, 775, 776, 777, 783, 797, 803], "unsorted_segment_sum": [54, 77, 349], "_arraywithdata_typeexperiment": [54, 96], "_arraywithdeviceexperiment": [54, 96], "_arraywithelementwiseexperiment": [54, 96], "equal_nan": [54, 77, 320, 333, 352], "rel": [54, 56, 59, 61, 66, 73, 77, 79, 82, 84, 89, 96, 136, 320, 333, 352, 357, 367, 422, 481, 573, 576, 578, 579, 580, 592, 594, 596, 603, 625, 635, 638, 646, 658, 662, 708, 711, 758, 765, 778, 782, 803, 805], "toler": [54, 59, 77, 82, 320, 333, 352, 356, 404, 416, 419, 594, 635, 638, 760, 778, 803], "1e10": [54, 320, 333, 352], "00001e10": [54, 320, 333, 352], "00001e": [54, 320, 352], "binar": [54, 77, 352], "outcom": [54, 77, 321, 331, 352], "conj": [54, 77, 237, 242, 244, 285, 286, 290, 352, 589], "conjug": [54, 59, 77, 82, 322, 352, 355, 356, 362, 377, 399, 404, 413, 415, 469, 594, 632, 636, 644], "copysign": [54, 77, 352], "unsign": [54, 67, 77, 323, 352, 367, 482, 483, 604, 712, 713, 718, 720, 766, 784], "count_nonzero": [54, 77, 352], "keepdim": [54, 59, 61, 64, 67, 68, 71, 77, 82, 84, 87, 90, 91, 324, 338, 345, 352, 353, 367, 486, 487, 488, 489, 490, 594, 596, 601, 604, 605, 633, 649, 668, 699, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 770, 777, 784], "diff": [54, 71, 77, 352, 768, 776], "prepend": [54, 77, 325, 352, 594, 596, 632, 657, 757], "differenc": [54, 77, 325, 352], "prior": [54, 77, 325, 352, 362, 469, 594, 644, 770, 780], "expand": [54, 55, 61, 77, 78, 325, 352, 358, 507, 591, 596, 657, 764], "discret": [54, 77, 325, 352, 355, 376, 377, 382, 383, 386, 387, 388, 398, 595, 652, 732], "digamma": [54, 77, 352], "7549271": [54, 326, 352], "92278427": [54, 77, 326, 352], "9988394": [54, 326, 352], "toward": [54, 61, 77, 84, 246, 293, 327, 339, 352, 358, 367, 453, 484, 589, 596, 662, 750, 752, 754, 757, 784, 799, 803], "float_pow": [54, 77, 352], "fmax": [54, 77, 352], "fmod": [54, 77, 589], "divis": [54, 55, 56, 77, 78, 79, 233, 239, 246, 248, 281, 283, 293, 358, 433, 541, 549, 563, 572, 573, 578, 589, 591, 592, 593, 606, 613, 614, 736, 773, 781], "frexp": [54, 77, 352], "edge_ord": [54, 77, 331, 352], "estim": [54, 77, 331, 352, 367, 481], "boundari": [54, 63, 77, 86, 331, 352, 355, 390, 600, 696, 803], "partial": [54, 71, 77, 165, 166, 198, 199, 331, 352, 356, 358, 367, 416, 448, 449, 450, 451, 488, 508, 509, 577, 587, 588, 591, 592, 594, 631, 733, 734, 758, 763, 782], "diment": [54, 331, 352], "33333333": [54, 77, 280, 331, 352, 589], "hypot": [54, 77, 352], "hypotenus": [54, 332, 352], "4031": [54, 332, 352], "8102": [54, 332, 352], "isclos": [54, 77, 352, 760], "ldexp": [54, 77, 352], "lerp": [54, 77, 352], "lgamma": [54, 352], "45373654": [54, 336, 352], "6477685": [54, 336, 352], "modf": [54, 77, 352], "fraction": [54, 77, 337, 352, 367, 490, 593, 616], "nansum": [54, 77, 352], "accumul": [54, 77, 338, 352], "nextaft": [54, 77, 352], "0e": [54, 56, 77, 79, 339, 352, 578, 592], "4013e": [54, 77, 339, 352], "4028e": [54, 77, 339, 352], "signbit": [54, 77, 352], "637": [54, 77, 341, 352], "0909": [54, 77, 341, 352], "sparsify_tensor": [54, 77, 352], "sparsifi": [54, 77, 342, 352], "arang": [54, 59, 67, 77, 82, 137, 342, 352, 355, 356, 373, 374, 375, 382, 387, 391, 392, 393, 394, 396, 400, 414, 439, 530, 571, 586, 591, 594, 597, 604, 633, 649, 672, 714, 750, 766, 776, 810], "xlogi": [54, 77, 352], "0986": [54, 77, 343, 352], "3863": [54, 77, 343, 352], "0000": [54, 77, 305, 306, 309, 343, 349, 352, 356, 358, 412, 441], "zeta": [54, 77, 352], "0369": [54, 77, 344, 352], "_arraywithgeneralexperiment": [54, 96], "init_valu": [54, 77, 81, 345, 353, 355, 397], "reduct": [54, 55, 60, 68, 71, 77, 78, 81, 83, 91, 345, 353, 355, 357, 397, 420, 421, 422, 423, 424, 504, 534, 535, 591, 595, 605, 651, 652, 653, 722, 723, 733, 766, 773, 776, 779, 786], "_arraywithgradientsexperiment": [54, 96], "_arraywithimageexperiment": [54, 96], "_arraywithlayersexperiment": [54, 96], "adaptive_avg_pool1d": [54, 77, 355], "1d": [54, 77, 94, 355, 356, 358, 367, 369, 376, 378, 380, 386, 413, 427, 431, 452, 455, 481, 732], "adapt": [54, 77, 79, 355, 369, 370, 371, 579, 592, 732, 736, 797], "pool": [54, 77, 81, 355, 369, 370, 371, 373, 374, 375, 391, 392, 393, 394, 397, 732, 757], "plane": [54, 77, 239, 242, 244, 272, 284, 285, 286, 289, 355, 358, 369, 370, 371, 453, 589], "l_in": [54, 77, 355, 369], "spatial": [54, 58, 77, 81, 355, 361, 369, 370, 371, 390, 397, 461, 462, 463, 593, 606, 607, 608, 609, 611, 613, 615, 735, 791], "Will": [54, 77, 355, 369, 370, 371, 730, 741, 792], "l_out": [54, 77, 355, 369], "h_in": [54, 77, 355, 370, 371], "w_in": [54, 77, 355, 370, 371], "s_0": [54, 77, 355, 370, 371], "s_1": [54, 77, 355, 370, 371], "adaptive_max_pool2d": [54, 77, 355], "avg_pool1d": [54, 77, 355], "kernel": [54, 58, 77, 81, 355, 373, 374, 375, 391, 392, 393, 394, 593, 618, 784, 792, 803, 806, 807], "stride": [54, 58, 77, 78, 81, 96, 355, 358, 373, 374, 375, 391, 392, 393, 394, 396, 397, 425, 591, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 732, 776, 780, 803], "nwc": [54, 58, 77, 81, 355, 373, 378, 391, 394, 593, 606, 607, 608, 613, 614, 732], "count_include_pad": [54, 77, 355, 373, 374, 375, 732], "ceil_mod": [54, 77, 355, 373, 374, 375, 391, 392, 393, 396, 732], "d_in": [54, 58, 77, 81, 355, 373, 374, 375, 377, 382, 383, 387, 391, 392, 393, 394, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "algorithm": [54, 58, 70, 77, 81, 104, 355, 356, 373, 374, 375, 390, 391, 392, 393, 394, 416, 417, 419, 594, 607, 609, 610, 611, 612, 615, 640, 728, 732, 766, 777, 782, 792, 803, 805, 807], "ncw": [54, 58, 77, 81, 355, 373, 378, 379, 391, 394, 593, 606, 607, 608, 613, 614, 732], "avg_pool2d": [54, 77, 355], "nhwc": [54, 58, 77, 81, 355, 374, 379, 392, 396, 593, 606, 609, 610, 613, 614, 615, 732], "divisor_overrid": [54, 77, 355, 374, 375, 732], "avg_pool3d": [54, 77, 355], "ndhwc": [54, 58, 77, 81, 355, 375, 380, 393, 593, 606, 611, 612, 613, 614, 732], "volum": [54, 58, 77, 81, 355, 375, 377, 382, 383, 387, 393, 593, 611, 612, 752], "ncdhw": [54, 58, 77, 81, 355, 375, 380, 393, 593, 606, 611, 612, 613, 614, 732], "dct": [54, 77, 355, 732, 787], "lenght": [54, 77, 305, 308, 309, 319, 355, 376, 732], "truncat": [54, 77, 355, 356, 376, 382, 386, 387, 388, 398, 418, 537, 591, 730, 732, 770, 787], "larger": [54, 61, 67, 77, 84, 90, 164, 355, 376, 383, 386, 388, 398, 587, 596, 604, 654, 662, 719, 721, 732, 779, 782, 810], "ortho": [54, 77, 355, 376, 377, 382, 383, 386, 387, 388, 398, 732], "onesid": [54, 77, 355, 377], "fft": [54, 77, 355, 377, 383, 398, 732, 756, 803], "symmetri": [54, 355, 377], "rfft": [54, 77, 355, 377, 398], "batch_idx": [54, 355, 377], "signal_dim1": [54, 355, 377], "signal_dim2": [54, 355, 377], "signal_dimn": [54, 355, 377], "signal_dim": [54, 355, 377], "embed": [54, 77, 355, 593, 619, 732, 803], "max_norm": [54, 55, 77, 78, 355, 381, 498, 499, 591, 732], "ifft": [54, 77, 355, 382, 388], "pi": [54, 77, 285, 289, 355, 382, 387, 584, 589], "44509285e": [54, 77, 355, 382], "14423775e": [54, 77, 355, 382], "17j": [54, 77, 355, 382, 387], "11483250e": [54, 77, 355, 382], "16j": [54, 77, 355, 382, 387], "33486982e": [54, 77, 355, 382], "22464680e": [54, 77, 355, 382], "95799250e": [54, 77, 355, 382], "66951701e": [54, 77, 355, 382], "fft2": [54, 355], "vari": [54, 65, 94, 290, 383, 503, 589, 591, 602, 705, 706, 707, 764, 768, 777, 779, 786], "20477401j": [54, 355, 383], "0614962j": [54, 355, 383], "idct": [54, 77, 355], "49862671": [54, 77, 355, 376, 386], "37691498": [54, 77, 355, 376, 386], "00390816": [54, 77, 355, 376, 386], "58938599": [54, 77, 355, 376, 386], "92713165": [54, 77, 355, 376, 386], "078475": [54, 77, 355, 376, 386], "19664812": [54, 77, 355, 376, 386], "95411837": [54, 77, 355, 376, 386], "30636606e": [54, 77, 355, 387], "43029718e": [54, 77, 355, 387], "18j": [54, 77, 355, 382, 387], "53080850e": [54, 77, 355, 387], "58689626e": [54, 77, 355, 387], "24474906e": [54, 77, 355, 387], "91858728e": [54, 77, 355, 387], "01435406e": [54, 77, 355, 387], "ifftn": [54, 77, 355], "24730653": [54, 77, 355, 388], "90832391j": [54, 77, 355, 388], "49495562": [54, 77, 355, 388], "9039565j": [54, 77, 355, 388], "98193269": [54, 77, 355, 388], "49560517j": [54, 77, 355, 388], "93280757": [54, 77, 355, 388], "48075343j": [54, 77, 355, 388], "28526384": [54, 77, 355, 388], "3351205j": [54, 77, 355, 388], "2343787": [54, 77, 355, 388], "83528011j": [54, 77, 355, 388], "18791352": [54, 77, 355, 388], "30690572j": [54, 77, 355, 388], "82115787": [54, 77, 355, 388], "96195183j": [54, 77, 355, 388], "44719226": [54, 77, 355, 388], "72654048j": [54, 77, 355, 388], "51476765": [54, 355, 388], "66160417j": [54, 355, 388], "04319742": [54, 355, 388], "05411636j": [54, 355, 388], "015561": [54, 355, 388], "04216015j": [54, 355, 388], "06310689": [54, 355, 388], "05347854j": [54, 355, 388], "13392983": [54, 355, 388], "16052352j": [54, 355, 388], "08371392": [54, 355, 388], "17252843j": [54, 355, 388], "0031429": [54, 355, 388], "05421245j": [54, 355, 388], "10446617": [54, 355, 388], "17747098j": [54, 355, 388], "05344324": [54, 355, 388], "07972424j": [54, 355, 388], "8344667": [54, 77, 355, 388], "98222595j": [54, 77, 355, 388], "48472244": [54, 77, 355, 388], "30233797j": [54, 77, 355, 388], "recompute_scale_factor": [54, 77, 355, 390, 782], "antialia": [54, 77, 355, 390, 782], "height": [54, 55, 58, 77, 78, 81, 355, 390, 503, 591, 593, 609, 610, 611, 612, 615, 730, 787], "width": [54, 55, 58, 77, 78, 81, 355, 356, 358, 367, 390, 404, 447, 484, 503, 591, 593, 607, 608, 609, 610, 611, 612, 615, 619], "trilinear": [54, 77, 355, 390, 782], "nearest_exact": [54, 77, 355, 390, 782], "tf_area": [54, 77, 355, 390, 782], "mitchellcub": [54, 77, 355, 390, 782], "lanczos3": [54, 77, 355, 390, 782], "lanczos5": [54, 77, 355, 390, 782], "gaussian": [54, 77, 104, 355, 390, 583, 782], "overwrit": [54, 71, 77, 212, 355, 390, 588, 758, 776, 777, 784], "align": [54, 71, 77, 355, 356, 390, 401, 757, 765, 777, 784, 786, 794, 809], "thu": [54, 77, 233, 246, 277, 281, 289, 290, 355, 356, 390, 403, 589, 594, 626, 627, 752, 756, 765, 770, 774, 777, 780], "antialias": [54, 77, 355, 390], "downsampl": [54, 77, 355, 390], "max_pool1d": [54, 77, 355, 394], "dilaton": [54, 77, 355, 391, 392, 393], "max_pool3d": [54, 77, 355], "reduce_window": [54, 81, 355], "window_dimens": [54, 81, 355, 397], "window_strid": [54, 81, 355, 397], "base_dil": [54, 81, 355, 397], "window_dil": [54, 81, 355, 397], "rfftn": [54, 77, 355], "linear_algebra": [54, 59, 77, 82, 594, 780], "_arraywithlinearalgebraexperiment": [54, 96], "adjoint": [54, 59, 77, 82, 356, 594, 630, 641, 642], "cond": [54, 77, 118, 356, 585, 792], "933034373659268": [54, 400], "diagflat": [54, 77, 356, 409, 412], "offset": [54, 59, 62, 73, 77, 82, 85, 134, 356, 361, 401, 461, 462, 463, 586, 594, 599, 625, 646, 692], "padding_valu": [54, 77, 356, 401], "right_left": [54, 77, 356, 401], "num_row": [54, 77, 356, 401], "num_col": [54, 77, 356, 401], "dot": [54, 58, 77, 81, 94, 356, 414, 593, 594, 619, 620, 648, 750, 757, 765], "eig": [54, 59, 77, 356, 594, 627, 628], "37228132": [54, 77, 356, 403, 405, 626], "82456484": [54, 403, 626], "41597356": [54, 403, 626], "56576746": [54, 403, 626], "90937671": [54, 403, 626], "eigh_tridiagon": [54, 77, 356], "eigvals_onli": [54, 77, 356, 404], "select_rang": [54, 77, 356, 404], "tol": [54, 77, 95, 356, 404, 416, 419], "eigenvalu": [54, 59, 77, 82, 94, 356, 403, 404, 405, 594, 626, 627, 628, 635], "eigenvector": [54, 77, 356, 403, 404, 594, 626, 627], "interv": [54, 63, 68, 77, 86, 91, 121, 137, 138, 144, 356, 367, 404, 484, 586, 594, 596, 600, 605, 622, 648, 654, 657, 665, 694, 696, 722, 723], "togeth": [54, 71, 77, 320, 333, 352, 356, 404, 737, 750, 761, 764, 766, 776, 777, 779, 780, 782, 788, 789, 792, 797, 801, 803, 804, 809], "cluster": [54, 77, 356, 404, 792, 803], "converg": [54, 77, 356, 404, 798], "li": [54, 77, 356, 367, 404, 490, 796], "_2": [54, 77, 356, 404], "precis": [54, 59, 77, 82, 164, 252, 272, 279, 286, 328, 352, 356, 367, 404, 481, 543, 565, 587, 589, 591, 594, 627, 628, 633, 640, 642, 643, 649, 765, 766, 777, 781, 782, 807], "eig_val": [54, 77, 356, 404], "decreas": [54, 77, 356, 404], "eig_vector": [54, 77, 356, 404], "38196": [54, 404], "61803": [54, 404], "eigval": [54, 77, 356], "general_inner_product": [54, 82, 356], "n_mode": [54, 82, 356, 406], "tradit": [54, 82, 356, 406], "inner": [54, 59, 73, 82, 100, 141, 356, 403, 406, 586, 594, 597, 626, 627, 632, 670, 671, 672, 756, 776], "initialize_tuck": [54, 77, 356], "svd": [54, 59, 77, 82, 356, 407, 411, 416, 417, 418, 419, 594, 643], "truncated_svd": [54, 77, 356, 407, 416, 419], "non_neg": [54, 77, 314, 349, 356, 407], "mask": [54, 58, 77, 81, 94, 356, 358, 407, 408, 416, 419, 454, 513, 591, 593, 616, 619, 620, 782], "svd_mask_repeat": [54, 77, 356, 407, 416, 419], "compon": [54, 77, 142, 143, 220, 221, 222, 225, 228, 237, 239, 240, 242, 244, 272, 274, 275, 282, 285, 286, 289, 290, 313, 314, 322, 349, 352, 356, 407, 416, 586, 589, 601, 702, 750, 784, 797, 799, 804, 806], "tuckertensor": [54, 77, 95, 314, 349, 356, 407, 416, 419], "scheme": [54, 77, 356, 407, 416, 760, 788, 803], "tucker": [54, 77, 314, 349, 356, 407, 416], "decomposit": [54, 59, 77, 82, 94, 313, 314, 349, 356, 407, 416, 419, 594, 621, 627, 631, 639, 642, 756, 810], "miss": [54, 77, 356, 358, 407, 416, 419, 454, 736, 756, 757, 761, 764, 765, 768, 777, 779, 782], "everywher": [54, 77, 356, 407, 416, 419], "imput": [54, 77, 356, 407, 416, 419], "kron": [54, 77, 356, 412, 810], "make_svd_non_neg": [54, 77, 356, 418], "nntype": [54, 77, 356, 411], "nndsvd": [54, 77, 356, 411], "singular": [54, 59, 77, 82, 356, 407, 411, 417, 418, 594, 633, 635, 638, 642, 643, 766], "nndsvda": [54, 77, 356, 411], "boutsidi": [54, 77, 356, 411], "gallopoulo": [54, 77, 356, 411], "pattern": [54, 55, 77, 78, 356, 411, 503, 504, 505, 591, 766, 769, 798], "recognit": [54, 77, 356, 411], "1362": [54, 77, 356, 411], "2008": [54, 77, 356, 411, 803], "matrix_exp": [54, 77, 356], "7183": [54, 77, 356, 412], "3891": [54, 77, 356, 412], "mode_dot": [54, 77, 93, 94, 95, 356], "matrix_or_vector": [54, 77, 94, 95, 356, 413], "i_1": [54, 77, 94, 356, 413], "i_k": [54, 77, 94, 356, 413], "i_n": [54, 77, 94, 356, 413], "i_": [54, 77, 94, 356, 367, 413, 484], "multi_dot": [54, 77, 356], "148": [54, 76, 77, 242, 356, 414], "multi_mode_dot": [54, 77, 356], "mat_or_vec_list": [54, 77, 356, 415], "times_0": [54, 356, 415], "vec": [54, 356, 415], "times_1": [54, 356, 415], "cdot": [54, 272, 356, 415, 589], "times_n": [54, 356, 415], "noqa": [54, 94, 219, 286, 355, 356, 391, 415, 589, 595, 651, 732, 741, 778], "partial_tuck": [54, 77, 356], "n_iter_max": [54, 77, 356, 416, 419], "verbos": [54, 77, 356, 416, 419, 779, 784], "return_error": [54, 77, 356, 416, 419], "variat": [54, 77, 356, 416, 419, 768, 777, 779], "reconstruct": [54, 59, 65, 77, 88, 356, 358, 416, 419, 458, 594, 602, 642, 704, 706, 778], "return_erro": [54, 356, 416, 419], "svd_flip": [54, 77, 356], "u_based_decis": [54, 77, 356, 417], "basi": [54, 77, 356, 417, 758, 760, 787], "flip": [54, 61, 77, 84, 94, 230, 356, 358, 417, 438, 439, 589, 596, 776, 786, 787, 789], "decis": [54, 77, 356, 417, 760, 766, 782, 784, 786, 803], "u_adjust": [54, 77, 356, 417], "v_adjust": [54, 77, 356, 417], "compute_uv": [54, 59, 77, 82, 356, 418, 594, 642], "n_eigenvec": [54, 77, 356, 418], "returnedv": [54, 418], "vh": [54, 59, 77, 82, 356, 418, 594, 642], "eigen": [54, 77, 356, 418], "namedtupl": [54, 59, 65, 77, 82, 88, 356, 358, 403, 418, 458, 594, 602, 626, 627, 639, 640, 642, 704, 705, 706], "fixed_factor": [54, 77, 356, 419], "tl": [54, 77, 356, 419], "kolda": [54, 77, 356, 419], "bader": [54, 77, 356, 419], "siam": [54, 77, 356, 419], "review": [54, 77, 356, 419, 756, 758, 765, 768, 777, 780], "vol": [54, 77, 356, 419], "pp": [54, 77, 356, 419], "455": [54, 77, 356, 419], "500": [54, 77, 78, 81, 355, 356, 378, 379, 419, 511, 591], "2009": [54, 77, 356, 419], "_arraywithlossesexperiment": [54, 96], "huber_loss": [54, 77, 357], "delta": [54, 56, 77, 79, 357, 420, 572, 592], "truth": [54, 240, 250, 251, 258, 259, 275, 357, 420, 589, 754, 777, 779], "transit": [54, 77, 357, 420, 803], "huber": [54, 77, 357, 420], "l1_loss": [54, 77, 357], "l1": [54, 59, 77, 82, 357, 361, 420, 421, 423, 464, 594, 649, 764, 787], "targetict": [54, 77, 357, 421, 423, 424], "20000000000000004": [54, 421], "smooth_l1_loss": [54, 77, 357], "smooth": [54, 60, 77, 83, 357, 420, 423, 595, 651, 652, 653, 775], "8125": [54, 423], "soft_margin_loss": [54, 77, 357], "soft": [54, 77, 357, 358, 424, 454, 767], "margin": [54, 77, 357, 424, 777], "35667497": [54, 424, 595, 652], "22314353": [54, 424], "60943791": [54, 424], "manipul": [54, 77, 776, 777, 780, 782, 784, 789, 791, 796, 803], "_arraywithmanipulationexperiment": [54, 96], "as_strid": [54, 77, 358], "nativeshap": [54, 58, 61, 63, 77, 84, 86, 122, 123, 130, 135, 142, 147, 358, 362, 425, 435, 440, 448, 451, 467, 468, 469, 470, 471, 535, 548, 553, 555, 586, 591, 593, 596, 600, 606, 608, 610, 612, 614, 661, 694, 695, 696, 772, 774], "byte": [54, 55, 73, 77, 78, 96, 134, 358, 425, 529, 586, 591, 808, 809], "associative_scan": [54, 77, 358], "revers": [54, 55, 59, 67, 77, 82, 90, 96, 97, 356, 358, 367, 410, 426, 438, 439, 482, 483, 502, 591, 594, 596, 604, 647, 658, 712, 713, 756, 764, 765, 766, 768, 769, 776, 777, 782, 789, 792], "scan": [54, 77, 358, 426, 792], "atleast_1d": [54, 77, 358], "ari": [54, 77, 358, 427, 428, 429, 433, 442, 459], "a1": [54, 78, 427, 428, 429, 495], "a2": [54, 427, 428, 429], "atleast_2d": [54, 77, 358], "atleast_3d": [54, 77, 358], "concat_from_sequ": [54, 77, 358], "input_sequ": [54, 77, 358, 432], "new_axi": [54, 77, 358, 432, 789], "dsplit": [54, 77, 358], "indices_or_sect": [54, 77, 358, 433, 442, 459], "3rd": [54, 77, 358, 433], "dstack": [54, 77, 358], "fill_diagon": [54, 77, 358], "fill_diag": [54, 436], "fortran": [54, 61, 77, 84, 358, 437, 596, 661, 803, 807], "layout": [54, 61, 77, 84, 358, 437, 596, 661, 762, 776, 777, 782], "fliplr": [54, 77, 358, 776], "diag": [54, 59, 77, 82, 358, 438, 439, 594, 627, 784], "flipud": [54, 77, 358, 776], "fold": [54, 77, 358, 448, 449, 765], "unfold": [54, 77, 94, 356, 358, 407, 440, 448, 450], "folded_tensor": [54, 358, 440], "heavisid": [54, 77, 358], "5000": [54, 358, 441, 594, 630], "hsplit": [54, 77, 358], "horizont": [54, 77, 358, 442, 503, 591], "hstack": [54, 77, 358], "vstack": [54, 77, 358, 443], "i0": [54, 77, 358, 367, 484], "bessel": [54, 67, 77, 90, 308, 349, 358, 444, 604, 719, 721], "kind": [54, 67, 77, 164, 167, 168, 277, 367, 444, 482, 483, 488, 587, 589, 604, 712, 713, 718, 720, 755, 777, 779, 782, 784, 792], "26606588": [54, 77, 358, 444], "2795853": [54, 77, 358, 444], "88079259": [54, 77, 358, 444], "row_mod": [54, 77, 358, 445], "column_mod": [54, 77, 358, 445], "ascend": [54, 66, 77, 89, 358, 365, 445, 474, 603, 708, 710], "prod": [54, 55, 67, 78, 90, 356, 358, 408, 410, 445, 489, 504, 591, 604, 766, 768, 784], "moveaxi": [54, 77, 358], "destin": [54, 77, 358, 446], "unstack": [54, 61, 71, 84, 446, 596, 764, 784, 787, 810], "reorder": [54, 61, 77, 84, 358, 446, 503, 591, 596, 658], "stat_length": [54, 77, 358, 447], "constant_valu": [54, 77, 358, 447], "end_valu": [54, 77, 358, 447], "reflect_typ": [54, 77, 358, 447], "partial_fold": [54, 77, 358], "skip_begin": [54, 77, 358, 448, 449, 450, 451], "untouch": [54, 77, 358, 448, 449, 450, 451], "partial_tensor_to_vec": [54, 77, 358], "skip_end": [54, 77, 358, 449, 450], "vectoris": [54, 77, 94, 358, 449, 451], "partial_unfold": [54, 77, 358], "ravel_tensor": [54, 77, 358, 450], "n_1": [54, 77, 358, 450], "n_2": [54, 77, 358, 450], "n_i": [54, 77, 356, 358, 408, 450], "partial_vec_to_tensor": [54, 77, 358], "rot90": [54, 77, 358, 776], "rotat": [54, 77, 358, 453, 791], "soft_threshold": [54, 77, 358], "take_along_axi": [54, 77, 358], "arr": [54, 55, 74, 77, 172, 358, 431, 452, 455, 535, 587, 762, 766, 767], "top_k": [54, 77, 358], "largest": [54, 71, 77, 164, 167, 356, 358, 417, 456, 587, 594, 633, 642, 791], "sort": [54, 65, 71, 77, 88, 97, 291, 356, 358, 367, 403, 456, 474, 488, 589, 594, 602, 626, 627, 642, 643, 704, 708, 709, 710, 750, 755, 765, 780], "retun": [54, 77, 358, 456], "smallest": [54, 71, 77, 164, 167, 235, 358, 456, 587, 589, 594, 633], "unfolded_tensor": [54, 358, 457], "unique_consecut": [54, 77, 358], "vsplit": [54, 77, 358], "vertic": [54, 77, 358, 459, 460, 503, 591, 758], "_arraywithnormsexperiment": [54, 96], "varianc": [54, 67, 77, 90, 361, 461, 463, 604, 721, 731, 735], "nsc": [54, 77, 361, 461, 462, 463, 735], "braodcast": [54, 77, 361, 461], "running_mean": [54, 77, 361, 461, 463, 735], "running_var": [54, 77, 361, 461, 463, 735], "nc": [54, 77, 361, 461, 462, 463, 735], "group_norm": [54, 77, 361], "num_group": [54, 77, 361, 462], "group": [54, 77, 358, 361, 458, 462, 593, 598, 606, 613, 614, 675, 760, 764, 766, 773, 777, 778, 799, 802, 808], "instance_norm": [54, 77, 361], "l1_normal": [54, 77, 361], "33333334": [54, 361, 464, 466, 574, 592, 593, 594, 615, 649], "33333337": [54, 137, 361, 464, 574, 586, 592], "28571439": [54, 361, 464], "l2_normal": [54, 77, 361, 466], "l2": [54, 59, 82, 93, 94, 361, 465, 466, 594, 649, 732, 764], "44721359": [54, 77, 361, 465, 466], "89442718": [54, 77, 361, 465, 466], "60000002": [54, 90, 97, 361, 465, 466, 716], "80000001": [54, 361, 465, 466], "lp_normal": [54, 77, 361], "lp": [54, 361, 466], "_arraywithrandomexperiment": [54, 96], "bernoulli": [54, 77, 355, 362, 378, 379, 380], "event": [54, 77, 362, 467, 779], "entri": [54, 61, 71, 77, 84, 88, 137, 358, 362, 438, 439, 467, 586, 596, 598, 663, 686, 704, 757, 765, 779, 803], "parameter": [54, 63, 77, 86, 362, 467, 468, 470, 471, 600, 693, 695, 696], "odd": [54, 77, 277, 358, 362, 447, 467, 589, 755, 760], "drawn": [54, 63, 77, 86, 362, 467, 468, 469, 470, 471, 600, 693, 694, 695, 696, 731, 779], "dirichlet": [54, 77, 362], "10598304": [54, 362, 469], "21537054": [54, 362, 469], "67864642": [54, 362, 469], "48006698": [54, 362, 469], "07472073": [54, 362, 469], "44521229": [54, 362, 469], "55479872": [54, 362, 469], "05426367": [54, 362, 469], "39093761": [54, 362, 469], "19531053": [54, 362, 469], "51675832": [54, 362, 469], "28793114": [54, 362, 469], "12315625": [54, 362, 469], "29823365": [54, 362, 469], "5786101": [54, 362, 469], "15564976": [54, 362, 469], "50542368": [54, 362, 469], "33892656": [54, 362, 469], "1325352": [54, 362, 469], "44439589": [54, 362, 469], "42306891": [54, 362, 469], "gamma": [54, 62, 77, 85, 326, 336, 352, 362, 367, 485, 599, 692], "poisson": [54, 77, 357, 362, 422], "rate": [54, 56, 77, 79, 355, 362, 396, 471, 573, 576, 578, 579, 580, 592, 597, 670, 671, 672, 736, 765], "paramt": [54, 471, 598, 680, 690], "lam": [54, 77, 362, 471], "_arraywithsearchingexperiment": [54, 96], "unravel_index": [54, 77, 363], "unravel": [54, 77, 363, 472], "_arraywithsetexperiment": [54, 96], "_arraywithsortingexperiment": [54, 96], "lexsort": [54, 77, 365], "indirectli": [54, 77, 365, 474], "statist": [54, 77, 92, 358, 447, 735, 748, 756, 766, 779, 780, 803], "_arraywithstatisticalexperiment": [54, 96], "bincount": [54, 77, 367], "minlength": [54, 77, 367, 479], "corrcoef": [54, 77, 367], "rowvar": [54, 77, 367, 480, 481], "relationship": [54, 77, 480, 731], "cov": [54, 77, 367], "bia": [54, 58, 77, 81, 85, 367, 481, 530, 591, 593, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 692, 732, 773, 779, 784, 788], "ddof": [54, 77, 367, 481], "fweight": [54, 77, 367, 481], "aweight": [54, 77, 367, 481], "overridden": [54, 77, 367, 481, 736, 761], "unbias": [54, 67, 77, 90, 367, 481, 604, 721], "typic": [54, 77, 320, 333, 352, 367, 481, 603, 710, 732, 760, 773, 802, 810], "assign": [54, 77, 94, 367, 481, 756, 758, 762, 766, 776, 786], "covari": [54, 77, 367, 481], "cummax": [54, 77, 367], "exclus": [54, 55, 67, 71, 77, 78, 90, 121, 356, 367, 416, 482, 483, 522, 523, 526, 586, 591, 600, 604, 694, 712, 713, 764, 766, 773, 789, 807, 809], "cumul": [54, 67, 77, 90, 367, 482, 483, 604, 712, 713, 791], "uint64": [54, 67, 161, 166, 168, 169, 179, 181, 184, 300, 347, 367, 482, 483, 587, 604, 712, 713, 718, 720, 766, 779, 784], "uint16": [54, 67, 156, 161, 166, 167, 176, 300, 347, 367, 482, 483, 587, 604, 712, 713, 718, 720, 766, 777, 779, 784], "bit": [54, 67, 163, 164, 167, 230, 231, 233, 367, 482, 483, 587, 589, 604, 712, 713, 718, 720, 755, 756, 757, 764, 765, 766, 768, 773, 784, 786, 809], "uint32": [54, 67, 161, 166, 167, 168, 190, 300, 347, 367, 482, 483, 587, 604, 712, 713, 718, 720, 766, 779, 784], "cummin": [54, 77, 367], "histogram": [54, 77, 367], "extend_lower_interv": [54, 77, 367, 484], "extend_upper_interv": [54, 77, 367, 484], "densiti": [54, 77, 367, 484], "monoton": [54, 77, 367, 484], "rightmost": [54, 77, 367, 484], "c1": [54, 77, 367, 484, 764], "ff": [54, 77, 367, 484], "c_": [54, 77, 367, 484], "igamma": [54, 77, 367], "incomplet": [54, 77, 367, 485, 758], "3614": [54, 77, 367, 485], "2085": [54, 77, 367, 485], "median": [54, 77, 358, 367, 447, 488], "nanmean": [54, 77, 367], "6666666666666665": [54, 77, 367, 487], "nanmedian": [54, 77, 367], "overwrite_input": [54, 77, 367, 488], "treat": [54, 71, 77, 97, 277, 338, 352, 358, 367, 455, 488, 489, 589, 775, 779, 785, 789], "undefin": [54, 77, 358, 367, 368, 447, 488, 491, 770, 775], "nanprod": [54, 77, 367], "Not": [54, 77, 338, 352, 356, 367, 405, 489, 584, 762, 770, 778, 787, 788, 792], "quantil": [54, 77, 367], "inclus": [54, 77, 121, 367, 490, 586, 600, 694, 751, 762, 776, 782], "higher": [54, 77, 356, 358, 367, 416, 419, 427, 428, 429, 490, 731, 766, 776, 783, 784, 789, 792, 800, 803, 804, 807, 809, 810], "midpoint": [54, 77, 367, 490], "surround": [54, 77, 367, 490, 782], "whichev": [54, 77, 367, 490], "_arraywithutilityexperiment": [54, 96], "optional_get_el": [54, 77, 368], "empti": [54, 55, 71, 78, 121, 300, 347, 358, 368, 447, 491, 498, 535, 586, 591, 594, 598, 604, 605, 646, 649, 687, 718, 720, 722, 723, 756, 757, 761, 763, 766, 767, 776], "_arraywithgener": [55, 96], "all_equ": [55, 78, 591], "equality_matrix": [55, 78, 492, 591], "array_equ": [55, 78, 591], "assert_supports_inplac": [55, 78, 591], "ivybackendexcept": [55, 78, 496, 520, 591, 745, 761, 767, 770], "clip_matrix_norm": [55, 78, 591], "894": [55, 78, 498, 499, 591, 599, 692], "clip_vector_norm": [55, 78, 591], "default_v": [55, 502, 591], "catch_except": [55, 502, 591], "rev": [55, 502, 591], "with_cal": [55, 502, 591], "catch": [55, 502, 591, 774, 779], "einops_rearrang": [55, 78, 591], "axes_length": [55, 78, 503, 504, 505, 591], "arrang": [55, 503, 591], "rearrang": [55, 78, 503, 505, 591], "einops_reduc": [55, 78, 591], "einops_repeat": [55, 78, 591], "fourier_encod": [55, 78, 591], "max_freq": [55, 78, 507, 591], "oppos": [55, 78, 507, 591, 766], "geometr": [55, 78, 507, 591, 594, 647], "seper": [55, 507, 591, 768, 778], "0000000e": [55, 78, 507, 591], "2246468e": [55, 78, 507, 591], "4492936e": [55, 507, 591], "6739404e": [55, 78, 507, 591], "batch_dim": [55, 78, 510, 511, 591, 738], "gather_nd": [55, 78, 591], "get_num_dim": [55, 78, 591], "as_arrai": [55, 78, 514, 548, 591, 738], "has_nan": [55, 78, 591], "include_inf": [55, 78, 516, 570, 591], "inplace_decr": [55, 78, 591], "val": [55, 71, 76, 78, 252, 518, 519, 520, 539, 540, 541, 589, 591, 766, 776, 786], "decrement": [55, 78, 518, 591], "inplace_incr": [55, 78, 591], "increment": [55, 78, 519, 591, 758, 803], "inplace_upd": [55, 78, 538, 591, 729, 776], "ensure_in_backend": [55, 78, 520, 591, 776], "keep_input_dtyp": [55, 78, 520, 591, 776], "is_arrai": [55, 78, 591, 776, 777], "is_ivy_arrai": [55, 78, 591, 776, 786], "is_ivy_contain": [55, 591], "is_native_arrai": [55, 78, 175, 523, 587, 591, 786], "isin": [55, 78, 591], "test_el": [55, 78, 527, 591], "assume_uniqu": [55, 78, 527, 591], "invert": [55, 78, 230, 527, 589, 591, 594, 634], "scatter_flat": [55, 78, 591], "occupi": [55, 164, 167, 534, 535, 587, 591], "scatter_nd": [55, 78, 591, 782, 786], "stable_divid": [55, 78, 591, 773], "denomin": [55, 62, 78, 85, 541, 549, 563, 591, 599, 692, 735, 773, 781, 792, 800], "min_denomin": [55, 78, 541, 549, 563, 591, 781], "_min_denomin": [55, 549, 591], "stable_pow": [55, 78, 591], "min_bas": [55, 78, 540, 550, 562, 591, 735, 781], "stabl": [55, 66, 78, 89, 146, 315, 349, 365, 474, 540, 541, 549, 550, 562, 563, 586, 591, 603, 708, 711, 757, 762, 766, 777, 781, 784, 792], "00004": [55, 78, 550, 591], "00008": [55, 78, 550, 591], "00004000e": [55, 550], "56002560e": [55, 550], "60001200e": [55, 550], "09602048e": [55, 550], "supports_inplace_upd": [55, 78, 591], "to_fil": 55, "fid": 55, "sep": 55, "format_": 55, "binari": [55, 58, 60, 81, 83, 229, 232, 234, 269, 289, 357, 422, 424, 589, 593, 595, 616, 651], "recov": [55, 770, 777], "to_scalar": [55, 78, 591], "value_is_nan": [55, 78, 591], "_arraywithgradi": [56, 96], "adam_step": [56, 79, 592], "mw": [56, 79, 572, 573, 592, 788], "vw": [56, 79, 572, 573, 592, 788], "beta1": [56, 79, 494, 572, 573, 578, 591, 592, 736, 788], "beta2": [56, 79, 494, 572, 573, 578, 591, 592, 736, 788], "epsilon": [56, 59, 60, 79, 82, 83, 494, 572, 573, 578, 591, 592, 594, 595, 635, 638, 651, 652, 653, 733, 735, 736, 764, 773, 776, 788], "dc": [56, 79, 572, 573, 576, 578, 579, 580, 592], "dw": [56, 79, 572, 573, 576, 578, 579, 580, 592], "forget": [56, 79, 572, 573, 578, 592, 736, 750, 766], "prevent": [56, 79, 572, 573, 578, 592, 593, 604, 616, 720, 731, 736, 756, 758, 765, 766, 770, 776, 777, 780], "dcdw": [56, 79, 572, 573, 576, 578, 579, 592], "adam_step_delta": [56, 79, 572, 592], "2020105": [56, 572, 592], "22187898": [56, 572, 592], "24144873": [56, 572, 592], "10000002": [56, 90, 294, 347, 572, 716], "20000005": [56, 294, 347, 572], "00300002": [56, 572], "00800002": [56, 572], "adam_upd": [56, 79, 592, 788], "mw_tm1": [56, 79, 573, 578, 592], "vw_tm1": [56, 79, 573, 578, 592], "stop_gradi": [56, 79, 212, 494, 573, 576, 578, 579, 580, 588, 591, 592, 597, 670, 671, 672, 736, 788], "ws_new": [56, 79, 573, 578, 579, 580, 592], "updated_weight": [56, 79, 573, 592], "92558753": [56, 573], "92558873": [56, 573, 592], "92558718": [56, 573, 592], "00000063e": [56, 79, 573, 592], "00000016e": [56, 79, 573, 592], "00000086e": [56, 79, 573, 592], "gradient_descent_upd": [56, 79, 592, 597, 670, 671, 672], "descent": [56, 79, 576, 592, 736, 788, 803], "new_weight": [56, 79, 576, 578, 592, 787], "lamb_upd": [56, 79, 592], "max_trust_ratio": [56, 79, 578, 592, 736], "decay_lambda": [56, 79, 578, 579, 592, 736], "trust": [56, 79, 578, 592, 736], "ratio": [56, 79, 578, 592, 736], "decai": [56, 79, 578, 579, 592, 736], "lamb": [56, 79, 578, 592, 736, 788], "784": [56, 578, 592], "lars_upd": [56, 79, 592], "lar": [56, 79, 579, 592, 736, 788], "optimizer_upd": [56, 79, 592], "effective_grad": [56, 79, 580, 592], "3e": [56, 79, 580, 592], "preserve_typ": [56, 79, 581, 592], "_arraywithimag": [57, 96], "_arraywithlay": [58, 96], "conv1d": [58, 81, 593, 732], "filter_format": [58, 81, 593, 606, 607, 609, 610, 611, 613], "channel_last": [58, 81, 593, 606, 607, 609, 610, 611, 613, 614], "x_dilat": [58, 81, 593, 606, 607, 609, 610, 611, 613], "fw": [58, 81, 367, 481, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 757, 779], "d_out": [58, 81, 593, 606, 607, 608, 609, 610, 611, 612, 613, 614], "channel_first": [58, 81, 593, 606, 607, 609, 610, 611, 613, 614], "wio": [58, 593, 606, 607, 608, 613], "conv1d_transpos": [58, 81, 593], "output_shap": [58, 81, 593, 606, 608, 610, 612, 614, 732], "fh": [58, 81, 593, 598, 606, 609, 610, 611, 612, 613, 614, 615, 685], "hwio": [58, 593, 606, 607, 609, 613], "conv2d_transpos": [58, 81, 593], "conv3d": [58, 81, 593, 612, 732], "fd": [58, 81, 593, 606, 611, 612, 613, 614], "conv3d_transpos": [58, 81, 593], "depthwise_conv2d": [58, 81, 593], "noise_shap": [58, 81, 593, 616], "droput": [58, 616], "42857146": [58, 593, 616], "85714293": [58, 593, 616], "28571415": [58, 81, 593, 616], "71428585": [58, 81, 593, 616], "14285755": [58, 81, 593, 616], "5714283": [58, 593, 616], "4285717": [58, 81, 593, 616], "8571434": [58, 81, 593, 616], "2857151": [58, 593, 616], "dropout1d": [58, 81, 355], "droput1d": [58, 378, 379], "dropout2d": [58, 81, 355], "dropout3d": [58, 81, 355], "droput3d": [58, 380], "outer_batch_shap": [58, 81, 593, 617], "inner_batch_shap": [58, 81, 593, 617], "in_featur": [58, 81, 593, 617, 779], "out_featur": [58, 81, 593, 617, 779], "134": [58, 594, 617, 634], "lstm_updat": [58, 81, 593, 784], "init_h": [58, 81, 593, 618, 784], "init_c": [58, 81, 593, 618, 784], "recurrent_kernel": [58, 81, 593, 618, 784], "recurrent_bia": [58, 81, 593, 618, 784], "hidden": [58, 81, 593, 618, 732, 763, 770, 784, 788], "recurr": [58, 81, 593, 618, 784, 803, 807], "timestep": [58, 81, 593, 618, 619, 732, 784], "h_i": [58, 81, 618], "c_i": [58, 81, 618], "rc": [58, 81, 618], "multi_head_attent": [58, 81, 593, 776], "num_head": [58, 81, 593, 619, 732], "in_proj_weight": [58, 81, 593, 619], "q_proj_weight": [58, 81, 593, 619], "k_proj_weight": [58, 81, 593, 619], "v_proj_weight": [58, 81, 593, 619], "out_proj_weight": [58, 81, 593, 619], "in_proj_bia": [58, 81, 593, 619], "out_proj_bia": [58, 81, 593, 619], "is_caus": [58, 81, 593, 619, 620], "return_attention_weight": [58, 81, 593, 619], "average_attention_weight": [58, 81, 593, 619], "scaled_dot_product_attent": [58, 81, 593], "dropout_p": [58, 81, 593, 620], "num_queri": [58, 81, 593, 619, 620], "feat_dim": [58, 81, 593, 620], "num_kei": [58, 81, 593, 619, 620], "causal": [58, 81, 593, 619, 620], "attent": [58, 81, 593, 619, 620, 732, 758, 761, 797], "score": [58, 81, 357, 424, 593, 620, 750], "40000001": [58, 70, 96, 97, 106, 109, 294, 347, 583, 593, 602, 620, 705], "29999995": [58, 294, 347, 593, 602, 620, 705], "19994521": [58, 593, 620], "09994531": [58, 593, 620], "30000019": [58, 593, 620], "_arraywithlinearalgebra": [59, 96], "choleski": [59, 82, 594, 776], "625": [59, 77, 330, 594, 621], "vif": [59, 82, 622], "det": [59, 82, 594, 640, 765], "axis1": [59, 61, 82, 84, 594, 596, 625, 646, 666], "axis2": [59, 82, 594, 625, 646], "eigh": [59, 82, 356, 403, 594, 626], "uplo": [59, 82, 594, 627, 628], "eigvalsh": [59, 82, 594], "array_lik": [59, 82, 355, 357, 358, 398, 420, 423, 424, 452, 594, 629, 637], "3d": [59, 77, 355, 378, 379, 429, 594, 629, 732, 782, 791], "105": [59, 81, 593, 594, 595, 616, 617, 629, 637, 651], "149": [59, 594, 629], "171": [59, 594, 629], "143": [59, 76, 97, 289, 589, 594, 629, 768], "203": [59, 76, 228, 594, 599, 629, 692], "233": [59, 594, 629], "inv": [59, 82, 594], "transpose_a": [59, 82, 594, 632], "transpose_b": [59, 82, 594, 632], "adjoint_a": [59, 82, 594, 632], "adjoint_b": [59, 82, 594, 632], "matrix_norm": [59, 82, 594], "ord": [59, 82, 594, 633, 649], "fro": [59, 82, 357, 420, 594, 633], "nuc": [59, 82, 594, 633], "matrix_pow": [59, 82, 594], "matrix_rank": [59, 82, 594], "hermitian": [59, 82, 356, 403, 404, 594, 626, 627, 628, 635, 642], "largest_singular_valu": [59, 82, 594, 635, 638], "defici": [59, 594, 635], "matrix_transpos": [59, 82, 594, 786], "outer": [59, 82, 94, 594, 597, 670, 671, 672, 756], "pinv": [59, 82, 594], "pseudo": [59, 82, 594, 638, 775], "99999988": [59, 82, 594, 638], "qr": [59, 82, 594, 778], "orthonorm": [59, 82, 594, 639, 642], "complet": [59, 71, 82, 594, 639, 756, 757, 758, 760, 761, 764, 765, 768, 770, 773, 777, 778, 779, 782, 786, 787, 797, 801], "slogdet": [59, 82, 594], "logabsdet": [59, 82, 594, 640], "natur": [59, 82, 242, 260, 261, 262, 263, 282, 336, 352, 589, 594, 640, 761, 768, 770, 778, 791, 797], "098611": [59, 594, 640], "solv": [59, 82, 356, 411, 594, 750, 757, 760, 777, 785, 791, 805], "full_matric": [59, 82, 594, 642], "svf": [59, 642], "reconstructed_x": [59, 594, 642], "svdval": [59, 82, 594], "tensorsolv": [59, 82, 594], "vander": [59, 82, 594], "vandermond": [59, 82, 594, 647], "vecdot": [59, 82, 594], "vector_norm": [59, 82, 594], "singleton": [59, 64, 67, 68, 82, 87, 90, 91, 594, 596, 601, 604, 605, 649, 657, 664, 700, 715, 716, 717, 718, 719, 720, 721, 722, 723, 784], "mathemat": [59, 82, 222, 227, 239, 244, 246, 262, 272, 584, 589, 594, 633, 649, 766, 777, 782, 803, 809], "manhattan": [59, 82, 594, 649], "euclidean": [59, 82, 94, 594, 649], "7416575": [59, 82, 594, 649], "vector_to_skew_symmetric_matrix": [59, 82, 594], "_arraywithloss": [60, 96], "binary_cross_entropi": [60, 83, 595, 765], "from_logit": [60, 83, 595, 651, 733], "pos_weight": [60, 83, 595, 651], "amount": [60, 83, 214, 588, 595, 651, 652, 653, 757, 765, 767, 778], "crossentropi": [60, 83, 595, 651], "357": [60, 83, 595, 651, 653], "223": [60, 83, 595, 651, 653], "3862944": [60, 595, 652], "sparse_cross_entropi": [60, 83, 595], "_arraywithmanipul": [61, 96], "x_min": [61, 84, 596, 654, 789], "x_max": [61, 84, 596, 654, 789], "before_1": [61, 84, 358, 447, 596, 656, 669], "after_1": [61, 84, 358, 447, 596, 656, 669], "before_n": [61, 84, 358, 447, 596, 656, 669], "after_n": [61, 84, 358, 447, 596, 656, 669], "repetit": [61, 84, 596, 660, 667, 782], "fit": [61, 84, 596, 660, 756, 777, 784, 799, 800, 803], "flat": [61, 71, 84, 363, 472, 534, 591, 596, 660, 730], "allowzero": [61, 84, 596, 661], "remain": [61, 64, 77, 84, 87, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 355, 378, 379, 380, 398, 589, 596, 598, 601, 661, 679, 702, 757, 758, 765, 768, 770, 773, 780, 782, 792], "roll": [61, 84, 596, 772], "shift": [61, 73, 84, 97, 136, 146, 231, 233, 315, 349, 586, 589, 596, 662, 757, 758, 767, 768, 772], "restor": [61, 84, 596, 662, 771], "num_or_size_split": [61, 71, 84, 596, 663, 784], "with_remaind": [61, 71, 84, 596, 663], "squeezabl": [61, 596, 664], "swapax": [61, 84, 596], "axis0": [61, 84, 596, 666], "swap_ax": [61, 666], "tile": [61, 78, 84, 505, 596], "unpack": [61, 84, 596, 668, 778, 779], "zero_pad": [61, 84, 596], "_arraywithnorm": [62, 96], "layer_norm": [62, 85, 599], "normalized_idx": [62, 85, 599, 692], "new_std": [62, 85, 599, 692, 735], "learnabl": [62, 85, 597, 599, 672, 692, 732, 735, 789], "deviat": [62, 63, 67, 85, 86, 90, 599, 600, 604, 692, 695, 719, 731, 735, 760, 798], "0976": [62, 599, 692], "3452": [62, 599, 692], "2740": [62, 599, 692], "1047": [62, 599, 692], "5886": [62, 599, 692], "2732": [62, 599, 692], "7696": [62, 599, 692], "7024": [62, 599, 692], "2518": [62, 599, 692], "826": [62, 599, 692], "178": [62, 599, 692], "981": [62, 599, 692], "831": [62, 599, 692], "421": [62, 599, 692], "_arraywithrandom": [63, 96], "multinomi": [63, 86, 362, 469, 600], "population_s": [63, 86, 600, 693], "num_sampl": [63, 86, 600, 693], "unnorm": [63, 86, 600, 693, 779], "popul": [63, 67, 71, 86, 90, 600, 604, 693, 719, 721, 766, 767, 776, 779, 784, 809], "draw": [63, 86, 362, 467, 469, 471, 600, 693, 695, 696, 731, 756, 760, 778, 779], "half": [63, 86, 121, 286, 586, 589, 600, 694, 696, 754, 782], "235": [63, 695], "float16": [63, 74, 86, 134, 156, 158, 159, 164, 166, 300, 328, 347, 352, 586, 587, 594, 649, 695, 696, 754, 766, 777, 779], "807": [63, 695], "_arraywithsearch": [64, 96], "select_last_index": [64, 87, 601, 699, 700], "occurr": [64, 358, 367, 458, 479, 601, 602, 699, 700, 704], "argmin": [64, 87, 601], "output_dtyp": [64, 87, 601, 700], "argwher": [64, 87, 601], "nonzero": [64, 87, 220, 221, 222, 225, 228, 237, 239, 242, 244, 246, 272, 285, 290, 589, 601], "as_tupl": [64, 87, 601, 702], "fewer": [64, 87, 601, 702], "_arraywithset": [65, 96], "unique_al": [65, 88, 602], "by_valu": [65, 88, 602, 704], "inverse_indic": [65, 88, 358, 458, 602, 704, 706], "unique_count": [65, 88, 602], "unique_invers": [65, 88, 602], "unique_valu": [65, 88, 602], "admonit": [65, 707], "dask": [65, 602, 704, 705, 706, 707, 797], "difficult": [65, 602, 704, 705, 706, 707, 758, 760, 766, 779, 792], "omit": [65, 282, 589, 602, 704, 705, 706, 707, 772, 776, 777], "x_i": [65, 67, 76, 219, 220, 221, 224, 225, 226, 228, 230, 235, 236, 237, 242, 244, 245, 252, 253, 254, 255, 256, 260, 261, 262, 263, 267, 274, 279, 282, 283, 284, 285, 286, 287, 289, 290, 292, 322, 341, 352, 589, 602, 604, 704, 705, 706, 707, 715, 716, 717, 719, 720, 721, 731, 769], "x_j": [65, 602, 704, 705, 706, 707], "impli": [65, 602, 704, 705, 706, 707, 779], "typeerror": [65, 88, 602, 707, 786], "_arraywithsort": [66, 96], "stabil": [66, 89, 549, 550, 591, 603, 708, 711, 766, 775, 780, 782], "maintain": [66, 89, 603, 708, 711, 758, 760, 771, 776, 778, 779, 796, 802], "msort": [66, 89, 603], "searchsort": [66, 89, 603], "side": [66, 89, 332, 352, 603, 710, 732, 744, 757, 758, 763], "sorter": [66, 89, 603, 710], "ret_dtyp": [66, 89, 603, 710], "_arraywithstatist": [67, 96], "cumprod": [67, 90, 604, 777, 789], "cumsum": [67, 90, 604, 766], "einsum": [67, 90, 604], "equat": [67, 77, 90, 305, 349, 594, 604, 641, 714, 744, 765, 803], "operand": [67, 77, 81, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 341, 345, 352, 353, 355, 397, 589, 594, 604, 640, 646, 714, 715, 717, 718, 720, 744, 761, 764, 769, 777], "describ": [67, 77, 222, 239, 240, 272, 275, 277, 362, 365, 471, 474, 589, 593, 604, 619, 714, 718, 720, 753, 756, 757, 758, 763, 765, 776, 777, 779, 784, 789, 803], "contract": [67, 594, 604, 644, 714], "seq": [67, 604, 714], "ii": [67, 90, 604, 714, 758], "jk": [67, 604, 714], "ik": [67, 604, 714], "126": [67, 104, 278, 583, 589, 594, 604, 634, 714], "510": [67, 604, 714], "special": [67, 82, 94, 96, 97, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 341, 352, 589, 594, 604, 640, 646, 715, 716, 717, 718, 719, 720, 721, 731, 756, 760, 761, 763, 765, 768, 769, 770, 772, 776, 778, 779, 780, 782, 803, 804, 805], "arithmet": [67, 90, 233, 239, 272, 589, 604, 716, 777], "propag": [67, 233, 589, 604, 715, 716, 717, 719, 720, 721, 775], "04999995": [67, 716], "freedom": [67, 90, 604, 719, 721, 762], "constitut": [67, 90, 604, 719, 721, 773, 784, 804], "commonli": [67, 90, 604, 719, 721, 770, 773, 775], "81649661": [67, 604, 719], "6666665": [67, 721, 787], "667": [67, 78, 239, 499, 549, 589, 591, 721], "_arraywithutil": [68, 96], "AND": [68, 91, 229, 240, 266, 589, 605, 722], "invalid": [68, 91, 594, 596, 605, 648, 657, 722, 723, 757, 766], "OR": [68, 91, 232, 268, 275, 589, 605, 723, 757, 758, 775], "_wrap_funct": [69, 92, 763, 773, 774], "function_nam": [69, 92, 756, 780], "new_funct": [69, 92, 763], "add_ivy_array_instance_method": 69, "cl": [69, 92], "toi": [69, 92], "arrayexampl": 69, "hasattr": [69, 92], "_containerwithactiv": [70, 97], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 544, 566, 591, 781, 787], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 544, 566, 591, 781], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "dynamic_backend": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 734, 762, 781], "build_cal": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "containerbas": [70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 764], "_static_gelu": 70, "key_chain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 432, 434, 443, 445, 447, 448, 449, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 481, 482, 483, 484, 490, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "to_appli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 432, 434, 443, 445, 447, 448, 449, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 481, 482, 483, 484, 490, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 598, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "prune_unappli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 432, 434, 443, 445, 447, 448, 449, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 481, 482, 483, 484, 490, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 598, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 686, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "map_sequ": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 432, 434, 443, 445, 447, 448, 449, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 473, 474, 481, 482, 483, 484, 490, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "formul": [70, 104, 728], "prune": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 378, 379, 380, 420, 421, 423, 424, 427, 428, 429, 432, 453, 455, 456, 461, 463, 464, 465, 466, 468, 481, 482, 483, 484, 492, 495, 496, 498, 499, 503, 504, 505, 506, 507, 510, 511, 514, 516, 518, 519, 520, 522, 523, 526, 534, 535, 549, 550, 552, 554, 556, 557, 570, 576, 581, 598, 607, 608, 609, 610, 616, 617, 620, 621, 622, 627, 628, 629, 630, 632, 633, 635, 637, 639, 640, 646, 651, 652, 653, 654, 658, 661, 662, 663, 664, 665, 668, 669, 686, 687, 688, 689, 693, 694, 695, 696, 698, 701, 704, 705, 706, 707, 708, 712, 713, 716, 718, 719, 721, 722, 723, 765], "static_gelu": 70, "046": 70, "_static_hardswish": 70, "_static_leaky_relu": 70, "static_leaky_relu": 70, "38999999": [70, 77, 106, 294, 347], "_static_log_softmax": 70, "static_log_softmax": 70, "371": [70, 107], "_static_mish": 70, "static_mish": 70, "30883577": [70, 108, 583], "28903052": [70, 108, 583], "10714479": [70, 108, 583], "_static_relu": 70, "static_relu": 70, "_static_sigmoid": 70, "static_sigmoid": 70, "2689414": [70, 110, 111, 583], "7310586": [70, 110, 111, 583], "88079703": [70, 110, 583], "62245935": [70, 110], "4750208": [70, 110], "_static_softmax": 70, "static_softmax": 70, "72844321": [70, 111], "19852395": [70, 111], "07303288": [70, 111], "_static_softplu": 70, "revert": [70, 112, 583], "static_softplu": 70, "53499615": 70, "42036411": 70, "948": [70, 112], "166": [70, 104, 583], "159": [70, 104, 583, 593, 617], "slice": [71, 78, 146, 315, 349, 358, 431, 452, 455, 510, 511, 513, 539, 586, 591, 598, 682, 803], "dictionari": [71, 88, 97, 211, 574, 588, 592, 707, 761, 765, 766, 773, 777, 778, 787, 792], "asynchron": [71, 97, 803], "wait": [71, 97, 544, 591, 750, 756, 758, 765, 777], "arriv": [71, 97, 544, 591, 782], "cont_list_join": [71, 97], "limit": [71, 97, 164, 167, 498, 499, 587, 591, 596, 654, 731, 738, 750, 757, 758, 763, 765, 768, 770, 777, 779, 782, 787, 792, 802, 803, 804], "whitespac": [71, 97], "indent": [71, 97, 787], "newlin": [71, 97, 769], "termin": [71, 97, 757, 758, 764, 771, 784, 787], "rebuild": [71, 97, 752], "constructor": [71, 97, 494, 591, 729, 737, 766, 767, 769, 786], "kept": [71, 97, 597, 670, 671, 758, 776, 780], "encount": [71, 97, 732, 754, 756, 766, 770, 779], "instruct": [71, 97, 750, 756, 757, 760, 770, 771, 778, 779, 793, 801, 804, 807, 809], "alphabet": [71, 97], "__setitem__": [71, 761, 764, 786], "_cont_at_key_chains_input_as_dict": 71, "current_chain": 71, "ignore_key_error": 71, "_cont_at_key_chains_input_as_seq": 71, "_cont_call_static_method_with_flexible_arg": 71, "static_method": 71, "kw": 71, "self_idx": 71, "_cont_concat_unifi": 71, "_cont_get_dev": 71, "_cont_get_shap": 71, "properti": [71, 94, 95, 96, 100, 734, 736, 760, 764, 773, 778, 779, 786, 787, 788, 809], "_cont_ivi": 71, "_cont_mean_unifi": 71, "_1": 71, "_cont_prune_key_chains_input_as_dict": 71, "return_cont": 71, "_cont_prune_key_chains_input_as_seq": 71, "_cont_slice_kei": 71, "key_slic": 71, "_cont_sum_unifi": 71, "_get_queue_item": 71, "cont_all_fals": 71, "assert_is_bool": 71, "cont_all_key_chain": 71, "include_empti": 71, "cont_all_tru": [71, 764, 787], "cont_as_bool": 71, "cont_assert_contains_sub_contain": 71, "sub_cont": 71, "screen": [71, 756, 757, 787], "cont_assert_contains_sub_structur": 71, "check_shap": [71, 738], "cont_assert_ident": 71, "check_typ": 71, "same_arrai": [71, 787], "arrays_equ": 71, "cont_assert_identical_structur": 71, "assert_and_assign": 71, "strucutr": 71, "congruent": 71, "cont_at_key_chain": 71, "ignore_non": 71, "cont_at_kei": 71, "substr": 71, "cont_combin": 71, "duplic": [71, 598, 675, 762, 769, 774, 775, 778, 788, 809], "configur": [71, 211, 588, 598, 686, 752, 757, 758, 763, 765, 766, 771], "container_rightmost": 71, "cont_common_key_chain": 71, "cont_config": 71, "cont_contains_sub_contain": 71, "cont_contains_sub_structur": 71, "cont_copi": [71, 787], "cont_create_if_abs": 71, "noth": [71, 782, 809], "cont_cutoff_at_depth": 71, "depth_cutoff": 71, "summari": [71, 168, 500, 515, 587, 591, 757, 758, 779], "cont_cutoff_at_height": 71, "height_cutoff": 71, "cont_dev": 71, "belong": [71, 756, 760, 788], "cont_dev_str": 71, "cont_diff": [71, 787], "diff_kei": 71, "detect_key_diff": 71, "detect_value_diff": 71, "detect_shape_diff": 71, "among": [71, 764, 765, 779, 782, 798, 803], "container0": 71, "cont_duplicate_array_keychain": 71, "cont_find_sub_contain": 71, "sub_cont_to_find": 71, "exsit": 71, "cont_find_sub_structur": 71, "sub_struc_to_find": 71, "cont_flatten_key_chain": [71, 787], "above_height": [71, 787], "below_depth": [71, 787], "cont_format_key_chain": 71, "format_fn": 71, "cont_from_disk_as_hdf5": [71, 787], "h5_obj_or_filepath": 71, "slice_obj": 71, "disk": [71, 734, 787, 802], "h5py": 71, "filepath": [71, 605, 724, 725, 758, 760], "cont_from_disk_as_json": [71, 787], "json_filepath": 71, "cont_from_disk_as_pickl": [71, 787], "pickle_filepath": 71, "cont_from_flat_list": 71, "flat_list": 71, "hierarchi": [71, 756, 787, 799, 809], "cont_handle_inplac": 71, "prime": [71, 766], "overwritten": [71, 761, 762], "cont_has_kei": 71, "query_kei": 71, "somewher": [71, 765], "cont_has_key_chain": 71, "cont_ident": [71, 787], "cont_identical_array_shap": 71, "cont_identical_config": 71, "cont_identical_structur": 71, "cont_if_exist": 71, "cont_inplace_upd": 71, "cont_ivi": 71, "cont_key_chains_contain": 71, "sub_str": 71, "cont_list_stack": [71, 787], "cont_load": 71, "cont_map": [71, 764, 787], "func": [71, 94, 212, 346, 354, 497, 571, 574, 575, 577, 582, 588, 591, 592, 598, 686, 756, 760, 761, 768, 770, 775, 776], "cont_map_sub_cont": 71, "include_self": 71, "possibi": 71, "cont_max_depth": 71, "cont_multi_map": 71, "map_nest": 71, "assert_ident": 71, "leftmost": [71, 598, 686], "cont_multi_map_in_funct": 71, "cont_num_arrai": 71, "cont_overwrite_at_key_chain": 71, "target_dict": 71, "return_dict": 71, "cont_prune_empti": 71, "keep_non": 71, "cont_prune_key_chain": 71, "key1": [71, 750, 788], "key2": [71, 750], "key3": 71, "cont_prune_key_from_key_chain": 71, "cont_prune_kei": 71, "cont_prune_keys_from_key_chain": 71, "cont_reduc": 71, "cont_remove_key_length_limit": 71, "cont_remove_print_limit": 71, "cont_reshape_lik": 71, "leading_shap": 71, "cont_restructur": 71, "keep_orig": 71, "old": [71, 757, 762, 776], "cont_restructure_key_chain": 71, "keychain_map": 71, "cont_sav": 71, "cont_set_at_key_chain": 71, "cont_set_at_kei": 71, "cont_shap": [71, 593, 611], "cont_show": 71, "cont_show_sub_contain": 71, "sub_cont_or_keychain": 71, "cont_size_ordered_arrai": 71, "keychain": [71, 77, 321, 427, 428, 429, 455], "cont_slice_kei": 71, "all_depth": 71, "cont_slice_via_kei": 71, "slice_kei": 71, "cont_sort_by_kei": 71, "cont_structural_diff": 71, "cont_to_dict": 71, "cont_to_disk_as_hdf5": [71, 787], "starting_index": 71, "max_batch_s": 71, "cont_to_disk_as_json": [71, 787], "cont_to_disk_as_pickl": [71, 787], "cont_to_flat_list": 71, "cont_to_iter": [71, 764], "leaf_keys_onli": 71, "cont_to_iterator_kei": 71, "cont_to_iterator_valu": 71, "cont_to_json": 71, "cont_to_nested_list": 71, "cont_to_raw": 71, "cont_trim_kei": 71, "trim": 71, "cont_try_kc": 71, "cont_unifi": 71, "concatten": [71, 212, 588], "cont_unstack_cont": 71, "dim_siz": 71, "cont_update_config": 71, "cont_with_default_key_color": 71, "cont_with_entries_as_list": 71, "cont_with_ivy_backend": 71, "ivy_backend": [71, 778], "cont_with_key_length_limit": [71, 787], "cont_with_print_ind": [71, 787], "cont_with_print_limit": [71, 787], "cont_with_print_line_spac": 71, "h5_file_s": 71, "shuffle_h5_fil": 71, "split_cont": 71, "_is_json": 71, "_repr": 71, "_containerwithconvers": [72, 97], "_static_to_ivi": 72, "_static_to_n": 72, "_containerwithcr": [73, 97], "_static_arang": 73, "_static_asarrai": 73, "_static_copy_arrai": 73, "_static_empti": 73, "_static_empty_lik": 73, "_static_ey": 73, "n_row": [73, 77, 132, 146, 315, 349, 356, 410, 586], "n_col": [73, 77, 132, 146, 315, 349, 586], "_static_from_dlpack": 73, "_static_ful": 73, "_static_full_lik": 73, "static_full_lik": 73, "2324": [73, 136, 586], "234": [73, 76, 136, 158, 241, 292, 586, 587, 589, 593, 617], "123": [73, 74, 136, 167, 506, 586, 591, 779], "_static_linspac": 73, "_static_logspac": 73, "static_logspac": 73, "15443469": [73, 138], "64158883": [73, 138], "_static_meshgrid": 73, "_static_native_arrai": 73, "_static_one_hot": 73, "static_one_hot": 73, "_static_on": 73, "_static_ones_lik": 73, "_static_tril": 73, "_static_triu": 73, "_static_zero": 73, "_static_zeros_lik": 73, "frombuff": [73, 586], "expos": [73, 134, 500, 586, 591, 750, 765, 784, 788, 796], "x00": [73, 134, 586], "xf0": [73, 134, 586], "x01": [73, 134, 586], "x02": [73, 134, 586], "x03": [73, 134, 586], "x04": [73, 134, 586], "x05": [73, 134], "5443469": [73, 138, 586], "static_frombuff": 73, "static_triu_indic": 73, "triu_indic": [73, 586], "_containerwithdatatyp": [74, 97], "_static_astyp": 74, "718": [74, 76, 151, 268, 587], "618": [74, 76, 151, 268, 587], "static_astyp": 74, "_static_broadcast_arrai": 74, "static_broadcast_arrai": 74, "_static_broadcast_to": 74, "static_broadcast_to": 74, "_static_can_cast": 74, "from_": [74, 154, 587], "static_can_cast": 74, "_static_default_complex_dtyp": 74, "complex_dtyp": [74, 157, 180, 587], "_static_default_float_dtyp": 74, "float_dtyp": [74, 159, 182, 587], "_static_dtyp": 74, "_static_finfo": 74, "inquir": [74, 164, 167], "static_finfo": 74, "55040e": [74, 164, 587], "7976931348623157e": [74, 164, 587], "308": [74, 164, 587, 779], "_static_function_supported_dtyp": 74, "_static_function_unsupported_dtyp": 74, "_static_iinfo": 74, "1800": [74, 167, 587], "1084": 74, "40000": 74, "static_iinfo": 74, "2147483648": [74, 167, 587], "2147483647": [74, 167, 587], "_static_is_bool_dtyp": 74, "dtype_in": [74, 149, 150, 163, 169, 170, 171, 172, 173, 174, 175, 176, 191, 587], "_static_is_complex_dtyp": 74, "is_complex_dtyp": [74, 587, 780], "roughli": [74, 757, 760, 806], "static_is_complex_dtyp": 74, "complex64": [74, 157, 171, 180, 186, 252, 279, 300, 347, 587, 589, 594, 640, 642, 643, 766], "_static_is_float_dtyp": 74, "static_is_float_dtyp": 74, "_static_is_int_dtyp": 74, "_static_is_uint_dtyp": 74, "_static_result_typ": 74, "static_result_typ": 74, "broadcats": [74, 152], "_containerwithdevic": [75, 97], "_static_dev": 75, "static_dev": 75, "_static_to_devic": 75, "static_to_devic": 75, "contaion": [75, 196], "_containerwithelementwis": [76, 97], "_static_ab": 76, "static_ab": 76, "_static_aco": 76, "static_aco": 76, "_static_acosh": 76, "static_acosh": 76, "_static_add": 76, "static_add": [76, 101], "_static_asin": 76, "static_asin": 76, "524": [76, 224, 589], "412": [76, 81, 224, 589], "201": [76, 77, 224, 376, 589], "_static_asinh": 76, "static_asinh": 76, "_static_atan": 76, "static_atan": 76, "_static_atan2": 76, "static_atan2": 76, "915": [76, 227, 589], "983": [76, 227, 589], "978": [76, 227, 589], "696": [76, 86, 227, 589, 695], "993": [76, 227, 589], "_static_atanh": 76, "static_atanh": 76, "_static_bitwise_and": 76, "static_bitwise_and": 76, "_static_bitwise_invert": 76, "static_bitwise_invert": 76, "_static_bitwise_left_shift": 76, "_static_bitwise_or": 76, "static_bitwise_or": 76, "_static_bitwise_right_shift": 76, "static_bitwise_right_shift": 76, "_static_bitwise_xor": 76, "static_bitwise_xor": 76, "_static_ceil": 76, "static_ceil": 76, "_static_co": 76, "static_co": 76, "_static_cosh": 76, "static_cosh": 76, "_static_deg2rad": 76, "static_deg2rad": 76, "0262": [76, 238, 278, 589], "873": [76, 238, 278, 589], "_static_divid": 76, "static_divid": 76, "_static_equ": 76, "static_equ": 76, "_static_erf": 76, "static_erf": 76, "27632612": [76, 241], "934008": [76, 241], "99999928": [76, 241], "91903949": [76, 241], "_static_exp": 76, "static_exp": 76, "59814835": [76, 242, 589], "4131622": [76, 242], "_static_expm1": 76, "thefunct": [76, 241], "areal": 76, "static_expm1": 76, "71828175": [76, 242, 589], "38905621": [76, 242, 589], "59815216": 76, "_static_floor": 76, "static_floor": 76, "_static_floor_divid": 76, "static_floor_divid": 76, "_static_great": 76, "static_great": 76, "_static_greater_equ": 76, "static_greater_equ": 76, "_static_isfinit": 76, "999999999999": [76, 253, 589], "static_isfinit": 76, "_static_isinf": 76, "static_isinf": 76, "_static_isnan": 76, "static_isnan": 76, "_static_isr": 76, "0j": [76, 77, 142, 143, 220, 221, 222, 225, 228, 237, 242, 244, 256, 260, 262, 279, 283, 285, 286, 290, 322, 352, 586, 589, 594, 640], "23j": [76, 77], "9j": [76, 77], "static_isr": 76, "_static_lcm": 76, "1080": [76, 257], "1550": [76, 257], "130": [76, 257], "_static_less": 76, "static_less": 76, "_static_less_equ": 76, "static_less_equ": 76, "_static_log": 76, "static_log": 76, "_static_log10": 76, "static_log10": 76, "898": [76, 261, 589], "0414": [76, 261, 589], "_static_log1p": 76, "static_log1p": 76, "_static_log2": 76, "_static_logaddexp": 76, "static_logaddexp": 76, "_static_logical_and": 76, "static_logical_and": 76, "_static_logical_not": 76, "static_logical_not": 76, "_static_logical_or": 76, "static_logical_or": 76, "_static_logical_xor": 76, "static_logical_xor": 76, "_static_maximum": 76, "static_maximum": 76, "_static_minimum": 76, "static_minimum": 76, "_static_multipli": 76, "static_multipli": 76, "_static_neg": 76, "static_neg": 76, "_static_not_equ": 76, "static_not_equ": 76, "_static_posit": 76, "static_posit": 76, "_static_pow": 76, "static_pow": 76, "_static_rad2deg": 76, "static_rad2deg": 76, "5160": 76, "10300": [76, 278, 589], "15500": 76, "20600": 76, "2860": [76, 278], "_static_reciproc": 76, "recirpoc": [76, 280], "static_reciproc": 76, "_static_remaind": 76, "static_remaind": 76, "_static_round": 76, "thevfunct": 76, "300": [76, 78, 81, 282, 355, 378, 379, 511, 535, 589, 591, 594, 630, 779], "527": [76, 282, 589], "static_round": 76, "301": [76, 282, 589], "_static_sign": 76, "static_sign": 76, "_static_sin": 76, "static_sin": 76, "757": [76, 284, 589], "959": [76, 244, 284, 589], "279": [76, 284, 355, 376, 386, 498, 589, 591], "_static_sinh": 76, "static_sinh": 76, "835": [76, 285], "347": [76, 285], "721": [76, 285], "_static_sqrt": 76, "static_sqrt": 76, "_static_squar": 76, "static_squar": 76, "_static_subtract": 76, "static_subtract": 76, "_static_tan": 76, "static_tan": 76, "_static_tanh": 76, "static_tanh": 76, "995": [76, 290, 589], "9999": 76, "_static_trapz": 76, "static_trapz": 76, "_static_trunc": 76, "static_trunc": 76, "_static_trunc_divid": 76, "75j": [76, 223, 252], "01317055": [76, 223], "05634501": [76, 223], "115": [76, 223, 278, 589], "3461759": [76, 223], "524111": [76, 223], "644": [76, 224, 589, 788], "305": [76, 81, 224, 589], "351": [76, 238, 278], "00613": [76, 238], "0154": [76, 238], "403": [76, 242], "428772": [76, 242], "649": [76, 244], "220": [76, 244], "865": [76, 244], "metho": [76, 251, 263], "7j": [76, 77, 256, 279, 322, 352, 589], "956": [76, 262], "08746284": [76, 265], "32192809": [76, 265], "nuner": [76, 272], "413": [76, 278], "335": [76, 77, 279, 322], "345j": [76, 77, 279, 322], "static_angl": 76, "static_exp2": 76, "static_fmin": 76, "static_gcd": 76, "static_imag": 76, "static_logaddexp2": 76, "static_nan_to_num": 76, "static_r": 76, "_containerwithactivationexperiment": [77, 97], "_static_elu": 77, "static_elu": 77, "_static_silu": 77, "static_silu": 77, "27777028": [77, 301], "23947507": [77, 301], "0900332": [77, 301], "contan": [77, 295], "19722462": [77, 295], "84729779": [77, 295], "31326163": [77, 296], "46328258": [77, 296], "51301527": [77, 296], "79813886": [77, 296], "22856998": [77, 299], "42028043": [77, 299], "31868932": [77, 299], "static_logit": 77, "static_logsigmoid": 77, "34115386": 77, "64439666": 77, "24115384": 77, "55435526": 77, "07888974": 77, "00741899": 77, "26328245": 77, "00012302": 77, "static_prelu": 77, "static_relu6": 77, "static_selu": 77, "static_thresholded_relu": 77, "_containerwithconversionexperiment": [77, 97], "_containerwithcreationexperiment": [77, 97], "_static_trilu": 77, "blackman": [77, 303, 349], "00770143e": [77, 303], "49229857e": [77, 303], "hamming_window": [77, 349], "coeffici": [77, 305, 349, 594, 641], "ham": [77, 305, 349], "4180": [77, 305], "8180": [77, 305], "hann_window": [77, 349], "hann": [77, 306, 349], "7500": [77, 306], "3455": [77, 306], "9045": [77, 306], "kaiser_bessel_derived_window": [77, 349], "suitabl": [77, 308, 309, 349, 603, 710, 757, 758, 764, 780, 803], "spectral": [77, 308, 309, 349], "analysi": [77, 308, 309, 349, 803, 804], "kaiser": [77, 303, 308, 309, 349], "70710677": [77, 308, 465, 466], "18493208": [77, 308, 349], "9827513": [77, 308, 349], "kaiser_window": [77, 349], "static_kaiser_window": [77, 309], "2049": [77, 309], "8712": [77, 309], "0367": [77, 309, 349], "7753": [77, 309], "static_blackman_window": 77, "window_length": [77, 303, 305, 308, 309, 319, 349], "static_eye_lik": 77, "static_hamming_window": 77, "static_hann_window": 77, "static_hann": 77, "static_kaiser_bessel_derived_window": 77, "static_mel_weight_matrix": 77, "static_tril_indic": 77, "static_unsorted_segment_min": 77, "static_unsorted_segment_sum": 77, "static_vorbis_window": 77, "vorbis_window": [77, 349], "vorbi": [77, 319, 349], "38268343": [77, 319], "92387953": [77, 319], "14943586": [77, 319, 349], "51644717": [77, 319], "85631905": [77, 319], "98877142": [77, 319], "tril_indic": [77, 349], "_containerwithdata_typeexperiment": [77, 97], "_containerwithdeviceexperiment": [77, 97], "_containerwithelementwiseexperiment": [77, 97], "0003": [77, 320, 594, 630], "0006": [77, 320, 344], "2345j": [77, 322], "5772": [77, 326], "9635": [77, 326], "4228": [77, 326], "9228": [77, 326], "mantissa": [77, 330, 352], "frist": [77, 331, 352], "coord": [77, 331], "6055": [77, 332], "160": [77, 334], "10240": [77, 334], "60000038": [77, 335, 352], "0707": [77, 341, 352], "0579": [77, 341, 352], "static_allclos": 77, "static_binar": 77, "static_conj": 77, "static_copysign": 77, "static_count_nonzero": 77, "static_diff": 77, "static_digamma": 77, "57721537": 77, "96351004": 77, "static_fix": 77, "static_float_pow": 77, "static_fmax": 77, "static_fmod": 77, "static_frexp": 77, "static_gradi": 77, "static_hypot": 77, "static_isclos": 77, "static_ldexp": 77, "static_lerp": 77, "90000057": [77, 335, 352], "80000019": [77, 335, 352], "70000076": [77, 335, 352], "55000019": [77, 335, 352], "05000019": [77, 335, 352], "static_modf": 77, "static_nansum": 77, "static_nextaft": 77, "static_signbit": 77, "static_sinc": 77, "636": 77, "090": 77, "070": 77, "057": 77, "static_sparsify_tensor": 77, "static_xlogi": 77, "static_zeta": 77, "0244": [77, 344], "_containerwithgeneralexperiment": [77, 97], "_static_reduc": 77, "static_reduc": 77, "_containerwithgradientsexperiment": [77, 97], "_containerwithimageexperiment": [77, 97], "_containerwithlayersexperiment": [77, 97], "_static_fft": 77, "static_fft": 77, "673": [77, 376], "0507": [77, 376], "79711437": [77, 355, 376, 386], "94867325": [77, 355, 376, 386], "74089146": [77, 355, 376, 386], "25980937": [77, 355, 376, 386], "64958102": [77, 355, 376, 386], "2442648": [77, 355, 376, 386], "247306": [77, 388], "908323j": [77, 388], "494955": [77, 388], "90395j": [77, 388], "static_adaptive_avg_pool1d": 77, "static_adaptive_avg_pool2d": 77, "static_adaptive_max_pool2d": 77, "static_avg_pool1d": 77, "static_avg_pool2d": 77, "static_avg_pool3d": 77, "static_dct": 77, "182": 77, "253": [77, 285, 589], "515": [77, 600, 695], "467": 77, "static_dft": 77, "static_embed": 77, "static_idct": 77, "93732834": [77, 355, 376], "75048852": [77, 355, 376], "29723358": [77, 355, 386], "6950531": 77, "93914509": 77, "88008738": 77, "18951225": 77, "06697273": [77, 355, 386], "57439804": 77, "68861485": [77, 355, 386], "41308832": [77, 355, 386], "0700836": 77, "2449036": 77, "6711426": 77, "514": 77, "501709": 77, "4924011": 77, "static_ifft": 77, "static_ifftn": 77, "static_interpol": 77, "static_max_pool1d": 77, "static_max_pool2d": 77, "max_pool2dd": 77, "static_max_pool3d": 77, "static_rfftn": 77, "_containerwithlinearalgebraexperiment": [77, 97], "933034": [77, 356, 400], "eigenvealu": [77, 403, 626], "xx": [77, 403, 405, 626], "37228107": [77, 403, 626], "3722816": [77, 403, 626], "8245648": [77, 403, 626], "41597357": [77, 403, 626], "56576747": [77, 403, 626], "9093767": [77, 403, 626], "56155": [77, 404], "82842": [77, 404], "450": [77, 409], "static_adjoint": 77, "static_cond": 77, "static_diagflat": 77, "static_dot": 77, "static_eig": 77, "static_eigh_tridiagon": 77, "static_eigv": 77, "static_initialize_tuck": 77, "static_kron": 77, "kroneck": [77, 356, 408, 409], "static_make_svd_non_neg": 77, "static_matrix_exp": 77, "static_mode_dot": 77, "static_multi_dot": 77, "static_multi_mode_dot": 77, "static_partial_tuck": 77, "static_svd_flip": 77, "static_truncated_svd": 77, "static_tuck": 77, "_containerwithlossesexperiment": [77, 97], "_static_huber_loss": 77, "static_huber_loss": 77, "0575": [77, 420], "_static_l1_loss": 77, "static_l1_loss": 77, "_static_smooth_l1_loss": 77, "static_smooth_l1_loss": 77, "_static_soft_margin_loss": 77, "_containerwithmanipulationexperiment": [77, 97], "_static_fill_diagon": 77, "_static_unique_consecut": 77, "atleast": [77, 358, 427, 428, 429, 767], "ary1": [77, 358, 427, 428, 429], "ary2": [77, 358, 427, 428, 429], "broadcast_shap": [77, 100, 358], "static_concat_from_sequ": [77, 432], "30192195": [77, 444], "static_as_strid": 77, "static_atleast_1d": 77, "static_atleast_2d": 77, "static_atleast_3d": 77, "static_broadcast_shap": 77, "static_dsplit": 77, "static_dstack": 77, "static_expand": 77, "static_flatten": 77, "static_fliplr": 77, "static_flipud": 77, "static_fold": 77, "static_heavisid": 77, "static_hsplit": 77, "static_hstack": 77, "static_i0": 77, "static_matric": 77, "static_moveaxi": 77, "static_pad": 77, "static_partial_fold": 77, "static_partial_tensor_to_vec": 77, "static_partial_unfold": 77, "static_partial_vec_to_tensor": 77, "static_rot90": 77, "static_soft_threshold": 77, "static_take_along_axi": 77, "static_top_k": 77, "static_unfold": 77, "static_vsplit": 77, "static_vstack": 77, "_containerwithnormsexperiment": [77, 97], "16903085": [77, 465, 466], "50709254": [77, 465, 466], "84515423": [77, 465, 466], "44183609": [77, 465, 466], "56807494": [77, 465, 466], "69431382": [77, 465, 466], "static_batch_norm": 77, "static_group_norm": 77, "static_instance_norm": 77, "static_l1_norm": 77, "static_l2_norm": 77, "static_lp_norm": 77, "12500000": 77, "37500000": 77, "62500000": 77, "27500000": 77, "35000000": 77, "42500000": 77, "0000000": 77, "5000000": 77, "2500000": 77, "_containerwithrandomexperiment": [77, 97], "43643127": [77, 469], "32325703": [77, 469], "24031169": [77, 469], "34251311": [77, 469], "31692529": [77, 469], "3405616": [77, 469], "5319725": [77, 469], "22458365": [77, 469], "24344385": [77, 469], "26588406": [77, 469], "61075421": [77, 469], "12336174": [77, 469], "51142915": [77, 469], "25041268": [77, 469], "23815817": [77, 469], "64042903": [77, 469], "25763214": [77, 469], "10193883": [77, 469], "31624692": [77, 469], "46567987": [77, 469], "21807321": [77, 469], "37677699": [77, 469], "39914594": [77, 469], "22407707": [77, 469], "static_bernoulli": 77, "static_beta": 77, "static_dirichlet": 77, "static_gamma": 77, "static_poisson": 77, "_containerwithsearchingexperiment": [77, 97], "static_unravel_index": 77, "_containerwithsetexperiment": [77, 97], "_containerwithsortingexperiment": [77, 97], "invert_permut": [77, 365], "static_invert_permut": 77, "static_lexsort": [77, 89], "_containerwithstatisticalexperiment": [77, 97], "_static_cummax": 77, "static_cummax": 77, "_static_cummin": 77, "static_cummin": 77, "func_nam": [77, 484, 756, 768, 769, 773, 777], "static_bincount": 77, "static_corrcoef": 77, "static_cov": [77, 367, 481], "static_histogram": 77, "static_igamma": 77, "static_median": 77, "static_nanmean": 77, "static_nanmedian": 77, "static_nanprod": 77, "static_quantil": 77, "_containerwithutilityexperiment": [77, 97], "static_optional_get_el": 77, "_containerwithgener": [78, 97], "_static_all_equ": 78, "static_all_equ": 78, "_static_array_equ": 78, "a0": [78, 495], "static_array_equ": 78, "_static_assert_supports_inplac": 78, "_static_clip_matrix_norm": 78, "static_clip_matrix_norm": 78, "849": [78, 498, 499, 591], "_static_clip_vector_norm": 78, "static_clip_vector_norm": 78, "_static_einops_rearrang": 78, "static_einops_rearrang": 78, "_static_einops_reduc": 78, "static_einops_reduc": 78, "29333329": [78, 504, 591], "53000069": [78, 504, 591], "39666676": [78, 504, 591], "20666695": [78, 504, 591], "_static_einops_repeat": 78, "static_einops_repeat": 78, "_static_exist": 78, "detal": [78, 506], "_static_fourier_encod": 78, "static_fourier_encod": 78, "classivi": [78, 596, 602, 663, 705], "89858720e": 78, "79717439e": 78, "_static_gath": 78, "static_gath": 78, "_static_gather_nd": 78, "400": [78, 81, 355, 378, 379, 511, 535, 591, 594, 630], "static_gather_nd": 78, "_static_get_num_dim": 78, "static_get_num_dim": 78, "_static_has_nan": 78, "leafwis": 78, "static_has_nan": 78, "_static_inplace_decr": 78, "_static_inplace_incr": 78, "_static_inplace_upd": 78, "_static_is_arrai": 78, "static_is_arrai": 78, "_static_is_ivy_arrai": 78, "static_is_ivy_arrai": 78, "_static_is_native_arrai": 78, "static_is_native_arrai": 78, "_static_scatter_flat": 78, "_static_scatter_nd": 78, "static_scatter_nd": 78, "_static_stable_divid": 78, "22222222": 78, "11111111": 78, "857": [78, 549, 591], "444": 78, "_static_stable_pow": 78, "00012": [78, 550, 591], "00016": [78, 79, 550, 578, 591, 592], "00001": [78, 550, 591], "00032": [78, 550], "00256": [78, 550], "1679638": [78, 550], "395": [78, 550], "16777383": [78, 550], "_static_supports_inplace_upd": 78, "_static_to_list": 78, "static_to_list": 78, "_static_to_numpi": 78, "static_to_numpi": 78, "_static_to_scalar": 78, "static_to_scalar": 78, "_static_value_is_nan": 78, "452": 78, "static_value_is_nan": 78, "833": [78, 499], "items": [78, 96, 591], "static_isin": 78, "static_items": 78, "complex128": [78, 157, 158, 171, 180, 186, 300, 347, 529, 587, 591, 594, 627, 628, 633, 649, 754, 766], "static_strid": 78, "425": [78, 570], "_containerwithgradi": [79, 97], "_static_stop_gradi": 79, "static_stop_gradi": 79, "976": [79, 290, 572, 589, 592], "49e": [79, 572, 592], "74e": [79, 572, 592], "95e": [79, 572, 592], "024": [79, 572, 592], "096": [79, 572, 592], "216": [79, 82, 572, 592, 647], "626": [79, 572, 592], "en": [79, 572, 573, 592, 765], "wikipedia": [79, 572, 573, 592], "wiki": [79, 572, 573, 592], "stochastic_gradient_desc": [79, 572, 573, 592], "01099": [79, 573], "01003": [79, 573, 592], "01015": [79, 573, 592], "99936122": [79, 573, 592], "99936116": [79, 573, 592], "99936128": [79, 573, 592], "99936104": [79, 573, 592], "w_new": [79, 576, 592], "708": [79, 578, 592], "445": [79, 578, 592], "6e": [79, 578, 592], "00036": [79, 578, 592], "00049": [79, 578, 592], "layerwis": [79, 579, 592], "_containerwithimag": [80, 97], "_containerwithlay": [81, 97], "_static_conv1d": 81, "static_conv1d": 81, "_static_conv1d_transpos": 81, "static_conv1d_transpos": 81, "112": [81, 594, 604, 608, 637, 714], "_static_conv2d": 81, "ey": [81, 586, 593, 609, 615, 782, 789], "static_conv2d": 81, "_static_conv2d_transpos": 81, "static_conv2d_transpos": 81, "_static_conv3d": 81, "fdfh": [81, 611], "static_conv3d": 81, "_static_conv3d_transpos": 81, "static_conv3d_transpos": 81, "_static_depthwise_conv2d": 81, "inp": [81, 593, 615], "static_depthwise_conv2d": 81, "_static_dropout": 81, "static_dropout": 81, "_static_dropout1d": 81, "static_dropout1d": 81, "_static_dropout2d": 81, "_static_dropout3d": 81, "_static_linear": 81, "278": [81, 593, 616, 617], "static_linear": 81, "195": 81, "_static_lstm_upd": 81, "_static_multi_head_attent": 81, "_static_reduce_window": 81, "_static_scaled_dot_product_attent": 81, "static_scaled_dot_product_attent": 81, "39999962": [81, 593, 616, 617], "19999695": [81, 617], "11600018": [81, 617], "88399887": [81, 617], "196": [81, 593, 617], "306": [81, 593, 617], "19999981": [81, 593, 616, 620], "59249449": [81, 593, 620], "68226194": [81, 593, 620], "4000001": [81, 593, 616, 620], "19603825": [81, 593, 620], "9960382": [81, 593, 620], "26894283": [81, 593, 620], "40236187": [81, 593, 620], "39999437": [81, 593, 620], "59999037": [81, 593, 620], "35046196": [81, 593, 620], "54282808": [81, 593, 620], "39989519": [81, 593, 620], "5998764": [81, 593, 620], "_containerwithlinearalgebra": [82, 97], "_static_choleski": 82, "static_choleski": 82, "577": [82, 594, 621], "707": [82, 594, 621], "static_rol": [82, 84], "_static_cross": 82, "static_cross": 82, "_static_det": 82, "_static_diag": 82, "_static_diagon": 82, "static_diagon": 82, "_static_eigh": 82, "_static_eigvalsh": 82, "static_eigvalsh": 82, "51572949": [82, 594, 628], "17091519": [82, 594, 628], "3448143": [82, 594, 628], "88178420e": [82, 594, 628], "35898387e": [82, 594, 628], "46410179e": [82, 594, 628], "_static_inn": 82, "static_inn": 82, "_static_inv": 82, "static_inv": 82, "_static_matmul": 82, "matul": 82, "static_matmul": 82, "_static_matrix_norm": 82, "deimens": 82, "static_matrix_norm": 82, "_static_matrix_pow": 82, "_static_matrix_rank": 82, "static_matrix_rank": 82, "_static_matrix_transpos": 82, "static_matrix_transpos": 82, "_static_out": 82, "n1": [82, 139, 586], "n2": [82, 139, 586], "static_out": [82, 637], "_static_pinv": 82, "static_pinv": 82, "0426": 82, "0964": 82, "0605": 82, "1368": 82, "_static_qr": 82, "_static_slogdet": 82, "static_slogdet": 82, "6931472": 82, "0986123": 82, "_static_solv": 82, "_static_svd": 82, "static_svd": 82, "au": 82, "aS": 82, "avh": 82, "bu": [82, 797], "bvh": 82, "_static_svdv": 82, "_static_tensordot": 82, "_static_tensorsolv": 82, "_static_trac": 82, "static_trac": 82, "_static_vand": 82, "static_vand": 82, "343": [82, 282, 589, 647], "729": [82, 647, 788], "_static_vecdot": 82, "_static_vector_norm": 82, "static_vector_norm": 82, "77359247": [82, 649], "_static_vector_to_skew_symmetric_matrix": 82, "09861231": [82, 594, 640], "static_general_inner_product": 82, "3475602": [82, 642], "93765765": [82, 642], "58776021": [82, 642], "10416126": [82, 642], "80644298": [82, 642], "87024701": [82, 642], "48127627": [82, 642], "79101127": [82, 642], "98288572": [82, 642], "68917423": [82, 642], "_containerwithloss": [83, 97], "_static_binary_cross_entropi": 83, "static_binary_cross_entropi": 83, "511": [83, 595, 651, 653], "_static_cross_entropi": 83, "static_cross_entropi": 83, "20397282": 83, "83258148": 83, "60943794": [83, 594, 640], "_static_sparse_cross_entropi": 83, "static_sparse_cross_entropi": 83, "5108256": [83, 652], "609438": [83, 652], "_containerwithmanipul": [84, 97], "_static_clip": 84, "static_clip": 84, "_static_concat": 84, "_static_constant_pad": 84, "static_constant_pad": 84, "_static_expand_dim": 84, "static_expand_dim": 84, "container_axi": [84, 596, 657], "_static_flip": 84, "static_flip": 84, "_static_permute_dim": 84, "static_permute_dim": 84, "_static_repeat": 84, "static_repeat": 84, "_static_reshap": 84, "static_reshap": 84, "_static_rol": 84, "positivclip": 84, "_static_split": 84, "static_split": 84, "_static_squeez": 84, "static_squeez": 84, "_static_stack": 84, "leavv": 84, "static_stack": 84, "_static_swapax": 84, "_static_til": 84, "static_til": 84, "_static_unstack": 84, "static_unstack": 84, "_static_zero_pad": 84, "repreat": [84, 660], "_containerwithnorm": [85, 97], "34198591": [85, 599, 692], "04274819": [85, 599, 692], "29923761": [85, 599, 692], "24053511": [85, 599, 692], "62221265": [85, 692], "20277636": [85, 692], "41943574": [85, 692], "83710337": [85, 692], "_containerwithrandom": [86, 97], "_static_multinomi": 86, "_static_randint": 86, "static_randint": 86, "_static_random_norm": 86, "static_random_norm": 86, "651": 86, "_static_random_uniform": 86, "static_random_uniform": 86, "481": 86, "0999": 86, "_static_shuffl": 86, "static_shuffl": 86, "431": [86, 695], "274": [86, 695], "_containerwithsearch": [87, 97], "_static_argmax": 87, "static_argmax": 87, "_static_argmin": 87, "static_argmin": 87, "_static_argwher": 87, "static_argwher": 87, "_static_nonzero": 87, "_static_wher": 87, "static_wher": 87, "_containerwithset": [88, 97], "_static_unique_al": 88, "static_unique_al": 88, "_static_unique_count": 88, "static_unique_count": 88, "_static_unique_invers": 88, "static_unique_invers": 88, "_static_unique_valu": 88, "_containerwithsort": [89, 97], "_static_argsort": 89, "static_argsort": 89, "_static_searchsort": 89, "_static_sort": 89, "static_sort": 89, "static_msort": 89, "_containerwithstatist": [90, 97], "_static_cumprod": 90, "static_cumprod": 90, "_static_cumsum": 90, "static_cumsum": 90, "_static_prod": 90, "static_prod": 90, "11000001": [90, 718], "23100001": [90, 718], "30800003": [90, 604, 718], "_static_sum": 90, "_static_var": 90, "static_var": 90, "12666667": [90, 604, 721], "11555555": [90, 604, 721], "rtype": [90, 714, 744], "respectv": [90, 719], "81649649": [90, 719], "94280904": [90, 719], "509902": [90, 604, 719], "2472192": [90, 719], "44948983": [90, 719], "41421354": [90, 719], "contian": [90, 721], "6666667": [90, 721], "_containerwithutil": [91, 97], "_static_al": 91, "static_al": 91, "_static_ani": 91, "static_ani": 91, "add_ivy_container_instance_method": 92, "containerexampl": 92, "factorized_tensor": [93, 94, 95], "factorizedtensor": [93, 94, 95], "matrix_or_tensor": 93, "to_tensor": [93, 94, 95], "to_unfold": [93, 94, 95], "to_vec": [93, 94, 95], "cp_tensor": 94, "cptensor": [94, 313, 349], "cp_copi": 94, "cp_flip_sign": 94, "s_i": 94, "normalisation_weight": 94, "normalised_factor": 94, "cp_lstsq_grad": 94, "return_loss": 94, "nabla": 94, "mathcal": 94, "mathbf": 94, "factor_matric": 94, "cp_gradient": 94, "quantiti": 94, "cp_mode_dot": 94, "keep_dim": [94, 95], "cp_multi_mode_dot": 94, "cp_n_param": 94, "tensor_shap": [94, 95], "n_param": [94, 95], "cp_norm": 94, "cp_to_tensor": 94, "khatria": 94, "rao": [94, 356, 408], "khatri": [94, 356, 408], "cp_normal": 94, "normalis": 94, "u_1": 94, "u_n": 94, "v_1": 94, "v_n": 94, "v_k": 94, "u_k": 94, "absorb": 94, "refold": [94, 358, 440, 451], "cp_to_unfold": 94, "ie": 94, "s_u_i": 94, "exploit": [94, 806], "khatri_rao": [94, 356], "cp_to_vec": 94, "ravel": [94, 782], "unfolding_dot_khatri_rao": 94, "mttkrp": 94, "validate_cp_rank": 94, "percent": 94, "validate_cp_tensor": 94, "tucker_tensor": 95, "tucker_copi": 95, "tucker_mode_dot": [95, 810], "tucker_n_param": 95, "tucker_norm": 95, "tucker_to_tensor": 95, "skip_factor": 95, "transpose_factor": 95, "tucker_to_unfold": 95, "tucker_to_vec": 95, "validate_tucker_rank": 95, "fixed_mod": 95, "validate_tucker_tensor": 95, "_bisection_root_find": 95, "fun": [95, 571, 591, 598, 684, 765], "max_it": 95, "__abs__": [96, 97], "__add__": [96, 97, 761, 764, 768, 769, 772, 777, 778, 786], "__eq__": [96, 97], "__ge__": [96, 97], "__gt__": [96, 97, 782], "__le__": [96, 97], "__lt__": [96, 97], "__ne__": [96, 97], "__pow__": [96, 97, 786], "69678056": 96, "59876156": 96, "82660675": 96, "__radd__": [96, 97, 768, 769, 777], "__rrshift__": [96, 97], "__rshift__": [96, 97], "__rsub__": [96, 97], "__sub__": [96, 97, 761, 764, 768, 772, 786], "__truediv__": [96, 97, 761, 764, 768], "__xor__": [96, 97], "referenc": [96, 770, 776], "resid": [96, 100, 596, 657, 777, 784, 788], "mt": [96, 786], "hopefulli": [96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 796, 797, 798], "overview": [96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 728, 729, 731, 732, 734, 735, 736, 737, 763, 765, 779, 783, 791], "reach": [96, 97, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 685, 728, 729, 731, 732, 734, 735, 736, 737, 752, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 791, 796, 797, 798, 802, 803], "eq": 97, "ge": 97, "le": 97, "ne": 97, "75979435": 97, "52153397": 97, "13532257": 97, "rshift": 97, "truediv": 97, "66666669": [97, 361, 466, 574, 592], "nested_arrai": [99, 100, 101, 763], "nestedarrai": 99, "nested_rank": [99, 100, 101], "inner_shap": [99, 100, 101], "nestedarraybas": [99, 100, 101], "classmethod": [99, 100], "from_row_length": 99, "row_length": 99, "from_row_split": 99, "row_split": 99, "ragged_map": 100, "ragged_multi_map": 100, "ragged_arrai": 100, "ragged_multi_map_in_funct": 100, "replace_ivy_arrai": 100, "unbind": 100, "nestedarrayelementwis": 101, "strictli": [106, 109, 112, 246, 583, 589, 772, 776], "behaviour": [106, 109, 273, 583, 589, 755, 758, 759, 760, 761, 764, 766, 767, 769, 770, 772, 773, 774, 776, 777, 779, 780, 786], "24000001": [106, 583], "703": [107, 583], "683": [107, 583], "408": [107, 583], "313": [107, 583], "437": [107, 583], "40337825": [108, 583], "56114835": [108, 583], "20788449": [108, 583], "231": [111, 583], "\u03b2": [112, 583], "66666667": [113, 367, 481, 583], "body_fn": [117, 118, 120, 585], "bodi": [117, 120, 585, 760, 779], "lst": [117, 585], "orelse_fn": [118, 585], "body1": [119, 585], "body2": [119, 585], "repeatedli": [120, 585, 598, 682, 765, 779], "ml_framework": [121, 586], "distanc": [121, 586], "adjac": [121, 586], "nestedsequ": [122, 123, 586], "typevar": [122, 123, 586], "supportsbufferprotocol": [122, 123, 586], "static_copy_arrai": [129, 586], "intdtyp": [132, 143, 148, 160, 171, 176, 183, 189, 300, 347, 586, 587], "interchang": [133, 586, 596, 666], "plu": [134, 586], "x00b": [134, 586], "x00d": [134, 586], "x00e": [134, 586], "66666663": [137, 586], "41588834": [138, 586], "7827941": [138, 586], "6227766": [138, 586], "23413252": [138, 586], "n3": [139, 586], "xv": [139, 586], "yv": [139, 586], "x_nativ": [140, 586, 776], "y_nativ": [140, 586], "z_nativ": [140, 586], "d_type": [142, 586], "col": [146, 315, 349, 586], "primari": [146, 165, 166, 198, 199, 315, 349, 365, 474, 508, 509, 586, 587, 588, 591, 756, 759, 762, 766, 774, 776, 777, 779, 782, 792, 794], "upward": [146, 315, 349, 586], "downward": [146, 315, 349, 586], "2xn": [146, 315, 349, 586], "subarrai": [146, 315, 349, 586], "incompat": [153, 587], "closest": [156, 235, 245, 246, 282, 292, 358, 452, 587, 589, 779, 782], "xtype": [156, 587], "ytype": [156, 587], "native_uint16": [156, 587], "complexdtyp": [157, 171, 180, 587], "set_default_complex_dtyp": [157, 186, 587], "4294": [157, 159, 587], "967346": [157, 159, 587], "set_default_dtyp": [158, 187, 587, 766, 773], "floatdtyp": [159, 182, 587], "set_default_float_dtyp": [159, 168, 180, 188, 587, 766], "int_dtyp": [160, 183, 587], "set_default_int_dtyp": [160, 168, 189, 587, 766], "4294967346": [160, 161, 587], "uint_dtyp": [161, 184, 587], "uint": [161, 176, 184, 190, 587, 766, 778], "uintdtyp": [161, 176, 184, 190, 587], "set_default_uint_dtyp": [161, 168, 190, 587], "native_bool": [163, 587], "followng": [164, 587], "ieee": [164, 222, 239, 244, 262, 272, 281, 286, 289, 584, 587, 589, 797], "754": [164, 222, 239, 244, 262, 272, 281, 286, 289, 584, 587, 589, 797], "smallest_norm": [164, 587], "bfloat16": [165, 587, 766, 777, 779, 780], "unsupport": [166, 199, 509, 587, 588, 591, 757, 777], "encapsul": [167, 587, 765], "314": [167, 279, 322, 352, 587, 589], "9223372036854775808": [167, 587], "9223372036854775807": [167, 587], "65535": [167, 587], "4294967295": [167, 587], "native_uint8": [169, 587], "hashabl": [173, 587], "type1": [177, 587], "type2": [177, 587], "array_api_promot": [177, 178, 587], "unexpect": [178, 246, 587, 589, 766], "default_complex_dtyp": [180, 587], "default_dtype_stack": [181, 187, 587], "unset_default_dtyp": [181, 587], "native_uint64": [181, 587], "default_float_dtyp": [182, 587, 766], "default_int_dtyp": [183, 189, 587, 766], "default_uint_dtyp": [184, 190, 587], "ret1": [185, 587], "ret2": [185, 587], "reset": [186, 187, 188, 189, 190, 216, 217, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 587, 588, 591, 767], "default_complex_dtype_stack": [186, 587], "default_float_dtype_stack": [188, 587], "native_float16": [191, 587], "unmodifi": [193, 588, 762, 766], "clear": [194, 588, 750, 756, 758, 762, 766, 767, 768, 777, 782, 784, 786, 796, 797, 798, 803], "aliv": [200, 205, 207, 512, 532, 533, 588, 591, 767], "139740789224448": [200, 588], "physic": [203, 588], "process_specif": [206, 218, 588], "percentag": [206, 588], "ram": [206, 214, 218, 588], "alon": [206, 218, 588, 750, 752, 771, 779], "036902561555": [206, 588], "7024003467681645": [206, 588], "as_native_dev": [206, 588], "7095597456708771": [206, 588], "attr_onli": [207, 588], "soft_device_mod": [209, 217, 588], "chunk": [210, 211, 212, 588], "split_factor": [210, 588, 770], "max_chunk_s": [212, 588], "chunk_siz": [212, 588], "input_ax": [212, 588], "output_ax": [212, 588], "usag": [212, 588, 766, 773, 776, 779, 784, 792, 797, 806], "fed": [212, 588, 788], "fist": [212, 588], "gb": [214, 218, 588, 757], "66700032": [214, 588], "589934592": [214, 588], "set_default_devic": [216, 588, 767], "set_soft_device_mod": [217, 588, 767], "219563008": [218, 588], "902400346": [218, 588], "525205504": [218, 588], "na": [219, 589, 779], "princip": [220, 224, 226, 341, 352, 589], "domain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 341, 352, 589, 769, 801, 803], "codomain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 341, 352, 589, 769], "\u03c0": [220, 224, 226, 227, 584, 589], "3\u03c0": [220, 227, 589], "unspecifi": [220, 221, 225, 228, 237, 242, 244, 246, 277, 281, 285, 286, 290, 356, 403, 589, 594, 596, 626, 627, 665, 776], "\u03c0j": [221, 225, 228, 260, 262, 589], "3\u03c0j": [221, 260, 262, 589], "x1_i": [222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 589, 760], "2019": [222, 239, 244, 262, 272, 589, 803, 806], "overflow": [222, 239, 246, 589, 594, 604, 640, 720, 755, 766], "commut": [222, 589], "tabl": [222, 239, 272, 543, 565, 589, 591, 732, 766, 777, 781, 803], "dj": [222, 239, 272, 589], "bj": [222, 239, 272, 322, 352, 589], "invlov": [222, 589], "z1": [222, 589], "z2": [222, 589], "yj": [223, 589], "nanj": [225, 589], "809": [225, 589], "569": [225, 589], "733": [225, 589], "notat": [227, 589, 604, 714, 765], "denot": [227, 589, 734], "quadrant": [227, 589], "rai": [227, 589, 797], "bitwis": [229, 232, 234, 269, 589], "170": [233, 589], "243": [233, 589], "xor": [234, 269, 589], "654": [236, 589], "ci": [237, 242, 244, 285, 589, 760, 766, 771, 778, 779, 792], "368": [237, 589], "670": [237, 589], "202": [237, 589, 760], "548": [237, 589], "1490": [237, 589], "57079633": [238, 589], "14159265": [238, 589], "71238898": [238, 589], "28318531": [238, 589], "02617994": [238, 589], "87266463": [238, 589], "01919862": [238, 589], "03839725": [238, 589], "05759586": [238, 589], "07679449": [238, 589], "09599311": [238, 589], "11519173": [238, 589], "35081118": [238, 589], "88139129": [238, 589], "underflow": [239, 246, 589, 594, 640, 766], "textbook": [239, 272, 589], "frac": [239, 261, 263, 283, 285, 289, 355, 361, 382, 383, 387, 388, 461, 463, 589], "ac": [239, 272, 589, 744], "bd": [239, 272, 589], "bc": [239, 272, 589, 744], "versu": [239, 272, 277, 589], "riemann": [239, 272, 589], "sphere": [239, 272, 589], "c99": [239, 272, 589], "infinit": [239, 272, 286, 589], "unlik": [239, 272, 589, 760, 765, 768, 797, 808, 810], "698": [239, 589], "cut": [242, 244, 284, 285, 286, 289, 589, 796, 809], "08553692": [242, 589], "567": [242, 589], "00344786": [242, 589], "76297021": [242, 589], "197948": [242, 589], "53253174": [242, 589], "accur": [244, 262, 589, 594, 640, 774], "fdlibm": [244, 262, 589], "compliant": [244, 262, 267, 268, 589, 604, 715, 716, 717, 719], "potenti": [244, 262, 589, 750, 756, 757, 765, 766, 777, 783, 806], "632": [244, 589], "20e": [244, 589], "72e": [244, 589], "greatest": [245, 246, 249, 589], "pep": [246, 589, 772], "disambigu": [246, 589, 775], "former": [246, 589, 766, 769, 777], "latter": [246, 589, 760, 762, 766, 769, 777], "overload": [246, 589, 779], "led": [246, 589, 760, 805], "subtl": [246, 589, 766, 809], "ambigu": [246, 589], "semant": [246, 281, 589, 784, 789, 796, 804], "ill": [246, 589], "surpris": [246, 589, 792], "arrau": [252, 589], "log_": [261, 263, 589], "742": [262, 589], "hanl": [263, 589], "negat": [274, 322, 352, 589], "omplex": [275, 589], "52095687": [277, 589], "92457771": [277, 589], "49372482": [277, 589], "22738838": [277, 589], "156": [277, 589], "5877228": [277, 589], "189": [278, 589], "252": [278, 589], "315": [278, 589], "378": [278, 589], "1150": [278, 589], "2890": [278, 589], "172": [278, 589], "487": [278, 589, 593, 617], "344": [278, 589], "355j": [279, 322, 352, 589], "55j": [279, 322, 352, 589], "primarili": [281, 589, 756, 764, 803], "reason": [281, 290, 589, 756, 758, 760, 761, 764, 765, 766, 768, 773, 776, 777, 779, 780, 782, 784, 786, 797, 809], "counterpart": [282, 589, 764, 774], "deliber": [282, 589, 782], "imprecis": [282, 589], "5654": [282, 589], "034": [282, 589], "433": [282, 575, 577, 589, 592], "known": [283, 589, 731, 760, 765, 766, 777, 779], "signum": [283, 589], "operatornam": [283, 285, 589, 594, 627], "textrm": [283, 589], "932": [284, 589], "746": [284, 589], "657": [284, 499, 589, 591], "indistinguish": [286, 589], "convent": [286, 589, 594, 604, 632, 714, 758, 762, 772, 780, 791, 796, 809], "infti": [286, 589], "32455532": [286, 589], "89897949": [286, 589], "169": [286, 589], "analyt": [289, 589, 803, 805, 809], "pole": [289, 589], "546": [289, 589, 593, 617], "916": [289, 589, 595, 651], "996": [289, 589], "histor": [290, 589], "stem": [290, 589, 776], "older": [290, 589], "advis": [290, 589, 777], "462": [290, 589], "604": [290, 589], "984": [290, 589], "997": [290, 589], "0375": [292, 589], "032": [292, 589], "57258511": [294, 347], "69999999": [294, 347, 582, 592], "90928203": [294, 347], "98772264": [294, 347], "99591321": [294, 347], "99863964": [294, 347], "69880581": [294, 347], "18126924": [294, 347], "20141329": [296, 347], "40318608": [296, 347], "48683619": [296, 347], "46328247": [296, 347], "59813893": [296, 347], "43748799": [296, 347], "parametr": [297, 347, 760, 779, 803], "6705687": [299, 347], "52016652": [299, 347], "40560818": [299, 347], "45630932": [299, 347], "2689": [301, 347], "7310": [301, 347], "7615": [301, 347], "2784": [301, 347], "7168": [301, 347], "8708": [301, 347], "4374": [301, 347], "1379": [301, 347], "0089": [301, 347], "taper": [303, 306, 349], "summat": [303, 349, 604, 714, 744], "leakag": [303, 349], "slightli": [303, 349, 752, 764, 777, 779, 784, 788], "wors": [303, 349, 797], "y1": [304, 349], "0800": [305, 349], "3979": [305, 349], "9121": [305, 349], "5400": [305, 349], "han": [306, 349], "ith": [307, 349], "00726415": [308, 349], "9999736": [308, 349], "2773e": [309, 349], "0172e": [309, 349], "9294e": [309, 349], "4149": [309, 349], "9138": [309, 349], "5529": [309, 349], "multidimension": [311, 312, 349, 803], "orthogon": [313, 314, 349, 356, 403, 416, 419, 594, 626, 627], "normalise_factor": [313, 349], "cp": [313, 349, 758], "complementari": [319, 349, 801, 809], "38268346": [319, 349], "38268352": [319, 349], "8563191": [319, 349], "14943568": [319, 349], "arrrai": [322, 352], "position": [328, 352], "inexact": [328, 352], "triangl": [332, 352], "999999e": [333, 352], "65999985": [335, 352], "52000046": [335, 352], "1500001": [335, 352, 504, 591], "11259177": [336, 352], "3574118": [336, 352], "20097363": [336, 352], "suppli": [340, 352, 358, 447, 744, 761, 763, 779], "217234": [341, 352], "hurwitz": [344, 352], "custom_grad_func": [346, 354], "bind": [346, 354, 756, 775, 802, 803], "upstream": [346, 354, 757, 758, 760, 775], "sequence_length": 347, "ndenumer": 349, "ndindex": 349, "random_cp": 349, "random_tuck": 349, "bind_custom_gradient_funct": [354, 775], "area_interpol": 355, "division_overrid": [355, 373], "avg": [355, 373, 375, 396], "dimensio": [355, 374], "tranform": [355, 376, 386], "01823380e": [355, 376, 386], "15385818e": [355, 376, 386], "36371466e": [355, 376, 386], "38763905e": [355, 376, 386], "60722279e": [355, 376, 386], "80319249e": [355, 376, 386], "05617893e": [355, 376, 386], "21500000e": [355, 376, 386], "24000015e": [355, 376, 386], "90734863e": [355, 376, 386], "10000420e": [355, 376, 386], "15899994e": [355, 376, 386], "24000053e": [355, 376, 386], "81469727e": [355, 376, 386], "09999847e": [355, 376, 386], "4135742": [355, 376, 386], "6779785": [355, 376, 386], "3770599": [355, 376, 386], "8719864": [355, 376, 386], "72109985": [355, 376, 386], "52869415": [355, 376, 386], "79182434": [355, 376, 386], "72489166": [355, 376, 386], "container_n": [355, 376, 386], "container_typ": [355, 376, 386, 591], "container_norm": [355, 376, 386], "1580677": [355, 376], "89422607": [355, 376], "86190414": [355, 376], "00041008": [355, 376], "75149155": [355, 376], "97056389": [355, 376], "87819386": [355, 376], "89381361": [355, 376], "50000000e": [355, 376, 386], "22044605e": [355, 376, 386], "ed": [355, 378, 379, 380], "rest": [355, 358, 378, 379, 380, 433, 757, 763, 765, 779, 789, 805], "4d": [355, 379, 380], "5d": [355, 380, 732], "emb": [355, 381], "51285338": [355, 381], "87183261": [355, 381], "2308116": [355, 381], "02733949e": [355, 382], "00j": [355, 382], "49660576e": [355, 382], "68178638e": [355, 382], "01j": [355, 382, 387], "98912367e": [355, 382], "21802426e": [355, 382, 387], "04549134e": [355, 382, 387], "82842712e": [355, 382, 387], "86902654e": [355, 382, 387], "25501143e": [355, 382, 387], "32978028e": [355, 382, 387], "52068201e": [355, 382, 387], "71158374e": [355, 382, 387], "generate_einsum_equ": 355, "get_interpolate_kernel": 355, "27279224e": [355, 386], "44232273e": [355, 386], "70464332e": [355, 386], "73454881e": [355, 386], "00902849e": [355, 386], "10039906e": [355, 386], "07022366e": [355, 386], "69506073": [355, 386], "93914604": [355, 386], "88008881": [355, 386], "18951607": [355, 386], "57439613": [355, 386], "15318303e": [355, 387], "15148591e": [355, 387], "19j": [355, 387], "25000000e": [355, 387], "35378602e": [355, 387], "02j": [355, 387], "65404249e": [355, 387], "17611649e": [355, 387], "24320230e": [355, 387], "79344813e": [355, 387], "22374531e": [355, 387], "45929364e": [355, 387], "14208718e": [355, 387], "07177031e": [355, 387], "indexerror": [355, 388, 398, 596, 657, 745, 770], "interp": [355, 782], "xp": [355, 389, 760], "fp": [355, 389], "nd": [355, 390], "bicubic_tensorflow": [355, 390, 782], "max_unpool1d": 355, "unpool": [355, 394], "pool_result": [355, 394], "unpool_result": [355, 394], "nearest_interpol": 355, "window_shap": [355, 396], "pool_typ": [355, 396], "99038106j": [355, 398], "33012702": [355, 398], "23205081j": [355, 398], "33012702j": [355, 398], "superdiagon": [356, 401, 594, 624], "subdiagon": [356, 401, 594, 624], "eigendecomposit": [356, 403, 594, 626, 627], "qlq\u1d40": [356, 403, 594, 626, 627], "behav": [356, 403, 594, 626, 760, 770, 774, 776, 777, 778, 786, 804], "tridiagon": [356, 404], "38196602": [356, 404], "61803389": [356, 404], "35048741": [356, 404], "56710052": [356, 404], "06693714": [356, 404], "74234426": [356, 404], "56155282": [356, 404], "56155276": [356, 404], "82842714": [356, 404], "82842731": [356, 404], "necessarili": [356, 405, 761, 764], "generalis": [356, 406], "random_st": [356, 407], "skip_matrix": [356, 408, 410], "khatri_rao_product": [356, 408], "kronecker_product": [356, 410], "n_column": [356, 410], "nnmf": [356, 411], "hoi": [356, 416, 419], "determinist": [356, 417], "borrow": [356, 417, 759], "scikit": [356, 417, 797], "extmath": [356, 417], "mae": [357, 421], "log_poisson_loss": 357, "compute_full_loss": [357, 422, 733], "likelihood": [357, 422], "assumpt": [357, 422], "minu": [357, 422], "factori": [357, 422], "stirl": [357, 422], "favor": [357, 422], "28402555": [357, 422], "03402555": [357, 422], "1573164": [357, 422], "3467": [357, 423], "0133": [357, 423], "0250": [357, 423], "0056": [357, 423], "0025": [357, 423], "0675": [357, 423], "hing": [357, 424], "6987": [357, 424], "1606": [357, 424], "3711": [357, 424], "4032": [357, 424], "6931": [357, 424], "whilst": [358, 427, 428, 429, 789, 794, 803], "ary3": [358, 429], "mod": [358, 431, 760], "tall": [358, 436], "horizot": [358, 443], "shortcut": [358, 447, 757], "linear_ramp": [358, 447], "reflect": [358, 447, 752, 758, 761, 776, 779], "ramp": [358, 447], "mirror": [358, 447, 756, 803], "padding_func": [358, 447], "iaxis_pad_width": [358, 447], "iaxi": [358, 447], "unalt": [358, 447], "put_along_axi": 358, "put": [358, 452, 750, 756, 779, 792, 809], "shrinkag": [358, 454], "elimin": [358, 458, 757], "consecut": [358, 458], "batch_mean": [361, 461, 463], "batch_var": [361, 461, 463], "running_vari": [361, 461, 463], "42857143": [361, 466], "5714286": [361, 466], "distrubut": [362, 467], "paramter": [362, 467], "multivari": [362, 469], "bayesian": [362, 469], "supposedli": [365, 473], "indirect": [365, 474], "secondari": [365, 474], "is_ivy_sparse_arrai": 366, "is_native_sparse_arrai": 366, "native_sparse_arrai": 366, "coo_indic": [366, 477], "crow_indic": [366, 477], "col_indic": [366, 477], "ccol_indic": [366, 477], "row_indic": [366, 477], "dense_shap": [366, 477], "native_sparse_array_to_indices_values_and_shap": 366, "nativesparsearrai": 366, "sparsearrai": 366, "linalg": [367, 481, 594, 640, 756, 776, 778], "aw": [367, 481, 797], "48447205": [367, 481], "c0": [367, 484], "ck": [367, 484], "i1": [367, 484], "c2": [367, 484], "nearest_jax": [367, 490], "compile_on_next_step": [494, 591, 733, 734, 736, 788], "recalcul": [497, 591], "my_sum": [497, 591], "val1": [497, 591], "val2": [497, 591], "cached_sum": [497, 591], "line_eq": [497, 591], "slp": [497, 591], "itc": [497, 591], "cached_line_eq": [497, 591], "0353": [498, 591], "424": [498, 591], "176": [498, 591], "339": [498, 591], "271": [498, 591], "391": [498, 591], "417": [499, 591], "583": [499, 591], "0667": [499, 591], "267": [499, 591], "131": [499, 591], "263": [499, 591], "394": [499, 591, 600, 698], "526": [499, 591], "788": [499, 591], "default_str": [502, 591], "46999979": [503, 591], "66000009": [503, 591], "93000001": [503, 591], "29000092": [503, 591], "33999991": [503, 591], "6400001": [503, 591], "96000004": [503, 591], "36000013": [503, 591], "51999998": [503, 591], "67000008": [503, 591], "30000001": [503, 591, 602, 705], "suppos": [503, 591, 766, 779], "960": [503, 591], "3600": [503, 591], "h1": [503, 591], "w1": [503, 591], "40499985": [504, 591], "61000061": [504, 591], "incas": [508, 509, 591], "max_depth": [515, 591, 598, 685], "seen_set": [515, 591], "local_set": [515, 591], "ivyexcept": [520, 552, 591, 745, 767, 770, 774, 776, 777, 780], "allow_dupl": [530, 591], "context": [531, 591, 757, 758, 762, 766, 767, 768], "fork": [531, 591, 751, 760, 765], "forkserv": [531, 591], "spawn": [531, 591], "consol": [533, 591, 758, 771, 779, 786], "garbag": [533, 591], "collector": [533, 591], "get_all_arrays_in_memori": [533, 591], "exept": [537, 591], "exception_trace_mod": [537, 560, 591, 781], "lenient": [538, 561, 591], "inplace_mod": [538, 561, 591], "break": [538, 591, 750, 762, 766, 772, 780, 792], "strict": [538, 561, 591], "infus": [539, 591], "nestable_mod": [542, 564, 591, 781], "effeci": [543, 565, 591, 781], "promtion": [543, 591], "precise_mod": [543, 565, 591, 781], "shape_array_mod": [545, 567, 591, 781], "show_func_wrapper_trace_mod": [546, 568, 591, 781], "tmp_dr": [547, 591], "tmp_dir": [547, 569, 591, 781], "my_tmp": [547, 591], "49999999999975": [549, 591], "5015015015010504": [549, 591], "000444502911705e": [549, 591], "9999999999995j": [549, 591], "00000262": [550, 591], "15605032": [550, 591], "01208451j": [550, 591], "00048": [550, 591], "1296": [550, 591], "00864": [550, 591], "2048": [550, 591], "isn": [552, 591, 758, 774, 776, 787, 792, 805], "possibli": [554, 591, 779, 792], "100000023841858": [554, 591], "200000047683716": [554, 591], "299999952316284": [554, 591], "400000095367432": [554, 591], "599999904632568": [554, 591], "dictionai": [558, 591], "hemant": [558, 591], "unset_shape_array_mod": [559, 591], "set_exception_trace_mod": [560, 591, 770], "set_inplace_mod": [561, 591], "set_min_bas": [562, 591], "set_min_denomin": [563, 591], "set_nestable_mod": [564, 591], "set_precise_mod": [565, 591], "set_queue_timeout": [566, 591], "set_shape_array_mod": [567, 591], "set_show_func_wrapper_trace_mod": [568, 591, 770], "set_tmp_dir": [569, 591], "my_dir": [569, 591], "451": [570, 591], "in_ax": [571, 591], "out_ax": [571, 591], "thereof": [571, 591], "summaris": [571, 591], "99999998": [572, 592], "09999998": [572, 592], "19999998": [572, 592], "00000001": [572, 592], "00300001": [572, 592], "00800001": [572, 592], "0125": [572, 592], "17294501": [572, 592], "15770318": [572, 592], "20863818": [572, 592], "90000075": [573, 592], "90000164": [573, 592], "9000032": [573, 592], "50000012e": [573, 592], "92558754": [573, 592], "92558694": [573, 592], "92558682": [573, 592], "92558861": [573, 592], "60000025e": [573, 592], "01024": [573, 592], "retain_grad": [574, 592], "func_ret": [574, 592, 775], "666666": [574, 592], "333332": [574, 592], "66666675": [574, 582, 592], "argnum": [575, 592], "933": [575, 577, 592], "jacobian": [577, 592, 792, 803], "jac_fn": [577, 592], "639": [578, 592], "361": [578, 592], "value_grad": [582, 592], "42333412": [582, 592], "5333333": [582, 592], "93333334": [582, 592], "43333334": [582, 592], "0666666": [582, 592], "softsign": 583, "718281828459045": 584, "euler": [584, 791], "141592653589793": 584, "cast_bool": 585, "cmp_i": 585, "cmp_isnot": 585, "for_loop": 585, "if_els": 585, "try_except": 585, "while_loop": 585, "asarray_handle_nest": 586, "asarray_infer_devic": 586, "asarray_infer_dtyp": 586, "asarray_inputs_to_native_shap": 586, "asarray_to_native_arrays_and_back": 586, "as_ivy_dtyp": [587, 777], "as_native_dtyp": 587, "check_float": 587, "closest_valid_dtyp": 587, "default_dtyp": [587, 766, 773], "dtype_bit": 587, "function_supported_dtyp": [587, 766, 779], "function_unsupported_dtyp": [587, 766], "infer_default_dtyp": 587, "invalid_dtyp": [587, 766], "is_hashable_dtyp": 587, "is_native_dtyp": 587, "promote_typ": [587, 766], "promote_types_of_input": [587, 766, 776], "type_promote_arrai": [587, 766], "unset_default_complex_dtyp": 587, "unset_default_float_dtyp": 587, "unset_default_int_dtyp": 587, "unset_default_uint_dtyp": 587, "valid_dtyp": 587, "defaultcomplexdtyp": 587, "defaultdtyp": 587, "defaultfloatdtyp": 587, "defaultintdtyp": 587, "defaultuintdtyp": 587, "as_ivy_dev": [588, 786], "clear_cached_mem_on_dev": 588, "dev_util": [588, 767], "function_supported_devic": 588, "function_unsupported_devic": 588, "get_all_ivy_arrays_on_dev": [588, 767], "handle_soft_device_vari": [588, 767], "num_cpu_cor": [588, 767], "num_gpu": [588, 767, 779], "num_ivy_arrays_on_dev": 588, "percent_used_mem_on_dev": 588, "print_all_ivy_arrays_on_dev": 588, "set_split_factor": [588, 770], "split_func_cal": 588, "total_mem_on_dev": [588, 767], "tpu_is_avail": 588, "unset_default_devic": [588, 767], "unset_soft_device_mod": [588, 767], "used_mem_on_dev": 588, "defaultdevic": [588, 767], "profil": 588, "save_dir": 588, "arg_info": 591, "arg_nam": 591, "cache_fn": [591, 773], "current_backend_str": [591, 779, 784, 786], "function_supported_devices_and_dtyp": 591, "function_unsupported_devices_and_dtyp": 591, "get_item": [591, 776], "get_referrers_recurs": 591, "inplace_arrays_support": 591, "inplace_variables_support": 591, "is_ivy_nested_arrai": 591, "isscalar": 591, "match_kwarg": 591, "num_arrays_in_memori": 591, "print_all_arrays_in_memori": 591, "set_item": 591, "to_ivy_shap": 591, "to_native_shap": 591, "try_else_non": 591, "unset_array_mod": [591, 781], "unset_exception_trace_mod": 591, "unset_inplace_mod": 591, "unset_min_bas": 591, "unset_min_denomin": 591, "unset_nestable_mod": 591, "unset_precise_mod": 591, "unset_queue_timeout": 591, "unset_show_func_wrapper_trace_mod": 591, "unset_tmp_dir": 591, "vmap": [591, 792, 803], "arraymod": 591, "precisemod": 591, "jac": 592, "value_and_grad": [592, 775], "feature_group_count": [593, 606, 613, 614], "oiw": [593, 606, 607, 613], "oihw": [593, 606, 609, 613], "oidhw": [593, 606, 610, 611, 613], "dhwio": [593, 606, 607, 610, 611, 613], "conv_general_dil": [593, 777], "conv_general_transpos": 593, "depthwis": [593, 615, 732], "overfit": [593, 616], "1428566": [593, 616], "49000001": [593, 616], "55599999": [593, 616], "21000004": [593, 616], "incom": [593, 617], "666": [593, 594, 617, 633], "4269": [593, 617], "911": [593, 617, 770], "157": [593, 617], "753": [593, 617], "545": [593, 600, 617, 696], "547": [593, 617, 767], "124": [593, 617], "852": [593, 617], "963": [593, 617], "98495483": [593, 617], "0293808": [593, 617], "0159359": [593, 617], "74752808": [593, 617], "20942307": [593, 617], "3205719": [593, 617], "long": [593, 618, 757, 758, 765, 766, 768, 770, 777, 784, 803], "unrol": [593, 618, 784, 787], "lstm": [593, 618, 732, 784, 803], "multi": [593, 594, 619, 622, 732, 768, 783, 792, 799, 801, 803, 807], "paper": [593, 619, 750, 798], "vaswani": [593, 619], "al": [593, 619], "num_attention_head": [593, 619], "key_dim": [593, 619, 732], "value_dim": [593, 619, 732], "query_dim": [593, 619], "measur": [593, 619, 732], "new_": [593, 619], "attention_weight": [593, 619], "attenion_weight": [593, 619], "out_feat_dim": [593, 619], "23333359": [593, 620], "03946018": [593, 620], "0280633": [593, 620], "29981947": [593, 620], "29981089": [593, 620], "06345534": [593, 620], "9634552": [593, 620], "19336844": [593, 620], "09336829": [593, 620], "axisa": [594, 622], "axisb": [594, 622], "axisc": [594, 622], "293": [594, 623], "46997": [594, 623], "45033181e": [594, 628], "02829754e": [594, 628], "54220343e": [594, 628], "12647155e": [594, 628], "38447177e": [594, 628], "56155300e": [594, 628], "26794919": [594, 628], "7320509": [594, 628], "0012": [594, 630], "00342": [594, 630], "000565": [594, 630], "0104": [594, 630], "000981": [594, 630], "00282": [594, 630], "000766": [594, 630], "0322": [594, 630], "00237": [594, 630], "000151": [594, 630], "00101": [594, 630], "00019": [594, 630], "0214": [594, 630], "00171": [594, 630], "0107": [594, 630], "0167": [594, 630], "0472": [594, 630], "0536": [594, 630], "0177": [594, 630], "000429": [594, 630], "00762": [594, 630], "lu_factor": 594, "pivot": [594, 631], "lu": [594, 631], "frobeniu": [594, 633], "nuclear": [594, 633], "induc": [594, 633], "ranl": [594, 633], "47722558": [594, 633], "776": [594, 633], "6000004": [594, 633], "118": [594, 634], "moor": [594, 638], "penros": [594, 638], "deteremin": [594, 640], "logsabsdet": [594, 640], "although": [594, 640, 761, 764, 777, 782, 801, 803], "subject": [594, 640], "solut": [594, 641, 750, 757, 758, 764, 766, 778, 779, 782, 801, 805], "ordin": [594, 641, 791], "usvh": [594, 642], "cetera": [594, 642], "86217213": [594, 643], "31816804": [594, 643], "615": [594, 643], "ss": [594, 643], "25994301": [594, 643], "16403675": [594, 643], "61529762": [594, 643], "51231241": [594, 643], "39777088": [594, 643], "15413129": [594, 643], "1029852": [594, 643], "01383495": [594, 643], "86647356": [594, 643], "7786541": [594, 643], "55970621": [594, 643], "16857576": [594, 643], "86412698": [594, 643], "37566757": [594, 643], "88477993": [594, 643], "95925522": [594, 643], "6444726": [594, 643], "54687881": [594, 643], "16134834": [594, 643], "35037804": [594, 643], "31025076": [594, 643], "35769391": [594, 643], "transposit": [594, 644], "success": [594, 604, 646, 718, 720, 765, 797], "0x": [594, 647], "Such": [594, 647, 773, 779], "progress": [594, 647, 757, 758, 789], "alexandr": [594, 647], "theophil": [594, 647], "9000001": [594, 649], "64158917": [594, 649], "skew": [594, 650], "6666193": [595, 651], "67164493e": [595, 651], "05471958e": [595, 651], "32684899e": [595, 651], "30496836e": [595, 651], "e501": [595, 651, 732], "05393649": [595, 651], "49992943": [595, 651], "83330965": [595, 651], "35667494": [595, 653], "79329094": [595, 653], "512926": [595, 653], "outsid": [596, 654, 665, 767, 773, 786, 808], "honor": [596, 661], "beyond": [596, 662, 769, 777, 809], "famili": [596, 665], "intxx": [596, 665], "floatxx": [596, 665], "construct": [596, 667, 732, 735, 736, 737, 784, 788, 789, 801, 803, 810], "rep": [596, 667], "fomaml_step": 597, "inner_cost_fn": [597, 670, 671, 672], "outer_cost_fn": [597, 670, 671], "inner_grad_step": [597, 670, 671, 672], "inner_learning_r": [597, 670, 671, 672], "inner_optimization_step": [597, 670, 671, 672], "inner_batch_fn": [597, 670, 671], "outer_batch_fn": [597, 670, 671], "average_across_step": [597, 670, 671], "inner_v": [597, 670, 671], "keep_inner_v": [597, 670, 671], "outer_v": [597, 670, 671], "keep_outer_v": [597, 670, 671], "return_inner_v": [597, 670, 671, 672], "num_task": [597, 670, 671, 672], "maml": [597, 670, 671], "0x7fe7c1890b80": [597, 670, 671, 672], "maml_step": 597, "vanilla": [597, 671, 788, 803], "recev": [597, 671], "reptile_step": 597, "cost_fn": [597, 672], "reptil": [597, 672], "_variabl": [597, 672], "batch_in": [597, 672], "4485182": [597, 672], "139": [597, 672], "9569855": [597, 672], "9880483": [597, 672], "01766968": [597, 672], "02197957": [597, 672], "02197981": [597, 672], "all_nested_indic": 598, "include_nest": [598, 673], "_index": [598, 673, 684], "_base": [598, 673, 683, 684, 776], "extra_nest_typ": [598, 673, 674, 683, 684, 685], "themselv": [598, 673, 764, 766, 767, 769, 773, 777, 788, 800, 809], "copy_nest": 598, "to_mut": [598, 674, 685], "deepli": [598, 674, 792, 803], "mutabl": [598, 674, 680, 681, 685, 690, 691, 762], "copied_nest": [598, 674], "1337": [598, 674, 685], "duplicate_array_index_chain": 598, "index_nest": [598, 773], "insert_into_nest_at_index": 598, "insert_into_nest_at_indic": 598, "onto": [598, 679, 685, 795, 796, 803], "special_squar": [598, 679], "6666666666666667": [598, 679], "special_pow": [598, 679], "linear_model": [598, 679], "map_nest_at_index": 598, "shallow": [598, 680, 681, 685, 690, 691], "_result": [598, 680, 690], "hh": [598, 680, 685], "map_nest_at_indic": 598, "ub": [598, 681], "tb": [598, 681], "multi_index_nest": 598, "nested_ani": 598, "check_nest": [598, 683, 684], "conditon": [598, 683, 684], "nested_argwher": 598, "stop_after_n_found": [598, 684], "nested_indic": [598, 684], "nested_map": [598, 767, 773], "_depth": [598, 685], "_tuple_check_fn": [598, 685], "_list_check_fn": [598, 685], "_dict_check_fn": [598, 685], "wherebi": [598, 685, 756, 800], "ah": [598, 685], "bh": [598, 685], "ch": [598, 685], "dh": [598, 685, 760], "eh": [598, 685], "gh": [598, 685, 757], "ih": [598, 685], "1338": [598, 685], "nested_multi_map": 598, "index_chain": [598, 686], "nest0": [598, 686], "ivy_arrai": [598, 686, 761, 777], "unappli": [598, 686], "prune_empti": 598, "prune_nest_at_index": 598, "prune_nest_at_indic": 598, "set_nest_at_index": 598, "set_nest_at_indic": 598, "xyz": [598, 691], "pqr": [598, 691], "mini": [599, 692, 732, 735], "uniformli": [600, 694, 696], "22346112": [600, 695], "0922": [600, 695], "49671414": [600, 695], "1382643": [600, 695], "64768857": [600, 695], "5230298": [600, 695], "23415337": [600, 695], "23413695": [600, 695], "9213753": [600, 695], "12818667": [600, 695], "799": [600, 695], "469": [600, 695], "287": [600, 695], "0366": [600, 695], "26431865": [600, 696], "475": [600, 696], "878": [600, 696], "861": [600, 696], "929": [600, 696], "789": [600, 696], "519": [600, 696], "0435": [600, 696], "381": [600, 696], "4608004": [600, 696], "8458502": [600, 696], "67270088": [600, 696], "31128597": [600, 696], "zeroel": [601, 702], "guarante": [602, 704, 706, 761, 766, 776, 792, 798], "aggreg": [602, 704, 765], "fourth": [602, 704], "1141": [602, 704], "8101": [602, 704], "9298": [602, 704], "8460": [602, 704], "2119": [602, 704], "3519": [602, 704], "6252": [602, 704], "4033": [602, 704], "7443": [602, 704], "2577": [602, 704], "3707": [602, 704], "0545": [602, 704], "3238": [602, 704], "5944": [602, 704], "0775": [602, 704], "4327": [602, 704], "62519997": [602, 704], "40329999": [602, 704], "59439999": [602, 704], "74430001": [602, 704], "81010002": [602, 704], "84600002": [602, 704], "92979997": [602, 704], "einstein": [604, 714, 744], "117": [604, 714], "sentinel": [604, 715, 717], "90000004": [604, 716], "intend": [604, 720, 731, 760, 772, 775, 801, 803, 807, 808], "07472222": [604, 721], "00666667": [604, 721], "08966666": [604, 721], "simplicit": [605, 722, 723], "geglu": 728, "leakyrelu": 728, "logsoftmax": 728, "from_flax_modul": 729, "native_modul": 729, "params_fx": 729, "rng_seed": 729, "constructor_arg": 729, "constructor_kwarg": 729, "instance_arg": 729, "instance_kwarg": 729, "flax": [729, 789, 792, 798, 803], "from_haiku_modul": 729, "params_hk": 729, "from_paddle_modul": 729, "paddl": [729, 741, 756, 757, 766], "from_torch_modul": 729, "dedic": [729, 772, 782, 786, 788], "native_module_class": 729, "modulehelp": [730, 734], "check_submod_ret": 730, "expected_submod_ret": [730, 734], "get_mod_kei": 730, "top_mod": 730, "explicit": [730, 757, 764, 766, 775, 776, 777, 784, 792, 803], "mod_depth": 730, "mod_height": 730, "mod_with_top_mod_key_chain": 730, "flatten_key_chain": 730, "iimedi": 730, "parent": [730, 756, 765, 786], "show_mod_in_top_mod": 730, "upper_depth": 730, "lower_depth": 730, "coverag": [730, 766, 779], "prompt": [730, 756, 758], "show_structur": 730, "this_repr": 730, "show_v_in_top_v": 730, "perspect": 730, "top_v": 730, "sub_mod": 730, "show_v": 730, "comopos": 730, "track_submod_call_ord": [730, 734], "track_submod_ret": [730, 734], "v_with_top_v_key_chain": 730, "create_vari": [731, 788], "var_shap": [731, 788], "fan_out": [731, 788], "fan_in": [731, 788], "rectangular": 731, "firstlayersiren": 731, "siren": 731, "distribt": 731, "glorotuniform": [731, 732, 788], "glorot": 731, "xavier": 731, "neuron": 731, "w_1x_1": 731, "w_2x_2": 731, "w_nx_n": 731, "w_i": 731, "vanish": 731, "explod": [731, 795, 796], "kaimingnorm": 731, "fan_mod": [731, 788], "kaim": 731, "he": 731, "negative_slop": 731, "fan": 731, "propog": 731, "fan_sum": [731, 788], "proport": 731, "Ones": 731, "randomnorm": 731, "stddev": 731, "w0": 731, "gain": [731, 758, 760, 783, 788, 803], "wlim": 731, "predefin": 731, "initialz": 731, "fan_avg": 731, "adaptiveavgpool1d": 732, "avgpool1d": 732, "implicit": [732, 764, 769, 777, 779, 784, 803], "avgpool2d": 732, "avgpool3d": 732, "filter_s": 732, "weight_initi": [732, 788], "bias_initi": [732, 788], "0x7fe7c1909900": 732, "0x7fe7c19098d0": 732, "conv1dtranspos": 732, "0x7fe7c19097e0": 732, "0x7fe7c19097b0": 732, "filter_shap": 732, "0x7fe7c1909720": 732, "0x7fe7c19096f0": 732, "0x7fe7c1908e20": 732, "0x7fe7c1908e50": 732, "0x7fe7c1908fa0": 732, "0x7fe7c1908fd0": 732, "conv3dtranspos": 732, "0x7fe7c1909060": 732, "0x7fe7c1909090": 732, "depthwiseconv2d": 732, "num_channel": 732, "0x7fe7c1908ee0": 732, "0x7fe7c1908f10": 732, "bernoul": 732, "num_embed": 732, "embedding_dim": 732, "padding_idx": 732, "lookup": 732, "num_embeddingss": 732, "whenev": [732, 758, 762, 765, 766, 770, 776, 779, 781, 787], "renorm": 732, "insensit": 732, "num_lay": 732, "return_sequ": 732, "return_st": 732, "0x7fe7c1909300": 732, "get_initial_st": 732, "0x7fe7c1908880": 732, "0x7fe7c1908160": 732, "maxpool1d": 732, "maxpool3d": 732, "multiheadattent": 732, "embed_dim": 732, "head_dim": 732, "dropout_r": 732, "use_proj_bia": 732, "attention_ax": 732, "build_mod": [732, 733, 734], "on_init": [732, 734], "parallel": [732, 763, 803, 807, 808], "binarycrossentropyloss": 733, "store_var": [733, 734], "fallback_to_non_compil": [733, 734, 736], "with_partial_v": [733, 734], "logpoissonloss": 733, "modulemeta": 734, "submod_depth": 734, "submods_to_track": 734, "varibl": 734, "temporarili": [734, 754, 760], "from_cal": 734, "built_": 734, "compile_kwarg": 734, "_unified_ivy_graph": 734, "_call": 734, "register_buff": 734, "var_nam": 734, "weights_path": 734, "randomness_factor": 734, "with_edge_label": 734, "with_arg_label": 734, "with_output_label": 734, "output_connected_onli": 734, "highlight_subgraph": 734, "num_featur": 735, "affin": 735, "track_running_stat": 735, "trail": 735, "layernorm": 735, "normalized_shap": 735, "elementwise_affin": 735, "set_stat": [736, 788], "init_on_first_step": 736, "ignore_miss": 736, "privat": [736, 777, 779], "_step": [736, 788], "stochast": [736, 803], "sub_modul": 737, "check_al": 738, "messag": [738, 745, 749, 757, 758, 765, 768, 770, 771, 777, 784, 786, 797], "check_all_or_any_fn": 738, "check_ani": 738, "check_dev_correct_format": 738, "check_dimens": 738, "check_elem_in_list": [738, 773, 776, 777], "elem": 738, "check_equ": [738, 777], "check_exist": 738, "check_fals": 738, "check_fill_value_and_dtype_are_compat": [738, 780], "check_gather_input_valid": 738, "check_gather_nd_input_valid": 738, "check_great": 738, "allow_equ": [738, 770], "check_inplace_sizes_valid": [738, 776], "check_isinst": 738, "allowed_typ": 738, "check_kernel_padding_s": 738, "padding_s": 738, "check_less": [738, 770], "check_one_way_broadcast": 738, "check_same_dtyp": 738, "check_shapes_broadcast": 738, "check_tru": 738, "check_unsorted_segment_min_valid_param": 738, "ast_help": 740, "importtransform": 740, "nodetransform": 740, "impersonate_import": 740, "tree": [740, 752, 766], "local_ivy_id": 740, "visit_import": 740, "visit_importfrom": 740, "ivyload": 740, "loader": [740, 750, 787, 792], "exec_modul": 740, "ivypathfind": 740, "metapathfind": 740, "find_spec": 740, "fullnam": 740, "contextmanag": 741, "choose_random_backend": 741, "convert_from_numpy_to_target_backend": 741, "variable_id": 741, "numpy_obj": 741, "convert_from_source_backend_to_numpi": 741, "current_backend": [741, 756, 770, 773, 778, 780, 784], "global_backend": 741, "fn_name_from_version_specific_fn_nam": 741, "prevent_access_loc": 741, "previous_backend": [741, 762], "unset": [741, 762, 784], "Or": [741, 750, 753, 776, 787], "set_backend_to_specific_vers": 741, "set_jax_backend": 741, "set_mxnet_backend": 741, "mxnet": [741, 756, 757, 797, 810], "mx": 741, "set_numpy_backend": 741, "set_paddle_backend": 741, "set_tensorflow_backend": 741, "set_torch_backend": 741, "unset_backend": [741, 762], "with_backend": 741, "sub_backend_handl": 742, "available_sub_backend": 742, "clear_sub_backend": 742, "find_available_sub_backend": 742, "sub_backends_loc": 742, "set_sub_backend": 742, "sub_backend_str": 742, "unset_sub_backend": 742, "dynamic_import": 743, "import_modul": [743, 784], "einsum_pars": 744, "convert_interleaved_input": 744, "interleav": 744, "convert_subscript": 744, "old_sub": 744, "symbol_map": 744, "subscript": 744, "oe": 744, "ellipsi": 744, "find_output_shap": 744, "find_output_str": 744, "canon": 744, "gen_unused_symbol": 744, "abd": 744, "get_symbol": 744, "letter": 744, "resort": 744, "unicod": 744, "charact": [744, 777, 797], "chr": 744, "surrog": 744, "\u0155": 744, "20000": 744, "\u4eac": 744, "has_valid_einsum_chars_onli": 744, "einsum_str": 744, "abaz": 744, "\u00f6ver": 744, "is_valid_einsum_char": 744, "\u01f5": 744, "legalise_einsum_expr": 744, "reproduct": 744, "pars": [744, 763, 768, 792], "intak": 744, "contract_path": 744, "parse_einsum_input": 744, "einsum_eqn": 744, "legalis": 744, "legalise_einsum_eqn": 744, "za": 744, "xza": 744, "xz": 744, "possibly_convert_to_numpi": 744, "myshap": 744, "__main__": 744, "0x10f850710": 744, "inplaceupdateexcept": 745, "include_backend": [745, 770], "invalidbackendexcept": 745, "ivyattributeerror": [745, 770], "attributeerror": [745, 770, 786], "ivybroadcastshapeerror": [745, 770], "ivydeviceerror": 745, "ivydtypepromotionerror": [745, 770], "ivyindexerror": [745, 770], "ivynotimplementedexcept": [745, 770], "notimplementederror": 745, "ivyvalueerror": [745, 770], "handle_except": [745, 772, 774], "add_array_spec": 746, "fn_array_spec": 746, "set_logging_mod": 747, "debug": [747, 757, 758, 764, 765, 775, 779, 782, 787, 803], "unset_logging_mod": 747, "print_stat": 748, "viz": 748, "snakeviz": 748, "bonu": 748, "cprofil": 748, "cprint": [749, 784], "awai": [750, 801, 803], "grow": [750, 803], "essenti": [750, 756, 762, 764, 767, 768, 773, 776, 777, 778, 796, 797, 809], "mainli": [750, 756, 759, 775, 777, 779, 785, 787, 794, 803], "handler": [750, 783, 785, 789, 794], "scene": [750, 759, 783, 785, 795, 796, 803], "facilit": 750, "mse_loss": 750, "jax_ms": 750, "tf_mse": 750, "np_mse": 750, "torch_ms": 750, "favorit": 750, "mechan": [750, 765, 790, 792], "robot": [750, 790], "reinforc": [750, 791], "gym": 750, "trainer": [750, 790, 792, 798, 810], "flexibl": [750, 764, 766, 772, 775, 780, 782, 803], "everyon": [750, 751, 756, 757, 758, 792, 798], "plan": [750, 791, 793], "interoper": [750, 797, 800, 801, 803, 806], "pull": [750, 751, 752, 756, 757, 760, 768, 771, 780, 782, 792, 793, 798], "sweat_smil": 750, "video": [750, 751, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 793, 801], "quit": [750, 754, 758, 761, 768, 769, 773, 774, 779, 782, 803, 809], "jax_fn": 750, "jax_x": 750, "torch_x": 750, "torch_fn": 750, "focus": [750, 780, 791, 801, 802, 803, 809, 810], "orient": [750, 791], "contributor": [750, 751, 754, 756, 757, 758, 777, 783, 803], "nuanc": 750, "background": [750, 757, 763, 803, 805], "contextualis": 750, "problem": [750, 758, 760, 761, 762, 767, 777, 786, 797, 799, 805, 809], "explos": [750, 795, 797], "adher": [750, 760, 766, 769, 772, 782, 784, 789, 796, 797, 799, 800, 809], "shorter": [750, 786], "ensp": 750, "customiz": [750, 763], "deepmind_perceiver_io": 750, "sm_framework": 750, "segmentation_model": 750, "sm": 750, "torch_sm": 750, "metric": [750, 792], "iou_scor": 750, "rax": 750, "torch_rax": 750, "poly1_softmax_loss": 750, "madmom": 750, "madmon": 750, "torch_madmom": 750, "freq": 750, "audio": 750, "hz2midi": 750, "torch_loss": 750, "maxpooling1d": 750, "pool_siz": 750, "tf_kornia": 750, "tf_rax": 750, "tf_madmom": 750, "tf_loss": 750, "hk_eff_encod": 750, "dummy_x": 750, "jax_sm": 750, "jax_madmom": 750, "jax_loss": 750, "np_kornia": 750, "np_sm": 750, "np_rax": 750, "np_loss": 750, "yourself": [750, 756, 758, 771, 779, 782, 791], "favourit": [750, 757], "hyperparam": 750, "believ": [750, 758, 797], "feedback": [750, 765], "appreci": 750, "amaz": 750, "journei": [750, 751], "ambiti": 750, "season": 750, "perfect": [750, 791], "idea": [750, 752, 756, 780, 785, 791, 798, 802], "fellow": 750, "twitter": 750, "sneak": 750, "peek": 750, "stai": [750, 765], "credit": 750, "accompani": 750, "lenton2021ivi": 750, "inter": 750, "author": [750, 756, 758, 801, 805], "lenton": 750, "daniel": 750, "pardo": 750, "fabio": 750, "falck": 750, "fabian": 750, "jame": 750, "stephen": 750, "clark": 750, "ronald": 750, "journal": 750, "arxiv": 750, "preprint": 750, "2102": 750, "02886": 750, "year": [750, 760, 792, 796, 798, 803], "strongli": [751, 757, 777, 809, 810], "engag": [751, 758, 797], "skill": [751, 805], "veteran": 751, "effort": [751, 756, 792, 797, 799, 803, 809], "board": [751, 763], "stage": [751, 758, 759, 760, 763, 779, 797, 803], "excit": [751, 759, 797], "mech": [752, 753], "grasp": [752, 777], "mutual": [752, 764, 773], "virtual": [752, 758, 777, 797, 806, 807], "venv": 752, "ivy_dev": [752, 757, 758], "bat": [752, 757, 758], "mac": [752, 757, 758], "linux": [752, 757, 758, 806, 808], "ivy_robot": [752, 791], "docker": [752, 754, 755], "desktop": [752, 757], "pwd": [752, 753], "pycharm": [752, 754, 779], "vscode": [752, 757], "devcontain": [752, 757], "remot": [752, 757, 760, 771], "codespac": 752, "make_doc": 753, "sh": [753, 757, 758, 760, 765], "host": [753, 765, 792, 797, 808], "ssh": [753, 765], "make_docs_without_dock": [753, 763], "assist": 754, "navig": [754, 757, 758, 759], "runtimeerror": 754, "logaddexp2_cpu": 754, "falsifi": [754, 760, 779], "test_logaddexp2": 754, "backend_fw": [754, 778], "on_devic": [754, 778], "dtype_and_x": [754, 778, 779], "test_flag": [754, 778, 779], "functiontestflag": 754, "ground_truth_backend": [754, 778], "num_positional_arg": [754, 778, 779], "with_out": [754, 778, 779], "instance_method": [754, 779], "test_gradi": [754, 779], "test_compil": 754, "as_vari": [754, 778, 779], "fn_name": [754, 762, 778, 779], "reproduce_failur": [754, 760, 774, 779], "axicy2bkaamobaar2waaaacvaai": 754, "assertionerror": [754, 760, 770, 778, 779], "25830078125": 754, "258544921875": 754, "test_acosh": 754, "axicy2baabyqwqgiaabdaai": 754, "instabl": [754, 766], "41421356": 754, "41421356e": 754, "34078079e": 754, "154": 754, "test_ab": [754, 757, 779], "000j": 754, "154j": 754, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 754, "experiment": [754, 758, 766, 777, 780, 784, 803], "few": [755, 756, 758, 764, 766, 767, 772, 773, 775, 776, 778, 779, 782, 784, 785, 786, 787, 788, 790, 798, 803, 805], "climb": 755, "steep": 755, "curv": 755, "realpython": 755, "pyn": 755, "regard": [755, 764, 777, 778, 782, 797], "exchang": [755, 797, 799, 801], "stuck": [755, 756], "spell": 755, "sound": [755, 765, 783], "peopl": [755, 757, 758, 759, 803, 805], "frequent": [756, 758, 762, 803], "outlin": [756, 757, 758, 759, 764, 766, 769, 773, 776, 777, 779], "broad": [756, 805], "individu": [756, 758, 760, 762, 766, 773, 777, 803, 806, 809, 810], "clearli": [756, 758, 768, 778, 779, 797, 807], "hypothesi": [756, 758, 760, 765, 774], "aforement": 756, "arraywithelementwis": [756, 761, 786], "containerwithmanipul": 756, "thorough": [756, 769, 772, 779], "comment": [756, 757, 758, 760, 766, 771, 777, 782], "add_reformatting_checklist_": 756, "category_nam": [756, 766, 767, 769, 772, 773], "pr": [756, 758, 760, 771, 777, 778, 779], "autom": [756, 765, 771, 779, 794, 805], "bot": [756, 771], "markdown": [756, 763], "patient": [756, 757], "statu": [756, 765, 771, 798], "mark": [756, 758, 760, 779, 784], "checkbox": [756, 757], "proce": [756, 757], "elabor": 756, "struggl": 756, "assigne": 756, "status": 756, "refrain": 756, "scipi": [756, 797, 805, 810], "mindspor": 756, "merg": [756, 758, 760, 765, 777, 803], "composition": 756, "pend": 756, "helpfulli": [756, 782, 801], "problemat": [756, 757], "unimpl": 756, "issue_link": 756, "alias": [756, 777, 778], "alias_nam": 756, "push": [756, 758, 760, 778, 779, 809], "liner": 756, "meanwhil": [756, 765], "reselect": 756, "placement": 756, "categoris": [756, 760, 777], "faithfulli": 756, "creation_routin": [756, 778], "indexing_routin": 756, "ma": 756, "manipulation_routin": 756, "mathematical_funct": [756, 777], "sorting_searching_count": 756, "ufunc": [756, 777], "matrix_and_vector_product": 756, "matrix_eigenvalu": 756, "norms_and_other_numb": 756, "solving_equations_and_inverting_matric": 756, "seem": [756, 757, 782, 788, 789, 792, 803], "namespac": [756, 766, 774, 777, 778, 780, 784, 789], "gleam": 756, "uncom": 756, "test_numpy_inn": 756, "ivy_test": [756, 757, 758, 760, 763, 765, 778], "test_ivi": [756, 757, 758, 763, 765, 778, 779], "test_frontend": [756, 765, 778], "unsur": [756, 779], "central": [756, 771, 782, 797, 809], "analyz": [756, 794], "relevant_submodul": 756, "strategi": [756, 778], "roadmap": [756, 765], "deem": [756, 777], "subtask": 756, "clearer": [756, 770, 778, 787], "backend_nam": [756, 762, 766, 767, 769, 772, 773, 774], "sometim": [756, 757, 758, 760, 766, 773, 777, 779, 782], "rare": [756, 767, 792, 808], "button": [756, 757, 758], "centr": 756, "predetermin": 756, "superset": [756, 759, 773, 776, 792], "reserv": 756, "submit": [756, 771], "happi": [757, 792, 798], "your_usernam": 757, "your_fold": 757, "enter": [757, 758, 761, 766, 767, 772, 774], "sync": [757, 760], "nutshel": [757, 772], "hook": [757, 771], "lint": 757, "properli": [757, 759, 770, 771, 777, 779], "whatev": [757, 764, 792], "elig": 757, "student": 757, "licens": [757, 806], "remind": 757, "expir": 757, "profession": 757, "trial": 757, "jetbrain": 757, "month": [757, 796], "bui": [757, 809], "paid": 757, "rapid": [757, 796, 797, 803], "pace": 757, "person": [757, 758], "abil": [757, 782, 785, 792, 803], "perhap": [757, 786, 787, 788, 792, 809], "conda": [757, 797, 805], "icon": [757, 758], "panel": 757, "palett": 757, "ctrl": [757, 758], "intel": [757, 797, 801, 808], "m1": 757, "optional_apple_silicon_1": 757, "optional_apple_silicon_2": 757, "builtin": [757, 786, 788], "cmd": 757, "virtualenv": 757, "tick": [757, 758, 765], "paddlepaddl": 757, "nz2": 757, "openssl": 757, "libssl1": 757, "1_1": 757, "1f": 757, "1ubuntu2": 757, "19_amd64": 757, "deb": 757, "dpkg": 757, "array_api_test": [757, 758, 760], "test_array_api": [757, 758, 760, 779], "suit": [757, 759, 760, 765, 779, 787, 791, 794, 797, 803, 809], "mitig": [757, 809], "powershel": 757, "admin": 757, "menu": 757, "introspect": 757, "dialog": 757, "persist": 757, "caus": [757, 758, 760, 762, 764, 765, 766, 768, 776, 778, 779, 792], "earlier": [757, 758, 766, 780], "virtualis": 757, "bio": [757, 797], "dropdown": [757, 765], "dockerfil": 757, "ca": 757, "certif": 757, "gnupg": 757, "lsb": 757, "keyr": 757, "fssl": 757, "gpg": 757, "dearmor": 757, "arch": 757, "lsb_releas": 757, "null": 757, "ce": 757, "cli": 757, "containerd": 757, "plugin": 757, "systemctl": 757, "permiss": [757, 765], "softwar": [757, 758, 796, 797, 801, 806, 807, 808], "press": [757, 758, 787], "successful": 757, "4a": 757, "socket": 757, "rwx": 757, "sock": 757, "pid": 757, "coupl": [757, 761, 786, 788, 803], "editor": 757, "pytest": [757, 758, 760, 765, 774, 779], "keyboard": 757, "screenshot": 757, "pop": [757, 797], "test_elementwis": 757, "bar": 757, "shell": [757, 758], "run_tests_cli": [757, 760], "run_ivy_core_test": 757, "run_ivy_nn_test": 757, "run_ivy_stateful_test": 757, "run_test": [757, 765], "test_depend": 757, "test_ivy_cor": 757, "test_ivy_nn": 757, "test_ivy_st": 757, "unix": 757, "test_": [757, 778], "test_funct": [757, 758, 765, 778, 779], "test_cor": [757, 758, 778], "offici": [757, 766, 784], "wish": [757, 777], "ivy_nn": 757, "ivy_st": 757, "header": [757, 758], "arrow": 757, "test_stat": 757, "test_submodule_nam": 757, "test_function_nam": 757, "debugg": 757, "studio": [757, 779], "especi": [757, 762, 771, 796, 803], "afterward": [757, 787], "overlap": [757, 765, 780, 782, 804], "test_file_path": 757, "test_fn_nam": 757, "engin": [757, 803, 805, 806], "comma": 757, "postcreatecommand": 757, "post_create_command": 757, "poststartcommand": 757, "safe": [757, 777], "containerworkspacefold": 757, "reopen": 757, "test_fle_path": 757, "slash": 757, "computation": 757, "comfort": [757, 770], "isol": [757, 758, 804, 809], "container": 757, "intens": 757, "headach": 757, "arm": [757, 758], "vm": [757, 765], "azur": 757, "cloud": [757, 765, 791, 805], "longer": [757, 766, 776, 779, 803], "theme": [757, 763], "ipad": 757, "browser": [757, 763], "quota": 757, "requisit": 757, "pane": [757, 758, 765], "dockerfilegpu": 757, "ivv": 757, "multiv": 757, "multivers": [757, 780], "dockerfilemultivers": 757, "dockerhub": 757, "region": 757, "box": 757, "upto": [757, 758], "minut": [757, 765], "launch": 757, "quickli": [757, 758, 765, 787, 788, 796, 798, 803, 810], "kindli": 757, "guidelin": 757, "conatin": 757, "colour": 757, "chanc": 757, "troubleshoot": 757, "ever": 757, "flask": 757, "toolbar": [757, 758], "_array_modul": [757, 760], "refresh": 757, "workspac": 757, "pytestarg": 757, "unittesten": 757, "pytesten": 757, "autotestdiscoveronsaveen": 757, "conftest": 757, "tendenc": 758, "land": 758, "unrel": [758, 797], "fly": [758, 803], "hard": [758, 786, 803], "internship": 758, "serv": [758, 761, 764, 772, 773, 777, 778, 779, 782, 783, 794, 801], "suspect": 758, "iii": 758, "reformat": [758, 771], "issue_numb": 758, "12345": 758, "clean": [758, 780, 784, 785, 787], "rememb": 758, "respond": 758, "dai": [758, 771], "freed": 758, "situat": [758, 765, 789], "unabl": [758, 782], "obvious": [758, 765], "qualiti": 758, "hypothet": 758, "frustrat": 758, "busi": 758, "inact": 758, "unfairli": 758, "investig": 758, "name_of_your_branch": 758, "date": [758, 760], "complic": [758, 778, 784], "merge_with_upstream": 758, "abort": 758, "tediou": [758, 768, 782], "stash": [758, 771], "reinstat": 758, "uncommit": 758, "unstag": [758, 771], "untrack": 758, "atlassian": 758, "wrote": 758, "blame": 758, "eg": 758, "week": [758, 798], "grep": 758, "commit_id": 758, "handi": 758, "histori": 758, "toggl": 758, "highlight": [758, 765, 768, 777], "approv": 758, "someon": [758, 792], "hash": [758, 787], "cancel": 758, "speedup": 758, "unavail": 758, "tickbox": 758, "substanti": [758, 761, 766, 779, 797, 803], "span": [758, 801, 809], "intent": [758, 776], "discourag": 758, "adopt": [758, 761, 772, 782, 797, 802, 803, 808], "philosophi": 758, "valuabl": 758, "infrequ": 758, "earli": [758, 803], "wast": [758, 765], "spot": [758, 768, 773], "mistak": 758, "propos": [758, 777, 782, 803], "mountain": 758, "advoc": [758, 792], "session": [758, 803], "beauti": 758, "care": [758, 767, 777, 782, 789, 797], "concern": [758, 759, 764, 766, 768, 776, 782, 783, 809], "undo": 758, "stress": 758, "nifti": 758, "reassur": 758, "local_path_to_ivi": 758, "subfold": [758, 778, 779, 780], "dep": 758, "fresh": 758, "arsen": 758, "exec": 758, "ivy_contain": 758, "test_imag": 758, "test_random_crop": 758, "test_creation_funct": 758, "test_arang": 758, "cursor": 758, "alt": 758, "blog": 758, "breakpoint": 758, "gutter": 758, "caret": 758, "f8": 758, "f9": 758, "Into": 758, "f7": 758, "smart": 758, "fragment": [758, 799, 801, 805], "wherein": [758, 773, 779], "failur": [758, 765, 778, 779], "weed": [759, 783], "tour": 759, "conjunct": 760, "establish": [760, 805], "popular": [760, 803], "sens": [760, 768, 777, 786], "unconnect": 760, "initialis": [760, 777, 779], "everytim": [760, 766], "strang": [760, 786], "thoroughli": 760, "test_linalg": [760, 778], "test_set_funct": 760, "test_signatur": 760, "excess": [760, 762, 768], "array_modul": 760, "vv": 760, "test_manipulation_funct": 760, "test_concat": [760, 779], "nb": 760, "liber": 760, "______________________": 760, "test_remaind": 760, "_______________________": 760, "test_operators_and_elementwise_funct": 760, "1264": 760, "1277": 760, "binary_param_assert_against_refimpl": 760, "ctx": 760, "620": 760, "binary_assert_against_refimpl": 760, "324": 760, "scalar_o": 760, "17304064": 760, "binaryparamcontext": 760, "axic42baaowcnp": 760, "rumwmabaear0": 760, "make_binary_param": 760, "numeric_dtyp": 760, "left_strat": 760, "left_sym": 760, "right_strat": 760, "right_sym": 760, "right_is_scalar": 760, "binary_param_assert_dtyp": 760, "binary_param_assert_shap": 760, "recreat": 760, "unexpectedli": 760, "discrep": [760, 778], "test_asarray_arrai": 760, "test_floor_divid": 760, "health": 760, "test_iop": 760, "__imod__": 760, "isequ": 760, "test_matrix_norm": 760, "alter": 760, "tweak": 760, "array_api_methods_to_test": 760, "test_trac": 760, "test_special_cas": 760, "__ipow__": 760, "is_integ": 760, "easier": [760, 761, 762, 766, 778, 780, 794, 803, 805], "revisit": [760, 772], "_data": [761, 776, 777, 786], "organiz": [761, 764, 777], "bear": [761, 764, 766, 777], "underpin": [761, 764, 784], "programmat": [761, 764, 804], "backup": [761, 763, 764], "accident": [761, 764, 777], "absent": [761, 764], "auto": [761, 763, 764, 771, 787], "__mul__": [761, 764, 768, 772, 782, 786], "throw": [761, 766, 767, 770, 786, 803], "imposs": 761, "inputs_to_native_arrai": [761, 773, 774], "outputs_to_ivy_arrai": [761, 766, 767, 772, 773, 774], "secondli": [761, 766], "dictat": [761, 768, 772, 776], "__ivy_array_function__": 761, "inspir": [761, 791], "__torch_function__": 761, "myarrai": 761, "handled_funct": 761, "notimpl": 761, "issubclass": 761, "four": [761, 766, 768, 772, 773, 779, 782, 787], "enough": [761, 765, 767, 779, 786, 787, 788], "ivy_funct": 761, "my_ab": 761, "my_arrai": 761, "implicit_backend": [762, 784], "__dict__": [762, 776, 784], "ivy_original_dict": [762, 784], "get_backend": [762, 773], "fallback": 762, "challeng": [762, 809], "live": [762, 763, 766, 797, 798, 799, 801], "scope": [762, 804, 808], "intermediari": 762, "set_dynamic_backend": 762, "unset_dynamic_backend": 762, "dynamic_backend_a": 762, "set_": 762, "unset_": 762, "technic": [762, 772, 776, 792, 803, 805], "setter": 762, "backend_handl": 762, "requires_grad": 762, "memory_format": 762, "preserve_format": 762, "weren": 762, "vast": [762, 766, 803], "minor": [762, 782, 792], "fn_name_v_1p12_and_abov": 762, "fn_name_v_1p01_to_1p1": 762, "heavili": [763, 774, 792], "characterist": 763, "conf": 763, "cleanup": 763, "readm": [763, 792], "maxdepth": 763, "caption": 763, "related_work": 763, "deep_div": 763, "faq": 763, "glossari": 763, "autosummari": 763, "top_functional_toc": 763, "restructuredtext": 763, "inlin": 763, "discov": [763, 766], "ivy_toctree_caption_map": 763, "stub": 763, "unfortun": [763, 771], "linker": 763, "foo": 763, "discussion_channel_map": 763, "1000043690254946374": 763, "1000043749088436315": 763, "seri": [763, 777, 779, 803, 805], "discussion_paragraph": 763, "discord_link": 763, "channel_link": 763, "gg": 763, "zvqdvbznqj": 763, "799879767196958751": 763, "channel_id": 763, "autoskippablemethod": 763, "skippable_method_attribut": 763, "__qualname__": 763, "autodoc": 763, "atribut": 763, "__doc__": 763, "autoivydata": 763, "containerwithelementwis": 764, "__repr__": 764, "__contains__": 764, "__getstate__": 764, "__setstate__": 764, "unpickl": 764, "num_dim": [764, 789], "enforc": [764, 786], "extern": [764, 772, 777, 779, 780], "lefthand": 764, "righthand": 764, "handle_nest": [764, 772, 773, 774, 784], "presenc": [764, 776], "absenc": [764, 772, 803], "implicitli": [764, 775, 779, 784], "log_pr": [764, 773, 776], "intuit": [764, 779, 787, 788, 799], "chronolog": 764, "concurr": [764, 765, 773, 803], "despit": [764, 766, 767, 778, 784, 797, 800, 803], "__list__": 764, "whatsoev": [764, 773, 794, 809], "children": 764, "shallowest": 764, "deepest": 764, "regularli": 765, "rollback": 765, "incorpor": [765, 778, 787, 803], "techniqu": 765, "triplet": 765, "test_torch": [765, 778], "test_tensor": [765, 778], "test_torch_instance_arctan_": 765, "12500": 765, "daili": 765, "huge": [765, 787, 795, 797, 803, 809], "shoot": 765, "impact": [765, 779, 788, 805], "_reduce_loss": [765, 773, 776], "test_nn": 765, "test_loss": 765, "test_binary_cross_entropy_with_logit": 765, "test_cross_entropi": 765, "test_binary_cross_entropi": 765, "test_sparse_cross_entropi": 765, "test_loss_funct": 765, "test_torch_binary_cross_entropi": 765, "test_torch_cross_entropi": 765, "binary_cross_entropy_with_logit": 765, "torch_binary_cross_entropi": 765, "torch_cross_entropi": 765, "magic": 765, "readthedoc": 765, "pedagog": 765, "f_1": 765, "t_1": 765, "t_3": 765, "t_7": 765, "t_": 765, "f_m": 765, "cyclic": 765, "intellig": [765, 779, 805], "tests_fil": 765, "file_nam": [765, 779, 780], "intersect": [765, 779, 791], "tests_lin": 765, "correspondingli": 765, "tests_to_run": 765, "determine_tests_lin": 765, "mongodb": 765, "databas": [765, 779], "secret": 765, "db": 765, "ssh_deploy_kei": 765, "suffic": [765, 774, 779], "massiv": 765, "constraint": [765, 766, 775], "yml": 765, "felicit": 765, "clone_map": 765, "home": 765, "deploy_kei": 765, "user_email": 765, "rashul": 765, "chutani": 765, "gmail": [765, 797], "user_nam": 765, "target_branch": 765, "github_serv": 765, "deploy_key_fil": 765, "ssh_known_hosts_fil": 765, "known_host": 765, "keyscan": 765, "git_ssh_command": 765, "userknownhostsfil": 765, "email": [765, 797], "methodologi": 765, "master1": 765, "restructur": 765, "_map": 765, "t_2": 765, "t_n": 765, "index_map": 765, "test_map": 765, "snowbal": 765, "recalibr": 765, "workflow_dispatch": 765, "schedul": [765, 792, 803, 810], "cron": 765, "saturdai": 765, "night": 765, "pm": 765, "gut": 765, "lesser": [765, 770], "lol": 765, "hour": [765, 798], "cater": 765, "master2": 765, "master32": 765, "synchron": 765, "runner2": 765, "corrupt": 765, "discard": 765, "decoupl": [765, 788], "150": 765, "cycl": [765, 779], "rashulchutani": 765, "yellow": 765, "queu": 765, "redirect": 765, "book": 765, "onrend": 765, "jo": 765, "ran": 765, "badg": 765, "clickabl": 765, "all_dtyp": 766, "all_numeric_dtyp": 766, "all_int_dtyp": 766, "all_float_dtyp": 766, "replic": [766, 775, 776, 777], "thirdli": 766, "native_float32": 766, "importantli": [766, 786, 789, 791], "arguabl": [766, 767, 777], "jaxarrai": [766, 767, 770, 772, 776, 780, 784], "_handle_0_dim_output": 766, "subtli": [766, 776], "promote_types_frontend_nam": 766, "promote_types_of_frontend_name_input": 766, "frontend_nam": 766, "upcast": 766, "nearli": [766, 772, 774, 803], "downcast": 766, "footprint": 766, "concret": 766, "compound": 766, "infer_dtyp": [766, 767, 772, 774], "settabl": [766, 767], "handle_out_argu": [766, 767, 772, 773, 774, 776, 784], "infer_devic": [766, 767, 772, 774], "deleg": [766, 810], "shape_to_tupl": 766, "with_supported_dtyp": 766, "with_unsupported_dtyp": [766, 777], "unment": 766, "backend_vers": 766, "_cast_for_unary_op": [766, 773, 776], "target_typ": 766, "syntax": [766, 796, 797, 803], "unsupported_dtyp": 766, "supported_dtypes_and_devic": 766, "with_unsupported_device_and_dtyp": 766, "globals_getter_func": 766, "f1": 766, "f2": 766, "lack": [766, 776, 803, 810], "mandat": [766, 776, 779, 780, 797], "confus": [766, 770, 776, 782, 794, 798], "aris": [766, 771, 792, 797], "inconsist": [766, 770, 775], "84530": 766, "unwarr": 766, "risk": [766, 809], "needlessli": 766, "bloat": 766, "undergo": [766, 792], "supported_dtyp": 766, "unsupported_devic": 766, "supported_devic": 766, "downsid": 766, "undesir": 766, "accomplish": 766, "upcast_data_typ": 766, "downcast_data_typ": 766, "crosscast_data_typ": 766, "cast_data_typ": 766, "downcast_data_dtyp": 766, "tri": 766, "vice": 766, "versa": 766, "till": 766, "crosscast": 766, "exmp1": 766, "watch": [766, 777], "handle_numpy_arrays_in_specific_backend": [766, 772], "cate": 766, "understood": 766, "consumpt": [766, 807], "dual": 767, "categor": [767, 773, 777], "210": 767, "_handle_except": [767, 770], "1013": 767, "_handle_nest": [767, 770], "905": 767, "_handle_out_argu": [767, 770], "441": 767, "_inputs_to_native_arrai": [767, 770], "new_arg": [767, 770], "new_kwarg": [767, 770], "_outputs_to_ivy_arrai": [767, 770], "358": 767, "_handle_array_funct": [767, 770], "863": 767, "_handle_device_shift": 767, "handle_device_shift": [767, 774], "crucial": [767, 775], "device_shifting_dev": 767, "__enter__": 767, "__exit__": 767, "mostli": [767, 776, 779], "soft_devic": 767, "eight": [768, 783], "op_nam": 768, "__r": 768, "unsurprisingli": [768, 796], "recap": [768, 788], "combinatori": 768, "okai": [768, 782, 784], "meant": [768, 776], "spec": [768, 769], "my_func": [768, 780], "some_flag": 768, "another_flag": 768, "jointli": 768, "5574077": 768, "1850398": 768, "5463025": 768, "8422884": 768, "91601413": 768, "9647598": 768, "3738229": 768, "1597457": 768, "0963247": 768, "9955841": 768, "3278579": 768, "asid": [768, 791], "14254655": 768, "1578213": 768, "380515": 768, "trivial": [768, 776], "exlud": 768, "failing_fn_nam": 768, "onlin": [768, 769], "minutest": 768, "suffici": [768, 777, 779], "fault": [768, 803], "contrast": [769, 772, 777, 809], "preview": 769, "needless": [769, 778], "renam": [769, 777], "judgment": 769, "operator_nam": 769, "succinct": 769, "docst": 769, "native_error": 770, "_combine_messag": 770, "truli": [770, 786], "wrong": [770, 771, 774, 777, 782], "198": 770, "392": 770, "_handle_array_like_without_promot": 770, "805": 770, "432": 770, "349": 770, "other_test": 770, "523": 770, "_handle_numpy_out": 770, "396": [770, 788], "_outputs_to_numpy_arrai": 770, "_inputs_to_ivy_arrays_np": 770, "ivy_arg": 770, "ivy_kwarg": 770, "453": 770, "_from_zero_dim_arrays_to_scalar": 770, "truth_value_test": 770, "visibl": 770, "unwieldi": 770, "awar": [770, 771], "squash": 770, "cleaner": [770, 787], "caught": [770, 771], "rethrow": 770, "_print_traceback_histori": 770, "error_stack": 770, "axiserror": 770, "polici": [770, 774, 779, 781, 791], "moreov": 770, "met": 770, "black": 771, "flake8": 771, "formatt": 771, "encourag": [771, 791, 792, 797], "linter": 771, "autoflak": 771, "docformatt": 771, "pydocstyl": 771, "yaml": 771, "patch1687898304": 771, "8072": 771, "3516aed563": 771, "akshai": 771, "jain": 771, "gui": 771, "cryptic": 771, "garden": 771, "utc": 771, "didn": 771, "human": 771, "intervent": 771, "typo": 771, "ui": 771, "handle_array_like_without_promot": [772, 774], "to_native_arrays_and_back": [772, 774, 784], "handle_array_funct": [772, 774], "inputs_to_native_shap": [772, 774], "rational": [772, 776, 782], "__div__": [772, 782], "484": 772, "annot": 772, "brittl": 772, "freeli": 772, "inde": [772, 782, 792, 801], "original_typ": 772, "cumbersom": 772, "hinder": [772, 796], "venn": 773, "diagram": [773, 809], "light": [773, 780, 792, 794, 804, 809], "maximis": 773, "array_arg": 773, "encompass": 773, "partial_mixed_handl": [773, 774, 782], "handle_partial_mixed_funct": [773, 774, 782], "fn_decor": 773, "mixed_backend_wrapp": [773, 776], "to_add": 773, "to_skip": 773, "inputs_to_ivy_arrai": [773, 774], "modif": [773, 803], "briefli": [773, 779, 787], "get_all_arrays_on_dev": 773, "outputs_to_ivy_shap": 774, "outputs_to_native_arrai": 774, "handle_view_index": [774, 776], "handle_view": [774, 776], "handle_rag": 774, "handle_backend_invalid": 774, "handle_nan": 774, "to_native_shapes_and_back": 774, "modern": [775, 796, 797, 808], "inter_func": 775, "custom_grad_fn": 775, "args1": 775, "eas": [775, 803], "captur": [775, 779, 789, 804], "program": [776, 800, 801, 803, 806, 807, 810], "speak": 776, "val_n": 776, "base_idx": 776, "_manipulation_stack": 776, "base_flat": 776, "_view_ref": 776, "_update_view": 776, "contigu": 776, "c_contigu": 776, "ascontiguousarrai": 776, "copyto": 776, "_is_vari": 776, "tensor_scatter_nd_upd": 776, "is_vari": 776, "_update_torch_view": 776, "predominantli": [776, 780, 791], "support_native_out": [776, 784], "_scalar_output_to_0d_arrai": 776, "_wrap_fn": 776, "dim0": 776, "dim1": 776, "res_floor": 776, "mul": [776, 786], "extent": [776, 777], "to_out_fn": 776, "add_wrapp": 776, "paradigm": [776, 792, 803], "expans": 776, "brief": [776, 779], "weak": 776, "_torch_bas": 776, "_torch_view_ref": 776, "_torch_manipul": 776, "weakli": 776, "adequ": 776, "exhaust": [776, 779, 800, 809], "tf_frontend": 777, "lax": [777, 778, 782, 789, 792], "fn_tree": [777, 778, 779], "torch_frontend": [777, 778], "numpy_frontend": 777, "jax_frontend": 777, "to_ivy_arrays_and_back": [777, 778], "fidel": 777, "algebra": [777, 801, 802, 803, 806, 810], "xla": [777, 792, 794, 803], "dynamic": 777, "mimic": 777, "arithmetic_oper": 777, "handle_numpy_out": 777, "handle_numpy_dtyp": 777, "handle_numpy_cast": 777, "from_zero_dim_arrays_to_scalar": 777, "_add": 777, "same_kind": 777, "subok": [777, 778, 782], "promote_types_of_numpy_input": 777, "univers": [777, 796], "underscor": 777, "front": [777, 783, 784, 787, 796, 801, 803], "unhandl": 777, "trigonometric_funct": 777, "_tan": 777, "check_tensorflow_cast": 777, "raw_op": [777, 778], "tackl": 777, "map_raw_ops_alia": 777, "output_typ": 777, "kwargs_to_upd": 777, "pointwise_op": 777, "sensibl": 777, "ahead": [777, 780, 803], "reduce_logsumexp": 777, "input_tensor": 777, "logsumexp": 777, "trick": 777, "max_input_tensor": 777, "meet": 777, "preferred_element_typ": 777, "languag": [777, 784, 794, 796, 798, 801, 804, 806, 807, 808, 809], "offer": [777, 788, 798, 803, 809, 810], "finer": 777, "logicaland": 777, "np_frontend": 777, "_ivy_arrai": 777, "radd": 777, "_init_data": 777, "_process_str_data": 777, "_dtype": [777, 778, 786], "_shape": [777, 786], "govern": 777, "promote_types_of_": 777, "_input": 777, "promote_types_of_torch_input": [777, 778], "handle_numpy_casting_speci": 777, "new_fn": 777, "equiv": 777, "unsaf": 777, "array_type_test": 777, "_isfinit": 777, "organis": 777, "youtub": 777, "knowledg": 778, "handle_frontend_test": [778, 779], "handle_frontend_method": [778, 779], "test_frontend_funct": 778, "get_dtyp": [778, 779], "dtype_and_valu": [778, 779], "get_shap": [778, 779], "np_frontend_help": 778, "test_jax": 778, "test_lax": 778, "test_oper": 778, "available_dtyp": [778, 779], "test_with_out": [778, 779], "test_jax_tan": 778, "input_dtyp": [778, 779], "backend_to_test": 778, "test_numpi": 778, "test_mathematical_funct": 778, "test_trigonometric_funct": 778, "dtypes_values_cast": 778, "dtypes_values_casting_dtyp": 778, "arr_func": 778, "number_positional_arg": 778, "get_num_positional_args_ufunc": 778, "test_numpy_tan": 778, "handle_where_and_array_bool": 778, "test_tensorflow": 778, "test_math": 778, "test_tensorflow_tan": 778, "test_pointwise_op": 778, "test_torch_tan": 778, "_fill_valu": 778, "update_backend": 778, "test_glob": 778, "min_valu": [778, 779], "max_valu": [778, 779], "allow_non": [778, 779], "min_num_dim": [778, 779], "max_num_dim": [778, 779], "min_dim_s": [778, 779], "max_dim_s": 778, "test_jax_ful": 778, "test_from_shape_or_valu": 778, "_input_fill_and_dtyp": 778, "dtype_and_input": 778, "large_abs_safety_factor": [778, 779], "small_abs_safety_factor": 778, "safety_factor_scal": [778, 779], "dtype_to_cast": 778, "input_fill_dtyp": 778, "test_numpy_ful": 778, "test_raw_op": 778, "test_tensorflow_fil": 778, "test_creation_op": 778, "with_arrai": 778, "sampled_from": [778, 779], "test_torch_ful": 778, "test_valu": [778, 779], "add_nois": 778, "all_clos": 778, "_get_dtype_and_matrix": 778, "test_torch_qr": 778, "frontend_ret": 778, "frontend_q": 778, "frontend_r": 778, "assert_all_clos": 778, "ret_np": 778, "ret_from_gt_np": 778, "walkthrough": 778, "comparison_op": 778, "test_comparison_op": 778, "num_arrai": [778, 779], "allow_inf": [778, 779], "shared_dtyp": 778, "test_torch_great": 778, "all_alias": 778, "class_tre": 778, "init_tre": 778, "method_nam": 778, "test_frontend_method": 778, "init_input_dtyp": 778, "init_all_as_kwargs_np": 778, "intial": 778, "method_input_dtyp": 778, "method_all_as_kwargs_np": 778, "test_ndarrai": 778, "test_numpy_instance_add__": 778, "frontend_method_data": 778, "init_flag": [778, 779], "method_flag": [778, 779], "test_tensorflow_instance_add": 778, "method_tre": [778, 779], "1e04": 778, "allow_infin": 778, "test_torch_instance_add": 778, "atol_": 778, "_arrays_idx_n_dtyp": 778, "test_manipul": [778, 779], "surprisingli": 778, "closest_relevant_group": 778, "strive": [778, 779, 782, 792, 805], "fixtur": 779, "eleg": [779, 803], "unexplor": 779, "artifact": 779, "bespok": 779, "_array_or_typ": 779, "rigor": [779, 796], "test_default_int_dtyp": 779, "clariti": [779, 782, 803], "print_hypothesis_exampl": 779, "searchstrategi": 779, "custom_strategi": 779, "randomis": 779, "simplist": 779, "intricaci": 779, "glanc": 779, "one_of": 779, "datum": 779, "pipe": 779, "array_or_scal": 779, "len_of_arrai": 779, "test_add": 779, "gradient_test": 779, "test_gpu_is_avail": 779, "handle_test": 779, "pretest": 779, "handle_method": 779, "as_variable_flag": 779, "min_siz": 779, "max_siz": 779, "native_array_flag": 779, "container_flag": 779, "test_instance_method": 779, "test_inplac": 779, "criterion": 779, "array_valu": 779, "valid_ax": 779, "craft": 779, "hoc": 779, "44758124e": 779, "11228": 779, "268": 779, "wherev": 779, "dtype_values_axi": 779, "9622": 779, "28136": 779, "6375": 779, "12720": 779, "21354": 779, "900e": 779, "955e": 779, "exclude_min": 779, "57384": 779, "25687": 779, "248": 779, "array_dtyp": 779, "array_bool": 779, "test_devic": 779, "array_shap": 779, "common_shap": 779, "test_lay": 779, "size_bound": 779, "reshape_shap": 779, "stand": 779, "some_sequ": 779, "allow_nan": 779, "allow_subnorm": 779, "get_bound": 779, "arrays_valu": 779, "36418": 779, "213": 779, "21716926": 779, "none_or_list_of_float": 779, "get_prob": 779, "103515625e": 779, "099609375": 779, "probabilist": 779, "get_axi": 779, "number_positional_argu": 779, "unreproduc": 779, "x_and_linear": 779, "mixed_fn_compo": 779, "is_torch_backend": 779, "x_shape": [779, 784], "weight_shap": 779, "bias_shap": 779, "ivy_np": 779, "valid_float_dtyp": 779, "test_demo": 779, "failing_test": 779, "traceback": 779, "shrink": 779, "prescrib": 779, "scratch": 779, "therebi": 779, "test_gelu": 779, "test_fil": 779, "phase": [779, 792, 803], "notabl": [779, 803], "newer": 779, "max_exampl": 779, "deadlin": 779, "weird": 779, "systemat": 779, "safeguard": 779, "inabl": 779, "test_result_typ": 779, "9090909090909091": 779, "judgement": 780, "some_namespac": 780, "some_backend": 780, "another_backend": 780, "refactor": 780, "ongo": 780, "_assert_fill_value_and_dtype_are_compat": 780, "_to_devic": 780, "pin": 780, "unpinn": 780, "culmin": 780, "unsett": 781, "array_significant_figur": 781, "signific": [781, 792, 796, 797, 803], "array_decimal_valu": 781, "warning_level": 781, "nan_polici": 781, "stablest": 781, "constantli": [782, 796], "answer": [782, 786, 792], "contradict": 782, "entail": 782, "sacrif": 782, "jacfwd": 782, "jacrev": 782, "banner": 782, "expens": 782, "incredibli": [782, 787, 792, 806], "price": 782, "pai": 782, "intrus": 782, "x_beta": 782, "equip": 782, "priorit": 782, "simplif": 782, "allevi": 782, "ineffici": [782, 792, 803], "fuse": 782, "hybrid": 782, "workaround": 782, "slip": 782, "radar": 782, "stumbl": 782, "gone": [783, 797], "fulfil": 783, "syntact": [784, 789], "power_seq": 784, "backend_stack": 784, "_determine_backend_from_arg": 784, "importlib": 784, "_backend_dict": 784, "x_flat": 784, "wi": 784, "wi_x": 784, "wii_x": 784, "wif_x": 784, "wig_x": 784, "wio_x": 784, "wh": 784, "ht": 784, "ct": 784, "hts_list": 784, "wii_xt": 784, "wif_xt": 784, "wig_xt": 784, "wio_xt": 784, "htm1": 784, "ctm1": 784, "wh_htm1": 784, "whi_htm1": 784, "whf_htm1": 784, "whg_htm1": 784, "who_htm1": 784, "ft": 784, "ot": 784, "reliabl": 784, "scalabl": [784, 796, 808, 809], "sacrific": 784, "hear": 784, "virtu": [784, 800], "pure_ivi": 784, "pure_torch": 784, "unclean": 784, "wx": 784, "temp": 784, "ivy_func": 784, "emphas": 784, "torchscript": [784, 794, 810], "example_input": 784, "primit": [785, 792, 801, 803], "upcom": 785, "hierarch": [785, 787, 788, 803], "arraywithactiv": 786, "arraywithcr": 786, "arraywithdatatyp": 786, "arraywithdevic": 786, "arraywithgener": 786, "arraywithgradi": 786, "arraywithimag": 786, "arraywithlay": 786, "arraywithlinearalgebra": 786, "arraywithloss": 786, "arraywithmanipul": 786, "arraywithnorm": 786, "arraywithrandom": 786, "arraywithsearch": 786, "arraywithset": 786, "arraywithsort": 786, "arraywithstatist": 786, "arraywithutil": 786, "_init": 786, "_size": 786, "_devic": 786, "_dev_str": 786, "_pre_repr": 786, "_post_repr": 786, "framework_str": 786, "pypep8nam": 786, "motiv": [786, 797], "immut": 786, "claim": 786, "_native_wrapp": 786, "genuin": 786, "some_method": 786, "rewritten": 786, "littl": [786, 796, 805], "wonder": [786, 796, 798], "compartment": 786, "newshap": 786, "new_shap": 786, "tidi": 786, "crystal": 786, "ton": 787, "ado": [787, 788], "arbitrarili": 787, "soup": 787, "walk": [787, 788], "cnt": 787, "3333335": 787, "delimit": 787, "autocomplet": 787, "midwai": 787, "agent": 787, "total_spe": 787, "total_height": 787, "total_width": 787, "ag": 787, "tot": 787, "total_": 787, "total_h": 787, "cnt0": 787, "cnt1": 787, "diff_0": 787, "diff_1": 787, "config0": 787, "config1": 787, "l0": 787, "decoder__l0": 787, "decoder__l1": 787, "encoder__l0": 787, "encoder__l1": 787, "l0__b": 787, "l0__w": 787, "l1__b": 787, "l1__w": 787, "printabl": 787, "obviou": [787, 803], "foresight": 787, "untidili": 787, "update_ag": 787, "normalize_img": 787, "img_max": 787, "reduce_max": 787, "img_min": 787, "reduce_min": 787, "img_rang": 787, "agent_posit": 787, "agent_veloc": 787, "agent_cam_front_rgb": 787, "agent_cam_front_depth": 787, "agent_cam_rear_rgb": 787, "agent_cam_rear_depth": 787, "agent_cam_lidar": 787, "camera": 787, "front_rgb": 787, "front_depth": 787, "rear_rgb": 787, "rear_depth": 787, "lidar": 787, "rgb": 787, "rear": 787, "veloc": 787, "cam": 787, "cam_max": 787, "cam_min": 787, "cam_rang": 787, "five": 787, "allud": [787, 797], "perman": 787, "thread": [787, 803], "straightforward": 787, "dataload": [787, 790], "_cnt": 787, "img_": 787, "_dataset_s": 787, "_batch_siz": 787, "_count": [787, 788], "__next__": 787, "img_fnam": 787, "loaded_img": 787, "batch_slic": 787, "0145": 787, "addbackward0": 787, "_create_vari": 788, "_input_channel": 788, "_output_channel": 788, "_w_shape": 788, "_b_shape": 788, "_with_bia": 788, "764": 788, "872": 788, "211": 788, "439": 788, "nightmar": 788, "overcom": 788, "v1": 788, "key0": 788, "linear3": 788, "v2": 788, "counter": 788, "preced": [788, 797], "_w_init": 788, "_b_init": 788, "misnom": 788, "saw": 788, "_beta1": 788, "_beta2": 788, "_epsilon": 788, "_mw": 788, "_vw": 788, "_first_pass": 788, "_should_compil": 788, "new_v": 788, "_lr": 788, "_inplac": 788, "_stop_gradi": 788, "sparse_funct": 789, "vital": [789, 796], "_linear": 789, "jax_graph": 789, "to_backend": 789, "thinli": 789, "to_haiku_modul": 789, "loss_fn_t": 789, "without_apply_rng": 789, "update_rul": 789, "tree_multimap": 789, "trax": [789, 798], "objax": [789, 798], "pose": 791, "quaternion": 791, "ivy_mech": 791, "target_facing_rotation_matrix": 791, "polar_to_cartesian_coord": 791, "warp": 791, "optic": 791, "voxel": 791, "ivy_vis": 791, "coords_to_voxel_grid": 791, "render_pixel_coord": 791, "radianc": 791, "nerf": 791, "trajectori": 791, "motion": 791, "mobil": [791, 803], "sample_spline_path": 791, "rigidmobil": 791, "sample_bodi": 791, "drone": 791, "sample_link": 791, "openai": 791, "swimmer": 791, "reward": 791, "supervis": 791, "door": [791, 792], "cartpol": 791, "mountain_car": 791, "pendulum": 791, "reacher": 791, "ture": 791, "ntm": 791, "egospher": 791, "esm": 791, "ivy_memori": 791, "egocentr": 791, "room": 791, "matur": [792, 797, 803], "doubt": 792, "grate": 792, "probe": 792, "remark": 792, "strong": [792, 797, 803], "lock": 792, "gold": 792, "dex": 792, "tricki": [792, 794], "predictor": 792, "tight": 792, "driver": 792, "dispatch": [792, 803, 806], "ast": 792, "autodiff": 792, "shine": 792, "merci": 792, "compet": [792, 803], "parallelis": 792, "spmd": 792, "mixtur": 792, "expert": 792, "sophist": 792, "depart": 792, "hundr": 792, "thousand": 792, "broadli": [792, 809], "supplementari": 792, "reusabl": [792, 801, 803], "fanci": [792, 803], "fusion": [792, 807], "lose": 792, "pmap": 792, "eventu": 792, "supplement": 792, "backdoor": 792, "callback": 792, "record": [792, 804], "somewhat": [792, 803], "outsourc": 792, "nail": 794, "scientist": 794, "correl": 794, "collabor": [795, 796, 797], "consortium": [795, 797], "grown": 796, "rapidli": 796, "evolv": [796, 803], "shareabl": 796, "outdat": 796, "newest": 796, "prototyp": [796, 803], "bottleneck": 796, "obsolet": [796, 798], "invent": 796, "simultan": [796, 798], "runner": 796, "principl": [796, 801, 803, 806], "2006": 796, "cloth": 796, "forgiven": 797, "eyebrow": 797, "somehow": 797, "industri": [797, 803, 805], "funni": 797, "comic": 797, "charger": 797, "instant": 797, "contrari": 797, "bumpi": 797, "road": 797, "technologi": [797, 801, 805], "pcie": 797, "motherboard": 797, "raid": 797, "bluetooth": 797, "wireless": 797, "btx": 797, "sata": 797, "tcp": 797, "ip": 797, "smtp": 797, "send": [797, 808], "outlook": 797, "innov": 797, "growth": [797, 806], "necess": 797, "2015": [797, 803], "aros": 797, "mission": [797, 805], "ourselv": [797, 809], "quansight": [797, 809], "compani": [797, 799], "apach": [797, 805, 809], "onnx": [797, 801, 809], "cupi": [797, 803, 810], "sympi": 797, "modin": 797, "spyder": 797, "octoml": [797, 809], "sponsor": 797, "lg": 797, "electron": 797, "shaw": 797, "pursuit": 797, "complianc": 797, "convinc": 797, "celebr": 797, "perfectli": 798, "abund": 798, "streamlin": [798, 806], "awesom": 798, "love": 798, "slew": 798, "inevit": [798, 804], "erron": 798, "poor": 798, "spin": 798, "sake": 798, "wouldn": 798, "frantic": 798, "port": 798, "lucid": 798, "honk": 798, "hasn": 798, "spend": [798, 803], "sonnet": 798, "quo": 798, "dopamin": 798, "ignit": 798, "catalyst": 798, "lightn": 798, "fastai": 798, "conceptu": [799, 804], "broken": [799, 803], "tracer": 799, "vendor": [799, 805], "complimentari": [799, 809], "acycl": [799, 804], "insert_numb": 800, "insert_t": 800, "scaffold": [801, 809], "heart": 801, "toolchain": [801, 806], "ir": [801, 804, 809], "assembli": [801, 808, 809], "idl": 801, "middl": 801, "emit": 801, "gnu": [801, 806], "broader": 801, "heterogen": 801, "aid": 801, "coprocessor": 801, "programm": [801, 808], "gate": 801, "onednn": 801, "sit": [801, 804, 809], "tandem": 801, "possess": 801, "khrono": [802, 808], "appl": 802, "coremltool": 802, "albeit": 802, "promin": 803, "abbrevi": 803, "laboratori": 803, "proprietari": [803, 807, 808], "mathwork": 803, "commerci": 803, "1984": 803, "toolbox": 803, "mupad": 803, "simulink": 803, "graphic": [803, 807, 808], "simul": 803, "million": [803, 806], "worldwid": 803, "scienc": [803, 805], "econom": 803, "2001": 803, "scientif": 803, "od": 803, "solver": 803, "cython": 803, "friendli": 803, "2002": 803, "lua": 803, "luajit": 803, "idiap": 803, "epfl": 803, "2005": 803, "numarrai": 803, "cpython": 803, "partli": 803, "2007": 803, "forest": 803, "boost": 803, "dbscan": 803, "inbuilt": 803, "esqu": 803, "aesara": 803, "datafram": 803, "2012": 803, "Its": 803, "polymorph": 803, "mpi": 803, "openmp": 803, "glue": 803, "jaot": 803, "nasa": 803, "cern": 803, "climat": 803, "allianc": 803, "influenti": 803, "2014": 803, "scala": 803, "ship": 803, "forgiv": 803, "decemb": 803, "announc": 803, "mainten": 803, "v7": 803, "meaning": 803, "2016": 803, "imper": 803, "amazon": 803, "traction": 803, "cognit": [803, 810], "toolkit": [803, 804, 810], "grade": 803, "realiz": 803, "dnn": 803, "rnn": 803, "backpropag": 803, "succumb": 803, "came": 803, "monitor": 803, "practition": [803, 807, 808, 809], "hobbyist": 803, "tremend": 803, "ecosystem": 803, "gear": 803, "batteri": 803, "zygot": 803, "jl": 803, "workload": 803, "daggerflux": 803, "frontier": 803, "hessian": 803, "2018": 803, "lightweight": [803, 810], "shortcom": 803, "barrier": 803, "inexperienc": 803, "underdevelop": 803, "fanat": 803, "ounc": 803, "infanc": 803, "emerg": 803, "nich": 803, "lite": 803, "enterpris": 803, "reinvent": [803, 805], "inertia": 803, "creator": [803, 805], "paszk": 803, "hi": 803, "safeti": 803, "bulk": 803, "haskel": 803, "dataflow": 804, "enclos": 804, "trace_modul": 804, "scriptfunct": 804, "scriptmodul": 804, "fake": 804, "proxi": 804, "site": 804, "graphmodul": 804, "travi": 805, "oliph": 805, "leader": 805, "cornerston": 805, "numba": 805, "numfocu": 805, "pydata": 805, "confer": 805, "consult": 805, "servic": 805, "expertis": 805, "devop": 805, "mlop": 805, "dashboard": 805, "startup": 805, "mlir": [805, 806, 809], "Their": 805, "held": 805, "privileg": 805, "presum": 805, "llvm": [805, 808], "founder": 805, "tvm": [805, 809], "sustain": 805, "empow": 805, "har": 805, "burden": 805, "benchmark": 805, "convention": 806, "precompil": 806, "executor": 806, "julia": [806, 809], "fsf": 806, "gpl": 806, "biggest": [806, 809], "conduct": 807, "throughput": 807, "autotun": 807, "gpgpu": 807, "classic": 808, "sycl": 808, "dpc": 808, "processor": 808, "maco": 808, "x86": 808, "oneapi": 808, "ia": 808, "aka": 808, "xeon": 808, "gen9": 808, "xe": 808, "arria": 808, "gx": 808, "fpga": 808, "lofti": 809, "ambit": 809, "realm": 809, "bedrock": 809, "flux": 809, "bite": 809, "chew": 809, "eagerpi": 809, "tensorli": 809, "thinc": 809, "neuropod": 809, "emploi": 809, "fx": 809, "retrain": 809, "closer": 809, "greatli": 809, "modular": 809, "anywher": 809, "theano": 810, "plaidml": 810, "partial_svd": 810, "excel": 810, "subsystem": 810}, "objects": {"ivy.Array": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [572, 0, 1, "", "adam_step"], [573, 0, 1, "", "adam_update"], [369, 0, 1, "", "adaptive_avg_pool1d"], [370, 0, 1, "", "adaptive_avg_pool2d"], [371, 0, 1, "", "adaptive_max_pool2d"], [222, 0, 1, "", "add"], [399, 0, 1, "", "adjoint"], [722, 0, 1, "", "all"], [492, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [223, 0, 1, "", "angle"], [723, 0, 1, "", "any"], [699, 0, 1, "", "argmax"], [700, 0, 1, "", "argmin"], [708, 0, 1, "", "argsort"], [701, 0, 1, "", "argwhere"], [495, 0, 1, "", "array_equal"], [425, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [496, 0, 1, "", "assert_supports_inplace"], [426, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [427, 0, 1, "", "atleast_1d"], [428, 0, 1, "", "atleast_2d"], [429, 0, 1, "", "atleast_3d"], [373, 0, 1, "", "avg_pool1d"], [374, 0, 1, "", "avg_pool2d"], [375, 0, 1, "", "avg_pool3d"], [461, 0, 1, "", "batch_norm"], [467, 0, 1, "", "bernoulli"], [468, 0, 1, "", "beta"], [321, 0, 1, "", "binarizer"], [651, 0, 1, "", "binary_cross_entropy"], [479, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [303, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [621, 0, 1, "", "cholesky"], [654, 0, 1, "", "clip"], [498, 0, 1, "", "clip_matrix_norm"], [499, 0, 1, "", "clip_vector_norm"], [655, 0, 1, "", "concat"], [432, 0, 1, "", "concat_from_sequence"], [400, 0, 1, "", "cond"], [322, 0, 1, "", "conj"], [656, 0, 1, "", "constant_pad"], [607, 0, 1, "", "conv1d"], [608, 0, 1, "", "conv1d_transpose"], [609, 0, 1, "", "conv2d"], [610, 0, 1, "", "conv2d_transpose"], [611, 0, 1, "", "conv3d"], [612, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [323, 0, 1, "", "copysign"], [480, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [324, 0, 1, "", "count_nonzero"], [481, 0, 1, "", "cov"], [622, 0, 1, "", "cross"], [652, 0, 1, "", "cross_entropy"], [482, 0, 1, "", "cummax"], [483, 0, 1, "", "cummin"], [712, 0, 1, "", "cumprod"], [713, 0, 1, "", "cumsum"], [376, 0, 1, "", "dct"], [502, 0, 1, "", "default"], [238, 0, 1, "", "deg2rad"], [615, 0, 1, "", "depthwise_conv2d"], [623, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [377, 0, 1, "", "dft"], [624, 0, 1, "", "diag"], [401, 0, 1, "", "diagflat"], [625, 0, 1, "", "diagonal"], [325, 0, 1, "", "diff"], [326, 0, 1, "", "digamma"], [469, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [402, 0, 1, "", "dot"], [616, 0, 1, "", "dropout"], [378, 0, 1, "", "dropout1d"], [379, 0, 1, "", "dropout2d"], [380, 0, 1, "", "dropout3d"], [433, 0, 1, "", "dsplit"], [434, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [626, 0, 1, "", "eig"], [627, 0, 1, "", "eigh"], [404, 0, 1, "", "eigh_tridiagonal"], [405, 0, 1, "", "eigvals"], [628, 0, 1, "", "eigvalsh"], [503, 0, 1, "", "einops_rearrange"], [504, 0, 1, "", "einops_reduce"], [505, 0, 1, "", "einops_repeat"], [714, 0, 1, "", "einsum"], [294, 0, 1, "", "elu"], [381, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [506, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [435, 0, 1, "", "expand"], [657, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [304, 0, 1, "", "eye_like"], [382, 0, 1, "", "fft"], [383, 0, 1, "", "fft2"], [436, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [327, 0, 1, "", "fix"], [437, 0, 1, "", "flatten"], [658, 0, 1, "", "flip"], [438, 0, 1, "", "fliplr"], [439, 0, 1, "", "flipud"], [328, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [329, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [440, 0, 1, "", "fold"], [507, 0, 1, "", "fourier_encode"], [330, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [136, 0, 1, "", "full_like"], [470, 0, 1, "", "gamma"], [510, 0, 1, "", "gather"], [511, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [406, 0, 1, "", "general_inner_product"], [514, 0, 1, "", "get_num_dims"], [331, 0, 1, "", "gradient"], [576, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [462, 0, 1, "", "group_norm"], [105, 0, 1, "", "hardswish"], [516, 0, 1, "", "has_nans"], [441, 0, 1, "", "heaviside"], [484, 0, 1, "", "histogram"], [442, 0, 1, "", "hsplit"], [443, 0, 1, "", "hstack"], [420, 0, 1, "", "huber_loss"], [332, 0, 1, "", "hypot"], [444, 0, 1, "", "i0"], [386, 0, 1, "", "idct"], [387, 0, 1, "", "ifft"], [388, 0, 1, "", "ifftn"], [485, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [407, 0, 1, "", "initialize_tucker"], [629, 0, 1, "", "inner"], [518, 0, 1, "", "inplace_decrement"], [519, 0, 1, "", "inplace_increment"], [520, 0, 1, "", "inplace_update"], [463, 0, 1, "", "instance_norm"], [390, 0, 1, "", "interpolate"], [630, 0, 1, "", "inv"], [522, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [523, 0, 1, "", "is_ivy_array"], [524, 0, 1, "", "is_ivy_container"], [526, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [333, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [527, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [529, 0, 1, "", "itemsize"], [409, 0, 1, "", "kron"], [421, 0, 1, "", "l1_loss"], [464, 0, 1, "", "l1_normalize"], [465, 0, 1, "", "l2_normalize"], [578, 0, 1, "", "lamb_update"], [579, 0, 1, "", "lars_update"], [692, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [334, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [335, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [474, 0, 1, "", "lexsort"], [336, 0, 1, "", "lgamma"], [617, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [107, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [466, 0, 1, "", "lp_normalize"], [618, 0, 1, "", "lstm_update"], [411, 0, 1, "", "make_svd_non_negative"], [632, 0, 1, "", "matmul"], [445, 0, 1, "", "matricize"], [412, 0, 1, "", "matrix_exp"], [633, 0, 1, "", "matrix_norm"], [634, 0, 1, "", "matrix_power"], [635, 0, 1, "", "matrix_rank"], [636, 0, 1, "", "matrix_transpose"], [715, 0, 1, "", "max"], [391, 0, 1, "", "max_pool1d"], [392, 0, 1, "", "max_pool2d"], [393, 0, 1, "", "max_pool3d"], [270, 0, 1, "", "maximum"], [716, 0, 1, "", "mean"], [486, 0, 1, "", "median"], [310, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [717, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [413, 0, 1, "", "mode_dot"], [337, 0, 1, "", "modf"], [446, 0, 1, "", "moveaxis"], [709, 0, 1, "", "msort"], [414, 0, 1, "", "multi_dot"], [619, 0, 1, "", "multi_head_attention"], [415, 0, 1, "", "multi_mode_dot"], [693, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [487, 0, 1, "", "nanmean"], [488, 0, 1, "", "nanmedian"], [489, 0, 1, "", "nanprod"], [338, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [339, 0, 1, "", "nextafter"], [702, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [580, 0, 1, "", "optimizer_update"], [491, 0, 1, "", "optional_get_element"], [637, 0, 1, "", "outer"], [447, 0, 1, "", "pad"], [448, 0, 1, "", "partial_fold"], [449, 0, 1, "", "partial_tensor_to_vec"], [416, 0, 1, "", "partial_tucker"], [450, 0, 1, "", "partial_unfold"], [451, 0, 1, "", "partial_vec_to_tensor"], [659, 0, 1, "", "permute_dims"], [638, 0, 1, "", "pinv"], [471, 0, 1, "", "poisson"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [718, 0, 1, "", "prod"], [639, 0, 1, "", "qr"], [490, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [694, 0, 1, "", "randint"], [695, 0, 1, "", "random_normal"], [696, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [345, 0, 1, "", "reduce"], [397, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [660, 0, 1, "", "repeat"], [661, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [398, 0, 1, "", "rfftn"], [662, 0, 1, "", "roll"], [453, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [620, 0, 1, "", "scaled_dot_product_attention"], [534, 0, 1, "", "scatter_flat"], [535, 0, 1, "", "scatter_nd"], [710, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [548, 0, 1, "", "shape"], [698, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [340, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [341, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [640, 0, 1, "", "slogdet"], [423, 0, 1, "", "smooth_l1_loss"], [424, 0, 1, "", "soft_margin_loss"], [454, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [641, 0, 1, "", "solve"], [711, 0, 1, "", "sort"], [653, 0, 1, "", "sparse_cross_entropy"], [342, 0, 1, "", "sparsify_tensor"], [663, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [664, 0, 1, "", "squeeze"], [549, 0, 1, "", "stable_divide"], [550, 0, 1, "", "stable_pow"], [665, 0, 1, "", "stack"], [719, 0, 1, "", "std"], [581, 0, 1, "", "stop_gradient"], [551, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [720, 0, 1, "", "sum"], [552, 0, 1, "", "supports_inplace_updates"], [642, 0, 1, "", "svd"], [417, 0, 1, "", "svd_flip"], [643, 0, 1, "", "svdvals"], [666, 0, 1, "", "swapaxes"], [455, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [644, 0, 1, "", "tensordot"], [645, 0, 1, "", "tensorsolve"], [302, 0, 1, "", "thresholded_relu"], [667, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [554, 0, 1, "", "to_list"], [556, 0, 1, "", "to_numpy"], [557, 0, 1, "", "to_scalar"], [456, 0, 1, "", "top_k"], [646, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [316, 0, 1, "", "trilu"], [145, 0, 1, "", "triu"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [418, 0, 1, "", "truncated_svd"], [419, 0, 1, "", "tucker"], [457, 0, 1, "", "unfold"], [704, 0, 1, "", "unique_all"], [458, 0, 1, "", "unique_consecutive"], [705, 0, 1, "", "unique_counts"], [706, 0, 1, "", "unique_inverse"], [707, 0, 1, "", "unique_values"], [472, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [668, 0, 1, "", "unstack"], [570, 0, 1, "", "value_is_nan"], [647, 0, 1, "", "vander"], [721, 0, 1, "", "var"], [648, 0, 1, "", "vecdot"], [649, 0, 1, "", "vector_norm"], [650, 0, 1, "", "vector_to_skew_symmetric_matrix"], [459, 0, 1, "", "vsplit"], [460, 0, 1, "", "vstack"], [703, 0, 1, "", "where"], [343, 0, 1, "", "xlogy"], [669, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [344, 0, 1, "", "zeta"]], "ivy": [[591, 1, 1, "", "ArrayMode"], [587, 1, 1, "", "DefaultComplexDtype"], [588, 1, 1, "", "DefaultDevice"], [587, 1, 1, "", "DefaultDtype"], [587, 1, 1, "", "DefaultFloatDtype"], [587, 1, 1, "", "DefaultIntDtype"], [587, 1, 1, "", "DefaultUintDtype"], [366, 1, 1, "", "NativeSparseArray"], [586, 1, 1, "", "NestedSequence"], [591, 1, 1, "", "PreciseMode"], [588, 1, 1, "", "Profiler"], [366, 1, 1, "", "SparseArray"], [219, 2, 1, "", "abs"], [220, 2, 1, "", "acos"], [221, 2, 1, "", "acosh"], [592, 2, 1, "", "adam_step"], [592, 2, 1, "", "adam_update"], [369, 2, 1, "", "adaptive_avg_pool1d"], [370, 2, 1, "", "adaptive_avg_pool2d"], [371, 2, 1, "", "adaptive_max_pool2d"], [222, 2, 1, "", "add"], [356, 2, 1, "", "adjoint"], [605, 2, 1, "", "all"], [591, 2, 1, "", "all_equal"], [598, 2, 1, "", "all_nested_indices"], [352, 2, 1, "", "allclose"], [223, 2, 1, "", "angle"], [605, 2, 1, "", "any"], [586, 2, 1, "", "arange"], [372, 2, 1, "", "area_interpolate"], [591, 2, 1, "", "arg_info"], [591, 2, 1, "", "arg_names"], [601, 2, 1, "", "argmax"], [601, 2, 1, "", "argmin"], [603, 2, 1, "", "argsort"], [601, 2, 1, "", "argwhere"], [586, 2, 1, "", "array"], [591, 2, 1, "", "array_equal"], [192, 2, 1, "", "as_ivy_dev"], [149, 2, 1, "", "as_ivy_dtype"], [193, 2, 1, "", "as_native_dev"], [150, 2, 1, "", "as_native_dtype"], [358, 2, 1, "", "as_strided"], [586, 2, 1, "", "asarray"], [586, 2, 1, "", "asarray_handle_nestable"], [586, 2, 1, "", "asarray_infer_device"], [126, 2, 1, "", "asarray_infer_dtype"], [127, 2, 1, "", "asarray_inputs_to_native_shapes"], [128, 2, 1, "", "asarray_to_native_arrays_and_back"], [224, 2, 1, "", "asin"], [225, 2, 1, "", "asinh"], [591, 2, 1, "", "assert_supports_inplace"], [358, 2, 1, "", "associative_scan"], [151, 2, 1, "", "astype"], [226, 2, 1, "", "atan"], [227, 2, 1, "", "atan2"], [228, 2, 1, "", "atanh"], [358, 2, 1, "", "atleast_1d"], [358, 2, 1, "", "atleast_2d"], [358, 2, 1, "", "atleast_3d"], [373, 2, 1, "", "avg_pool1d"], [374, 2, 1, "", "avg_pool2d"], [375, 2, 1, "", "avg_pool3d"], [361, 2, 1, "", "batch_norm"], [362, 2, 1, "", "bernoulli"], [362, 2, 1, "", "beta"], [352, 2, 1, "", "binarizer"], [595, 2, 1, "", "binary_cross_entropy"], [367, 2, 1, "", "bincount"], [354, 2, 1, "", "bind_custom_gradient_function"], [229, 2, 1, "", "bitwise_and"], [230, 2, 1, "", "bitwise_invert"], [231, 2, 1, "", "bitwise_left_shift"], [232, 2, 1, "", "bitwise_or"], [233, 2, 1, "", "bitwise_right_shift"], [234, 2, 1, "", "bitwise_xor"], [349, 2, 1, "", "blackman_window"], [152, 2, 1, "", "broadcast_arrays"], [358, 2, 1, "", "broadcast_shapes"], [153, 2, 1, "", "broadcast_to"], [591, 2, 1, "", "cache_fn"], [154, 2, 1, "", "can_cast"], [585, 2, 1, "", "cast_bool"], [235, 2, 1, "", "ceil"], [155, 2, 1, "", "check_float"], [621, 2, 1, "", "cholesky"], [358, 2, 1, "", "choose"], [194, 2, 1, "", "clear_cached_mem_on_dev"], [596, 2, 1, "", "clip"], [591, 2, 1, "", "clip_matrix_norm"], [591, 2, 1, "", "clip_vector_norm"], [156, 2, 1, "", "closest_valid_dtype"], [585, 2, 1, "", "cmp_is"], [585, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [596, 2, 1, "", "concat"], [358, 2, 1, "", "concat_from_sequence"], [356, 2, 1, "", "cond"], [352, 2, 1, "", "conj"], [596, 2, 1, "", "constant_pad"], [591, 2, 1, "", "container_types"], [606, 2, 1, "", "conv"], [607, 2, 1, "", "conv1d"], [608, 2, 1, "", "conv1d_transpose"], [609, 2, 1, "", "conv2d"], [610, 2, 1, "", "conv2d_transpose"], [611, 2, 1, "", "conv3d"], [612, 2, 1, "", "conv3d_transpose"], [613, 2, 1, "", "conv_general_dilated"], [614, 2, 1, "", "conv_general_transpose"], [129, 2, 1, "", "copy_array"], [598, 2, 1, "", "copy_nest"], [352, 2, 1, "", "copysign"], [367, 2, 1, "", "corrcoef"], [236, 2, 1, "", "cos"], [237, 2, 1, "", "cosh"], [352, 2, 1, "", "count_nonzero"], [367, 2, 1, "", "cov"], [622, 2, 1, "", "cross"], [595, 2, 1, "", "cross_entropy"], [367, 2, 1, "", "cummax"], [367, 2, 1, "", "cummin"], [604, 2, 1, "", "cumprod"], [604, 2, 1, "", "cumsum"], [591, 2, 1, "", "current_backend_str"], [376, 2, 1, "", "dct"], [591, 2, 1, "", "default"], [157, 2, 1, "", "default_complex_dtype"], [195, 2, 1, "", "default_device"], [158, 2, 1, "", "default_dtype"], [159, 2, 1, "", "default_float_dtype"], [160, 2, 1, "", "default_int_dtype"], [161, 2, 1, "", "default_uint_dtype"], [238, 2, 1, "", "deg2rad"], [615, 2, 1, "", "depthwise_conv2d"], [623, 2, 1, "", "det"], [196, 2, 1, "", "dev"], [197, 2, 1, "", "dev_util"], [377, 2, 1, "", "dft"], [624, 2, 1, "", "diag"], [356, 2, 1, "", "diagflat"], [625, 2, 1, "", "diagonal"], [352, 2, 1, "", "diff"], [352, 2, 1, "", "digamma"], [362, 2, 1, "", "dirichlet"], [239, 2, 1, "", "divide"], [356, 2, 1, "", "dot"], [616, 2, 1, "", "dropout"], [355, 2, 1, "", "dropout1d"], [355, 2, 1, "", "dropout2d"], [355, 2, 1, "", "dropout3d"], [358, 2, 1, "", "dsplit"], [358, 2, 1, "", "dstack"], [162, 2, 1, "", "dtype"], [163, 2, 1, "", "dtype_bits"], [598, 2, 1, "", "duplicate_array_index_chains"], [584, 6, 1, "", "e"], [356, 2, 1, "", "eig"], [627, 2, 1, "", "eigh"], [356, 2, 1, "", "eigh_tridiagonal"], [356, 2, 1, "", "eigvals"], [628, 2, 1, "", "eigvalsh"], [591, 2, 1, "", "einops_rearrange"], [591, 2, 1, "", "einops_reduce"], [591, 2, 1, "", "einops_repeat"], [604, 2, 1, "", "einsum"], [347, 2, 1, "", "elu"], [355, 2, 1, "", "embedding"], [130, 2, 1, "", "empty"], [131, 2, 1, "", "empty_like"], [240, 2, 1, "", "equal"], [241, 2, 1, "", "erf"], [592, 2, 1, "", "execute_with_gradients"], [591, 2, 1, "", "exists"], [242, 2, 1, "", "exp"], [243, 2, 1, "", "exp2"], [358, 2, 1, "", "expand"], [596, 2, 1, "", "expand_dims"], [244, 2, 1, "", "expm1"], [132, 2, 1, "", "eye"], [349, 2, 1, "", "eye_like"], [355, 2, 1, "", "fft"], [355, 2, 1, "", "fft2"], [358, 2, 1, "", "fill_diagonal"], [164, 2, 1, "", "finfo"], [352, 2, 1, "", "fix"], [358, 2, 1, "", "flatten"], [596, 2, 1, "", "flip"], [358, 2, 1, "", "fliplr"], [358, 2, 1, "", "flipud"], [352, 2, 1, "", "float_power"], [245, 2, 1, "", "floor"], [246, 2, 1, "", "floor_divide"], [352, 2, 1, "", "fmax"], [247, 2, 1, "", "fmin"], [248, 2, 1, "", "fmod"], [358, 2, 1, "", "fold"], [597, 2, 1, "", "fomaml_step"], [585, 2, 1, "", "for_loop"], [591, 2, 1, "", "fourier_encode"], [352, 2, 1, "", "frexp"], [133, 2, 1, "", "from_dlpack"], [134, 2, 1, "", "frombuffer"], [135, 2, 1, "", "full"], [136, 2, 1, "", "full_like"], [198, 2, 1, "", "function_supported_devices"], [591, 2, 1, "", "function_supported_devices_and_dtypes"], [165, 2, 1, "", "function_supported_dtypes"], [199, 2, 1, "", "function_unsupported_devices"], [591, 2, 1, "", "function_unsupported_devices_and_dtypes"], [166, 2, 1, "", "function_unsupported_dtypes"], [362, 2, 1, "", "gamma"], [591, 2, 1, "", "gather"], [591, 2, 1, "", "gather_nd"], [249, 2, 1, "", "gcd"], [583, 2, 1, "", "gelu"], [356, 2, 1, "", "general_inner_product"], [355, 2, 1, "", "generate_einsum_equation"], [591, 2, 1, "", "get_all_arrays_in_memory"], [200, 2, 1, "", "get_all_ivy_arrays_on_dev"], [355, 2, 1, "", "get_interpolate_kernel"], [591, 2, 1, "", "get_item"], [591, 2, 1, "", "get_num_dims"], [591, 2, 1, "", "get_referrers_recursive"], [201, 2, 1, "", "gpu_is_available"], [592, 2, 1, "", "grad"], [352, 2, 1, "", "gradient"], [592, 2, 1, "", "gradient_descent_update"], [250, 2, 1, "", "greater"], [251, 2, 1, "", "greater_equal"], [361, 2, 1, "", "group_norm"], [349, 2, 1, "", "hamming_window"], [202, 2, 1, "", "handle_soft_device_variable"], [349, 2, 1, "", "hann_window"], [583, 2, 1, "", "hardswish"], [591, 2, 1, "", "has_nans"], [358, 2, 1, "", "heaviside"], [367, 2, 1, "", "histogram"], [358, 2, 1, "", "hsplit"], [358, 2, 1, "", "hstack"], [357, 2, 1, "", "huber_loss"], [352, 2, 1, "", "hypot"], [358, 2, 1, "", "i0"], [355, 2, 1, "", "idct"], [585, 2, 1, "", "if_else"], [355, 2, 1, "", "ifft"], [355, 2, 1, "", "ifftn"], [367, 2, 1, "", "igamma"], [167, 2, 1, "", "iinfo"], [252, 2, 1, "", "imag"], [598, 2, 1, "", "index_nest"], [349, 2, 1, "", "indices"], [584, 6, 1, "", "inf"], [168, 2, 1, "", "infer_default_dtype"], [356, 2, 1, "", "initialize_tucker"], [629, 2, 1, "", "inner"], [591, 2, 1, "", "inplace_arrays_supported"], [591, 2, 1, "", "inplace_decrement"], [591, 2, 1, "", "inplace_increment"], [591, 2, 1, "", "inplace_update"], [591, 2, 1, "", "inplace_variables_supported"], [598, 2, 1, "", "insert_into_nest_at_index"], [598, 2, 1, "", "insert_into_nest_at_indices"], [361, 2, 1, "", "instance_norm"], [355, 2, 1, "", "interp"], [355, 2, 1, "", "interpolate"], [594, 2, 1, "", "inv"], [169, 2, 1, "", "invalid_dtype"], [365, 2, 1, "", "invert_permutation"], [591, 2, 1, "", "is_array"], [170, 2, 1, "", "is_bool_dtype"], [171, 2, 1, "", "is_complex_dtype"], [172, 2, 1, "", "is_float_dtype"], [173, 2, 1, "", "is_hashable_dtype"], [174, 2, 1, "", "is_int_dtype"], [591, 2, 1, "", "is_ivy_array"], [591, 2, 1, "", "is_ivy_container"], [591, 2, 1, "", "is_ivy_nested_array"], [366, 2, 1, "", "is_ivy_sparse_array"], [591, 2, 1, "", "is_native_array"], [175, 2, 1, "", "is_native_dtype"], [366, 2, 1, "", "is_native_sparse_array"], [176, 2, 1, "", "is_uint_dtype"], [352, 2, 1, "", "isclose"], [253, 2, 1, "", "isfinite"], [591, 2, 1, "", "isin"], [254, 2, 1, "", "isinf"], [255, 2, 1, "", "isnan"], [256, 2, 1, "", "isreal"], [591, 2, 1, "", "isscalar"], [591, 2, 1, "", "itemsize"], [592, 2, 1, "", "jac"], [349, 2, 1, "", "kaiser_bessel_derived_window"], [349, 2, 1, "", "kaiser_window"], [356, 2, 1, "", "khatri_rao"], [356, 2, 1, "", "kron"], [356, 2, 1, "", "kronecker"], [357, 2, 1, "", "l1_loss"], [361, 2, 1, "", "l1_normalize"], [361, 2, 1, "", "l2_normalize"], [592, 2, 1, "", "lamb_update"], [592, 2, 1, "", "lars_update"], [599, 2, 1, "", "layer_norm"], [257, 2, 1, "", "lcm"], [352, 2, 1, "", "ldexp"], [583, 2, 1, "", "leaky_relu"], [352, 2, 1, "", "lerp"], [258, 2, 1, "", "less"], [259, 2, 1, "", "less_equal"], [365, 2, 1, "", "lexsort"], [352, 2, 1, "", "lgamma"], [617, 2, 1, "", "linear"], [137, 2, 1, "", "linspace"], [605, 2, 1, "", "load"], [260, 2, 1, "", "log"], [261, 2, 1, "", "log10"], [262, 2, 1, "", "log1p"], [263, 2, 1, "", "log2"], [357, 2, 1, "", "log_poisson_loss"], [583, 2, 1, "", "log_softmax"], [264, 2, 1, "", "logaddexp"], [265, 2, 1, "", "logaddexp2"], [266, 2, 1, "", "logical_and"], [267, 2, 1, "", "logical_not"], [268, 2, 1, "", "logical_or"], [269, 2, 1, "", "logical_xor"], [347, 2, 1, "", "logit"], [347, 2, 1, "", "logsigmoid"], [138, 2, 1, "", "logspace"], [361, 2, 1, "", "lp_normalize"], [618, 2, 1, "", "lstm_update"], [594, 2, 1, "", "lu_factor"], [356, 2, 1, "", "make_svd_non_negative"], [597, 2, 1, "", "maml_step"], [598, 2, 1, "", "map"], [598, 2, 1, "", "map_nest_at_index"], [598, 2, 1, "", "map_nest_at_indices"], [591, 2, 1, "", "match_kwargs"], [594, 2, 1, "", "matmul"], [358, 2, 1, "", "matricize"], [356, 2, 1, "", "matrix_exp"], [594, 2, 1, "", "matrix_norm"], [594, 2, 1, "", "matrix_power"], [594, 2, 1, "", "matrix_rank"], [594, 2, 1, "", "matrix_transpose"], [604, 2, 1, "", "max"], [355, 2, 1, "", "max_pool1d"], [355, 2, 1, "", "max_pool2d"], [355, 2, 1, "", "max_pool3d"], [355, 2, 1, "", "max_unpool1d"], [270, 2, 1, "", "maximum"], [604, 2, 1, "", "mean"], [367, 2, 1, "", "median"], [349, 2, 1, "", "mel_weight_matrix"], [139, 2, 1, "", "meshgrid"], [604, 2, 1, "", "min"], [271, 2, 1, "", "minimum"], [583, 2, 1, "", "mish"], [356, 2, 1, "", "mode_dot"], [352, 2, 1, "", "modf"], [358, 2, 1, "", "moveaxis"], [603, 2, 1, "", "msort"], [356, 2, 1, "", "multi_dot"], [619, 2, 1, "", "multi_head_attention"], [598, 2, 1, "", "multi_index_nest"], [356, 2, 1, "", "multi_mode_dot"], [600, 2, 1, "", "multinomial"], [272, 2, 1, "", "multiply"], [591, 2, 1, "", "multiprocessing"], [584, 6, 1, "", "nan"], [273, 2, 1, "", "nan_to_num"], [367, 2, 1, "", "nanmean"], [367, 2, 1, "", "nanmedian"], [367, 2, 1, "", "nanprod"], [352, 2, 1, "", "nansum"], [140, 2, 1, "", "native_array"], [366, 2, 1, "", "native_sparse_array"], [366, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [349, 2, 1, "", "ndenumerate"], [349, 2, 1, "", "ndindex"], [355, 2, 1, "", "nearest_interpolate"], [274, 2, 1, "", "negative"], [598, 2, 1, "", "nested_any"], [598, 2, 1, "", "nested_argwhere"], [598, 2, 1, "", "nested_map"], [598, 2, 1, "", "nested_multi_map"], [584, 6, 1, "", "newaxis"], [352, 2, 1, "", "nextafter"], [601, 2, 1, "", "nonzero"], [275, 2, 1, "", "not_equal"], [591, 2, 1, "", "num_arrays_in_memory"], [203, 2, 1, "", "num_cpu_cores"], [204, 2, 1, "", "num_gpus"], [205, 2, 1, "", "num_ivy_arrays_on_dev"], [141, 2, 1, "", "one_hot"], [142, 2, 1, "", "ones"], [143, 2, 1, "", "ones_like"], [592, 2, 1, "", "optimizer_update"], [368, 2, 1, "", "optional_get_element"], [594, 2, 1, "", "outer"], [358, 2, 1, "", "pad"], [358, 2, 1, "", "partial_fold"], [358, 2, 1, "", "partial_tensor_to_vec"], [356, 2, 1, "", "partial_tucker"], [358, 2, 1, "", "partial_unfold"], [358, 2, 1, "", "partial_vec_to_tensor"], [206, 2, 1, "", "percent_used_mem_on_dev"], [596, 2, 1, "", "permute_dims"], [584, 6, 1, "", "pi"], [594, 2, 1, "", "pinv"], [362, 2, 1, "", "poisson"], [355, 2, 1, "", "pool"], [276, 2, 1, "", "positive"], [277, 2, 1, "", "pow"], [347, 2, 1, "", "prelu"], [591, 2, 1, "", "print_all_arrays_in_memory"], [207, 2, 1, "", "print_all_ivy_arrays_on_dev"], [604, 2, 1, "", "prod"], [177, 2, 1, "", "promote_types"], [178, 2, 1, "", "promote_types_of_inputs"], [598, 2, 1, "", "prune_empty"], [598, 2, 1, "", "prune_nest_at_index"], [598, 2, 1, "", "prune_nest_at_indices"], [358, 2, 1, "", "put_along_axis"], [594, 2, 1, "", "qr"], [367, 2, 1, "", "quantile"], [278, 2, 1, "", "rad2deg"], [600, 2, 1, "", "randint"], [349, 2, 1, "", "random_cp"], [600, 2, 1, "", "random_normal"], [349, 2, 1, "", "random_tucker"], [600, 2, 1, "", "random_uniform"], [279, 2, 1, "", "real"], [280, 2, 1, "", "reciprocal"], [353, 2, 1, "", "reduce"], [355, 2, 1, "", "reduce_window"], [583, 2, 1, "", "relu"], [347, 2, 1, "", "relu6"], [281, 2, 1, "", "remainder"], [596, 2, 1, "", "repeat"], [597, 2, 1, "", "reptile_step"], [596, 2, 1, "", "reshape"], [179, 2, 1, "", "result_type"], [355, 2, 1, "", "rfftn"], [596, 2, 1, "", "roll"], [358, 2, 1, "", "rot90"], [282, 2, 1, "", "round"], [605, 2, 1, "", "save"], [620, 2, 1, "", "scaled_dot_product_attention"], [591, 2, 1, "", "scatter_flat"], [591, 2, 1, "", "scatter_nd"], [603, 2, 1, "", "searchsorted"], [600, 2, 1, "", "seed"], [347, 2, 1, "", "selu"], [347, 2, 1, "", "sequence_length"], [591, 2, 1, "", "set_array_mode"], [180, 2, 1, "", "set_default_complex_dtype"], [208, 2, 1, "", "set_default_device"], [181, 2, 1, "", "set_default_dtype"], [182, 2, 1, "", "set_default_float_dtype"], [183, 2, 1, "", "set_default_int_dtype"], [184, 2, 1, "", "set_default_uint_dtype"], [591, 2, 1, "", "set_exception_trace_mode"], [591, 2, 1, "", "set_inplace_mode"], [591, 2, 1, "", "set_item"], [591, 2, 1, "", "set_min_base"], [591, 2, 1, "", "set_min_denominator"], [598, 2, 1, "", "set_nest_at_index"], [598, 2, 1, "", "set_nest_at_indices"], [591, 2, 1, "", "set_nestable_mode"], [591, 2, 1, "", "set_precise_mode"], [591, 2, 1, "", "set_queue_timeout"], [591, 2, 1, "", "set_shape_array_mode"], [591, 2, 1, "", "set_show_func_wrapper_trace_mode"], [209, 2, 1, "", "set_soft_device_mode"], [210, 2, 1, "", "set_split_factor"], [591, 2, 1, "", "set_tmp_dir"], [591, 2, 1, "", "shape"], [600, 2, 1, "", "shuffle"], [583, 2, 1, "", "sigmoid"], [283, 2, 1, "", "sign"], [352, 2, 1, "", "signbit"], [347, 2, 1, "", "silu"], [284, 2, 1, "", "sin"], [352, 2, 1, "", "sinc"], [285, 2, 1, "", "sinh"], [594, 2, 1, "", "slogdet"], [357, 2, 1, "", "smooth_l1_loss"], [357, 2, 1, "", "soft_margin_loss"], [358, 2, 1, "", "soft_thresholding"], [583, 2, 1, "", "softmax"], [583, 2, 1, "", "softplus"], [583, 2, 1, "", "softsign"], [594, 2, 1, "", "solve"], [603, 2, 1, "", "sort"], [595, 2, 1, "", "sparse_cross_entropy"], [352, 2, 1, "", "sparsify_tensor"], [596, 2, 1, "", "split"], [211, 2, 1, "", "split_factor"], [212, 2, 1, "", "split_func_call"], [286, 2, 1, "", "sqrt"], [287, 2, 1, "", "square"], [596, 2, 1, "", "squeeze"], [591, 2, 1, "", "stable_divide"], [591, 2, 1, "", "stable_pow"], [596, 2, 1, "", "stack"], [604, 2, 1, "", "std"], [592, 2, 1, "", "stop_gradient"], [591, 2, 1, "", "strides"], [288, 2, 1, "", "subtract"], [604, 2, 1, "", "sum"], [591, 2, 1, "", "supports_inplace_updates"], [594, 2, 1, "", "svd"], [356, 2, 1, "", "svd_flip"], [594, 2, 1, "", "svdvals"], [596, 2, 1, "", "swapaxes"], [358, 2, 1, "", "take_along_axis"], [289, 2, 1, "", "tan"], [290, 2, 1, "", "tanh"], [594, 2, 1, "", "tensordot"], [594, 2, 1, "", "tensorsolve"], [347, 2, 1, "", "thresholded_relu"], [596, 2, 1, "", "tile"], [213, 2, 1, "", "to_device"], [591, 2, 1, "", "to_ivy_shape"], [591, 2, 1, "", "to_list"], [591, 2, 1, "", "to_native_shape"], [591, 2, 1, "", "to_numpy"], [591, 2, 1, "", "to_scalar"], [358, 2, 1, "", "top_k"], [214, 2, 1, "", "total_mem_on_dev"], [215, 2, 1, "", "tpu_is_available"], [594, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [291, 2, 1, "", "trapz"], [144, 2, 1, "", "tril"], [349, 2, 1, "", "tril_indices"], [349, 2, 1, "", "trilu"], [145, 2, 1, "", "triu"], [146, 2, 1, "", "triu_indices"], [292, 2, 1, "", "trunc"], [293, 2, 1, "", "trunc_divide"], [356, 2, 1, "", "truncated_svd"], [591, 2, 1, "", "try_else_none"], [585, 2, 1, "", "try_except"], [356, 2, 1, "", "tucker"], [185, 2, 1, "", "type_promote_arrays"], [358, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [602, 2, 1, "", "unique_all"], [358, 2, 1, "", "unique_consecutive"], [602, 2, 1, "", "unique_counts"], [602, 2, 1, "", "unique_inverse"], [602, 2, 1, "", "unique_values"], [363, 2, 1, "", "unravel_index"], [591, 2, 1, "", "unset_array_mode"], [186, 2, 1, "", "unset_default_complex_dtype"], [216, 2, 1, "", "unset_default_device"], [187, 2, 1, "", "unset_default_dtype"], [188, 2, 1, "", "unset_default_float_dtype"], [189, 2, 1, "", "unset_default_int_dtype"], [190, 2, 1, "", "unset_default_uint_dtype"], [591, 2, 1, "", "unset_exception_trace_mode"], [591, 2, 1, "", "unset_inplace_mode"], [591, 2, 1, "", "unset_min_base"], [591, 2, 1, "", "unset_min_denominator"], [591, 2, 1, "", "unset_nestable_mode"], [591, 2, 1, "", "unset_precise_mode"], [591, 2, 1, "", "unset_queue_timeout"], [591, 2, 1, "", "unset_shape_array_mode"], [591, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [217, 2, 1, "", "unset_soft_device_mode"], [591, 2, 1, "", "unset_tmp_dir"], [349, 2, 1, "", "unsorted_segment_min"], [349, 2, 1, "", "unsorted_segment_sum"], [596, 2, 1, "", "unstack"], [218, 2, 1, "", "used_mem_on_dev"], [191, 2, 1, "", "valid_dtype"], [592, 2, 1, "", "value_and_grad"], [591, 2, 1, "", "value_is_nan"], [594, 2, 1, "", "vander"], [604, 2, 1, "", "var"], [594, 2, 1, "", "vecdot"], [594, 2, 1, "", "vector_norm"], [594, 2, 1, "", "vector_to_skew_symmetric_matrix"], [591, 2, 1, "", "vmap"], [349, 2, 1, "", "vorbis_window"], [358, 2, 1, "", "vsplit"], [358, 2, 1, "", "vstack"], [601, 2, 1, "", "where"], [585, 2, 1, "", "while_loop"], [352, 2, 1, "", "xlogy"], [596, 2, 1, "", "zero_pad"], [147, 2, 1, "", "zeros"], [148, 2, 1, "", "zeros_like"], [352, 2, 1, "", "zeta"]], "ivy.Container": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [572, 0, 1, "", "adam_step"], [573, 0, 1, "", "adam_update"], [369, 0, 1, "", "adaptive_avg_pool1d"], [370, 0, 1, "", "adaptive_avg_pool2d"], [371, 0, 1, "", "adaptive_max_pool2d"], [222, 0, 1, "", "add"], [399, 0, 1, "", "adjoint"], [722, 0, 1, "", "all"], [492, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [223, 0, 1, "", "angle"], [723, 0, 1, "", "any"], [699, 0, 1, "", "argmax"], [700, 0, 1, "", "argmin"], [708, 0, 1, "", "argsort"], [701, 0, 1, "", "argwhere"], [495, 0, 1, "", "array_equal"], [425, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [496, 0, 1, "", "assert_supports_inplace"], [426, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [427, 0, 1, "", "atleast_1d"], [428, 0, 1, "", "atleast_2d"], [429, 0, 1, "", "atleast_3d"], [373, 0, 1, "", "avg_pool1d"], [374, 0, 1, "", "avg_pool2d"], [375, 0, 1, "", "avg_pool3d"], [461, 0, 1, "", "batch_norm"], [467, 0, 1, "", "bernoulli"], [468, 0, 1, "", "beta"], [321, 0, 1, "", "binarizer"], [651, 0, 1, "", "binary_cross_entropy"], [479, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [303, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [430, 0, 1, "", "broadcast_shapes"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [621, 0, 1, "", "cholesky"], [654, 0, 1, "", "clip"], [498, 0, 1, "", "clip_matrix_norm"], [499, 0, 1, "", "clip_vector_norm"], [655, 0, 1, "", "concat"], [432, 0, 1, "", "concat_from_sequence"], [400, 0, 1, "", "cond"], [322, 0, 1, "", "conj"], [656, 0, 1, "", "constant_pad"], [607, 0, 1, "", "conv1d"], [608, 0, 1, "", "conv1d_transpose"], [609, 0, 1, "", "conv2d"], [610, 0, 1, "", "conv2d_transpose"], [611, 0, 1, "", "conv3d"], [612, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [323, 0, 1, "", "copysign"], [480, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [324, 0, 1, "", "count_nonzero"], [481, 0, 1, "", "cov"], [622, 0, 1, "", "cross"], [652, 0, 1, "", "cross_entropy"], [482, 0, 1, "", "cummax"], [483, 0, 1, "", "cummin"], [712, 0, 1, "", "cumprod"], [713, 0, 1, "", "cumsum"], [376, 0, 1, "", "dct"], [238, 0, 1, "", "deg2rad"], [615, 0, 1, "", "depthwise_conv2d"], [623, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [377, 0, 1, "", "dft"], [624, 0, 1, "", "diag"], [401, 0, 1, "", "diagflat"], [625, 0, 1, "", "diagonal"], [325, 0, 1, "", "diff"], [326, 0, 1, "", "digamma"], [469, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [402, 0, 1, "", "dot"], [616, 0, 1, "", "dropout"], [378, 0, 1, "", "dropout1d"], [379, 0, 1, "", "dropout2d"], [380, 0, 1, "", "dropout3d"], [433, 0, 1, "", "dsplit"], [434, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [626, 0, 1, "", "eig"], [627, 0, 1, "", "eigh"], [404, 0, 1, "", "eigh_tridiagonal"], [405, 0, 1, "", "eigvals"], [628, 0, 1, "", "eigvalsh"], [503, 0, 1, "", "einops_rearrange"], [504, 0, 1, "", "einops_reduce"], [505, 0, 1, "", "einops_repeat"], [714, 0, 1, "", "einsum"], [294, 0, 1, "", "elu"], [381, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [506, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [435, 0, 1, "", "expand"], [657, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [304, 0, 1, "", "eye_like"], [382, 0, 1, "", "fft"], [436, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [327, 0, 1, "", "fix"], [437, 0, 1, "", "flatten"], [658, 0, 1, "", "flip"], [438, 0, 1, "", "fliplr"], [439, 0, 1, "", "flipud"], [328, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [329, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [440, 0, 1, "", "fold"], [507, 0, 1, "", "fourier_encode"], [330, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [134, 0, 1, "", "frombuffer"], [136, 0, 1, "", "full_like"], [470, 0, 1, "", "gamma"], [510, 0, 1, "", "gather"], [511, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [406, 0, 1, "", "general_inner_product"], [514, 0, 1, "", "get_num_dims"], [331, 0, 1, "", "gradient"], [576, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [462, 0, 1, "", "group_norm"], [305, 0, 1, "", "hamming_window"], [306, 0, 1, "", "hann_window"], [105, 0, 1, "", "hardswish"], [516, 0, 1, "", "has_nans"], [441, 0, 1, "", "heaviside"], [484, 0, 1, "", "histogram"], [442, 0, 1, "", "hsplit"], [443, 0, 1, "", "hstack"], [420, 0, 1, "", "huber_loss"], [332, 0, 1, "", "hypot"], [444, 0, 1, "", "i0"], [386, 0, 1, "", "idct"], [387, 0, 1, "", "ifft"], [388, 0, 1, "", "ifftn"], [485, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [407, 0, 1, "", "initialize_tucker"], [629, 0, 1, "", "inner"], [518, 0, 1, "", "inplace_decrement"], [519, 0, 1, "", "inplace_increment"], [520, 0, 1, "", "inplace_update"], [463, 0, 1, "", "instance_norm"], [390, 0, 1, "", "interpolate"], [630, 0, 1, "", "inv"], [473, 0, 1, "", "invert_permutation"], [522, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [171, 0, 1, "", "is_complex_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [523, 0, 1, "", "is_ivy_array"], [526, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [333, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [527, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [529, 0, 1, "", "itemsize"], [308, 0, 1, "", "kaiser_bessel_derived_window"], [309, 0, 1, "", "kaiser_window"], [409, 0, 1, "", "kron"], [421, 0, 1, "", "l1_loss"], [464, 0, 1, "", "l1_normalize"], [465, 0, 1, "", "l2_normalize"], [578, 0, 1, "", "lamb_update"], [579, 0, 1, "", "lars_update"], [692, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [334, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [335, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [474, 0, 1, "", "lexsort"], [617, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [107, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [466, 0, 1, "", "lp_normalize"], [618, 0, 1, "", "lstm_update"], [411, 0, 1, "", "make_svd_non_negative"], [632, 0, 1, "", "matmul"], [445, 0, 1, "", "matricize"], [412, 0, 1, "", "matrix_exp"], [633, 0, 1, "", "matrix_norm"], [634, 0, 1, "", "matrix_power"], [635, 0, 1, "", "matrix_rank"], [636, 0, 1, "", "matrix_transpose"], [715, 0, 1, "", "max"], [391, 0, 1, "", "max_pool1d"], [392, 0, 1, "", "max_pool2d"], [393, 0, 1, "", "max_pool3d"], [270, 0, 1, "", "maximum"], [716, 0, 1, "", "mean"], [486, 0, 1, "", "median"], [310, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [717, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [413, 0, 1, "", "mode_dot"], [337, 0, 1, "", "modf"], [446, 0, 1, "", "moveaxis"], [709, 0, 1, "", "msort"], [414, 0, 1, "", "multi_dot"], [619, 0, 1, "", "multi_head_attention"], [415, 0, 1, "", "multi_mode_dot"], [693, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [487, 0, 1, "", "nanmean"], [488, 0, 1, "", "nanmedian"], [489, 0, 1, "", "nanprod"], [338, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [339, 0, 1, "", "nextafter"], [702, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [580, 0, 1, "", "optimizer_update"], [491, 0, 1, "", "optional_get_element"], [637, 0, 1, "", "outer"], [447, 0, 1, "", "pad"], [448, 0, 1, "", "partial_fold"], [449, 0, 1, "", "partial_tensor_to_vec"], [416, 0, 1, "", "partial_tucker"], [450, 0, 1, "", "partial_unfold"], [451, 0, 1, "", "partial_vec_to_tensor"], [659, 0, 1, "", "permute_dims"], [638, 0, 1, "", "pinv"], [471, 0, 1, "", "poisson"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [718, 0, 1, "", "prod"], [639, 0, 1, "", "qr"], [490, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [694, 0, 1, "", "randint"], [695, 0, 1, "", "random_normal"], [696, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [345, 0, 1, "", "reduce"], [397, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [660, 0, 1, "", "repeat"], [661, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [398, 0, 1, "", "rfftn"], [662, 0, 1, "", "roll"], [453, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [620, 0, 1, "", "scaled_dot_product_attention"], [534, 0, 1, "", "scatter_flat"], [535, 0, 1, "", "scatter_nd"], [710, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [698, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [340, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [341, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [640, 0, 1, "", "slogdet"], [423, 0, 1, "", "smooth_l1_loss"], [424, 0, 1, "", "soft_margin_loss"], [454, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [641, 0, 1, "", "solve"], [711, 0, 1, "", "sort"], [653, 0, 1, "", "sparse_cross_entropy"], [342, 0, 1, "", "sparsify_tensor"], [663, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [664, 0, 1, "", "squeeze"], [549, 0, 1, "", "stable_divide"], [550, 0, 1, "", "stable_pow"], [665, 0, 1, "", "stack"], [719, 0, 1, "", "std"], [581, 0, 1, "", "stop_gradient"], [551, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [720, 0, 1, "", "sum"], [552, 0, 1, "", "supports_inplace_updates"], [642, 0, 1, "", "svd"], [417, 0, 1, "", "svd_flip"], [643, 0, 1, "", "svdvals"], [666, 0, 1, "", "swapaxes"], [455, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [644, 0, 1, "", "tensordot"], [645, 0, 1, "", "tensorsolve"], [302, 0, 1, "", "thresholded_relu"], [667, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [554, 0, 1, "", "to_list"], [556, 0, 1, "", "to_numpy"], [557, 0, 1, "", "to_scalar"], [456, 0, 1, "", "top_k"], [646, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [315, 0, 1, "", "tril_indices"], [316, 0, 1, "", "trilu"], [145, 0, 1, "", "triu"], [146, 0, 1, "", "triu_indices"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [418, 0, 1, "", "truncated_svd"], [419, 0, 1, "", "tucker"], [457, 0, 1, "", "unfold"], [704, 0, 1, "", "unique_all"], [458, 0, 1, "", "unique_consecutive"], [705, 0, 1, "", "unique_counts"], [706, 0, 1, "", "unique_inverse"], [707, 0, 1, "", "unique_values"], [472, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [668, 0, 1, "", "unstack"], [570, 0, 1, "", "value_is_nan"], [647, 0, 1, "", "vander"], [721, 0, 1, "", "var"], [648, 0, 1, "", "vecdot"], [649, 0, 1, "", "vector_norm"], [650, 0, 1, "", "vector_to_skew_symmetric_matrix"], [319, 0, 1, "", "vorbis_window"], [459, 0, 1, "", "vsplit"], [460, 0, 1, "", "vstack"], [703, 0, 1, "", "where"], [343, 0, 1, "", "xlogy"], [669, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [344, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[48, 3, 0, "-", "activations"], [96, 3, 0, "-", "array"], [49, 3, 0, "-", "conversions"], [50, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [52, 3, 0, "-", "device"], [53, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "experimental"], [55, 3, 0, "-", "general"], [56, 3, 0, "-", "gradients"], [57, 3, 0, "-", "image"], [58, 3, 0, "-", "layers"], [59, 3, 0, "-", "linear_algebra"], [60, 3, 0, "-", "losses"], [61, 3, 0, "-", "manipulation"], [62, 3, 0, "-", "norms"], [63, 3, 0, "-", "random"], [64, 3, 0, "-", "searching"], [65, 3, 0, "-", "set"], [66, 3, 0, "-", "sorting"], [67, 3, 0, "-", "statistical"], [68, 3, 0, "-", "utility"], [69, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[48, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "gelu"], [48, 0, 1, "", "hardswish"], [48, 0, 1, "", "leaky_relu"], [48, 0, 1, "", "log_softmax"], [48, 0, 1, "", "mish"], [48, 0, 1, "", "relu"], [48, 0, 1, "", "sigmoid"], [48, 0, 1, "", "softmax"], [48, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[96, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[96, 5, 1, "", "T"], [96, 0, 1, "", "__abs__"], [96, 0, 1, "", "__add__"], [96, 0, 1, "", "__eq__"], [96, 0, 1, "", "__ge__"], [96, 0, 1, "", "__gt__"], [96, 0, 1, "", "__init__"], [96, 0, 1, "", "__le__"], [96, 0, 1, "", "__lt__"], [96, 0, 1, "", "__ne__"], [96, 0, 1, "", "__pow__"], [96, 0, 1, "", "__radd__"], [96, 0, 1, "", "__rrshift__"], [96, 0, 1, "", "__rshift__"], [96, 0, 1, "", "__rsub__"], [96, 0, 1, "", "__sub__"], [96, 0, 1, "", "__truediv__"], [96, 0, 1, "", "__xor__"], [96, 5, 1, "", "backend"], [96, 5, 1, "", "base"], [96, 5, 1, "", "data"], [96, 5, 1, "", "device"], [96, 5, 1, "", "dtype"], [96, 5, 1, "", "dynamic_backend"], [96, 5, 1, "", "imag"], [96, 5, 1, "", "itemsize"], [96, 5, 1, "", "mT"], [96, 5, 1, "", "ndim"], [96, 5, 1, "", "real"], [96, 5, 1, "", "shape"], [96, 5, 1, "", "size"], [96, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[49, 2, 1, "", "_to_ivy"], [49, 2, 1, "", "_to_native"], [49, 2, 1, "", "args_to_ivy"], [49, 2, 1, "", "args_to_native"], [49, 2, 1, "", "to_ivy"], [49, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[50, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "asarray"], [50, 0, 1, "", "copy_array"], [50, 0, 1, "", "empty_like"], [50, 0, 1, "", "from_dlpack"], [50, 0, 1, "", "full_like"], [50, 0, 1, "", "linspace"], [50, 0, 1, "", "logspace"], [50, 0, 1, "", "meshgrid"], [50, 0, 1, "", "native_array"], [50, 0, 1, "", "one_hot"], [50, 0, 1, "", "ones_like"], [50, 0, 1, "", "tril"], [50, 0, 1, "", "triu"], [50, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[51, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "astype"], [51, 0, 1, "", "broadcast_arrays"], [51, 0, 1, "", "broadcast_to"], [51, 0, 1, "", "can_cast"], [51, 0, 1, "", "dtype"], [51, 0, 1, "", "finfo"], [51, 0, 1, "", "iinfo"], [51, 0, 1, "", "is_bool_dtype"], [51, 0, 1, "", "is_float_dtype"], [51, 0, 1, "", "is_int_dtype"], [51, 0, 1, "", "is_uint_dtype"], [51, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[52, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "dev"], [52, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[53, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "abs"], [53, 0, 1, "", "acos"], [53, 0, 1, "", "acosh"], [53, 0, 1, "", "add"], [53, 0, 1, "", "angle"], [53, 0, 1, "", "asin"], [53, 0, 1, "", "asinh"], [53, 0, 1, "", "atan"], [53, 0, 1, "", "atan2"], [53, 0, 1, "", "atanh"], [53, 0, 1, "", "bitwise_and"], [53, 0, 1, "", "bitwise_invert"], [53, 0, 1, "", "bitwise_left_shift"], [53, 0, 1, "", "bitwise_or"], [53, 0, 1, "", "bitwise_right_shift"], [53, 0, 1, "", "bitwise_xor"], [53, 0, 1, "", "ceil"], [53, 0, 1, "", "cos"], [53, 0, 1, "", "cosh"], [53, 0, 1, "", "deg2rad"], [53, 0, 1, "", "divide"], [53, 0, 1, "", "equal"], [53, 0, 1, "", "erf"], [53, 0, 1, "", "exp"], [53, 0, 1, "", "exp2"], [53, 0, 1, "", "expm1"], [53, 0, 1, "", "floor"], [53, 0, 1, "", "floor_divide"], [53, 0, 1, "", "fmin"], [53, 0, 1, "", "gcd"], [53, 0, 1, "", "greater"], [53, 0, 1, "", "greater_equal"], [53, 0, 1, "", "imag"], [53, 0, 1, "", "isfinite"], [53, 0, 1, "", "isinf"], [53, 0, 1, "", "isnan"], [53, 0, 1, "", "isreal"], [53, 0, 1, "", "lcm"], [53, 0, 1, "", "less"], [53, 0, 1, "", "less_equal"], [53, 0, 1, "", "log"], [53, 0, 1, "", "log10"], [53, 0, 1, "", "log1p"], [53, 0, 1, "", "log2"], [53, 0, 1, "", "logaddexp"], [53, 0, 1, "", "logaddexp2"], [53, 0, 1, "", "logical_and"], [53, 0, 1, "", "logical_not"], [53, 0, 1, "", "logical_or"], [53, 0, 1, "", "logical_xor"], [53, 0, 1, "", "maximum"], [53, 0, 1, "", "minimum"], [53, 0, 1, "", "multiply"], [53, 0, 1, "", "nan_to_num"], [53, 0, 1, "", "negative"], [53, 0, 1, "", "not_equal"], [53, 0, 1, "", "positive"], [53, 0, 1, "", "pow"], [53, 0, 1, "", "rad2deg"], [53, 0, 1, "", "real"], [53, 0, 1, "", "reciprocal"], [53, 0, 1, "", "remainder"], [53, 0, 1, "", "round"], [53, 0, 1, "", "sign"], [53, 0, 1, "", "sin"], [53, 0, 1, "", "sinh"], [53, 0, 1, "", "sqrt"], [53, 0, 1, "", "square"], [53, 0, 1, "", "subtract"], [53, 0, 1, "", "tan"], [53, 0, 1, "", "tanh"], [53, 0, 1, "", "trapz"], [53, 0, 1, "", "trunc"], [53, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[54, 3, 0, "-", "activations"], [54, 3, 0, "-", "conversions"], [54, 3, 0, "-", "creation"], [54, 3, 0, "-", "data_type"], [54, 3, 0, "-", "device"], [54, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "general"], [54, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [54, 3, 0, "-", "layers"], [54, 3, 0, "-", "linear_algebra"], [54, 3, 0, "-", "losses"], [54, 3, 0, "-", "manipulation"], [54, 3, 0, "-", "norms"], [54, 3, 0, "-", "random"], [54, 3, 0, "-", "searching"], [54, 3, 0, "-", "set"], [54, 3, 0, "-", "sorting"], [54, 3, 0, "-", "statistical"], [54, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[54, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "elu"], [54, 0, 1, "", "logit"], [54, 0, 1, "", "logsigmoid"], [54, 0, 1, "", "prelu"], [54, 0, 1, "", "relu6"], [54, 0, 1, "", "selu"], [54, 0, 1, "", "silu"], [54, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[54, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[54, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "blackman_window"], [54, 0, 1, "", "eye_like"], [54, 0, 1, "", "mel_weight_matrix"], [54, 0, 1, "", "trilu"], [54, 0, 1, "", "unsorted_segment_min"], [54, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[54, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[54, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[54, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "allclose"], [54, 0, 1, "", "binarizer"], [54, 0, 1, "", "conj"], [54, 0, 1, "", "copysign"], [54, 0, 1, "", "count_nonzero"], [54, 0, 1, "", "diff"], [54, 0, 1, "", "digamma"], [54, 0, 1, "", "fix"], [54, 0, 1, "", "float_power"], [54, 0, 1, "", "fmax"], [54, 0, 1, "", "fmod"], [54, 0, 1, "", "frexp"], [54, 0, 1, "", "gradient"], [54, 0, 1, "", "hypot"], [54, 0, 1, "", "isclose"], [54, 0, 1, "", "ldexp"], [54, 0, 1, "", "lerp"], [54, 0, 1, "", "lgamma"], [54, 0, 1, "", "modf"], [54, 0, 1, "", "nansum"], [54, 0, 1, "", "nextafter"], [54, 0, 1, "", "signbit"], [54, 0, 1, "", "sinc"], [54, 0, 1, "", "sparsify_tensor"], [54, 0, 1, "", "xlogy"], [54, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[54, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[54, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[54, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[54, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adaptive_avg_pool1d"], [54, 0, 1, "", "adaptive_avg_pool2d"], [54, 0, 1, "", "adaptive_max_pool2d"], [54, 0, 1, "", "avg_pool1d"], [54, 0, 1, "", "avg_pool2d"], [54, 0, 1, "", "avg_pool3d"], [54, 0, 1, "", "dct"], [54, 0, 1, "", "dft"], [54, 0, 1, "", "embedding"], [54, 0, 1, "", "fft"], [54, 0, 1, "", "fft2"], [54, 0, 1, "", "idct"], [54, 0, 1, "", "ifft"], [54, 0, 1, "", "ifftn"], [54, 0, 1, "", "interpolate"], [54, 0, 1, "", "max_pool1d"], [54, 0, 1, "", "max_pool2d"], [54, 0, 1, "", "max_pool3d"], [54, 0, 1, "", "reduce_window"], [54, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adjoint"], [54, 0, 1, "", "cond"], [54, 0, 1, "", "diagflat"], [54, 0, 1, "", "dot"], [54, 0, 1, "", "eig"], [54, 0, 1, "", "eigh_tridiagonal"], [54, 0, 1, "", "eigvals"], [54, 0, 1, "", "general_inner_product"], [54, 0, 1, "", "initialize_tucker"], [54, 0, 1, "", "kron"], [54, 0, 1, "", "make_svd_non_negative"], [54, 0, 1, "", "matrix_exp"], [54, 0, 1, "", "mode_dot"], [54, 0, 1, "", "multi_dot"], [54, 0, 1, "", "multi_mode_dot"], [54, 0, 1, "", "partial_tucker"], [54, 0, 1, "", "svd_flip"], [54, 0, 1, "", "truncated_svd"], [54, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[54, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "huber_loss"], [54, 0, 1, "", "l1_loss"], [54, 0, 1, "", "smooth_l1_loss"], [54, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[54, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "as_strided"], [54, 0, 1, "", "associative_scan"], [54, 0, 1, "", "atleast_1d"], [54, 0, 1, "", "atleast_2d"], [54, 0, 1, "", "atleast_3d"], [54, 0, 1, "", "concat_from_sequence"], [54, 0, 1, "", "dsplit"], [54, 0, 1, "", "dstack"], [54, 0, 1, "", "expand"], [54, 0, 1, "", "fill_diagonal"], [54, 0, 1, "", "flatten"], [54, 0, 1, "", "fliplr"], [54, 0, 1, "", "flipud"], [54, 0, 1, "", "fold"], [54, 0, 1, "", "heaviside"], [54, 0, 1, "", "hsplit"], [54, 0, 1, "", "hstack"], [54, 0, 1, "", "i0"], [54, 0, 1, "", "matricize"], [54, 0, 1, "", "moveaxis"], [54, 0, 1, "", "pad"], [54, 0, 1, "", "partial_fold"], [54, 0, 1, "", "partial_tensor_to_vec"], [54, 0, 1, "", "partial_unfold"], [54, 0, 1, "", "partial_vec_to_tensor"], [54, 0, 1, "", "rot90"], [54, 0, 1, "", "soft_thresholding"], [54, 0, 1, "", "take_along_axis"], [54, 0, 1, "", "top_k"], [54, 0, 1, "", "unfold"], [54, 0, 1, "", "unique_consecutive"], [54, 0, 1, "", "vsplit"], [54, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[54, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "batch_norm"], [54, 0, 1, "", "group_norm"], [54, 0, 1, "", "instance_norm"], [54, 0, 1, "", "l1_normalize"], [54, 0, 1, "", "l2_normalize"], [54, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[54, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bernoulli"], [54, 0, 1, "", "beta"], [54, 0, 1, "", "dirichlet"], [54, 0, 1, "", "gamma"], [54, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[54, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[54, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[54, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[54, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bincount"], [54, 0, 1, "", "corrcoef"], [54, 0, 1, "", "cov"], [54, 0, 1, "", "cummax"], [54, 0, 1, "", "cummin"], [54, 0, 1, "", "histogram"], [54, 0, 1, "", "igamma"], [54, 0, 1, "", "median"], [54, 0, 1, "", "nanmean"], [54, 0, 1, "", "nanmedian"], [54, 0, 1, "", "nanprod"], [54, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[54, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[55, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "all_equal"], [55, 0, 1, "", "array_equal"], [55, 0, 1, "", "assert_supports_inplace"], [55, 0, 1, "", "clip_matrix_norm"], [55, 0, 1, "", "clip_vector_norm"], [55, 0, 1, "", "default"], [55, 0, 1, "", "einops_rearrange"], [55, 0, 1, "", "einops_reduce"], [55, 0, 1, "", "einops_repeat"], [55, 0, 1, "", "exists"], [55, 0, 1, "", "fourier_encode"], [55, 0, 1, "", "gather"], [55, 0, 1, "", "gather_nd"], [55, 0, 1, "", "get_num_dims"], [55, 0, 1, "", "has_nans"], [55, 0, 1, "", "inplace_decrement"], [55, 0, 1, "", "inplace_increment"], [55, 0, 1, "", "inplace_update"], [55, 0, 1, "", "is_array"], [55, 0, 1, "", "is_ivy_array"], [55, 0, 1, "", "is_ivy_container"], [55, 0, 1, "", "is_native_array"], [55, 0, 1, "", "isin"], [55, 0, 1, "", "scatter_flat"], [55, 0, 1, "", "scatter_nd"], [55, 0, 1, "", "stable_divide"], [55, 0, 1, "", "stable_pow"], [55, 0, 1, "", "supports_inplace_updates"], [55, 0, 1, "", "to_file"], [55, 0, 1, "", "to_list"], [55, 0, 1, "", "to_numpy"], [55, 0, 1, "", "to_scalar"], [55, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[56, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "adam_step"], [56, 0, 1, "", "adam_update"], [56, 0, 1, "", "gradient_descent_update"], [56, 0, 1, "", "lamb_update"], [56, 0, 1, "", "lars_update"], [56, 0, 1, "", "optimizer_update"], [56, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[57, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[58, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "conv1d"], [58, 0, 1, "", "conv1d_transpose"], [58, 0, 1, "", "conv2d"], [58, 0, 1, "", "conv2d_transpose"], [58, 0, 1, "", "conv3d"], [58, 0, 1, "", "conv3d_transpose"], [58, 0, 1, "", "depthwise_conv2d"], [58, 0, 1, "", "dropout"], [58, 0, 1, "", "dropout1d"], [58, 0, 1, "", "dropout2d"], [58, 0, 1, "", "dropout3d"], [58, 0, 1, "", "linear"], [58, 0, 1, "", "lstm_update"], [58, 0, 1, "", "multi_head_attention"], [58, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[59, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "cholesky"], [59, 0, 1, "", "cross"], [59, 0, 1, "", "det"], [59, 0, 1, "", "diag"], [59, 0, 1, "", "diagonal"], [59, 0, 1, "", "eig"], [59, 0, 1, "", "eigh"], [59, 0, 1, "", "eigvalsh"], [59, 0, 1, "", "inner"], [59, 0, 1, "", "inv"], [59, 0, 1, "", "matmul"], [59, 0, 1, "", "matrix_norm"], [59, 0, 1, "", "matrix_power"], [59, 0, 1, "", "matrix_rank"], [59, 0, 1, "", "matrix_transpose"], [59, 0, 1, "", "outer"], [59, 0, 1, "", "pinv"], [59, 0, 1, "", "qr"], [59, 0, 1, "", "slogdet"], [59, 0, 1, "", "solve"], [59, 0, 1, "", "svd"], [59, 0, 1, "", "svdvals"], [59, 0, 1, "", "tensordot"], [59, 0, 1, "", "tensorsolve"], [59, 0, 1, "", "trace"], [59, 0, 1, "", "vander"], [59, 0, 1, "", "vecdot"], [59, 0, 1, "", "vector_norm"], [59, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[60, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "binary_cross_entropy"], [60, 0, 1, "", "cross_entropy"], [60, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[61, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "clip"], [61, 0, 1, "", "concat"], [61, 0, 1, "", "constant_pad"], [61, 0, 1, "", "expand_dims"], [61, 0, 1, "", "flip"], [61, 0, 1, "", "permute_dims"], [61, 0, 1, "", "repeat"], [61, 0, 1, "", "reshape"], [61, 0, 1, "", "roll"], [61, 0, 1, "", "split"], [61, 0, 1, "", "squeeze"], [61, 0, 1, "", "stack"], [61, 0, 1, "", "swapaxes"], [61, 0, 1, "", "tile"], [61, 0, 1, "", "unstack"], [61, 0, 1, "", "view"], [61, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[62, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[63, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "multinomial"], [63, 0, 1, "", "randint"], [63, 0, 1, "", "random_normal"], [63, 0, 1, "", "random_uniform"], [63, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[64, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "argmax"], [64, 0, 1, "", "argmin"], [64, 0, 1, "", "argwhere"], [64, 0, 1, "", "nonzero"], [64, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[65, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "unique_all"], [65, 0, 1, "", "unique_counts"], [65, 0, 1, "", "unique_inverse"], [65, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[66, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "argsort"], [66, 0, 1, "", "msort"], [66, 0, 1, "", "searchsorted"], [66, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[67, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "cumprod"], [67, 0, 1, "", "cumsum"], [67, 0, 1, "", "einsum"], [67, 0, 1, "", "max"], [67, 0, 1, "", "mean"], [67, 0, 1, "", "min"], [67, 0, 1, "", "prod"], [67, 0, 1, "", "std"], [67, 0, 1, "", "sum"], [67, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[68, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "all"], [68, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[69, 2, 1, "", "_wrap_function"], [69, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[70, 3, 0, "-", "activations"], [71, 3, 0, "-", "base"], [97, 3, 0, "-", "container"], [72, 3, 0, "-", "conversions"], [73, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [75, 3, 0, "-", "device"], [76, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "experimental"], [78, 3, 0, "-", "general"], [79, 3, 0, "-", "gradients"], [80, 3, 0, "-", "image"], [81, 3, 0, "-", "layers"], [82, 3, 0, "-", "linear_algebra"], [83, 3, 0, "-", "losses"], [84, 3, 0, "-", "manipulation"], [85, 3, 0, "-", "norms"], [86, 3, 0, "-", "random"], [87, 3, 0, "-", "searching"], [88, 3, 0, "-", "set"], [89, 3, 0, "-", "sorting"], [90, 3, 0, "-", "statistical"], [91, 3, 0, "-", "utility"], [92, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[70, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_gelu"], [70, 0, 1, "", "_static_hardswish"], [70, 0, 1, "", "_static_leaky_relu"], [70, 0, 1, "", "_static_log_softmax"], [70, 0, 1, "", "_static_mish"], [70, 0, 1, "", "_static_relu"], [70, 0, 1, "", "_static_sigmoid"], [70, 0, 1, "", "_static_softmax"], [70, 0, 1, "", "_static_softplus"], [70, 0, 1, "", "gelu"], [70, 0, 1, "", "hardswish"], [70, 0, 1, "", "leaky_relu"], [70, 0, 1, "", "log_softmax"], [70, 0, 1, "", "mish"], [70, 0, 1, "", "relu"], [70, 0, 1, "", "sigmoid"], [70, 0, 1, "", "softmax"], [70, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[71, 1, 1, "", "ContainerBase"], [71, 2, 1, "", "_is_jsonable"], [71, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[71, 0, 1, "", "__getitem__"], [71, 0, 1, "", "__init__"], [71, 0, 1, "", "__setitem__"], [71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [71, 0, 1, "", "_cont_concat_unify"], [71, 0, 1, "", "_cont_get_dev"], [71, 0, 1, "", "_cont_get_shape"], [71, 0, 1, "", "_cont_get_shapes"], [71, 5, 1, "", "_cont_ivy"], [71, 0, 1, "", "_cont_mean_unify"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_slice_keys"], [71, 0, 1, "", "_cont_sum_unify"], [71, 0, 1, "", "_get_queue_item"], [71, 0, 1, "", "cont_all_false"], [71, 0, 1, "", "cont_all_key_chains"], [71, 0, 1, "", "cont_all_true"], [71, 0, 1, "", "cont_as_bools"], [71, 0, 1, "", "cont_assert_contains_sub_container"], [71, 0, 1, "", "cont_assert_contains_sub_structure"], [71, 0, 1, "", "cont_assert_identical"], [71, 0, 1, "", "cont_assert_identical_structure"], [71, 0, 1, "", "cont_at_key_chain"], [71, 0, 1, "", "cont_at_key_chains"], [71, 0, 1, "", "cont_at_keys"], [71, 0, 1, "", "cont_combine"], [71, 0, 1, "", "cont_common_key_chains"], [71, 5, 1, "", "cont_config"], [71, 0, 1, "", "cont_contains_sub_container"], [71, 0, 1, "", "cont_contains_sub_structure"], [71, 0, 1, "", "cont_copy"], [71, 0, 1, "", "cont_create_if_absent"], [71, 0, 1, "", "cont_cutoff_at_depth"], [71, 0, 1, "", "cont_cutoff_at_height"], [71, 0, 1, "", "cont_deep_copy"], [71, 5, 1, "", "cont_dev"], [71, 5, 1, "", "cont_dev_str"], [71, 0, 1, "", "cont_diff"], [71, 0, 1, "", "cont_duplicate_array_keychains"], [71, 0, 1, "", "cont_find_sub_container"], [71, 0, 1, "", "cont_find_sub_structure"], [71, 0, 1, "", "cont_flatten_key_chain"], [71, 0, 1, "", "cont_flatten_key_chains"], [71, 0, 1, "", "cont_format_key_chains"], [71, 0, 1, "", "cont_from_disk_as_hdf5"], [71, 0, 1, "", "cont_from_disk_as_json"], [71, 0, 1, "", "cont_from_disk_as_pickled"], [71, 0, 1, "", "cont_from_flat_list"], [71, 0, 1, "", "cont_handle_inplace"], [71, 0, 1, "", "cont_has_key"], [71, 0, 1, "", "cont_has_key_chain"], [71, 0, 1, "", "cont_identical"], [71, 0, 1, "", "cont_identical_array_shapes"], [71, 0, 1, "", "cont_identical_configs"], [71, 0, 1, "", "cont_identical_structure"], [71, 0, 1, "", "cont_if_exists"], [71, 0, 1, "", "cont_inplace_update"], [71, 5, 1, "", "cont_ivy"], [71, 0, 1, "", "cont_key_chains_containing"], [71, 0, 1, "", "cont_list_join"], [71, 0, 1, "", "cont_list_stack"], [71, 0, 1, "", "cont_load"], [71, 0, 1, "", "cont_map"], [71, 0, 1, "", "cont_map_sub_conts"], [71, 5, 1, "", "cont_max_depth"], [71, 0, 1, "", "cont_multi_map"], [71, 0, 1, "", "cont_multi_map_in_function"], [71, 0, 1, "", "cont_num_arrays"], [71, 0, 1, "", "cont_overwrite_at_key_chain"], [71, 0, 1, "", "cont_overwrite_at_key_chains"], [71, 0, 1, "", "cont_prune_empty"], [71, 0, 1, "", "cont_prune_key_chain"], [71, 0, 1, "", "cont_prune_key_chains"], [71, 0, 1, "", "cont_prune_key_from_key_chains"], [71, 0, 1, "", "cont_prune_keys"], [71, 0, 1, "", "cont_prune_keys_from_key_chains"], [71, 0, 1, "", "cont_reduce"], [71, 0, 1, "", "cont_remove_key_length_limit"], [71, 0, 1, "", "cont_remove_print_limit"], [71, 0, 1, "", "cont_reshape_like"], [71, 0, 1, "", "cont_restructure"], [71, 0, 1, "", "cont_restructure_key_chains"], [71, 0, 1, "", "cont_save"], [71, 0, 1, "", "cont_set_at_key_chain"], [71, 0, 1, "", "cont_set_at_key_chains"], [71, 0, 1, "", "cont_set_at_keys"], [71, 5, 1, "", "cont_shape"], [71, 5, 1, "", "cont_shapes"], [71, 0, 1, "", "cont_show"], [71, 0, 1, "", "cont_show_sub_container"], [71, 0, 1, "", "cont_size_ordered_arrays"], [71, 0, 1, "", "cont_slice_keys"], [71, 0, 1, "", "cont_slice_via_key"], [71, 0, 1, "", "cont_sort_by_key"], [71, 0, 1, "", "cont_structural_diff"], [71, 0, 1, "", "cont_to_dict"], [71, 0, 1, "", "cont_to_disk_as_hdf5"], [71, 0, 1, "", "cont_to_disk_as_json"], [71, 0, 1, "", "cont_to_disk_as_pickled"], [71, 0, 1, "", "cont_to_flat_list"], [71, 0, 1, "", "cont_to_iterator"], [71, 0, 1, "", "cont_to_iterator_keys"], [71, 0, 1, "", "cont_to_iterator_values"], [71, 0, 1, "", "cont_to_jsonable"], [71, 0, 1, "", "cont_to_nested_list"], [71, 0, 1, "", "cont_to_raw"], [71, 0, 1, "", "cont_trim_key"], [71, 0, 1, "", "cont_try_kc"], [71, 0, 1, "", "cont_unify"], [71, 0, 1, "", "cont_unstack_conts"], [71, 0, 1, "", "cont_update_config"], [71, 0, 1, "", "cont_with_default_key_color"], [71, 0, 1, "", "cont_with_entries_as_lists"], [71, 0, 1, "", "cont_with_ivy_backend"], [71, 0, 1, "", "cont_with_key_length_limit"], [71, 0, 1, "", "cont_with_print_indent"], [71, 0, 1, "", "cont_with_print_limit"], [71, 0, 1, "", "cont_with_print_line_spacing"], [71, 5, 1, "", "dynamic_backend"], [71, 0, 1, "", "h5_file_size"], [71, 0, 1, "", "shuffle_h5_file"], [71, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[97, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[97, 0, 1, "", "__abs__"], [97, 0, 1, "", "__add__"], [97, 0, 1, "", "__eq__"], [97, 0, 1, "", "__ge__"], [97, 0, 1, "", "__gt__"], [97, 0, 1, "", "__init__"], [97, 0, 1, "", "__le__"], [97, 0, 1, "", "__lt__"], [97, 0, 1, "", "__ne__"], [97, 0, 1, "", "__pow__"], [97, 0, 1, "", "__radd__"], [97, 0, 1, "", "__rrshift__"], [97, 0, 1, "", "__rshift__"], [97, 0, 1, "", "__rsub__"], [97, 0, 1, "", "__sub__"], [97, 0, 1, "", "__truediv__"], [97, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[72, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_to_ivy"], [72, 0, 1, "", "_static_to_native"], [72, 0, 1, "", "to_ivy"], [72, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[73, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_arange"], [73, 0, 1, "", "_static_asarray"], [73, 0, 1, "", "_static_copy_array"], [73, 0, 1, "", "_static_empty"], [73, 0, 1, "", "_static_empty_like"], [73, 0, 1, "", "_static_eye"], [73, 0, 1, "", "_static_from_dlpack"], [73, 0, 1, "", "_static_full"], [73, 0, 1, "", "_static_full_like"], [73, 0, 1, "", "_static_linspace"], [73, 0, 1, "", "_static_logspace"], [73, 0, 1, "", "_static_meshgrid"], [73, 0, 1, "", "_static_native_array"], [73, 0, 1, "", "_static_one_hot"], [73, 0, 1, "", "_static_ones"], [73, 0, 1, "", "_static_ones_like"], [73, 0, 1, "", "_static_tril"], [73, 0, 1, "", "_static_triu"], [73, 0, 1, "", "_static_zeros"], [73, 0, 1, "", "_static_zeros_like"], [73, 0, 1, "", "asarray"], [73, 0, 1, "", "copy_array"], [73, 0, 1, "", "empty_like"], [73, 0, 1, "", "from_dlpack"], [73, 0, 1, "", "frombuffer"], [73, 0, 1, "", "full_like"], [73, 0, 1, "", "linspace"], [73, 0, 1, "", "logspace"], [73, 0, 1, "", "meshgrid"], [73, 0, 1, "", "native_array"], [73, 0, 1, "", "one_hot"], [73, 0, 1, "", "ones_like"], [73, 0, 1, "", "static_frombuffer"], [73, 0, 1, "", "static_triu_indices"], [73, 0, 1, "", "tril"], [73, 0, 1, "", "triu"], [73, 0, 1, "", "triu_indices"], [73, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[74, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_astype"], [74, 0, 1, "", "_static_broadcast_arrays"], [74, 0, 1, "", "_static_broadcast_to"], [74, 0, 1, "", "_static_can_cast"], [74, 0, 1, "", "_static_default_complex_dtype"], [74, 0, 1, "", "_static_default_float_dtype"], [74, 0, 1, "", "_static_dtype"], [74, 0, 1, "", "_static_finfo"], [74, 0, 1, "", "_static_function_supported_dtypes"], [74, 0, 1, "", "_static_function_unsupported_dtypes"], [74, 0, 1, "", "_static_iinfo"], [74, 0, 1, "", "_static_is_bool_dtype"], [74, 0, 1, "", "_static_is_complex_dtype"], [74, 0, 1, "", "_static_is_float_dtype"], [74, 0, 1, "", "_static_is_int_dtype"], [74, 0, 1, "", "_static_is_uint_dtype"], [74, 0, 1, "", "_static_result_type"], [74, 0, 1, "", "astype"], [74, 0, 1, "", "broadcast_arrays"], [74, 0, 1, "", "broadcast_to"], [74, 0, 1, "", "can_cast"], [74, 0, 1, "", "dtype"], [74, 0, 1, "", "finfo"], [74, 0, 1, "", "iinfo"], [74, 0, 1, "", "is_bool_dtype"], [74, 0, 1, "", "is_complex_dtype"], [74, 0, 1, "", "is_float_dtype"], [74, 0, 1, "", "is_int_dtype"], [74, 0, 1, "", "is_uint_dtype"], [74, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[75, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_dev"], [75, 0, 1, "", "_static_to_device"], [75, 0, 1, "", "dev"], [75, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[76, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_abs"], [76, 0, 1, "", "_static_acos"], [76, 0, 1, "", "_static_acosh"], [76, 0, 1, "", "_static_add"], [76, 0, 1, "", "_static_asin"], [76, 0, 1, "", "_static_asinh"], [76, 0, 1, "", "_static_atan"], [76, 0, 1, "", "_static_atan2"], [76, 0, 1, "", "_static_atanh"], [76, 0, 1, "", "_static_bitwise_and"], [76, 0, 1, "", "_static_bitwise_invert"], [76, 0, 1, "", "_static_bitwise_left_shift"], [76, 0, 1, "", "_static_bitwise_or"], [76, 0, 1, "", "_static_bitwise_right_shift"], [76, 0, 1, "", "_static_bitwise_xor"], [76, 0, 1, "", "_static_ceil"], [76, 0, 1, "", "_static_cos"], [76, 0, 1, "", "_static_cosh"], [76, 0, 1, "", "_static_deg2rad"], [76, 0, 1, "", "_static_divide"], [76, 0, 1, "", "_static_equal"], [76, 0, 1, "", "_static_erf"], [76, 0, 1, "", "_static_exp"], [76, 0, 1, "", "_static_expm1"], [76, 0, 1, "", "_static_floor"], [76, 0, 1, "", "_static_floor_divide"], [76, 0, 1, "", "_static_greater"], [76, 0, 1, "", "_static_greater_equal"], [76, 0, 1, "", "_static_isfinite"], [76, 0, 1, "", "_static_isinf"], [76, 0, 1, "", "_static_isnan"], [76, 0, 1, "", "_static_isreal"], [76, 0, 1, "", "_static_lcm"], [76, 0, 1, "", "_static_less"], [76, 0, 1, "", "_static_less_equal"], [76, 0, 1, "", "_static_log"], [76, 0, 1, "", "_static_log10"], [76, 0, 1, "", "_static_log1p"], [76, 0, 1, "", "_static_log2"], [76, 0, 1, "", "_static_logaddexp"], [76, 0, 1, "", "_static_logical_and"], [76, 0, 1, "", "_static_logical_not"], [76, 0, 1, "", "_static_logical_or"], [76, 0, 1, "", "_static_logical_xor"], [76, 0, 1, "", "_static_maximum"], [76, 0, 1, "", "_static_minimum"], [76, 0, 1, "", "_static_multiply"], [76, 0, 1, "", "_static_negative"], [76, 0, 1, "", "_static_not_equal"], [76, 0, 1, "", "_static_positive"], [76, 0, 1, "", "_static_pow"], [76, 0, 1, "", "_static_rad2deg"], [76, 0, 1, "", "_static_reciprocal"], [76, 0, 1, "", "_static_remainder"], [76, 0, 1, "", "_static_round"], [76, 0, 1, "", "_static_sign"], [76, 0, 1, "", "_static_sin"], [76, 0, 1, "", "_static_sinh"], [76, 0, 1, "", "_static_sqrt"], [76, 0, 1, "", "_static_square"], [76, 0, 1, "", "_static_subtract"], [76, 0, 1, "", "_static_tan"], [76, 0, 1, "", "_static_tanh"], [76, 0, 1, "", "_static_trapz"], [76, 0, 1, "", "_static_trunc"], [76, 0, 1, "", "_static_trunc_divide"], [76, 0, 1, "", "abs"], [76, 0, 1, "", "acos"], [76, 0, 1, "", "acosh"], [76, 0, 1, "", "add"], [76, 0, 1, "", "angle"], [76, 0, 1, "", "asin"], [76, 0, 1, "", "asinh"], [76, 0, 1, "", "atan"], [76, 0, 1, "", "atan2"], [76, 0, 1, "", "atanh"], [76, 0, 1, "", "bitwise_and"], [76, 0, 1, "", "bitwise_invert"], [76, 0, 1, "", "bitwise_left_shift"], [76, 0, 1, "", "bitwise_or"], [76, 0, 1, "", "bitwise_right_shift"], [76, 0, 1, "", "bitwise_xor"], [76, 0, 1, "", "ceil"], [76, 0, 1, "", "cos"], [76, 0, 1, "", "cosh"], [76, 0, 1, "", "deg2rad"], [76, 0, 1, "", "divide"], [76, 0, 1, "", "equal"], [76, 0, 1, "", "erf"], [76, 0, 1, "", "exp"], [76, 0, 1, "", "exp2"], [76, 0, 1, "", "expm1"], [76, 0, 1, "", "floor"], [76, 0, 1, "", "floor_divide"], [76, 0, 1, "", "fmin"], [76, 0, 1, "", "gcd"], [76, 0, 1, "", "greater"], [76, 0, 1, "", "greater_equal"], [76, 0, 1, "", "imag"], [76, 0, 1, "", "isfinite"], [76, 0, 1, "", "isinf"], [76, 0, 1, "", "isnan"], [76, 0, 1, "", "isreal"], [76, 0, 1, "", "lcm"], [76, 0, 1, "", "less"], [76, 0, 1, "", "less_equal"], [76, 0, 1, "", "log"], [76, 0, 1, "", "log10"], [76, 0, 1, "", "log1p"], [76, 0, 1, "", "log2"], [76, 0, 1, "", "logaddexp"], [76, 0, 1, "", "logaddexp2"], [76, 0, 1, "", "logical_and"], [76, 0, 1, "", "logical_not"], [76, 0, 1, "", "logical_or"], [76, 0, 1, "", "logical_xor"], [76, 0, 1, "", "maximum"], [76, 0, 1, "", "minimum"], [76, 0, 1, "", "multiply"], [76, 0, 1, "", "nan_to_num"], [76, 0, 1, "", "negative"], [76, 0, 1, "", "not_equal"], [76, 0, 1, "", "positive"], [76, 0, 1, "", "pow"], [76, 0, 1, "", "rad2deg"], [76, 0, 1, "", "real"], [76, 0, 1, "", "reciprocal"], [76, 0, 1, "", "remainder"], [76, 0, 1, "", "round"], [76, 0, 1, "", "sign"], [76, 0, 1, "", "sin"], [76, 0, 1, "", "sinh"], [76, 0, 1, "", "sqrt"], [76, 0, 1, "", "square"], [76, 0, 1, "", "static_angle"], [76, 0, 1, "", "static_exp2"], [76, 0, 1, "", "static_fmin"], [76, 0, 1, "", "static_gcd"], [76, 0, 1, "", "static_imag"], [76, 0, 1, "", "static_logaddexp2"], [76, 0, 1, "", "static_nan_to_num"], [76, 0, 1, "", "static_real"], [76, 0, 1, "", "subtract"], [76, 0, 1, "", "tan"], [76, 0, 1, "", "tanh"], [76, 0, 1, "", "trapz"], [76, 0, 1, "", "trunc"], [76, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[77, 3, 0, "-", "activations"], [77, 3, 0, "-", "conversions"], [77, 3, 0, "-", "creation"], [77, 3, 0, "-", "data_type"], [77, 3, 0, "-", "device"], [77, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "general"], [77, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [77, 3, 0, "-", "layers"], [77, 3, 0, "-", "linear_algebra"], [77, 3, 0, "-", "losses"], [77, 3, 0, "-", "manipulation"], [77, 3, 0, "-", "norms"], [77, 3, 0, "-", "random"], [77, 3, 0, "-", "searching"], [77, 3, 0, "-", "set"], [77, 3, 0, "-", "sorting"], [77, 3, 0, "-", "statistical"], [77, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[77, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_elu"], [77, 0, 1, "", "_static_silu"], [77, 0, 1, "", "elu"], [77, 0, 1, "", "logit"], [77, 0, 1, "", "logsigmoid"], [77, 0, 1, "", "prelu"], [77, 0, 1, "", "relu6"], [77, 0, 1, "", "selu"], [77, 0, 1, "", "silu"], [77, 0, 1, "", "static_logit"], [77, 0, 1, "", "static_logsigmoid"], [77, 0, 1, "", "static_prelu"], [77, 0, 1, "", "static_relu6"], [77, 0, 1, "", "static_selu"], [77, 0, 1, "", "static_thresholded_relu"], [77, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[77, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[77, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_trilu"], [77, 0, 1, "", "blackman_window"], [77, 0, 1, "", "eye_like"], [77, 0, 1, "", "hamming_window"], [77, 0, 1, "", "hann_window"], [77, 0, 1, "", "kaiser_bessel_derived_window"], [77, 0, 1, "", "kaiser_window"], [77, 0, 1, "", "mel_weight_matrix"], [77, 0, 1, "", "static_blackman_window"], [77, 0, 1, "", "static_eye_like"], [77, 0, 1, "", "static_hamming_window"], [77, 0, 1, "", "static_hann_window"], [77, 0, 1, "", "static_kaiser_bessel_derived_window"], [77, 0, 1, "", "static_kaiser_window"], [77, 0, 1, "", "static_mel_weight_matrix"], [77, 0, 1, "", "static_tril_indices"], [77, 0, 1, "", "static_unsorted_segment_min"], [77, 0, 1, "", "static_unsorted_segment_sum"], [77, 0, 1, "", "static_vorbis_window"], [77, 0, 1, "", "tril_indices"], [77, 0, 1, "", "trilu"], [77, 0, 1, "", "unsorted_segment_min"], [77, 0, 1, "", "unsorted_segment_sum"], [77, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[77, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[77, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[77, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "allclose"], [77, 0, 1, "", "binarizer"], [77, 0, 1, "", "conj"], [77, 0, 1, "", "copysign"], [77, 0, 1, "", "count_nonzero"], [77, 0, 1, "", "diff"], [77, 0, 1, "", "digamma"], [77, 0, 1, "", "fix"], [77, 0, 1, "", "float_power"], [77, 0, 1, "", "fmax"], [77, 0, 1, "", "fmod"], [77, 0, 1, "", "frexp"], [77, 0, 1, "", "gradient"], [77, 0, 1, "", "hypot"], [77, 0, 1, "", "isclose"], [77, 0, 1, "", "ldexp"], [77, 0, 1, "", "lerp"], [77, 0, 1, "", "modf"], [77, 0, 1, "", "nansum"], [77, 0, 1, "", "nextafter"], [77, 0, 1, "", "signbit"], [77, 0, 1, "", "sinc"], [77, 0, 1, "", "sparsify_tensor"], [77, 0, 1, "", "static_allclose"], [77, 0, 1, "", "static_binarizer"], [77, 0, 1, "", "static_conj"], [77, 0, 1, "", "static_copysign"], [77, 0, 1, "", "static_count_nonzero"], [77, 0, 1, "", "static_diff"], [77, 0, 1, "", "static_digamma"], [77, 0, 1, "", "static_fix"], [77, 0, 1, "", "static_float_power"], [77, 0, 1, "", "static_fmax"], [77, 0, 1, "", "static_fmod"], [77, 0, 1, "", "static_frexp"], [77, 0, 1, "", "static_gradient"], [77, 0, 1, "", "static_hypot"], [77, 0, 1, "", "static_isclose"], [77, 0, 1, "", "static_ldexp"], [77, 0, 1, "", "static_lerp"], [77, 0, 1, "", "static_modf"], [77, 0, 1, "", "static_nansum"], [77, 0, 1, "", "static_nextafter"], [77, 0, 1, "", "static_signbit"], [77, 0, 1, "", "static_sinc"], [77, 0, 1, "", "static_sparsify_tensor"], [77, 0, 1, "", "static_xlogy"], [77, 0, 1, "", "static_zeta"], [77, 0, 1, "", "xlogy"], [77, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[77, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_reduce"], [77, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[77, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[77, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[77, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fft"], [77, 0, 1, "", "adaptive_avg_pool1d"], [77, 0, 1, "", "adaptive_avg_pool2d"], [77, 0, 1, "", "adaptive_max_pool2d"], [77, 0, 1, "", "avg_pool1d"], [77, 0, 1, "", "avg_pool2d"], [77, 0, 1, "", "avg_pool3d"], [77, 0, 1, "", "dct"], [77, 0, 1, "", "dft"], [77, 0, 1, "", "embedding"], [77, 0, 1, "", "fft"], [77, 0, 1, "", "idct"], [77, 0, 1, "", "ifft"], [77, 0, 1, "", "ifftn"], [77, 0, 1, "", "interpolate"], [77, 0, 1, "", "max_pool1d"], [77, 0, 1, "", "max_pool2d"], [77, 0, 1, "", "max_pool3d"], [77, 0, 1, "", "rfftn"], [77, 0, 1, "", "static_adaptive_avg_pool1d"], [77, 0, 1, "", "static_adaptive_avg_pool2d"], [77, 0, 1, "", "static_adaptive_max_pool2d"], [77, 0, 1, "", "static_avg_pool1d"], [77, 0, 1, "", "static_avg_pool2d"], [77, 0, 1, "", "static_avg_pool3d"], [77, 0, 1, "", "static_dct"], [77, 0, 1, "", "static_dft"], [77, 0, 1, "", "static_embedding"], [77, 0, 1, "", "static_idct"], [77, 0, 1, "", "static_ifft"], [77, 0, 1, "", "static_ifftn"], [77, 0, 1, "", "static_interpolate"], [77, 0, 1, "", "static_max_pool1d"], [77, 0, 1, "", "static_max_pool2d"], [77, 0, 1, "", "static_max_pool3d"], [77, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "adjoint"], [77, 0, 1, "", "cond"], [77, 0, 1, "", "diagflat"], [77, 0, 1, "", "dot"], [77, 0, 1, "", "eig"], [77, 0, 1, "", "eigh_tridiagonal"], [77, 0, 1, "", "eigvals"], [77, 0, 1, "", "initialize_tucker"], [77, 0, 1, "", "kron"], [77, 0, 1, "", "make_svd_non_negative"], [77, 0, 1, "", "matrix_exp"], [77, 0, 1, "", "mode_dot"], [77, 0, 1, "", "multi_dot"], [77, 0, 1, "", "multi_mode_dot"], [77, 0, 1, "", "partial_tucker"], [77, 0, 1, "", "static_adjoint"], [77, 0, 1, "", "static_cond"], [77, 0, 1, "", "static_diagflat"], [77, 0, 1, "", "static_dot"], [77, 0, 1, "", "static_eig"], [77, 0, 1, "", "static_eigh_tridiagonal"], [77, 0, 1, "", "static_eigvals"], [77, 0, 1, "", "static_initialize_tucker"], [77, 0, 1, "", "static_kron"], [77, 0, 1, "", "static_make_svd_non_negative"], [77, 0, 1, "", "static_matrix_exp"], [77, 0, 1, "", "static_mode_dot"], [77, 0, 1, "", "static_multi_dot"], [77, 0, 1, "", "static_multi_mode_dot"], [77, 0, 1, "", "static_partial_tucker"], [77, 0, 1, "", "static_svd_flip"], [77, 0, 1, "", "static_truncated_svd"], [77, 0, 1, "", "static_tucker"], [77, 0, 1, "", "svd_flip"], [77, 0, 1, "", "truncated_svd"], [77, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[77, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_huber_loss"], [77, 0, 1, "", "_static_l1_loss"], [77, 0, 1, "", "_static_smooth_l1_loss"], [77, 0, 1, "", "_static_soft_margin_loss"], [77, 0, 1, "", "huber_loss"], [77, 0, 1, "", "l1_loss"], [77, 0, 1, "", "smooth_l1_loss"], [77, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[77, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fill_diagonal"], [77, 0, 1, "", "_static_unique_consecutive"], [77, 0, 1, "", "as_strided"], [77, 0, 1, "", "associative_scan"], [77, 0, 1, "", "atleast_1d"], [77, 0, 1, "", "atleast_2d"], [77, 0, 1, "", "atleast_3d"], [77, 0, 1, "", "broadcast_shapes"], [77, 0, 1, "", "concat_from_sequence"], [77, 0, 1, "", "dsplit"], [77, 0, 1, "", "dstack"], [77, 0, 1, "", "expand"], [77, 0, 1, "", "fill_diagonal"], [77, 0, 1, "", "flatten"], [77, 0, 1, "", "fliplr"], [77, 0, 1, "", "flipud"], [77, 0, 1, "", "fold"], [77, 0, 1, "", "heaviside"], [77, 0, 1, "", "hsplit"], [77, 0, 1, "", "hstack"], [77, 0, 1, "", "i0"], [77, 0, 1, "", "matricize"], [77, 0, 1, "", "moveaxis"], [77, 0, 1, "", "pad"], [77, 0, 1, "", "partial_fold"], [77, 0, 1, "", "partial_tensor_to_vec"], [77, 0, 1, "", "partial_unfold"], [77, 0, 1, "", "partial_vec_to_tensor"], [77, 0, 1, "", "rot90"], [77, 0, 1, "", "soft_thresholding"], [77, 0, 1, "", "static_as_strided"], [77, 0, 1, "", "static_atleast_1d"], [77, 0, 1, "", "static_atleast_2d"], [77, 0, 1, "", "static_atleast_3d"], [77, 0, 1, "", "static_broadcast_shapes"], [77, 0, 1, "", "static_concat_from_sequence"], [77, 0, 1, "", "static_dsplit"], [77, 0, 1, "", "static_dstack"], [77, 0, 1, "", "static_expand"], [77, 0, 1, "", "static_flatten"], [77, 0, 1, "", "static_fliplr"], [77, 0, 1, "", "static_flipud"], [77, 0, 1, "", "static_fold"], [77, 0, 1, "", "static_heaviside"], [77, 0, 1, "", "static_hsplit"], [77, 0, 1, "", "static_hstack"], [77, 0, 1, "", "static_i0"], [77, 0, 1, "", "static_matricize"], [77, 0, 1, "", "static_moveaxis"], [77, 0, 1, "", "static_pad"], [77, 0, 1, "", "static_partial_fold"], [77, 0, 1, "", "static_partial_tensor_to_vec"], [77, 0, 1, "", "static_partial_unfold"], [77, 0, 1, "", "static_partial_vec_to_tensor"], [77, 0, 1, "", "static_rot90"], [77, 0, 1, "", "static_soft_thresholding"], [77, 0, 1, "", "static_take_along_axis"], [77, 0, 1, "", "static_top_k"], [77, 0, 1, "", "static_unfold"], [77, 0, 1, "", "static_vsplit"], [77, 0, 1, "", "static_vstack"], [77, 0, 1, "", "take_along_axis"], [77, 0, 1, "", "top_k"], [77, 0, 1, "", "unfold"], [77, 0, 1, "", "unique_consecutive"], [77, 0, 1, "", "vsplit"], [77, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[77, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "batch_norm"], [77, 0, 1, "", "group_norm"], [77, 0, 1, "", "instance_norm"], [77, 0, 1, "", "l1_normalize"], [77, 0, 1, "", "l2_normalize"], [77, 0, 1, "", "lp_normalize"], [77, 0, 1, "", "static_batch_norm"], [77, 0, 1, "", "static_group_norm"], [77, 0, 1, "", "static_instance_norm"], [77, 0, 1, "", "static_l1_normalize"], [77, 0, 1, "", "static_l2_normalize"], [77, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[77, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "bernoulli"], [77, 0, 1, "", "beta"], [77, 0, 1, "", "dirichlet"], [77, 0, 1, "", "gamma"], [77, 0, 1, "", "poisson"], [77, 0, 1, "", "static_bernoulli"], [77, 0, 1, "", "static_beta"], [77, 0, 1, "", "static_dirichlet"], [77, 0, 1, "", "static_gamma"], [77, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[77, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "static_unravel_index"], [77, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[77, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[77, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "invert_permutation"], [77, 0, 1, "", "lexsort"], [77, 0, 1, "", "static_invert_permutation"], [77, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[77, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_cummax"], [77, 0, 1, "", "_static_cummin"], [77, 0, 1, "", "bincount"], [77, 0, 1, "", "corrcoef"], [77, 0, 1, "", "cov"], [77, 0, 1, "", "cummax"], [77, 0, 1, "", "cummin"], [77, 0, 1, "", "histogram"], [77, 0, 1, "", "igamma"], [77, 0, 1, "", "median"], [77, 0, 1, "", "nanmean"], [77, 0, 1, "", "nanmedian"], [77, 0, 1, "", "nanprod"], [77, 0, 1, "", "quantile"], [77, 0, 1, "", "static_bincount"], [77, 0, 1, "", "static_corrcoef"], [77, 0, 1, "", "static_cov"], [77, 0, 1, "", "static_histogram"], [77, 0, 1, "", "static_igamma"], [77, 0, 1, "", "static_median"], [77, 0, 1, "", "static_nanmean"], [77, 0, 1, "", "static_nanmedian"], [77, 0, 1, "", "static_nanprod"], [77, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[77, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "optional_get_element"], [77, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[78, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_all_equal"], [78, 0, 1, "", "_static_array_equal"], [78, 0, 1, "", "_static_assert_supports_inplace"], [78, 0, 1, "", "_static_clip_matrix_norm"], [78, 0, 1, "", "_static_clip_vector_norm"], [78, 0, 1, "", "_static_einops_rearrange"], [78, 0, 1, "", "_static_einops_reduce"], [78, 0, 1, "", "_static_einops_repeat"], [78, 0, 1, "", "_static_exists"], [78, 0, 1, "", "_static_fourier_encode"], [78, 0, 1, "", "_static_gather"], [78, 0, 1, "", "_static_gather_nd"], [78, 0, 1, "", "_static_get_num_dims"], [78, 0, 1, "", "_static_has_nans"], [78, 0, 1, "", "_static_inplace_decrement"], [78, 0, 1, "", "_static_inplace_increment"], [78, 0, 1, "", "_static_inplace_update"], [78, 0, 1, "", "_static_is_array"], [78, 0, 1, "", "_static_is_ivy_array"], [78, 0, 1, "", "_static_is_native_array"], [78, 0, 1, "", "_static_scatter_flat"], [78, 0, 1, "", "_static_scatter_nd"], [78, 0, 1, "", "_static_stable_divide"], [78, 0, 1, "", "_static_stable_pow"], [78, 0, 1, "", "_static_supports_inplace_updates"], [78, 0, 1, "", "_static_to_list"], [78, 0, 1, "", "_static_to_numpy"], [78, 0, 1, "", "_static_to_scalar"], [78, 0, 1, "", "_static_value_is_nan"], [78, 0, 1, "", "all_equal"], [78, 0, 1, "", "array_equal"], [78, 0, 1, "", "assert_supports_inplace"], [78, 0, 1, "", "clip_matrix_norm"], [78, 0, 1, "", "clip_vector_norm"], [78, 0, 1, "", "einops_rearrange"], [78, 0, 1, "", "einops_reduce"], [78, 0, 1, "", "einops_repeat"], [78, 0, 1, "", "exists"], [78, 0, 1, "", "fourier_encode"], [78, 0, 1, "", "gather"], [78, 0, 1, "", "gather_nd"], [78, 0, 1, "", "get_num_dims"], [78, 0, 1, "", "has_nans"], [78, 0, 1, "", "inplace_decrement"], [78, 0, 1, "", "inplace_increment"], [78, 0, 1, "", "inplace_update"], [78, 0, 1, "", "is_array"], [78, 0, 1, "", "is_ivy_array"], [78, 0, 1, "", "is_native_array"], [78, 0, 1, "", "isin"], [78, 0, 1, "", "itemsize"], [78, 0, 1, "", "scatter_flat"], [78, 0, 1, "", "scatter_nd"], [78, 0, 1, "", "stable_divide"], [78, 0, 1, "", "stable_pow"], [78, 0, 1, "", "static_isin"], [78, 0, 1, "", "static_itemsize"], [78, 0, 1, "", "static_strides"], [78, 0, 1, "", "strides"], [78, 0, 1, "", "supports_inplace_updates"], [78, 0, 1, "", "to_list"], [78, 0, 1, "", "to_numpy"], [78, 0, 1, "", "to_scalar"], [78, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[79, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_stop_gradient"], [79, 0, 1, "", "adam_step"], [79, 0, 1, "", "adam_update"], [79, 0, 1, "", "gradient_descent_update"], [79, 0, 1, "", "lamb_update"], [79, 0, 1, "", "lars_update"], [79, 0, 1, "", "optimizer_update"], [79, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[80, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[81, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_conv1d"], [81, 0, 1, "", "_static_conv1d_transpose"], [81, 0, 1, "", "_static_conv2d"], [81, 0, 1, "", "_static_conv2d_transpose"], [81, 0, 1, "", "_static_conv3d"], [81, 0, 1, "", "_static_conv3d_transpose"], [81, 0, 1, "", "_static_depthwise_conv2d"], [81, 0, 1, "", "_static_dropout"], [81, 0, 1, "", "_static_dropout1d"], [81, 0, 1, "", "_static_dropout2d"], [81, 0, 1, "", "_static_dropout3d"], [81, 0, 1, "", "_static_linear"], [81, 0, 1, "", "_static_lstm_update"], [81, 0, 1, "", "_static_multi_head_attention"], [81, 0, 1, "", "_static_reduce_window"], [81, 0, 1, "", "_static_scaled_dot_product_attention"], [81, 0, 1, "", "conv1d"], [81, 0, 1, "", "conv1d_transpose"], [81, 0, 1, "", "conv2d"], [81, 0, 1, "", "conv2d_transpose"], [81, 0, 1, "", "conv3d"], [81, 0, 1, "", "conv3d_transpose"], [81, 0, 1, "", "depthwise_conv2d"], [81, 0, 1, "", "dropout"], [81, 0, 1, "", "dropout1d"], [81, 0, 1, "", "dropout2d"], [81, 0, 1, "", "dropout3d"], [81, 0, 1, "", "linear"], [81, 0, 1, "", "lstm_update"], [81, 0, 1, "", "multi_head_attention"], [81, 0, 1, "", "reduce_window"], [81, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[82, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_cholesky"], [82, 0, 1, "", "_static_cross"], [82, 0, 1, "", "_static_det"], [82, 0, 1, "", "_static_diag"], [82, 0, 1, "", "_static_diagonal"], [82, 0, 1, "", "_static_eigh"], [82, 0, 1, "", "_static_eigvalsh"], [82, 0, 1, "", "_static_inner"], [82, 0, 1, "", "_static_inv"], [82, 0, 1, "", "_static_matmul"], [82, 0, 1, "", "_static_matrix_norm"], [82, 0, 1, "", "_static_matrix_power"], [82, 0, 1, "", "_static_matrix_rank"], [82, 0, 1, "", "_static_matrix_transpose"], [82, 0, 1, "", "_static_outer"], [82, 0, 1, "", "_static_pinv"], [82, 0, 1, "", "_static_qr"], [82, 0, 1, "", "_static_slogdet"], [82, 0, 1, "", "_static_solve"], [82, 0, 1, "", "_static_svd"], [82, 0, 1, "", "_static_svdvals"], [82, 0, 1, "", "_static_tensordot"], [82, 0, 1, "", "_static_tensorsolve"], [82, 0, 1, "", "_static_trace"], [82, 0, 1, "", "_static_vander"], [82, 0, 1, "", "_static_vecdot"], [82, 0, 1, "", "_static_vector_norm"], [82, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [82, 0, 1, "", "cholesky"], [82, 0, 1, "", "cross"], [82, 0, 1, "", "det"], [82, 0, 1, "", "diag"], [82, 0, 1, "", "diagonal"], [82, 0, 1, "", "eigh"], [82, 0, 1, "", "eigvalsh"], [82, 0, 1, "", "general_inner_product"], [82, 0, 1, "", "inner"], [82, 0, 1, "", "inv"], [82, 0, 1, "", "matmul"], [82, 0, 1, "", "matrix_norm"], [82, 0, 1, "", "matrix_power"], [82, 0, 1, "", "matrix_rank"], [82, 0, 1, "", "matrix_transpose"], [82, 0, 1, "", "outer"], [82, 0, 1, "", "pinv"], [82, 0, 1, "", "qr"], [82, 0, 1, "", "slogdet"], [82, 0, 1, "", "solve"], [82, 0, 1, "", "static_general_inner_product"], [82, 0, 1, "", "svd"], [82, 0, 1, "", "svdvals"], [82, 0, 1, "", "tensordot"], [82, 0, 1, "", "tensorsolve"], [82, 0, 1, "", "trace"], [82, 0, 1, "", "vander"], [82, 0, 1, "", "vecdot"], [82, 0, 1, "", "vector_norm"], [82, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[83, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_binary_cross_entropy"], [83, 0, 1, "", "_static_cross_entropy"], [83, 0, 1, "", "_static_sparse_cross_entropy"], [83, 0, 1, "", "binary_cross_entropy"], [83, 0, 1, "", "cross_entropy"], [83, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[84, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_clip"], [84, 0, 1, "", "_static_concat"], [84, 0, 1, "", "_static_constant_pad"], [84, 0, 1, "", "_static_expand_dims"], [84, 0, 1, "", "_static_flip"], [84, 0, 1, "", "_static_permute_dims"], [84, 0, 1, "", "_static_repeat"], [84, 0, 1, "", "_static_reshape"], [84, 0, 1, "", "_static_roll"], [84, 0, 1, "", "_static_split"], [84, 0, 1, "", "_static_squeeze"], [84, 0, 1, "", "_static_stack"], [84, 0, 1, "", "_static_swapaxes"], [84, 0, 1, "", "_static_tile"], [84, 0, 1, "", "_static_unstack"], [84, 0, 1, "", "_static_zero_pad"], [84, 0, 1, "", "clip"], [84, 0, 1, "", "concat"], [84, 0, 1, "", "constant_pad"], [84, 0, 1, "", "expand_dims"], [84, 0, 1, "", "flip"], [84, 0, 1, "", "permute_dims"], [84, 0, 1, "", "repeat"], [84, 0, 1, "", "reshape"], [84, 0, 1, "", "roll"], [84, 0, 1, "", "split"], [84, 0, 1, "", "squeeze"], [84, 0, 1, "", "stack"], [84, 0, 1, "", "swapaxes"], [84, 0, 1, "", "tile"], [84, 0, 1, "", "unstack"], [84, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[85, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[86, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_multinomial"], [86, 0, 1, "", "_static_randint"], [86, 0, 1, "", "_static_random_normal"], [86, 0, 1, "", "_static_random_uniform"], [86, 0, 1, "", "_static_shuffle"], [86, 0, 1, "", "multinomial"], [86, 0, 1, "", "randint"], [86, 0, 1, "", "random_normal"], [86, 0, 1, "", "random_uniform"], [86, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[87, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_argmax"], [87, 0, 1, "", "_static_argmin"], [87, 0, 1, "", "_static_argwhere"], [87, 0, 1, "", "_static_nonzero"], [87, 0, 1, "", "_static_where"], [87, 0, 1, "", "argmax"], [87, 0, 1, "", "argmin"], [87, 0, 1, "", "argwhere"], [87, 0, 1, "", "nonzero"], [87, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[88, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_unique_all"], [88, 0, 1, "", "_static_unique_counts"], [88, 0, 1, "", "_static_unique_inverse"], [88, 0, 1, "", "_static_unique_values"], [88, 0, 1, "", "unique_all"], [88, 0, 1, "", "unique_counts"], [88, 0, 1, "", "unique_inverse"], [88, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[89, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_argsort"], [89, 0, 1, "", "_static_searchsorted"], [89, 0, 1, "", "_static_sort"], [89, 0, 1, "", "argsort"], [89, 0, 1, "", "msort"], [89, 0, 1, "", "searchsorted"], [89, 0, 1, "", "sort"], [89, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[90, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_cumprod"], [90, 0, 1, "", "_static_cumsum"], [90, 0, 1, "", "_static_prod"], [90, 0, 1, "", "_static_sum"], [90, 0, 1, "", "_static_var"], [90, 0, 1, "", "cumprod"], [90, 0, 1, "", "cumsum"], [90, 0, 1, "", "einsum"], [90, 0, 1, "", "max"], [90, 0, 1, "", "mean"], [90, 0, 1, "", "min"], [90, 0, 1, "", "prod"], [90, 0, 1, "", "std"], [90, 0, 1, "", "sum"], [90, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[91, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_all"], [91, 0, 1, "", "_static_any"], [91, 0, 1, "", "all"], [91, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[92, 2, 1, "", "_wrap_function"], [92, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[93, 3, 0, "-", "base"], [94, 3, 0, "-", "cp_tensor"], [95, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[93, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "mode_dot"], [93, 0, 1, "", "norm"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "cp_copy"], [94, 0, 1, "", "cp_flip_sign"], [94, 0, 1, "", "cp_lstsq_grad"], [94, 0, 1, "", "cp_mode_dot"], [94, 0, 1, "", "cp_n_param"], [94, 0, 1, "", "cp_norm"], [94, 0, 1, "", "cp_normalize"], [94, 0, 1, "", "cp_to_tensor"], [94, 0, 1, "", "cp_to_unfolded"], [94, 0, 1, "", "cp_to_vec"], [94, 0, 1, "", "mode_dot"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "norm"], [94, 0, 1, "", "normalize"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "unfolding_dot_khatri_rao"], [94, 0, 1, "", "validate_cp_rank"], [94, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, 1, 1, "", "TuckerTensor"], [95, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "mode_dot"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tucker_copy"], [95, 0, 1, "", "tucker_mode_dot"], [95, 0, 1, "", "tucker_n_param"], [95, 0, 1, "", "tucker_normalize"], [95, 0, 1, "", "tucker_to_tensor"], [95, 0, 1, "", "tucker_to_unfolded"], [95, 0, 1, "", "tucker_to_vec"], [95, 0, 1, "", "validate_tucker_rank"], [95, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[100, 3, 0, "-", "base"], [101, 3, 0, "-", "elementwise"], [99, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[100, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "broadcast_shapes"], [100, 5, 1, "", "data"], [100, 5, 1, "", "device"], [100, 5, 1, "", "dtype"], [100, 5, 1, "", "inner_shape"], [100, 5, 1, "", "ndim"], [100, 0, 1, "", "nested_array"], [100, 5, 1, "", "nested_rank"], [100, 0, 1, "", "ragged_map"], [100, 0, 1, "", "ragged_multi_map"], [100, 0, 1, "", "ragged_multi_map_in_function"], [100, 0, 1, "", "replace_ivy_arrays"], [100, 5, 1, "", "shape"], [100, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[101, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[99, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[99, 0, 1, "", "__init__"], [99, 0, 1, "", "from_row_lengths"], [99, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[583, 3, 0, "-", "activations"], [584, 3, 0, "-", "constants"], [585, 3, 0, "-", "control_flow_ops"], [586, 3, 0, "-", "creation"], [587, 3, 0, "-", "data_type"], [588, 3, 0, "-", "device"], [589, 3, 0, "-", "elementwise"], [590, 3, 0, "-", "experimental"], [591, 3, 0, "-", "general"], [592, 3, 0, "-", "gradients"], [593, 3, 0, "-", "layers"], [594, 3, 0, "-", "linear_algebra"], [595, 3, 0, "-", "losses"], [596, 3, 0, "-", "manipulation"], [597, 3, 0, "-", "meta"], [598, 3, 0, "-", "nest"], [599, 3, 0, "-", "norms"], [600, 3, 0, "-", "random"], [601, 3, 0, "-", "searching"], [602, 3, 0, "-", "set"], [603, 3, 0, "-", "sorting"], [604, 3, 0, "-", "statistical"], [605, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[347, 3, 0, "-", "activations"], [348, 3, 0, "-", "constants"], [349, 3, 0, "-", "creation"], [350, 3, 0, "-", "data_type"], [351, 3, 0, "-", "device"], [352, 3, 0, "-", "elementwise"], [353, 3, 0, "-", "general"], [354, 3, 0, "-", "gradients"], [355, 3, 0, "-", "layers"], [356, 3, 0, "-", "linear_algebra"], [357, 3, 0, "-", "losses"], [358, 3, 0, "-", "manipulation"], [359, 3, 0, "-", "meta"], [360, 3, 0, "-", "nest"], [361, 3, 0, "-", "norms"], [362, 3, 0, "-", "random"], [363, 3, 0, "-", "searching"], [364, 3, 0, "-", "set"], [365, 3, 0, "-", "sorting"], [366, 3, 0, "-", "sparse_array"], [367, 3, 0, "-", "statistical"], [368, 3, 0, "-", "utility"]], "ivy.stateful": [[728, 3, 0, "-", "activations"], [729, 3, 0, "-", "converters"], [730, 3, 0, "-", "helpers"], [731, 3, 0, "-", "initializers"], [732, 3, 0, "-", "layers"], [733, 3, 0, "-", "losses"], [734, 3, 0, "-", "module"], [735, 3, 0, "-", "norms"], [736, 3, 0, "-", "optimizers"], [737, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[728, 1, 1, "", "ELU"], [728, 1, 1, "", "GEGLU"], [728, 1, 1, "", "GELU"], [728, 1, 1, "", "Hardswish"], [728, 1, 1, "", "LeakyReLU"], [728, 1, 1, "", "LogSigmoid"], [728, 1, 1, "", "LogSoftmax"], [728, 1, 1, "", "Logit"], [728, 1, 1, "", "Mish"], [728, 1, 1, "", "PReLU"], [728, 1, 1, "", "ReLU"], [728, 1, 1, "", "ReLU6"], [728, 1, 1, "", "SeLU"], [728, 1, 1, "", "SiLU"], [728, 1, 1, "", "Sigmoid"], [728, 1, 1, "", "Softmax"], [728, 1, 1, "", "Softplus"], [728, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[728, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[728, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[729, 1, 1, "", "ModuleConverters"], [729, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[729, 0, 1, "", "from_flax_module"], [729, 0, 1, "", "from_haiku_module"], [729, 0, 1, "", "from_keras_module"], [729, 0, 1, "", "from_paddle_module"], [729, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[730, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[730, 0, 1, "", "check_submod_rets"], [730, 0, 1, "", "get_mod_key"], [730, 0, 1, "", "mod_depth"], [730, 0, 1, "", "mod_height"], [730, 0, 1, "", "mod_with_top_mod_key_chain"], [730, 0, 1, "", "show_mod_in_top_mod"], [730, 0, 1, "", "show_structure"], [730, 0, 1, "", "show_v_in_top_v"], [730, 0, 1, "", "sub_mods"], [730, 0, 1, "", "track_submod_call_order"], [730, 0, 1, "", "track_submod_rets"], [730, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[731, 1, 1, "", "Constant"], [731, 1, 1, "", "FirstLayerSiren"], [731, 1, 1, "", "GlorotUniform"], [731, 1, 1, "", "Initializer"], [731, 1, 1, "", "KaimingNormal"], [731, 1, 1, "", "Ones"], [731, 1, 1, "", "RandomNormal"], [731, 1, 1, "", "Siren"], [731, 1, 1, "", "Uniform"], [731, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[731, 0, 1, "", "__init__"], [731, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[731, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[731, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[731, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[731, 0, 1, "", "__init__"], [731, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[731, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[731, 0, 1, "", "__init__"], [731, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[731, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[731, 0, 1, "", "__init__"], [731, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[732, 1, 1, "", "AdaptiveAvgPool1d"], [732, 1, 1, "", "AdaptiveAvgPool2d"], [732, 1, 1, "", "AvgPool1D"], [732, 1, 1, "", "AvgPool2D"], [732, 1, 1, "", "AvgPool3D"], [732, 1, 1, "", "Conv1D"], [732, 1, 1, "", "Conv1DTranspose"], [732, 1, 1, "", "Conv2D"], [732, 1, 1, "", "Conv2DTranspose"], [732, 1, 1, "", "Conv3D"], [732, 1, 1, "", "Conv3DTranspose"], [732, 1, 1, "", "Dct"], [732, 1, 1, "", "DepthwiseConv2D"], [732, 1, 1, "", "Dropout"], [732, 1, 1, "", "Embedding"], [732, 1, 1, "", "FFT"], [732, 1, 1, "", "Identity"], [732, 1, 1, "", "LSTM"], [732, 1, 1, "", "Linear"], [732, 1, 1, "", "MaxPool1D"], [732, 1, 1, "", "MaxPool2D"], [732, 1, 1, "", "MaxPool3D"], [732, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[732, 0, 1, "", "__init__"], [732, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[732, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[733, 1, 1, "", "BinaryCrossEntropyLoss"], [733, 1, 1, "", "CrossEntropyLoss"], [733, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[733, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[733, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[733, 0, 1, "", "__init__"]], "ivy.stateful.module": [[734, 1, 1, "", "Module"], [734, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[734, 0, 1, "", "__call__"], [734, 0, 1, "", "__init__"], [734, 0, 1, "", "build"], [734, 5, 1, "", "build_mode"], [734, 5, 1, "", "built_"], [734, 0, 1, "", "compile"], [734, 0, 1, "", "eval"], [734, 0, 1, "", "load"], [734, 0, 1, "", "register_buffer"], [734, 0, 1, "", "save"], [734, 0, 1, "", "save_weights"], [734, 0, 1, "", "show_graph"], [734, 0, 1, "", "train"]], "ivy.stateful.norms": [[735, 1, 1, "", "BatchNorm2D"], [735, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[735, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[735, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[736, 1, 1, "", "Adam"], [736, 1, 1, "", "LAMB"], [736, 1, 1, "", "LARS"], [736, 1, 1, "", "Optimizer"], [736, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[736, 0, 1, "", "__init__"], [736, 0, 1, "", "set_state"], [736, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[736, 0, 1, "", "__init__"], [736, 0, 1, "", "set_state"], [736, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[736, 0, 1, "", "__init__"], [736, 0, 1, "", "set_state"], [736, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[736, 0, 1, "", "__init__"], [736, 0, 1, "", "set_state"], [736, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[736, 0, 1, "", "__init__"], [736, 0, 1, "", "set_state"], [736, 5, 1, "", "state"]], "ivy.stateful.sequential": [[737, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[737, 0, 1, "", "__init__"]], "ivy.utils": [[738, 3, 0, "-", "assertions"], [739, 3, 0, "-", "backend"], [743, 3, 0, "-", "dynamic_import"], [744, 3, 0, "-", "einsum_parser"], [745, 3, 0, "-", "exceptions"], [746, 3, 0, "-", "inspection"], [747, 3, 0, "-", "logging"], [748, 3, 0, "-", "profiler"], [749, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[738, 2, 1, "", "check_all"], [738, 2, 1, "", "check_all_or_any_fn"], [738, 2, 1, "", "check_any"], [738, 2, 1, "", "check_dev_correct_formatting"], [738, 2, 1, "", "check_dimensions"], [738, 2, 1, "", "check_elem_in_list"], [738, 2, 1, "", "check_equal"], [738, 2, 1, "", "check_exists"], [738, 2, 1, "", "check_false"], [738, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [738, 2, 1, "", "check_gather_input_valid"], [738, 2, 1, "", "check_gather_nd_input_valid"], [738, 2, 1, "", "check_greater"], [738, 2, 1, "", "check_inplace_sizes_valid"], [738, 2, 1, "", "check_isinstance"], [738, 2, 1, "", "check_kernel_padding_size"], [738, 2, 1, "", "check_less"], [738, 2, 1, "", "check_one_way_broadcastable"], [738, 2, 1, "", "check_same_dtype"], [738, 2, 1, "", "check_shape"], [738, 2, 1, "", "check_shapes_broadcastable"], [738, 2, 1, "", "check_true"], [738, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[740, 3, 0, "-", "ast_helpers"], [741, 3, 0, "-", "handler"], [742, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[740, 1, 1, "", "ImportTransformer"], [740, 1, 1, "", "IvyLoader"], [740, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[740, 0, 1, "", "__init__"], [740, 0, 1, "", "impersonate_import"], [740, 0, 1, "", "visit_Import"], [740, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[740, 0, 1, "", "__init__"], [740, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[740, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[741, 1, 1, "", "ContextManager"], [741, 2, 1, "", "choose_random_backend"], [741, 2, 1, "", "convert_from_numpy_to_target_backend"], [741, 2, 1, "", "convert_from_source_backend_to_numpy"], [741, 2, 1, "", "current_backend"], [741, 2, 1, "", "fn_name_from_version_specific_fn_name"], [741, 2, 1, "", "prevent_access_locally"], [741, 2, 1, "", "previous_backend"], [741, 2, 1, "", "set_backend"], [741, 2, 1, "", "set_backend_to_specific_version"], [741, 2, 1, "", "set_jax_backend"], [741, 2, 1, "", "set_mxnet_backend"], [741, 2, 1, "", "set_numpy_backend"], [741, 2, 1, "", "set_paddle_backend"], [741, 2, 1, "", "set_tensorflow_backend"], [741, 2, 1, "", "set_torch_backend"], [741, 2, 1, "", "unset_backend"], [741, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[741, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[742, 2, 1, "", "available_sub_backends"], [742, 2, 1, "", "clear_sub_backends"], [742, 2, 1, "", "find_available_sub_backends"], [742, 2, 1, "", "set_sub_backend"], [742, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[743, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[744, 2, 1, "", "convert_interleaved_input"], [744, 2, 1, "", "convert_subscripts"], [744, 2, 1, "", "find_output_shape"], [744, 2, 1, "", "find_output_str"], [744, 2, 1, "", "gen_unused_symbols"], [744, 2, 1, "", "get_symbol"], [744, 2, 1, "", "has_valid_einsum_chars_only"], [744, 2, 1, "", "is_valid_einsum_char"], [744, 2, 1, "", "legalise_einsum_expr"], [744, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[745, 7, 1, "", "InplaceUpdateException"], [745, 7, 1, "", "InvalidBackendException"], [745, 7, 1, "", "IvyAttributeError"], [745, 7, 1, "", "IvyBackendException"], [745, 7, 1, "", "IvyBroadcastShapeError"], [745, 7, 1, "", "IvyDeviceError"], [745, 7, 1, "", "IvyDtypePromotionError"], [745, 7, 1, "", "IvyError"], [745, 7, 1, "", "IvyException"], [745, 7, 1, "", "IvyIndexError"], [745, 7, 1, "", "IvyNotImplementedException"], [745, 7, 1, "", "IvyValueError"], [745, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[745, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[745, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[746, 2, 1, "", "add_array_specs"], [746, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[747, 2, 1, "", "set_logging_mode"], [747, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[748, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[748, 0, 1, "", "__init__"], [748, 4, 1, "", "print_stats"], [748, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[749, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 28, 45, 784, 789, 804, 809], "compil": [0, 21, 23, 24, 28, 29, 31, 33, 34, 35, 41, 784, 789, 801, 806, 808, 809], "api": [0, 1, 2, 19, 28, 29, 750, 756, 760, 764, 765, 775, 780, 784, 786, 788, 789, 797, 800, 807, 809], "us": [0, 2, 8, 10, 16, 24, 27, 44, 46, 750, 753, 756, 757, 760, 775, 778, 787, 793], "eager": [0, 23, 33], "v": [0, 23, 33, 36, 771, 792, 797], "lazi": [0, 23, 33], "arrai": [0, 96, 99, 122, 366, 760, 761, 765, 772, 786, 797, 800], "cach": 0, "gener": [0, 55, 78, 353, 591, 775, 779, 782], "state": [0, 19, 28, 29, 788, 792], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 5, 8, 10, 17, 36, 750, 752, 768, 772, 775, 778, 782], "set": [1, 10, 36, 40, 41, 65, 88, 364, 602, 750, 757, 762, 781], "up": [1, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 750, 757], "ivi": [1, 2, 6, 7, 8, 10, 16, 19, 27, 28, 29, 40, 41, 43, 44, 46, 750, 752, 756, 758, 761, 763, 765, 768, 770, 775, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 791, 809], "folder": 1, "kei": 1, "issu": [1, 756, 758, 771], "question": 1, "transpil": [2, 13, 14, 15, 22, 23, 24, 25, 26, 28, 29, 32, 33, 34, 35, 36, 42, 46, 750, 789], "function": [2, 8, 19, 28, 29, 40, 41, 42, 44, 46, 103, 756, 764, 766, 767, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 784, 789, 792], "librari": [2, 25, 28, 29, 44, 46, 752, 791], "modul": [2, 7, 734, 766, 767, 788], "unifi": [2, 20, 23, 24, 30, 33, 34, 35, 40, 750, 786, 798, 805, 809], "demo": [3, 5, 6, 7, 17, 28, 42, 43], "creat": [3, 40, 41, 756], "notebook": 3, "TO": 4, "replac": 4, "titl": 4, "alexnet": 6, "instal": [6, 7, 10, 19, 40, 41, 43, 750, 793], "data": [6, 7, 8, 10, 19, 28, 40, 51, 74, 102, 350, 587, 602, 704, 705, 706, 707, 766, 777, 779, 787, 792], "prepar": [6, 7, 8, 10], "infer": [6, 7, 8, 10, 774], "torch": [6, 7, 8, 10, 36, 43, 803, 804], "tensorflow": [6, 7, 8, 15, 36, 43, 44, 45, 803], "jax": [6, 7, 8, 9, 11, 36, 43, 803], "appendix": [6, 8], "code": [6, 19, 20, 21, 22, 29, 40, 771, 780], "implement": [6, 8, 765, 775, 777, 798], "bert": 7, "dependeci": 7, "import": [7, 8, 10, 19, 40, 41, 44, 743], "sequenc": [7, 772], "classif": 7, "model": [7, 8, 9, 10, 11, 13, 14, 15, 26, 27, 28, 29, 40, 41, 42, 43, 44, 46, 789, 792], "imag": [8, 10, 57, 80, 252, 753, 763], "segment": 8, "unet": 8, "custom": [8, 761, 763, 775, 787, 792], "preprocess": 8, "load": [8, 10, 724, 787], "visualis": [8, 10], "initi": [8, 10, 731, 788], "nativ": [8, 10, 761, 782], "pretrain": [8, 10], "weight": [8, 10, 787], "mask": 8, "your": [8, 10, 758, 779], "backend": [8, 19, 28, 40, 41, 43, 44, 739, 742, 750, 756, 762, 766, 775, 780, 784, 792], "acceler": [9, 11], "mmpretrain": 9, "resnet": [10, 47], "label": 10, "resnet34": 10, "classifi": 10, "resnet50": 10, "pytorch": [11, 13, 42, 803], "guid": [12, 17], "build": [13, 14, 15, 44, 753, 763, 784], "top": [13, 14, 15, 765], "round": [13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 282], "haiku": 14, "develop": 16, "convolut": 16, "network": [16, 41, 44, 787, 789], "tutori": [17, 44], "And": 17, "learn": [17, 18, 803], "basic": [17, 18, 40, 41, 758, 777], "write": [19, 27, 777, 779], "content": [19, 42], "handler": [19, 28, 741, 742, 784], "structur": [19, 28, 763, 775, 792], "how": [24, 763, 779], "decor": [24, 35, 770, 774, 779], "ani": [25, 26, 28, 29, 723], "odsc": 28, "framework": [28, 34, 40, 726, 750, 775, 778, 785, 803, 806, 809, 810], "quickstart": 29, "get": [29, 758, 793], "familiar": 29, "0": [30, 31, 32, 33, 37, 38], "1": [31, 33, 34, 35, 36, 39, 46, 803], "2": [32, 35, 37, 46, 803], "select": 34, "As": 35, "3": [36, 38, 39, 46], "dynam": [36, 44, 743, 762, 792], "static": 36, "todo": [36, 758], "explain": 36, "via": 36, "why": [36, 779, 798], "mode": [36, 766, 770, 781], "i": [36, 750, 763, 782], "true": 36, "default": [36, 502], "when": [36, 750], "from": [36, 43, 750, 793], "numpi": [36, 43, 777, 803], "fals": 36, "kornia": 37, "perceiv": 38, "stabl": 39, "diffus": 39, "oper": [40, 772, 781, 786, 792], "ml": [40, 796, 805, 809], "chang": 40, "one": 40, "line": [40, 758], "No": [40, 757, 798], "need": [40, 779], "worri": 40, "about": 40, "type": [40, 51, 74, 350, 587, 766, 773, 777, 792], "differ": 40, "them": 40, "all": [40, 722], "standalon": [40, 773], "defin": [40, 41, 42, 44], "optim": [40, 736, 788], "input": [40, 41, 772], "target": 40, "loss": [40, 60, 83, 357, 595, 733], "train": [40, 42, 44], "loop": [40, 44], "sampl": 41, "check": [41, 771, 792], "result": 41, "simpl": 41, "neural": 41, "deepmind": [42, 43], "": [42, 44, 756, 763], "perceiverio": [42, 43], "tabl": [42, 763], "construct": [42, 787], "some": 42, "helper": [42, 730, 740, 778, 779, 780], "pipelin": [42, 44, 763, 765, 779, 792], "dataset": [42, 44], "download": 42, "dataload": 42, "test": [42, 757, 758, 760, 765, 778, 779], "gpu": [43, 792], "introduct": [43, 46, 752, 777, 778], "python3": 43, "8": 43, "setup": [43, 771], "kernel": 43, "clone": [43, 757, 765], "repo": [43, 757], "ivy_model": 43, "run": [43, 758, 760, 763, 779], "end": 44, "let": 44, "we": [44, 779], "ar": 44, "mnist": 44, "thi": 44, "temporari": 44, "loader": 44, "util": [44, 68, 91, 368, 605, 727], "plot": 44, "metric": 44, "save": [44, 725, 787], "huggingfac": 45, "deit": 45, "can": 45, "visual": 45, "displai": 45, "html": 45, "file": 45, "browser": [45, 758], "To": [46, 758], "interfac": 46, "telemetri": 46, "18": 47, "activ": [48, 70, 347, 583, 728], "convers": [49, 72, 774], "creation": [50, 73, 349, 586], "devic": [52, 75, 351, 588, 767, 772, 777], "elementwis": [53, 76, 101, 352, 589], "experiment": [54, 77, 590, 756], "gradient": [56, 79, 331, 354, 592, 775], "layer": [58, 81, 355, 593, 732], "linear": [59, 82, 356, 594, 617], "algebra": [59, 82, 356, 594], "manipul": [61, 84, 358, 596], "norm": [62, 85, 361, 599, 735], "random": [63, 86, 362, 600], "search": [64, 87, 363, 601], "sort": [66, 89, 365, 603, 711], "statist": [67, 90, 367, 604], "wrap": [69, 92, 774], "base": [71, 93, 100], "cp": 94, "tensor": [94, 95, 98], "tucker": [95, 419], "contain": [97, 758, 764, 787], "factor": 98, "nest": [99, 360, 598], "class": [102, 726, 761, 770, 777, 786], "gelu": 104, "hardswish": 105, "leaky_relu": 106, "log_softmax": 107, "mish": 108, "relu": 109, "sigmoid": 110, "softmax": 111, "softplu": 112, "softsign": 113, "cast_bool": 114, "cmp_i": 115, "cmp_isnot": 116, "for_loop": 117, "if_els": 118, "try_except": 119, "while_loop": 120, "arang": 121, "asarrai": 123, "asarray_handle_nest": 124, "asarray_infer_devic": 125, "asarray_infer_dtyp": 126, "asarray_inputs_to_native_shap": 127, "asarray_to_native_arrays_and_back": 128, "copy_arrai": 129, "empti": 130, "empty_lik": 131, "ey": 132, "from_dlpack": 133, "note": [133, 586], "frombuff": 134, "full": [135, 778], "full_lik": 136, "linspac": 137, "logspac": 138, "meshgrid": 139, "native_arrai": 140, "one_hot": 141, "ones": 142, "ones_lik": 143, "tril": 144, "triu": 145, "triu_indic": 146, "zero": 147, "zeros_lik": 148, "as_ivy_dtyp": 149, "as_native_dtyp": 150, "astyp": 151, "broadcast_arrai": 152, "broadcast_to": 153, "can_cast": 154, "check_float": 155, "closest_valid_dtyp": 156, "default_complex_dtyp": 157, "default_dtyp": 158, "default_float_dtyp": 159, "default_int_dtyp": 160, "default_uint_dtyp": 161, "dtype": [162, 772], "dtype_bit": 163, "finfo": 164, "function_supported_dtyp": 165, "function_unsupported_dtyp": 166, "iinfo": 167, "infer_default_dtyp": 168, "invalid_dtyp": 169, "is_bool_dtyp": 170, "is_complex_dtyp": 171, "is_float_dtyp": 172, "is_hashable_dtyp": 173, "is_int_dtyp": 174, "is_native_dtyp": 175, "is_uint_dtyp": 176, "promote_typ": 177, "promote_types_of_input": 178, "result_typ": 179, "set_default_complex_dtyp": 180, "set_default_dtyp": 181, "set_default_float_dtyp": 182, "set_default_int_dtyp": 183, "set_default_uint_dtyp": 184, "type_promote_arrai": 185, "unset_default_complex_dtyp": 186, "unset_default_dtyp": 187, "unset_default_float_dtyp": 188, "unset_default_int_dtyp": 189, "unset_default_uint_dtyp": 190, "valid_dtyp": 191, "as_ivy_dev": 192, "as_native_dev": 193, "clear_cached_mem_on_dev": 194, "default_devic": 195, "dev": 196, "dev_util": 197, "function_supported_devic": 198, "function_unsupported_devic": 199, "get_all_ivy_arrays_on_dev": 200, "gpu_is_avail": 201, "handle_soft_device_vari": 202, "num_cpu_cor": 203, "num_gpu": 204, "num_ivy_arrays_on_dev": 205, "percent_used_mem_on_dev": 206, "print_all_ivy_arrays_on_dev": 207, "set_default_devic": 208, "set_soft_device_mod": 209, "paramet": [209, 536, 537, 542, 543, 545, 546, 588, 591, 781], "set_split_factor": 210, "split_factor": 211, "split_func_cal": 212, "to_devic": 213, "total_mem_on_dev": 214, "tpu_is_avail": 215, "unset_default_devic": 216, "unset_soft_device_mod": 217, "used_mem_on_dev": 218, "ab": 219, "aco": 220, "acosh": 221, "add": [222, 768, 778, 809], "angl": 223, "asin": 224, "asinh": 225, "atan": 226, "atan2": 227, "atanh": 228, "bitwise_and": 229, "bitwise_invert": 230, "bitwise_left_shift": 231, "bitwise_or": 232, "bitwise_right_shift": 233, "bitwise_xor": 234, "ceil": 235, "co": 236, "cosh": 237, "deg2rad": 238, "divid": 239, "equal": 240, "erf": 241, "exp": 242, "exp2": 243, "expm1": 244, "floor": 245, "floor_divid": 246, "fmin": 247, "fmod": 248, "gcd": 249, "greater": 250, "greater_equ": 251, "isfinit": 253, "isinf": 254, "isnan": 255, "isreal": 256, "lcm": 257, "less": 258, "less_equ": 259, "log": [260, 747, 757], "log10": 261, "log1p": 262, "log2": 263, "logaddexp": 264, "logaddexp2": 265, "logical_and": 266, "logical_not": 267, "logical_or": 268, "logical_xor": 269, "maximum": 270, "minimum": 271, "multipli": 272, "nan_to_num": 273, "neg": 274, "not_equ": 275, "posit": [276, 772], "pow": 277, "rad2deg": 278, "real": 279, "reciproc": 280, "remaind": 281, "sign": 283, "sin": 284, "sinh": 285, "sqrt": 286, "squar": 287, "subtract": 288, "tan": [289, 768, 778], "tanh": 290, "trapz": 291, "trunc": 292, "trunc_divid": 293, "elu": 294, "logit": 295, "logsigmoid": 296, "prelu": 297, "relu6": 298, "selu": 299, "sequence_length": 300, "silu": 301, "thresholded_relu": 302, "blackman_window": 303, "eye_lik": 304, "hamming_window": 305, "hann_window": 306, "indic": 307, "kaiser_bessel_derived_window": 308, "kaiser_window": 309, "mel_weight_matrix": 310, "ndenumer": 311, "ndindex": 312, "random_cp": 313, "random_tuck": 314, "tril_indic": 315, "trilu": 316, "unsorted_segment_min": 317, "unsorted_segment_sum": 318, "vorbis_window": 319, "allclos": 320, "binar": 321, "conj": 322, "copysign": 323, "count_nonzero": 324, "diff": 325, "digamma": 326, "fix": 327, "float_pow": 328, "fmax": 329, "frexp": 330, "hypot": 332, "isclos": 333, "ldexp": 334, "lerp": 335, "lgamma": 336, "modf": 337, "nansum": 338, "nextaft": 339, "signbit": 340, "sinc": 341, "sparsify_tensor": 342, "xlogi": 343, "zeta": 344, "reduc": 345, "bind_custom_gradient_funct": 346, "constant": [348, 584], "meta": [359, 597], "spars": 366, "adaptive_avg_pool1d": 369, "adaptive_avg_pool2d": 370, "adaptive_max_pool2d": 371, "area_interpol": 372, "avg_pool1d": 373, "avg_pool2d": 374, "avg_pool3d": 375, "dct": 376, "dft": 377, "dropout1d": 378, "dropout2d": 379, "dropout3d": 380, "embed": 381, "fft": 382, "fft2": 383, "generate_einsum_equ": 384, "get_interpolate_kernel": 385, "idct": 386, "ifft": 387, "ifftn": 388, "interp": 389, "interpol": 390, "max_pool1d": 391, "max_pool2d": 392, "max_pool3d": 393, "max_unpool1d": 394, "nearest_interpol": 395, "pool": 396, "reduce_window": 397, "rfftn": 398, "adjoint": 399, "cond": 400, "diagflat": 401, "dot": 402, "eig": [403, 626], "eigh_tridiagon": 404, "eigval": 405, "general_inner_product": 406, "initialize_tuck": 407, "khatri_rao": 408, "kron": 409, "kroneck": 410, "make_svd_non_neg": 411, "matrix_exp": 412, "mode_dot": 413, "multi_dot": 414, "multi_mode_dot": 415, "partial_tuck": 416, "svd_flip": 417, "truncated_svd": 418, "huber_loss": 420, "l1_loss": 421, "log_poisson_loss": 422, "smooth_l1_loss": 423, "soft_margin_loss": 424, "as_strid": 425, "associative_scan": 426, "atleast_1d": 427, "atleast_2d": 428, "atleast_3d": 429, "broadcast_shap": 430, "choos": 431, "concat_from_sequ": 432, "dsplit": 433, "dstack": 434, "expand": 435, "fill_diagon": 436, "flatten": 437, "fliplr": 438, "flipud": 439, "fold": 440, "heavisid": 441, "hsplit": 442, "hstack": 443, "i0": 444, "matric": 445, "moveaxi": 446, "pad": 447, "partial_fold": 448, "partial_tensor_to_vec": 449, "partial_unfold": 450, "partial_vec_to_tensor": 451, "put_along_axi": 452, "rot90": 453, "soft_threshold": 454, "take_along_axi": 455, "top_k": 456, "unfold": 457, "unique_consecut": 458, "vsplit": 459, "vstack": 460, "batch_norm": 461, "group_norm": 462, "instance_norm": 463, "l1_normal": 464, "l2_normal": 465, "lp_normal": 466, "bernoulli": 467, "beta": 468, "dirichlet": 469, "gamma": 470, "poisson": 471, "unravel_index": 472, "invert_permut": 473, "lexsort": 474, "is_ivy_sparse_arrai": 475, "is_native_sparse_arrai": 476, "native_sparse_arrai": 477, "native_sparse_array_to_indices_values_and_shap": 478, "bincount": 479, "corrcoef": 480, "cov": 481, "cummax": 482, "cummin": 483, "histogram": 484, "igamma": 485, "median": 486, "nanmean": 487, "nanmedian": 488, "nanprod": 489, "quantil": 490, "optional_get_el": 491, "all_equ": 492, "arg_info": 493, "arg_nam": 494, "array_equ": 495, "assert_supports_inplac": 496, "cache_fn": 497, "clip_matrix_norm": 498, "clip_vector_norm": 499, "container_typ": 500, "current_backend_str": 501, "einops_rearrang": 503, "einops_reduc": 504, "einops_repeat": 505, "exist": [506, 753], "fourier_encod": 507, "function_supported_devices_and_dtyp": 508, "function_unsupported_devices_and_dtyp": 509, "gather": 510, "gather_nd": 511, "get_all_arrays_in_memori": 512, "get_item": 513, "get_num_dim": 514, "get_referrers_recurs": 515, "has_nan": 516, "inplace_arrays_support": 517, "inplace_decr": 518, "inplace_incr": 519, "inplace_upd": 520, "inplace_variables_support": 521, "is_arrai": 522, "is_ivy_arrai": 523, "is_ivy_contain": 524, "is_ivy_nested_arrai": 525, "is_native_arrai": 526, "isin": 527, "isscalar": 528, "items": 529, "match_kwarg": 530, "multiprocess": 531, "num_arrays_in_memori": 532, "print_all_arrays_in_memori": 533, "scatter_flat": 534, "scatter_nd": 535, "set_array_mod": 536, "set_exception_trace_mod": 537, "set_inplace_mod": 538, "set_item": 539, "set_min_bas": 540, "set_min_denomin": 541, "set_nestable_mod": 542, "set_precise_mod": 543, "set_queue_timeout": 544, "set_shape_array_mod": 545, "set_show_func_wrapper_trace_mod": 546, "set_tmp_dir": 547, "shape": [548, 602, 704, 705, 706, 707, 774, 792], "stable_divid": 549, "stable_pow": 550, "stride": 551, "supports_inplace_upd": 552, "to_ivy_shap": 553, "to_list": 554, "to_native_shap": 555, "to_numpi": 556, "to_scalar": 557, "try_else_non": 558, "unset_array_mod": 559, "unset_exception_trace_mod": 560, "unset_inplace_mod": 561, "unset_min_bas": 562, "unset_min_denomin": 563, "unset_nestable_mod": 564, "unset_precise_mod": 565, "unset_queue_timeout": 566, "unset_shape_array_mod": 567, "unset_show_func_wrapper_trace_mod": 568, "unset_tmp_dir": 569, "value_is_nan": 570, "vmap": 571, "adam_step": 572, "adam_upd": 573, "execute_with_gradi": [574, 775], "grad": 575, "gradient_descent_upd": 576, "jac": 577, "lamb_upd": 578, "lars_upd": 579, "optimizer_upd": 580, "stop_gradi": 581, "value_and_grad": 582, "control": [585, 792], "flow": [585, 792], "op": 585, "depend": [602, 704, 705, 706, 707], "output": [602, 704, 705, 706, 707], "conv": 606, "conv1d": 607, "conv1d_transpos": 608, "conv2d": 609, "conv2d_transpos": 610, "conv3d": 611, "conv3d_transpos": 612, "conv_general_dil": 613, "conv_general_transpos": 614, "depthwise_conv2d": 615, "dropout": 616, "lstm_updat": 618, "multi_head_attent": 619, "scaled_dot_product_attent": 620, "choleski": 621, "cross": 622, "det": 623, "diag": 624, "diagon": 625, "eigh": 627, "eigvalsh": 628, "inner": 629, "inv": 630, "lu_factor": 631, "matmul": 632, "matrix_norm": 633, "matrix_pow": 634, "matrix_rank": 635, "matrix_transpos": 636, "outer": 637, "pinv": 638, "qr": 639, "slogdet": 640, "solv": 641, "svd": 642, "svdval": 643, "tensordot": 644, "tensorsolv": 645, "trace": [646, 770], "vander": 647, "vecdot": 648, "vector_norm": 649, "vector_to_skew_symmetric_matrix": 650, "binary_cross_entropi": 651, "cross_entropi": 652, "sparse_cross_entropi": 653, "clip": 654, "concat": 655, "constant_pad": 656, "expand_dim": 657, "flip": 658, "permute_dim": 659, "repeat": 660, "reshap": 661, "roll": [662, 768], "split": 663, "squeez": 664, "stack": [665, 770], "swapax": 666, "tile": 667, "unstack": 668, "zero_pad": 669, "fomaml_step": 670, "maml_step": 671, "reptile_step": 672, "all_nested_indic": 673, "copy_nest": 674, "duplicate_array_index_chain": 675, "index_nest": 676, "insert_into_nest_at_index": 677, "insert_into_nest_at_indic": 678, "map": [679, 765], "map_nest_at_index": 680, "map_nest_at_indic": 681, "multi_index_nest": 682, "nested_ani": 683, "nested_argwher": 684, "nested_map": 685, "nested_multi_map": 686, "prune_empti": 687, "prune_nest_at_index": 688, "prune_nest_at_indic": 689, "set_nest_at_index": 690, "set_nest_at_indic": 691, "layer_norm": 692, "multinomi": 693, "randint": 694, "random_norm": 695, "random_uniform": 696, "seed": 697, "shuffl": 698, "argmax": 699, "argmin": 700, "argwher": 701, "nonzero": 702, "where": [703, 756], "unique_al": 704, "unique_count": 705, "unique_invers": 706, "unique_valu": 707, "argsort": 708, "msort": 709, "searchsort": 710, "cumprod": 712, "cumsum": 713, "einsum": [714, 744], "max": 715, "mean": 716, "min": 717, "prod": 718, "std": 719, "sum": 720, "var": 721, "convert": [729, 789], "sequenti": 737, "assert": [738, 770], "ast": 740, "sub": 742, "parser": 744, "except": [745, 770, 774], "inspect": 746, "profil": 748, "verbos": 749, "statu": 750, "ai": 750, "should": 750, "pip": [750, 793], "docker": [750, 753, 757, 758, 763, 793], "sourc": [750, 793], "multi": [750, 806, 809], "support": [750, 762, 766, 774, 777, 792], "document": 750, "contribut": [750, 751], "commun": 750, "citat": 750, "appli": [752, 791], "robot": [752, 791], "doc": [753, 763], "conveni": [753, 763, 773], "script": [753, 763], "hub": 753, "local": [753, 758, 771], "without": [753, 778], "error": [754, 770], "handl": [754, 761, 767, 770, 774, 792], "help": [755, 758], "resourc": 755, "open": 756, "task": 756, "format": [756, 771, 802, 809], "checklist": 756, "frontend": [756, 762, 777, 778, 789], "place": 756, "extend": [756, 779, 782], "an": [756, 775], "github": [756, 757], "templat": 756, "fork": [757, 758], "pre": [757, 771], "commit": [757, 758, 765, 771], "pycharm": [757, 758, 771], "virtual": 757, "environ": 757, "miniconda": 757, "venv": 757, "interpret": 757, "window": 757, "maco": 757, "ubuntu": 757, "more": [757, 782, 798], "detail": 757, "hypothesi": [757, 778, 779], "free": 757, "wsl": 757, "codespac": 757, "The": [758, 763, 775, 777, 786, 792, 797], "list": 758, "manag": 758, "who": 758, "ask": 758, "With": 758, "command": 758, "pull": [758, 765], "request": [758, 765], "small": 758, "often": 758, "interact": 758, "most": 758, "out": [758, 772, 774, 776], "id": [758, 760], "deep": 759, "dive": 759, "termin": 760, "regener": 760, "failur": 760, "skip": 760, "integr": [761, 765, 771, 779], "version": [762, 780, 792], "builder": 763, "being": 763, "option": 763, "index": 763, "rst": 763, "partial_conf": 763, "py": 763, "prebuild": 763, "sh": 763, "extens": [763, 790], "custom_autosummari": 763, "hide": 763, "discussion_link": 763, "skippable_funct": 763, "ivy_data": 763, "instanc": [764, 777, 778, 786], "method": [764, 777, 778, 786, 787], "special": [764, 777], "nestabl": [764, 772, 773, 774], "continu": [765, 771], "push": 765, "pr": 765, "trigger": 765, "A": [765, 782], "down": 765, "view": [765, 774, 776], "store": 765, "retriev": 765, "repositori": 765, "nitti": 765, "gritti": 765, "storag": 765, "space": 765, "unifyai": 765, "determin": 765, "coverag": 765, "workflow": 765, "multipl": 765, "runner": 765, "race": 765, "condit": 765, "period": 765, "manual": 765, "dispatch": 765, "ci": 765, "dashboard": 765, "promot": [766, 777], "argument": [766, 767, 772, 774, 776, 777], "other": [766, 767], "unsupport": 766, "bug": 766, "cast": [766, 777], "superset": [766, 782], "docstr": [768, 769], "configur": [770, 778, 787], "func_wrapp": 770, "prune": 770, "handle_except": 770, "consist": [770, 779], "lint": 771, "common": 771, "keyword": 772, "number": 772, "integ": 772, "primari": 773, "composit": 773, "mix": [773, 774, 779], "partial": [773, 774, 779], "order": 774, "wrapper": [774, 809, 810], "miscellan": 774, "overview": 775, "usag": [775, 782], "signatur": 775, "design": [775, 780, 783], "our": 775, "polici": [775, 777], "specif": [775, 807, 808, 809], "consider": 775, "inplac": 776, "updat": 776, "copi": 776, "short": 777, "unus": 777, "rule": 777, "duplic": [777, 782], "valu": 778, "alia": 778, "own": 779, "strategi": 779, "do": [779, 797], "effect": 779, "bonu": 779, "featur": 779, "self": 779, "explicit": 779, "test_array_funct": 779, "re": [779, 798], "fail": 779, "navig": 780, "categor": 780, "submodul": 780, "unpin": 780, "global": 781, "properti": 781, "getter": 781, "attribut": 781, "setter": 781, "set_": 781, "unset_": 781, "behaviour": 782, "standard": [782, 797, 800, 809], "what": [782, 809], "non": 782, "balanc": 782, "effici": 782, "maxim": 782, "block": 784, "monkei": 786, "patch": 786, "represent": 787, "recurs": 787, "built": 787, "ins": 787, "access": 787, "comparison": 787, "case": 787, "compartment": 787, "role": 789, "mechan": 791, "vision": 791, "gym": 791, "memori": 791, "faq": 792, "maintain": 792, "size": 792, "deploy": 792, "auto": 792, "differenti": 792, "replica": 792, "parallel": 792, "altern": 792, "start": 793, "glossari": 794, "motiv": 795, "explos": 796, "skeptic": 797, "complimentari": 797, "competit": 797, "work": [797, 799], "infinit": 798, "shelf": 798, "life": 798, "relat": 799, "infrastructur": [801, 809], "llvm": 801, "mlir": 801, "oneapi": 801, "exchang": [802, 809], "onnx": 802, "nnef": 802, "coreml": 802, "matlab": 803, "scipi": 803, "scikit": 803, "theano": 803, "panda": 803, "julia": 803, "apach": [803, 806], "spark": 803, "mllib": 803, "caff": 803, "chainer": 803, "mxnet": 803, "cntk": 803, "flux": 803, "dex": 803, "languag": 803, "tracer": [804, 809], "tf": 804, "jaxpr": 804, "jit": 804, "fx": 804, "compani": [805, 809], "quansight": 805, "modular": 805, "octoml": 805, "vendor": [806, 807, 808, 809], "tvm": 806, "xla": 806, "gcc": 806, "tensorrt": 807, "cuda": 807, "icc": 808, "icx": 808, "nvcc": 808, "doe": 809, "eagerpi": 810, "kera": 810, "thinc": 810, "tensorli": 810, "neuropod": 810}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"mish": [[108, "mish"]], "Activations": [[70, "module-ivy.data_classes.container.activations"], [728, "module-ivy.stateful.activations"], [48, "module-ivy.data_classes.array.activations"], [583, "activations"], [347, "activations"]], "Gradients": [[79, "module-ivy.data_classes.container.gradients"], [775, "gradients"], [56, "module-ivy.data_classes.array.gradients"], [592, "gradients"], [354, "gradients"]], "Cp tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Set": [[88, "module-ivy.data_classes.container.set"], [65, "module-ivy.data_classes.array.set"], [602, "set"], [364, "module-ivy.functional.ivy.experimental.set"]], "array": [[122, "array"]], "Data type": [[74, "module-ivy.data_classes.container.data_type"], [51, "module-ivy.data_classes.array.data_type"], [587, "data-type"], [350, "module-ivy.functional.ivy.experimental.data_type"]], "Norms": [[85, "module-ivy.data_classes.container.norms"], [735, "module-ivy.stateful.norms"], [62, "module-ivy.data_classes.array.norms"], [599, "norms"], [361, "norms"]], "cmp_isnot": [[116, "cmp-isnot"]], "Manipulation": [[84, "module-ivy.data_classes.container.manipulation"], [61, "module-ivy.data_classes.array.manipulation"], [596, "manipulation"], [358, "manipulation"]], "Base": [[71, "module-ivy.data_classes.container.base"], [100, "module-ivy.data_classes.nested_array.base"], [93, "module-ivy.data_classes.factorized_tensor.base"]], "Searching": [[87, "module-ivy.data_classes.container.searching"], [64, "module-ivy.data_classes.array.searching"], [601, "searching"], [363, "searching"]], "relu": [[109, "relu"]], "asarray": [[123, "asarray"]], "Creation": [[73, "module-ivy.data_classes.container.creation"], [50, "module-ivy.data_classes.array.creation"], [586, "creation"], [349, "creation"]], "Array": [[96, "array"]], "Layers": [[81, "module-ivy.data_classes.container.layers"], [732, "module-ivy.stateful.layers"], [58, "module-ivy.data_classes.array.layers"], [593, "layers"], [355, "layers"]], "Device": [[75, "module-ivy.data_classes.container.device"], [52, "module-ivy.data_classes.array.device"], [588, "device"], [351, "module-ivy.functional.ivy.experimental.device"]], "Random": [[86, "module-ivy.data_classes.container.random"], [63, "module-ivy.data_classes.array.random"], [600, "random"], [362, "random"]], "Data classes": [[102, "data-classes"]], "Utility": [[68, "module-ivy.data_classes.array.utility"], [91, "module-ivy.data_classes.container.utility"], [605, "utility"], [368, "utility"]], "Sorting": [[89, "module-ivy.data_classes.container.sorting"], [66, "module-ivy.data_classes.array.sorting"], [603, "sorting"], [365, "sorting"]], "Container": [[97, "container"]], "Elementwise": [[101, "module-ivy.data_classes.nested_array.elementwise"], [76, "module-ivy.data_classes.container.elementwise"], [53, "module-ivy.data_classes.array.elementwise"], [589, "elementwise"], [352, "elementwise"]], "Statistical": [[90, "module-ivy.data_classes.container.statistical"], [67, "module-ivy.data_classes.array.statistical"], [604, "statistical"], [367, "statistical"]], "log_softmax": [[107, "log-softmax"]], "for_loop": [[117, "for-loop"]], "softplus": [[112, "softplus"]], "while_loop": [[120, "while-loop"]], "arange": [[121, "arange"]], "cast_bool": [[114, "cast-bool"]], "cmp_is": [[115, "cmp-is"]], "Wrapping": [[69, "module-ivy.data_classes.array.wrapping"], [92, "module-ivy.data_classes.container.wrapping"]], "Linear algebra": [[82, "module-ivy.data_classes.container.linear_algebra"], [59, "module-ivy.data_classes.array.linear_algebra"], [594, "linear-algebra"], [356, "linear-algebra"]], "Functions": [[103, "functions"]], "Tucker tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "sigmoid": [[110, "sigmoid"]], "asarray_handle_nestable": [[124, "asarray-handle-nestable"]], "leaky_relu": [[106, "leaky-relu"]], "Factorized tensor": [[98, "factorized-tensor"]], "softsign": [[113, "softsign"]], "if_else": [[118, "if-else"]], "Image": [[80, "module-ivy.data_classes.container.image"], [57, "module-ivy.data_classes.array.image"]], "Experimental": [[77, "module-ivy.data_classes.container.experimental"], [54, "module-ivy.data_classes.array.experimental"], [590, "experimental"]], "Nested array": [[99, "nested-array"]], "Losses": [[83, "module-ivy.data_classes.container.losses"], [733, "module-ivy.stateful.losses"], [60, "module-ivy.data_classes.array.losses"], [595, "losses"], [357, "losses"]], "softmax": [[111, "softmax"]], "gelu": [[104, "gelu"]], "try_except": [[119, "try-except"]], "General": [[78, "module-ivy.data_classes.container.general"], [55, "module-ivy.data_classes.array.general"], [591, "general"], [353, "general"]], "Conversions": [[72, "module-ivy.data_classes.container.conversions"], [49, "module-ivy.data_classes.array.conversions"]], "asarray_infer_device": [[125, "asarray-infer-device"]], "hardswish": [[105, "hardswish"]], "Open Tasks": [[756, "open-tasks"]], "Function Formatting": [[756, "function-formatting"]], "Formatting checklist": [[756, "formatting-checklist"]], "Frontend APIs": [[756, "frontend-apis"]], "Where to place a frontend function": [[756, "where-to-place-a-frontend-function"]], "Frontend checklist": [[756, "frontend-checklist"]], "Ivy Experimental API": [[756, "ivy-experimental-api"]], "Extending the Ivy API": [[756, "extending-the-ivy-api"]], "Where to place a backend function": [[756, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[756, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Ivy as a Transpiler": [[789, "ivy-as-a-transpiler"], [29, "Ivy-as-a-Transpiler"], [28, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[789, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[789, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[789, "converting-network-models"]], "Superset Behaviour": [[782, "superset-behaviour"]], "Extending the Standard": [[782, "extending-the-standard"]], "What is the Superset?": [[782, "what-is-the-superset"]], "A Non-Duplicate Superset": [[782, "a-non-duplicate-superset"]], "What is not the Superset?": [[782, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[782, "balancing-generalization-with-efficiency"]], "More Examples": [[782, "more-examples"]], "Maximizing Usage of Native Functionality": [[782, "maximizing-usage-of-native-functionality"]], "Vendor-Specific Compilers": [[808, "vendor-specific-compilers"], [809, "vendor-specific-compilers"]], "ICC": [[808, "id1"]], "ICX": [[808, "icx"]], "NVCC": [[808, "nvcc"]], "Ivy Array": [[786, "ivy-array"], [761, "ivy-array"]], "The Array Class": [[786, "the-array-class"]], "Unifying Operators": [[786, "unifying-operators"]], "API Monkey Patching": [[786, "api-monkey-patching"]], "Instance Methods": [[786, "instance-methods"]], "Ivy Stateful API": [[788, "ivy-stateful-api"], [28, "Ivy-Stateful-API"], [19, "Ivy-Stateful-API"]], "Modules": [[788, "modules"]], "Initializers": [[788, "initializers"], [731, "module-ivy.stateful.initializers"]], "Optimizers": [[788, "optimizers"], [736, "module-ivy.stateful.optimizers"]], "Vendor-Specific APIs": [[807, "vendor-specific-apis"], [809, "vendor-specific-apis"]], "TensorRT tensorrt": [[807, "tensorrt-tensorrt"]], "CUDA cuda": [[807, "cuda-cuda"]], "Applied Libraries": [[791, "applied-libraries"], [752, "applied-libraries"]], "Ivy Mechanics": [[791, "ivy-mechanics"]], "Ivy Vision": [[791, "ivy-vision"]], "Ivy Robot": [[791, "ivy-robot"]], "Ivy Gym": [[791, "ivy-gym"]], "Ivy Memory": [[791, "ivy-memory"]], "Docstrings": [[769, "docstrings"]], "Function Arguments": [[772, "function-arguments"]], "Examples": [[772, "examples"], [750, "examples"], [2, "examples"], [0, "examples"]], "Positional and Keyword Arguments": [[772, "positional-and-keyword-arguments"]], "Input Arrays": [[772, "input-arrays"]], "out Argument": [[772, "out-argument"]], "dtype and device arguments": [[772, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[772, "numbers-in-operator-functions"]], "Integer Sequences": [[772, "integer-sequences"]], "Nestable Functions": [[772, "nestable-functions"], [773, "nestable-functions"], [764, "nestable-functions"]], "API Standards": [[800, "api-standards"], [809, "api-standards"]], "Array API Standard": [[800, "id1"]], "Wrapper Frameworks": [[810, "wrapper-frameworks"], [809, "wrapper-frameworks"]], "EagerPy eagerpy": [[810, "eagerpy-eagerpy"]], "Keras keras": [[810, "keras-keras"]], "Thinc thinc": [[810, "thinc-thinc"]], "TensorLy tensorly": [[810, "tensorly-tensorly"]], "NeuroPod": [[810, "id1"]], "Related Work": [[799, "related-work"]], "Exchange Formats": [[802, "exchange-formats"], [809, "exchange-formats"]], "ONNX onnx": [[802, "onnx-onnx"]], "NNEF nnef": [[802, "nnef-nnef"]], "CoreML coreml": [[802, "coreml-coreml"]], "Deep Dive": [[759, "deep-dive"]], "Motivation": [[795, "motivation"]], "Inplace Updates": [[776, "inplace-updates"]], "out argument": [[776, "out-argument"]], "copy argument": [[776, "copy-argument"]], "Views": [[776, "views"]], "Standardization": [[797, "standardization"]], "Skepticism": [[797, "skepticism"]], "Complimentary vs Competitive": [[797, "complimentary-vs-competitive"]], "Do Standards Work?": [[797, "do-standards-work"]], "The Array API Standard": [[797, "the-array-api-standard"]], "Ivy Tests": [[779, "ivy-tests"], [765, "ivy-tests"]], "Testing Pipeline": [[779, "testing-pipeline"]], "Hypothesis": [[779, "id1"]], "Data Generation": [[779, "id2"]], "Writing your own strategy": [[779, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[779, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[779, "ivy-test-decorators"]], "Writing Ivy Tests": [[779, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[779, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[779, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[779, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[779, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[779, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[779, "self-consistent-and-explicit-testing"]], "test_array_function": [[779, "id5"]], "Running Ivy Tests": [[779, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[779, "re-running-failed-ivy-tests"]], "Ivy as a Framework": [[785, "ivy-as-a-framework"], [28, "Ivy-as-a-Framework"]], "Data Types": [[766, "data-types"]], "Data Type Module": [[766, "data-type-module"]], "Data Type Promotion": [[766, "data-type-promotion"]], "Arguments in other Functions": [[766, "arguments-in-other-functions"], [767, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[766, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[766, "backend-data-type-bugs"]], "Data Type Casting Modes": [[766, "data-type-casting-modes"]], "Superset Data Type Support": [[766, "superset-data-type-support"]], "ML-Unifying Companies": [[805, "ml-unifying-companies"], [809, "ml-unifying-companies"]], "Quansight": [[805, "id1"]], "Modular": [[805, "id2"]], "OctoML": [[805, "id3"]], "Multi-Vendor Compiler Frameworks": [[806, "multi-vendor-compiler-frameworks"], [809, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[806, "apache-tvm"]], "XLA": [[806, "xla"]], "GCC": [[806, "gcc"]], "Formatting": [[771, "formatting"]], "Lint Checks": [[771, "lint-checks"], [771, "id2"]], "Setup Formatting Locally": [[771, "setup-formatting-locally"]], "Pre-commit": [[771, "pre-commit"]], "VS Code": [[771, "vs-code"]], "PyCharm": [[771, "pycharm"], [757, "pycharm"]], "Common Issues with Pre-Commit": [[771, "common-issues-with-pre-commit"]], "Continuous Integration": [[771, "continuous-integration"], [765, "continuous-integration"]], "Lint Formatting": [[771, "lint-formatting"]], "Graph Tracers": [[804, "graph-tracers"], [809, "graph-tracers"]], "tf.Graph": [[804, "tf-graph"]], "Jaxpr": [[804, "jaxpr"]], "torch.jit": [[804, "torch-jit"]], "torch.fx": [[804, "torch-fx"]], "Backend Setting": [[762, "backend-setting"]], "Dynamic Backend Setting": [[762, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[762, "backend-and-frontend-version-support"]], "Compiler Infrastructure": [[801, "compiler-infrastructure"], [809, "compiler-infrastructure"]], "LLVM": [[801, "id1"]], "MLIR": [[801, "id2"]], "OneAPI": [[801, "id3"]], "Glossary": [[794, "glossary"]], "Navigating the Code": [[780, "navigating-the-code"]], "Categorization": [[780, "categorization"]], "Submodule Design": [[780, "submodule-design"]], "Ivy API": [[780, "ivy-api"]], "Backend API": [[780, "backend-api"]], "Submodule Helper Functions": [[780, "submodule-helper-functions"]], "Version Unpinning": [[780, "version-unpinning"]], "Building Blocks": [[784, "building-blocks"]], "Backend Functional APIs \u2705": [[784, "backend-functional-apis"]], "Ivy Functional API \u2705": [[784, "ivy-functional-api"]], "Backend Handler \u2705": [[784, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[784, "graph-compiler"]], "The Basics": [[758, "the-basics"]], "Getting Help": [[758, "getting-help"]], "ToDo List Issues": [[758, "todo-list-issues"]], "Managing Your Fork": [[758, "managing-your-fork"]], "Who To Ask": [[758, "who-to-ask"]], "With Command Line:": [[758, "with-command-line"]], "With Browser:": [[758, "with-browser"]], "Pull Requests": [[758, "pull-requests"]], "Small Commits Often": [[758, "small-commits-often"]], "Interactive Ivy Docker Container": [[758, "interactive-ivy-docker-container"]], "Running Tests Locally": [[758, "running-tests-locally"]], "With Docker": [[758, "with-docker"]], "Getting the most out of IDE": [[758, "getting-the-most-out-of-ide"]], "with PyCharm": [[758, "with-pycharm"]], "Why Unify?": [[798, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[798, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[798, "infinite-shelf-life"]], "Array API Tests": [[760, "array-api-tests"], [765, "array-api-tests"]], "Running the Tests": [[760, "running-the-tests"]], "Using Terminal": [[760, "using-terminal"]], "Using the IDE": [[760, "using-the-ide"]], "Regenerating Test Failures": [[760, "regenerating-test-failures"]], "Test Skipping": [[760, "test-skipping"]], "Arrays": [[761, "arrays"]], "Native Array": [[761, "native-array"]], "Array Handling": [[761, "array-handling"]], "Integrating custom classes with Ivy": [[761, "integrating-custom-classes-with-ivy"]], "FAQ": [[792, "faq"]], "Maintaining Backend Versions": [[792, "maintaining-backend-versions"]], "Dynamic Sizes": [[792, "dynamic-sizes"]], "Type and Shape Checking": [[792, "type-and-shape-checking"]], "GPU handling": [[792, "gpu-handling"]], "Model Deployment": [[792, "model-deployment"]], "Dynamic Control Flow": [[792, "dynamic-control-flow"]], "Auto-Differentiation": [[792, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[792, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[792, "support-for-functions"]], "Alternative Data Structures": [[792, "alternative-data-structures"]], "Custom Operations": [[792, "custom-operations"]], "The Pipeline": [[792, "the-pipeline"]], "State": [[792, "state"]], "Ivy Frontends": [[777, "ivy-frontends"]], "Introduction": [[777, "introduction"], [778, "introduction"], [752, "introduction"], [43, "Introduction"]], "The Frontend Basics": [[777, "the-frontend-basics"]], "Writing Frontend Functions": [[777, "writing-frontend-functions"]], "Short Frontend Implementations": [[777, "short-frontend-implementations"]], "Unused Arguments": [[777, "unused-arguments"]], "Supported Data Types and Devices": [[777, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[777, "id6"]], "Frontend Data Type Promotion Rules": [[777, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[777, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[777, "frontends-duplicate-policy"]], "Function Wrapping": [[774, "function-wrapping"]], "Decorator order": [[774, "decorator-order"]], "Conversion Wrappers": [[774, "conversion-wrappers"]], "Inference Wrappers": [[774, "inference-wrappers"]], "Out Argument Support": [[774, "out-argument-support"]], "Nestable Support": [[774, "nestable-support"]], "Partial Mixed Function Support": [[774, "partial-mixed-function-support"]], "Shape Conversion": [[774, "shape-conversion"]], "View Handling": [[774, "view-handling"]], "Exception Handling": [[774, "exception-handling"], [770, "exception-handling"]], "Miscellaneous Wrappers": [[774, "miscellaneous-wrappers"]], "Ivy Container": [[787, "ivy-container"]], "Construction": [[787, "construction"]], "Representation": [[787, "representation"]], "Recursive Methods": [[787, "recursive-methods"]], "Built-ins": [[787, "built-ins"]], "Access": [[787, "access"]], "Saving and Loading": [[787, "saving-and-loading"]], "Comparisons": [[787, "comparisons"]], "Customized Representations": [[787, "customized-representations"]], "Use Cases": [[787, "use-cases"]], "Compartmentalization": [[787, "compartmentalization"]], "Configuration": [[787, "configuration"]], "Data loading": [[787, "data-loading"]], "Network weights": [[787, "network-weights"]], "Devices": [[767, "devices"]], "Device Module": [[767, "device-module"]], "Device handling": [[767, "device-handling"]], "Ivy Frontend Tests": [[778, "ivy-frontend-tests"]], "Frontend Test Examples": [[778, "frontend-test-examples"]], "ivy.tan()": [[778, "ivy-tan"]], "ivy.full()": [[778, "ivy-full"]], "Testing Without Using Tests Values": [[778, "testing-without-using-tests-values"]], "Alias functions": [[778, "alias-functions"]], "Frontend Instance Method Tests": [[778, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[778, "frontend-instance-method-test-examples"]], "ivy.add()": [[778, "ivy-add"]], "Hypothesis Helpers": [[778, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[778, "frontend-framework-testing-configuration"]], "Extensions": [[790, "extensions"]], "Ivy Exception Class": [[770, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[770, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[770, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[770, "handle-exceptions-decorator"]], "Consistency in Errors": [[770, "consistency-in-errors"]], "Assertion Function": [[770, "assertion-function"]], "Function Types": [[773, "function-types"]], "Primary Functions": [[773, "primary-functions"]], "Compositional Functions": [[773, "compositional-functions"]], "Mixed Functions": [[773, "mixed-functions"]], "Partial Mixed Functions": [[773, "partial-mixed-functions"]], "Standalone Functions": [[773, "standalone-functions"]], "Convenience Functions": [[773, "convenience-functions"]], "Get Started": [[793, "get-started"]], "Installing using pip": [[793, "installing-using-pip"], [750, "installing-using-pip"]], "Docker": [[793, "docker"], [750, "docker"]], "Installing from source": [[793, "installing-from-source"], [750, "installing-from-source"]], "Operating Modes": [[781, "operating-modes"]], "Global Parameter Properties": [[781, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[781, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[781, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "What does Ivy Add?": [[809, "what-does-ivy-add"]], "Frameworks": [[809, "frameworks"], [803, "frameworks"]], "Overview": [[775, "overview"]], "Example Usage of the Gradient API": [[775, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[775, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[775, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[775, "custom-gradient-functions"]], "Design of the Gradient API": [[775, "design-of-the-gradient-api"]], "Our policy on gradients": [[775, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[775, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[775, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[775, "framework-specific-considerations"]], "Building the Docs Pipeline": [[763, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[763, "how-the-doc-builder-is-being-run"]], "The convenience script": [[763, "the-convenience-script"]], "Options": [[763, "options"]], "The Docker image": [[763, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[763, "how-ivy-s-docs-is-structured"]], "index.rst": [[763, "index-rst"]], "partial_conf.py": [[763, "partial-conf-py"]], "prebuild.sh": [[763, "prebuild-sh"]], "Custom Extensions": [[763, "custom-extensions"]], "custom_autosummary": [[763, "custom-autosummary"]], ":hide-table:": [[763, "hide-table"]], "discussion_linker": [[763, "discussion-linker"]], "skippable_function": [[763, "skippable-function"]], "ivy_data": [[763, "ivy-data"]], "Design": [[783, "design"]], "Containers": [[764, "containers"]], "Container Instance Methods": [[764, "container-instance-methods"]], "API Instance Methods": [[764, "api-instance-methods"]], "API Special Methods": [[764, "api-special-methods"]], "Commit (Push/PR) Triggered Testing": [[765, "commit-push-pr-triggered-testing"]], "Implementation": [[765, "implementation"]], "A Top-Down View": [[765, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[765, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[765, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[765, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[765, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[765, "determine-test-coverage-workflow"]], "Multiple Runners": [[765, "multiple-runners"]], "Race Condition": [[765, "race-condition"]], "Periodic Testing": [[765, "periodic-testing"]], "Manually Dispatched Workflows": [[765, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[765, "ci-pipeline"]], "Push": [[765, "push"]], "Pull Request": [[765, "pull-request"]], "Dashboard": [[765, "dashboard"]], "ML Explosion": [[796, "ml-explosion"]], "MATLAB matlab": [[803, "matlab-matlab"]], "SciPy scipy": [[803, "scipy-scipy"]], "Torch torch": [[803, "torch-torch"]], "NumPy numpy": [[803, "numpy-numpy"]], "SciKit Learn scikit-learn": [[803, "scikit-learn-scikit-learn"]], "Theano theano": [[803, "theano-theano"]], "Pandas pandas": [[803, "pandas-pandas"]], "Julia julia": [[803, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[803, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[803, "caffe-caffe"]], "Chainer chainer": [[803, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[803, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[803, "mxnet-mxnet"]], "CNTK cntk": [[803, "cntk-cntk"]], "PyTorch pytorch": [[803, "pytorch-pytorch"]], "Flux flux": [[803, "flux-flux"]], "JAX jax": [[803, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[803, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[803, "dex-language-dex-language"]], "Setting Up": [[757, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[757, "forking-and-cloning-the-repo"]], "Pre-Commit": [[757, "pre-commit"]], "Virtual environments - No Docker": [[757, "virtual-environments-no-docker"]], "Using miniconda": [[757, "using-miniconda"]], "Using venv": [[757, "using-venv"]], "Docker Interpreter with PyCharm": [[757, "docker-interpreter-with-pycharm"]], "Windows": [[757, "windows"], [757, "id6"]], "MacOS": [[757, "macos"]], "Ubuntu": [[757, "ubuntu"], [757, "id8"]], "Setting Up Testing in PyCharm": [[757, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[757, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[757, "setting-up-for-free"]], "WSL": [[757, "wsl"]], "GitHub Codespaces": [[757, "github-codespaces"]], "Docstring Examples": [[768, "docstring-examples"]], "ivy.tan": [[768, "ivy-tan"]], "ivy.roll": [[768, "ivy-roll"]], "ivy.add": [[768, "ivy-add"]], "Error Handling": [[754, "error-handling"]], "einsum": [[714, "einsum"]], "Contributing": [[751, "contributing"], [750, "contributing"]], "msort": [[709, "msort"]], "multinomial": [[693, "multinomial"]], "unique_inverse": [[706, "unique-inverse"]], "Data-dependent output shape": [[706, null], [705, null], [707, null], [704, null], [602, null], [602, null], [602, null], [602, null]], "min": [[717, "min"]], "cumprod": [[712, "cumprod"]], "argwhere": [[701, "argwhere"]], "all": [[722, "all"]], "Inspection": [[746, "module-ivy.utils.inspection"]], "Building the Docs": [[753, "building-the-docs"]], "Building the Docs using Docker": [[753, "building-the-docs-using-docker"]], "Using convenience script": [[753, "using-convenience-script"]], "Using existing image on Docker Hub": [[753, "using-existing-image-on-docker-hub"]], "Building the image locally": [[753, "building-the-image-locally"]], "Building the Docs without Docker": [[753, "building-the-docs-without-docker"]], "sum": [[720, "sum"]], "prod": [[718, "prod"]], "argmax": [[699, "argmax"]], "unique_counts": [[705, "unique-counts"]], "sort": [[711, "sort"]], "shuffle": [[698, "shuffle"]], "load": [[724, "load"]], "Handler": [[741, "module-ivy.utils.backend.handler"]], "std": [[719, "std"]], "Converters": [[729, "module-ivy.stateful.converters"]], "Status": [[750, "status"]], "Unified AI": [[750, "unified-ai"]], "Ivy as a transpiler": [[750, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[750, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[750, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[750, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[750, "setting-up-ivy"]], "Using Ivy": [[750, "using-ivy"]], "Multi-backend Support": [[750, "multi-backend-support"]], "Transpilation API": [[750, "transpilation-api"]], "Documentation": [[750, "documentation"]], "Community": [[750, "community"]], "Citation": [[750, "citation"]], "max": [[715, "max"]], "Exceptions": [[745, "module-ivy.utils.exceptions"]], "cumsum": [[713, "cumsum"]], "searchsorted": [[710, "searchsorted"]], "Module": [[734, "module-ivy.stateful.module"]], "mean": [[716, "mean"]], "Verbosity": [[749, "module-ivy.utils.verbosity"]], "Einsum parser": [[744, "module-ivy.utils.einsum_parser"]], "where": [[703, "where"]], "Helpers": [[730, "module-ivy.stateful.helpers"]], "Logging": [[747, "module-ivy.utils.logging"]], "argmin": [[700, "argmin"]], "Helpful Resources": [[755, "helpful-resources"]], "var": [[721, "var"]], "Sub backend handler": [[742, "module-ivy.utils.backend.sub_backend_handler"]], "nonzero": [[702, "nonzero"]], "randint": [[694, "randint"]], "random_uniform": [[696, "random-uniform"]], "Ast helpers": [[740, "module-ivy.utils.backend.ast_helpers"]], "seed": [[697, "seed"]], "save": [[725, "save"]], "unique_values": [[707, "unique-values"]], "Profiler": [[748, "module-ivy.utils.profiler"]], "Framework classes": [[726, "framework-classes"]], "Example - Ivy Robot": [[752, "example-ivy-robot"]], "unique_all": [[704, "unique-all"]], "Sequential": [[737, "module-ivy.stateful.sequential"]], "Utils": [[727, "utils"]], "Backend": [[739, "backend"]], "Dynamic import": [[743, "module-ivy.utils.dynamic_import"]], "argsort": [[708, "argsort"]], "any": [[723, "any"]], "random_normal": [[695, "random-normal"]], "Assertions": [[738, "module-ivy.utils.assertions"]], "split": [[663, "split"]], "map_nest_at_indices": [[681, "map-nest-at-indices"]], "matrix_power": [[634, "matrix-power"]], "vander": [[647, "vander"]], "layer_norm": [[692, "layer-norm"]], "repeat": [[660, "repeat"]], "insert_into_nest_at_indices": [[678, "insert-into-nest-at-indices"]], "nested_multi_map": [[686, "nested-multi-map"]], "sparse_cross_entropy": [[653, "sparse-cross-entropy"]], "set_nest_at_indices": [[691, "set-nest-at-indices"]], "unstack": [[668, "unstack"]], "map": [[679, "map"]], "vecdot": [[648, "vecdot"]], "pinv": [[638, "pinv"]], "fomaml_step": [[670, "fomaml-step"]], "nested_any": [[683, "nested-any"]], "matmul": [[632, "matmul"]], "insert_into_nest_at_index": [[677, "insert-into-nest-at-index"]], "slogdet": [[640, "slogdet"]], "permute_dims": [[659, "permute-dims"]], "clip": [[654, "clip"]], "matrix_transpose": [[636, "matrix-transpose"]], "svd": [[642, "svd"]], "svdvals": [[643, "svdvals"]], "inv": [[630, "inv"]], "squeeze": [[664, "squeeze"]], "constant_pad": [[656, "constant-pad"]], "outer": [[637, "outer"]], "nested_map": [[685, "nested-map"]], "trace": [[646, "trace"]], "tensordot": [[644, "tensordot"]], "set_nest_at_index": [[690, "set-nest-at-index"]], "duplicate_array_index_chains": [[675, "duplicate-array-index-chains"]], "concat": [[655, "concat"]], "qr": [[639, "qr"]], "copy_nest": [[674, "copy-nest"]], "nested_argwhere": [[684, "nested-argwhere"]], "reptile_step": [[672, "reptile-step"]], "reshape": [[661, "reshape"]], "swapaxes": [[666, "swapaxes"]], "stack": [[665, "stack"]], "prune_empty": [[687, "prune-empty"]], "tensorsolve": [[645, "tensorsolve"]], "solve": [[641, "solve"]], "zero_pad": [[669, "zero-pad"]], "roll": [[662, "roll"]], "map_nest_at_index": [[680, "map-nest-at-index"]], "lu_factor": [[631, "lu-factor"]], "prune_nest_at_index": [[688, "prune-nest-at-index"]], "maml_step": [[671, "maml-step"]], "flip": [[658, "flip"]], "cross_entropy": [[652, "cross-entropy"]], "tile": [[667, "tile"]], "prune_nest_at_indices": [[689, "prune-nest-at-indices"]], "binary_cross_entropy": [[651, "binary-cross-entropy"]], "matrix_rank": [[635, "matrix-rank"]], "expand_dims": [[657, "expand-dims"]], "multi_index_nest": [[682, "multi-index-nest"]], "index_nest": [[676, "index-nest"]], "vector_norm": [[649, "vector-norm"]], "matrix_norm": [[633, "matrix-norm"]], "vector_to_skew_symmetric_matrix": [[650, "vector-to-skew-symmetric-matrix"]], "all_nested_indices": [[673, "all-nested-indices"]], "Image Segmentation with Ivy UNet": [[8, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[8, "Imports"], [10, "Imports"]], "Data Preparation": [[8, "Data-Preparation"], [10, "Data-Preparation"], [7, "Data-Preparation"], [6, "Data-Preparation"]], "Custom Preprocessing": [[8, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [10, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [10, "Visualise-image"]], "Model Inference": [[8, "Model-Inference"]], "Initializing Native Torch UNet": [[8, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[8, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[8, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[8, "TensorFlow-backend"]], "JAX": [[8, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[8, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Tutorials And Examples": [[17, "tutorials-and-examples"]], "Learn the basics": [[17, "learn-the-basics"], [18, "learn-the-basics"]], "Guides": [[17, "guides"], [12, "guides"]], "Examples and Demos": [[17, "examples-and-demos"], [5, "examples-and-demos"]], "Transpiling a Tensorflow model to build on top": [[15, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Round Up": [[15, "Round-Up"], [32, "Round-Up"], [29, "Round-Up"], [24, "Round-Up"], [35, "Round-Up"], [23, "Round-Up"], [31, "Round-Up"], [13, "Round-Up"], [34, "Round-Up"], [20, "Round-Up"], [30, "Round-Up"], [42, "Round-Up"], [25, "Round-Up"], [19, "Round-Up"], [22, "Round-Up"], [21, "Round-Up"], [33, "Round-Up"]], "Transpile any model": [[26, "Transpile-any-model"]], "Round up": [[26, "Round-up"]], "Transpiling a haiku model to build on top": [[14, "Transpiling-a-haiku-model-to-build-on-top"]], "Using Ivy ResNet": [[10, "Using-Ivy-ResNet"]], "Installation": [[10, "Installation"], [6, "Installation"]], "Prepare the set of labels": [[10, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[10, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[10, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[10, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[10, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [10, "id1"]], "Model Inference ResNet50": [[10, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[10, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[10, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "# Ivy Bert Demo": [[7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[7, "Install-the-dependecies"]], "Import the modules": [[7, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[7, "Ivy-model-inference-with-torch"]], "0.2: Transpile": [[32, "0.2:-Transpile"]], "1.3: Dynamic vs Static": [[36, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[36, "Dynamic"]], "Static": [[36, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[36, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Quickstart": [[29, "Quickstart"]], "Get familiar with Ivy": [[29, "Get-familiar-with-Ivy"]], "Functional API": [[29, "Functional-API"]], "Stateful API": [[29, "Stateful-API"]], "Compiling code": [[29, "Compiling-code"]], "Any function": [[29, "Any-function"], [28, "Any-function"]], "Any library": [[29, "Any-library"], [28, "Any-library"]], "Any model": [[29, "Any-model"], [28, "Any-model"]], "How to use decorators": [[24, "How-to-use-decorators"]], "Unify": [[24, "Unify"], [35, "Unify"], [23, "Unify"], [34, "Unify"], [33, "Unify"]], "Compile": [[24, "Compile"], [35, "Compile"], [23, "Compile"], [34, "Compile"], [33, "Compile"]], "Transpile": [[24, "Transpile"], [35, "Transpile"], [23, "Transpile"], [34, "Transpile"], [33, "Transpile"]], "1.2: As a Decorator": [[35, "1.2:-As-a-Decorator"]], "Deepmind PerceiverIO on GPU": [[43, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[43, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[43, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[43, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[43, "Run-the-demo..."]], "\u2026with torch backend": [[43, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[43, "....with-tensorflow-backend"]], "\u2026with jax backend": [[43, "...with-jax-backend"]], "\u2026with numpy backend": [[43, "...with-numpy-backend"]], "3.0: Perceiver": [[38, "3.0:-Perceiver"]], "Lazy vs Eager": [[23, "Lazy-vs-Eager"]], "Write a model using Ivy": [[27, "Write-a-model-using-Ivy"]], "0.1: Compile": [[31, "0.1:-Compile"]], "ODSC Ivy Demo": [[28, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[28, "Ivy-Backend-Handler"], [19, "Ivy-Backend-Handler"]], "Data Structures": [[28, "Data-Structures"], [19, "Data-Structures"]], "Ivy Functional API": [[28, "Ivy-Functional-API"], [19, "Ivy-Functional-API"]], "Graph Compiler": [[28, "Graph-Compiler"], [0, "graph-compiler"]], "Ivy as a Transpiler Introduction": [[46, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[46, "To-use-the-transpiler:"]], "Transpiler Interface": [[46, "Transpiler-Interface"]], "Telemetry": [[46, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[46, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[46, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[46, "3.-Transpile-Models-\ud83c\udf10"]], "Transpiling a PyTorch model to build on top": [[13, "Transpiling-a-PyTorch-model-to-build-on-top"]], "1.1: Framework Selection": [[34, "1.1:-Framework-Selection"]], "Unify code": [[20, "Unify-code"]], "Developing a convolutional network using Ivy": [[16, "Developing-a-convolutional-network-using-Ivy"]], "Accelerating MMPreTrain models with JAX": [[9, "Accelerating-MMPreTrain-models-with-JAX"]], "TO REPLACE: Title": [[4, "TO-REPLACE:-Title"]], "0.0: Unify": [[30, "0.0:-Unify"]], "HuggingFace Tensorflow DeiT": [[45, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[45, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "3.1: Stable Diffusion": [[39, "3.1:-Stable-Diffusion"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Sharp bits": [[2, "sharp-bits"], [0, "sharp-bits"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[42, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[42, "Table-of-Contents"]], "Defining the model": [[42, "Defining-the-model"]], "Model construction": [[42, "Model-construction"]], "Some helper functions": [[42, "Some-helper-functions"]], "Transpiling the model": [[42, "Transpiling-the-model"]], "PyTorch pipeline": [[42, "PyTorch-pipeline"]], "Dataset download": [[42, "Dataset-download"]], "DataLoader": [[42, "DataLoader"]], "Training": [[42, "Training"]], "Testing": [[42, "Testing"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Ivy AlexNet demo": [[6, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[6, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[6, "TensorFlow-inference"]], "JAX inference": [[6, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[6, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Demos": [[3, "demos"]], "Creating a Notebook for Demo": [[3, "creating-a-notebook-for-demo"]], "Transpile any library": [[25, "Transpile-any-library"]], "End-to-End Training Pipeline in Ivy": [[44, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[44, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[44, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[44, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[44, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[44, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[44, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[44, "Plotting-the-training-metrics"]], "Save the trained Model": [[44, "Save-the-trained-Model"]], "Write Ivy code": [[19, "Write-Ivy-code"]], "Contents": [[19, "Contents"]], "Installing Ivy": [[19, "Installing-Ivy"]], "Importing Ivy": [[19, "Importing-Ivy"]], "Transpile code": [[22, "Transpile-code"]], "2.0: Kornia": [[37, "2.0:-Kornia"]], "Compile code": [[21, "Compile-code"]], "Basic Operations with Ivy": [[40, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[40, "Installs-\ud83d\udcbe"], [41, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[40, "Imports-\ud83d\udec3"], [41, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[40, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[40, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[40, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[40, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[40, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[40, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[40, "Set-Backend-Framework"]], "Define Model": [[40, "Define-Model"], [41, "Define-Model"]], "Create Model": [[40, "Create-Model"]], "Create Optimizer": [[40, "Create-Optimizer"]], "Input and Target": [[40, "Input-and-Target"]], "Loss Function": [[40, "Loss-Function"]], "Training Loop": [[40, "Training-Loop"]], "Compilation of a Basic Function": [[41, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[41, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[41, "Function-compilation-\ud83d\udee0"]], "Set backend": [[41, "Set-backend"]], "Sample input": [[41, "Sample-input"]], "Define function to compile": [[41, "Define-function-to-compile"]], "Compile the function": [[41, "Compile-the-function"]], "Check results": [[41, "Check-results"], [41, "id1"]], "Compiling simple neural network \ud83e\udde0": [[41, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[41, "Create-model"]], "Define input": [[41, "Define-input"]], "Compile network": [[41, "Compile-network"]], "Resnet 18": [[47, "Resnet-18"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Accelerating PyTorch models with JAX": [[11, "Accelerating-PyTorch-models-with-JAX"]], "1.0: Lazy vs Eager": [[33, "1.0:-Lazy-vs-Eager"]], "get_all_arrays_in_memory": [[512, "get-all-arrays-in-memory"]], "get_referrers_recursive": [[515, "get-referrers-recursive"]], "has_nans": [[516, "has-nans"]], "set_precise_mode": [[543, "set-precise-mode"]], "Parameter": [[543, "parameter"], [542, "parameter"], [537, "parameter"], [536, "parameter"], [546, "parameter"], [545, "parameter"], [588, "parameter"], [591, "parameter"], [591, "id1"], [591, "id2"], [591, "id3"], [591, "id4"], [591, "id5"], [209, "parameter"]], "is_ivy_array": [[523, "is-ivy-array"]], "stable_divide": [[549, "stable-divide"]], "function_supported_devices_and_dtypes": [[508, "function-supported-devices-and-dtypes"]], "set_nestable_mode": [[542, "set-nestable-mode"]], "isscalar": [[528, "isscalar"]], "inplace_decrement": [[518, "inplace-decrement"]], "gather_nd": [[511, "gather-nd"]], "try_else_none": [[558, "try-else-none"]], "unset_nestable_mode": [[564, "unset-nestable-mode"]], "inplace_increment": [[519, "inplace-increment"]], "get_num_dims": [[514, "get-num-dims"]], "isin": [[527, "isin"]], "match_kwargs": [[530, "match-kwargs"]], "gather": [[510, "gather"]], "set_tmp_dir": [[547, "set-tmp-dir"]], "itemsize": [[529, "itemsize"]], "set_item": [[539, "set-item"]], "shape": [[548, "shape"]], "unset_queue_timeout": [[566, "unset-queue-timeout"]], "set_queue_timeout": [[544, "set-queue-timeout"]], "set_min_base": [[540, "set-min-base"]], "inplace_variables_supported": [[521, "inplace-variables-supported"]], "num_arrays_in_memory": [[532, "num-arrays-in-memory"]], "to_ivy_shape": [[553, "to-ivy-shape"]], "unset_exception_trace_mode": [[560, "unset-exception-trace-mode"]], "set_exception_trace_mode": [[537, "set-exception-trace-mode"]], "to_list": [[554, "to-list"]], "unset_inplace_mode": [[561, "unset-inplace-mode"]], "get_item": [[513, "get-item"]], "is_ivy_nested_array": [[525, "is-ivy-nested-array"]], "fourier_encode": [[507, "fourier-encode"]], "inplace_update": [[520, "inplace-update"]], "strides": [[551, "strides"]], "scatter_nd": [[535, "scatter-nd"]], "print_all_arrays_in_memory": [[533, "print-all-arrays-in-memory"]], "is_ivy_container": [[524, "is-ivy-container"]], "unset_precise_mode": [[565, "unset-precise-mode"]], "unset_min_denominator": [[563, "unset-min-denominator"]], "inplace_arrays_supported": [[517, "inplace-arrays-supported"]], "multiprocessing": [[531, "multiprocessing"]], "stable_pow": [[550, "stable-pow"]], "supports_inplace_updates": [[552, "supports-inplace-updates"]], "to_scalar": [[557, "to-scalar"]], "unset_array_mode": [[559, "unset-array-mode"]], "set_min_denominator": [[541, "set-min-denominator"]], "function_unsupported_devices_and_dtypes": [[509, "function-unsupported-devices-and-dtypes"]], "to_native_shape": [[555, "to-native-shape"]], "einops_repeat": [[505, "einops-repeat"]], "set_array_mode": [[536, "set-array-mode"]], "unset_min_base": [[562, "unset-min-base"]], "einops_reduce": [[504, "einops-reduce"]], "is_array": [[522, "is-array"]], "set_inplace_mode": [[538, "set-inplace-mode"]], "to_numpy": [[556, "to-numpy"]], "scatter_flat": [[534, "scatter-flat"]], "is_native_array": [[526, "is-native-array"]], "set_show_func_wrapper_trace_mode": [[546, "set-show-func-wrapper-trace-mode"]], "set_shape_array_mode": [[545, "set-shape-array-mode"]], "exists": [[506, "exists"]], "beta": [[468, "beta"]], "vstack": [[460, "vstack"]], "nanmedian": [[488, "nanmedian"]], "take_along_axis": [[455, "take-along-axis"]], "lp_normalize": [[466, "lp-normalize"]], "cummin": [[483, "cummin"]], "hsplit": [[442, "hsplit"]], "instance_norm": [[463, "instance-norm"]], "partial_tensor_to_vec": [[449, "partial-tensor-to-vec"]], "nanmean": [[487, "nanmean"]], "arg_names": [[494, "arg-names"]], "assert_supports_inplace": [[496, "assert-supports-inplace"]], "cache_fn": [[497, "cache-fn"]], "matricize": [[445, "matricize"]], "moveaxis": [[446, "moveaxis"]], "hstack": [[443, "hstack"]], "is_native_sparse_array": [[476, "is-native-sparse-array"]], "median": [[486, "median"]], "lexsort": [[474, "lexsort"]], "native_sparse_array_to_indices_values_and_shape": [[478, "native-sparse-array-to-indices-values-and-shape"]], "unique_consecutive": [[458, "unique-consecutive"]], "partial_vec_to_tensor": [[451, "partial-vec-to-tensor"]], "histogram": [[484, "histogram"]], "clip_matrix_norm": [[498, "clip-matrix-norm"]], "put_along_axis": [[452, "put-along-axis"]], "default": [[502, "default"]], "native_sparse_array": [[477, "native-sparse-array"]], "heaviside": [[441, "heaviside"]], "rot90": [[453, "rot90"]], "is_ivy_sparse_array": [[475, "is-ivy-sparse-array"]], "quantile": [[490, "quantile"]], "cov": [[481, "cov"]], "igamma": [[485, "igamma"]], "soft_thresholding": [[454, "soft-thresholding"]], "invert_permutation": [[473, "invert-permutation"]], "bincount": [[479, "bincount"]], "optional_get_element": [[491, "optional-get-element"]], "arg_info": [[493, "arg-info"]], "nanprod": [[489, "nanprod"]], "array_equal": [[495, "array-equal"]], "partial_fold": [[448, "partial-fold"]], "clip_vector_norm": [[499, "clip-vector-norm"]], "pad": [[447, "pad"]], "unfold": [[457, "unfold"]], "corrcoef": [[480, "corrcoef"]], "dirichlet": [[469, "dirichlet"]], "gamma": [[470, "gamma"]], "group_norm": [[462, "group-norm"]], "cummax": [[482, "cummax"]], "vsplit": [[459, "vsplit"]], "container_types": [[500, "container-types"]], "current_backend_str": [[501, "current-backend-str"]], "poisson": [[471, "poisson"]], "einops_rearrange": [[503, "einops-rearrange"]], "i0": [[444, "i0"]], "top_k": [[456, "top-k"]], "all_equal": [[492, "all-equal"]], "unravel_index": [[472, "unravel-index"]], "l1_normalize": [[464, "l1-normalize"]], "l2_normalize": [[465, "l2-normalize"]], "bernoulli": [[467, "bernoulli"]], "batch_norm": [[461, "batch-norm"]], "partial_unfold": [[450, "partial-unfold"]], "concat_from_sequence": [[432, "concat-from-sequence"]], "rfftn": [[398, "rfftn"]], "embedding": [[381, "embedding"]], "associative_scan": [[426, "associative-scan"]], "get_interpolate_kernel": [[385, "get-interpolate-kernel"]], "dropout1d": [[378, "dropout1d"]], "as_strided": [[425, "as-strided"]], "atleast_2d": [[428, "atleast-2d"]], "atleast_3d": [[429, "atleast-3d"]], "eigh_tridiagonal": [[404, "eigh-tridiagonal"]], "log_poisson_loss": [[422, "log-poisson-loss"]], "kronecker": [[410, "kronecker"]], "flipud": [[439, "flipud"]], "dsplit": [[433, "dsplit"]], "broadcast_shapes": [[430, "broadcast-shapes"]], "expand": [[435, "expand"]], "max_unpool1d": [[394, "max-unpool1d"]], "max_pool3d": [[393, "max-pool3d"]], "initialize_tucker": [[407, "initialize-tucker"]], "flatten": [[437, "flatten"]], "choose": [[431, "choose"]], "dropout2d": [[379, "dropout2d"]], "interpolate": [[390, "interpolate"]], "eigvals": [[405, "eigvals"]], "truncated_svd": [[418, "truncated-svd"]], "fft2": [[383, "fft2"]], "khatri_rao": [[408, "khatri-rao"]], "atleast_1d": [[427, "atleast-1d"]], "generate_einsum_equation": [[384, "generate-einsum-equation"]], "kron": [[409, "kron"]], "max_pool2d": [[392, "max-pool2d"]], "diagflat": [[401, "diagflat"]], "make_svd_non_negative": [[411, "make-svd-non-negative"]], "multi_mode_dot": [[415, "multi-mode-dot"]], "l1_loss": [[421, "l1-loss"]], "multi_dot": [[414, "multi-dot"]], "interp": [[389, "interp"]], "fft": [[382, "fft"]], "adjoint": [[399, "adjoint"]], "max_pool1d": [[391, "max-pool1d"]], "dropout3d": [[380, "dropout3d"]], "cond": [[400, "cond"]], "fill_diagonal": [[436, "fill-diagonal"]], "partial_tucker": [[416, "partial-tucker"]], "nearest_interpolate": [[395, "nearest-interpolate"]], "ifft": [[387, "ifft"]], "matrix_exp": [[412, "matrix-exp"]], "smooth_l1_loss": [[423, "smooth-l1-loss"]], "soft_margin_loss": [[424, "soft-margin-loss"]], "fliplr": [[438, "fliplr"]], "svd_flip": [[417, "svd-flip"]], "pool": [[396, "pool"]], "idct": [[386, "idct"]], "eig": [[403, "eig"], [626, "eig"]], "ifftn": [[388, "ifftn"]], "mode_dot": [[413, "mode-dot"]], "tucker": [[419, "tucker"]], "dstack": [[434, "dstack"]], "reduce_window": [[397, "reduce-window"]], "huber_loss": [[420, "huber-loss"]], "general_inner_product": [[406, "general-inner-product"]], "dot": [[402, "dot"]], "fold": [[440, "fold"]], "conv1d": [[607, "conv1d"]], "Constants": [[584, "module-ivy.functional.ivy.constants"], [348, "module-ivy.functional.ivy.experimental.constants"]], "Nest": [[598, "nest"], [360, "module-ivy.functional.ivy.experimental.nest"]], "Meta": [[597, "meta"], [359, "module-ivy.functional.ivy.experimental.meta"]], "adam_step": [[572, "adam-step"]], "conv_general_transpose": [[614, "conv-general-transpose"]], "eigh": [[627, "eigh"]], "conv2d": [[609, "conv2d"]], "scaled_dot_product_attention": [[620, "scaled-dot-product-attention"]], "optimizer_update": [[580, "optimizer-update"]], "adam_update": [[573, "adam-update"]], "cross": [[622, "cross"]], "conv3d_transpose": [[612, "conv3d-transpose"]], "det": [[623, "det"]], "grad": [[575, "grad"]], "unset_tmp_dir": [[569, "unset-tmp-dir"]], "linear": [[617, "linear"]], "lamb_update": [[578, "lamb-update"]], "vmap": [[571, "vmap"]], "jac": [[577, "jac"]], "inner": [[629, "inner"]], "depthwise_conv2d": [[615, "depthwise-conv2d"]], "Note": [[586, null], [133, null]], "lars_update": [[579, "lars-update"]], "eigvalsh": [[628, "eigvalsh"]], "multi_head_attention": [[619, "multi-head-attention"]], "value_is_nan": [[570, "value-is-nan"]], "cholesky": [[621, "cholesky"]], "conv1d_transpose": [[608, "conv1d-transpose"]], "diag": [[624, "diag"]], "execute_with_gradients": [[574, "execute-with-gradients"]], "stop_gradient": [[581, "stop-gradient"]], "conv_general_dilated": [[613, "conv-general-dilated"]], "value_and_grad": [[582, "value-and-grad"]], "unset_shape_array_mode": [[567, "unset-shape-array-mode"]], "gradient_descent_update": [[576, "gradient-descent-update"]], "unset_show_func_wrapper_trace_mode": [[568, "unset-show-func-wrapper-trace-mode"]], "Control flow ops": [[585, "control-flow-ops"]], "dropout": [[616, "dropout"]], "lstm_update": [[618, "lstm-update"]], "diagonal": [[625, "diagonal"]], "conv3d": [[611, "conv3d"]], "conv": [[606, "conv"]], "conv2d_transpose": [[610, "conv2d-transpose"]], "mel_weight_matrix": [[310, "mel-weight-matrix"]], "less": [[258, "less"]], "trunc_divide": [[293, "trunc-divide"]], "minimum": [[271, "minimum"]], "remainder": [[281, "remainder"]], "isfinite": [[253, "isfinite"]], "tan": [[289, "tan"]], "relu6": [[298, "relu6"]], "isreal": [[256, "isreal"]], "logical_not": [[267, "logical-not"]], "logaddexp": [[264, "logaddexp"]], "reciprocal": [[280, "reciprocal"]], "random_cp": [[313, "random-cp"]], "elu": [[294, "elu"]], "sqrt": [[286, "sqrt"]], "logical_xor": [[269, "logical-xor"]], "square": [[287, "square"]], "subtract": [[288, "subtract"]], "hann_window": [[306, "hann-window"]], "prelu": [[297, "prelu"]], "ndindex": [[312, "ndindex"]], "imag": [[252, "imag"]], "log": [[260, "log"]], "sign": [[283, "sign"]], "pow": [[277, "pow"]], "sinh": [[285, "sinh"]], "sin": [[284, "sin"]], "rad2deg": [[278, "rad2deg"]], "not_equal": [[275, "not-equal"]], "logsigmoid": [[296, "logsigmoid"]], "sequence_length": [[300, "sequence-length"]], "lcm": [[257, "lcm"]], "logical_or": [[268, "logical-or"]], "random_tucker": [[314, "random-tucker"]], "isnan": [[255, "isnan"]], "indices": [[307, "indices"]], "positive": [[276, "positive"]], "thresholded_relu": [[302, "thresholded-relu"]], "kaiser_window": [[309, "kaiser-window"]], "multiply": [[272, "multiply"]], "ndenumerate": [[311, "ndenumerate"]], "selu": [[299, "selu"]], "hamming_window": [[305, "hamming-window"]], "real": [[279, "real"]], "maximum": [[270, "maximum"]], "blackman_window": [[303, "blackman-window"]], "logical_and": [[266, "logical-and"]], "negative": [[274, "negative"]], "trunc": [[292, "trunc"]], "silu": [[301, "silu"]], "kaiser_bessel_derived_window": [[308, "kaiser-bessel-derived-window"]], "tanh": [[290, "tanh"]], "eye_like": [[304, "eye-like"]], "nan_to_num": [[273, "nan-to-num"]], "isinf": [[254, "isinf"]], "trapz": [[291, "trapz"]], "less_equal": [[259, "less-equal"]], "logit": [[295, "logit"]], "log1p": [[262, "log1p"]], "log2": [[263, "log2"]], "round": [[282, "round"]], "log10": [[261, "log10"]], "logaddexp2": [[265, "logaddexp2"]], "lgamma": [[336, "lgamma"]], "avg_pool1d": [[373, "avg-pool1d"]], "isclose": [[333, "isclose"]], "sinc": [[341, "sinc"]], "hypot": [[332, "hypot"]], "lerp": [[335, "lerp"]], "xlogy": [[343, "xlogy"]], "adaptive_avg_pool2d": [[370, "adaptive-avg-pool2d"]], "area_interpolate": [[372, "area-interpolate"]], "count_nonzero": [[324, "count-nonzero"]], "unsorted_segment_sum": [[318, "unsorted-segment-sum"]], "diff": [[325, "diff"]], "frexp": [[330, "frexp"]], "dft": [[377, "dft"]], "avg_pool2d": [[374, "avg-pool2d"]], "nansum": [[338, "nansum"]], "binarizer": [[321, "binarizer"]], "adaptive_avg_pool1d": [[369, "adaptive-avg-pool1d"]], "Sparse array": [[366, "sparse-array"]], "trilu": [[316, "trilu"]], "allclose": [[320, "allclose"]], "bind_custom_gradient_function": [[346, "bind-custom-gradient-function"]], "fmax": [[329, "fmax"]], "unsorted_segment_min": [[317, "unsorted-segment-min"]], "ldexp": [[334, "ldexp"]], "adaptive_max_pool2d": [[371, "adaptive-max-pool2d"]], "zeta": [[344, "zeta"]], "tril_indices": [[315, "tril-indices"]], "gradient": [[331, "gradient"]], "fix": [[327, "fix"]], "digamma": [[326, "digamma"]], "copysign": [[323, "copysign"]], "avg_pool3d": [[375, "avg-pool3d"]], "nextafter": [[339, "nextafter"]], "modf": [[337, "modf"]], "signbit": [[340, "signbit"]], "vorbis_window": [[319, "vorbis-window"]], "dct": [[376, "dct"]], "float_power": [[328, "float-power"]], "reduce": [[345, "reduce"]], "sparsify_tensor": [[342, "sparsify-tensor"]], "conj": [[322, "conj"]], "gcd": [[249, "gcd"]], "handle_soft_device_variable": [[202, "handle-soft-device-variable"]], "erf": [[241, "erf"]], "bitwise_left_shift": [[231, "bitwise-left-shift"]], "num_gpus": [[204, "num-gpus"]], "tpu_is_available": [[215, "tpu-is-available"]], "cosh": [[237, "cosh"]], "num_ivy_arrays_on_dev": [[205, "num-ivy-arrays-on-dev"]], "unset_default_device": [[216, "unset-default-device"]], "dev_util": [[197, "dev-util"]], "used_mem_on_dev": [[218, "used-mem-on-dev"]], "atan": [[226, "atan"]], "clear_cached_mem_on_dev": [[194, "clear-cached-mem-on-dev"]], "set_soft_device_mode": [[209, "set-soft-device-mode"]], "get_all_ivy_arrays_on_dev": [[200, "get-all-ivy-arrays-on-dev"]], "function_supported_devices": [[198, "function-supported-devices"]], "fmin": [[247, "fmin"]], "greater_equal": [[251, "greater-equal"]], "deg2rad": [[238, "deg2rad"]], "unset_default_uint_dtype": [[190, "unset-default-uint-dtype"]], "to_device": [[213, "to-device"]], "print_all_ivy_arrays_on_dev": [[207, "print-all-ivy-arrays-on-dev"]], "asin": [[224, "asin"]], "set_default_device": [[208, "set-default-device"]], "expm1": [[244, "expm1"]], "bitwise_xor": [[234, "bitwise-xor"]], "exp2": [[243, "exp2"]], "default_device": [[195, "default-device"]], "unset_default_int_dtype": [[189, "unset-default-int-dtype"]], "total_mem_on_dev": [[214, "total-mem-on-dev"]], "cos": [[236, "cos"]], "set_split_factor": [[210, "set-split-factor"]], "ceil": [[235, "ceil"]], "exp": [[242, "exp"]], "unset_soft_device_mode": [[217, "unset-soft-device-mode"]], "angle": [[223, "angle"]], "bitwise_invert": [[230, "bitwise-invert"]], "atan2": [[227, "atan2"]], "split_func_call": [[212, "split-func-call"]], "num_cpu_cores": [[203, "num-cpu-cores"]], "atanh": [[228, "atanh"]], "split_factor": [[211, "split-factor"]], "abs": [[219, "abs"]], "asinh": [[225, "asinh"]], "greater": [[250, "greater"]], "add": [[222, "add"]], "percent_used_mem_on_dev": [[206, "percent-used-mem-on-dev"]], "bitwise_or": [[232, "bitwise-or"]], "floor_divide": [[246, "floor-divide"]], "acosh": [[221, "acosh"]], "bitwise_and": [[229, "bitwise-and"]], "bitwise_right_shift": [[233, "bitwise-right-shift"]], "valid_dtype": [[191, "valid-dtype"]], "equal": [[240, "equal"]], "acos": [[220, "acos"]], "fmod": [[248, "fmod"]], "function_unsupported_devices": [[199, "function-unsupported-devices"]], "as_ivy_dev": [[192, "as-ivy-dev"]], "divide": [[239, "divide"]], "dev": [[196, "dev"]], "floor": [[245, "floor"]], "gpu_is_available": [[201, "gpu-is-available"]], "as_native_dev": [[193, "as-native-dev"]], "invalid_dtype": [[169, "invalid-dtype"]], "native_array": [[140, "native-array"]], "default_float_dtype": [[159, "default-float-dtype"]], "eye": [[132, "eye"]], "frombuffer": [[134, "frombuffer"]], "dtype": [[162, "dtype"]], "from_dlpack": [[133, "from-dlpack"]], "triu": [[145, "triu"]], "closest_valid_dtype": [[156, "closest-valid-dtype"]], "result_type": [[179, "result-type"]], "broadcast_to": [[153, "broadcast-to"]], "logspace": [[138, "logspace"]], "copy_array": [[129, "copy-array"]], "empty": [[130, "empty"]], "zeros_like": [[148, "zeros-like"]], "is_int_dtype": [[174, "is-int-dtype"]], "finfo": [[164, "finfo"]], "ones_like": [[143, "ones-like"]], "tril": [[144, "tril"]], "asarray_inputs_to_native_shapes": [[127, "asarray-inputs-to-native-shapes"]], "is_hashable_dtype": [[173, "is-hashable-dtype"]], "meshgrid": [[139, "meshgrid"]], "set_default_dtype": [[181, "set-default-dtype"]], "as_ivy_dtype": [[149, "as-ivy-dtype"]], "broadcast_arrays": [[152, "broadcast-arrays"]], "one_hot": [[141, "one-hot"]], "asarray_infer_dtype": [[126, "asarray-infer-dtype"]], "full_like": [[136, "full-like"]], "default_int_dtype": [[160, "default-int-dtype"]], "can_cast": [[154, "can-cast"]], "default_complex_dtype": [[157, "default-complex-dtype"]], "function_supported_dtypes": [[165, "function-supported-dtypes"]], "iinfo": [[167, "iinfo"]], "is_uint_dtype": [[176, "is-uint-dtype"]], "promote_types": [[177, "promote-types"]], "unset_default_float_dtype": [[188, "unset-default-float-dtype"]], "linspace": [[137, "linspace"]], "default_uint_dtype": [[161, "default-uint-dtype"]], "set_default_float_dtype": [[182, "set-default-float-dtype"]], "asarray_to_native_arrays_and_back": [[128, "asarray-to-native-arrays-and-back"]], "triu_indices": [[146, "triu-indices"]], "default_dtype": [[158, "default-dtype"]], "is_bool_dtype": [[170, "is-bool-dtype"]], "is_native_dtype": [[175, "is-native-dtype"]], "full": [[135, "full"]], "dtype_bits": [[163, "dtype-bits"]], "zeros": [[147, "zeros"]], "set_default_complex_dtype": [[180, "set-default-complex-dtype"]], "unset_default_dtype": [[187, "unset-default-dtype"]], "function_unsupported_dtypes": [[166, "function-unsupported-dtypes"]], "check_float": [[155, "check-float"]], "set_default_uint_dtype": [[184, "set-default-uint-dtype"]], "as_native_dtype": [[150, "as-native-dtype"]], "infer_default_dtype": [[168, "infer-default-dtype"]], "type_promote_arrays": [[185, "type-promote-arrays"]], "set_default_int_dtype": [[183, "set-default-int-dtype"]], "promote_types_of_inputs": [[178, "promote-types-of-inputs"]], "ones": [[142, "ones"]], "empty_like": [[131, "empty-like"]], "is_float_dtype": [[172, "is-float-dtype"]], "astype": [[151, "astype"]], "unset_default_complex_dtype": [[186, "unset-default-complex-dtype"]], "is_complex_dtype": [[171, "is-complex-dtype"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[48, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[48, "module-ivy.data_classes.array.activations"], [49, "module-ivy.data_classes.array.conversions"], [50, "module-ivy.data_classes.array.creation"], [51, "module-ivy.data_classes.array.data_type"], [52, "module-ivy.data_classes.array.device"], [53, "module-ivy.data_classes.array.elementwise"], [54, "module-ivy.data_classes.array.experimental"], [54, "module-ivy.data_classes.array.experimental.activations"], [54, "module-ivy.data_classes.array.experimental.conversions"], [54, "module-ivy.data_classes.array.experimental.creation"], [54, "module-ivy.data_classes.array.experimental.data_type"], [54, "module-ivy.data_classes.array.experimental.device"], [54, "module-ivy.data_classes.array.experimental.elementwise"], [54, "module-ivy.data_classes.array.experimental.general"], [54, "module-ivy.data_classes.array.experimental.gradients"], [54, "module-ivy.data_classes.array.experimental.image"], [54, "module-ivy.data_classes.array.experimental.layers"], [54, "module-ivy.data_classes.array.experimental.linear_algebra"], [54, "module-ivy.data_classes.array.experimental.losses"], [54, "module-ivy.data_classes.array.experimental.manipulation"], [54, "module-ivy.data_classes.array.experimental.norms"], [54, "module-ivy.data_classes.array.experimental.random"], [54, "module-ivy.data_classes.array.experimental.searching"], [54, "module-ivy.data_classes.array.experimental.set"], [54, "module-ivy.data_classes.array.experimental.sorting"], [54, "module-ivy.data_classes.array.experimental.statistical"], [54, "module-ivy.data_classes.array.experimental.utility"], [55, "module-ivy.data_classes.array.general"], [56, "module-ivy.data_classes.array.gradients"], [57, "module-ivy.data_classes.array.image"], [58, "module-ivy.data_classes.array.layers"], [59, "module-ivy.data_classes.array.linear_algebra"], [60, "module-ivy.data_classes.array.losses"], [61, "module-ivy.data_classes.array.manipulation"], [62, "module-ivy.data_classes.array.norms"], [63, "module-ivy.data_classes.array.random"], [64, "module-ivy.data_classes.array.searching"], [65, "module-ivy.data_classes.array.set"], [66, "module-ivy.data_classes.array.sorting"], [67, "module-ivy.data_classes.array.statistical"], [68, "module-ivy.data_classes.array.utility"], [69, "module-ivy.data_classes.array.wrapping"], [70, "module-ivy.data_classes.container.activations"], [71, "module-ivy.data_classes.container.base"], [72, "module-ivy.data_classes.container.conversions"], [73, "module-ivy.data_classes.container.creation"], [74, "module-ivy.data_classes.container.data_type"], [75, "module-ivy.data_classes.container.device"], [76, "module-ivy.data_classes.container.elementwise"], [77, "module-ivy.data_classes.container.experimental"], [77, "module-ivy.data_classes.container.experimental.activations"], [77, "module-ivy.data_classes.container.experimental.conversions"], [77, "module-ivy.data_classes.container.experimental.creation"], [77, "module-ivy.data_classes.container.experimental.data_type"], [77, "module-ivy.data_classes.container.experimental.device"], [77, "module-ivy.data_classes.container.experimental.elementwise"], [77, "module-ivy.data_classes.container.experimental.general"], [77, "module-ivy.data_classes.container.experimental.gradients"], [77, "module-ivy.data_classes.container.experimental.image"], [77, "module-ivy.data_classes.container.experimental.layers"], [77, "module-ivy.data_classes.container.experimental.linear_algebra"], [77, "module-ivy.data_classes.container.experimental.losses"], [77, "module-ivy.data_classes.container.experimental.manipulation"], [77, "module-ivy.data_classes.container.experimental.norms"], [77, "module-ivy.data_classes.container.experimental.random"], [77, "module-ivy.data_classes.container.experimental.searching"], [77, "module-ivy.data_classes.container.experimental.set"], [77, "module-ivy.data_classes.container.experimental.sorting"], [77, "module-ivy.data_classes.container.experimental.statistical"], [77, "module-ivy.data_classes.container.experimental.utility"], [78, "module-ivy.data_classes.container.general"], [79, "module-ivy.data_classes.container.gradients"], [80, "module-ivy.data_classes.container.image"], [81, "module-ivy.data_classes.container.layers"], [82, "module-ivy.data_classes.container.linear_algebra"], [83, "module-ivy.data_classes.container.losses"], [84, "module-ivy.data_classes.container.manipulation"], [85, "module-ivy.data_classes.container.norms"], [86, "module-ivy.data_classes.container.random"], [87, "module-ivy.data_classes.container.searching"], [88, "module-ivy.data_classes.container.set"], [89, "module-ivy.data_classes.container.sorting"], [90, "module-ivy.data_classes.container.statistical"], [91, "module-ivy.data_classes.container.utility"], [92, "module-ivy.data_classes.container.wrapping"], [93, "module-ivy.data_classes.factorized_tensor.base"], [94, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [96, "module-ivy.data_classes.array.array"], [97, "module-ivy.data_classes.container.container"], [99, "module-ivy.data_classes.nested_array.nested_array"], [100, "module-ivy.data_classes.nested_array.base"], [101, "module-ivy.data_classes.nested_array.elementwise"], [347, "module-ivy.functional.ivy.experimental.activations"], [348, "module-ivy.functional.ivy.experimental.constants"], [349, "module-ivy.functional.ivy.experimental.creation"], [350, "module-ivy.functional.ivy.experimental.data_type"], [351, "module-ivy.functional.ivy.experimental.device"], [352, "module-ivy.functional.ivy.experimental.elementwise"], [353, "module-ivy.functional.ivy.experimental.general"], [354, "module-ivy.functional.ivy.experimental.gradients"], [355, "module-ivy.functional.ivy.experimental.layers"], [356, "module-ivy.functional.ivy.experimental.linear_algebra"], [357, "module-ivy.functional.ivy.experimental.losses"], [358, "module-ivy.functional.ivy.experimental.manipulation"], [359, "module-ivy.functional.ivy.experimental.meta"], [360, "module-ivy.functional.ivy.experimental.nest"], [361, "module-ivy.functional.ivy.experimental.norms"], [362, "module-ivy.functional.ivy.experimental.random"], [363, "module-ivy.functional.ivy.experimental.searching"], [364, "module-ivy.functional.ivy.experimental.set"], [365, "module-ivy.functional.ivy.experimental.sorting"], [366, "module-ivy.functional.ivy.experimental.sparse_array"], [367, "module-ivy.functional.ivy.experimental.statistical"], [368, "module-ivy.functional.ivy.experimental.utility"], [583, "module-ivy.functional.ivy.activations"], [584, "module-ivy.functional.ivy.constants"], [585, "module-ivy.functional.ivy.control_flow_ops"], [586, "module-ivy.functional.ivy.creation"], [587, "module-ivy.functional.ivy.data_type"], [588, "module-ivy.functional.ivy.device"], [589, "module-ivy.functional.ivy.elementwise"], [590, "module-ivy.functional.ivy.experimental"], [591, "module-ivy.functional.ivy.general"], [592, "module-ivy.functional.ivy.gradients"], [593, "module-ivy.functional.ivy.layers"], [594, "module-ivy.functional.ivy.linear_algebra"], [595, "module-ivy.functional.ivy.losses"], [596, "module-ivy.functional.ivy.manipulation"], [597, "module-ivy.functional.ivy.meta"], [598, "module-ivy.functional.ivy.nest"], [599, "module-ivy.functional.ivy.norms"], [600, "module-ivy.functional.ivy.random"], [601, "module-ivy.functional.ivy.searching"], [602, "module-ivy.functional.ivy.set"], [603, "module-ivy.functional.ivy.sorting"], [604, "module-ivy.functional.ivy.statistical"], [605, "module-ivy.functional.ivy.utility"], [728, "module-ivy.stateful.activations"], [729, "module-ivy.stateful.converters"], [730, "module-ivy.stateful.helpers"], [731, "module-ivy.stateful.initializers"], [732, "module-ivy.stateful.layers"], [733, "module-ivy.stateful.losses"], [734, "module-ivy.stateful.module"], [735, "module-ivy.stateful.norms"], [736, "module-ivy.stateful.optimizers"], [737, "module-ivy.stateful.sequential"], [738, "module-ivy.utils.assertions"], [739, "module-ivy.utils.backend"], [740, "module-ivy.utils.backend.ast_helpers"], [741, "module-ivy.utils.backend.handler"], [742, "module-ivy.utils.backend.sub_backend_handler"], [743, "module-ivy.utils.dynamic_import"], [744, "module-ivy.utils.einsum_parser"], [745, "module-ivy.utils.exceptions"], [746, "module-ivy.utils.inspection"], [747, "module-ivy.utils.logging"], [748, "module-ivy.utils.profiler"], [749, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[49, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[50, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[51, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[52, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[52, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[52, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[53, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[54, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[54, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[54, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[54, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[54, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[54, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[54, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[54, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[54, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[54, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[54, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[54, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[54, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[54, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[54, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[54, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[54, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[54, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[54, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[54, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[55, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[56, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[57, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[57, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[57, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[58, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[59, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[60, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[61, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[62, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[63, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[63, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[63, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[64, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[65, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[65, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[65, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[66, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[67, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[68, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[69, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[70, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[71, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[71, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[72, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[73, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[74, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[75, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[75, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[76, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[77, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[77, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[77, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[77, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[77, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[77, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[77, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[77, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[77, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[77, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[77, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[77, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[77, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[77, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[77, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[77, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[77, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[77, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[77, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[77, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[78, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[79, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[80, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[80, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[80, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[81, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[82, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[83, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[84, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[85, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[86, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[86, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[87, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[88, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[88, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[88, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[89, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[90, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[91, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[92, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[93, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[96, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[96, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[97, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[97, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[99, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[100, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[101, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[104, "ivy.gelu"], [583, "ivy.gelu"]], "gelu() (ivy.array method)": [[104, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[104, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[105, "ivy.hardswish"], [583, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[105, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[105, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[106, "ivy.leaky_relu"], [583, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[106, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[106, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[107, "ivy.log_softmax"], [583, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[107, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[107, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[108, "ivy.mish"], [583, "ivy.mish"]], "mish() (ivy.array method)": [[108, "ivy.Array.mish"]], "mish() (ivy.container method)": [[108, "ivy.Container.mish"]], "relu() (in module ivy)": [[109, "ivy.relu"], [583, "ivy.relu"]], "relu() (ivy.array method)": [[109, "ivy.Array.relu"]], "relu() (ivy.container method)": [[109, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[110, "ivy.sigmoid"], [583, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[110, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[110, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[111, "ivy.softmax"], [583, "ivy.softmax"]], "softmax() (ivy.array method)": [[111, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[111, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[112, "ivy.softplus"], [583, "ivy.softplus"]], "softplus() (ivy.array method)": [[112, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[112, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[113, "ivy.softsign"], [583, "ivy.softsign"]], "cast_bool() (in module ivy)": [[114, "ivy.cast_bool"], [585, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[115, "ivy.cmp_is"], [585, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[116, "ivy.cmp_isnot"], [585, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[117, "ivy.for_loop"], [585, "ivy.for_loop"]], "if_else() (in module ivy)": [[118, "ivy.if_else"], [585, "ivy.if_else"]], "try_except() (in module ivy)": [[119, "ivy.try_except"], [585, "ivy.try_except"]], "while_loop() (in module ivy)": [[120, "ivy.while_loop"], [585, "ivy.while_loop"]], "arange() (in module ivy)": [[121, "ivy.arange"], [586, "ivy.arange"]], "array() (in module ivy)": [[122, "ivy.array"], [586, "ivy.array"]], "asarray() (in module ivy)": [[123, "ivy.asarray"], [586, "ivy.asarray"]], "asarray() (ivy.array method)": [[123, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[123, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[124, "ivy.asarray_handle_nestable"], [586, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[125, "ivy.asarray_infer_device"], [586, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[126, "ivy.asarray_infer_dtype"], [586, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[127, "ivy.asarray_inputs_to_native_shapes"], [586, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[128, "ivy.asarray_to_native_arrays_and_back"], [586, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[129, "ivy.copy_array"], [586, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[129, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[129, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[130, "ivy.empty"], [586, "ivy.empty"]], "empty_like() (in module ivy)": [[131, "ivy.empty_like"], [586, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[131, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[131, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[132, "ivy.eye"], [586, "ivy.eye"]], "from_dlpack() (in module ivy)": [[133, "ivy.from_dlpack"], [586, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[133, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[133, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[134, "ivy.frombuffer"], [586, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[134, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[135, "ivy.full"], [586, "ivy.full"]], "full_like() (in module ivy)": [[136, "ivy.full_like"], [586, "ivy.full_like"]], "full_like() (ivy.array method)": [[136, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[136, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[137, "ivy.linspace"], [586, "ivy.linspace"]], "linspace() (ivy.array method)": [[137, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[137, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[138, "ivy.logspace"], [586, "ivy.logspace"]], "logspace() (ivy.array method)": [[138, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[138, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[139, "ivy.meshgrid"], [586, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[139, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[139, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[140, "ivy.native_array"], [586, "ivy.native_array"]], "native_array() (ivy.array method)": [[140, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[140, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[141, "ivy.one_hot"], [586, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[141, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[141, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[142, "ivy.ones"], [586, "ivy.ones"]], "ones_like() (in module ivy)": [[143, "ivy.ones_like"], [586, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[143, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[143, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[144, "ivy.tril"], [586, "ivy.tril"]], "tril() (ivy.array method)": [[144, "ivy.Array.tril"]], "tril() (ivy.container method)": [[144, "ivy.Container.tril"]], "triu() (in module ivy)": [[145, "ivy.triu"], [586, "ivy.triu"]], "triu() (ivy.array method)": [[145, "ivy.Array.triu"]], "triu() (ivy.container method)": [[145, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[146, "ivy.triu_indices"], [586, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[146, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[147, "ivy.zeros"], [586, "ivy.zeros"]], "zeros_like() (in module ivy)": [[148, "ivy.zeros_like"], [586, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[148, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[148, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[149, "ivy.as_ivy_dtype"], [587, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[150, "ivy.as_native_dtype"], [587, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[151, "ivy.astype"], [587, "ivy.astype"]], "astype() (ivy.array method)": [[151, "ivy.Array.astype"]], "astype() (ivy.container method)": [[151, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[152, "ivy.broadcast_arrays"], [587, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[152, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[152, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[153, "ivy.broadcast_to"], [587, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[153, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[153, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[154, "ivy.can_cast"], [587, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[154, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[154, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[155, "ivy.check_float"], [587, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[156, "ivy.closest_valid_dtype"], [587, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[157, "ivy.default_complex_dtype"], [587, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[158, "ivy.default_dtype"], [587, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[159, "ivy.default_float_dtype"], [587, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[160, "ivy.default_int_dtype"], [587, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[161, "ivy.default_uint_dtype"], [587, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[162, "ivy.dtype"], [587, "ivy.dtype"]], "dtype() (ivy.array method)": [[162, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[162, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[163, "ivy.dtype_bits"], [587, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[164, "ivy.finfo"], [587, "ivy.finfo"]], "finfo() (ivy.array method)": [[164, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[164, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[165, "ivy.function_supported_dtypes"], [587, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[166, "ivy.function_unsupported_dtypes"], [587, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[167, "ivy.iinfo"], [587, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[167, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[167, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[168, "ivy.infer_default_dtype"], [587, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[169, "ivy.invalid_dtype"], [587, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[170, "ivy.is_bool_dtype"], [587, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[170, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[170, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[171, "ivy.is_complex_dtype"], [587, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[171, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[172, "ivy.is_float_dtype"], [587, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[172, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[172, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[173, "ivy.is_hashable_dtype"], [587, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[174, "ivy.is_int_dtype"], [587, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[174, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[174, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[175, "ivy.is_native_dtype"], [587, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[176, "ivy.is_uint_dtype"], [587, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[176, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[176, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[177, "ivy.promote_types"], [587, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[178, "ivy.promote_types_of_inputs"], [587, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[179, "ivy.result_type"], [587, "ivy.result_type"]], "result_type() (ivy.array method)": [[179, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[179, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[180, "ivy.set_default_complex_dtype"], [587, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[181, "ivy.set_default_dtype"], [587, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[182, "ivy.set_default_float_dtype"], [587, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[183, "ivy.set_default_int_dtype"], [587, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[184, "ivy.set_default_uint_dtype"], [587, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[185, "ivy.type_promote_arrays"], [587, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[186, "ivy.unset_default_complex_dtype"], [587, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[187, "ivy.unset_default_dtype"], [587, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[188, "ivy.unset_default_float_dtype"], [587, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[189, "ivy.unset_default_int_dtype"], [587, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[190, "ivy.unset_default_uint_dtype"], [587, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[191, "ivy.valid_dtype"], [587, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[192, "ivy.as_ivy_dev"], [588, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[193, "ivy.as_native_dev"], [588, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[194, "ivy.clear_cached_mem_on_dev"], [588, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[195, "ivy.default_device"], [588, "ivy.default_device"]], "dev() (in module ivy)": [[196, "ivy.dev"], [588, "ivy.dev"]], "dev() (ivy.array method)": [[196, "ivy.Array.dev"]], "dev() (ivy.container method)": [[196, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[197, "ivy.dev_util"], [588, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[198, "ivy.function_supported_devices"], [588, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[199, "ivy.function_unsupported_devices"], [588, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[200, "ivy.get_all_ivy_arrays_on_dev"], [588, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[201, "ivy.gpu_is_available"], [588, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[202, "ivy.handle_soft_device_variable"], [588, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[203, "ivy.num_cpu_cores"], [588, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[204, "ivy.num_gpus"], [588, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[205, "ivy.num_ivy_arrays_on_dev"], [588, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[206, "ivy.percent_used_mem_on_dev"], [588, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[207, "ivy.print_all_ivy_arrays_on_dev"], [588, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[208, "ivy.set_default_device"], [588, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[209, "ivy.set_soft_device_mode"], [588, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[210, "ivy.set_split_factor"], [588, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[211, "ivy.split_factor"], [588, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[212, "ivy.split_func_call"], [588, "ivy.split_func_call"]], "to_device() (in module ivy)": [[213, "ivy.to_device"], [588, "ivy.to_device"]], "to_device() (ivy.array method)": [[213, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[213, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[214, "ivy.total_mem_on_dev"], [588, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[215, "ivy.tpu_is_available"], [588, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[216, "ivy.unset_default_device"], [588, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[217, "ivy.unset_soft_device_mode"], [588, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[218, "ivy.used_mem_on_dev"], [588, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[219, "ivy.abs"], [589, "ivy.abs"]], "abs() (ivy.array method)": [[219, "ivy.Array.abs"]], "abs() (ivy.container method)": [[219, "ivy.Container.abs"]], "acos() (in module ivy)": [[220, "ivy.acos"], [589, "ivy.acos"]], "acos() (ivy.array method)": [[220, "ivy.Array.acos"]], "acos() (ivy.container method)": [[220, "ivy.Container.acos"]], "acosh() (in module ivy)": [[221, "ivy.acosh"], [589, "ivy.acosh"]], "acosh() (ivy.array method)": [[221, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[221, "ivy.Container.acosh"]], "add() (in module ivy)": [[222, "ivy.add"], [589, "ivy.add"]], "add() (ivy.array method)": [[222, "ivy.Array.add"]], "add() (ivy.container method)": [[222, "ivy.Container.add"]], "angle() (in module ivy)": [[223, "ivy.angle"], [589, "ivy.angle"]], "angle() (ivy.array method)": [[223, "ivy.Array.angle"]], "angle() (ivy.container method)": [[223, "ivy.Container.angle"]], "asin() (in module ivy)": [[224, "ivy.asin"], [589, "ivy.asin"]], "asin() (ivy.array method)": [[224, "ivy.Array.asin"]], "asin() (ivy.container method)": [[224, "ivy.Container.asin"]], "asinh() (in module ivy)": [[225, "ivy.asinh"], [589, "ivy.asinh"]], "asinh() (ivy.array method)": [[225, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[225, "ivy.Container.asinh"]], "atan() (in module ivy)": [[226, "ivy.atan"], [589, "ivy.atan"]], "atan() (ivy.array method)": [[226, "ivy.Array.atan"]], "atan() (ivy.container method)": [[226, "ivy.Container.atan"]], "atan2() (in module ivy)": [[227, "ivy.atan2"], [589, "ivy.atan2"]], "atan2() (ivy.array method)": [[227, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[227, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[228, "ivy.atanh"], [589, "ivy.atanh"]], "atanh() (ivy.array method)": [[228, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[228, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[229, "ivy.bitwise_and"], [589, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[229, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[229, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[230, "ivy.bitwise_invert"], [589, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[230, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[230, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[231, "ivy.bitwise_left_shift"], [589, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[231, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[231, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[232, "ivy.bitwise_or"], [589, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[232, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[232, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[233, "ivy.bitwise_right_shift"], [589, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[233, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[233, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[234, "ivy.bitwise_xor"], [589, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[234, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[234, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[235, "ivy.ceil"], [589, "ivy.ceil"]], "ceil() (ivy.array method)": [[235, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[235, "ivy.Container.ceil"]], "cos() (in module ivy)": [[236, "ivy.cos"], [589, "ivy.cos"]], "cos() (ivy.array method)": [[236, "ivy.Array.cos"]], "cos() (ivy.container method)": [[236, "ivy.Container.cos"]], "cosh() (in module ivy)": [[237, "ivy.cosh"], [589, "ivy.cosh"]], "cosh() (ivy.array method)": [[237, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[237, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[238, "ivy.deg2rad"], [589, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[238, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[238, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[239, "ivy.divide"], [589, "ivy.divide"]], "divide() (ivy.array method)": [[239, "ivy.Array.divide"]], "divide() (ivy.container method)": [[239, "ivy.Container.divide"]], "equal() (in module ivy)": [[240, "ivy.equal"], [589, "ivy.equal"]], "equal() (ivy.array method)": [[240, "ivy.Array.equal"]], "equal() (ivy.container method)": [[240, "ivy.Container.equal"]], "erf() (in module ivy)": [[241, "ivy.erf"], [589, "ivy.erf"]], "erf() (ivy.array method)": [[241, "ivy.Array.erf"]], "erf() (ivy.container method)": [[241, "ivy.Container.erf"]], "exp() (in module ivy)": [[242, "ivy.exp"], [589, "ivy.exp"]], "exp() (ivy.array method)": [[242, "ivy.Array.exp"]], "exp() (ivy.container method)": [[242, "ivy.Container.exp"]], "exp2() (in module ivy)": [[243, "ivy.exp2"], [589, "ivy.exp2"]], "exp2() (ivy.array method)": [[243, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[243, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[244, "ivy.expm1"], [589, "ivy.expm1"]], "expm1() (ivy.array method)": [[244, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[244, "ivy.Container.expm1"]], "floor() (in module ivy)": [[245, "ivy.floor"], [589, "ivy.floor"]], "floor() (ivy.array method)": [[245, "ivy.Array.floor"]], "floor() (ivy.container method)": [[245, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[246, "ivy.floor_divide"], [589, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[246, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[246, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[247, "ivy.fmin"], [589, "ivy.fmin"]], "fmin() (ivy.array method)": [[247, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[247, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[248, "ivy.fmod"], [589, "ivy.fmod"]], "fmod() (ivy.array method)": [[248, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[248, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[249, "ivy.gcd"], [589, "ivy.gcd"]], "gcd() (ivy.array method)": [[249, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[249, "ivy.Container.gcd"]], "greater() (in module ivy)": [[250, "ivy.greater"], [589, "ivy.greater"]], "greater() (ivy.array method)": [[250, "ivy.Array.greater"]], "greater() (ivy.container method)": [[250, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[251, "ivy.greater_equal"], [589, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[251, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[251, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[252, "ivy.imag"], [589, "ivy.imag"]], "imag() (ivy.array method)": [[252, "ivy.Array.imag"]], "imag() (ivy.container method)": [[252, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[253, "ivy.isfinite"], [589, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[253, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[253, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[254, "ivy.isinf"], [589, "ivy.isinf"]], "isinf() (ivy.array method)": [[254, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[254, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[255, "ivy.isnan"], [589, "ivy.isnan"]], "isnan() (ivy.array method)": [[255, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[255, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[256, "ivy.isreal"], [589, "ivy.isreal"]], "isreal() (ivy.array method)": [[256, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[256, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[257, "ivy.lcm"], [589, "ivy.lcm"]], "lcm() (ivy.array method)": [[257, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[257, "ivy.Container.lcm"]], "less() (in module ivy)": [[258, "ivy.less"], [589, "ivy.less"]], "less() (ivy.array method)": [[258, "ivy.Array.less"]], "less() (ivy.container method)": [[258, "ivy.Container.less"]], "less_equal() (in module ivy)": [[259, "ivy.less_equal"], [589, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[259, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[259, "ivy.Container.less_equal"]], "log() (in module ivy)": [[260, "ivy.log"], [589, "ivy.log"]], "log() (ivy.array method)": [[260, "ivy.Array.log"]], "log() (ivy.container method)": [[260, "ivy.Container.log"]], "log10() (in module ivy)": [[261, "ivy.log10"], [589, "ivy.log10"]], "log10() (ivy.array method)": [[261, "ivy.Array.log10"]], "log10() (ivy.container method)": [[261, "ivy.Container.log10"]], "log1p() (in module ivy)": [[262, "ivy.log1p"], [589, "ivy.log1p"]], "log1p() (ivy.array method)": [[262, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[262, "ivy.Container.log1p"]], "log2() (in module ivy)": [[263, "ivy.log2"], [589, "ivy.log2"]], "log2() (ivy.array method)": [[263, "ivy.Array.log2"]], "log2() (ivy.container method)": [[263, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[264, "ivy.logaddexp"], [589, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[264, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[264, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[265, "ivy.logaddexp2"], [589, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[265, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[265, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[266, "ivy.logical_and"], [589, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[266, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[266, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[267, "ivy.logical_not"], [589, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[267, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[267, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[268, "ivy.logical_or"], [589, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[268, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[268, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[269, "ivy.logical_xor"], [589, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[269, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[269, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[270, "ivy.maximum"], [589, "ivy.maximum"]], "maximum() (ivy.array method)": [[270, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[270, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[271, "ivy.minimum"], [589, "ivy.minimum"]], "minimum() (ivy.array method)": [[271, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[271, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[272, "ivy.multiply"], [589, "ivy.multiply"]], "multiply() (ivy.array method)": [[272, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[272, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[273, "ivy.nan_to_num"], [589, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[273, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[273, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[274, "ivy.negative"], [589, "ivy.negative"]], "negative() (ivy.array method)": [[274, "ivy.Array.negative"]], "negative() (ivy.container method)": [[274, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[275, "ivy.not_equal"], [589, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[275, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[275, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[276, "ivy.positive"], [589, "ivy.positive"]], "positive() (ivy.array method)": [[276, "ivy.Array.positive"]], "positive() (ivy.container method)": [[276, "ivy.Container.positive"]], "pow() (in module ivy)": [[277, "ivy.pow"], [589, "ivy.pow"]], "pow() (ivy.array method)": [[277, "ivy.Array.pow"]], "pow() (ivy.container method)": [[277, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[278, "ivy.rad2deg"], [589, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[278, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[278, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[279, "ivy.real"], [589, "ivy.real"]], "real() (ivy.array method)": [[279, "ivy.Array.real"]], "real() (ivy.container method)": [[279, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[280, "ivy.reciprocal"], [589, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[280, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[280, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[281, "ivy.remainder"], [589, "ivy.remainder"]], "remainder() (ivy.array method)": [[281, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[281, "ivy.Container.remainder"]], "round() (in module ivy)": [[282, "ivy.round"], [589, "ivy.round"]], "round() (ivy.array method)": [[282, "ivy.Array.round"]], "round() (ivy.container method)": [[282, "ivy.Container.round"]], "sign() (in module ivy)": [[283, "ivy.sign"], [589, "ivy.sign"]], "sign() (ivy.array method)": [[283, "ivy.Array.sign"]], "sign() (ivy.container method)": [[283, "ivy.Container.sign"]], "sin() (in module ivy)": [[284, "ivy.sin"], [589, "ivy.sin"]], "sin() (ivy.array method)": [[284, "ivy.Array.sin"]], "sin() (ivy.container method)": [[284, "ivy.Container.sin"]], "sinh() (in module ivy)": [[285, "ivy.sinh"], [589, "ivy.sinh"]], "sinh() (ivy.array method)": [[285, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[285, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[286, "ivy.sqrt"], [589, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[286, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[286, "ivy.Container.sqrt"]], "square() (in module ivy)": [[287, "ivy.square"], [589, "ivy.square"]], "square() (ivy.array method)": [[287, "ivy.Array.square"]], "square() (ivy.container method)": [[287, "ivy.Container.square"]], "subtract() (in module ivy)": [[288, "ivy.subtract"], [589, "ivy.subtract"]], "subtract() (ivy.array method)": [[288, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[288, "ivy.Container.subtract"]], "tan() (in module ivy)": [[289, "ivy.tan"], [589, "ivy.tan"]], "tan() (ivy.array method)": [[289, "ivy.Array.tan"]], "tan() (ivy.container method)": [[289, "ivy.Container.tan"]], "tanh() (in module ivy)": [[290, "ivy.tanh"], [589, "ivy.tanh"]], "tanh() (ivy.array method)": [[290, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[290, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[291, "ivy.trapz"], [589, "ivy.trapz"]], "trapz() (ivy.array method)": [[291, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[291, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[292, "ivy.trunc"], [589, "ivy.trunc"]], "trunc() (ivy.array method)": [[292, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[292, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[293, "ivy.trunc_divide"], [589, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[293, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[293, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[294, "ivy.elu"], [347, "ivy.elu"]], "elu() (ivy.array method)": [[294, "ivy.Array.elu"]], "elu() (ivy.container method)": [[294, "ivy.Container.elu"]], "logit() (in module ivy)": [[295, "ivy.logit"], [347, "ivy.logit"]], "logit() (ivy.array method)": [[295, "ivy.Array.logit"]], "logit() (ivy.container method)": [[295, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[296, "ivy.logsigmoid"], [347, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[296, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[296, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[297, "ivy.prelu"], [347, "ivy.prelu"]], "prelu() (ivy.array method)": [[297, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[297, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[298, "ivy.relu6"], [347, "ivy.relu6"]], "relu6() (ivy.array method)": [[298, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[298, "ivy.Container.relu6"]], "selu() (in module ivy)": [[299, "ivy.selu"], [347, "ivy.selu"]], "selu() (ivy.array method)": [[299, "ivy.Array.selu"]], "selu() (ivy.container method)": [[299, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[300, "ivy.sequence_length"], [347, "ivy.sequence_length"]], "silu() (in module ivy)": [[301, "ivy.silu"], [347, "ivy.silu"]], "silu() (ivy.array method)": [[301, "ivy.Array.silu"]], "silu() (ivy.container method)": [[301, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[302, "ivy.thresholded_relu"], [347, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[302, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[302, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[303, "ivy.blackman_window"], [349, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[303, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[303, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[304, "ivy.eye_like"], [349, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[304, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[304, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[305, "ivy.hamming_window"], [349, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[305, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[306, "ivy.hann_window"], [349, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[306, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[307, "ivy.indices"], [349, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[308, "ivy.kaiser_bessel_derived_window"], [349, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[308, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[309, "ivy.kaiser_window"], [349, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[309, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[310, "ivy.mel_weight_matrix"], [349, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[310, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[310, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[311, "ivy.ndenumerate"], [349, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[312, "ivy.ndindex"], [349, "ivy.ndindex"]], "random_cp() (in module ivy)": [[313, "ivy.random_cp"], [349, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[314, "ivy.random_tucker"], [349, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[315, "ivy.tril_indices"], [349, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[315, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[316, "ivy.trilu"], [349, "ivy.trilu"]], "trilu() (ivy.array method)": [[316, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[316, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[317, "ivy.unsorted_segment_min"], [349, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[317, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[317, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[318, "ivy.unsorted_segment_sum"], [349, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[318, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[318, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[319, "ivy.vorbis_window"], [349, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[319, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[320, "ivy.allclose"], [352, "ivy.allclose"]], "allclose() (ivy.array method)": [[320, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[320, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[321, "ivy.binarizer"], [352, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[321, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[321, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[322, "ivy.conj"], [352, "ivy.conj"]], "conj() (ivy.array method)": [[322, "ivy.Array.conj"]], "conj() (ivy.container method)": [[322, "ivy.Container.conj"]], "copysign() (in module ivy)": [[323, "ivy.copysign"], [352, "ivy.copysign"]], "copysign() (ivy.array method)": [[323, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[323, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[324, "ivy.count_nonzero"], [352, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[324, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[324, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[325, "ivy.diff"], [352, "ivy.diff"]], "diff() (ivy.array method)": [[325, "ivy.Array.diff"]], "diff() (ivy.container method)": [[325, "ivy.Container.diff"]], "digamma() (in module ivy)": [[326, "ivy.digamma"], [352, "ivy.digamma"]], "digamma() (ivy.array method)": [[326, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[326, "ivy.Container.digamma"]], "fix() (in module ivy)": [[327, "ivy.fix"], [352, "ivy.fix"]], "fix() (ivy.array method)": [[327, "ivy.Array.fix"]], "fix() (ivy.container method)": [[327, "ivy.Container.fix"]], "float_power() (in module ivy)": [[328, "ivy.float_power"], [352, "ivy.float_power"]], "float_power() (ivy.array method)": [[328, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[328, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[329, "ivy.fmax"], [352, "ivy.fmax"]], "fmax() (ivy.array method)": [[329, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[329, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[330, "ivy.frexp"], [352, "ivy.frexp"]], "frexp() (ivy.array method)": [[330, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[330, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[331, "ivy.gradient"], [352, "ivy.gradient"]], "gradient() (ivy.array method)": [[331, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[331, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[332, "ivy.hypot"], [352, "ivy.hypot"]], "hypot() (ivy.array method)": [[332, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[332, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[333, "ivy.isclose"], [352, "ivy.isclose"]], "isclose() (ivy.array method)": [[333, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[333, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[334, "ivy.ldexp"], [352, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[334, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[334, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[335, "ivy.lerp"], [352, "ivy.lerp"]], "lerp() (ivy.array method)": [[335, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[335, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[336, "ivy.lgamma"], [352, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[336, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[337, "ivy.modf"], [352, "ivy.modf"]], "modf() (ivy.array method)": [[337, "ivy.Array.modf"]], "modf() (ivy.container method)": [[337, "ivy.Container.modf"]], "nansum() (in module ivy)": [[338, "ivy.nansum"], [352, "ivy.nansum"]], "nansum() (ivy.array method)": [[338, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[338, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[339, "ivy.nextafter"], [352, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[339, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[339, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[340, "ivy.signbit"], [352, "ivy.signbit"]], "signbit() (ivy.array method)": [[340, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[340, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[341, "ivy.sinc"], [352, "ivy.sinc"]], "sinc() (ivy.array method)": [[341, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[341, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[342, "ivy.sparsify_tensor"], [352, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[342, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[342, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[343, "ivy.xlogy"], [352, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[343, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[343, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[344, "ivy.zeta"], [352, "ivy.zeta"]], "zeta() (ivy.array method)": [[344, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[344, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[345, "ivy.reduce"], [353, "ivy.reduce"]], "reduce() (ivy.array method)": [[345, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[345, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[346, "ivy.bind_custom_gradient_function"], [354, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[347, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[348, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[349, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[350, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[351, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[352, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[353, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[354, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[355, "ivy.adaptive_avg_pool1d"], [369, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[355, "ivy.adaptive_avg_pool2d"], [370, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[355, "ivy.adaptive_max_pool2d"], [371, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[355, "ivy.area_interpolate"], [372, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[355, "ivy.avg_pool1d"], [373, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[355, "ivy.avg_pool2d"], [374, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[355, "ivy.avg_pool3d"], [375, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[355, "ivy.dct"], [376, "ivy.dct"]], "dft() (in module ivy)": [[355, "ivy.dft"], [377, "ivy.dft"]], "dropout1d() (in module ivy)": [[355, "ivy.dropout1d"], [378, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[355, "ivy.dropout2d"], [379, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[355, "ivy.dropout3d"], [380, "ivy.dropout3d"]], "embedding() (in module ivy)": [[355, "ivy.embedding"], [381, "ivy.embedding"]], "fft() (in module ivy)": [[355, "ivy.fft"], [382, "ivy.fft"]], "fft2() (in module ivy)": [[355, "ivy.fft2"], [383, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[355, "ivy.generate_einsum_equation"], [384, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[355, "ivy.get_interpolate_kernel"], [385, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[355, "ivy.idct"], [386, "ivy.idct"]], "ifft() (in module ivy)": [[355, "ivy.ifft"], [387, "ivy.ifft"]], "ifftn() (in module ivy)": [[355, "ivy.ifftn"], [388, "ivy.ifftn"]], "interp() (in module ivy)": [[355, "ivy.interp"], [389, "ivy.interp"]], "interpolate() (in module ivy)": [[355, "ivy.interpolate"], [390, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[355, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[355, "ivy.max_pool1d"], [391, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[355, "ivy.max_pool2d"], [392, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[355, "ivy.max_pool3d"], [393, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[355, "ivy.max_unpool1d"], [394, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[355, "ivy.nearest_interpolate"], [395, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[355, "ivy.pool"], [396, "ivy.pool"]], "reduce_window() (in module ivy)": [[355, "ivy.reduce_window"], [397, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[355, "ivy.rfftn"], [398, "ivy.rfftn"]], "adjoint() (in module ivy)": [[356, "ivy.adjoint"], [399, "ivy.adjoint"]], "cond() (in module ivy)": [[356, "ivy.cond"], [400, "ivy.cond"]], "diagflat() (in module ivy)": [[356, "ivy.diagflat"], [401, "ivy.diagflat"]], "dot() (in module ivy)": [[356, "ivy.dot"], [402, "ivy.dot"]], "eig() (in module ivy)": [[356, "ivy.eig"], [403, "ivy.eig"], [594, "ivy.eig"], [626, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[356, "ivy.eigh_tridiagonal"], [404, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[356, "ivy.eigvals"], [405, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[356, "ivy.general_inner_product"], [406, "ivy.general_inner_product"]], "initialize_tucker() (in module ivy)": [[356, "ivy.initialize_tucker"], [407, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[356, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[356, "ivy.khatri_rao"], [408, "ivy.khatri_rao"]], "kron() (in module ivy)": [[356, "ivy.kron"], [409, "ivy.kron"]], "kronecker() (in module ivy)": [[356, "ivy.kronecker"], [410, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[356, "ivy.make_svd_non_negative"], [411, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[356, "ivy.matrix_exp"], [412, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[356, "ivy.mode_dot"], [413, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[356, "ivy.multi_dot"], [414, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[356, "ivy.multi_mode_dot"], [415, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[356, "ivy.partial_tucker"], [416, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[356, "ivy.svd_flip"], [417, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[356, "ivy.truncated_svd"], [418, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[356, "ivy.tucker"], [419, "ivy.tucker"]], "huber_loss() (in module ivy)": [[357, "ivy.huber_loss"], [420, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[357, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[357, "ivy.l1_loss"], [421, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[357, "ivy.log_poisson_loss"], [422, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[357, "ivy.smooth_l1_loss"], [423, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[357, "ivy.soft_margin_loss"], [424, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[358, "ivy.as_strided"], [425, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[358, "ivy.associative_scan"], [426, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[358, "ivy.atleast_1d"], [427, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[358, "ivy.atleast_2d"], [428, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[358, "ivy.atleast_3d"], [429, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[358, "ivy.broadcast_shapes"], [430, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[358, "ivy.choose"], [431, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[358, "ivy.concat_from_sequence"], [432, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[358, "ivy.dsplit"], [433, "ivy.dsplit"]], "dstack() (in module ivy)": [[358, "ivy.dstack"], [434, "ivy.dstack"]], "expand() (in module ivy)": [[358, "ivy.expand"], [435, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[358, "ivy.fill_diagonal"], [436, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[358, "ivy.flatten"], [437, "ivy.flatten"]], "fliplr() (in module ivy)": [[358, "ivy.fliplr"], [438, "ivy.fliplr"]], "flipud() (in module ivy)": [[358, "ivy.flipud"], [439, "ivy.flipud"]], "fold() (in module ivy)": [[358, "ivy.fold"], [440, "ivy.fold"]], "heaviside() (in module ivy)": [[358, "ivy.heaviside"], [441, "ivy.heaviside"]], "hsplit() (in module ivy)": [[358, "ivy.hsplit"], [442, "ivy.hsplit"]], "hstack() (in module ivy)": [[358, "ivy.hstack"], [443, "ivy.hstack"]], "i0() (in module ivy)": [[358, "ivy.i0"], [444, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[358, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[358, "ivy.matricize"], [445, "ivy.matricize"]], "moveaxis() (in module ivy)": [[358, "ivy.moveaxis"], [446, "ivy.moveaxis"]], "pad() (in module ivy)": [[358, "ivy.pad"], [447, "ivy.pad"]], "partial_fold() (in module ivy)": [[358, "ivy.partial_fold"], [448, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[358, "ivy.partial_tensor_to_vec"], [449, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[358, "ivy.partial_unfold"], [450, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[358, "ivy.partial_vec_to_tensor"], [451, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[358, "ivy.put_along_axis"], [452, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[358, "ivy.rot90"], [453, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[358, "ivy.soft_thresholding"], [454, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[358, "ivy.take_along_axis"], [455, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[358, "ivy.top_k"], [456, "ivy.top_k"]], "unfold() (in module ivy)": [[358, "ivy.unfold"], [457, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[358, "ivy.unique_consecutive"], [458, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[358, "ivy.vsplit"], [459, "ivy.vsplit"]], "vstack() (in module ivy)": [[358, "ivy.vstack"], [460, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[359, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[360, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[361, "ivy.batch_norm"], [461, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[361, "ivy.group_norm"], [462, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[361, "ivy.instance_norm"], [463, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[361, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[361, "ivy.l1_normalize"], [464, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[361, "ivy.l2_normalize"], [465, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[361, "ivy.lp_normalize"], [466, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[362, "ivy.bernoulli"], [467, "ivy.bernoulli"]], "beta() (in module ivy)": [[362, "ivy.beta"], [468, "ivy.beta"]], "dirichlet() (in module ivy)": [[362, "ivy.dirichlet"], [469, "ivy.dirichlet"]], "gamma() (in module ivy)": [[362, "ivy.gamma"], [470, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[362, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[362, "ivy.poisson"], [471, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[363, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[363, "ivy.unravel_index"], [472, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[364, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[365, "ivy.invert_permutation"], [473, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[365, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[365, "ivy.lexsort"], [474, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[366, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[366, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[366, "ivy.is_ivy_sparse_array"], [475, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[366, "ivy.is_native_sparse_array"], [476, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[366, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[366, "ivy.native_sparse_array"], [477, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[366, "ivy.native_sparse_array_to_indices_values_and_shape"], [478, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[367, "ivy.bincount"], [479, "ivy.bincount"]], "corrcoef() (in module ivy)": [[367, "ivy.corrcoef"], [480, "ivy.corrcoef"]], "cov() (in module ivy)": [[367, "ivy.cov"], [481, "ivy.cov"]], "cummax() (in module ivy)": [[367, "ivy.cummax"], [482, "ivy.cummax"]], "cummin() (in module ivy)": [[367, "ivy.cummin"], [483, "ivy.cummin"]], "histogram() (in module ivy)": [[367, "ivy.histogram"], [484, "ivy.histogram"]], "igamma() (in module ivy)": [[367, "ivy.igamma"], [485, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[367, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[367, "ivy.median"], [486, "ivy.median"]], "nanmean() (in module ivy)": [[367, "ivy.nanmean"], [487, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[367, "ivy.nanmedian"], [488, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[367, "ivy.nanprod"], [489, "ivy.nanprod"]], "quantile() (in module ivy)": [[367, "ivy.quantile"], [490, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[368, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[368, "ivy.optional_get_element"], [491, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[369, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[369, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[370, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[370, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[371, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[371, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[373, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[373, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[374, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[374, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[375, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[375, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[376, "ivy.Array.dct"]], "dct() (ivy.container method)": [[376, "ivy.Container.dct"]], "dft() (ivy.array method)": [[377, "ivy.Array.dft"]], "dft() (ivy.container method)": [[377, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[378, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[378, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[379, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[379, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[380, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[380, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[381, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[381, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[382, "ivy.Array.fft"]], "fft() (ivy.container method)": [[382, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[383, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[386, "ivy.Array.idct"]], "idct() (ivy.container method)": [[386, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[387, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[387, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[388, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[388, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[390, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[390, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[391, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[391, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[392, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[392, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[393, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[393, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[397, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[397, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[398, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[398, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[399, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[399, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[400, "ivy.Array.cond"]], "cond() (ivy.container method)": [[400, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[401, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[401, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[402, "ivy.Array.dot"]], "dot() (ivy.container method)": [[402, "ivy.Container.dot"]], "eig() (ivy.array method)": [[403, "ivy.Array.eig"], [626, "ivy.Array.eig"]], "eig() (ivy.container method)": [[403, "ivy.Container.eig"], [626, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[404, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[404, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[405, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[405, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[406, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[406, "ivy.Container.general_inner_product"]], "initialize_tucker() (ivy.array method)": [[407, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[407, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[409, "ivy.Array.kron"]], "kron() (ivy.container method)": [[409, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[411, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[411, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[412, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[412, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[413, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[413, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[414, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[414, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[415, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[415, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[416, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[416, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[417, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[417, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[418, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[418, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[419, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[419, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[420, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[420, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[421, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[421, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[423, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[423, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[424, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[424, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[425, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[425, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[426, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[426, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[427, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[427, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[428, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[428, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[429, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[429, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[430, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[432, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[432, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[433, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[433, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[434, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[434, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[435, "ivy.Array.expand"]], "expand() (ivy.container method)": [[435, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[436, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[436, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[437, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[437, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[438, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[438, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[439, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[439, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[440, "ivy.Array.fold"]], "fold() (ivy.container method)": [[440, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[441, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[441, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[442, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[442, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[443, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[443, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[444, "ivy.Array.i0"]], "i0() (ivy.container method)": [[444, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[445, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[445, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[446, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[446, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[447, "ivy.Array.pad"]], "pad() (ivy.container method)": [[447, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[448, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[448, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[449, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[449, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[450, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[450, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[451, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[451, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[453, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[453, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[454, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[454, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[455, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[455, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[456, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[456, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[457, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[457, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[458, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[458, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[459, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[459, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[460, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[460, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[461, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[461, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[462, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[462, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[463, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[463, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[464, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[464, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[465, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[465, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[466, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[466, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[467, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[467, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[468, "ivy.Array.beta"]], "beta() (ivy.container method)": [[468, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[469, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[469, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[470, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[470, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[471, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[471, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[472, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[472, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[473, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[474, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[474, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[479, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[479, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[480, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[480, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[481, "ivy.Array.cov"]], "cov() (ivy.container method)": [[481, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[482, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[482, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[483, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[483, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[484, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[484, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[485, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[485, "ivy.Container.igamma"]], "median() (ivy.array method)": [[486, "ivy.Array.median"]], "median() (ivy.container method)": [[486, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[487, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[487, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[488, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[488, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[489, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[489, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[490, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[490, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[491, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[491, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[492, "ivy.all_equal"], [591, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[492, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[492, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[493, "ivy.arg_info"], [591, "ivy.arg_info"]], "arg_names() (in module ivy)": [[494, "ivy.arg_names"], [591, "ivy.arg_names"]], "array_equal() (in module ivy)": [[495, "ivy.array_equal"], [591, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[495, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[495, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[496, "ivy.assert_supports_inplace"], [591, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[496, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[496, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[497, "ivy.cache_fn"], [591, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[498, "ivy.clip_matrix_norm"], [591, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[498, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[498, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[499, "ivy.clip_vector_norm"], [591, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[499, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[499, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[500, "ivy.container_types"], [591, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[501, "ivy.current_backend_str"], [591, "ivy.current_backend_str"]], "default() (in module ivy)": [[502, "ivy.default"], [591, "ivy.default"]], "default() (ivy.array method)": [[502, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[503, "ivy.einops_rearrange"], [591, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[503, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[503, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[504, "ivy.einops_reduce"], [591, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[504, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[504, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[505, "ivy.einops_repeat"], [591, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[505, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[505, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[506, "ivy.exists"], [591, "ivy.exists"]], "exists() (ivy.array method)": [[506, "ivy.Array.exists"]], "exists() (ivy.container method)": [[506, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[507, "ivy.fourier_encode"], [591, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[507, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[507, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[508, "ivy.function_supported_devices_and_dtypes"], [591, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[509, "ivy.function_unsupported_devices_and_dtypes"], [591, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[510, "ivy.gather"], [591, "ivy.gather"]], "gather() (ivy.array method)": [[510, "ivy.Array.gather"]], "gather() (ivy.container method)": [[510, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[511, "ivy.gather_nd"], [591, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[511, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[511, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[512, "ivy.get_all_arrays_in_memory"], [591, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[513, "ivy.get_item"], [591, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[514, "ivy.get_num_dims"], [591, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[514, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[514, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[515, "ivy.get_referrers_recursive"], [591, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[516, "ivy.has_nans"], [591, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[516, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[516, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[517, "ivy.inplace_arrays_supported"], [591, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[518, "ivy.inplace_decrement"], [591, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[518, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[518, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[519, "ivy.inplace_increment"], [591, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[519, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[519, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[520, "ivy.inplace_update"], [591, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[520, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[520, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[521, "ivy.inplace_variables_supported"], [591, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[522, "ivy.is_array"], [591, "ivy.is_array"]], "is_array() (ivy.array method)": [[522, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[522, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[523, "ivy.is_ivy_array"], [591, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[523, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[523, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[524, "ivy.is_ivy_container"], [591, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[524, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[525, "ivy.is_ivy_nested_array"], [591, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[526, "ivy.is_native_array"], [591, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[526, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[526, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[527, "ivy.isin"], [591, "ivy.isin"]], "isin() (ivy.array method)": [[527, "ivy.Array.isin"]], "isin() (ivy.container method)": [[527, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[528, "ivy.isscalar"], [591, "ivy.isscalar"]], "itemsize() (in module ivy)": [[529, "ivy.itemsize"], [591, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[529, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[529, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[530, "ivy.match_kwargs"], [591, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[531, "ivy.multiprocessing"], [591, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[532, "ivy.num_arrays_in_memory"], [591, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[533, "ivy.print_all_arrays_in_memory"], [591, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[534, "ivy.scatter_flat"], [591, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[534, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[534, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[535, "ivy.scatter_nd"], [591, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[535, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[535, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[536, "ivy.set_array_mode"], [591, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[537, "ivy.set_exception_trace_mode"], [591, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[538, "ivy.set_inplace_mode"], [591, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[539, "ivy.set_item"], [591, "ivy.set_item"]], "set_min_base() (in module ivy)": [[540, "ivy.set_min_base"], [591, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[541, "ivy.set_min_denominator"], [591, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[542, "ivy.set_nestable_mode"], [591, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[543, "ivy.set_precise_mode"], [591, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[544, "ivy.set_queue_timeout"], [591, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[545, "ivy.set_shape_array_mode"], [591, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[546, "ivy.set_show_func_wrapper_trace_mode"], [591, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[547, "ivy.set_tmp_dir"], [591, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[548, "ivy.shape"], [591, "ivy.shape"]], "shape() (ivy.array method)": [[548, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[549, "ivy.stable_divide"], [591, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[549, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[549, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[550, "ivy.stable_pow"], [591, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[550, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[550, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[551, "ivy.strides"], [591, "ivy.strides"]], "strides() (ivy.array method)": [[551, "ivy.Array.strides"]], "strides() (ivy.container method)": [[551, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[552, "ivy.supports_inplace_updates"], [591, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[552, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[552, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[553, "ivy.to_ivy_shape"], [591, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[554, "ivy.to_list"], [591, "ivy.to_list"]], "to_list() (ivy.array method)": [[554, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[554, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[555, "ivy.to_native_shape"], [591, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[556, "ivy.to_numpy"], [591, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[556, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[556, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[557, "ivy.to_scalar"], [591, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[557, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[557, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[558, "ivy.try_else_none"], [591, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[559, "ivy.unset_array_mode"], [591, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[560, "ivy.unset_exception_trace_mode"], [591, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[561, "ivy.unset_inplace_mode"], [591, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[562, "ivy.unset_min_base"], [591, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[563, "ivy.unset_min_denominator"], [591, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[564, "ivy.unset_nestable_mode"], [591, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[565, "ivy.unset_precise_mode"], [591, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[566, "ivy.unset_queue_timeout"], [591, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[567, "ivy.unset_shape_array_mode"], [591, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[568, "ivy.unset_show_func_wrapper_trace_mode"], [591, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[569, "ivy.unset_tmp_dir"], [591, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[570, "ivy.value_is_nan"], [591, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[570, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[570, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[571, "ivy.vmap"], [591, "ivy.vmap"]], "adam_step() (in module ivy)": [[572, "ivy.adam_step"], [592, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[572, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[572, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[573, "ivy.adam_update"], [592, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[573, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[573, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[574, "ivy.execute_with_gradients"], [592, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[575, "ivy.grad"], [592, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[576, "ivy.gradient_descent_update"], [592, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[576, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[576, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[577, "ivy.jac"], [592, "ivy.jac"]], "lamb_update() (in module ivy)": [[578, "ivy.lamb_update"], [592, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[578, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[578, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[579, "ivy.lars_update"], [592, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[579, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[579, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[580, "ivy.optimizer_update"], [592, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[580, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[580, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[581, "ivy.stop_gradient"], [592, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[581, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[581, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[582, "ivy.value_and_grad"], [592, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[583, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[584, "ivy.e"]], "inf (in module ivy)": [[584, "ivy.inf"]], "ivy.functional.ivy.constants": [[584, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[584, "ivy.nan"]], "newaxis (in module ivy)": [[584, "ivy.newaxis"]], "pi (in module ivy)": [[584, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[585, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[586, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[586, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[587, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[587, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[587, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[587, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[587, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[587, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[588, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[588, "ivy.Profiler"]], "ivy.functional.ivy.device": [[588, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[589, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[590, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[591, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[591, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[591, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[592, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[593, "ivy.conv"], [606, "ivy.conv"]], "conv1d() (in module ivy)": [[593, "ivy.conv1d"], [607, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[593, "ivy.conv1d_transpose"], [608, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[593, "ivy.conv2d"], [609, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[593, "ivy.conv2d_transpose"], [610, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[593, "ivy.conv3d"], [611, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[593, "ivy.conv3d_transpose"], [612, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[593, "ivy.conv_general_dilated"], [613, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[593, "ivy.conv_general_transpose"], [614, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[593, "ivy.depthwise_conv2d"], [615, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[593, "ivy.dropout"], [616, "ivy.dropout"]], "ivy.functional.ivy.layers": [[593, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[593, "ivy.linear"], [617, "ivy.linear"]], "lstm_update() (in module ivy)": [[593, "ivy.lstm_update"], [618, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[593, "ivy.multi_head_attention"], [619, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[593, "ivy.scaled_dot_product_attention"], [620, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[594, "ivy.cholesky"], [621, "ivy.cholesky"]], "cross() (in module ivy)": [[594, "ivy.cross"], [622, "ivy.cross"]], "det() (in module ivy)": [[594, "ivy.det"], [623, "ivy.det"]], "diag() (in module ivy)": [[594, "ivy.diag"], [624, "ivy.diag"]], "diagonal() (in module ivy)": [[594, "ivy.diagonal"], [625, "ivy.diagonal"]], "eigh() (in module ivy)": [[594, "ivy.eigh"], [627, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[594, "ivy.eigvalsh"], [628, "ivy.eigvalsh"]], "inner() (in module ivy)": [[594, "ivy.inner"], [629, "ivy.inner"]], "inv() (in module ivy)": [[594, "ivy.inv"], [630, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[594, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[594, "ivy.lu_factor"], [631, "ivy.lu_factor"]], "matmul() (in module ivy)": [[594, "ivy.matmul"], [632, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[594, "ivy.matrix_norm"], [633, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[594, "ivy.matrix_power"], [634, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[594, "ivy.matrix_rank"], [635, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[594, "ivy.matrix_transpose"], [636, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[594, "ivy.outer"], [637, "ivy.outer"]], "pinv() (in module ivy)": [[594, "ivy.pinv"], [638, "ivy.pinv"]], "qr() (in module ivy)": [[594, "ivy.qr"], [639, "ivy.qr"]], "slogdet() (in module ivy)": [[594, "ivy.slogdet"], [640, "ivy.slogdet"]], "solve() (in module ivy)": [[594, "ivy.solve"], [641, "ivy.solve"]], "svd() (in module ivy)": [[594, "ivy.svd"], [642, "ivy.svd"]], "svdvals() (in module ivy)": [[594, "ivy.svdvals"], [643, "ivy.svdvals"]], "tensordot() (in module ivy)": [[594, "ivy.tensordot"], [644, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[594, "ivy.tensorsolve"], [645, "ivy.tensorsolve"]], "trace() (in module ivy)": [[594, "ivy.trace"], [646, "ivy.trace"]], "vander() (in module ivy)": [[594, "ivy.vander"], [647, "ivy.vander"]], "vecdot() (in module ivy)": [[594, "ivy.vecdot"], [648, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[594, "ivy.vector_norm"], [649, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[594, "ivy.vector_to_skew_symmetric_matrix"], [650, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[595, "ivy.binary_cross_entropy"], [651, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[595, "ivy.cross_entropy"], [652, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[595, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[595, "ivy.sparse_cross_entropy"], [653, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[596, "ivy.clip"], [654, "ivy.clip"]], "concat() (in module ivy)": [[596, "ivy.concat"], [655, "ivy.concat"]], "constant_pad() (in module ivy)": [[596, "ivy.constant_pad"], [656, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[596, "ivy.expand_dims"], [657, "ivy.expand_dims"]], "flip() (in module ivy)": [[596, "ivy.flip"], [658, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[596, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[596, "ivy.permute_dims"], [659, "ivy.permute_dims"]], "repeat() (in module ivy)": [[596, "ivy.repeat"], [660, "ivy.repeat"]], "reshape() (in module ivy)": [[596, "ivy.reshape"], [661, "ivy.reshape"]], "roll() (in module ivy)": [[596, "ivy.roll"], [662, "ivy.roll"]], "split() (in module ivy)": [[596, "ivy.split"], [663, "ivy.split"]], "squeeze() (in module ivy)": [[596, "ivy.squeeze"], [664, "ivy.squeeze"]], "stack() (in module ivy)": [[596, "ivy.stack"], [665, "ivy.stack"]], "swapaxes() (in module ivy)": [[596, "ivy.swapaxes"], [666, "ivy.swapaxes"]], "tile() (in module ivy)": [[596, "ivy.tile"], [667, "ivy.tile"]], "unstack() (in module ivy)": [[596, "ivy.unstack"], [668, "ivy.unstack"]], "zero_pad() (in module ivy)": [[596, "ivy.zero_pad"], [669, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[597, "ivy.fomaml_step"], [670, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[597, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[597, "ivy.maml_step"], [671, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[597, "ivy.reptile_step"], [672, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[598, "ivy.all_nested_indices"], [673, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[598, "ivy.copy_nest"], [674, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[598, "ivy.duplicate_array_index_chains"], [675, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[598, "ivy.index_nest"], [676, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[598, "ivy.insert_into_nest_at_index"], [677, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[598, "ivy.insert_into_nest_at_indices"], [678, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[598, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[598, "ivy.map"], [679, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[598, "ivy.map_nest_at_index"], [680, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[598, "ivy.map_nest_at_indices"], [681, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[598, "ivy.multi_index_nest"], [682, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[598, "ivy.nested_any"], [683, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[598, "ivy.nested_argwhere"], [684, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[598, "ivy.nested_map"], [685, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[598, "ivy.nested_multi_map"], [686, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[598, "ivy.prune_empty"], [687, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[598, "ivy.prune_nest_at_index"], [688, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[598, "ivy.prune_nest_at_indices"], [689, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[598, "ivy.set_nest_at_index"], [690, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[598, "ivy.set_nest_at_indices"], [691, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[599, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[599, "ivy.layer_norm"], [692, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[600, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[600, "ivy.multinomial"], [693, "ivy.multinomial"]], "randint() (in module ivy)": [[600, "ivy.randint"], [694, "ivy.randint"]], "random_normal() (in module ivy)": [[600, "ivy.random_normal"], [695, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[600, "ivy.random_uniform"], [696, "ivy.random_uniform"]], "seed() (in module ivy)": [[600, "ivy.seed"], [697, "ivy.seed"]], "shuffle() (in module ivy)": [[600, "ivy.shuffle"], [698, "ivy.shuffle"]], "argmax() (in module ivy)": [[601, "ivy.argmax"], [699, "ivy.argmax"]], "argmin() (in module ivy)": [[601, "ivy.argmin"], [700, "ivy.argmin"]], "argwhere() (in module ivy)": [[601, "ivy.argwhere"], [701, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[601, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[601, "ivy.nonzero"], [702, "ivy.nonzero"]], "where() (in module ivy)": [[601, "ivy.where"], [703, "ivy.where"]], "ivy.functional.ivy.set": [[602, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[602, "ivy.unique_all"], [704, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[602, "ivy.unique_counts"], [705, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[602, "ivy.unique_inverse"], [706, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[602, "ivy.unique_values"], [707, "ivy.unique_values"]], "argsort() (in module ivy)": [[603, "ivy.argsort"], [708, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[603, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[603, "ivy.msort"], [709, "ivy.msort"]], "searchsorted() (in module ivy)": [[603, "ivy.searchsorted"], [710, "ivy.searchsorted"]], "sort() (in module ivy)": [[603, "ivy.sort"], [711, "ivy.sort"]], "cumprod() (in module ivy)": [[604, "ivy.cumprod"], [712, "ivy.cumprod"]], "cumsum() (in module ivy)": [[604, "ivy.cumsum"], [713, "ivy.cumsum"]], "einsum() (in module ivy)": [[604, "ivy.einsum"], [714, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[604, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[604, "ivy.max"], [715, "ivy.max"]], "mean() (in module ivy)": [[604, "ivy.mean"], [716, "ivy.mean"]], "min() (in module ivy)": [[604, "ivy.min"], [717, "ivy.min"]], "prod() (in module ivy)": [[604, "ivy.prod"], [718, "ivy.prod"]], "std() (in module ivy)": [[604, "ivy.std"], [719, "ivy.std"]], "sum() (in module ivy)": [[604, "ivy.sum"], [720, "ivy.sum"]], "var() (in module ivy)": [[604, "ivy.var"], [721, "ivy.var"]], "all() (in module ivy)": [[605, "ivy.all"], [722, "ivy.all"]], "any() (in module ivy)": [[605, "ivy.any"], [723, "ivy.any"]], "ivy.functional.ivy.utility": [[605, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[605, "ivy.load"], [724, "ivy.load"]], "save() (in module ivy)": [[605, "ivy.save"], [725, "ivy.save"]], "conv1d() (ivy.array method)": [[607, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[607, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[608, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[608, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[609, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[609, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[610, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[610, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[611, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[611, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[612, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[612, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[615, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[615, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[616, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[616, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[617, "ivy.Array.linear"]], "linear() (ivy.container method)": [[617, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[618, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[618, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[619, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[619, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[620, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[620, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[621, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[621, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[622, "ivy.Array.cross"]], "cross() (ivy.container method)": [[622, "ivy.Container.cross"]], "det() (ivy.array method)": [[623, "ivy.Array.det"]], "det() (ivy.container method)": [[623, "ivy.Container.det"]], "diag() (ivy.array method)": [[624, "ivy.Array.diag"]], "diag() (ivy.container method)": [[624, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[625, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[625, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[627, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[627, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[628, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[628, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[629, "ivy.Array.inner"]], "inner() (ivy.container method)": [[629, "ivy.Container.inner"]], "inv() (ivy.array method)": [[630, "ivy.Array.inv"]], "inv() (ivy.container method)": [[630, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[632, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[632, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[633, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[633, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[634, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[634, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[635, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[635, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[636, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[636, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[637, "ivy.Array.outer"]], "outer() (ivy.container method)": [[637, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[638, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[638, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[639, "ivy.Array.qr"]], "qr() (ivy.container method)": [[639, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[640, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[640, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[641, "ivy.Array.solve"]], "solve() (ivy.container method)": [[641, "ivy.Container.solve"]], "svd() (ivy.array method)": [[642, "ivy.Array.svd"]], "svd() (ivy.container method)": [[642, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[643, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[643, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[644, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[644, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[645, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[645, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[646, "ivy.Array.trace"]], "trace() (ivy.container method)": [[646, "ivy.Container.trace"]], "vander() (ivy.array method)": [[647, "ivy.Array.vander"]], "vander() (ivy.container method)": [[647, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[648, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[648, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[649, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[649, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[650, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[650, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[651, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[651, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[652, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[652, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[653, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[653, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[654, "ivy.Array.clip"]], "clip() (ivy.container method)": [[654, "ivy.Container.clip"]], "concat() (ivy.array method)": [[655, "ivy.Array.concat"]], "concat() (ivy.container method)": [[655, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[656, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[656, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[657, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[657, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[658, "ivy.Array.flip"]], "flip() (ivy.container method)": [[658, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[659, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[659, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[660, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[660, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[661, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[661, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[662, "ivy.Array.roll"]], "roll() (ivy.container method)": [[662, "ivy.Container.roll"]], "split() (ivy.array method)": [[663, "ivy.Array.split"]], "split() (ivy.container method)": [[663, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[664, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[664, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[665, "ivy.Array.stack"]], "stack() (ivy.container method)": [[665, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[666, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[666, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[667, "ivy.Array.tile"]], "tile() (ivy.container method)": [[667, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[668, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[668, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[669, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[669, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[692, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[692, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[693, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[693, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[694, "ivy.Array.randint"]], "randint() (ivy.container method)": [[694, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[695, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[695, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[696, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[696, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[698, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[698, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[699, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[699, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[700, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[700, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[701, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[701, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[702, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[702, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[703, "ivy.Array.where"]], "where() (ivy.container method)": [[703, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[704, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[704, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[705, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[705, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[706, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[706, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[707, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[707, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[708, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[708, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[709, "ivy.Array.msort"]], "msort() (ivy.container method)": [[709, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[710, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[710, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[711, "ivy.Array.sort"]], "sort() (ivy.container method)": [[711, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[712, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[712, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[713, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[713, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[714, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[714, "ivy.Container.einsum"]], "max() (ivy.array method)": [[715, "ivy.Array.max"]], "max() (ivy.container method)": [[715, "ivy.Container.max"]], "mean() (ivy.array method)": [[716, "ivy.Array.mean"]], "mean() (ivy.container method)": [[716, "ivy.Container.mean"]], "min() (ivy.array method)": [[717, "ivy.Array.min"]], "min() (ivy.container method)": [[717, "ivy.Container.min"]], "prod() (ivy.array method)": [[718, "ivy.Array.prod"]], "prod() (ivy.container method)": [[718, "ivy.Container.prod"]], "std() (ivy.array method)": [[719, "ivy.Array.std"]], "std() (ivy.container method)": [[719, "ivy.Container.std"]], "sum() (ivy.array method)": [[720, "ivy.Array.sum"]], "sum() (ivy.container method)": [[720, "ivy.Container.sum"]], "var() (ivy.array method)": [[721, "ivy.Array.var"]], "var() (ivy.container method)": [[721, "ivy.Container.var"]], "all() (ivy.array method)": [[722, "ivy.Array.all"]], "all() (ivy.container method)": [[722, "ivy.Container.all"]], "any() (ivy.array method)": [[723, "ivy.Array.any"]], "any() (ivy.container method)": [[723, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[728, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[728, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[728, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[728, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[728, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[728, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[728, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[728, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[728, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[728, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[728, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[728, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[728, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[728, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[728, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[728, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[728, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[728, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[728, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[728, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[729, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[729, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[729, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[729, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[729, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[729, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[729, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[729, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[730, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[730, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[730, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[731, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[731, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[731, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[731, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[731, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[731, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[731, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[731, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[731, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[731, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[731, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[731, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[731, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[731, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[731, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[731, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[732, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[732, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[732, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[732, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[732, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[732, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[732, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[732, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[732, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[732, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[732, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[732, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[732, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[732, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[732, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[732, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[732, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[732, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[732, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[732, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[732, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[732, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[732, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[732, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[732, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[732, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[733, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[733, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[733, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[733, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[733, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[733, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[733, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[734, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[734, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[734, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[734, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[734, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[734, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[734, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[735, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[735, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[735, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[735, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[735, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[736, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[736, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[736, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[736, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[736, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[736, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[736, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[736, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[736, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[736, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[736, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[736, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[736, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[736, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[736, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[736, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[736, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[736, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[736, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[736, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[736, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[737, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[737, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[737, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[738, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[738, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[739, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[740, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[740, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[740, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[740, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[740, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[740, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[740, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[740, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[740, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[740, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[740, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[741, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[741, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[741, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[742, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[742, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[742, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[742, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[742, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[742, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[743, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[743, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[744, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[744, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[745, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[745, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[745, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[745, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[745, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[745, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[745, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[745, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[745, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[745, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[745, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[745, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[745, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[745, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[745, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[745, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[745, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[745, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[745, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[745, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[745, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[745, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[745, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[745, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[745, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[745, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[746, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[746, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[746, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[747, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[747, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[747, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[748, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[748, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[748, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[748, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[748, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[749, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[749, "module-ivy.utils.verbosity"]], "applied libraries": [[794, "term-Applied-Libraries"]], "automatic code conversions": [[794, "term-Automatic-Code-Conversions"]], "backend handler": [[794, "term-Backend-Handler"]], "compositional functions": [[794, "term-Compositional-Functions"]], "convenience functions": [[794, "term-Convenience-Functions"]], "framework": [[794, "term-Framework"]], "framework handler": [[794, "term-Framework-Handler"]], "graph compiler": [[794, "term-Graph-Compiler"]], "ivy array": [[794, "term-Ivy-Array"]], "ivy backends": [[794, "term-Ivy-Backends"]], "ivy builder": [[794, "term-Ivy-Builder"]], "ivy compiler": [[794, "term-Ivy-Compiler"]], "ivy container": [[794, "term-Ivy-Container"]], "ivy frontends": [[794, "term-Ivy-Frontends"]], "ivy functional api": [[794, "term-Ivy-Functional-API"]], "ivy graph compiler": [[794, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[794, "term-Ivy-Transpiler"]], "mixed functions": [[794, "term-Mixed-Functions"]], "native array": [[794, "term-Native-Array"]], "nestable functions": [[794, "term-Nestable-Functions"]], "pipeline": [[794, "term-Pipeline"]], "primary functions": [[794, "term-Primary-Functions"]], "standalone functions": [[794, "term-Standalone-Functions"]], "submodule helper functions": [[794, "term-Submodule-Helper-Functions"]]}})