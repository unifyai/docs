Search.setIndex({"docnames": ["compiler/compiler", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.frombuffer", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.triu_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.angle", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.exp2", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gcd", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.imag", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lcm", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.logaddexp2", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nan_to_num", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.real", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.trapz", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cov", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.binary_cross_entropy_with_logits", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.ndenumerate", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.ndindex", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.msort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.nested_array", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/nested_array/ivy.nested_array.nested_array", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.frombuffer.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.triu_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.angle.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.exp2.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gcd.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.imag.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lcm.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.logaddexp2.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nan_to_num.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.real.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.trapz.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cov.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.binary_cross_entropy_with_logits.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.ndenumerate.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.ndindex.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.msort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.nested_array.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/nested_array/ivy.nested_array.nested_array.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "Data classes", "Functions", "deserialize", "gelu", "get", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "IfElse", "WhileLoop", "if_else", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "fmod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "isreal", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "rad2deg", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "trunc_divide", "logit", "logsigmoid", "prelu", "relu6", "selu", "thresholded_relu", "eye_like", "frombuffer", "hamming_window", "hann_window", "kaiser_bessel_derived_window", "kaiser_window", "tril_indices", "triu_indices", "vorbis_window", "allclose", "angle", "binarizer", "conj", "copysign", "count_nonzero", "diff", "exp2", "fix", "float_power", "fmax", "fmin", "frexp", "gcd", "gradient", "hypot", "imag", "isclose", "lcm", "ldexp", "lerp", "logaddexp2", "nan_to_num", "nansum", "nextafter", "real", "signbit", "sinc", "trapz", "xlogy", "zeta", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout3d", "embedding", "fft", "ifft", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "adjoint", "cond", "cov", "diagflat", "eig", "eigh_tridiagonal", "eigvals", "kron", "matrix_exp", "multi_dot", "binary_cross_entropy_with_logits", "as_strided", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "concat_from_sequence", "dsplit", "dstack", "expand", "flatten", "fliplr", "flipud", "heaviside", "hsplit", "hstack", "i0", "moveaxis", "ndenumerate", "ndindex", "pad", "rot90", "take_along_axis", "top_k", "vsplit", "vstack", "batch_norm", "instance_norm", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "lexsort", "msort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "median", "nanmean", "nanmedian", "quantile", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_show_func_wrapper_trace_mode", "get_tmp_dir", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "with_grads", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Structs", "Test parameter flags", "Testing helpers", "Nested array", "Framework classes", "Utils", "Testing", "Nested array", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Exceptions", "Inspection", "Profiler", "Verbosity", "Contents", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 1, 633, 644, 649], "The": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 75, 77, 79, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 111, 112, 115, 116, 118, 119, 121, 122, 123, 124, 130, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 243, 244, 247, 250, 252, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 331, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 351, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 389, 391, 392, 395, 396, 398, 399, 400, 402, 403, 404, 405, 408, 410, 413, 414, 417, 418, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 604, 605, 608, 613, 615, 616, 617, 618, 619, 620, 621, 626, 633, 634, 635, 637, 638, 639, 640, 642, 643, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "transpil": [0, 642, 656, 663, 668, 669, 670, 678, 683, 689, 690], "ar": [0, 1, 3, 4, 7, 8, 9, 13, 15, 17, 18, 19, 25, 27, 30, 31, 32, 36, 38, 40, 41, 42, 47, 48, 65, 77, 79, 82, 139, 143, 145, 149, 171, 173, 196, 197, 206, 209, 211, 216, 226, 232, 233, 235, 237, 239, 240, 241, 243, 244, 252, 258, 262, 263, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 284, 287, 288, 290, 295, 296, 297, 302, 308, 310, 311, 318, 319, 320, 326, 327, 328, 329, 336, 342, 343, 346, 347, 348, 350, 360, 361, 362, 363, 364, 367, 368, 369, 384, 390, 394, 397, 401, 411, 412, 419, 428, 437, 445, 456, 460, 462, 463, 465, 466, 467, 468, 470, 472, 474, 475, 476, 490, 491, 496, 500, 501, 502, 506, 507, 509, 512, 516, 517, 521, 522, 523, 528, 529, 532, 536, 538, 548, 553, 558, 559, 560, 568, 569, 570, 573, 574, 575, 576, 578, 580, 597, 599, 602, 603, 604, 605, 608, 616, 617, 619, 622, 623, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690], "publicli": [0, 1, 633], "avail": [0, 1, 9, 32, 134, 140, 141, 142, 152, 376, 462, 465, 603, 633, 635, 643, 644, 649, 650, 651, 653, 655, 656, 663, 665, 667, 677, 688, 689], "yet": [0, 1, 268, 270, 271, 273, 279, 280, 284, 288, 633, 642, 643, 677], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 272, 285, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 467, 472, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 512, 513, 514, 516, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 558, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 633, 635, 636, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 683, 684, 685, 687], "certain": [0, 1, 25, 65, 78, 79, 460, 633, 643, 644, 646, 652, 659, 665, 667, 677, 687], "part": [0, 1, 4, 8, 31, 85, 86, 187, 232, 233, 251, 260, 269, 272, 276, 278, 287, 311, 336, 363, 460, 463, 468, 502, 599, 619, 633, 639, 644, 646, 649, 659, 663, 665, 666, 667, 669, 670, 674, 676, 677, 681, 683, 688, 689, 690], "thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 104, 107, 110, 111, 112, 113, 117, 118, 132, 135, 144, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 284, 287, 288, 291, 292, 293, 294, 295, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 392, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 420, 426, 427, 428, 430, 432, 433, 441, 442, 443, 444, 445, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 549, 553, 554, 559, 560, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 603, 605, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "doc": [0, 1, 209, 232, 233, 269, 463, 633, 638, 641, 642, 645, 654, 655, 658, 665, 669, 672, 673], "won": [0, 1, 633, 636, 637, 643, 644, 650, 674], "t": [0, 1, 8, 12, 23, 31, 35, 46, 47, 249, 266, 272, 274, 276, 311, 400, 428, 445, 465, 466, 467, 472, 491, 492, 555, 633, 636, 637, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 660, 661, 662, 663, 665, 666, 667, 669, 671, 672, 673, 674, 677, 681, 683, 685], "work": [0, 1, 8, 31, 287, 363, 472, 554, 555, 559, 564, 565, 633, 637, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 662, 663, 664, 665, 666, 668, 669, 671, 673, 674, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "expect": [0, 1, 8, 13, 117, 275, 295, 366, 461, 465, 511, 616, 617, 619, 633, 637, 644, 646, 652, 656, 662, 664, 665, 667, 677], "now": [0, 1, 74, 84, 88, 460, 618, 619, 633, 637, 643, 646, 647, 648, 649, 650, 651, 652, 657, 658, 660, 663, 664, 665, 666, 667, 671, 672, 674, 676, 677, 683], "when": [0, 1, 4, 5, 8, 13, 14, 17, 18, 21, 25, 27, 28, 30, 31, 36, 37, 40, 41, 44, 48, 82, 91, 158, 178, 192, 205, 220, 263, 267, 272, 275, 276, 277, 281, 282, 287, 295, 302, 311, 316, 342, 343, 347, 362, 363, 400, 420, 427, 460, 461, 463, 465, 467, 468, 469, 472, 474, 475, 478, 480, 509, 514, 525, 526, 527, 547, 548, 557, 558, 559, 568, 569, 570, 573, 574, 576, 577, 588, 590, 592, 594, 602, 605, 616, 617, 619, 626, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 669, 671, 672, 674, 677, 681, 683, 686, 687, 688, 689], "we": [0, 1, 8, 23, 31, 46, 266, 274, 278, 339, 375, 428, 445, 446, 448, 455, 465, 466, 616, 619, 626, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 683, 684, 688, 689], "call": [0, 1, 8, 23, 28, 31, 46, 48, 111, 112, 149, 276, 287, 315, 362, 392, 420, 434, 445, 446, 448, 462, 465, 466, 468, 472, 514, 547, 553, 557, 558, 599, 616, 618, 619, 621, 626, 633, 636, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 677, 683, 684, 687], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 104, 107, 110, 113, 117, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 238, 241, 243, 250, 251, 253, 257, 260, 262, 263, 267, 269, 272, 275, 276, 277, 278, 281, 282, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 316, 318, 319, 320, 322, 323, 330, 333, 334, 335, 336, 337, 340, 342, 343, 346, 347, 349, 352, 353, 358, 359, 362, 368, 370, 371, 379, 382, 391, 396, 398, 399, 400, 402, 403, 404, 405, 408, 414, 424, 428, 432, 433, 434, 442, 445, 453, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 553, 566, 568, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 604, 605, 607, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 633, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 689, 690], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 643, 645, 646, 648, 650, 652, 653, 655, 657, 658, 659, 660, 662, 667, 668, 675, 677, 678, 679, 690], "function": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 95, 104, 105, 106, 107, 110, 111, 112, 113, 117, 118, 135, 137, 138, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 390, 391, 392, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 412, 413, 414, 419, 420, 422, 426, 427, 428, 430, 432, 433, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 553, 554, 555, 557, 558, 559, 560, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 602, 603, 604, 605, 608, 614, 617, 619, 626, 630, 633, 635, 643, 644, 645, 646, 647, 648, 649, 651, 654, 655, 657, 662, 668, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 683, 684, 689, 690], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 130, 132, 134, 135, 137, 138, 140, 141, 144, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 315, 316, 318, 319, 320, 322, 323, 326, 329, 330, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 390, 391, 392, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 409, 410, 413, 414, 420, 424, 426, 427, 428, 430, 432, 433, 434, 441, 442, 444, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 603, 604, 605, 608, 615, 616, 617, 618, 619, 620, 621, 623, 626, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "alwai": [0, 5, 15, 28, 38, 91, 158, 244, 272, 400, 461, 463, 465, 470, 535, 604, 633, 642, 644, 647, 648, 650, 652, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 677], "small": [0, 1, 8, 13, 16, 31, 36, 39, 235, 252, 257, 272, 281, 342, 343, 468, 473, 509, 512, 514, 566, 617, 620, 633, 643, 651, 654, 659, 664, 667, 669, 673, 677, 684], "perform": [0, 1, 4, 8, 12, 13, 21, 22, 27, 31, 32, 35, 36, 44, 45, 55, 59, 78, 79, 219, 241, 272, 275, 285, 295, 296, 297, 299, 300, 352, 375, 376, 377, 398, 399, 400, 415, 422, 457, 460, 463, 465, 467, 468, 471, 472, 478, 479, 490, 492, 516, 523, 544, 545, 546, 554, 555, 585, 586, 595, 596, 597, 637, 646, 647, 648, 650, 652, 653, 654, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 672, 677, 680, 683, 684, 685, 686, 687, 688, 690], "hit": [0, 665, 669], "due": [0, 1, 209, 463, 636, 639, 643, 646, 651, 656, 662, 663, 683], "ad": [0, 8, 15, 31, 38, 46, 235, 252, 272, 281, 342, 343, 426, 427, 465, 468, 470, 501, 502, 531, 622, 633, 636, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 677, 682, 683], "python": [0, 8, 17, 31, 40, 65, 144, 154, 208, 282, 346, 347, 348, 349, 350, 442, 460, 462, 463, 465, 474, 567, 568, 569, 570, 572, 626, 634, 635, 636, 641, 643, 644, 646, 647, 649, 650, 651, 656, 657, 663, 665, 667, 669, 671, 672, 677, 678, 680, 683, 684, 685, 689, 690], "wrap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 278, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 422, 426, 427, 428, 430, 432, 433, 440, 441, 443, 444, 447, 449, 450, 451, 453, 465, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 512, 513, 514, 516, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 599, 613, 633, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 665, 669, 671, 674, 677, 678, 679, 683, 684, 689, 690], "overhead": [0, 677, 686], "becom": [0, 8, 31, 244, 272, 278, 320, 470, 528, 626, 635, 637, 644, 649, 650, 654, 656, 662, 663, 677], "increasingli": [0, 654], "notic": [0, 642, 647, 651, 667], "larg": [0, 8, 31, 158, 257, 272, 276, 308, 463, 468, 514, 643, 644, 651, 672, 683], "model": [0, 1, 633, 672, 673, 678, 681, 682, 683, 684, 685, 686, 687, 689, 690], "multipl": [0, 8, 13, 16, 21, 22, 25, 30, 31, 32, 33, 36, 38, 39, 44, 45, 168, 194, 199, 200, 227, 253, 269, 272, 275, 276, 278, 285, 294, 315, 323, 330, 340, 352, 364, 409, 443, 444, 447, 449, 451, 453, 463, 465, 466, 467, 468, 470, 473, 475, 478, 479, 482, 483, 484, 485, 495, 504, 506, 507, 528, 531, 536, 537, 566, 573, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 618, 633, 637, 644, 647, 648, 649, 650, 654, 656, 659, 662, 663, 664, 665, 667, 669, 677, 681, 682, 683, 690], "improv": [0, 637, 644, 652, 658, 659, 667, 669, 678, 681, 683, 685, 686], "remov": [0, 1, 13, 25, 36, 454, 466, 468, 470, 471, 472, 499, 506, 520, 538, 544, 545, 561, 633, 642, 648, 649, 651, 652, 655, 659, 665, 667, 674, 683], "extra": [0, 1, 25, 48, 442, 465, 647, 652, 654, 660, 662, 663, 664, 667, 669, 680, 685], "around": [0, 25, 48, 278, 336, 644, 647, 649, 658, 659, 663, 666, 671, 677, 678, 681, 683, 690], "each": [0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 25, 28, 30, 31, 32, 33, 35, 36, 38, 41, 42, 44, 47, 48, 56, 57, 58, 60, 80, 92, 104, 107, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 236, 244, 250, 260, 262, 265, 267, 272, 275, 276, 278, 282, 285, 291, 292, 293, 296, 297, 303, 304, 305, 308, 310, 311, 318, 319, 320, 322, 323, 327, 328, 329, 330, 332, 333, 336, 340, 346, 352, 359, 364, 367, 375, 382, 383, 406, 442, 444, 445, 447, 449, 450, 451, 457, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 495, 496, 497, 500, 501, 502, 506, 508, 509, 510, 512, 514, 515, 516, 521, 530, 534, 536, 537, 539, 541, 543, 553, 560, 567, 576, 578, 579, 581, 586, 587, 594, 602, 604, 618, 620, 621, 622, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 676, 677, 679, 680, 684, 686, 689], "take": [0, 1, 8, 13, 15, 21, 31, 38, 82, 169, 222, 260, 267, 272, 275, 278, 292, 299, 300, 304, 326, 338, 460, 463, 468, 470, 506, 510, 535, 585, 602, 608, 617, 633, 637, 638, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 659, 662, 663, 664, 665, 667, 669, 671, 673, 674, 677, 680, 681, 689], "ani": [0, 1, 3, 4, 6, 7, 8, 9, 13, 22, 23, 27, 29, 30, 31, 32, 45, 46, 47, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 95, 110, 113, 117, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 241, 269, 272, 275, 276, 278, 281, 287, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 342, 343, 361, 362, 364, 374, 375, 376, 377, 378, 382, 391, 396, 398, 402, 404, 427, 433, 434, 442, 453, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 553, 554, 556, 557, 564, 566, 570, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 597, 600, 604, 614, 615, 617, 618, 619, 620, 621, 622, 626, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "framework": [0, 1, 3, 9, 109, 130, 140, 142, 152, 373, 397, 401, 428, 431, 461, 462, 465, 472, 549, 597, 599, 600, 603, 608, 615, 621, 626, 635, 636, 637, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 680, 681, 682, 684, 687], "specif": [0, 1, 6, 9, 29, 32, 42, 118, 147, 150, 196, 197, 375, 376, 377, 410, 461, 462, 463, 465, 468, 470, 471, 474, 477, 478, 501, 502, 518, 539, 544, 545, 546, 567, 581, 583, 588, 589, 590, 592, 599, 619, 626, 630, 633, 635, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 684, 685, 686, 690], "backend": [0, 1, 3, 4, 8, 9, 13, 25, 31, 32, 36, 71, 105, 106, 109, 130, 137, 138, 140, 142, 152, 276, 311, 368, 380, 381, 397, 400, 401, 410, 428, 431, 460, 461, 462, 465, 468, 516, 597, 599, 600, 603, 615, 619, 621, 625, 626, 633, 635, 641, 642, 643, 644, 645, 646, 647, 651, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 674, 678, 683, 686, 689, 690], "composit": [0, 263, 272, 276, 313, 642, 645, 647, 648, 650, 652, 660, 662, 664, 665, 667, 669, 673, 674, 677, 678, 684], "both": [0, 1, 4, 7, 8, 9, 13, 27, 30, 31, 32, 36, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 94, 110, 113, 116, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 239, 241, 244, 252, 260, 269, 272, 275, 276, 278, 282, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 329, 336, 346, 382, 391, 396, 398, 406, 433, 453, 455, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 633, 644, 648, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 665, 667, 669, 671, 672, 673, 674, 676, 677, 683, 686, 688, 689, 690], "produc": [0, 8, 12, 31, 35, 222, 229, 267, 269, 467, 494, 602, 642, 652, 664, 665, 666, 684, 686], "simplifi": [0, 636, 656, 663, 669, 670, 673, 679, 681, 682, 683, 686, 689, 690], "execut": [0, 434, 462, 465, 643, 644, 649, 650, 651, 654, 656, 659, 660, 662, 665, 667, 669, 671, 674, 677, 678, 679, 683, 684, 685, 686, 687, 689], "comput": [0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 19, 21, 24, 25, 30, 31, 32, 33, 35, 36, 37, 44, 55, 59, 149, 158, 164, 167, 169, 175, 176, 181, 182, 183, 188, 189, 195, 196, 197, 198, 200, 203, 207, 208, 220, 228, 230, 231, 238, 245, 246, 249, 250, 253, 258, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 287, 291, 292, 293, 294, 295, 299, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 329, 332, 339, 342, 343, 360, 361, 362, 363, 369, 370, 371, 443, 445, 446, 448, 452, 453, 455, 456, 462, 463, 465, 466, 467, 468, 469, 470, 472, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 495, 496, 500, 501, 502, 505, 506, 507, 511, 513, 515, 516, 522, 523, 525, 526, 527, 531, 553, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 599, 604, 633, 636, 637, 643, 650, 651, 652, 659, 661, 663, 665, 667, 669, 672, 677, 678, 679, 681, 683, 684, 686, 687, 689], "compos": [0, 8, 31, 275, 289, 290, 616, 643, 650, 663, 665, 677, 683, 690], "from": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 40, 41, 44, 45, 46, 48, 65, 67, 73, 75, 76, 77, 80, 81, 84, 88, 94, 112, 117, 118, 134, 139, 143, 148, 149, 173, 206, 213, 226, 227, 232, 233, 239, 244, 245, 246, 249, 250, 260, 265, 269, 272, 275, 278, 282, 296, 297, 323, 330, 336, 337, 338, 340, 346, 347, 348, 349, 350, 369, 374, 382, 383, 387, 412, 420, 430, 442, 444, 449, 454, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 489, 490, 493, 499, 516, 520, 521, 522, 529, 532, 535, 538, 544, 545, 546, 548, 559, 560, 561, 567, 568, 569, 570, 574, 577, 578, 580, 585, 586, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 608, 615, 616, 617, 618, 619, 621, 626, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690], "onli": [0, 1, 4, 8, 13, 15, 17, 25, 27, 31, 36, 38, 40, 47, 79, 116, 117, 145, 154, 196, 197, 226, 249, 257, 260, 269, 272, 275, 276, 278, 282, 295, 302, 311, 318, 319, 320, 326, 346, 347, 369, 460, 461, 462, 463, 465, 468, 470, 472, 474, 475, 477, 478, 506, 513, 516, 532, 535, 547, 548, 554, 555, 557, 558, 559, 564, 565, 568, 569, 570, 573, 574, 583, 589, 592, 600, 602, 604, 605, 619, 621, 633, 635, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 677, 682, 683, 684, 689, 690], "which": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 92, 94, 96, 102, 104, 107, 109, 112, 118, 130, 135, 139, 143, 145, 147, 148, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 232, 233, 235, 237, 238, 239, 240, 241, 244, 247, 250, 252, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 278, 281, 282, 285, 287, 295, 296, 297, 299, 300, 308, 309, 311, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 374, 375, 376, 377, 379, 382, 383, 384, 387, 391, 396, 398, 399, 400, 402, 403, 405, 406, 411, 412, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 490, 491, 493, 494, 495, 496, 498, 499, 502, 504, 506, 507, 509, 510, 511, 513, 514, 515, 516, 520, 522, 523, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 542, 543, 552, 553, 554, 555, 560, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 615, 616, 617, 618, 619, 620, 621, 622, 626, 630, 633, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690], "result": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 117, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 322, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 360, 361, 362, 363, 370, 371, 375, 376, 377, 382, 383, 400, 406, 413, 414, 443, 444, 445, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 550, 553, 554, 556, 560, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 604, 608, 623, 631, 633, 644, 646, 647, 649, 650, 651, 652, 654, 655, 658, 660, 661, 662, 663, 664, 665, 666, 669, 672, 677, 684, 686], "code": [0, 1, 6, 7, 25, 29, 30, 48, 150, 189, 368, 376, 377, 400, 413, 428, 456, 462, 465, 466, 467, 468, 470, 489, 508, 509, 510, 539, 631, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690], "all": [0, 1, 3, 4, 8, 9, 12, 13, 15, 17, 22, 23, 25, 26, 30, 31, 32, 35, 36, 38, 40, 45, 46, 65, 82, 85, 86, 139, 145, 200, 227, 232, 233, 241, 242, 269, 272, 276, 278, 287, 311, 336, 361, 364, 367, 384, 411, 412, 426, 432, 433, 442, 445, 460, 462, 465, 466, 467, 468, 470, 471, 472, 474, 475, 479, 490, 492, 509, 514, 515, 518, 523, 532, 536, 538, 544, 545, 546, 547, 548, 549, 558, 559, 560, 561, 567, 570, 575, 597, 599, 602, 603, 604, 605, 607, 616, 617, 623, 626, 630, 633, 635, 636, 637, 638, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 689, 690], "don": [0, 23, 46, 633, 637, 642, 643, 644, 649, 651, 652, 661, 665, 667, 673, 677], "contribut": [0, 639, 641, 642, 643, 644, 649, 663, 669, 687], "output": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 93, 117, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 322, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 360, 361, 362, 363, 369, 370, 371, 375, 376, 377, 379, 383, 400, 406, 413, 414, 415, 435, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 560, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 617, 618, 633, 640, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 673, 674, 677, 678, 684], "print": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 102, 103, 104, 105, 106, 109, 111, 112, 113, 118, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 232, 233, 235, 238, 255, 257, 260, 262, 267, 269, 272, 275, 276, 277, 278, 291, 292, 293, 294, 296, 298, 303, 304, 305, 308, 311, 315, 316, 321, 322, 331, 334, 335, 336, 337, 338, 339, 341, 344, 345, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 391, 392, 396, 398, 399, 400, 402, 403, 404, 405, 409, 412, 413, 414, 417, 418, 420, 423, 424, 426, 428, 430, 432, 433, 434, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 499, 502, 504, 506, 507, 509, 510, 511, 512, 514, 516, 517, 518, 520, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 616, 626, 631, 633, 643, 644, 650, 654, 664, 665, 669, 671, 672, 673], "statement": [0, 1, 651, 657, 662, 665, 667, 677], "logger": 0, "etc": [0, 4, 8, 17, 19, 23, 27, 31, 40, 46, 71, 78, 79, 82, 282, 346, 347, 349, 350, 460, 474, 476, 567, 568, 569, 570, 578, 579, 580, 581, 602, 605, 617, 618, 619, 620, 621, 622, 637, 642, 643, 644, 646, 647, 649, 650, 652, 654, 656, 658, 663, 664, 665, 666, 669, 671, 672, 677, 678, 681, 683, 689], "ha": [0, 4, 8, 13, 15, 19, 21, 25, 28, 31, 32, 36, 38, 42, 44, 80, 134, 155, 187, 205, 209, 260, 272, 275, 278, 302, 338, 359, 396, 456, 460, 462, 463, 466, 468, 470, 476, 478, 506, 515, 516, 520, 531, 538, 579, 580, 581, 585, 586, 589, 591, 592, 593, 594, 602, 605, 616, 626, 635, 636, 637, 642, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 676, 677, 679, 682, 683, 685, 686, 689], "": [0, 1, 4, 8, 9, 10, 13, 21, 31, 33, 36, 44, 80, 85, 86, 105, 106, 134, 137, 138, 148, 208, 235, 238, 249, 252, 259, 264, 272, 275, 276, 278, 281, 282, 287, 290, 295, 308, 327, 328, 336, 342, 343, 350, 363, 380, 381, 408, 428, 444, 446, 447, 448, 449, 451, 458, 460, 461, 462, 463, 465, 466, 467, 468, 472, 478, 482, 484, 486, 488, 498, 509, 516, 517, 523, 559, 592, 594, 599, 603, 616, 617, 618, 619, 620, 621, 622, 626, 633, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 682, 683, 684, 686, 687, 688, 689], "likewis": [0, 1, 633, 644, 650, 652, 655, 658, 659, 663, 667, 672, 689], "redund": [0, 633, 644, 652, 656, 663, 667], "oper": [0, 4, 5, 8, 9, 12, 25, 27, 28, 31, 32, 35, 48, 78, 79, 118, 158, 168, 208, 222, 257, 266, 267, 272, 274, 275, 289, 290, 291, 292, 293, 298, 299, 300, 303, 304, 305, 368, 375, 376, 377, 428, 460, 461, 463, 465, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 602, 605, 633, 635, 642, 643, 646, 647, 650, 652, 653, 654, 655, 656, 659, 662, 663, 665, 667, 669, 672, 673, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690], "origin": [0, 1, 8, 13, 15, 21, 25, 31, 36, 38, 44, 47, 48, 162, 278, 287, 333, 361, 362, 363, 463, 468, 470, 478, 507, 535, 536, 586, 599, 604, 626, 633, 637, 642, 643, 644, 648, 649, 651, 652, 660, 662, 663, 664, 669, 683, 684], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 107, 110, 111, 112, 113, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 272, 275, 276, 278, 285, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 460, 461, 463, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 557, 558, 559, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 617, 618, 626, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690], "increas": [0, 13, 15, 36, 38, 278, 336, 468, 470, 472, 521, 530, 543, 559, 604, 635, 652, 656, 663, 666, 667, 683], "its": [0, 3, 5, 8, 15, 25, 28, 32, 38, 92, 97, 98, 99, 100, 101, 149, 222, 263, 267, 272, 379, 431, 461, 462, 465, 468, 470, 472, 506, 531, 535, 536, 540, 553, 599, 607, 616, 633, 642, 643, 644, 647, 649, 651, 652, 655, 660, 661, 662, 663, 664, 665, 666, 667, 669, 674, 677, 678, 682, 683, 689], "overal": [0, 467, 490, 650, 652, 653, 655, 674, 679, 681, 682, 683], "obj": [0, 1, 66, 67, 460], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 109, 110, 111, 112, 113, 115, 118, 128, 130, 133, 134, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 387, 391, 393, 396, 398, 399, 400, 402, 403, 405, 410, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 608, 613, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 633, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674], "arg_stateful_idx": [0, 619], "kwarg_stateful_idx": [0, 619], "include_gener": [0, 619], "true": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 130, 134, 135, 137, 138, 141, 144, 145, 146, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 269, 272, 275, 276, 277, 278, 281, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 390, 391, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 413, 414, 415, 419, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 435, 437, 439, 440, 441, 444, 445, 447, 449, 450, 451, 452, 453, 454, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 616, 618, 619, 620, 621, 623, 626, 631, 633, 650, 651, 652, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 669, 672, 673, 674], "array_cach": [0, 619], "return_backend_compiled_fn": 0, "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 135, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 269, 272, 275, 276, 278, 281, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 385, 387, 390, 391, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 409, 413, 414, 415, 419, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 435, 437, 439, 440, 441, 444, 445, 447, 451, 452, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 557, 558, 559, 560, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 608, 613, 614, 615, 616, 619, 621, 623, 626, 631, 633, 646, 648, 652, 654, 656, 662, 663, 664, 665, 667, 669, 672, 673, 674], "static_argnum": [0, 669], "static_argnam": [0, 669], "arg": [0, 1, 3, 25, 149, 434, 460, 462, 465, 597, 599, 615, 619, 623, 626, 631, 633, 647, 656, 661, 662, 663, 667, 669, 673], "kwarg": [0, 1, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 278, 336, 409, 434, 460, 465, 597, 599, 615, 619, 626, 631, 633, 647, 656, 662, 663, 667, 669, 673], "callabl": [0, 1, 9, 23, 32, 46, 51, 53, 68, 69, 70, 105, 106, 137, 138, 149, 278, 336, 365, 369, 374, 376, 380, 381, 409, 434, 442, 446, 448, 455, 457, 460, 461, 462, 465, 466, 467, 471, 472, 493, 544, 545, 546, 553, 554, 555, 557, 558, 559, 560, 597, 600, 608, 621, 629, 650, 656, 661, 663, 669], "set": [0, 1, 3, 8, 9, 12, 13, 18, 20, 21, 25, 31, 32, 35, 36, 41, 43, 44, 119, 120, 121, 122, 123, 134, 146, 147, 148, 149, 162, 232, 233, 240, 258, 261, 269, 272, 275, 276, 278, 287, 295, 308, 309, 312, 326, 336, 339, 360, 361, 362, 363, 364, 368, 375, 400, 415, 416, 417, 418, 419, 420, 421, 422, 423, 428, 436, 461, 462, 463, 465, 467, 468, 472, 474, 475, 477, 478, 490, 496, 507, 509, 512, 515, 516, 547, 554, 557, 558, 559, 564, 565, 571, 573, 574, 578, 580, 581, 582, 584, 592, 594, 599, 602, 603, 604, 605, 608, 616, 617, 618, 621, 626, 635, 638, 644, 645, 646, 647, 650, 651, 652, 653, 654, 656, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 681, 682, 683, 684, 685, 687, 690], "them": [0, 1, 42, 369, 412, 465, 581, 602, 633, 634, 635, 636, 637, 640, 642, 644, 646, 647, 648, 649, 650, 651, 656, 660, 662, 663, 664, 665, 669, 671, 672, 673, 677, 678, 680, 681, 683, 685, 689], "If": [0, 1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 118, 134, 148, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 244, 250, 252, 257, 258, 259, 260, 262, 263, 264, 265, 269, 272, 275, 276, 277, 278, 281, 282, 287, 294, 295, 296, 297, 302, 308, 311, 316, 318, 319, 320, 322, 323, 326, 330, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 406, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 445, 447, 453, 456, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 490, 491, 494, 495, 496, 498, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 559, 560, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 604, 616, 617, 619, 626, 633, 635, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "specifi": [0, 1, 4, 5, 8, 9, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 28, 31, 32, 36, 37, 38, 40, 41, 44, 45, 54, 65, 72, 76, 78, 83, 85, 86, 87, 91, 93, 139, 143, 145, 148, 149, 150, 208, 226, 235, 252, 258, 269, 272, 275, 276, 277, 278, 282, 287, 295, 308, 311, 316, 317, 326, 337, 347, 358, 360, 361, 363, 365, 382, 383, 387, 396, 408, 442, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 493, 498, 499, 502, 507, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 536, 538, 539, 542, 543, 552, 554, 555, 562, 563, 564, 565, 568, 569, 570, 573, 574, 576, 579, 580, 581, 582, 585, 586, 587, 591, 593, 595, 596, 605, 616, 644, 645, 649, 652, 653, 658, 659, 660, 662, 663, 664, 665, 667, 669, 672, 673, 689], "eagerli": [0, 1, 633], "otherwis": [0, 1, 3, 4, 5, 7, 8, 9, 12, 13, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 77, 78, 79, 82, 84, 88, 91, 92, 94, 95, 97, 98, 99, 100, 101, 110, 113, 117, 118, 134, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 235, 237, 238, 240, 241, 250, 252, 259, 260, 262, 264, 265, 267, 272, 281, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 359, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 406, 413, 414, 426, 427, 428, 430, 432, 433, 434, 441, 447, 453, 460, 461, 462, 463, 465, 467, 468, 470, 471, 472, 475, 477, 478, 479, 481, 482, 483, 484, 490, 491, 494, 495, 496, 497, 502, 504, 506, 507, 509, 511, 513, 514, 516, 520, 522, 523, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 560, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 602, 603, 619, 626, 633, 644, 647, 650, 652, 653, 654, 659, 660, 662, 665, 669], "happen": [0, 1, 263, 272, 633, 637, 643, 644, 662, 665, 672], "lazili": [0, 1, 633], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 391, 393, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 413, 414, 417, 418, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 608, 615, 616, 617, 618, 619, 620, 621, 622, 626, 630, 633, 642, 647, 655, 656, 658, 659, 660, 663, 664, 665, 666, 669, 671, 672, 676, 684], "creat": [0, 1, 4, 8, 17, 25, 27, 31, 36, 40, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 226, 232, 233, 257, 269, 272, 275, 278, 282, 291, 292, 317, 336, 346, 347, 348, 349, 350, 430, 442, 455, 460, 465, 466, 474, 511, 567, 568, 569, 570, 572, 599, 608, 615, 617, 618, 619, 620, 621, 622, 636, 638, 639, 642, 643, 644, 647, 649, 651, 652, 653, 656, 660, 662, 663, 664, 665, 667, 669, 670, 673, 675, 676, 678, 683, 684, 689], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 107, 109, 118, 130, 134, 145, 147, 148, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 322, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 373, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 408, 410, 413, 414, 426, 427, 428, 430, 432, 433, 434, 441, 443, 444, 445, 447, 449, 450, 451, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 557, 558, 559, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 603, 608, 615, 617, 619, 621, 622, 631, 642, 643, 644, 650, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 674, 677, 683, 689], "list": [0, 3, 4, 5, 8, 9, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 77, 80, 81, 82, 83, 84, 87, 88, 92, 94, 107, 111, 112, 118, 134, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 235, 237, 238, 240, 241, 242, 243, 244, 248, 249, 250, 252, 256, 259, 260, 261, 262, 264, 265, 272, 275, 276, 278, 285, 291, 292, 293, 295, 296, 297, 303, 304, 305, 308, 311, 318, 319, 320, 321, 322, 323, 330, 337, 338, 339, 340, 342, 343, 344, 345, 347, 353, 364, 366, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 384, 391, 396, 398, 399, 400, 402, 403, 405, 409, 413, 414, 426, 427, 428, 430, 432, 433, 434, 441, 442, 447, 452, 453, 454, 456, 457, 460, 461, 462, 465, 466, 468, 470, 472, 473, 475, 476, 477, 481, 482, 483, 484, 485, 486, 489, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 518, 520, 525, 526, 527, 528, 529, 532, 535, 536, 537, 538, 539, 542, 543, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 589, 591, 592, 594, 595, 596, 597, 599, 602, 603, 604, 605, 608, 613, 615, 616, 618, 623, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 662, 663, 664, 665, 666, 669, 672, 673, 674, 677, 683, 684, 689], "instanc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 104, 107, 110, 111, 112, 113, 118, 135, 146, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 272, 275, 276, 278, 281, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 421, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 608, 615, 639, 642, 643, 644, 646, 647, 652, 654, 655, 658, 659, 660, 661, 662, 665, 672, 673, 674, 678, 684], "consid": [0, 8, 13, 19, 31, 36, 196, 197, 232, 233, 235, 239, 252, 269, 272, 276, 308, 311, 463, 468, 476, 498, 509, 578, 579, 580, 581, 604, 617, 635, 636, 647, 651, 652, 659, 661, 666, 667, 670, 671, 672, 680, 684, 688, 690], "dure": [0, 6, 10, 21, 25, 29, 33, 44, 150, 275, 296, 297, 434, 443, 444, 449, 462, 465, 466, 467, 468, 471, 478, 490, 506, 544, 545, 546, 592, 594, 616, 619, 621, 643, 650, 652, 653, 656, 659, 660, 662, 663, 664, 665, 667, 677, 683, 684, 689], "posit": [0, 3, 7, 8, 9, 13, 15, 30, 31, 32, 36, 38, 74, 104, 155, 184, 185, 207, 208, 226, 227, 232, 233, 235, 239, 252, 257, 269, 272, 276, 277, 278, 309, 316, 333, 369, 379, 442, 458, 460, 461, 463, 465, 468, 470, 474, 475, 479, 495, 498, 520, 531, 536, 571, 576, 595, 596, 599, 602, 608, 615, 633, 642, 644, 646, 650, 660, 663, 665, 666, 672, 676, 685], "argument": [0, 1, 3, 4, 7, 8, 9, 13, 25, 26, 30, 31, 32, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 241, 269, 272, 275, 276, 278, 291, 292, 293, 294, 295, 296, 297, 299, 300, 303, 304, 305, 308, 310, 311, 336, 365, 366, 368, 369, 374, 376, 377, 382, 391, 396, 398, 400, 409, 413, 414, 428, 433, 434, 442, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 553, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 608, 615, 619, 626, 630, 633, 635, 642, 645, 646, 647, 648, 649, 650, 654, 655, 657, 659, 660, 664, 665, 666, 667, 669, 671, 672, 678, 683], "keyword": [0, 1, 3, 4, 8, 25, 31, 48, 80, 257, 272, 276, 278, 308, 336, 366, 369, 409, 434, 460, 465, 472, 478, 553, 593, 597, 599, 619, 642, 647, 650, 652, 653, 660, 662, 663, 664, 665, 666, 667, 672], "str": [0, 1, 3, 4, 8, 9, 12, 13, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 80, 82, 84, 88, 89, 92, 94, 96, 97, 98, 99, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 122, 123, 130, 131, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 264, 265, 275, 276, 278, 287, 291, 292, 293, 295, 296, 297, 299, 300, 303, 304, 305, 307, 308, 311, 318, 319, 320, 322, 326, 337, 338, 339, 342, 343, 344, 345, 347, 363, 364, 365, 367, 368, 370, 371, 373, 375, 376, 377, 379, 382, 383, 386, 391, 396, 398, 399, 400, 402, 403, 405, 410, 413, 414, 416, 423, 426, 427, 428, 430, 432, 433, 441, 445, 453, 457, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 553, 554, 564, 567, 568, 569, 570, 572, 575, 578, 579, 580, 582, 585, 586, 587, 589, 591, 592, 594, 595, 596, 599, 600, 603, 606, 608, 652, 653, 656, 657, 663, 666, 669, 674], "current": [0, 9, 25, 48, 105, 106, 109, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 143, 145, 154, 276, 278, 310, 336, 380, 381, 384, 385, 386, 390, 394, 397, 401, 411, 412, 425, 428, 456, 461, 462, 465, 466, 468, 472, 500, 547, 557, 558, 599, 603, 616, 619, 626, 633, 637, 640, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 656, 659, 660, 662, 663, 664, 665, 667, 669, 674, 676, 677, 683, 689, 690], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 76, 77, 78, 79, 80, 82, 84, 88, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 126, 130, 134, 135, 137, 138, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 250, 252, 257, 258, 259, 260, 262, 264, 265, 269, 272, 275, 276, 278, 281, 287, 291, 292, 293, 295, 296, 297, 302, 308, 311, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 413, 414, 424, 425, 426, 427, 428, 430, 432, 433, 441, 444, 445, 447, 449, 450, 451, 452, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 505, 506, 507, 509, 510, 511, 513, 514, 516, 520, 521, 523, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 557, 558, 559, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 603, 604, 620, 621, 631, 652, 654, 656, 662, 663, 665, 666, 667, 669, 674], "includ": [0, 1, 4, 8, 9, 13, 18, 21, 22, 25, 27, 30, 31, 32, 36, 41, 44, 45, 65, 66, 67, 78, 79, 81, 181, 228, 230, 231, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 269, 272, 275, 291, 292, 293, 307, 310, 312, 327, 328, 329, 332, 333, 348, 350, 351, 359, 360, 361, 363, 396, 441, 460, 465, 468, 472, 474, 475, 478, 479, 500, 521, 523, 547, 570, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 605, 617, 618, 620, 630, 633, 636, 642, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 676, 677, 680, 681, 683, 685, 688, 689, 690], "creation": [0, 8, 25, 31, 48, 649, 652, 653, 656, 658, 660, 663, 664, 665, 666, 669, 683, 685, 689], "constant": [0, 8, 15, 16, 31, 38, 39, 278, 336, 470, 472, 473, 530, 553, 566, 617, 619, 620, 633, 659, 664, 666, 673, 674, 677], "appear": [0, 278, 327, 328, 442, 465, 643, 644, 646, 663, 667], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 77, 82, 84, 88, 91, 92, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 130, 134, 135, 137, 138, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 257, 259, 260, 262, 264, 265, 272, 275, 291, 292, 293, 295, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 390, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 413, 414, 415, 416, 419, 421, 422, 424, 426, 427, 428, 430, 432, 433, 437, 440, 441, 444, 445, 447, 449, 450, 451, 452, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 478, 479, 481, 482, 483, 484, 490, 491, 494, 495, 496, 501, 502, 504, 505, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 564, 565, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 597, 599, 604, 615, 618, 619, 620, 621, 633, 638, 642, 643, 647, 650, 652, 654, 658, 659, 662, 663, 665, 666, 667], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 272, 275, 276, 277, 281, 287, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 457, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 509, 511, 512, 513, 514, 516, 520, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 553, 556, 559, 560, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 604, 605, 614, 620, 633, 638, 640, 642, 643, 644, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 671, 672, 673, 674, 675, 677, 678, 684], "nativ": [0, 1, 3, 4, 6, 9, 26, 29, 32, 47, 81, 89, 90, 96, 97, 98, 99, 100, 101, 114, 117, 132, 133, 134, 135, 144, 151, 154, 400, 402, 405, 412, 431, 460, 461, 462, 465, 599, 608, 613, 615, 626, 633, 652, 656, 660, 662, 663, 664, 665, 669, 671, 672, 678, 681, 690], "e": [0, 4, 8, 13, 17, 19, 20, 21, 23, 31, 36, 40, 43, 44, 46, 47, 71, 79, 80, 90, 118, 131, 155, 162, 166, 168, 170, 177, 179, 180, 184, 190, 192, 199, 200, 205, 208, 220, 221, 226, 232, 233, 257, 267, 269, 275, 276, 282, 291, 292, 295, 303, 304, 315, 346, 347, 348, 350, 458, 460, 461, 462, 463, 468, 470, 472, 474, 476, 477, 478, 496, 506, 507, 509, 512, 515, 516, 523, 531, 539, 550, 554, 555, 556, 564, 565, 568, 569, 570, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 633, 636, 637, 638, 639, 642, 643, 644, 645, 646, 650, 656, 661, 663, 665, 669, 672, 677, 678, 679], "tf": [0, 1, 633, 647, 652, 653, 658, 662, 663, 665, 666, 667, 669, 674, 677, 678, 683], "after": [0, 1, 8, 9, 10, 12, 16, 25, 31, 32, 33, 35, 39, 124, 213, 259, 272, 275, 276, 278, 295, 296, 297, 315, 336, 400, 444, 447, 449, 450, 451, 461, 463, 465, 466, 467, 472, 473, 480, 481, 482, 483, 485, 487, 489, 490, 558, 566, 621, 626, 633, 639, 642, 643, 644, 646, 649, 651, 652, 654, 656, 658, 661, 663, 665, 668, 683], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 384, 387, 391, 396, 398, 399, 400, 402, 403, 405, 406, 408, 409, 413, 414, 424, 426, 427, 428, 429, 430, 431, 432, 433, 441, 442, 443, 444, 445, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 617, 621, 622, 647, 650, 652, 653, 654, 656, 657, 658, 659, 662, 666, 667, 669, 674], "int": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 55, 59, 60, 66, 67, 72, 74, 76, 77, 78, 79, 82, 83, 85, 86, 87, 93, 100, 103, 104, 107, 113, 128, 141, 142, 143, 149, 150, 158, 164, 165, 166, 167, 168, 169, 209, 215, 220, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 241, 243, 248, 249, 257, 258, 261, 263, 267, 269, 272, 275, 276, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 307, 308, 311, 317, 321, 322, 323, 326, 330, 333, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 360, 361, 362, 363, 365, 375, 376, 377, 379, 382, 383, 391, 408, 411, 413, 426, 442, 443, 444, 445, 449, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 496, 498, 499, 507, 508, 518, 520, 521, 522, 523, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 553, 554, 556, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 603, 604, 605, 613, 617, 650, 652, 653, 654, 656, 657, 658, 659, 662, 664, 665, 666, 667, 669, 674], "iter": [0, 3, 9, 15, 23, 25, 32, 38, 46, 48, 149, 278, 334, 335, 336, 364, 409, 462, 465, 470, 472, 530, 534, 541, 543, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 562, 563, 565, 637, 650, 669, 672], "For": [0, 4, 8, 13, 19, 31, 36, 65, 80, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 211, 212, 213, 216, 217, 218, 262, 272, 278, 320, 336, 460, 463, 468, 470, 476, 478, 514, 516, 520, 528, 539, 578, 579, 580, 581, 588, 590, 593, 603, 615, 635, 636, 637, 639, 642, 643, 644, 645, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 680, 681, 684, 689, 690], "jax": [0, 1, 8, 9, 19, 32, 249, 272, 368, 400, 428, 442, 465, 476, 578, 579, 580, 581, 626, 633, 636, 637, 641, 642, 643, 644, 646, 648, 652, 653, 656, 658, 661, 662, 663, 664, 665, 666, 667, 669, 671, 674, 677, 684, 686, 689, 690], "jit": [0, 669, 677, 683], "tupl": [0, 1, 3, 4, 5, 8, 9, 12, 13, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 72, 77, 81, 82, 83, 84, 87, 88, 92, 93, 94, 105, 106, 107, 111, 112, 117, 118, 124, 134, 137, 138, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 232, 233, 235, 237, 238, 240, 241, 242, 243, 244, 247, 248, 249, 250, 252, 256, 258, 259, 260, 261, 262, 264, 265, 266, 269, 272, 274, 275, 276, 278, 281, 282, 283, 285, 287, 291, 292, 293, 295, 296, 297, 299, 300, 303, 304, 305, 308, 310, 311, 318, 319, 320, 321, 322, 323, 330, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 350, 351, 353, 360, 361, 362, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 387, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 443, 444, 445, 447, 449, 453, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 500, 501, 502, 504, 505, 506, 507, 509, 511, 512, 513, 514, 516, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 572, 575, 576, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 603, 604, 617, 619, 647, 652, 656, 657, 658, 662, 664, 665, 669, 672, 673, 677], "dict": [0, 1, 3, 9, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 134, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 264, 265, 278, 295, 296, 297, 308, 318, 319, 320, 322, 336, 337, 338, 339, 342, 343, 344, 345, 347, 364, 365, 367, 368, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 409, 413, 414, 426, 427, 428, 430, 432, 433, 441, 453, 457, 462, 465, 472, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 559, 560, 564, 565, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 599, 600, 615, 619, 626, 647, 650, 657, 672, 673, 678], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 607, 608, 613, 615, 616, 617, 618, 619, 621, 626, 629, 630, 633, 643, 644, 647, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 677, 684], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 417, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 607, 608, 613, 614, 617, 618, 619, 623, 626, 629, 631, 633, 639, 642, 643, 644, 645, 646, 647, 650, 653, 654, 655, 657, 658, 660, 662, 664, 665, 666, 667, 669, 671, 672, 683, 684, 687], "lazygraph": [0, 1], "modul": [0, 23, 25, 46, 48, 268, 270, 271, 273, 279, 280, 284, 288, 410, 465, 599, 614, 615, 616, 618, 620, 622, 625, 626, 633, 637, 640, 643, 647, 648, 649, 656, 657, 659, 662, 663, 665, 669, 670, 672, 674, 676, 677, 683, 684, 686], "moduletyp": [0, 1], "A": [0, 1, 4, 5, 8, 9, 15, 17, 21, 22, 25, 28, 30, 31, 32, 36, 38, 40, 42, 45, 48, 74, 81, 92, 132, 149, 202, 204, 207, 226, 232, 233, 235, 247, 252, 258, 269, 272, 276, 278, 281, 282, 287, 311, 315, 322, 325, 337, 339, 342, 343, 346, 347, 348, 349, 350, 358, 362, 363, 367, 398, 399, 426, 427, 430, 455, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 474, 478, 479, 490, 499, 504, 505, 510, 511, 515, 516, 528, 531, 533, 537, 539, 547, 550, 552, 554, 555, 556, 557, 558, 562, 563, 564, 565, 567, 568, 569, 570, 572, 578, 587, 595, 596, 597, 599, 600, 602, 603, 604, 605, 608, 616, 617, 622, 631, 634, 635, 636, 637, 641, 642, 643, 645, 650, 652, 653, 656, 658, 659, 663, 664, 665, 669, 672, 677, 678, 683, 684], "non": [0, 1, 5, 8, 13, 17, 18, 21, 22, 28, 31, 36, 40, 41, 44, 45, 91, 109, 117, 196, 197, 227, 240, 245, 246, 257, 269, 272, 276, 278, 287, 311, 319, 320, 361, 461, 463, 468, 472, 474, 475, 478, 479, 497, 507, 509, 516, 518, 522, 523, 560, 569, 573, 574, 575, 576, 588, 589, 590, 591, 592, 594, 595, 596, 617, 619, 621, 647, 650, 652, 654, 660, 669, 683], "initi": [0, 1, 12, 25, 35, 48, 467, 492, 615, 616, 618, 619, 621, 633, 636, 644, 648, 652, 653, 664, 665, 669, 683, 689, 690], "object": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 53, 71, 75, 83, 95, 104, 107, 114, 117, 150, 200, 227, 269, 347, 457, 460, 461, 462, 472, 474, 550, 552, 554, 555, 556, 562, 563, 564, 565, 572, 599, 600, 606, 607, 613, 615, 618, 619, 626, 633, 647, 650, 651, 660, 663, 664, 665, 667, 671, 674, 683, 689], "forward": [0, 8, 31, 275, 295, 299, 300, 615, 617, 619, 621, 633, 643, 648, 655, 661, 665, 666, 667, 674, 676, 677, 683, 684], "pass": [0, 1, 8, 23, 25, 31, 46, 48, 96, 117, 132, 149, 162, 257, 272, 278, 281, 282, 287, 326, 342, 343, 346, 361, 362, 400, 461, 462, 463, 465, 471, 544, 545, 597, 599, 608, 615, 619, 621, 622, 626, 631, 633, 642, 644, 646, 647, 648, 650, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 677, 681], "same": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 25, 27, 28, 30, 31, 32, 33, 35, 36, 38, 40, 42, 44, 47, 58, 65, 73, 77, 79, 80, 82, 84, 85, 86, 88, 91, 92, 93, 104, 107, 149, 155, 156, 157, 158, 159, 161, 165, 167, 170, 179, 202, 204, 208, 209, 210, 218, 221, 226, 232, 233, 238, 244, 265, 267, 269, 272, 275, 276, 278, 281, 283, 285, 287, 291, 292, 293, 303, 304, 305, 308, 310, 322, 336, 338, 342, 343, 351, 352, 353, 358, 359, 363, 406, 453, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 508, 510, 511, 512, 513, 515, 516, 520, 522, 529, 532, 533, 535, 536, 538, 539, 544, 545, 560, 570, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 602, 603, 604, 618, 633, 635, 637, 639, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 677, 680, 682, 689, 690], "copi": [0, 1, 4, 5, 6, 8, 9, 15, 25, 27, 28, 29, 31, 32, 38, 66, 67, 71, 75, 91, 150, 257, 272, 278, 285, 317, 318, 319, 320, 323, 325, 326, 327, 328, 330, 333, 337, 340, 353, 387, 426, 432, 433, 460, 461, 462, 465, 470, 472, 477, 531, 532, 533, 535, 537, 538, 540, 542, 548, 584, 643, 644, 646, 648, 651, 652, 655, 663, 664, 669, 676, 677], "everi": [0, 1, 4, 8, 9, 31, 32, 76, 77, 221, 249, 267, 272, 364, 460, 465, 639, 642, 644, 646, 648, 649, 650, 651, 652, 654, 658, 659, 660, 662, 663, 664, 665, 666, 669, 671, 673, 683], "method": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 272, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 456, 460, 461, 463, 465, 466, 468, 469, 472, 475, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 608, 616, 617, 618, 619, 642, 644, 646, 647, 651, 652, 654, 655, 657, 658, 659, 660, 665, 666, 669, 670, 673, 674, 677, 684, 690], "To": [0, 1, 420, 465, 617, 639, 643, 646, 647, 649, 650, 652, 654, 656, 657, 659, 663, 664, 665, 666, 672, 673, 674], "you": [0, 1, 8, 9, 31, 32, 47, 48, 278, 287, 325, 362, 382, 383, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "need": [0, 1, 8, 9, 15, 31, 32, 38, 275, 276, 287, 295, 299, 300, 310, 362, 370, 371, 400, 465, 468, 470, 472, 500, 528, 531, 558, 603, 633, 637, 639, 640, 642, 643, 644, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 661, 662, 663, 664, 666, 667, 669, 671, 672, 676, 677, 679, 683, 684, 685, 689], "correspond": [0, 1, 5, 7, 8, 9, 12, 15, 18, 19, 21, 25, 28, 30, 31, 35, 38, 44, 48, 51, 53, 92, 104, 107, 162, 205, 243, 244, 263, 272, 275, 276, 278, 281, 295, 307, 310, 311, 312, 327, 328, 342, 343, 426, 442, 457, 461, 463, 465, 467, 468, 470, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 500, 501, 507, 514, 515, 536, 567, 573, 574, 578, 579, 580, 581, 585, 586, 591, 592, 593, 594, 599, 602, 633, 642, 644, 647, 648, 650, 651, 652, 654, 655, 658, 659, 660, 661, 663, 665, 667, 669, 683], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 132, 134, 135, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 390, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 415, 419, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 603, 608, 617, 618, 619, 620, 646, 647, 648, 650, 652, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 677, 684, 687], "let": [0, 1, 9, 21, 32, 382, 383, 465, 478, 589, 592, 593, 594, 633, 637, 639, 647, 649, 650, 652, 653, 654, 655, 656, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 690], "start": [0, 1, 4, 8, 25, 27, 31, 65, 78, 79, 227, 255, 269, 272, 278, 326, 460, 604, 616, 633, 638, 639, 642, 643, 644, 645, 651, 652, 654, 655, 658, 663, 665, 667, 668, 669, 671, 672, 673, 676, 677, 683, 689], "simpl": [0, 1, 8, 31, 276, 308, 378, 465, 604, 633, 635, 642, 643, 644, 647, 649, 650, 652, 653, 654, 655, 659, 662, 663, 665, 666, 667, 671, 673, 674, 677, 678, 682, 683, 684, 685], "import": [0, 1, 8, 19, 23, 27, 31, 46, 132, 133, 137, 138, 146, 147, 276, 308, 462, 476, 581, 608, 626, 633, 636, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 661, 662, 663, 664, 665, 666, 669, 671, 672, 674, 677, 679, 681, 683, 686, 687, 689], "set_backend": [0, 1, 8, 23, 31, 106, 114, 132, 133, 146, 147, 236, 272, 276, 311, 461, 462, 626, 633, 646, 648, 652, 659, 660, 661, 669, 671, 674], "torch": [0, 1, 4, 9, 13, 23, 32, 36, 71, 106, 132, 133, 146, 147, 209, 400, 428, 460, 461, 462, 463, 465, 468, 516, 599, 615, 626, 633, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 677, 678, 689], "def": [0, 1, 8, 31, 236, 369, 465, 472, 553, 633, 642, 643, 646, 647, 650, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674], "fn": [0, 25, 28, 68, 69, 70, 105, 106, 137, 138, 365, 380, 381, 434, 460, 461, 462, 465, 472, 553, 554, 555, 557, 558, 559, 597, 599, 623, 626, 629, 630, 631, 656, 662, 663, 669], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 118, 134, 135, 139, 143, 144, 145, 148, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 247, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 286, 287, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 326, 331, 332, 333, 334, 336, 339, 341, 342, 343, 344, 345, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 388, 389, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 417, 418, 420, 423, 424, 426, 428, 430, 432, 433, 434, 441, 442, 444, 445, 446, 448, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 550, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 607, 618, 623, 626, 631, 633, 647, 648, 650, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674], "y": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 71, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 102, 104, 107, 118, 131, 135, 139, 143, 144, 145, 148, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 235, 250, 252, 254, 255, 262, 263, 264, 267, 269, 272, 275, 276, 277, 278, 287, 294, 296, 307, 308, 311, 313, 315, 316, 322, 324, 331, 336, 338, 339, 341, 344, 345, 352, 353, 359, 361, 363, 364, 367, 370, 371, 374, 375, 377, 378, 379, 382, 383, 384, 392, 396, 398, 399, 400, 402, 403, 405, 406, 411, 417, 418, 420, 423, 424, 426, 428, 430, 432, 433, 434, 438, 441, 442, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 486, 489, 490, 491, 495, 496, 497, 502, 504, 506, 507, 509, 510, 511, 512, 514, 516, 517, 518, 520, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 550, 553, 554, 556, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 631, 633, 648, 650, 654, 661, 663, 664, 665, 666, 667, 669, 671], "z": [0, 4, 7, 8, 9, 13, 14, 17, 19, 21, 27, 30, 31, 32, 36, 37, 38, 40, 44, 47, 48, 78, 79, 81, 82, 139, 158, 162, 164, 167, 169, 174, 182, 183, 185, 186, 187, 188, 189, 194, 195, 197, 198, 199, 200, 215, 220, 221, 236, 238, 260, 267, 272, 276, 277, 308, 316, 321, 322, 331, 359, 367, 379, 382, 383, 398, 399, 414, 424, 426, 434, 442, 460, 462, 463, 465, 468, 469, 470, 472, 474, 475, 476, 478, 496, 506, 511, 512, 516, 523, 525, 526, 527, 528, 550, 554, 556, 564, 568, 569, 570, 573, 578, 587, 588, 590, 591, 592, 617, 633, 648, 650, 654, 669, 671], "k": [0, 4, 8, 12, 13, 17, 27, 30, 31, 35, 36, 40, 74, 85, 86, 195, 226, 232, 233, 269, 276, 278, 282, 285, 309, 337, 339, 346, 347, 348, 350, 352, 367, 460, 465, 467, 468, 472, 474, 475, 494, 498, 506, 507, 513, 515, 516, 517, 520, 555, 568, 569, 570, 576, 633, 645, 646, 663, 664, 669, 679, 683], "j": [0, 4, 8, 13, 21, 27, 30, 31, 36, 82, 195, 236, 251, 272, 276, 287, 299, 300, 306, 310, 312, 363, 367, 460, 465, 468, 478, 500, 520, 587, 644, 645, 679], "concat": [0, 9, 15, 25, 38, 149, 379, 462, 465, 470, 543, 664, 667, 669], "sum_j": 0, "sum": [0, 1, 7, 8, 9, 12, 13, 14, 21, 25, 30, 31, 32, 35, 36, 37, 44, 47, 48, 149, 158, 194, 215, 258, 272, 287, 361, 362, 376, 413, 414, 462, 463, 465, 467, 468, 469, 478, 490, 494, 507, 516, 520, 523, 526, 527, 586, 587, 617, 633, 650, 652, 659, 661, 662, 663, 669], "1": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 102, 103, 104, 107, 112, 113, 118, 134, 135, 139, 142, 143, 145, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 424, 426, 427, 428, 430, 432, 433, 434, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 559, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 608, 616, 617, 618, 619, 620, 621, 622, 626, 633, 636, 637, 643, 644, 646, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677], "2": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 102, 104, 112, 113, 118, 134, 135, 136, 139, 141, 143, 145, 147, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 285, 287, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 424, 426, 428, 430, 434, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 604, 605, 614, 617, 626, 633, 643, 644, 646, 648, 649, 650, 651, 652, 654, 656, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 677, 689, 690], "3": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 74, 77, 78, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 102, 104, 112, 113, 118, 132, 134, 135, 145, 147, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 296, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 413, 414, 424, 426, 430, 433, 434, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 605, 633, 643, 646, 647, 648, 650, 652, 654, 656, 661, 664, 665, 667, 669, 671, 672, 673, 674, 690], "4": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 77, 78, 79, 80, 81, 82, 84, 88, 92, 93, 94, 102, 104, 107, 112, 113, 118, 135, 136, 143, 147, 150, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 232, 233, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 262, 263, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 294, 296, 298, 299, 300, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 370, 371, 374, 375, 376, 377, 379, 382, 383, 387, 396, 398, 399, 400, 406, 413, 414, 426, 428, 430, 434, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 520, 521, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 605, 617, 621, 633, 637, 642, 643, 648, 649, 650, 651, 654, 661, 664, 665, 667, 669, 671, 672, 673, 674, 683, 689, 690], "compiled_fn": 0, "In": [0, 1, 6, 9, 15, 29, 32, 38, 144, 150, 151, 154, 158, 208, 275, 281, 296, 297, 342, 343, 365, 400, 462, 463, 465, 468, 470, 474, 514, 535, 570, 633, 635, 637, 639, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 671, 672, 673, 674, 676, 677, 679, 681, 683, 684, 686, 689], "case": [0, 1, 3, 4, 8, 9, 15, 21, 25, 32, 38, 48, 80, 132, 144, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 210, 211, 212, 213, 216, 217, 218, 245, 246, 249, 262, 272, 275, 281, 282, 296, 297, 342, 343, 348, 400, 413, 414, 460, 462, 463, 465, 468, 470, 472, 478, 514, 535, 550, 556, 588, 589, 590, 592, 593, 594, 602, 618, 619, 621, 633, 636, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 677, 682, 686], "would": [0, 6, 8, 15, 29, 31, 38, 55, 59, 150, 275, 299, 300, 457, 462, 470, 535, 604, 633, 636, 638, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 654, 655, 657, 658, 660, 662, 663, 664, 665, 667, 668, 669, 671, 673, 674, 677, 683, 689], "can": [0, 1, 4, 5, 8, 9, 13, 15, 17, 19, 27, 28, 31, 32, 36, 38, 40, 42, 66, 67, 79, 81, 94, 132, 147, 148, 149, 222, 226, 267, 269, 275, 276, 281, 282, 285, 295, 302, 308, 322, 342, 343, 347, 348, 352, 406, 442, 445, 460, 461, 462, 465, 466, 468, 470, 474, 499, 506, 516, 520, 535, 539, 568, 569, 570, 578, 599, 602, 603, 604, 605, 608, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690], "observ": [0, 8, 31, 276, 308, 359, 644, 656, 669, 685], "As": [0, 1, 19, 23, 46, 476, 578, 579, 580, 581, 633, 635, 644, 647, 649, 650, 651, 652, 653, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 671, 672, 673, 677, 683, 688], "variabl": [0, 8, 9, 10, 16, 25, 31, 32, 33, 39, 276, 282, 308, 348, 359, 368, 400, 401, 402, 403, 405, 428, 444, 445, 447, 449, 450, 451, 465, 466, 467, 468, 471, 473, 493, 515, 544, 545, 546, 566, 599, 608, 615, 616, 617, 618, 619, 620, 621, 622, 644, 648, 652, 655, 657, 658, 661, 662, 665, 666, 669, 672, 673, 674, 677, 684], "calcul": [0, 7, 8, 9, 14, 21, 25, 30, 31, 32, 36, 37, 44, 48, 155, 156, 157, 158, 159, 160, 161, 162, 171, 172, 174, 177, 178, 190, 191, 192, 193, 194, 199, 200, 201, 205, 211, 212, 213, 215, 216, 217, 236, 242, 249, 256, 262, 272, 275, 276, 277, 278, 281, 287, 291, 292, 293, 311, 316, 336, 342, 343, 362, 406, 463, 465, 468, 469, 478, 502, 511, 514, 525, 526, 527, 588, 589, 590, 591, 592, 593, 594, 602, 604, 617, 636, 642, 655, 669], "valu": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 53, 60, 65, 74, 76, 77, 78, 79, 82, 91, 108, 112, 117, 148, 149, 155, 156, 157, 158, 159, 161, 162, 170, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 217, 218, 219, 222, 225, 226, 232, 233, 235, 237, 238, 240, 241, 243, 247, 249, 252, 254, 257, 259, 260, 262, 263, 264, 265, 267, 269, 272, 275, 276, 278, 281, 282, 286, 287, 295, 302, 304, 309, 311, 329, 334, 336, 338, 339, 342, 343, 346, 347, 349, 350, 356, 361, 362, 363, 368, 369, 370, 371, 372, 374, 379, 382, 383, 387, 389, 392, 393, 398, 399, 400, 406, 413, 414, 417, 418, 420, 428, 433, 438, 441, 442, 443, 444, 445, 449, 452, 454, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 498, 507, 508, 509, 512, 513, 514, 515, 516, 517, 523, 528, 529, 530, 534, 535, 543, 544, 545, 549, 551, 552, 553, 554, 555, 560, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 599, 602, 603, 604, 605, 607, 613, 616, 617, 618, 619, 620, 621, 643, 644, 646, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 665, 667, 669, 671, 677, 683, 684], "wa": [0, 1, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 261, 262, 264, 265, 272, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 434, 441, 447, 453, 465, 472, 478, 479, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 626, 633, 636, 644, 646, 651, 654, 661, 663, 669, 671, 682, 683, 685], "like": [0, 1, 4, 8, 15, 27, 31, 38, 79, 95, 117, 236, 241, 242, 244, 248, 251, 256, 261, 272, 276, 278, 285, 310, 319, 320, 326, 352, 353, 460, 461, 468, 470, 474, 500, 535, 570, 633, 636, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 683, 688], "were": [0, 25, 28, 107, 111, 112, 644, 652, 656, 657, 661, 662, 664, 665, 666, 667, 669, 683, 684, 689], "exclud": [0, 21, 44, 65, 232, 233, 269, 460, 474, 570, 585, 602, 605, 626, 654, 669], "process": [0, 144, 154, 462, 636, 637, 638, 643, 644, 650, 651, 659, 661, 663, 664, 665, 667, 669, 674, 681, 682, 683, 686, 687, 689, 690], "tensor": [0, 1, 4, 7, 8, 9, 12, 15, 17, 25, 27, 30, 31, 32, 35, 36, 38, 40, 71, 78, 79, 82, 102, 117, 199, 200, 222, 226, 232, 233, 237, 267, 269, 272, 275, 278, 287, 291, 292, 295, 298, 302, 303, 304, 326, 361, 413, 414, 460, 461, 463, 465, 467, 468, 470, 474, 490, 492, 505, 518, 537, 567, 618, 626, 633, 635, 647, 648, 652, 653, 658, 659, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 677, 678, 680, 681, 684, 686, 687, 690], "shape": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 145, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 237, 238, 239, 241, 244, 247, 250, 254, 255, 260, 262, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 325, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 370, 371, 375, 376, 377, 379, 382, 383, 391, 400, 406, 413, 414, 421, 429, 431, 439, 442, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 582, 584, 585, 586, 587, 589, 591, 592, 594, 595, 596, 599, 602, 604, 613, 617, 618, 620, 633, 644, 650, 652, 653, 654, 655, 658, 662, 663, 664, 665, 666, 669, 671, 672, 673, 674], "indic": [0, 4, 8, 9, 12, 13, 15, 16, 18, 19, 20, 25, 27, 28, 31, 32, 35, 36, 38, 39, 41, 42, 43, 66, 67, 82, 107, 111, 112, 210, 232, 233, 249, 269, 272, 275, 276, 278, 283, 285, 291, 292, 293, 295, 298, 299, 300, 303, 304, 305, 311, 323, 325, 330, 338, 339, 340, 351, 352, 367, 382, 383, 387, 413, 414, 442, 445, 460, 463, 465, 466, 468, 470, 472, 473, 474, 475, 476, 477, 481, 483, 484, 485, 486, 489, 523, 535, 536, 547, 550, 552, 554, 555, 556, 558, 562, 563, 564, 565, 566, 567, 573, 574, 575, 576, 578, 580, 582, 583, 584, 599, 600, 602, 616, 618, 619, 623, 630, 651, 657, 658, 661, 663, 674], "trace": [0, 1, 9, 13, 25, 32, 36, 394, 402, 403, 405, 416, 422, 436, 440, 465, 468, 633, 646, 652, 669, 677, 678, 684, 689], "doesn": [0, 400, 465, 643, 648, 649, 650, 651, 652, 654, 661, 665, 667, 669, 677, 681], "impos": 0, "addit": [0, 6, 8, 9, 16, 29, 31, 32, 39, 150, 158, 209, 359, 375, 376, 377, 442, 462, 463, 465, 473, 566, 618, 642, 643, 644, 648, 650, 652, 654, 655, 661, 662, 663, 665, 666, 667, 671, 672, 674, 683, 684, 685, 689], "restrict": [0, 650, 651, 663, 669, 680], "datatyp": [0, 4, 25, 27, 67, 77, 81, 96, 116, 120, 460, 461, 597, 666], "out": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 102, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 366, 370, 371, 375, 376, 377, 379, 382, 383, 400, 409, 413, 414, 443, 444, 447, 449, 450, 451, 453, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 608, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "differ": [0, 1, 7, 8, 9, 21, 25, 31, 32, 44, 47, 48, 104, 158, 215, 235, 241, 244, 245, 246, 252, 272, 278, 287, 327, 328, 337, 363, 382, 383, 461, 463, 465, 467, 468, 470, 478, 490, 491, 514, 529, 539, 585, 586, 591, 593, 594, 619, 633, 635, 636, 637, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 680, 681, 682, 683, 686, 689, 690], "b": [0, 7, 8, 9, 12, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 66, 67, 71, 74, 76, 77, 79, 82, 84, 88, 91, 92, 93, 94, 102, 112, 113, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 282, 285, 291, 292, 293, 294, 296, 299, 300, 303, 304, 305, 308, 311, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 350, 351, 352, 360, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 406, 413, 414, 426, 428, 432, 433, 441, 443, 444, 445, 447, 449, 451, 453, 457, 460, 461, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 550, 553, 554, 555, 556, 558, 564, 565, 566, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 634, 637, 638, 644, 645, 646, 648, 650, 651, 654, 659, 661, 664, 668, 669, 670, 672, 673, 674, 675, 679], "new": [0, 8, 9, 10, 15, 16, 25, 27, 31, 32, 33, 36, 38, 39, 42, 72, 75, 76, 77, 82, 83, 84, 87, 88, 124, 163, 202, 204, 207, 235, 239, 252, 258, 272, 278, 287, 317, 322, 333, 362, 375, 376, 377, 379, 382, 383, 387, 413, 414, 417, 423, 426, 427, 432, 444, 447, 449, 450, 451, 460, 461, 463, 465, 466, 470, 472, 473, 511, 531, 535, 539, 552, 564, 565, 566, 581, 615, 618, 620, 621, 626, 633, 635, 636, 637, 638, 642, 643, 644, 645, 647, 648, 650, 651, 652, 654, 655, 657, 660, 662, 663, 664, 665, 666, 667, 668, 671, 674, 676, 678, 681, 685, 689, 690], "run": [0, 1, 8, 10, 31, 33, 281, 342, 343, 443, 444, 449, 466, 471, 544, 545, 546, 599, 600, 618, 619, 633, 639, 640, 642, 643, 645, 647, 648, 651, 654, 656, 657, 658, 659, 660, 663, 664, 669, 670, 671, 672, 673, 674, 676, 677, 681, 683, 684, 685, 686, 688, 689, 690], "under": [0, 1, 633, 642, 643, 644, 645, 646, 649, 650, 654, 655, 659, 663, 664, 665, 667, 668, 669, 672, 674, 677, 683, 686, 690], "hood": [0, 1, 633, 645, 650, 654, 659, 663, 665, 667, 668, 669, 672, 674, 690], "track": [0, 466, 472, 559, 616, 619, 643, 644, 646, 661, 662, 683], "befor": [0, 1, 8, 12, 13, 15, 19, 21, 25, 31, 35, 36, 149, 275, 278, 299, 300, 327, 328, 336, 462, 467, 468, 470, 471, 472, 476, 478, 480, 481, 482, 483, 485, 487, 489, 493, 494, 506, 523, 529, 544, 545, 559, 578, 579, 580, 581, 585, 586, 591, 593, 616, 626, 642, 643, 644, 646, 647, 649, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 669, 672, 677, 683], "instead": [0, 1, 7, 8, 30, 31, 132, 208, 276, 308, 462, 463, 642, 643, 644, 646, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 667, 669, 671, 672, 677, 681, 683, 689, 690], "allow": [0, 1, 8, 31, 78, 287, 362, 409, 460, 465, 477, 583, 602, 603, 604, 605, 616, 619, 631, 633, 636, 639, 642, 644, 647, 651, 652, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 669, 671, 677, 678, 681, 683, 687, 688], "dynam": [0, 626, 645, 652, 653, 662, 663, 669, 683, 687], "done": [0, 1, 468, 502, 641, 642, 643, 644, 646, 649, 651, 654, 657, 662, 663, 665, 672, 683], "first": [0, 1, 4, 7, 8, 13, 15, 17, 18, 19, 21, 27, 30, 31, 32, 36, 38, 40, 42, 44, 47, 48, 78, 79, 116, 124, 134, 158, 162, 164, 166, 167, 168, 169, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 215, 222, 232, 233, 235, 245, 246, 248, 249, 250, 252, 253, 256, 259, 264, 265, 267, 269, 272, 275, 276, 278, 285, 287, 295, 310, 311, 313, 323, 326, 332, 336, 337, 347, 349, 352, 353, 363, 367, 460, 461, 462, 463, 465, 468, 470, 471, 472, 474, 475, 476, 477, 478, 496, 499, 500, 501, 503, 506, 511, 513, 514, 516, 518, 522, 535, 536, 539, 540, 544, 545, 546, 547, 548, 557, 558, 560, 572, 573, 574, 578, 579, 580, 583, 585, 586, 599, 617, 618, 619, 621, 626, 633, 635, 636, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 654, 658, 659, 660, 662, 663, 665, 667, 669, 671, 672, 674, 681, 683, 684, 688], "invok": [0, 1, 8, 275, 295, 633], "onc": [0, 13, 17, 36, 40, 149, 276, 310, 462, 468, 474, 500, 501, 502, 516, 567, 637, 642, 643, 644, 650, 651, 652, 653, 654, 662, 663, 665, 667, 669, 672, 677], "been": [0, 9, 17, 32, 40, 134, 209, 375, 376, 377, 462, 463, 465, 474, 567, 642, 644, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 665, 669, 671, 676, 677, 678, 683, 690], "directli": [0, 1, 472, 559, 633, 637, 644, 646, 647, 649, 650, 651, 652, 653, 655, 659, 660, 662, 663, 664, 666, 667, 669, 671, 673, 674, 676, 677, 687, 688, 689], "here": [0, 1, 209, 463, 633, 641, 642, 643, 644, 646, 649, 650, 651, 654, 658, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 677, 683, 684], "eager_graph": [0, 1, 633], "doe": [0, 8, 9, 15, 25, 31, 38, 169, 232, 233, 257, 269, 272, 276, 287, 310, 361, 362, 400, 463, 465, 468, 470, 500, 537, 597, 636, 642, 644, 645, 648, 651, 652, 654, 655, 658, 659, 662, 663, 664, 665, 666, 667, 669, 671, 672, 677, 678, 679, 683, 684, 690], "lazy_graph": [0, 1, 633], "up": [0, 8, 9, 31, 32, 275, 278, 295, 302, 328, 406, 465, 467, 490, 616, 635, 636, 637, 638, 639, 642, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "enabl": [0, 8, 25, 48, 275, 295, 456, 466, 633, 636, 643, 644, 647, 650, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 672, 674, 677, 678, 681, 682, 683, 684, 685, 686, 689, 690], "delai": [0, 644], "until": [0, 636, 644, 657, 662, 666, 669, 677, 690], "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 104, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 237, 238, 247, 250, 254, 255, 260, 262, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 319, 320, 322, 323, 337, 339, 344, 345, 346, 347, 349, 350, 351, 352, 362, 370, 371, 375, 376, 377, 382, 383, 400, 413, 414, 443, 444, 447, 449, 450, 451, 453, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 614, 615, 616, 617, 618, 619, 620, 621, 622, 633, 634, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "necessari": [0, 1, 8, 15, 31, 38, 278, 318, 319, 320, 470, 535, 633, 643, 644, 647, 648, 650, 654, 660, 662, 663, 665, 667], "particularli": [0, 644, 672, 677, 681], "librari": [0, 6, 19, 29, 150, 178, 192, 196, 197, 462, 463, 468, 476, 478, 501, 502, 578, 579, 580, 581, 588, 589, 590, 592, 633, 635, 636, 637, 638, 640, 642, 643, 646, 667, 674, 675, 677, 678, 679, 680, 681, 683, 687, 690], "where": [0, 4, 7, 8, 9, 13, 15, 17, 18, 21, 22, 25, 27, 30, 31, 32, 36, 38, 40, 41, 44, 45, 76, 77, 80, 82, 162, 177, 187, 192, 199, 200, 205, 220, 222, 232, 233, 245, 246, 252, 260, 261, 267, 269, 272, 275, 276, 278, 281, 282, 287, 289, 290, 295, 299, 300, 308, 310, 311, 318, 319, 320, 329, 336, 342, 343, 346, 347, 350, 363, 400, 413, 442, 456, 460, 463, 465, 466, 468, 470, 472, 474, 475, 478, 479, 500, 501, 505, 507, 509, 511, 512, 513, 516, 517, 520, 522, 528, 530, 531, 533, 539, 543, 558, 567, 568, 569, 570, 575, 576, 592, 594, 595, 596, 617, 633, 635, 636, 637, 638, 643, 644, 646, 647, 648, 650, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 672, 673, 674, 677, 681, 690], "feasibl": [0, 636, 642, 651], "provid": [0, 1, 4, 8, 9, 13, 15, 18, 21, 22, 25, 27, 31, 32, 36, 38, 41, 44, 45, 51, 53, 80, 82, 97, 98, 99, 100, 101, 109, 118, 130, 134, 263, 272, 278, 281, 323, 330, 340, 342, 343, 369, 374, 413, 414, 457, 460, 461, 462, 465, 468, 470, 475, 478, 479, 508, 511, 522, 531, 532, 539, 573, 592, 594, 595, 596, 618, 621, 626, 633, 635, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 667, 671, 673, 676, 677, 681, 682, 683, 684, 685, 686, 687, 690], "valid": [0, 8, 12, 22, 31, 35, 45, 96, 275, 276, 291, 292, 293, 303, 304, 305, 315, 403, 461, 465, 467, 470, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 531, 539, 595, 596, 602, 603, 618, 643, 648, 652, 654, 661, 664, 665, 684], "look": [0, 633, 635, 639, 643, 644, 648, 649, 650, 652, 653, 654, 656, 658, 659, 663, 664, 665, 666, 667, 669, 671, 673, 674, 679, 683], "find": [0, 19, 25, 472, 476, 549, 578, 579, 580, 581, 633, 635, 638, 641, 642, 643, 644, 646, 649, 651, 661, 665, 667, 669, 672, 678], "abl": [0, 25, 643, 644, 646, 652, 659, 662, 663, 667, 669, 674, 686, 689], "through": [0, 8, 31, 162, 287, 361, 362, 463, 472, 550, 556, 619, 633, 638, 641, 642, 644, 645, 648, 649, 650, 651, 654, 656, 659, 660, 662, 663, 664, 665, 667, 668, 669, 672, 673, 674, 676, 681, 683, 684, 685], "flag": [0, 1, 25, 134, 276, 308, 462, 599, 608, 644, 652, 660, 662, 663, 664, 665], "reduc": [0, 8, 9, 13, 18, 21, 22, 25, 31, 32, 36, 41, 44, 45, 149, 258, 272, 287, 360, 361, 362, 363, 376, 462, 465, 468, 475, 478, 479, 513, 573, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 651, 656, 663, 667, 669, 671, 681, 685, 686, 687], "time": [0, 1, 8, 10, 13, 19, 31, 33, 42, 227, 241, 269, 272, 276, 278, 308, 336, 337, 444, 449, 466, 467, 468, 470, 471, 475, 476, 490, 492, 506, 541, 544, 545, 546, 573, 574, 578, 579, 618, 619, 635, 636, 637, 642, 643, 644, 648, 650, 651, 652, 654, 658, 659, 660, 662, 663, 665, 666, 669, 672, 674, 677, 681, 683, 684, 687, 688, 689], "comp_func": 0, "default": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 137, 138, 141, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 322, 325, 326, 327, 328, 329, 332, 333, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 390, 391, 392, 393, 394, 396, 398, 399, 400, 402, 403, 405, 406, 409, 410, 413, 414, 420, 424, 426, 427, 428, 430, 432, 433, 441, 442, 443, 444, 445, 447, 449, 450, 451, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 605, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 642, 643, 644, 648, 649, 652, 653, 654, 655, 656, 658, 659, 660, 663, 665, 667, 669, 673, 678, 683], "follow": [0, 8, 9, 10, 12, 13, 19, 25, 31, 32, 33, 35, 36, 107, 149, 208, 227, 269, 275, 278, 281, 295, 302, 325, 336, 342, 343, 398, 399, 400, 426, 427, 444, 447, 449, 450, 451, 461, 462, 463, 465, 466, 467, 468, 472, 476, 493, 494, 507, 513, 523, 553, 559, 578, 579, 580, 581, 618, 621, 633, 635, 636, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 680, 683, 686], "show": [0, 394, 416, 422, 440, 465, 616, 633, 642, 643, 644, 651, 654, 662, 663, 665, 676, 677, 683], "simpler": [0, 642, 644, 663, 684, 690], "obtain": [0, 663], "howev": [0, 13, 36, 281, 342, 343, 468, 514, 516, 626, 636, 642, 643, 644, 646, 647, 648, 650, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 667, 669, 671, 672, 673, 674, 677, 682, 683, 689], "desir": [0, 5, 6, 8, 18, 25, 28, 29, 31, 41, 91, 93, 94, 150, 287, 361, 363, 461, 462, 475, 575, 617, 618, 635, 644, 648, 651, 652, 663, 669, 683], "below": [0, 1, 4, 13, 36, 44, 85, 86, 187, 232, 233, 238, 260, 269, 272, 460, 463, 468, 499, 520, 594, 633, 638, 642, 643, 645, 646, 650, 651, 652, 653, 654, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 681, 686, 688], "ultim": 0, "trade": 0, "off": [0, 12, 13, 35, 36, 296, 297, 467, 468, 490, 499, 520, 617, 637, 643, 668, 689], "between": [0, 1, 8, 12, 13, 14, 15, 19, 25, 30, 31, 35, 37, 38, 48, 65, 104, 162, 205, 235, 252, 255, 263, 272, 277, 278, 287, 296, 297, 316, 336, 363, 460, 461, 463, 467, 469, 470, 472, 474, 476, 490, 511, 525, 526, 527, 531, 539, 553, 568, 579, 580, 581, 603, 621, 635, 647, 648, 650, 654, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 674, 676, 679, 680, 682, 683, 684, 689], "memori": [0, 4, 8, 15, 31, 38, 80, 133, 144, 149, 151, 154, 278, 287, 326, 362, 460, 462, 467, 470, 492, 535, 633, 651, 652, 653, 662, 663, 667, 669, 675, 677, 683, 685, 686, 687], "store": [0, 5, 9, 13, 15, 25, 28, 32, 36, 38, 42, 74, 84, 88, 93, 379, 460, 465, 468, 470, 520, 537, 581, 599, 600, 619, 640, 644, 647, 648, 650, 655, 660, 662, 663, 669, 671, 672, 673, 678], "thei": [0, 8, 13, 17, 25, 36, 40, 116, 244, 263, 272, 461, 468, 471, 474, 521, 544, 545, 567, 597, 622, 633, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 659, 660, 662, 663, 665, 666, 667, 669, 671, 672, 673, 674, 677, 680, 683, 685, 686, 689, 690], "By": [0, 8, 15, 21, 22, 31, 38, 44, 45, 226, 234, 249, 258, 269, 272, 275, 276, 285, 295, 308, 352, 468, 470, 478, 479, 522, 534, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 652, 654, 656, 659, 661, 662, 663, 669, 673, 674], "choos": [0, 6, 18, 19, 29, 150, 196, 197, 462, 463, 475, 476, 478, 577, 578, 579, 580, 581, 588, 589, 590, 592, 642, 643, 644, 665, 670, 674], "node": [0, 1, 25, 32, 368, 428, 472, 557, 558, 617, 625, 636, 649, 650, 663, 684], "bake": 0, "randint": [0, 12, 17, 19, 35, 40, 474, 476, 489, 492, 578, 652], "0": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 102, 104, 107, 108, 112, 113, 118, 131, 134, 136, 139, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 285, 287, 291, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 307, 308, 309, 310, 311, 312, 314, 316, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 374, 375, 376, 378, 379, 382, 383, 384, 387, 391, 392, 393, 396, 398, 399, 400, 402, 403, 404, 405, 406, 409, 411, 413, 414, 420, 424, 426, 428, 430, 432, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 633, 644, 646, 648, 650, 651, 652, 654, 655, 656, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 674, 677], "100": [0, 4, 8, 27, 30, 31, 32, 79, 168, 213, 232, 233, 252, 257, 269, 272, 275, 296, 383, 399, 414, 460, 463, 465, 468, 472, 504, 553, 633, 636, 637, 651, 665, 672, 673, 674, 677], "size": [0, 8, 9, 12, 13, 15, 17, 18, 25, 27, 31, 32, 35, 36, 38, 40, 41, 47, 48, 72, 78, 83, 87, 147, 148, 149, 227, 229, 234, 240, 258, 269, 272, 275, 276, 278, 281, 282, 285, 287, 289, 290, 291, 292, 302, 303, 304, 311, 323, 339, 342, 343, 348, 352, 360, 361, 362, 363, 408, 413, 460, 462, 465, 467, 468, 470, 474, 475, 479, 494, 499, 503, 507, 511, 513, 516, 522, 531, 536, 537, 538, 567, 573, 576, 595, 596, 602, 604, 605, 618, 633, 662, 664, 665, 667, 672], "rand": [0, 633], "And": [0, 28, 633, 649, 665], "final": [0, 1, 4, 9, 32, 78, 79, 379, 460, 465, 618, 642, 644, 646, 647, 649, 651, 652, 654, 655, 657, 659, 661, 662, 663, 667, 668, 672, 679, 689], "__setattr__": [0, 650], "__getattr__": [0, 650], "arbitrari": [0, 1, 4, 5, 8, 25, 28, 80, 92, 118, 318, 319, 320, 445, 460, 461, 466, 650, 658, 659, 661, 662, 663, 665, 673, 677, 684, 689], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 84, 88, 104, 107, 119, 121, 122, 227, 238, 260, 272, 277, 286, 287, 292, 304, 310, 316, 361, 362, 366, 368, 375, 400, 409, 428, 460, 461, 462, 465, 466, 467, 472, 473, 475, 476, 492, 494, 500, 511, 547, 548, 559, 566, 576, 580, 581, 591, 592, 599, 600, 606, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 631, 633, 642, 649, 650, 652, 653, 654, 655, 658, 661, 664, 665, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 690], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 135, 137, 138, 139, 143, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 375, 376, 377, 378, 379, 382, 383, 390, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 419, 420, 426, 427, 428, 430, 432, 433, 437, 441, 442, 443, 444, 445, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 554, 555, 556, 560, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 607, 608, 616, 618, 619, 621, 622, 626, 633, 635, 639, 640, 642, 643, 645, 646, 647, 649, 651, 652, 654, 655, 658, 659, 660, 661, 662, 665, 667, 668, 669, 670, 673, 677, 678, 683, 684, 689], "cont_deep_copi": [0, 25, 672], "some": [0, 1, 25, 33, 178, 192, 275, 296, 297, 443, 444, 447, 449, 450, 451, 462, 463, 466, 472, 558, 618, 633, 636, 637, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 672, 673, 676, 677, 678, 679, 680, 682, 683, 684, 689, 690], "still": [0, 1, 13, 25, 36, 468, 516, 636, 642, 644, 647, 652, 655, 656, 662, 663, 665, 667, 673, 677, 680, 683, 689], "develop": [0, 1, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 649, 651, 666, 676, 677, 678, 681, 682, 683, 684, 685, 688, 689, 690], "account": [0, 8, 15, 31, 38, 278, 326, 470, 535, 617, 643, 651, 655, 663], "point": [0, 5, 7, 8, 13, 17, 19, 21, 28, 30, 31, 36, 40, 44, 65, 66, 67, 72, 74, 76, 83, 87, 91, 104, 108, 112, 118, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 177, 178, 179, 190, 191, 192, 193, 194, 205, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 226, 229, 255, 259, 260, 262, 263, 269, 272, 275, 276, 282, 287, 296, 297, 308, 310, 346, 347, 348, 349, 350, 363, 458, 460, 461, 463, 468, 474, 476, 477, 478, 495, 497, 500, 501, 502, 504, 507, 508, 509, 512, 513, 514, 515, 516, 520, 523, 569, 570, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 626, 637, 642, 643, 644, 646, 647, 649, 651, 654, 655, 658, 662, 663, 665, 666, 667, 669, 671, 672, 676, 689], "wip": 0, "ll": [0, 1, 633, 637, 638, 643, 644, 649, 654, 661, 662, 672], "soon": [0, 644, 651, 652, 675, 677], "control": [0, 8, 31, 232, 233, 269, 275, 278, 296, 297, 338, 468, 498, 616, 650, 652, 661, 662, 663, 664, 667, 671, 672, 676, 678, 683, 689], "flow": [0, 650, 676, 683, 684], "built": [0, 65, 460, 618, 619, 633, 643, 644, 649, 650, 665, 670, 678, 682, 683, 687], "moment": [0, 1, 10, 33, 443, 444, 449, 466, 621, 642, 648, 677], "condit": [0, 18, 31, 41, 276, 307, 472, 475, 557, 558, 577, 604, 646, 652, 654, 656, 659, 660, 662, 676], "branch": [0, 162, 463, 644, 646, 651, 677, 683], "loop": [0, 23, 46, 471, 544, 545, 546, 633, 648, 657, 677], "regist": [0, 644], "correctli": [0, 1, 8, 13, 18, 31, 36, 41, 240, 272, 287, 361, 362, 363, 468, 475, 507, 573, 642, 643, 644, 647, 650, 652, 654, 656, 657, 658, 662, 664, 665, 667, 673, 677], "while": [0, 8, 12, 25, 31, 35, 48, 82, 117, 196, 197, 245, 246, 272, 276, 315, 359, 460, 461, 463, 467, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 578, 589, 592, 600, 635, 636, 642, 643, 644, 647, 648, 649, 651, 652, 654, 657, 658, 659, 661, 662, 663, 664, 665, 667, 671, 673, 674, 677, 683, 689, 690], "your": [0, 1, 633, 636, 637, 638, 639, 641, 642, 643, 646, 649, 651, 655, 661, 666, 667, 672, 673, 677, 683], "depend": [0, 4, 5, 9, 13, 19, 20, 28, 36, 43, 44, 71, 91, 155, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 211, 212, 216, 217, 262, 272, 276, 310, 428, 460, 461, 463, 465, 468, 475, 477, 500, 501, 513, 514, 515, 516, 577, 582, 584, 594, 633, 636, 639, 640, 642, 643, 644, 649, 652, 655, 660, 662, 663, 664, 665, 667, 669, 677, 681, 683, 684], "chang": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 272, 278, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 470, 472, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 512, 513, 514, 516, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 559, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 599, 633, 637, 639, 642, 643, 644, 646, 648, 649, 650, 651, 652, 654, 655, 663, 664, 665, 666, 667, 669, 673, 677, 686, 689], "number": [0, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 22, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 45, 47, 48, 65, 74, 77, 78, 79, 80, 81, 82, 92, 97, 98, 99, 100, 101, 103, 104, 107, 110, 111, 112, 113, 115, 118, 141, 142, 143, 158, 162, 170, 174, 179, 180, 187, 199, 200, 205, 208, 209, 210, 218, 227, 232, 233, 235, 236, 239, 240, 241, 251, 252, 257, 258, 260, 269, 272, 276, 277, 278, 281, 307, 308, 310, 316, 318, 319, 320, 336, 337, 339, 342, 343, 358, 379, 388, 391, 411, 426, 427, 433, 441, 442, 458, 460, 461, 462, 463, 465, 467, 468, 470, 471, 474, 475, 476, 478, 479, 480, 487, 488, 490, 493, 500, 501, 502, 509, 514, 516, 521, 522, 528, 530, 531, 533, 534, 536, 537, 539, 541, 543, 544, 545, 546, 567, 571, 576, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 608, 613, 616, 617, 618, 633, 634, 635, 643, 644, 650, 651, 652, 653, 654, 661, 662, 665, 667, 669, 672], "underli": [0, 8, 15, 31, 38, 164, 167, 169, 198, 278, 326, 463, 468, 470, 514, 535, 650, 667, 683], "piec": [0, 644, 647, 659, 660, 669, 679, 681], "insid": [0, 48, 278, 339, 600, 643, 644, 647, 650, 652, 660, 665, 666, 689], "said": [0, 604, 637], "other": [0, 1, 5, 8, 9, 15, 21, 25, 28, 30, 31, 32, 38, 44, 47, 48, 65, 82, 92, 117, 178, 192, 200, 237, 241, 260, 272, 322, 364, 365, 460, 461, 463, 465, 474, 478, 529, 539, 570, 592, 594, 633, 636, 639, 642, 643, 644, 646, 647, 650, 651, 654, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 689, 690], "numpi": [0, 1, 8, 9, 21, 31, 32, 114, 132, 232, 233, 236, 269, 272, 276, 308, 368, 400, 426, 428, 432, 461, 462, 465, 478, 587, 597, 599, 626, 633, 635, 636, 641, 642, 643, 644, 646, 647, 648, 651, 652, 653, 656, 658, 662, 664, 665, 666, 667, 669, 671, 674, 678, 685, 690], "len": [0, 4, 8, 13, 31, 36, 80, 287, 363, 460, 468, 521, 633, 650, 651, 662, 663, 665, 671, 674], "incorrectli": [0, 655], "There": [0, 268, 270, 271, 273, 279, 280, 284, 288, 604, 633, 635, 642, 643, 644, 646, 647, 649, 650, 652, 654, 656, 657, 659, 661, 663, 664, 669, 672, 677, 684, 685, 689, 690], "succe": [0, 643], "hide": 0, "shouldn": [0, 666], "realli": [0, 643, 650, 677, 688, 689], "check": [0, 3, 5, 9, 25, 28, 32, 95, 96, 105, 106, 109, 111, 112, 115, 130, 137, 138, 144, 154, 368, 378, 380, 381, 390, 396, 402, 403, 404, 405, 419, 428, 437, 441, 461, 462, 465, 468, 472, 501, 502, 547, 548, 557, 558, 559, 597, 616, 633, 640, 641, 642, 643, 644, 646, 650, 651, 654, 656, 659, 660, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673], "recommend": [0, 196, 197, 208, 463, 478, 589, 592, 643, 644, 648, 649, 661], "nois": [0, 1, 633], "anoth": [0, 1, 75, 92, 94, 460, 461, 633, 636, 642, 643, 644, 649, 650, 652, 656, 659, 660, 662, 663, 665, 667, 669, 671, 674, 678, 683, 689], "right": [0, 13, 25, 36, 48, 166, 168, 250, 272, 275, 278, 301, 327, 375, 463, 465, 468, 477, 516, 521, 583, 638, 643, 644, 645, 646, 654, 667, 672], "feel": [0, 47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "free": [0, 47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 639, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "open": [0, 1, 17, 40, 65, 460, 474, 568, 570, 633, 635, 636, 637, 638, 643, 644, 649, 652, 655, 663, 664, 667, 676, 681, 682, 683, 685, 686], "issu": [0, 617, 637, 638, 641, 642, 643, 646, 648, 651, 652, 654, 656, 663, 665, 666, 669, 673, 677], "minim": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 512, 513, 514, 516, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 655, 662, 664, 667, 669, 681, 689], "resnet50": 0, "hug": 0, "face": [0, 643, 661, 667, 669, 683, 689], "classifi": [0, 1, 633], "breed": 0, "cat": [0, 1, 664, 667, 669, 674], "transform": [0, 1, 8, 12, 31, 35, 275, 294, 295, 299, 300, 467, 491, 602, 605, 633, 665, 674, 676, 678, 681, 683, 684, 685], "autoimageprocessor": [0, 1], "resnetforimageclassif": [0, 1], "dataset": [0, 1, 25, 633, 672, 675], "load_dataset": [0, 1], "download": [0, 1, 643, 665], "imag": [0, 1, 8, 12, 31, 35, 272, 275, 291, 292, 302, 303, 304, 375, 465, 467, 480, 481, 482, 483, 484, 487, 488, 489, 633, 639, 643, 666, 667, 669, 670, 672, 674, 676, 683], "huggingfac": [0, 1], "test": [0, 1, 7, 8, 9, 22, 30, 31, 32, 45, 110, 113, 184, 185, 186, 187, 260, 272, 275, 296, 297, 406, 461, 463, 465, 479, 595, 596, 597, 600, 603, 633, 637, 641, 642, 645, 649, 652, 654, 656, 657, 660, 663, 666, 677, 683], "image_processor": [0, 1], "from_pretrain": [0, 1], "microsoft": [0, 1, 636, 683, 688, 690], "resnet": [0, 1], "50": [0, 1, 8, 21, 30, 31, 32, 173, 206, 259, 272, 313, 377, 383, 398, 399, 414, 426, 463, 465, 468, 472, 475, 478, 504, 511, 548, 550, 576, 587, 602, 605, 661, 671], "preprocess": 0, "return_tensor": [0, 1], "pt": 0, "normal": [0, 8, 16, 17, 31, 39, 40, 262, 272, 275, 276, 281, 294, 295, 299, 300, 308, 342, 343, 344, 345, 470, 473, 474, 529, 539, 566, 567, 569, 617, 620, 633, 642, 662, 663, 667, 672, 681], "feed": [0, 149, 462, 683, 684], "itself": [0, 8, 257, 272, 365, 434, 465, 472, 559, 635, 643, 644, 646, 649, 650, 651, 656, 662, 663, 673, 676, 677, 682, 683, 684, 689], "without": [0, 19, 25, 392, 420, 434, 465, 470, 472, 476, 535, 548, 578, 579, 580, 581, 602, 605, 644, 647, 650, 651, 652, 653, 654, 656, 657, 658, 659, 663, 665, 666, 667, 671, 672, 673, 676, 677, 680, 683, 684, 685, 689], "pytorch": [0, 1, 209, 463, 621, 633, 636, 637, 641, 642, 647, 652, 653, 656, 658, 659, 662, 663, 664, 666, 667, 669, 674, 677, 678, 684, 686, 687, 689, 690], "no_grad": 0, "logit": [0, 8, 14, 31, 37, 267, 277, 282, 316, 346, 469, 527, 633], "With": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 96, 102, 103, 104, 107, 113, 118, 119, 120, 121, 122, 132, 135, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 238, 240, 247, 252, 253, 254, 255, 258, 260, 262, 263, 267, 269, 272, 275, 276, 277, 278, 287, 294, 296, 307, 308, 309, 311, 312, 315, 316, 326, 327, 328, 329, 332, 333, 336, 337, 339, 351, 360, 361, 362, 363, 364, 368, 369, 370, 371, 374, 375, 376, 377, 378, 382, 383, 391, 396, 398, 399, 400, 413, 414, 426, 428, 430, 432, 433, 441, 442, 443, 444, 445, 447, 448, 449, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 502, 504, 506, 507, 508, 509, 510, 514, 516, 517, 518, 520, 521, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 636, 637, 643, 654, 660, 663, 665, 667, 669, 683, 686], "compiled_graph": 0, "our": [0, 23, 46, 47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 604, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 656, 657, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 688, 689], "predicted_label": 0, "argmax": [0, 18, 41, 475, 633, 663], "item": [0, 3, 9, 23, 25, 31, 32, 98, 134, 227, 241, 243, 248, 256, 257, 261, 269, 372, 382, 383, 393, 426, 427, 454, 461, 462, 465, 466, 472, 552, 553, 554, 555, 559, 564, 565, 619, 633, 642, 650, 652, 669, 671, 672, 674], "config": [0, 25, 472, 560, 639, 643, 646, 649, 651, 672, 684], "id2label": 0, "compil": [1, 599, 608, 619, 621, 633, 650, 663, 666, 667, 668, 670, 677, 678, 679, 682, 683, 684, 687, 690], "convert": [1, 3, 4, 7, 26, 27, 30, 66, 67, 81, 89, 90, 131, 132, 133, 134, 144, 151, 154, 173, 206, 278, 283, 318, 319, 320, 351, 415, 429, 431, 432, 433, 435, 460, 461, 462, 463, 465, 468, 472, 524, 548, 559, 560, 599, 626, 633, 637, 642, 647, 660, 661, 663, 665, 669, 677, 678, 681, 682, 689], "written": [1, 633, 635, 643, 646, 647, 649, 655, 658, 662, 663, 666, 669, 671, 674, 677, 681, 683, 687, 689, 690], "choic": [1, 21, 44, 478, 592, 594, 633, 637, 643, 662, 663, 672, 683, 690], "preserv": [1, 8, 9, 10, 25, 31, 32, 33, 48, 275, 278, 287, 302, 318, 319, 320, 327, 328, 362, 400, 453, 465, 466, 470, 532, 602, 665, 674, 677], "logic": [1, 22, 45, 141, 195, 196, 197, 462, 463, 479, 595, 596, 642, 647, 651, 652, 653, 656, 660, 661, 662, 663, 665, 667, 671], "target": [1, 133, 462, 619, 625, 633, 643, 645, 664, 666, 668, 672, 673, 674, 679, 681, 682, 683, 686, 688, 689], "optim": [1, 10, 33, 366, 451, 465, 466, 471, 544, 545, 546, 617, 633, 637, 662, 670, 672, 674, 676, 681, 682, 683, 684, 685, 686, 687, 690], "tool": [1, 633, 634, 637, 644, 654, 670, 674, 676, 677, 681, 682, 683, 684, 686, 689, 690], "make": [1, 626, 633, 636, 637, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 681, 683, 684, 685, 686, 689, 690], "ml": [1, 633, 634, 636, 637, 638, 641, 663, 668, 669, 670, 672, 673, 674, 676, 679, 680, 681, 682, 683, 686, 688, 690], "relat": [1, 633, 639, 641, 643, 644, 656, 657, 663, 665, 666, 667, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "project": [1, 633, 635, 636, 637, 640, 643, 644, 647, 648, 649, 665, 673, 676, 677, 679, 681, 683, 686, 690], "independ": [1, 8, 17, 31, 40, 282, 346, 468, 474, 496, 515, 567, 633, 646, 652, 654, 660, 669, 674, 681], "want": [1, 8, 23, 46, 278, 325, 616, 619, 633, 636, 638, 640, 642, 643, 644, 649, 651, 656, 659, 660, 661, 662, 665, 667, 672, 673, 674, 677], "research": [1, 633, 635, 676, 683, 690], "deploi": [1, 633, 651, 678, 681, 682, 683, 685, 689], "system": [1, 468, 515, 633, 643, 644, 648, 651, 652, 677, 681, 683, 686, 688, 690], "build": [1, 19, 476, 578, 579, 580, 581, 618, 619, 633, 636, 638, 639, 643, 645, 651, 652, 659, 661, 668, 670, 673, 674, 677, 678, 681, 683, 685, 688, 689, 690], "block": [1, 276, 313, 456, 466, 633, 644, 647, 650, 656, 657, 659, 665, 668, 670, 674, 677, 678, 688, 690], "neural": [1, 467, 614, 618, 633, 676, 679, 681, 682, 683, 687, 689, 690], "network": [1, 467, 491, 614, 616, 617, 618, 619, 633, 636, 650, 659, 669, 673, 676, 679, 681, 682, 683, 687, 689, 690], "layer": [1, 8, 16, 31, 39, 473, 492, 493, 566, 616, 617, 619, 620, 621, 622, 633, 635, 649, 655, 663, 666, 667, 669, 670, 673, 681, 683, 687, 690], "activ": [1, 8, 9, 23, 31, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 223, 224, 225, 428, 617, 633, 639, 643, 644, 666, 673, 683, 686], "train": [1, 8, 10, 12, 31, 33, 35, 275, 281, 296, 297, 342, 343, 443, 444, 449, 466, 467, 490, 617, 633, 637, 650, 653, 659, 672, 673, 674, 675, 676, 677, 678, 681, 682, 687, 689, 690], "pipelin": [1, 633, 635, 640, 645, 646, 647, 664, 674, 678, 683, 684, 689], "publish": [1, 633, 637, 677], "ex": [1, 602, 603, 604, 605, 608, 651], "haiku": [1, 615, 633, 637, 674, 683], "get": [1, 6, 13, 25, 29, 36, 42, 102, 103, 104, 107, 134, 135, 136, 139, 144, 148, 151, 154, 366, 384, 385, 386, 388, 389, 390, 392, 394, 395, 412, 425, 457, 461, 462, 465, 468, 472, 523, 549, 581, 616, 617, 618, 633, 637, 638, 641, 642, 643, 645, 649, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 678, 683, 689], "access": [1, 25, 642, 643, 644, 651, 652, 662, 663, 683, 685, 687], "latest": [1, 7, 30, 94, 184, 197, 209, 276, 308, 461, 463, 468, 470, 478, 514, 543, 592, 618, 633, 642, 643, 644, 648, 651, 652, 655, 666, 677, 688], "integr": [1, 5, 8, 28, 30, 91, 263, 272, 461, 633, 641, 643, 645, 681, 683, 685, 686, 687], "kornia": [1, 633], "advantag": [1, 633, 644, 662, 663, 683], "featur": [1, 8, 31, 275, 289, 290, 296, 297, 617, 633, 643, 644, 647, 658, 663, 666, 667, 672, 677, 683, 684, 685, 689], "tensorflow": [1, 8, 9, 31, 132, 232, 233, 236, 269, 272, 276, 311, 428, 462, 465, 597, 608, 626, 633, 636, 637, 641, 642, 643, 644, 646, 651, 652, 653, 658, 662, 663, 664, 665, 666, 667, 669, 674, 677, 678, 681, 684, 686, 687, 689, 690], "deploy": [1, 643, 682, 685, 686, 689, 690], "definit": [1, 8, 13, 30, 36, 263, 272, 468, 495, 633, 644, 647, 652, 659, 671], "job": [1, 633, 651], "graph": [1, 19, 476, 578, 579, 580, 581, 608, 619, 633, 637, 650, 659, 663, 667, 670, 677, 678, 679, 683, 686], "leverag": [1, 633, 662, 681, 683], "frontend": [1, 3, 416, 465, 599, 600, 603, 608, 633, 641, 644, 645, 651, 652, 656, 661, 665, 666, 667, 668, 670, 678, 683], "link": [1, 633, 639, 642, 643, 644, 649, 651, 652, 663, 665, 679, 681], "one": [1, 4, 8, 9, 12, 13, 15, 18, 19, 21, 25, 27, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 65, 71, 80, 82, 92, 94, 149, 168, 194, 199, 200, 222, 229, 235, 240, 245, 246, 247, 252, 254, 255, 258, 263, 267, 272, 275, 276, 278, 281, 282, 287, 294, 296, 299, 300, 302, 306, 307, 318, 319, 320, 326, 327, 328, 332, 333, 342, 343, 346, 351, 360, 361, 362, 363, 364, 409, 413, 414, 416, 430, 432, 433, 441, 443, 444, 447, 449, 451, 453, 460, 461, 462, 463, 465, 466, 467, 468, 470, 473, 475, 476, 478, 481, 482, 483, 484, 485, 486, 489, 503, 506, 507, 511, 513, 522, 523, 531, 532, 533, 536, 538, 542, 566, 573, 576, 578, 579, 580, 581, 585, 587, 602, 604, 623, 626, 633, 636, 637, 642, 643, 644, 646, 647, 648, 649, 650, 652, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 671, 672, 674, 677, 683, 684, 686, 689], "swap": [1, 15, 38, 470, 540, 626], "equival": [1, 13, 36, 65, 168, 196, 197, 208, 460, 463, 468, 509, 512, 515, 523, 626, 662, 663, 667, 672, 674], "replac": [1, 8, 9, 15, 17, 25, 31, 32, 38, 40, 74, 226, 257, 269, 272, 413, 414, 460, 465, 470, 474, 528, 567, 602, 636, 644, 649, 650, 652, 653, 654, 660, 663, 665, 671, 674, 677, 690], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 642, 643, 644, 646, 647, 650, 651, 663, 682, 683, 684, 685, 686], "debug_mod": 1, "params_v": [1, 633], "must": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 229, 237, 238, 239, 241, 244, 247, 250, 253, 254, 255, 260, 262, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 322, 323, 327, 330, 333, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 352, 363, 370, 371, 375, 376, 377, 382, 383, 400, 413, 414, 442, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 617, 621, 623, 635, 637, 639, 641, 642, 643, 644, 646, 647, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 665, 666, 667, 669, 673, 674, 684, 690], "unless": [1, 4, 8, 13, 27, 31, 82, 235, 252, 258, 272, 460, 468, 509, 648, 653, 662, 677], "explicitli": [1, 468, 501, 502, 599, 618, 619, 646, 647, 648, 650, 652, 655, 656, 659, 660, 661, 662, 664, 665, 669, 677, 683], "nn": [1, 80, 460, 633, 659, 664, 667, 674, 684], "kera": [1, 615, 633, 637, 689], "hk": [1, 633, 674], "trainabl": [1, 615, 619, 622, 633, 655, 670, 672, 673], "transpile_kwarg": 1, "It": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 237, 238, 247, 250, 254, 255, 260, 262, 267, 269, 272, 275, 276, 277, 278, 281, 282, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 322, 337, 344, 345, 346, 347, 349, 350, 370, 371, 375, 376, 377, 382, 383, 400, 413, 414, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 509, 510, 511, 512, 515, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 581, 582, 584, 585, 586, 589, 591, 592, 594, 595, 596, 617, 633, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 681, 683, 684, 686, 687, 688, 689, 690], "alia": [1, 458, 642, 663], "similar": [1, 208, 463, 467, 493, 618, 635, 642, 643, 650, 652, 653, 656, 659, 660, 661, 663, 664, 665, 666, 672, 677, 679, 680, 681, 682, 689], "instantli": [1, 633], "proper": [1, 633, 642, 663], "arrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 124, 134, 135, 139, 143, 145, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 391, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 421, 422, 424, 426, 427, 428, 430, 432, 433, 434, 435, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 559, 560, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 604, 608, 617, 618, 622, 626, 630, 633, 642, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 677, 678, 681, 682, 683, 685, 689, 690], "either": [1, 7, 8, 9, 12, 21, 25, 30, 31, 32, 35, 36, 75, 158, 162, 185, 190, 191, 193, 194, 208, 210, 211, 216, 227, 237, 262, 269, 272, 275, 294, 374, 402, 409, 410, 434, 460, 463, 465, 467, 468, 471, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 506, 511, 514, 544, 545, 546, 585, 586, 591, 593, 604, 616, 618, 619, 626, 642, 643, 644, 648, 650, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 667, 669, 672, 677, 683], "snippet": [1, 665], "test_fn": [1, 62, 64, 459, 600, 633], "x1": [1, 5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 43, 47, 48, 74, 84, 88, 92, 102, 117, 124, 143, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 215, 219, 226, 235, 239, 244, 245, 246, 247, 248, 250, 253, 254, 256, 259, 264, 269, 272, 276, 278, 308, 329, 364, 367, 460, 461, 462, 463, 465, 468, 475, 477, 496, 503, 506, 511, 515, 518, 519, 522, 577, 583, 599, 623, 633, 646, 652, 654, 656, 658, 662, 663], "effici": [1, 633, 643, 644, 650, 657, 659, 660, 662, 665, 669, 672, 677, 683, 685, 686], "ret": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 424, 426, 427, 428, 429, 430, 431, 432, 433, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 605, 615, 616, 619, 621, 626, 630, 633, 655, 656, 661, 662, 663, 664, 666, 669, 674], "entir": [1, 21, 22, 25, 32, 44, 45, 149, 275, 278, 296, 297, 336, 396, 462, 478, 479, 588, 589, 590, 591, 592, 593, 594, 595, 596, 618, 636, 637, 642, 643, 644, 646, 647, 650, 652, 654, 656, 662, 663, 664, 665, 667, 669, 672, 673, 674, 677, 683, 689, 690], "just": [1, 21, 232, 233, 269, 478, 587, 608, 618, 633, 636, 637, 643, 644, 646, 648, 651, 652, 654, 655, 659, 660, 662, 663, 664, 665, 669, 671, 672, 677, 683, 684, 689], "line": [1, 633, 637, 643, 646, 647, 651, 654, 656, 657, 660, 663, 665, 667, 670, 671, 672, 673, 675, 686], "request": [1, 8, 141, 282, 350, 462, 633, 637, 638, 642, 654, 666, 667], "jnp": [1, 633, 652, 653, 656, 658, 662, 666, 669, 674], "pil": [1, 633], "jax_kornia": [1, 633], "url": [1, 633], "http": [1, 7, 30, 33, 94, 184, 197, 201, 209, 232, 233, 269, 276, 308, 443, 444, 461, 463, 466, 468, 470, 478, 514, 524, 543, 592, 633, 639, 640, 643, 646, 649, 651, 652, 655], "cocodataset": [1, 633], "org": [1, 7, 30, 33, 94, 184, 197, 209, 232, 233, 269, 276, 308, 443, 444, 461, 463, 466, 468, 470, 478, 514, 524, 543, 592, 633, 655], "train2017": [1, 633], "000000000034": [1, 633], "jpg": [1, 633], "raw_img": [1, 633], "stream": [1, 6, 29, 150, 462, 633, 687], "raw": [1, 25, 633, 655, 684], "format": [1, 6, 21, 24, 25, 26, 29, 60, 102, 135, 286, 356, 375, 457, 461, 462, 465, 467, 478, 480, 487, 488, 587, 597, 633, 645, 652, 653, 654, 655, 656, 663, 669, 671, 672, 679, 681, 683, 684], "img": [1, 633, 672], "transpos": [1, 8, 12, 13, 25, 31, 35, 36, 47, 276, 306, 359, 467, 468, 480, 482, 484, 486, 487, 488, 506, 510, 512, 604, 618, 633, 662, 671, 674], "expand_dim": [1, 15, 38, 467, 470, 489, 633, 663, 669, 672], "255": [1, 12, 31, 35, 168, 463, 489, 633], "version": [1, 2, 8, 31, 52, 240, 272, 287, 360, 363, 442, 465, 468, 501, 502, 599, 626, 633, 635, 636, 637, 643, 644, 649, 651, 652, 655, 662, 664, 669, 689, 690], "enhanc": [1, 633], "5": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 92, 93, 94, 102, 104, 112, 113, 118, 135, 143, 147, 150, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 272, 275, 276, 277, 278, 283, 285, 287, 291, 292, 293, 294, 296, 298, 299, 300, 303, 304, 305, 308, 310, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 329, 330, 331, 333, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 358, 360, 362, 363, 368, 369, 370, 371, 374, 375, 376, 377, 379, 382, 383, 387, 396, 398, 399, 400, 413, 414, 426, 428, 430, 434, 442, 443, 444, 446, 447, 448, 449, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 510, 511, 512, 514, 516, 517, 518, 520, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 604, 605, 618, 633, 643, 644, 646, 648, 650, 654, 658, 661, 664, 665, 671, 672, 673], "last": [1, 4, 8, 12, 13, 14, 15, 18, 20, 21, 22, 25, 27, 31, 35, 36, 37, 38, 43, 44, 45, 47, 78, 79, 82, 134, 241, 272, 278, 285, 326, 336, 352, 454, 456, 460, 462, 466, 467, 468, 469, 470, 475, 477, 478, 479, 492, 496, 499, 511, 520, 522, 526, 527, 529, 532, 535, 536, 537, 539, 573, 574, 582, 583, 584, 585, 586, 595, 596, 618, 626, 633, 637, 644, 646, 648, 649, 652, 654, 657, 662, 664, 665, 667, 669, 677, 683], "least": [1, 8, 13, 31, 253, 272, 275, 276, 278, 299, 300, 308, 318, 319, 320, 327, 468, 506, 633, 644, 647, 651, 652, 654, 659, 662, 665], "support": [1, 6, 8, 9, 13, 29, 31, 32, 36, 105, 109, 130, 137, 150, 154, 158, 196, 197, 209, 222, 226, 232, 233, 249, 267, 269, 272, 275, 276, 302, 310, 368, 380, 397, 400, 401, 428, 461, 462, 463, 465, 467, 468, 491, 500, 501, 502, 505, 507, 516, 523, 597, 603, 621, 626, 633, 635, 636, 637, 639, 643, 644, 646, 647, 650, 653, 654, 655, 658, 659, 660, 661, 662, 664, 665, 667, 668, 669, 671, 672, 674, 678, 680, 682, 683, 686, 688, 689, 690], "timm": [1, 633], "pretrain": [1, 633], "mlp_encod": [1, 633], "create_model": [1, 633], "mixer_b16_224": [1, 633], "num_class": [1, 633, 674], "randn": [1, 633], "224": [1, 633], "encod": [1, 9, 32, 379, 465, 633, 636, 672], "__init__": [1, 25, 47, 48, 600, 606, 607, 613, 614, 617, 618, 619, 620, 621, 622, 625, 626, 629, 631, 633, 642, 647, 648, 652, 656, 663, 666, 669, 671, 672, 673, 674], "self": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 276, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 613, 621, 633, 644, 647, 650, 656, 663, 664, 669, 671, 672, 673, 674], "1000": [1, 4, 27, 79, 460, 633, 672], "super": [1, 8, 31, 276, 311, 633, 656, 659, 669, 672, 673, 674], "fc": [1, 633, 673], "linear": [1, 8, 9, 12, 24, 31, 32, 35, 52, 53, 54, 56, 57, 60, 223, 224, 225, 255, 267, 272, 275, 278, 287, 302, 336, 363, 379, 409, 457, 465, 467, 472, 515, 554, 602, 604, 605, 617, 618, 633, 650, 655, 659, 663, 665, 667, 669, 672, 673, 674, 681, 682, 683, 686], "output_s": [1, 8, 31, 275, 289, 290, 633], "with_bia": [1, 618, 633, 673], "__call__": [1, 599, 618, 619, 633], "_forward_classifi": [1, 633], "standard": [1, 7, 13, 16, 17, 21, 30, 39, 40, 44, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 276, 308, 310, 442, 460, 461, 463, 465, 468, 470, 473, 474, 475, 476, 477, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 529, 531, 532, 533, 535, 536, 538, 539, 543, 566, 569, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 604, 617, 620, 633, 634, 645, 646, 647, 650, 652, 655, 658, 662, 665, 666, 677, 679, 681, 682, 685, 686, 688], "rng_kei": [1, 633], "random": [1, 8, 12, 25, 31, 35, 346, 347, 348, 349, 350, 467, 490, 567, 568, 569, 570, 571, 572, 602, 604, 633, 642, 653, 664, 665, 666, 674, 676, 683], "prngkei": [1, 633, 674], "42": [1, 2, 17, 24, 33, 39, 40, 60, 168, 275, 294, 443, 447, 457, 463, 466, 468, 473, 474, 478, 507, 511, 566, 567, 568, 569, 570, 571, 585, 587, 633, 669, 674], "uniform": [1, 17, 40, 474, 567, 568, 570, 617, 633, 673, 690], "kei": [1, 3, 8, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 238, 240, 250, 252, 259, 260, 262, 264, 265, 285, 296, 297, 308, 322, 337, 339, 342, 343, 344, 345, 347, 352, 364, 365, 367, 368, 370, 371, 372, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 465, 467, 471, 472, 481, 482, 483, 484, 490, 491, 493, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 550, 556, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 602, 603, 607, 615, 616, 618, 621, 633, 649, 650, 651, 657, 663, 664, 665, 672, 683, 686, 690], "dtype": [1, 4, 5, 8, 9, 12, 13, 17, 18, 21, 27, 28, 31, 32, 35, 36, 40, 41, 44, 47, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 145, 226, 227, 228, 229, 230, 231, 234, 238, 240, 257, 258, 269, 272, 275, 276, 282, 287, 294, 308, 346, 347, 348, 349, 350, 361, 363, 379, 380, 381, 383, 400, 408, 432, 460, 461, 462, 465, 467, 468, 472, 474, 475, 477, 478, 479, 483, 490, 507, 523, 547, 568, 569, 570, 573, 574, 575, 583, 584, 585, 586, 591, 593, 595, 596, 597, 599, 602, 604, 605, 613, 617, 618, 619, 620, 622, 623, 633, 646, 648, 652, 653, 654, 657, 659, 660, 662, 663, 664, 665, 666, 669, 671], "float32": [1, 4, 5, 9, 12, 27, 28, 32, 35, 44, 79, 82, 84, 88, 89, 90, 94, 99, 102, 103, 104, 105, 108, 111, 112, 113, 118, 121, 127, 234, 244, 269, 272, 275, 294, 400, 432, 460, 461, 465, 467, 468, 483, 485, 489, 523, 599, 602, 633, 652, 654, 664, 665], "forward_classifi": [1, 633], "param": [1, 8, 25, 31, 32, 48, 201, 249, 276, 308, 365, 382, 383, 463, 465, 614, 623, 633, 674], "init": [1, 617, 633, 646, 674], "rng": [1, 633, 674], "mention": [1, 636, 642, 643, 644, 647, 654, 658, 659, 662, 663, 665, 667, 683], "abov": [1, 4, 7, 8, 13, 17, 24, 30, 31, 36, 40, 60, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 232, 233, 238, 241, 260, 267, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 382, 391, 396, 398, 400, 433, 453, 457, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 568, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 643, 644, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 669, 671, 672, 673, 674, 683, 688], "exactli": [1, 635, 637, 650, 651, 652, 653, 654, 665, 667], "wai": [1, 633, 635, 636, 640, 641, 642, 643, 646, 647, 648, 649, 651, 652, 662, 663, 664, 665, 667, 671, 672, 673, 674, 677, 685, 689, 690], "transpiled_func": 1, "unified_func": 1, "fashion": [1, 604, 665], "rough": 1, "edg": [1, 8, 15, 31, 38, 275, 278, 302, 336, 470, 528, 530, 543, 605, 646, 665, 683, 685, 689], "These": [1, 8, 31, 276, 278, 308, 310, 333, 468, 500, 501, 633, 635, 636, 637, 639, 641, 642, 643, 644, 646, 650, 652, 654, 655, 657, 658, 659, 662, 663, 665, 666, 669, 670, 672, 673, 674, 677, 678, 683, 687, 689, 690], "subclass": [1, 663, 667], "within": [1, 3, 8, 31, 65, 235, 252, 272, 318, 319, 320, 460, 474, 570, 633, 642, 644, 647, 649, 651, 663, 664, 665, 673, 677, 679, 680, 684], "sequenti": [1, 633, 649, 650, 673], "more": [1, 8, 13, 15, 19, 31, 36, 38, 42, 65, 92, 178, 192, 276, 278, 306, 307, 315, 318, 319, 320, 322, 337, 460, 461, 463, 468, 470, 476, 499, 505, 506, 512, 514, 516, 523, 532, 539, 578, 579, 580, 581, 604, 633, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 681, 682, 683, 684, 685, 686, 689, 690], "complex": [1, 8, 13, 28, 31, 36, 97, 111, 119, 125, 187, 236, 238, 251, 260, 272, 275, 276, 295, 306, 310, 311, 312, 426, 461, 463, 465, 468, 500, 501, 502, 516, 603, 639, 642, 649, 652, 654, 663, 665, 667, 672, 673, 674, 677, 678, 679, 681, 683, 685, 689, 690], "should": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 55, 59, 80, 82, 85, 86, 93, 117, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 247, 254, 255, 260, 262, 263, 266, 267, 272, 274, 275, 276, 278, 282, 296, 297, 299, 300, 308, 333, 336, 346, 347, 369, 400, 442, 444, 447, 449, 450, 451, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 488, 494, 495, 496, 497, 499, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 520, 522, 523, 535, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 593, 594, 599, 600, 604, 614, 615, 616, 617, 618, 619, 620, 621, 622, 634, 636, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 679, 680, 683, 685, 690], "util": [1, 8, 31, 136, 462, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 639, 649, 653, 656, 662, 666, 681, 689, 690], "requir": [1, 8, 25, 31, 213, 257, 272, 276, 278, 310, 311, 336, 463, 468, 470, 500, 501, 502, 539, 602, 608, 615, 639, 640, 642, 643, 647, 649, 651, 652, 653, 654, 655, 656, 658, 660, 663, 664, 665, 666, 667, 669, 671, 677, 683, 689], "state": [1, 12, 35, 125, 126, 127, 128, 129, 385, 386, 394, 425, 435, 437, 438, 439, 461, 465, 467, 492, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 633, 636, 643, 649, 652, 655, 656, 658, 663, 665, 668, 669, 670, 672, 676, 689, 690], "mean": [1, 8, 9, 12, 15, 17, 21, 23, 25, 31, 32, 35, 38, 40, 44, 46, 149, 227, 240, 269, 272, 276, 278, 281, 282, 287, 309, 322, 326, 336, 342, 343, 347, 361, 362, 376, 445, 446, 448, 455, 462, 465, 466, 467, 468, 470, 471, 472, 474, 478, 482, 484, 485, 486, 489, 490, 498, 535, 544, 545, 546, 553, 568, 569, 602, 604, 605, 617, 633, 643, 644, 645, 646, 648, 650, 652, 653, 654, 659, 661, 662, 663, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 678, 680, 683], "transformed_with_st": 1, "map": [1, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 264, 265, 272, 275, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 447, 453, 465, 472, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 554, 555, 559, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 618, 647, 650, 652, 658, 659, 663, 665, 666, 672, 676, 677, 678, 684], "convolut": [1, 8, 12, 31, 35, 275, 293, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618, 681, 683], "n": [1, 4, 8, 12, 13, 15, 17, 18, 21, 22, 30, 31, 35, 36, 38, 40, 41, 44, 45, 47, 80, 85, 86, 232, 233, 241, 263, 269, 272, 275, 276, 278, 281, 282, 285, 287, 289, 290, 294, 295, 299, 300, 308, 311, 312, 320, 323, 330, 337, 340, 342, 343, 346, 347, 348, 350, 352, 363, 460, 467, 468, 470, 472, 474, 475, 478, 479, 480, 481, 482, 483, 485, 487, 489, 493, 499, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 520, 521, 522, 523, 530, 531, 533, 539, 543, 555, 568, 569, 570, 576, 589, 592, 593, 594, 595, 596, 633, 645, 665], "c": [1, 4, 8, 9, 10, 12, 15, 21, 27, 28, 30, 31, 32, 33, 35, 36, 38, 42, 44, 66, 67, 79, 82, 104, 107, 168, 190, 191, 203, 210, 275, 276, 278, 281, 289, 290, 299, 300, 306, 307, 310, 312, 315, 318, 319, 320, 321, 326, 342, 343, 367, 375, 376, 377, 391, 398, 399, 433, 443, 444, 447, 449, 450, 451, 460, 461, 463, 465, 466, 467, 468, 470, 472, 475, 476, 478, 481, 482, 483, 484, 485, 486, 500, 502, 504, 535, 539, 547, 550, 554, 555, 556, 558, 564, 565, 576, 581, 586, 587, 592, 594, 634, 636, 637, 638, 643, 645, 650, 654, 659, 661, 667, 668, 669, 670, 672, 677, 678, 679, 683, 687, 688, 690], "h": [1, 8, 9, 12, 31, 32, 35, 275, 292, 293, 304, 305, 375, 377, 465, 467, 472, 480, 483, 484, 485, 486, 487, 488, 489, 550, 554, 556, 564, 645, 650, 651, 679], "w": [1, 8, 9, 10, 12, 25, 30, 31, 32, 33, 35, 195, 249, 266, 272, 274, 275, 276, 291, 292, 293, 295, 303, 304, 305, 312, 359, 375, 377, 426, 443, 444, 445, 447, 449, 450, 451, 465, 466, 467, 472, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 553, 633, 661, 669, 672, 673], "bigger": 1, "permut": [1, 15, 38, 47, 470, 533, 540], "infer": [1, 4, 8, 9, 12, 15, 27, 31, 32, 35, 38, 65, 67, 73, 76, 77, 81, 84, 88, 97, 98, 99, 100, 101, 226, 282, 348, 391, 424, 460, 461, 465, 467, 470, 490, 535, 626, 645, 648, 649, 652, 653, 660, 665, 669, 674, 681, 682, 685, 687], "correct": [1, 21, 44, 124, 461, 470, 478, 528, 592, 594, 599, 633, 642, 644, 645, 649, 650, 651, 652, 653, 657, 658, 659, 662, 664, 665], "keep": [1, 15, 25, 38, 470, 542, 641, 642, 643, 644, 646, 649, 650, 651, 656, 662, 663, 665, 666, 667, 672, 674], "mind": [1, 642, 647, 650, 665], "well": [1, 32, 396, 465, 468, 515, 604, 633, 640, 644, 649, 651, 652, 656, 662, 663, 664, 665, 673, 674, 676, 682, 683, 684, 688], "hf": 1, "tf_model": 1, "tf_input": 1, "data_class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "_arraywithactiv": [2, 47], "base": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 79, 117, 177, 190, 191, 192, 193, 205, 232, 233, 237, 240, 242, 244, 255, 269, 272, 388, 417, 427, 460, 461, 463, 465, 470, 476, 478, 531, 578, 579, 580, 581, 587, 600, 603, 606, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 629, 631, 633, 644, 646, 650, 651, 652, 656, 658, 660, 661, 662, 664, 665, 666, 667, 669, 676, 683, 688, 690], "abc": [2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 378, 465, 472, 565, 613, 616, 617, 621, 671], "_abc_impl": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "_abc_data": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "gelu": [2, 24, 457, 614, 633], "approxim": [2, 8, 13, 24, 30, 31, 36, 52, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 211, 212, 216, 217, 249, 262, 263, 272, 457, 463, 468, 509, 512, 614, 655, 663], "variant": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 509, 512, 513, 514, 516, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 647, 654, 655, 667], "simpli": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 443, 444, 447, 449, 450, 451, 453, 463, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 507, 512, 513, 514, 516, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 633, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 664, 665, 667, 669, 673, 674, 677, 678, 684, 689], "docstr": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 276, 287, 291, 292, 293, 294, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 443, 444, 447, 449, 450, 451, 453, 460, 461, 463, 465, 468, 470, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 641, 642, 645, 649, 657, 658, 659, 663, 666], "us": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 46, 48, 52, 79, 82, 91, 103, 105, 106, 116, 117, 137, 138, 140, 144, 147, 148, 149, 150, 152, 154, 159, 167, 190, 191, 194, 195, 196, 197, 199, 200, 209, 213, 226, 228, 229, 230, 231, 249, 254, 255, 257, 258, 263, 269, 272, 275, 276, 278, 281, 282, 283, 285, 287, 291, 292, 295, 296, 297, 298, 302, 308, 311, 326, 329, 336, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 362, 363, 369, 380, 381, 388, 389, 398, 399, 409, 417, 418, 426, 427, 443, 444, 449, 450, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 491, 493, 494, 499, 517, 523, 525, 534, 535, 536, 540, 544, 545, 546, 547, 549, 550, 556, 557, 558, 560, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 580, 587, 600, 602, 603, 604, 605, 608, 615, 616, 617, 618, 619, 620, 621, 626, 631, 637, 638, 639, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "write": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 260, 261, 262, 263, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 322, 325, 326, 327, 328, 329, 332, 333, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 370, 371, 375, 376, 377, 382, 383, 400, 413, 414, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 574, 575, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 633, 637, 641, 642, 644, 645, 646, 648, 649, 651, 652, 654, 655, 656, 659, 662, 664, 666, 669, 671, 674, 683, 690], "broadcast": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 237, 238, 239, 240, 244, 247, 250, 254, 255, 260, 262, 267, 269, 272, 275, 276, 277, 278, 281, 282, 287, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 316, 321, 322, 325, 337, 339, 344, 345, 346, 347, 349, 350, 361, 362, 363, 370, 371, 375, 376, 377, 382, 383, 400, 413, 414, 443, 444, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 515, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 547, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 650, 652, 654, 655, 665, 666, 669], "element": [2, 4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 76, 77, 85, 86, 102, 104, 107, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 232, 233, 235, 236, 237, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 276, 278, 287, 296, 297, 310, 311, 318, 319, 320, 326, 327, 328, 329, 332, 339, 358, 359, 360, 361, 367, 370, 371, 382, 383, 406, 408, 426, 427, 428, 432, 433, 456, 457, 460, 463, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 490, 496, 498, 500, 501, 506, 511, 513, 514, 516, 528, 531, 532, 533, 534, 535, 536, 537, 538, 547, 550, 556, 567, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 604, 613, 618, 655, 664, 665, 667, 669, 687], "wise": [2, 7, 8, 13, 24, 30, 31, 36, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 215, 219, 221, 223, 224, 225, 235, 236, 237, 242, 243, 244, 245, 246, 248, 250, 252, 253, 254, 255, 256, 259, 261, 264, 265, 267, 272, 275, 278, 296, 297, 324, 329, 331, 332, 341, 457, 463, 470, 496, 528, 621, 667], "exampl": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 291, 292, 293, 294, 296, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 353, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 550, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 608, 626, 631, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 662, 663, 665, 666, 669, 671, 672, 673, 674, 676, 677, 680, 681, 684, 686, 689, 690], "6": [2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 58, 59, 66, 67, 76, 77, 80, 81, 84, 88, 92, 93, 102, 104, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 238, 240, 242, 248, 249, 250, 251, 253, 254, 255, 256, 258, 260, 263, 267, 269, 272, 275, 276, 277, 278, 281, 283, 285, 287, 294, 296, 298, 299, 300, 303, 308, 312, 313, 316, 317, 318, 319, 320, 323, 326, 327, 330, 331, 333, 336, 337, 338, 340, 341, 344, 345, 348, 350, 351, 352, 353, 358, 360, 362, 363, 368, 370, 371, 374, 375, 376, 382, 383, 398, 399, 400, 414, 426, 428, 430, 434, 443, 444, 445, 446, 447, 448, 449, 451, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 502, 506, 507, 508, 511, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 558, 565, 566, 567, 568, 569, 570, 572, 573, 574, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 617, 633, 646, 648, 650, 651, 654, 661, 665, 667, 669, 671, 672, 673], "138": [2, 52, 457], "165": [2, 52, 457, 467, 491], "leaky_relu": [2, 24, 457], "alpha": [2, 7, 8, 24, 30, 31, 54, 158, 215, 228, 269, 276, 282, 311, 347, 348, 349, 457, 463, 614, 663, 664], "float": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21, 24, 27, 28, 30, 31, 32, 33, 35, 36, 37, 39, 40, 44, 47, 54, 60, 65, 66, 67, 72, 74, 76, 77, 78, 79, 83, 87, 91, 95, 97, 99, 104, 108, 112, 117, 118, 121, 127, 136, 144, 147, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 235, 237, 242, 243, 244, 252, 255, 256, 257, 259, 260, 261, 262, 263, 265, 267, 269, 272, 275, 276, 277, 281, 282, 287, 296, 297, 307, 308, 310, 311, 316, 342, 343, 345, 346, 347, 348, 349, 350, 363, 369, 370, 371, 379, 388, 389, 392, 396, 417, 418, 420, 426, 427, 441, 443, 444, 447, 449, 450, 451, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 478, 490, 493, 494, 495, 497, 500, 501, 502, 504, 507, 508, 509, 512, 513, 514, 515, 516, 520, 523, 525, 526, 527, 544, 545, 546, 553, 566, 569, 570, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 599, 602, 603, 604, 605, 614, 617, 620, 621, 646, 650, 652, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 671, 673], "slope": [2, 8, 24, 31, 54, 222, 267, 457, 614], "neg": [2, 7, 8, 13, 15, 17, 22, 24, 30, 31, 36, 38, 40, 45, 54, 65, 74, 184, 185, 205, 208, 226, 227, 232, 233, 257, 269, 272, 276, 309, 457, 460, 463, 468, 470, 474, 479, 498, 516, 520, 522, 523, 529, 531, 532, 536, 569, 595, 596, 602, 604, 614, 650, 659, 662], "section": [2, 8, 19, 31, 54, 278, 323, 330, 340, 476, 578, 579, 580, 581, 633, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 672, 673, 679, 686, 689], "leaki": [2, 24, 54, 457, 614], "relu": [2, 8, 23, 24, 31, 54, 222, 223, 225, 267, 457, 614, 633, 664, 672, 673], "39": [2, 7, 8, 17, 24, 30, 31, 33, 40, 54, 160, 177, 190, 192, 194, 275, 292, 294, 305, 443, 457, 463, 466, 468, 478, 511, 569, 587], "85": [2, 17, 24, 30, 33, 35, 40, 48, 54, 159, 168, 169, 206, 426, 447, 457, 463, 465, 466, 467, 474, 491, 568, 569, 570], "17": [2, 8, 24, 30, 31, 32, 33, 35, 40, 48, 54, 55, 79, 158, 174, 194, 201, 275, 278, 291, 292, 294, 299, 300, 303, 304, 326, 376, 399, 443, 445, 457, 460, 463, 465, 466, 467, 468, 472, 474, 481, 490, 491, 499, 517, 555, 568, 569, 570, 572, 650, 654], "log_softmax": [2, 24, 457], "axi": [2, 4, 8, 9, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 41, 42, 43, 44, 45, 55, 59, 78, 79, 82, 149, 240, 241, 249, 258, 263, 272, 275, 278, 281, 285, 287, 294, 295, 322, 323, 324, 326, 327, 328, 330, 336, 337, 338, 339, 340, 344, 345, 352, 353, 358, 360, 361, 362, 363, 375, 382, 442, 457, 460, 462, 465, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 489, 493, 496, 499, 507, 522, 523, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 572, 573, 574, 578, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 604, 623, 650, 652, 654, 656, 658, 659, 662, 663, 665, 667, 669, 671, 674, 676], "ax": [2, 8, 13, 15, 18, 21, 22, 24, 31, 36, 38, 41, 44, 45, 47, 55, 59, 149, 240, 241, 258, 272, 278, 287, 333, 336, 337, 360, 361, 362, 363, 375, 442, 462, 465, 468, 470, 475, 478, 479, 507, 515, 518, 519, 523, 530, 532, 533, 536, 538, 540, 543, 573, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 604, 613, 652, 654, 665, 666, 669, 671], "along": [2, 4, 8, 9, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 55, 59, 78, 79, 149, 240, 241, 258, 263, 272, 275, 278, 281, 285, 287, 294, 299, 300, 322, 323, 324, 327, 328, 336, 339, 344, 345, 353, 360, 361, 362, 363, 375, 382, 460, 462, 465, 468, 469, 470, 471, 474, 475, 477, 478, 479, 511, 520, 522, 523, 526, 527, 529, 532, 533, 534, 536, 537, 539, 541, 542, 544, 545, 546, 572, 573, 574, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 633, 642, 654, 662, 666, 667, 669, 683], "98": [2, 10, 17, 24, 30, 33, 40, 55, 169, 172, 212, 447, 457, 463, 466, 468, 472, 475, 478, 511, 548, 568, 570, 577, 587], "37": [2, 7, 8, 24, 30, 31, 47, 55, 160, 168, 209, 212, 216, 283, 351, 463, 467, 468, 472, 474, 491, 508, 555, 569], "35": [2, 12, 24, 30, 31, 35, 36, 40, 55, 162, 213, 275, 294, 463, 467, 468, 475, 478, 491, 494, 496, 569, 577, 587], "0719": [2, 24, 55], "62": [2, 24, 31, 39, 40, 55, 212, 253, 463, 473, 474, 566, 568, 570], "221": [2, 55], "7": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 54, 55, 56, 57, 58, 65, 66, 67, 78, 81, 82, 104, 107, 136, 155, 158, 160, 164, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 182, 183, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 213, 216, 217, 218, 219, 221, 223, 224, 225, 226, 229, 231, 235, 238, 240, 241, 242, 248, 249, 250, 252, 255, 258, 260, 267, 269, 272, 275, 276, 277, 278, 283, 287, 291, 292, 293, 294, 298, 299, 300, 303, 314, 316, 318, 319, 320, 323, 326, 330, 331, 333, 336, 337, 338, 340, 341, 348, 350, 351, 353, 358, 360, 363, 368, 370, 371, 375, 376, 398, 399, 400, 406, 413, 414, 426, 428, 443, 444, 446, 447, 448, 449, 451, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 486, 489, 490, 491, 493, 494, 496, 497, 498, 499, 502, 506, 508, 511, 514, 516, 517, 518, 520, 521, 525, 526, 527, 528, 531, 532, 537, 539, 540, 542, 547, 548, 555, 566, 567, 568, 569, 570, 572, 577, 578, 580, 582, 584, 585, 586, 587, 589, 591, 593, 594, 602, 644, 650, 651, 654, 659, 661, 662, 665], "82": [2, 7, 33, 40, 55, 160, 443, 466, 569, 570, 656], "mish": [2, 24, 457, 614], "30340147": [2, 56, 457], "86509842": [2, 24, 56, 457], "sigmoid": [2, 8, 24, 31, 51, 53, 221, 267, 282, 346, 457, 633, 669, 672, 673], "269": [2, 58, 457], "731": [2, 58, 457], "881": [2, 7, 30, 58, 160, 173, 206, 457, 463], "softmax": [2, 12, 23, 24, 35, 457, 467, 493, 494, 614, 633], "422": [2, 59, 457], "155": [2, 35, 59, 457, 467, 491], "softplu": [2, 24, 457, 614, 667], "beta": [2, 8, 16, 24, 31, 39, 60, 228, 230, 231, 269, 276, 282, 311, 348, 349, 457, 473, 566, 667], "threshold": [2, 7, 8, 24, 30, 31, 60, 199, 200, 225, 237, 267, 272, 457, 463, 667], "3461": [2, 24, 60, 457], "6491": [2, 24, 60, 457], "535": [2, 24, 60, 457], "22": [2, 7, 8, 9, 17, 21, 24, 31, 32, 35, 40, 55, 60, 169, 275, 283, 291, 292, 293, 294, 303, 304, 305, 351, 376, 414, 441, 457, 463, 467, 468, 472, 475, 478, 490, 491, 499, 504, 511, 555, 565, 568, 569, 570, 577, 586, 587, 650], "09": [2, 7, 33, 40, 60, 205, 214, 443, 457, 463, 466, 467, 494, 569], "31": [2, 7, 8, 30, 31, 32, 35, 40, 55, 60, 79, 168, 194, 201, 275, 293, 294, 370, 457, 460, 463, 465, 468, 491, 517, 569, 570, 672], "55": [2, 40, 60, 168, 218, 398, 463, 465, 468, 474, 478, 504, 511, 517, 569, 570, 587, 646], "13": [2, 7, 8, 12, 17, 21, 30, 31, 32, 33, 35, 38, 40, 44, 47, 60, 107, 136, 158, 169, 172, 180, 205, 213, 249, 253, 258, 272, 275, 278, 294, 323, 326, 330, 340, 350, 370, 371, 375, 376, 399, 418, 426, 443, 457, 461, 462, 463, 465, 466, 467, 468, 470, 475, 476, 478, 481, 482, 490, 491, 494, 499, 511, 517, 542, 568, 569, 570, 577, 578, 585, 586, 587, 650, 654], "collect": [3, 25, 26, 457, 462, 465, 466, 467, 469, 472, 473, 474, 560, 614, 618, 620, 621, 651, 656, 661, 664, 665, 676, 681, 683, 686], "accept": [3, 4, 7, 13, 26, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 238, 241, 260, 266, 269, 272, 274, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 368, 376, 377, 382, 391, 396, 398, 400, 413, 428, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 643, 644, 647, 650, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 678, 681], "_to_ivi": 3, "_to_n": 3, "inplac": [3, 9, 25, 32, 366, 368, 397, 400, 401, 465, 472, 554, 555, 559, 564, 565, 607, 608, 615, 621, 645, 647, 654, 658, 660, 663, 667, 671, 673], "args_to_ivi": 3, "include_deriv": [3, 26, 472, 548, 559, 599], "form": [3, 4, 13, 25, 27, 36, 66, 67, 81, 85, 86, 229, 269, 276, 278, 310, 324, 331, 336, 341, 365, 429, 431, 460, 465, 467, 468, 472, 495, 497, 499, 500, 501, 502, 504, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 548, 559, 617, 636, 638, 659, 665, 667, 673, 674, 683, 684, 689], "nest": [3, 25, 26, 48, 430, 442, 445, 456, 465, 466, 471, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 616, 619, 621, 647, 649, 650, 659, 661, 666, 672, 673, 677, 678, 683], "unchang": [3, 8, 260, 278, 326, 467, 490], "recurs": [3, 25, 26, 105, 106, 137, 138, 380, 381, 461, 462, 465, 472, 547, 548, 557, 558, 559, 643, 646, 649, 650, 659, 662, 673, 677], "deriv": [3, 4, 8, 10, 26, 27, 31, 33, 73, 77, 84, 88, 226, 230, 269, 443, 444, 447, 448, 449, 450, 451, 460, 466, 472, 548, 559, 619, 621, 622, 652, 653, 671, 673], "word": [3, 65, 460, 474, 570, 615, 650, 663, 678], "args_to_n": [3, 662], "cont_inplac": 3, "updat": [3, 9, 10, 25, 32, 33, 400, 413, 414, 443, 444, 447, 449, 450, 451, 465, 466, 467, 471, 472, 490, 492, 544, 545, 554, 555, 559, 564, 565, 608, 615, 621, 626, 633, 642, 643, 644, 645, 646, 647, 650, 651, 652, 654, 658, 660, 661, 663, 664, 665, 667, 669, 671, 672, 674, 677], "place": [3, 4, 7, 8, 9, 13, 15, 25, 27, 29, 30, 31, 32, 38, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 110, 113, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 235, 238, 241, 247, 250, 252, 254, 255, 257, 258, 259, 260, 264, 265, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 326, 336, 347, 368, 376, 377, 382, 391, 396, 398, 399, 400, 413, 428, 433, 453, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 621, 633, 639, 641, 644, 645, 646, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 674, 678, 685], "to_ivi": [3, 26, 472, 560, 662], "leaf": [3, 25, 44, 472, 557, 558, 560, 586, 650, 659, 672], "nativearrai": [3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 73, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 110, 111, 112, 113, 115, 117, 118, 124, 134, 135, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 230, 231, 234, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 272, 275, 276, 277, 278, 281, 282, 283, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 384, 387, 391, 396, 398, 399, 400, 403, 405, 406, 408, 413, 414, 415, 424, 426, 427, 428, 430, 432, 433, 435, 441, 443, 444, 445, 447, 449, 450, 451, 453, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 554, 555, 556, 559, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 613, 622, 647, 650, 654, 656, 657, 658, 659, 660, 662, 663, 666, 669, 671, 678], "manner": [3, 26, 472, 559, 635, 643, 653, 655, 663, 666, 672, 676, 677, 679, 681, 689, 690], "travers": [3, 26, 472, 559, 650, 652, 656, 669], "lowest": [3, 17, 26, 40, 472, 474, 559, 568, 659, 677, 678, 680, 684, 688], "leav": [3, 26, 28, 30, 31, 32, 35, 36, 38, 44, 48, 104, 107, 174, 220, 221, 322, 326, 344, 345, 362, 379, 430, 470, 472, 486, 494, 499, 516, 530, 534, 539, 541, 542, 547, 548, 557, 558, 559, 560, 585, 586, 607, 633, 642, 650, 652, 654, 655, 658, 659, 662, 663, 665, 672, 673], "search": [3, 8, 26, 31, 573, 574, 608, 635, 641, 643, 649, 650, 654, 665, 666], "to_n": [3, 26, 669], "mayb": [3, 633, 643, 651, 669, 671], "_arraywithcr": [4, 47], "asarrai": [4, 8, 9, 27, 31, 32, 66, 285, 352, 353, 375, 391, 398, 399, 426, 460, 465, 467, 476, 481, 579, 660, 663, 664], "devic": [4, 8, 17, 25, 27, 31, 40, 47, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 226, 232, 233, 269, 282, 325, 346, 347, 349, 350, 366, 380, 381, 460, 465, 474, 567, 568, 569, 570, 597, 599, 600, 613, 615, 617, 618, 619, 620, 621, 622, 626, 633, 636, 644, 645, 648, 652, 656, 659, 660, 664, 665, 666, 667, 669, 674, 677, 678, 682, 683, 685, 686, 687, 688], "data": [4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 130, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 234, 237, 260, 262, 267, 269, 272, 275, 276, 278, 282, 286, 287, 296, 297, 308, 309, 310, 338, 346, 347, 348, 349, 350, 356, 361, 363, 379, 400, 402, 403, 405, 428, 460, 462, 463, 465, 467, 468, 470, 474, 475, 477, 478, 479, 480, 487, 488, 490, 491, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 522, 523, 529, 532, 533, 535, 536, 538, 539, 543, 568, 569, 570, 572, 573, 574, 576, 577, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 608, 613, 617, 618, 619, 623, 633, 634, 636, 643, 645, 646, 647, 650, 653, 655, 658, 659, 660, 662, 664, 666, 667, 669, 671, 678, 683, 684, 685, 687, 688, 689], "ndarrai": [4, 8, 9, 27, 31, 66, 67, 81, 287, 361, 362, 432, 460, 465, 626, 642, 647, 652, 653, 658, 662, 663, 664, 666, 667, 669, 671, 674, 678], "boolean": [4, 5, 7, 9, 15, 18, 21, 25, 27, 28, 30, 32, 38, 41, 44, 47, 48, 66, 67, 71, 76, 91, 107, 109, 111, 112, 114, 130, 140, 152, 164, 165, 166, 167, 168, 169, 195, 196, 197, 198, 252, 272, 364, 367, 387, 396, 397, 401, 402, 403, 404, 405, 406, 415, 419, 421, 422, 441, 452, 456, 460, 461, 462, 463, 465, 466, 470, 471, 472, 478, 535, 544, 545, 557, 575, 577, 588, 590, 602, 604, 608, 650, 663, 665, 667], "nativedtyp": [4, 5, 8, 12, 13, 17, 18, 21, 27, 31, 36, 40, 41, 44, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 114, 116, 120, 130, 226, 227, 228, 229, 230, 231, 234, 240, 258, 269, 272, 276, 282, 287, 308, 346, 347, 348, 349, 350, 361, 460, 461, 467, 468, 474, 475, 477, 478, 490, 523, 568, 569, 570, 573, 574, 583, 585, 586, 591, 593, 617, 652, 653, 658, 666, 669], "nativedevic": [4, 6, 8, 17, 27, 29, 31, 40, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 132, 133, 134, 135, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 226, 232, 233, 269, 282, 346, 347, 349, 350, 460, 462, 474, 567, 568, 569, 570, 617, 621, 622, 652, 653, 656, 658, 666], "interpret": [4, 8, 27, 31, 66, 67, 81, 227, 269, 276, 308, 460, 651, 684], "9": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 24, 28, 30, 31, 32, 33, 35, 36, 38, 40, 42, 43, 44, 47, 48, 52, 65, 66, 67, 81, 97, 99, 100, 101, 104, 107, 156, 158, 159, 160, 163, 164, 165, 168, 174, 175, 180, 184, 189, 190, 191, 196, 197, 199, 200, 201, 203, 205, 206, 209, 210, 213, 214, 215, 219, 220, 223, 224, 243, 249, 258, 267, 272, 275, 278, 285, 291, 292, 294, 298, 299, 300, 303, 304, 313, 318, 319, 320, 323, 326, 330, 337, 339, 340, 348, 350, 352, 353, 371, 375, 376, 377, 379, 382, 398, 399, 402, 403, 405, 413, 414, 426, 443, 444, 445, 449, 457, 460, 461, 463, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 481, 482, 483, 486, 489, 490, 491, 493, 496, 497, 499, 502, 506, 507, 508, 511, 514, 516, 517, 518, 520, 521, 528, 532, 536, 537, 539, 540, 542, 547, 548, 553, 555, 558, 567, 568, 569, 570, 572, 577, 578, 580, 582, 584, 586, 587, 589, 591, 593, 594, 602, 621, 650, 654, 656, 661, 663, 665, 672, 673, 679], "39999998": [4, 66, 67, 460, 476, 579], "5999999": [4, 66, 67, 460, 467, 490], "0999999": [4, 21, 66, 67, 255, 272, 460, 589], "10000038": [4, 66, 67, 460], "np": [4, 8, 30, 31, 32, 66, 67, 71, 81, 114, 187, 251, 272, 275, 276, 299, 300, 306, 426, 460, 461, 463, 465, 472, 553, 599, 626, 633, 642, 647, 652, 653, 656, 658, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 678], "order": [4, 8, 12, 13, 15, 19, 20, 25, 31, 35, 36, 38, 43, 47, 48, 66, 67, 80, 162, 232, 233, 249, 269, 272, 276, 278, 285, 307, 310, 311, 312, 315, 326, 327, 328, 332, 352, 460, 463, 467, 468, 470, 471, 475, 476, 477, 481, 482, 483, 484, 485, 486, 489, 500, 501, 507, 516, 517, 521, 523, 532, 535, 544, 545, 576, 578, 579, 580, 581, 582, 583, 584, 599, 616, 619, 622, 633, 635, 642, 643, 644, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 662, 663, 664, 665, 666, 667, 672, 674, 677, 679, 682, 683, 684, 686, 689], "90786433e": [4, 66, 67, 460], "310": [4, 66, 67, 460], "copy_arrai": [4, 460], "to_ivy_arrai": [4, 71, 460], "empty_lik": [4, 27, 460, 667], "deafult": [4, 18, 41, 73, 460, 475, 573], "uniniti": [4, 72, 73, 460], "from_dlpack": [4, 27, 460], "full_lik": [4, 27, 460, 666], "fill_valu": [4, 18, 27, 41, 76, 77, 183, 189, 460, 463, 475, 576, 623, 652, 664, 666], "scalar": [4, 7, 8, 9, 13, 24, 27, 30, 31, 32, 36, 54, 77, 82, 158, 215, 238, 239, 241, 242, 244, 249, 252, 255, 261, 272, 276, 278, 311, 318, 319, 320, 329, 433, 441, 460, 463, 465, 468, 523, 652, 661, 663, 677, 683], "fill": [4, 8, 17, 18, 25, 27, 31, 40, 41, 72, 76, 77, 79, 82, 83, 84, 87, 88, 226, 257, 269, 272, 278, 282, 338, 347, 349, 460, 474, 475, 568, 576, 617, 664], "equal": [4, 5, 7, 8, 9, 13, 15, 17, 19, 20, 21, 25, 28, 30, 31, 32, 36, 38, 40, 43, 47, 48, 74, 76, 77, 91, 166, 168, 184, 185, 205, 209, 227, 235, 252, 269, 272, 275, 277, 278, 281, 295, 316, 323, 330, 340, 342, 343, 344, 345, 364, 367, 442, 460, 461, 463, 465, 468, 470, 474, 476, 477, 478, 499, 508, 509, 512, 514, 528, 530, 537, 543, 570, 578, 579, 580, 581, 582, 584, 589, 592, 593, 594, 608, 617, 649, 650, 652, 654, 656, 659, 664, 665], "000123": [4, 77, 460], "ones": [4, 8, 10, 12, 17, 25, 27, 31, 35, 40, 74, 77, 82, 84, 88, 137, 138, 170, 226, 269, 443, 460, 462, 463, 466, 467, 485, 568, 569, 570, 633, 647, 651, 654, 658, 665, 671, 672, 683], "linspac": [4, 27, 65, 460, 658, 667, 669, 690], "stop": [4, 10, 27, 33, 65, 78, 79, 149, 444, 447, 449, 450, 451, 453, 460, 462, 466, 471, 472, 544, 545, 546, 558, 621, 658, 661, 667, 669, 677, 683], "num": [4, 27, 78, 79, 460, 602, 644, 658, 669], "endpoint": [4, 27, 78, 79, 460, 617, 658], "logspac": [4, 27, 460, 669], "10": [4, 7, 8, 9, 10, 12, 13, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 65, 77, 78, 79, 157, 164, 165, 168, 172, 178, 183, 189, 191, 201, 206, 212, 213, 221, 235, 239, 244, 247, 248, 249, 252, 253, 254, 255, 258, 263, 272, 275, 278, 287, 291, 292, 294, 303, 304, 320, 323, 326, 330, 337, 340, 358, 360, 362, 363, 369, 375, 376, 377, 379, 382, 383, 387, 392, 398, 399, 406, 414, 420, 426, 438, 449, 460, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 490, 497, 499, 504, 506, 507, 508, 511, 516, 517, 518, 532, 537, 538, 539, 540, 542, 553, 555, 558, 566, 567, 568, 569, 570, 576, 578, 583, 585, 586, 587, 588, 590, 591, 593, 594, 602, 604, 621, 633, 636, 643, 646, 650, 651, 652, 654, 661, 664, 665, 669, 671, 672, 688], "rang": [4, 8, 21, 27, 31, 65, 78, 79, 276, 311, 375, 442, 460, 465, 476, 478, 578, 585, 586, 591, 593, 602, 604, 605, 617, 633, 652, 656, 665, 669, 672, 673, 674, 683, 689], "log": [4, 7, 8, 13, 27, 30, 31, 36, 79, 192, 194, 220, 221, 264, 267, 272, 282, 346, 460, 463, 514, 602, 605, 614, 644, 650, 651, 654, 659, 662, 663, 665, 667, 669, 672], "space": [4, 8, 9, 27, 30, 31, 32, 65, 78, 79, 249, 263, 272, 375, 379, 456, 460, 465, 466, 636, 667], "sequenc": [4, 8, 12, 13, 15, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 72, 74, 77, 79, 82, 83, 84, 87, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 263, 264, 265, 272, 275, 276, 278, 282, 287, 290, 296, 297, 299, 300, 302, 308, 315, 317, 318, 319, 320, 322, 324, 331, 333, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 409, 413, 414, 426, 427, 428, 430, 432, 433, 441, 442, 445, 447, 453, 460, 465, 466, 467, 468, 470, 472, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 523, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 542, 543, 547, 554, 564, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 618, 620, 622, 644, 651, 652, 653, 654, 656, 665, 666, 667, 669, 674, 676, 686], "gener": [4, 7, 8, 12, 17, 23, 27, 30, 31, 35, 40, 46, 65, 78, 79, 94, 184, 197, 208, 209, 226, 229, 232, 233, 269, 276, 278, 282, 308, 334, 335, 348, 460, 461, 463, 467, 468, 470, 474, 478, 490, 514, 521, 543, 567, 568, 570, 571, 592, 602, 605, 608, 621, 642, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 666, 668, 669, 671, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689], "relev": [4, 27, 79, 460, 621, 633, 636, 642, 643, 644, 647, 650, 651, 652, 654, 661, 664, 665, 672, 681, 688, 689], "sampl": [4, 8, 17, 21, 27, 30, 31, 40, 44, 78, 79, 263, 272, 275, 282, 296, 297, 302, 346, 347, 348, 349, 350, 460, 474, 478, 567, 568, 569, 570, 592, 594, 618, 660, 664, 665], "on_valu": [4, 27, 79, 82, 460], "off_valu": [4, 27, 79, 82, 460], "cuda": [4, 8, 17, 27, 31, 40, 78, 79, 82, 131, 132, 133, 146, 147, 282, 346, 347, 349, 350, 460, 462, 474, 567, 568, 569, 570, 617, 618, 619, 620, 621, 622, 633, 669, 677, 678, 688], "cpu": [4, 6, 8, 17, 27, 29, 31, 40, 65, 74, 76, 78, 79, 82, 83, 84, 88, 132, 134, 135, 136, 137, 141, 144, 146, 147, 150, 151, 153, 154, 282, 346, 347, 349, 350, 460, 462, 468, 474, 505, 567, 568, 569, 570, 599, 617, 618, 619, 620, 621, 622, 633, 644, 653, 663, 665, 677, 681, 683, 686, 688], "evenli": [4, 8, 12, 15, 25, 27, 30, 35, 38, 65, 78, 79, 263, 272, 460, 467, 470, 480, 481, 482, 483, 485, 487, 489, 537], "descript": [4, 7, 13, 30, 36, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 238, 241, 260, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 382, 391, 396, 398, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 642, 655, 661, 662], "hint": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 238, 241, 260, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 382, 391, 396, 398, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 642, 647, 655, 658, 659, 662, 663, 666], "assum": [4, 7, 8, 9, 13, 30, 32, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 238, 241, 260, 262, 263, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 382, 391, 396, 398, 406, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 646, 648, 649, 651, 652, 655, 664, 665, 667, 671, 672, 677], "simplic": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 238, 241, 260, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 382, 391, 396, 398, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 655, 667, 673, 676], "nestabl": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 241, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 368, 376, 377, 382, 391, 396, 398, 400, 413, 428, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 645, 654, 655, 662, 665, 678], "therefor": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 117, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 232, 233, 241, 269, 272, 275, 276, 278, 291, 292, 293, 294, 296, 297, 303, 304, 305, 308, 310, 311, 336, 368, 376, 377, 382, 391, 396, 398, 400, 413, 428, 433, 453, 460, 461, 463, 465, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 566, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 635, 639, 642, 644, 646, 647, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 671, 673, 677, 680, 683, 689], "01": [4, 8, 9, 10, 31, 32, 33, 36, 40, 79, 194, 209, 210, 231, 252, 269, 275, 277, 294, 300, 316, 379, 426, 443, 444, 449, 460, 463, 465, 466, 468, 474, 502, 517, 569, 570, 602, 648, 674], "02": [4, 10, 16, 17, 30, 33, 40, 79, 159, 160, 194, 275, 294, 300, 426, 443, 444, 449, 460, 463, 465, 466, 473, 474, 566, 569, 570, 664], "03": [4, 7, 10, 30, 33, 40, 79, 172, 192, 426, 444, 449, 460, 463, 465, 466, 467, 468, 494, 504, 569], "04": [4, 10, 24, 28, 33, 54, 55, 79, 104, 178, 417, 443, 444, 449, 457, 460, 461, 463, 465, 466, 467, 494, 602, 665], "05": [4, 7, 8, 10, 16, 30, 31, 33, 39, 79, 194, 231, 235, 252, 269, 272, 281, 342, 343, 388, 398, 417, 443, 444, 449, 460, 463, 465, 466, 468, 473, 507, 566, 597, 602, 620, 664, 665], "464": [4, 7, 40, 79, 161, 162, 460, 463], "15888336": [4, 79, 460], "2154": [4, 79, 460], "43469003": [4, 79, 460], "10000": [4, 27, 79, 460], "meshgrid": [4, 27, 460], "spars": [4, 14, 27, 37, 80, 460, 469, 527], "index": [4, 8, 9, 15, 18, 19, 20, 25, 27, 31, 32, 38, 41, 42, 43, 74, 80, 146, 226, 269, 275, 278, 283, 287, 295, 326, 334, 335, 338, 351, 363, 365, 383, 387, 413, 414, 458, 460, 462, 465, 470, 472, 475, 476, 477, 535, 539, 549, 550, 551, 554, 555, 556, 562, 564, 573, 574, 576, 578, 579, 580, 582, 583, 603, 630, 650, 651, 659, 661, 662, 664, 665, 671, 683], "xy": [4, 27, 80, 460], "dimension": [4, 8, 13, 15, 18, 21, 22, 25, 30, 31, 36, 38, 44, 45, 47, 65, 74, 80, 227, 232, 233, 263, 269, 272, 275, 276, 278, 281, 287, 299, 300, 309, 318, 319, 320, 326, 342, 343, 358, 363, 460, 468, 470, 475, 478, 479, 496, 497, 503, 506, 509, 511, 512, 522, 523, 537, 573, 574, 576, 588, 589, 590, 591, 592, 593, 594, 595, 596, 661, 667, 669, 680, 683, 690], "repres": [4, 7, 8, 12, 13, 30, 31, 35, 36, 72, 80, 82, 83, 87, 103, 157, 158, 160, 163, 172, 212, 217, 249, 272, 276, 278, 282, 313, 336, 346, 359, 456, 460, 461, 463, 466, 467, 468, 490, 491, 511, 514, 515, 604, 617, 647, 667, 671, 680, 681, 684], "grid": [4, 80, 460, 654, 665, 676], "coordin": [4, 7, 18, 30, 31, 41, 80, 162, 232, 233, 249, 269, 278, 283, 334, 335, 351, 460, 463, 475, 576], "numer": [4, 5, 7, 8, 9, 13, 17, 18, 21, 28, 30, 31, 32, 36, 40, 41, 43, 47, 48, 80, 91, 155, 158, 170, 174, 178, 179, 180, 184, 185, 186, 188, 196, 197, 201, 202, 203, 204, 205, 208, 209, 210, 214, 215, 218, 219, 276, 282, 308, 347, 388, 389, 417, 418, 426, 427, 460, 461, 463, 465, 468, 474, 475, 478, 496, 503, 506, 511, 514, 516, 518, 520, 522, 568, 569, 570, 572, 573, 574, 576, 577, 582, 588, 591, 593, 602, 603, 604, 617, 652, 660, 661, 663, 664, 665, 666, 667, 669, 673, 680, 683, 689], "conserv": [4, 80, 460], "cartesian": [4, 80, 460], "matrix": [4, 8, 9, 12, 13, 31, 32, 35, 36, 47, 80, 85, 86, 226, 232, 233, 269, 276, 307, 308, 310, 311, 314, 315, 364, 370, 460, 465, 467, 468, 491, 495, 497, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 521, 524, 604, 617, 618, 642, 652, 659, 663, 681, 683], "ij": [4, 21, 80, 460, 478, 587], "zero": [4, 5, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 27, 28, 30, 31, 33, 35, 36, 40, 41, 44, 45, 54, 56, 57, 71, 72, 74, 80, 82, 84, 85, 86, 88, 91, 92, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 171, 172, 173, 178, 179, 184, 185, 186, 187, 192, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 223, 224, 225, 226, 227, 239, 240, 241, 243, 255, 257, 258, 260, 261, 262, 264, 267, 269, 272, 275, 276, 278, 294, 295, 296, 297, 299, 300, 311, 315, 329, 333, 336, 371, 375, 409, 443, 444, 449, 450, 451, 453, 457, 460, 461, 463, 465, 466, 467, 468, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 489, 490, 491, 494, 495, 497, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 522, 523, 530, 531, 532, 533, 536, 543, 566, 568, 569, 570, 573, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 617, 618, 621, 637, 647, 650, 652, 653, 654, 658, 660, 661, 664, 669, 672, 673, 682], "vector": [4, 8, 9, 12, 13, 31, 32, 35, 36, 80, 275, 276, 278, 282, 295, 308, 310, 336, 348, 371, 375, 400, 442, 460, 465, 467, 468, 491, 496, 500, 501, 503, 506, 511, 516, 517, 521, 522, 523, 524, 618, 676, 683], "respect": [4, 7, 8, 10, 13, 30, 31, 33, 36, 80, 155, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 208, 215, 220, 249, 266, 267, 272, 274, 281, 342, 343, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 460, 463, 466, 467, 468, 471, 480, 487, 488, 513, 516, 544, 545, 546, 599, 602, 617, 641, 642, 643, 644, 647, 650, 651, 652, 654, 658, 661, 662, 663, 665, 666, 679, 689], "effect": [4, 8, 10, 21, 31, 33, 44, 80, 275, 302, 443, 451, 460, 466, 478, 592, 594, 602, 605, 636, 642, 647, 650, 651, 655, 658, 662, 667, 677], "ignor": [4, 8, 25, 31, 80, 275, 276, 296, 297, 311, 460, 468, 472, 505, 558, 559, 621, 649, 651, 654, 665, 677, 689], "rank": [4, 8, 13, 15, 22, 31, 36, 38, 45, 80, 226, 269, 278, 287, 336, 363, 460, 468, 470, 475, 479, 496, 498, 509, 513, 515, 520, 522, 523, 530, 531, 539, 542, 543, 576, 595, 596, 656], "length": [4, 8, 15, 25, 31, 38, 48, 65, 80, 227, 228, 230, 231, 234, 241, 269, 272, 275, 277, 278, 282, 285, 295, 299, 300, 316, 336, 338, 348, 352, 442, 460, 465, 468, 470, 476, 516, 517, 535, 578, 602, 616, 657, 665, 672], "ni": [4, 80, 460], "xi": [4, 80, 460], "native_arrai": [4, 5, 7, 9, 27, 29, 30, 32, 43, 52, 55, 77, 80, 82, 84, 88, 91, 92, 93, 94, 102, 107, 113, 135, 143, 150, 164, 168, 169, 173, 174, 175, 180, 182, 183, 188, 189, 196, 201, 203, 206, 208, 213, 277, 278, 316, 336, 337, 339, 364, 402, 403, 405, 432, 457, 460, 461, 462, 463, 465, 467, 468, 469, 470, 474, 475, 478, 479, 481, 482, 489, 493, 494, 497, 502, 508, 509, 517, 518, 520, 523, 525, 527, 528, 535, 567, 576, 584, 590, 593, 595, 599, 607, 626, 660, 664, 665], "one_hot": [4, 27, 460, 633, 674], "depth": [4, 8, 12, 27, 31, 35, 82, 275, 278, 302, 324, 375, 393, 460, 465, 467, 472, 485, 486, 559, 616, 619, 644, 651, 672, 673, 674, 676], "scatter": [4, 9, 27, 32, 82, 413, 414, 460, 465, 649, 662, 667, 690], "defin": [4, 8, 9, 13, 27, 31, 32, 36, 82, 208, 220, 228, 230, 231, 232, 233, 257, 267, 269, 272, 275, 278, 302, 336, 337, 398, 399, 460, 463, 465, 468, 478, 496, 501, 502, 515, 588, 589, 590, 592, 633, 642, 643, 647, 651, 652, 655, 658, 661, 663, 664, 665, 666, 671, 673, 677, 678, 680, 681, 682, 683, 684, 687, 689, 690], "hot": [4, 27, 82, 460, 633], "dimens": [4, 8, 9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 25, 27, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 55, 59, 82, 85, 86, 240, 241, 249, 258, 272, 275, 276, 278, 281, 282, 285, 287, 289, 290, 291, 292, 293, 295, 299, 300, 303, 304, 305, 306, 307, 310, 318, 319, 320, 326, 337, 342, 343, 348, 352, 360, 361, 362, 363, 375, 376, 377, 379, 391, 424, 442, 457, 460, 465, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 522, 523, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 572, 573, 574, 576, 578, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 613, 618, 654, 656, 659, 661, 663, 664, 665, 667, 669, 672], "overrid": [4, 8, 27, 31, 82, 276, 308, 460, 647, 649], "ones_lik": [4, 27, 460, 648, 674], "tril": [4, 27, 460], "m": [4, 8, 13, 17, 30, 31, 36, 40, 47, 80, 85, 86, 195, 232, 233, 269, 275, 276, 278, 282, 295, 310, 320, 327, 328, 337, 346, 347, 348, 350, 460, 468, 472, 474, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 555, 568, 569, 570, 633, 639, 643, 644, 645, 651, 669], "whose": [4, 7, 8, 9, 13, 15, 19, 21, 27, 30, 31, 32, 36, 38, 42, 44, 47, 77, 85, 86, 157, 160, 163, 171, 172, 173, 205, 206, 211, 212, 216, 217, 247, 254, 255, 262, 263, 276, 278, 310, 333, 369, 428, 460, 463, 465, 468, 470, 476, 478, 495, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 532, 536, 578, 579, 580, 586, 587, 604, 655, 665], "innermost": [4, 13, 36, 85, 86, 276, 310, 460, 468, 495, 497, 499, 500, 501, 502, 504, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520], "two": [4, 8, 13, 19, 31, 32, 36, 47, 48, 65, 74, 80, 85, 86, 116, 124, 168, 181, 209, 232, 233, 235, 245, 246, 247, 250, 252, 255, 265, 269, 272, 276, 278, 287, 308, 309, 310, 315, 319, 336, 337, 339, 363, 367, 460, 461, 463, 465, 468, 470, 476, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 522, 540, 578, 579, 580, 581, 602, 604, 637, 642, 643, 646, 647, 652, 654, 655, 663, 664, 665, 667, 668, 672, 674, 680, 688], "mxn": [4, 13, 36, 85, 86, 460, 468, 499, 507, 509, 510, 512, 513, 517, 520], "matric": [4, 13, 31, 36, 47, 80, 85, 86, 276, 310, 315, 460, 467, 468, 491, 495, 497, 499, 500, 501, 502, 504, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 521, 604, 659, 676, 683], "diagon": [4, 8, 13, 31, 36, 74, 85, 86, 226, 232, 233, 269, 276, 309, 311, 460, 468, 498, 520], "main": [4, 8, 13, 31, 36, 74, 85, 86, 226, 232, 233, 269, 276, 309, 460, 468, 498, 499, 520, 643, 646, 649, 650, 657, 660, 662, 663, 681, 683, 684, 689], "lower": [4, 7, 8, 13, 17, 30, 31, 36, 40, 74, 85, 199, 226, 232, 269, 287, 363, 460, 463, 468, 474, 495, 502, 570, 604, 616, 617, 633, 644, 654, 663, 665, 667, 669, 677, 678, 679, 680, 681, 683, 684, 689, 690], "triangular": [4, 13, 36, 85, 86, 232, 233, 269, 460, 468, 495, 502, 513], "alloc": [4, 5, 28, 85, 86, 91, 460, 461, 642, 644, 677], "triu": [4, 27, 460], "upper": [4, 8, 13, 17, 31, 36, 40, 74, 86, 226, 233, 269, 460, 468, 474, 495, 502, 513, 570, 616, 662, 665], "zeros_lik": [4, 27, 36, 91, 197, 443, 444, 447, 449, 451, 460, 461, 463, 466, 467, 470, 482, 484, 489, 512, 528, 663, 667], "data_typ": [5, 8, 28, 31, 120, 461, 649, 652, 665, 666], "_arraywithdatatyp": [5, 47], "astyp": [5, 12, 28, 35, 461, 467, 483, 485, 489, 633, 652, 662, 663, 667], "irrespect": [5, 13, 28, 36, 91, 461, 468, 516, 650, 662, 671, 690], "promot": [5, 7, 8, 13, 28, 30, 31, 36, 43, 47, 48, 91, 94, 116, 117, 118, 124, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 177, 178, 180, 190, 191, 192, 193, 194, 198, 201, 205, 208, 211, 212, 213, 214, 215, 216, 217, 219, 244, 262, 272, 276, 308, 461, 463, 468, 470, 478, 495, 496, 503, 504, 506, 508, 509, 511, 512, 514, 515, 522, 523, 529, 539, 582, 589, 592, 602, 603, 646, 655, 656, 659], "rule": [5, 8, 13, 28, 30, 31, 36, 91, 94, 116, 117, 118, 163, 174, 201, 208, 219, 263, 272, 276, 278, 308, 325, 461, 463, 468, 470, 495, 496, 503, 508, 511, 515, 529, 604, 646, 647, 650, 651, 652, 654, 657, 658, 659, 661, 665, 667, 684], "cast": [5, 8, 13, 21, 28, 31, 36, 91, 94, 118, 257, 272, 461, 468, 478, 523, 585, 586, 591, 593, 603, 652, 659, 664, 669], "nan": [5, 7, 8, 9, 19, 21, 28, 30, 31, 32, 91, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 177, 178, 179, 181, 184, 186, 190, 191, 192, 193, 194, 196, 205, 206, 208, 209, 211, 212, 213, 216, 217, 218, 220, 235, 245, 246, 252, 257, 258, 262, 267, 272, 287, 358, 359, 361, 362, 396, 441, 458, 461, 463, 465, 476, 478, 479, 578, 579, 580, 581, 588, 589, 590, 592, 593, 594, 595, 596, 602, 605, 646, 652, 655, 661, 666], "infin": [5, 7, 8, 9, 13, 28, 30, 31, 36, 91, 155, 157, 158, 160, 161, 162, 170, 171, 172, 177, 178, 179, 180, 184, 185, 190, 191, 192, 193, 194, 196, 205, 208, 209, 211, 212, 213, 216, 217, 218, 257, 262, 272, 396, 458, 461, 463, 465, 468, 478, 479, 514, 523, 588, 590, 595, 596, 646, 655], "implement": [5, 6, 8, 19, 20, 28, 29, 31, 36, 43, 91, 118, 150, 155, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 208, 211, 212, 216, 217, 262, 272, 276, 287, 310, 361, 362, 461, 462, 463, 468, 476, 477, 478, 500, 501, 502, 511, 578, 579, 580, 581, 582, 584, 588, 589, 590, 592, 626, 633, 642, 645, 646, 647, 648, 650, 652, 653, 655, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 686, 689, 690], "match": [5, 8, 25, 28, 31, 91, 208, 239, 241, 272, 278, 338, 409, 461, 463, 465, 597, 642, 647, 649, 650, 654, 663, 664, 684, 689], "newli": [5, 28, 91, 369, 461, 465, 644, 651, 662, 665], "float64": [5, 8, 17, 21, 28, 31, 32, 40, 44, 65, 76, 91, 94, 99, 104, 105, 108, 109, 113, 114, 118, 120, 121, 127, 130, 244, 257, 272, 276, 308, 408, 460, 461, 465, 474, 569, 570, 586, 599, 602, 652, 664, 665], "broadcast_arrai": [5, 28, 461], "against": [5, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 92, 200, 235, 237, 240, 252, 272, 287, 361, 362, 363, 406, 461, 465, 468, 475, 506, 507, 509, 512, 573, 635, 665, 669, 677, 683], "x2": [5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 47, 48, 84, 88, 92, 117, 124, 143, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 215, 219, 235, 239, 244, 245, 246, 247, 248, 250, 253, 254, 256, 259, 264, 272, 276, 278, 308, 329, 364, 460, 461, 462, 463, 465, 468, 475, 496, 503, 506, 511, 515, 518, 519, 522, 577, 599, 623, 646, 652, 654, 656, 658, 662, 663], "x3": [5, 9, 84, 88, 92, 364, 460, 461, 465], "mix": [5, 7, 28, 30, 32, 37, 40, 47, 48, 92, 118, 164, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 198, 201, 203, 208, 277, 316, 378, 382, 383, 400, 430, 433, 461, 463, 465, 467, 468, 469, 470, 473, 475, 478, 481, 483, 486, 489, 491, 493, 494, 495, 518, 525, 527, 528, 566, 577, 587, 589, 592, 645, 654, 660, 662, 665, 667, 669, 678, 683, 687, 689], "broadcast_to": [5, 28, 461, 652], "can_cast": [5, 28, 461, 652, 659, 663], "occur": [5, 8, 19, 28, 31, 42, 94, 257, 272, 461, 475, 476, 573, 574, 578, 579, 580, 581, 646, 651, 656], "accord": [5, 9, 15, 21, 28, 38, 44, 94, 104, 158, 168, 278, 336, 382, 387, 413, 414, 461, 463, 465, 468, 470, 478, 522, 530, 543, 592, 594, 604, 623, 642, 643, 646, 652, 659, 663, 665], "as_n": [5, 6, 25, 28, 29, 97, 98, 99, 100, 101, 102, 108, 134, 135, 146, 461, 462, 652], "int32": [5, 9, 17, 18, 21, 28, 32, 40, 41, 74, 84, 88, 91, 94, 96, 100, 102, 105, 107, 108, 112, 113, 114, 118, 122, 126, 128, 145, 283, 351, 383, 400, 432, 460, 461, 462, 465, 474, 475, 478, 568, 569, 570, 574, 585, 586, 591, 593, 602, 652, 663, 665, 669], "finfo": [5, 28, 461, 665], "inform": [5, 10, 28, 33, 104, 107, 365, 453, 461, 465, 466, 633, 641, 642, 643, 644, 646, 650, 651, 656, 662, 665, 686], "about": [5, 28, 104, 107, 461, 633, 637, 640, 641, 642, 643, 644, 645, 646, 649, 651, 652, 658, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 684, 685, 688], "8": [5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 52, 58, 76, 77, 81, 84, 88, 97, 99, 100, 101, 104, 136, 151, 158, 159, 160, 164, 165, 168, 170, 172, 180, 182, 183, 188, 189, 194, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 213, 214, 217, 218, 223, 224, 226, 235, 242, 244, 249, 252, 253, 254, 255, 258, 263, 267, 269, 272, 275, 276, 277, 278, 281, 285, 291, 292, 293, 294, 298, 299, 300, 303, 304, 313, 316, 317, 318, 319, 320, 323, 326, 330, 331, 337, 338, 339, 340, 341, 344, 345, 348, 350, 353, 360, 361, 363, 368, 369, 371, 375, 376, 379, 382, 391, 398, 399, 400, 402, 403, 405, 408, 413, 414, 426, 428, 443, 446, 448, 451, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 481, 485, 486, 489, 490, 491, 493, 497, 498, 499, 502, 506, 507, 508, 511, 514, 516, 517, 518, 520, 521, 523, 525, 526, 527, 528, 532, 539, 540, 542, 548, 555, 567, 568, 569, 570, 572, 577, 578, 580, 582, 584, 586, 587, 589, 591, 593, 594, 602, 605, 618, 643, 650, 651, 654, 661, 665, 668, 672], "14": [5, 7, 8, 12, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 91, 104, 107, 156, 160, 162, 169, 173, 194, 197, 201, 206, 212, 219, 243, 275, 276, 278, 291, 292, 294, 305, 307, 323, 326, 330, 340, 426, 443, 461, 463, 465, 466, 467, 468, 470, 476, 478, 481, 482, 484, 486, 490, 494, 499, 511, 520, 542, 568, 569, 570, 578, 586, 587, 650, 654, 665], "resolut": [5, 28, 104, 461, 644], "1e": [5, 8, 10, 13, 14, 16, 28, 31, 33, 36, 37, 39, 104, 235, 252, 272, 277, 281, 316, 342, 343, 388, 389, 417, 418, 426, 443, 444, 449, 451, 461, 465, 466, 468, 469, 473, 516, 525, 526, 527, 566, 597, 599, 620, 621, 633, 650, 659, 662, 664, 673, 674], "06": [5, 17, 30, 33, 52, 104, 157, 172, 275, 294, 449, 457, 461, 466, 570, 597, 599, 665, 672], "min": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 104, 107, 200, 232, 233, 269, 276, 311, 376, 413, 414, 426, 461, 463, 465, 468, 478, 507, 513, 516, 517, 523, 633], "4028235e": [5, 104, 461], "38": [5, 8, 30, 31, 40, 104, 216, 259, 272, 275, 292, 305, 461, 463, 468, 508, 602, 654], "max": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 104, 107, 199, 275, 276, 291, 292, 293, 303, 304, 305, 311, 370, 371, 376, 400, 413, 414, 461, 463, 465, 468, 478, 507, 509, 512, 602, 621, 651, 663, 665], "iinfo": [5, 28, 461, 657], "integ": [5, 7, 8, 12, 13, 15, 17, 21, 22, 25, 30, 31, 32, 35, 36, 38, 40, 44, 45, 47, 48, 65, 72, 76, 83, 87, 107, 108, 113, 117, 118, 122, 155, 164, 165, 166, 167, 168, 169, 170, 179, 180, 198, 205, 208, 209, 218, 219, 240, 243, 244, 253, 272, 275, 276, 278, 282, 285, 287, 299, 300, 308, 323, 330, 336, 340, 346, 347, 348, 349, 350, 352, 362, 363, 387, 408, 442, 460, 461, 463, 465, 467, 468, 470, 474, 477, 478, 479, 480, 481, 482, 483, 485, 487, 489, 498, 508, 522, 523, 537, 567, 568, 569, 570, 571, 572, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 602, 603, 604, 605, 608, 644, 650, 652, 660, 661, 664, 665, 669, 671], "119": [5, 107], "122": [5, 107, 172, 463], "int8": [5, 17, 28, 31, 40, 100, 105, 107, 108, 112, 227, 269, 461, 568, 602, 652, 665], "128": [5, 8, 12, 28, 31, 35, 48, 107, 242, 272, 275, 294, 375, 387, 461, 465, 467, 468, 482, 484, 489, 511], "127": [5, 8, 28, 31, 107, 262, 272, 461], "12": [5, 7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 39, 40, 44, 47, 48, 107, 158, 159, 164, 168, 169, 172, 174, 175, 176, 189, 201, 203, 209, 212, 218, 219, 230, 231, 249, 254, 255, 269, 272, 275, 278, 291, 292, 293, 294, 296, 299, 303, 304, 305, 323, 326, 330, 340, 350, 371, 375, 376, 389, 413, 414, 418, 426, 463, 465, 467, 468, 470, 473, 474, 475, 476, 478, 481, 485, 490, 491, 499, 507, 511, 518, 520, 532, 536, 538, 540, 542, 566, 568, 569, 570, 577, 578, 585, 586, 587, 591, 593, 602, 643, 648, 650, 652, 654, 661, 666], "54": [5, 7, 12, 30, 31, 35, 40, 107, 171, 172, 177, 213, 218, 228, 253, 269, 275, 294, 463, 467, 468, 478, 491, 494, 508, 511, 568, 569, 570, 587, 654], "1220": [5, 107], "int16": [5, 17, 21, 28, 40, 94, 100, 105, 107, 113, 128, 461, 478, 568, 585, 586, 591, 593, 602, 652, 663, 665, 669], "32768": [5, 28, 107], "32767": [5, 28, 107], "is_bool_dtyp": [5, 28, 461], "is_float_dtyp": [5, 28, 461, 666], "see": [5, 7, 13, 18, 19, 21, 22, 30, 31, 36, 41, 44, 45, 47, 48, 65, 75, 78, 93, 112, 118, 158, 162, 164, 166, 167, 168, 169, 174, 175, 178, 180, 182, 183, 188, 189, 192, 194, 195, 197, 198, 201, 203, 205, 208, 215, 219, 232, 233, 269, 276, 307, 460, 461, 463, 468, 475, 476, 478, 479, 496, 509, 512, 515, 522, 523, 574, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 635, 638, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 658, 659, 663, 664, 665, 666, 667, 669, 671, 672, 676, 677, 679], "is_int_dtyp": [5, 28, 461, 664, 666], "is_uint_dtyp": [5, 28, 461, 664, 666], "result_typ": [5, 28, 461, 652], "arrays_and_dtyp": [5, 28, 118, 461], "involv": [5, 28, 118, 158, 461, 463, 636, 638, 645, 651, 652, 654, 667, 674, 683, 689], "_arraywithdevic": [6, 47], "dev": [6, 25, 29, 83, 139, 145, 460, 462, 643, 653, 659, 671, 673], "handl": [6, 8, 25, 29, 31, 48, 131, 132, 133, 134, 135, 139, 143, 144, 151, 154, 278, 338, 462, 621, 645, 650, 651, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 667, 673, 680, 690], "to_devic": [6, 29, 134, 462, 633], "move": [6, 8, 29, 31, 150, 232, 233, 269, 278, 333, 462, 633, 644, 666], "__dlpack__": [6, 29, 75, 150, 460, 462], "mai": [6, 7, 8, 13, 19, 20, 29, 30, 36, 43, 47, 48, 65, 75, 150, 175, 183, 189, 196, 197, 203, 257, 272, 374, 460, 462, 463, 465, 468, 476, 477, 478, 514, 523, 578, 579, 580, 581, 582, 584, 588, 589, 590, 592, 602, 637, 641, 642, 643, 644, 646, 650, 651, 652, 656, 659, 661, 662, 663, 664, 665, 667, 670, 671, 673, 690], "caveat": [6, 29, 150, 462], "portabl": [6, 29, 150, 462, 633, 681], "_arraywithelementwis": [7, 47], "ab": [7, 13, 23, 30, 46, 47, 48, 205, 235, 252, 272, 463, 468, 472, 507, 517, 523, 555, 558, 599, 647, 652, 660, 663, 665], "absolut": [7, 8, 13, 23, 25, 30, 31, 36, 47, 155, 235, 252, 272, 276, 311, 463, 468, 507, 508, 509, 514, 597, 599, 602, 604, 638, 643, 667], "aco": [7, 30, 463], "real": [7, 8, 21, 30, 31, 44, 156, 157, 159, 161, 162, 174, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 201, 205, 208, 213, 214, 215, 217, 218, 219, 272, 275, 276, 295, 310, 311, 463, 468, 478, 500, 514, 588, 590, 592, 650, 685], "invers": [7, 8, 13, 30, 31, 36, 156, 157, 159, 160, 161, 162, 163, 275, 295, 463, 468, 504, 508, 512, 623, 652, 676], "cosin": [7, 30, 156, 157, 171, 172, 229, 269, 275, 294, 463], "57": [7, 30, 136, 156, 157, 159, 160, 162, 172, 173, 206, 462, 463], "69": [7, 33, 40, 156, 192, 275, 294, 447, 463, 466, 468, 507, 508, 569, 665, 672], "acosh": [7, 30, 105, 106, 461, 463], "area": [7, 8, 30, 31, 157, 160, 163, 275, 302, 463, 636, 662, 667, 675, 679], "hyperbol": [7, 30, 157, 160, 163, 172, 212, 217, 463], "sector": [7, 30, 157, 160, 163, 463, 636], "32": [7, 8, 17, 30, 31, 36, 40, 47, 48, 54, 103, 157, 168, 169, 209, 210, 238, 242, 253, 260, 272, 275, 292, 293, 294, 375, 399, 457, 461, 463, 465, 467, 468, 474, 475, 478, 482, 484, 485, 486, 489, 491, 506, 511, 568, 569, 570, 577, 587, 602, 605, 633, 651, 661, 672, 688], "99": [7, 10, 28, 30, 40, 76, 157, 171, 426, 447, 460, 463, 465, 466, 478, 569, 587], "add": [7, 16, 23, 25, 30, 39, 46, 47, 48, 409, 434, 452, 456, 463, 465, 466, 473, 566, 599, 608, 620, 633, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 658, 659, 662, 663, 665, 666, 667, 669, 671, 677, 679, 681, 683], "second": [7, 8, 10, 13, 15, 19, 30, 31, 32, 33, 36, 38, 42, 47, 48, 116, 124, 158, 162, 164, 166, 167, 168, 169, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 215, 232, 233, 235, 245, 246, 248, 249, 250, 252, 253, 256, 259, 264, 265, 269, 272, 276, 278, 285, 308, 310, 311, 313, 337, 347, 349, 352, 367, 392, 420, 438, 443, 444, 449, 461, 463, 465, 466, 468, 470, 471, 472, 476, 496, 499, 500, 501, 503, 506, 511, 513, 514, 516, 518, 522, 539, 540, 545, 548, 578, 579, 580, 621, 637, 643, 646, 649, 652, 654, 662, 663, 665, 671, 688], "compat": [7, 13, 15, 18, 21, 22, 30, 36, 38, 41, 44, 45, 47, 48, 93, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 219, 461, 463, 468, 470, 475, 478, 479, 496, 509, 512, 515, 518, 522, 523, 535, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 636, 648, 658, 663, 664, 666, 669, 677], "multipli": [7, 8, 12, 21, 30, 31, 35, 158, 215, 254, 275, 276, 302, 315, 463, 467, 478, 490, 585, 644, 647, 648, 650, 654], "determin": [7, 8, 13, 15, 19, 22, 25, 30, 31, 32, 36, 43, 45, 47, 48, 74, 94, 96, 103, 109, 110, 111, 112, 113, 114, 115, 130, 140, 141, 142, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 177, 178, 180, 184, 185, 186, 187, 190, 191, 192, 193, 194, 198, 201, 205, 208, 211, 212, 213, 214, 215, 216, 217, 219, 262, 272, 275, 276, 302, 308, 311, 364, 367, 396, 397, 401, 402, 403, 404, 405, 428, 441, 460, 461, 462, 463, 465, 467, 468, 470, 471, 476, 479, 493, 495, 496, 497, 499, 503, 504, 506, 508, 509, 511, 512, 514, 515, 520, 522, 523, 529, 544, 545, 546, 578, 579, 580, 581, 582, 595, 596, 604, 608, 617, 635, 650, 652, 653, 655, 659, 663, 667], "15": [7, 8, 9, 13, 17, 21, 27, 28, 30, 31, 32, 35, 36, 38, 40, 44, 48, 77, 104, 158, 164, 168, 174, 182, 188, 194, 201, 208, 209, 210, 249, 253, 272, 275, 278, 291, 292, 294, 305, 323, 326, 330, 340, 371, 375, 376, 379, 392, 398, 399, 420, 426, 438, 460, 461, 463, 465, 467, 468, 470, 472, 474, 475, 476, 478, 481, 491, 499, 502, 504, 511, 517, 518, 536, 542, 547, 568, 569, 576, 578, 585, 586, 587, 599, 643, 654, 661, 686], "asin": [7, 30, 463], "sine": [7, 30, 159, 160, 211, 212, 463], "927": [7, 30, 159], "asinh": [7, 30, 463], "atan": [7, 30, 463], "tangent": [7, 30, 161, 162, 163, 216, 217, 463, 655], "785": [7, 30, 161, 162, 463], "atan2": [7, 30, 463], "quotient": [7, 30, 162, 463], "245": [7, 35, 162, 467, 490, 491], "68": [7, 40, 55, 76, 162, 275, 294, 457, 460, 463, 473, 566, 569, 570], "588": [7, 162, 463], "inf": [7, 8, 9, 13, 30, 31, 32, 36, 162, 178, 184, 185, 186, 187, 190, 191, 220, 257, 267, 272, 276, 307, 396, 441, 458, 463, 465, 468, 507, 523, 602, 605, 652, 661], "36": [7, 8, 12, 21, 31, 32, 36, 162, 209, 210, 249, 272, 275, 294, 375, 376, 463, 465, 468, 472, 478, 491, 508, 511, 517, 521, 558, 587], "75": [7, 8, 30, 31, 32, 35, 40, 78, 160, 162, 174, 229, 247, 249, 251, 269, 272, 275, 281, 294, 345, 363, 377, 398, 426, 460, 463, 465, 468, 472, 474, 481, 504, 511, 555, 570], "52": [7, 30, 32, 33, 40, 162, 172, 174, 375, 376, 399, 443, 463, 465, 466, 467, 468, 478, 491, 511, 570, 587], "719": [7, 162, 463], "197": [7, 162, 463], "atanh": [7, 30, 463], "549": [7, 30, 35, 163, 463, 467, 491], "47": [7, 8, 17, 30, 31, 32, 33, 40, 163, 213, 275, 292, 293, 304, 305, 375, 376, 447, 463, 465, 466, 467, 474, 491, 569, 570], "bitwise_and": [7, 30, 463, 656], "11": [7, 8, 9, 12, 13, 17, 21, 30, 31, 32, 35, 36, 38, 40, 44, 48, 158, 161, 164, 178, 208, 209, 215, 255, 272, 275, 276, 278, 291, 292, 303, 304, 312, 323, 326, 330, 332, 340, 369, 375, 376, 382, 399, 414, 463, 465, 467, 468, 469, 470, 472, 474, 475, 476, 478, 481, 482, 490, 491, 499, 502, 504, 506, 507, 511, 516, 517, 527, 532, 537, 538, 540, 542, 553, 555, 565, 568, 569, 570, 577, 578, 585, 586, 587, 594, 650, 651, 652, 654, 661, 666], "bitwise_invert": [7, 30, 463], "bitiwse_invert": [7, 165], "bitwise_left_shift": [7, 30, 463], "bitwise_or": [7, 30, 463], "bitwise_right_shift": [7, 30, 47, 463], "64": [7, 8, 12, 30, 31, 32, 35, 36, 40, 44, 48, 103, 168, 205, 213, 214, 242, 244, 272, 275, 294, 375, 376, 449, 461, 463, 465, 466, 467, 468, 478, 482, 484, 486, 489, 508, 511, 517, 521, 569, 587, 591, 618, 633, 643, 672, 673, 688], "16": [7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 47, 48, 107, 168, 192, 209, 216, 244, 249, 255, 272, 275, 278, 291, 292, 294, 299, 300, 303, 304, 326, 376, 379, 408, 426, 455, 461, 463, 465, 466, 467, 468, 470, 472, 474, 475, 478, 489, 491, 495, 499, 502, 511, 517, 542, 555, 568, 569, 570, 577, 586, 587, 602, 605, 633, 644, 654, 672], "bitwise_xor": [7, 30, 47, 463], "89": [7, 17, 28, 30, 31, 40, 48, 107, 169, 275, 294, 461, 463, 468, 478, 518, 569, 570, 593], "51": [7, 8, 30, 31, 32, 40, 169, 201, 212, 275, 294, 463, 570, 602], "18": [7, 8, 17, 30, 31, 35, 36, 40, 44, 55, 169, 174, 208, 212, 249, 272, 275, 278, 294, 299, 300, 303, 326, 457, 463, 468, 474, 478, 485, 499, 506, 511, 568, 569, 570, 586, 587, 591, 650, 654, 656], "19": [7, 8, 17, 30, 31, 36, 40, 160, 169, 192, 201, 216, 275, 278, 293, 294, 300, 303, 326, 463, 468, 472, 474, 477, 499, 507, 520, 558, 568, 569, 570, 584, 654], "26": [7, 8, 16, 17, 31, 32, 33, 40, 169, 174, 212, 275, 276, 294, 315, 398, 443, 463, 465, 466, 467, 468, 472, 473, 478, 489, 499, 511, 518, 548, 566, 568, 569, 587], "27": [7, 8, 13, 17, 30, 31, 35, 36, 40, 44, 168, 169, 172, 205, 212, 213, 244, 272, 275, 294, 399, 463, 465, 467, 468, 472, 478, 494, 506, 511, 521, 548, 555, 569, 587, 591, 602], "23": [7, 8, 12, 17, 27, 30, 31, 32, 40, 77, 169, 172, 185, 186, 187, 208, 209, 210, 212, 218, 238, 239, 260, 272, 275, 291, 292, 293, 294, 303, 304, 305, 460, 463, 467, 468, 472, 475, 486, 494, 499, 507, 517, 548, 555, 568, 569, 570, 577, 633, 665, 669], "20": [7, 8, 12, 17, 21, 30, 31, 32, 35, 36, 40, 44, 169, 173, 177, 206, 209, 213, 249, 252, 255, 272, 275, 291, 293, 303, 305, 375, 383, 387, 414, 426, 463, 465, 468, 474, 475, 478, 481, 482, 492, 499, 504, 507, 511, 518, 568, 576, 577, 585, 586, 587, 591, 593, 633, 651, 656, 667, 671], "74": [7, 40, 169, 194, 275, 294, 463, 468, 508], "41": [7, 8, 30, 31, 32, 36, 55, 161, 169, 201, 213, 275, 283, 292, 304, 351, 370, 371, 457, 463, 465, 468, 478, 495, 593], "59": [7, 169], "24": [7, 8, 13, 21, 31, 32, 35, 36, 40, 47, 169, 189, 201, 209, 210, 213, 249, 253, 254, 272, 275, 277, 291, 294, 303, 316, 375, 376, 463, 465, 468, 472, 478, 481, 499, 507, 511, 548, 568, 569, 570, 585, 587, 599, 672], "ceil": [7, 8, 30, 31, 65, 275, 291, 292, 460, 463, 662], "round": [7, 8, 30, 31, 158, 170, 179, 180, 213, 218, 219, 243, 272, 463, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "co": [7, 9, 30, 379, 463, 465, 636, 641, 652, 669, 676], "express": [7, 8, 30, 31, 156, 159, 161, 162, 171, 173, 206, 211, 216, 262, 272, 463, 623, 655, 657, 663, 669, 674, 683, 684], "radian": [7, 8, 30, 31, 156, 159, 161, 162, 171, 173, 206, 211, 216, 236, 262, 272, 463, 655], "416": [7, 171, 463], "540": [7, 171], "990": [7, 171], "cosh": [7, 30, 463], "angl": [7, 8, 30, 31, 162, 172, 212, 217, 250, 272, 463, 676], "76": [7, 21, 28, 30, 40, 107, 157, 172, 212, 461, 463, 468, 472, 478, 518, 555, 569, 587], "81": [7, 28, 30, 36, 40, 107, 172, 192, 214, 461, 463, 468, 472, 474, 478, 508, 521, 555, 570, 587, 665], "deg2rad": [7, 30, 463], "degre": [7, 8, 21, 30, 31, 44, 173, 206, 236, 272, 278, 337, 463, 478, 592, 594, 682], "convers": [7, 8, 31, 173, 206, 415, 422, 465, 637, 642, 660, 668, 670, 674, 676, 677, 678, 682, 689], "90": [7, 8, 30, 31, 169, 173, 206, 209, 278, 337, 463, 468, 478, 511, 587, 636], "180": [7, 30, 173, 206, 463], "270": [7, 30, 173, 206, 463], "360": [7, 30, 173, 206, 463, 651], "71": [7, 30, 173, 206, 463], "28": [7, 12, 16, 30, 31, 32, 35, 36, 40, 44, 173, 192, 206, 275, 294, 398, 443, 463, 465, 466, 467, 468, 473, 478, 482, 484, 486, 489, 491, 511, 566, 568, 569, 570, 587, 591, 633], "divid": [7, 8, 9, 15, 25, 30, 31, 38, 47, 48, 180, 281, 342, 343, 426, 463, 465, 470, 537, 647, 650, 654, 665], "dividend": [7, 30, 174, 180, 208, 219, 463], "divisor": [7, 8, 10, 21, 30, 31, 33, 44, 174, 180, 182, 208, 219, 248, 272, 278, 323, 330, 340, 443, 444, 449, 463, 466, 478, 592, 594, 621], "375": [7, 175, 203], "erf": [7, 30, 463], "exponenti": [7, 8, 30, 31, 176, 177, 194, 205, 224, 267, 276, 314, 463], "gauss": [7, 30, 176, 463], "error": [7, 8, 25, 30, 31, 52, 176, 287, 362, 457, 463, 468, 478, 514, 517, 588, 590, 604, 619, 621, 637, 641, 643, 644, 646, 647, 648, 651, 652, 653, 654, 656, 657, 658, 663, 665, 666, 671, 677, 683], "328": [7, 176, 216, 463], "677": [7, 176, 463], "842": [7, 176, 216, 463], "exp": [7, 8, 30, 31, 178, 194, 221, 267, 275, 299, 300, 463, 468, 514, 661, 663], "evalu": [7, 25, 30, 31, 177, 178, 190, 191, 192, 193, 196, 202, 204, 210, 214, 276, 278, 315, 332, 455, 463, 466, 472, 479, 557, 558, 595, 596, 644, 650, 652, 659, 660, 667, 683], "71828198": [7, 30, 177], "38905573": [7, 30, 177], "08553696": [7, 30, 177], "expm1": [7, 30, 463, 652], "244": [7, 178, 275, 294, 633], "918": [7, 178], "48": [7, 8, 30, 31, 32, 33, 40, 54, 157, 178, 213, 275, 292, 293, 294, 304, 305, 398, 443, 447, 457, 463, 465, 466, 468, 472, 478, 511, 548, 569, 587], "_": [7, 25, 30, 33, 94, 178, 184, 197, 209, 276, 308, 375, 443, 444, 461, 463, 465, 466, 468, 470, 472, 478, 514, 517, 524, 543, 554, 592, 639, 650, 655, 657, 662, 665, 672], "147": [7, 178, 463], "floor": [7, 8, 30, 31, 168, 275, 291, 292, 295, 463, 662], "floor_divid": [7, 30, 463, 608], "greater": [7, 8, 17, 30, 31, 40, 47, 48, 156, 159, 162, 166, 168, 179, 180, 205, 208, 210, 218, 227, 237, 263, 269, 272, 275, 295, 299, 300, 463, 468, 470, 474, 496, 508, 538, 570, 604, 644, 664], "greater_equ": [7, 30, 47, 48, 194, 463], "isfinit": [7, 30, 463, 663], "out_i": [7, 30, 31, 184, 185, 186, 187, 260, 272, 463], "self_i": [7, 30, 31, 184, 185, 186, 187, 260], "finit": [7, 8, 30, 31, 158, 162, 184, 205, 208, 257, 272, 463], "isinf": [7, 30, 463], "detect_posit": [7, 30, 185, 463], "detect_neg": [7, 30, 185, 463], "detect": [7, 25, 30, 185, 463, 472, 547, 558, 642, 643, 648, 650, 651, 657, 665, 672, 673], "isnan": [7, 30, 463], "isreal": [7, 30, 463], "1j": [7, 8, 30, 31, 187, 236, 238, 260, 272, 426, 465], "5j": [7, 30, 31, 187, 238, 260, 272, 463], "6j": [7, 8, 31, 187, 238, 251, 260, 272, 463], "less": [7, 8, 13, 17, 21, 30, 31, 36, 40, 47, 48, 156, 157, 159, 162, 170, 190, 191, 192, 193, 205, 208, 210, 213, 261, 272, 275, 276, 294, 295, 308, 463, 468, 474, 478, 508, 509, 512, 523, 570, 592, 594, 636, 644, 650, 652, 654, 656, 658, 662, 663, 665, 667, 668, 669, 683, 685], "less_equ": [7, 30, 47, 48, 463, 656], "61": [7, 8, 30, 31, 33, 37, 40, 160, 190, 192, 214, 275, 294, 443, 463, 466, 467, 469, 489, 525, 527, 570], "log10": [7, 30, 463], "logarithm": [7, 30, 177, 190, 191, 192, 193, 194, 463, 468, 514], "602": [7, 191, 463], "699": [7, 191, 463], "log1p": [7, 30, 463, 661], "693": [7, 30, 59, 160, 192, 457, 463, 469, 527], "001": [7, 8, 16, 28, 31, 33, 58, 104, 192, 238, 252, 260, 272, 444, 457, 461, 466, 473, 566, 672, 673], "0953": [7, 30, 190, 192, 463], "log2": [7, 30, 256, 272, 463], "logaddexp": [7, 30, 463], "logical_and": [7, 30, 463, 663, 667, 690], "logical_not": [7, 30, 463, 652], "logical_or": [7, 30, 463, 690], "conform": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 276, 308, 310, 460, 461, 463, 468, 470, 475, 476, 477, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 529, 531, 532, 533, 535, 536, 538, 539, 543, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 655], "api": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 116, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 276, 308, 310, 460, 461, 463, 468, 470, 475, 476, 477, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 529, 531, 532, 533, 535, 536, 538, 539, 543, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 634, 635, 643, 645, 647, 652, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 672, 677, 678, 679, 681, 683, 685, 688, 690], "extens": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 276, 308, 310, 460, 461, 463, 468, 470, 475, 476, 477, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 529, 531, 532, 533, 535, 536, 538, 539, 543, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 633, 639, 641, 643, 644, 655, 665, 680, 683, 690], "api_specif": [7, 30, 94, 184, 197, 209, 461, 463, 470, 478, 543, 592, 655], "signatur": [7, 30, 94, 184, 197, 209, 276, 278, 308, 336, 461, 463, 468, 470, 478, 514, 543, 592, 636, 652, 653, 654, 655, 658, 662, 665, 666, 667, 680, 689], "elementwise_funct": [7, 30, 184, 197, 209, 463, 655], "html": [7, 30, 94, 184, 197, 209, 232, 233, 269, 276, 308, 461, 463, 468, 470, 478, 514, 543, 592, 636, 649, 655], "noqa": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 276, 308, 310, 442, 460, 461, 463, 465, 468, 470, 475, 476, 477, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 529, 531, 532, 533, 535, 536, 538, 539, 543, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 592, 593, 594, 595, 596, 626, 664], "logical_xor": [7, 30, 463], "maximum": [7, 8, 9, 10, 15, 18, 21, 25, 30, 31, 32, 33, 38, 41, 44, 48, 149, 245, 272, 275, 278, 298, 336, 370, 371, 379, 449, 462, 463, 465, 466, 468, 470, 472, 475, 478, 507, 528, 559, 573, 588, 590, 602, 604, 605, 608, 644, 654, 662, 672, 690], "use_wher": [7, 30, 199, 200, 463], "formula": [7, 8, 30, 199, 200, 255, 272, 281, 342, 343, 463], "clip": [7, 8, 15, 30, 31, 32, 38, 199, 200, 278, 338, 370, 371, 463, 465, 470, 650, 659, 661, 662, 672, 674], "than": [7, 8, 9, 13, 15, 17, 18, 19, 21, 25, 30, 31, 32, 36, 38, 40, 41, 42, 44, 47, 48, 65, 104, 149, 156, 157, 159, 162, 166, 168, 170, 179, 180, 190, 191, 192, 193, 199, 205, 208, 210, 213, 218, 222, 227, 235, 237, 252, 261, 263, 269, 272, 275, 276, 278, 294, 295, 299, 300, 306, 307, 327, 328, 402, 403, 405, 460, 461, 462, 463, 465, 468, 470, 474, 475, 476, 478, 496, 506, 508, 509, 512, 523, 528, 532, 538, 570, 576, 579, 580, 581, 585, 586, 591, 592, 593, 594, 636, 639, 644, 646, 650, 651, 652, 654, 656, 662, 663, 664, 665, 666, 667, 669, 672, 673, 674, 677, 680, 681, 682, 683, 689, 690], "minimum": [7, 8, 9, 15, 18, 21, 30, 31, 32, 38, 41, 44, 155, 244, 246, 272, 278, 336, 358, 388, 389, 417, 418, 426, 427, 463, 465, 470, 475, 478, 528, 574, 588, 590, 602, 604, 605, 608, 680, 686, 690], "exce": [7, 8, 31, 200, 278, 339, 463], "product": [7, 12, 13, 21, 30, 31, 35, 36, 44, 201, 276, 313, 315, 463, 467, 468, 478, 493, 494, 496, 503, 506, 511, 522, 585, 586, 587, 591, 592, 618, 642, 669, 683, 685], "30": [7, 8, 31, 32, 40, 44, 48, 201, 249, 259, 272, 275, 294, 351, 375, 377, 383, 398, 399, 414, 420, 426, 463, 465, 468, 472, 478, 504, 511, 556, 568, 569, 586, 587, 591, 604, 617, 651], "56": [7, 8, 12, 17, 30, 31, 35, 79, 201, 213, 216, 218, 275, 294, 443, 460, 463, 466, 467, 468, 472, 478, 482, 484, 486, 491, 511, 517, 547, 569, 587, 654], "21": [7, 8, 9, 17, 27, 30, 31, 36, 40, 44, 47, 79, 107, 158, 160, 162, 168, 169, 201, 253, 258, 272, 275, 276, 291, 293, 294, 303, 305, 307, 414, 460, 461, 463, 468, 469, 472, 478, 499, 511, 527, 553, 568, 569, 585, 586, 587, 661], "not_equ": [7, 30, 47, 48, 463], "pow": [7, 30, 47, 48, 463, 646], "expon": [7, 8, 9, 31, 32, 205, 244, 247, 254, 272, 427, 463, 465, 468, 508], "25": [7, 9, 13, 14, 17, 21, 24, 30, 31, 32, 35, 36, 39, 40, 44, 47, 48, 60, 78, 158, 168, 174, 176, 201, 205, 207, 209, 212, 213, 214, 218, 229, 236, 251, 253, 269, 363, 398, 399, 414, 426, 460, 463, 465, 468, 469, 472, 473, 478, 481, 495, 499, 504, 521, 523, 526, 548, 566, 568, 569, 570, 586, 587, 589, 594, 650, 661], "rad2deg": [7, 30, 463], "286": [7, 31, 206], "458": [7, 206], "573": [7, 206, 463], "reciproc": [7, 30, 463], "333": [7, 30, 174, 207, 371, 463, 465, 467, 489], "remaind": [7, 8, 15, 25, 30, 31, 38, 181, 463, 470, 537, 646, 662], "modulu": [7, 30, 208, 463, 662], "sign": [7, 8, 13, 19, 21, 30, 31, 36, 65, 155, 158, 162, 168, 208, 239, 272, 460, 463, 468, 476, 478, 514, 578, 579, 580, 581, 585, 586, 591, 593, 636, 643, 669, 674], "x2_i": [7, 30, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 463, 646], "decim": [7, 30, 209, 463], "94": [7, 10, 17, 30, 33, 40, 144, 209, 210, 275, 294, 447, 462, 466, 570], "256": [7, 209, 210, 467, 482, 484, 486, 602], "0001": [7, 209, 210, 602, 605, 621], "67": [7, 9, 30, 32, 40, 47, 169, 172, 209, 210, 212, 218, 375, 376, 426, 446, 448, 455, 463, 465, 466, 570], "45": [7, 8, 21, 30, 31, 33, 40, 48, 162, 174, 209, 210, 236, 259, 272, 275, 293, 294, 305, 443, 449, 463, 466, 468, 470, 478, 511, 537, 569, 570, 587, 602], "678": [7, 209, 210], "33": [7, 17, 21, 30, 32, 33, 35, 160, 161, 168, 209, 275, 292, 371, 426, 447, 463, 465, 466, 467, 468, 472, 478, 490, 491, 511, 565, 568, 587, 594, 602, 605], "sin": [7, 9, 30, 379, 463, 465, 647, 669], "841": [7, 24, 30, 52, 211, 457, 463], "909": [7, 30, 32, 211, 463], "141": [7, 30, 91, 211, 461, 463], "sinh": [7, 30, 463], "63": [7, 24, 30, 36, 60, 206, 212, 213, 275, 294, 463, 468, 472, 478, 495, 511, 548, 587], "232": [7, 30, 212, 463], "sqrt": [7, 8, 30, 31, 275, 295, 299, 300, 463, 617], "squar": [7, 8, 13, 30, 31, 36, 213, 276, 308, 310, 314, 445, 446, 448, 455, 463, 466, 468, 472, 495, 497, 498, 500, 501, 502, 504, 508, 514, 515, 516, 521, 553], "root": [7, 30, 213, 463, 616, 640, 643, 644, 649, 663, 672], "73": [7, 36, 213, 468, 474, 495, 569, 665], "44": [7, 8, 17, 30, 31, 40, 160, 201, 209, 213, 214, 239, 272, 275, 293, 294, 305, 369, 463, 465, 467, 468, 472, 475, 478, 490, 511, 555, 568, 569, 577, 587], "subtract": [7, 30, 47, 48, 227, 269, 278, 336, 463, 647, 650, 654], "tan": [7, 30, 366, 463, 465, 650, 655, 658, 659, 662, 663, 669], "tanh": [7, 30, 463, 669], "762": [7, 30, 217, 463], "964": [7, 30, 217, 463], "trunc": [7, 30, 463], "025": [7, 218, 463], "trunc_divid": [7, 30, 463], "_arraywithactivationsexperiment": [8, 47], "ep": [8, 13, 16, 31, 36, 39, 104, 220, 267, 276, 281, 311, 342, 343, 461, 468, 473, 509, 512, 566, 620], "outpu": [8, 31, 220, 267], "clamp": [8, 31, 220, 267, 674], "elementwis": [8, 16, 31, 39, 219, 220, 222, 265, 267, 468, 473, 521, 566, 659, 666, 669], "19722438": [8, 31, 220, 267], "38629448": [8, 31, 220, 267], "38629436": [8, 31, 220, 267], "logsigmoid": [8, 31, 267], "31326175": [8, 24, 221, 267], "126928": [8, 31, 221], "01814993": [8, 221], "00004578": [8, 221], "57888985": [8, 221], "31326169": [8, 31, 221, 267], "69314718": [8, 24, 31, 221, 267], "01104775": [8, 221], "prelu": [8, 31, 267], "f": [8, 15, 31, 38, 222, 267, 278, 326, 470, 472, 535, 550, 554, 555, 556, 564, 565, 633, 637, 638, 644, 645, 650, 651, 657, 669, 672, 679], "unidirect": [8, 222, 267], "smaller": [8, 15, 21, 31, 38, 222, 235, 252, 267, 272, 276, 308, 375, 465, 470, 478, 528, 536, 585, 586, 591, 593, 633, 644, 669], "relu6": [8, 31, 267], "rectifi": [8, 24, 31, 54, 56, 57, 223, 225, 267, 457], "unit": [8, 24, 31, 52, 54, 55, 56, 57, 58, 59, 60, 223, 224, 225, 267, 344, 457, 633, 643, 646, 652, 663, 664, 665, 677, 684, 687], "selu": [8, 31, 267], "scale": [8, 12, 16, 31, 33, 35, 39, 147, 148, 224, 249, 267, 272, 275, 276, 281, 296, 297, 313, 342, 343, 450, 462, 466, 467, 473, 490, 493, 494, 566, 602, 604, 605, 617, 618, 621, 683, 685], "11133075": [8, 224, 267], "05070102": [8, 31, 224, 267], "10140204": [8, 224, 267], "15210295": [8, 224, 267], "20280409": [8, 224, 267], "25350523": [8, 224, 267], "30420589": [8, 224, 267], "35490704": [8, 224, 267], "thresholded_relu": [8, 31, 267], "custom": [8, 31, 225, 266, 267, 274, 636, 640, 651, 656, 664, 665, 667, 673, 683, 687, 688, 689], "_arraywithconversionsexperiment": [8, 47], "_arraywithcreationexperiment": [8, 47], "eye_lik": [8, 31, 269], "refer": [8, 15, 21, 22, 31, 33, 38, 44, 45, 74, 178, 192, 226, 232, 233, 261, 269, 272, 276, 278, 309, 326, 443, 444, 460, 463, 466, 468, 470, 478, 479, 498, 522, 535, 592, 594, 595, 596, 618, 633, 641, 642, 643, 644, 646, 647, 651, 652, 658, 659, 660, 661, 662, 663, 664, 665, 677, 678, 683], "elsewher": [8, 31, 74, 226, 269, 460, 475, 577, 643], "_arraywithdata_typeexperiment": [8, 47], "_arraywithdeviceexperiment": [8, 47], "_arraywithelementwiseexperiment": [8, 47], "allclos": [8, 31, 272], "rtol": [8, 13, 31, 36, 235, 252, 272, 468, 509, 512, 597, 599, 664], "atol": [8, 13, 31, 36, 235, 252, 272, 468, 509, 597, 599, 664], "08": [8, 21, 31, 40, 160, 235, 252, 272, 463, 467, 494, 569, 570, 594, 597, 602], "equal_nan": [8, 31, 235, 252, 272], "rel": [8, 10, 13, 15, 20, 27, 31, 33, 36, 38, 43, 47, 77, 235, 252, 272, 276, 308, 444, 447, 449, 450, 451, 466, 468, 470, 477, 499, 509, 512, 520, 532, 536, 582, 584, 597, 599, 644, 649, 651, 664, 667, 683, 685], "toler": [8, 13, 31, 36, 235, 252, 272, 276, 311, 468, 509, 512, 597, 599, 646, 664, 683], "compar": [8, 9, 19, 20, 25, 31, 32, 43, 235, 252, 272, 364, 367, 465, 476, 477, 578, 579, 580, 581, 582, 584, 599, 633, 648, 654, 656, 657, 664, 665, 667, 672, 679, 681, 683, 689, 690], "altern": [8, 31, 235, 247, 250, 252, 254, 255, 258, 259, 264, 265, 272, 633, 642, 643, 649, 662, 663, 672, 686], "given": [8, 9, 14, 15, 17, 25, 31, 32, 33, 37, 38, 40, 47, 48, 51, 53, 65, 72, 78, 79, 97, 98, 99, 100, 101, 117, 136, 144, 146, 147, 148, 149, 151, 154, 235, 240, 241, 249, 250, 252, 255, 258, 263, 272, 275, 276, 277, 278, 281, 282, 291, 292, 293, 294, 298, 299, 300, 302, 303, 304, 305, 308, 311, 316, 317, 324, 325, 331, 339, 341, 344, 345, 346, 347, 348, 350, 383, 413, 414, 421, 443, 444, 447, 449, 450, 451, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 524, 525, 526, 527, 528, 531, 532, 533, 534, 536, 537, 541, 542, 554, 555, 564, 565, 568, 569, 570, 572, 583, 584, 585, 586, 597, 599, 602, 603, 604, 605, 608, 614, 615, 617, 618, 619, 620, 621, 622, 623, 636, 637, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 673, 676, 680, 685, 686, 689, 690], "1e10": [8, 235, 252, 272], "00001e10": [8, 235, 252, 272], "00001e": [8, 235, 272], "005": [8, 235, 252, 272], "deg": [8, 31, 236, 272], "2j": [8, 31, 236, 238, 251, 260, 272, 275, 299, 300], "3j": [8, 30, 31, 187, 236, 238, 260, 272, 463], "35619449": [8, 236, 272], "78539816": [8, 236, 272], "135": [8, 236, 272, 370, 465], "binar": [8, 31, 272], "outcom": [8, 31, 237, 249, 272], "comparison": [8, 31, 237, 272, 468, 517, 656], "conj": [8, 31, 272], "conjug": [8, 13, 31, 36, 238, 272, 275, 276, 282, 295, 306, 311, 348, 468, 506, 510], "copysign": [8, 31, 272], "unsign": [8, 21, 31, 239, 272, 478, 585, 586, 591, 593, 603, 652, 669], "count_nonzero": [8, 31, 272], "keepdim": [8, 13, 15, 18, 21, 22, 25, 31, 36, 38, 41, 44, 45, 240, 258, 272, 287, 360, 361, 362, 363, 468, 470, 475, 478, 479, 507, 523, 542, 573, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 656, 663, 669], "count": [8, 15, 19, 22, 31, 38, 42, 45, 143, 227, 240, 269, 272, 462, 468, 470, 476, 479, 522, 529, 532, 578, 579, 595, 596, 650, 654, 672], "flatten": [8, 9, 13, 15, 18, 19, 31, 32, 36, 38, 41, 42, 240, 258, 272, 276, 278, 287, 309, 333, 338, 358, 360, 361, 362, 363, 375, 379, 465, 468, 470, 475, 476, 503, 511, 523, 529, 534, 536, 573, 574, 578, 579, 580, 581, 597, 599, 616, 633, 662, 667], "left": [8, 13, 18, 20, 31, 36, 41, 43, 166, 240, 258, 272, 275, 276, 278, 287, 301, 310, 327, 360, 361, 362, 363, 375, 463, 465, 468, 475, 477, 500, 501, 507, 516, 521, 573, 583, 643, 644, 646, 649, 651, 652, 654], "total": [8, 21, 25, 31, 44, 48, 151, 227, 240, 269, 272, 462, 475, 478, 576, 592, 594, 633, 637, 638, 644, 652, 653, 654, 665, 667, 672, 673, 677], "diff": [8, 25, 31, 272, 654, 662], "prepend": [8, 31, 241, 272, 468, 470, 506, 531], "append": [8, 13, 25, 31, 166, 241, 272, 463, 468, 470, 499, 506, 531, 633, 651, 656, 665, 669, 672], "differenc": [8, 31, 241, 272], "taken": [8, 13, 31, 36, 241, 272, 468, 499, 651, 657, 663, 666, 674, 684], "prior": [8, 31, 241, 272, 282, 348, 656, 666], "expand": [8, 9, 15, 31, 32, 241, 272, 278, 379, 465, 470, 531, 649, 650], "direct": [8, 31, 241, 247, 254, 259, 264, 272, 278, 327, 328, 337, 477, 584, 642, 647, 649, 663, 667, 673, 674, 676, 679, 683, 684, 687], "except": [8, 9, 15, 17, 22, 25, 31, 32, 36, 40, 45, 93, 241, 272, 282, 287, 347, 361, 362, 374, 400, 416, 428, 434, 461, 465, 468, 470, 474, 475, 479, 512, 529, 531, 539, 568, 569, 570, 576, 595, 596, 597, 600, 619, 633, 644, 645, 646, 647, 651, 652, 655, 657, 658, 662, 663, 667, 671, 677], "th": [8, 31, 241, 272, 276, 287, 309, 363], "discret": [8, 31, 241, 272, 275, 294, 295, 299, 300, 469, 526], "exp2": [8, 31, 272], "power": [8, 9, 13, 31, 32, 36, 47, 48, 168, 177, 205, 234, 242, 244, 269, 272, 388, 417, 427, 463, 465, 468, 472, 508, 521, 553, 617, 671, 672, 673, 683, 685, 689], "fix": [8, 31, 272, 633, 643, 644, 646, 652, 665, 666], "nearest": [8, 31, 158, 209, 243, 272, 275, 287, 302, 363, 463, 667], "toward": [8, 15, 38, 219, 243, 259, 272, 278, 337, 463, 470, 536, 633, 639, 643, 666, 669, 679, 683], "float_pow": [8, 31, 272], "rais": [8, 9, 15, 17, 19, 22, 25, 31, 32, 38, 40, 42, 45, 93, 177, 205, 244, 272, 282, 287, 347, 361, 362, 368, 388, 400, 417, 427, 428, 434, 456, 461, 463, 465, 466, 468, 470, 474, 475, 476, 478, 479, 506, 508, 522, 531, 535, 539, 568, 569, 570, 576, 581, 588, 590, 595, 596, 597, 604, 619, 621, 633, 636, 644, 646, 648, 656, 657, 662, 663, 669, 671], "common": [8, 25, 31, 117, 239, 244, 248, 253, 272, 461, 635, 642, 643, 649, 650, 652, 653, 654, 657, 659, 660, 663, 666, 667, 677, 680, 683, 690], "125": [8, 13, 36, 168, 244, 272, 463, 468, 521], "fmax": [8, 31, 272], "fmin": [8, 31, 272], "fmod": [8, 31, 463], "divis": [8, 9, 10, 31, 32, 33, 168, 174, 180, 181, 208, 219, 278, 323, 389, 418, 426, 443, 444, 449, 463, 465, 466, 467, 480, 487, 488, 621, 659], "frexp": [8, 31, 272], "next": [8, 31, 104, 247, 254, 259, 264, 272, 461, 617, 619, 621, 637, 639, 642, 643, 644, 648, 654, 655, 660, 663, 666, 670, 671, 672, 683, 685], "represent": [8, 9, 25, 31, 32, 48, 89, 90, 104, 107, 131, 132, 155, 158, 164, 167, 169, 198, 247, 254, 259, 264, 272, 365, 430, 458, 461, 462, 463, 465, 602, 604, 605, 676, 681, 682, 684, 688, 689], "gcd": [8, 31, 272], "gradient": [8, 31, 149, 266, 272, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 462, 471, 544, 545, 546, 599, 608, 619, 621, 645, 666, 672, 673, 676, 677, 683], "edge_ord": [8, 31, 249, 272], "r": [8, 13, 25, 31, 36, 249, 266, 272, 274, 445, 466, 468, 470, 513, 542, 643, 644, 645, 661, 664], "estim": [8, 31, 249, 272, 276, 308], "boundari": [8, 17, 31, 40, 249, 272, 275, 302, 474, 570, 683], "note": [8, 13, 15, 19, 31, 36, 38, 117, 192, 208, 209, 226, 227, 232, 233, 249, 269, 272, 275, 276, 278, 295, 310, 326, 369, 461, 463, 465, 468, 470, 476, 478, 500, 501, 514, 516, 535, 539, 579, 581, 589, 639, 642, 643, 644, 647, 649, 652, 654, 655, 662, 663, 664, 665, 666], "over": [8, 13, 21, 22, 23, 28, 31, 36, 44, 45, 46, 249, 258, 272, 275, 278, 285, 289, 290, 292, 304, 326, 334, 335, 338, 352, 442, 465, 468, 473, 474, 478, 479, 507, 518, 522, 523, 566, 570, 588, 589, 590, 591, 592, 593, 594, 595, 596, 620, 626, 633, 635, 637, 643, 644, 648, 654, 655, 661, 662, 664, 669, 671, 677, 681, 683], "partial": [8, 25, 31, 249, 272, 287, 362, 448, 466, 468, 505, 619, 644, 649, 667], "diment": [8, 249, 272], "40": [8, 9, 31, 32, 40, 44, 48, 168, 172, 213, 249, 253, 272, 275, 292, 294, 304, 375, 377, 383, 414, 426, 442, 445, 463, 465, 466, 468, 472, 478, 504, 511, 556, 569, 587, 591, 651], "80": [8, 31, 249, 272, 276, 315, 468, 472, 478, 511, 558, 587, 636, 656], "72": [8, 17, 31, 33, 177, 178, 249, 272, 275, 294, 447, 463, 466, 468, 478, 511, 569, 587], "33333333": [8, 31, 207, 249, 272, 463], "hypot": [8, 31, 272], "hypotenus": [8, 250, 272], "4031": [8, 250, 272], "8102": [8, 250, 272], "imaginari": [8, 31, 251, 272, 276, 311, 654], "4j": [8, 31, 251, 272], "isclos": [8, 31, 272, 646], "hold": [8, 9, 13, 21, 31, 36, 44, 235, 252, 258, 272, 287, 323, 340, 362, 413, 414, 465, 468, 478, 507, 586, 600, 633, 672, 684], "lcm": [8, 31, 272], "60": [8, 21, 31, 32, 40, 44, 236, 253, 272, 383, 399, 414, 426, 442, 465, 468, 472, 478, 511, 550, 568, 585, 587, 591, 651], "ldexp": [8, 31, 272], "lerp": [8, 31, 272], "end": [8, 31, 65, 162, 255, 272, 278, 326, 336, 460, 463, 616, 633, 643, 644, 648, 651, 662, 666, 667, 668, 676, 677, 681, 686], "weight": [8, 10, 12, 31, 33, 35, 229, 255, 269, 272, 275, 276, 277, 287, 298, 308, 316, 358, 443, 444, 447, 449, 450, 451, 466, 467, 491, 492, 494, 617, 618, 619, 621, 633, 650, 659, 669, 673, 674, 682], "interpol": [8, 31, 255, 272, 275, 287, 363, 667, 683], "logaddexp2": [8, 31, 272], "169925": [8, 31, 256, 272], "nan_to_num": [8, 31, 272], "posinf": [8, 31, 257, 272], "neginf": [8, 31, 257, 272], "veri": [8, 31, 235, 252, 257, 272, 468, 514, 604, 635, 636, 641, 642, 643, 644, 649, 650, 652, 653, 654, 656, 658, 659, 662, 663, 664, 665, 666, 667, 670, 672, 673, 674, 677, 679, 680, 681, 683, 684, 685, 688, 689, 690], "5e": [8, 10, 31, 257, 259, 272, 449, 466], "nansum": [8, 31, 272], "accumul": [8, 31, 258, 272], "nextaft": [8, 31, 272], "0e": [8, 10, 31, 33, 259, 272, 449, 466], "4013e": [8, 31, 259, 272], "4028e": [8, 31, 259, 272], "hand": [8, 260, 633, 646, 649, 652, 659, 665, 677], "signbit": [8, 31, 272], "sinc": [8, 31, 272, 633, 636, 643, 644, 646, 647, 650, 651, 656, 662, 663, 677, 683, 689], "637": [8, 31, 262, 272], "212": [8, 12, 31, 262, 272, 491], "0909": [8, 31, 262, 272], "trapz": [8, 30, 272], "dx": [8, 30, 263, 272], "apart": [8, 30, 263, 272], "singl": [8, 17, 25, 30, 40, 252, 263, 272, 276, 282, 315, 347, 433, 441, 445, 465, 466, 474, 476, 568, 569, 570, 578, 602, 637, 642, 643, 644, 646, 649, 650, 651, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 672, 673, 674, 677], "trapezoid": [8, 30, 263, 272], "xlogi": [8, 31, 272], "0986": [8, 31, 264, 272], "3863": [8, 31, 264, 272], "0000": [8, 31, 228, 229, 231, 264, 269, 272, 276, 278, 314, 329], "zeta": [8, 31, 272], "q": [8, 12, 13, 31, 35, 36, 265, 272, 276, 287, 310, 363, 467, 468, 472, 494, 500, 501, 513, 555, 643, 644, 645, 664, 677], "0369": [8, 31, 265, 272], "2021": [8, 31, 265, 272, 633], "_arraywithgeneralexperiment": [8, 47], "_arraywithgradientsexperiment": [8, 47], "_arraywithimageexperiment": [8, 47], "_arraywithlayersexperiment": [8, 47], "adaptive_avg_pool1d": [8, 31, 275], "1d": [8, 31, 275, 276, 278, 289, 294, 296, 297, 308, 318, 338, 618], "adapt": [8, 31, 33, 275, 289, 290, 450, 466, 621, 636], "averag": [8, 10, 31, 33, 275, 276, 289, 290, 291, 292, 293, 308, 443, 444, 449, 466, 471, 544, 545, 617], "pool": [8, 31, 275, 289, 290, 291, 292, 293, 303, 304, 305], "signal": [8, 31, 275, 289, 290, 294, 295, 682, 683], "sever": [8, 31, 275, 289, 290, 643, 644, 666, 677, 681, 687], "plane": [8, 31, 275, 278, 289, 290, 337], "l_in": [8, 31, 275, 289], "batch": [8, 9, 13, 25, 31, 32, 36, 147, 148, 275, 281, 289, 290, 295, 302, 342, 343, 379, 382, 383, 442, 462, 465, 467, 468, 471, 473, 491, 505, 523, 544, 545, 546, 566, 620, 633, 650, 659, 672, 681], "spatial": [8, 12, 31, 35, 275, 281, 289, 290, 302, 342, 343, 467, 480, 481, 482, 483, 485, 487, 489, 676], "Will": [8, 31, 275, 289, 290, 616, 626, 677], "l_out": [8, 31, 275, 289], "adaptive_avg_pool2d": [8, 31, 275], "2d": [8, 31, 226, 269, 275, 276, 278, 290, 296, 308, 319, 618, 633, 659, 663, 667], "h_in": [8, 31, 275, 290], "w_in": [8, 31, 275, 290], "s_0": [8, 31, 275, 290], "s_1": [8, 31, 275, 290], "avg_pool1d": [8, 31, 275], "kernel": [8, 12, 31, 35, 275, 291, 292, 293, 303, 304, 305, 467, 492, 667, 669, 677, 683, 686, 687], "stride": [8, 12, 31, 35, 275, 278, 291, 292, 293, 303, 304, 305, 317, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618, 662, 683], "pad": [8, 12, 15, 31, 35, 38, 275, 278, 291, 292, 293, 294, 295, 299, 300, 302, 303, 304, 305, 379, 465, 467, 470, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 530, 543, 618, 633], "data_format": [8, 12, 31, 35, 275, 291, 292, 293, 296, 297, 303, 304, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618, 633], "nwc": [8, 12, 31, 35, 275, 291, 296, 303, 467, 480, 481, 482, 487, 488, 618], "count_include_pad": [8, 31, 275, 291, 292, 293], "ceil_mod": [8, 31, 275, 291, 292, 304], "batch_siz": [8, 12, 17, 31, 35, 40, 275, 291, 292, 293, 303, 304, 305, 467, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 567, 633, 672], "d_in": [8, 12, 31, 35, 275, 291, 292, 293, 295, 299, 300, 303, 304, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489], "window": [8, 12, 31, 35, 228, 229, 230, 231, 234, 269, 275, 291, 292, 293, 295, 303, 304, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618, 639, 644, 688], "slide": [8, 12, 31, 35, 275, 291, 292, 293, 303, 304, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618], "algorithm": [8, 12, 24, 31, 35, 52, 275, 291, 292, 293, 302, 303, 304, 305, 468, 481, 483, 484, 485, 486, 489, 514, 618, 652, 663, 667, 677, 683, 685, 687], "per": [8, 12, 31, 35, 275, 291, 292, 293, 303, 304, 305, 481, 483, 484, 485, 486, 489, 618, 644, 651, 663, 672], "ncw": [8, 12, 31, 35, 275, 291, 296, 303, 467, 480, 481, 482, 487, 488, 618], "arang": [8, 13, 21, 31, 36, 78, 275, 276, 291, 292, 293, 299, 300, 303, 304, 305, 307, 315, 328, 409, 442, 460, 465, 468, 478, 507, 523, 587, 633, 652, 662, 690], "reshap": [8, 12, 13, 15, 25, 31, 35, 36, 38, 275, 276, 278, 291, 292, 293, 296, 303, 304, 305, 307, 315, 326, 442, 465, 467, 468, 470, 483, 485, 489, 507, 523, 613, 662, 663, 665, 667, 669, 671, 674], "avg_pool2d": [8, 31, 275], "nhwc": [8, 12, 31, 35, 275, 292, 304, 467, 480, 483, 484, 487, 488, 489, 618], "nchw": [8, 12, 31, 35, 275, 292, 304, 467, 480, 483, 484, 487, 488, 489, 618, 633], "max_pool2d": [8, 31, 275, 292], "46": [8, 17, 31, 35, 40, 79, 192, 210, 228, 269, 275, 292, 293, 304, 305, 460, 463, 472, 491, 548, 568, 569], "avg_pool3d": [8, 31, 275], "ndhwc": [8, 12, 31, 35, 275, 293, 297, 305, 467, 480, 485, 486, 487, 488, 618], "d": [8, 12, 13, 27, 31, 32, 35, 36, 79, 118, 232, 233, 269, 275, 276, 278, 282, 291, 292, 293, 299, 300, 303, 304, 305, 309, 315, 320, 321, 325, 327, 338, 346, 367, 461, 467, 468, 472, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 498, 499, 507, 511, 521, 550, 554, 555, 556, 564, 565, 633, 636, 637, 638, 643, 645, 650, 661, 665, 667, 672, 679], "volum": [8, 12, 31, 35, 275, 293, 295, 299, 300, 305, 467, 485, 486, 639], "filter": [8, 12, 31, 35, 230, 231, 269, 275, 293, 305, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618, 633], "ncdhw": [8, 12, 31, 35, 275, 293, 297, 305, 467, 480, 485, 486, 487, 488, 618], "43": [8, 40, 48, 168, 275, 293, 463, 474, 475, 569, 570, 577], "dct": [8, 31, 275, 672], "norm": [8, 9, 13, 31, 32, 36, 275, 276, 294, 295, 298, 299, 300, 307, 311, 344, 345, 370, 371, 400, 465, 468, 507, 523, 566, 621, 666], "liter": [8, 13, 31, 36, 275, 278, 294, 302, 336, 468, 477, 507, 523, 583, 657, 667], "lenght": [8, 31, 228, 230, 231, 234, 275, 294], "truncat": [8, 31, 275, 294, 299, 300, 416, 465, 616, 656, 672], "larger": [8, 15, 21, 31, 38, 44, 104, 275, 294, 461, 470, 478, 528, 536, 592, 594, 665, 667, 690], "ortho": [8, 31, 275, 294, 295, 299, 300], "102": [8, 31, 40, 275, 294, 568], "406": [8, 31, 275, 294, 370, 465], "dft": [8, 31, 275], "onesid": [8, 31, 275, 295], "dft_length": [8, 31, 275, 295], "backward": [8, 22, 31, 45, 208, 275, 295, 299, 300, 463, 468, 479, 522, 595, 596, 677], "fourier": [8, 275, 295, 299, 300, 379, 465], "fft": [8, 31, 275, 295, 642, 683], "n_fft": [8, 275, 295], "becaus": [8, 275, 295, 643, 644, 647, 648, 649, 650, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 673, 674, 677, 683, 686, 689], "satisfi": [8, 275, 276, 295, 311, 654], "symmetri": [8, 275, 295], "possibl": [8, 15, 38, 275, 278, 295, 320, 409, 454, 465, 466, 467, 470, 478, 490, 535, 588, 590, 633, 636, 638, 642, 643, 644, 646, 650, 652, 654, 655, 659, 661, 662, 663, 664, 665, 667, 669, 672, 676, 677, 681, 683, 689], "fast": [8, 275, 295, 683], "rfft": [8, 275, 295], "batch_idx": [8, 275, 295], "signal_dim1": [8, 275, 295], "signal_dim2": [8, 275, 295], "signal_dimn": [8, 275, 295], "signal_dim": [8, 275, 295], "embed": [8, 31, 275, 683], "max_norm": [8, 9, 31, 32, 275, 298, 370, 371, 465], "dim": [8, 25, 27, 31, 82, 275, 278, 299, 300, 326, 460, 467, 480, 487, 488, 604, 618, 633, 652, 656, 663, 664, 667], "ifft": [8, 31, 275, 299], "pi": [8, 31, 275, 299, 300, 458], "44509285e": [8, 31, 275, 299], "14423775e": [8, 31, 275, 299], "17j": [8, 31, 275, 299, 300], "00000000e": [8, 31, 32, 275, 299, 300, 379], "00": [8, 9, 31, 32, 36, 178, 275, 294, 299, 300, 379, 463, 465, 468, 502, 602, 665], "11483250e": [8, 31, 275, 299], "16j": [8, 31, 275, 299, 300], "33486982e": [8, 31, 275, 299], "22464680e": [8, 31, 275, 299], "95799250e": [8, 31, 275, 299], "66951701e": [8, 31, 275, 299], "30636606e": [8, 31, 275, 300], "43029718e": [8, 31, 275, 300], "18j": [8, 31, 275, 299, 300], "53080850e": [8, 31, 275, 300], "58689626e": [8, 31, 275, 300], "24474906e": [8, 31, 275, 300], "91858728e": [8, 31, 275, 300], "01435406e": [8, 31, 275, 300], "mode": [8, 13, 25, 31, 36, 149, 158, 275, 278, 302, 336, 338, 390, 415, 416, 419, 421, 422, 435, 436, 437, 439, 440, 462, 463, 465, 468, 513, 639, 643, 644, 650, 654, 667, 677, 683, 686], "scale_factor": [8, 31, 275, 302, 667], "recompute_scale_factor": [8, 31, 275, 302, 667], "align_corn": [8, 31, 275, 302, 667], "antialia": [8, 31, 275, 302, 667], "down": [8, 31, 275, 278, 302, 328, 616, 643, 665, 678, 683, 689], "channel": [8, 9, 12, 31, 32, 35, 47, 48, 275, 281, 296, 297, 302, 342, 343, 375, 379, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 489, 614, 615, 617, 618, 619, 620, 621, 622, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "height": [8, 9, 12, 31, 32, 35, 275, 302, 375, 465, 467, 483, 484, 485, 486, 489, 616, 672], "width": [8, 9, 12, 31, 32, 35, 275, 276, 278, 302, 311, 336, 375, 465, 467, 481, 482, 483, 484, 485, 486, 489], "bilinear": [8, 31, 275, 302, 667], "trilinear": [8, 31, 275, 302, 667], "nearest_exact": [8, 31, 275, 302, 667], "tf_area": [8, 31, 275, 302, 667], "bicub": [8, 31, 275, 302, 667], "mitchellcub": [8, 31, 275, 302, 667], "lanczos3": [8, 31, 275, 302, 667], "lanczos5": [8, 31, 275, 302, 667], "gaussian": [8, 31, 52, 275, 302, 457, 667], "overwrit": [8, 25, 31, 149, 275, 302, 462, 644, 662, 663, 669], "corner": [8, 31, 275, 302, 643, 644, 663], "pixel": [8, 31, 275, 302], "align": [8, 25, 31, 275, 276, 302, 309, 643, 644, 663, 669, 671, 678, 689], "thu": [8, 31, 168, 205, 208, 275, 276, 302, 310, 463, 468, 500, 501, 639, 642, 651, 656, 663], "antialias": [8, 31, 275, 302], "downsampl": [8, 31, 275, 302], "resiz": [8, 31, 275, 302, 667], "max_pool1d": [8, 31, 275], "dilat": [8, 12, 31, 35, 275, 304, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 618], "max_pool3d": [8, 31, 275, 293], "linear_algebra": [8, 13, 31, 36, 468, 666], "_arraywithlinearalgebraexperiment": [8, 47], "adjoint": [8, 13, 31, 36, 276, 468, 504, 515, 516], "cond": [8, 31, 61, 63, 276, 459, 677], "p": [8, 9, 13, 31, 32, 36, 80, 242, 272, 276, 281, 307, 345, 370, 371, 460, 465, 468, 472, 507, 523, 555, 618, 643, 644, 645], "933034373659268": [8, 307], "cov": [8, 31, 276], "rowvar": [8, 31, 276, 287, 308, 359], "bia": [8, 12, 31, 35, 39, 276, 308, 409, 465, 467, 473, 480, 487, 488, 491, 492, 566, 618, 669, 673], "ddof": [8, 31, 276, 308], "fweight": [8, 31, 276, 308], "aweight": [8, 31, 276, 308], "row": [8, 31, 74, 232, 233, 269, 276, 278, 285, 308, 328, 341, 352, 359, 460, 468, 474, 475, 507, 515, 516, 521, 567, 576, 617], "column": [8, 13, 31, 36, 74, 232, 233, 269, 276, 278, 285, 308, 310, 327, 328, 331, 352, 359, 460, 468, 500, 501, 507, 513, 515, 516, 521, 617], "overridden": [8, 31, 276, 308, 621, 647], "unbias": [8, 21, 31, 44, 276, 308, 478, 594], "even": [8, 31, 205, 209, 276, 278, 308, 336, 463, 636, 637, 643, 644, 646, 651, 652, 653, 655, 658, 659, 662, 663, 664, 667, 671, 672, 673, 674, 677, 689], "frequenc": [8, 9, 31, 32, 276, 308, 379, 465, 644], "repeat": [8, 9, 15, 31, 32, 38, 276, 308, 377, 465, 470, 541, 639, 644, 647, 648, 654, 655, 657, 662, 665], "typic": [8, 31, 235, 252, 272, 276, 308, 477, 583, 646, 659, 682, 690], "assign": [8, 31, 276, 308, 644, 648, 652, 657, 662, 671], "probabl": [8, 12, 17, 31, 35, 40, 275, 276, 282, 287, 296, 297, 308, 346, 362, 467, 474, 490, 567, 604, 617, 618, 633, 637, 649, 665], "precis": [8, 13, 31, 36, 104, 213, 244, 272, 276, 308, 311, 461, 463, 468, 514, 523, 651, 652, 663, 667, 687], "covari": [8, 31, 276, 308], "diagflat": [8, 31, 276, 313, 314], "offset": [8, 13, 16, 31, 36, 39, 227, 269, 276, 281, 309, 342, 343, 468, 473, 499, 520, 566, 607], "padding_valu": [8, 31, 276, 309], "right_left": [8, 31, 276, 309], "num_row": [8, 31, 276, 309], "num_col": [8, 31, 276, 309], "eig": [8, 13, 31, 276, 468, 501, 502], "37228132": [8, 31, 276, 310, 312, 500], "82456484": [8, 310, 500], "41597356": [8, 310, 500], "56576746": [8, 310, 500], "90937671": [8, 310, 500], "eigh_tridiagon": [8, 31, 276], "eigvals_onli": [8, 31, 276, 311], "select": [8, 21, 31, 44, 276, 278, 311, 315, 338, 478, 585, 586, 642, 643, 644, 651, 662, 665, 669, 671, 674, 677, 683, 686, 687], "select_rang": [8, 31, 276, 311], "tol": [8, 31, 276, 311], "eigenvalu": [8, 13, 31, 36, 276, 310, 311, 312, 468, 500, 501, 502], "eigenvector": [8, 31, 276, 310, 311, 468, 500, 501], "string": [8, 12, 25, 31, 35, 51, 53, 89, 90, 102, 109, 130, 131, 132, 133, 134, 136, 144, 150, 151, 154, 276, 278, 311, 336, 373, 457, 461, 462, 465, 467, 468, 480, 481, 482, 483, 485, 487, 489, 502, 599, 603, 616, 648, 649, 651, 652, 653, 656, 657, 663, 669, 672], "v": [8, 12, 20, 27, 31, 35, 43, 79, 276, 311, 467, 477, 493, 494, 583, 599, 616, 618, 619, 620, 621, 622, 633, 639, 640, 643, 644, 645, 649, 669, 672, 673, 674], "interv": [8, 17, 22, 31, 40, 45, 65, 78, 79, 276, 311, 460, 468, 470, 474, 479, 522, 528, 531, 539, 568, 570, 595, 596, 644], "togeth": [8, 25, 31, 235, 252, 272, 276, 311, 622, 633, 636, 647, 650, 657, 662, 663, 666, 667, 673, 674, 677, 681, 683, 684, 689], "cluster": [8, 31, 276, 311, 677, 683], "converg": [8, 31, 276, 311, 637], "li": [8, 31, 276, 287, 311, 363, 635], "_2": [8, 31, 276, 311], "machin": [8, 13, 31, 36, 104, 107, 276, 311, 461, 468, 509, 512, 636, 643, 646, 659, 676, 678, 681, 683, 685, 686, 687, 688, 689], "eig_val": [8, 31, 276, 311], "decreas": [8, 31, 276, 311, 604], "eig_vector": [8, 31, 276, 311], "38196": [8, 276, 311], "61803": [8, 276, 311], "eigval": [8, 31, 276], "kron": [8, 31, 276, 314, 690], "matrix_exp": [8, 31, 276], "7183": [8, 31, 276, 314], "3891": [8, 31, 276, 314], "multi_dot": [8, 31, 276], "49": [8, 17, 31, 36, 213, 275, 276, 294, 315, 463, 478, 521, 569, 587], "148": [8, 30, 31, 177, 276, 315], "loss": [8, 31, 316, 525, 526, 527, 633, 651, 652, 659, 663, 666, 672, 673, 674, 683, 690], "_arraywithlossesexperiment": [8, 47], "manipul": [8, 31, 635, 662, 663, 666, 667, 669, 674, 676, 683], "_arraywithmanipulationexperiment": [8, 47], "as_strid": [8, 31, 278], "nativeshap": [8, 12, 15, 17, 31, 38, 40, 72, 76, 83, 87, 278, 282, 317, 325, 346, 347, 348, 350, 414, 424, 429, 431, 460, 465, 467, 470, 474, 480, 482, 484, 486, 488, 535, 568, 569, 570], "byte": [8, 31, 32, 47, 227, 269, 278, 317, 408, 465, 657, 688, 689], "atleast_1d": [8, 31, 278], "ari": [8, 31, 278, 318, 319, 320, 323, 330, 340], "cannot": [8, 318, 319, 320, 644, 646, 648, 652, 663, 669, 674, 689], "ndim": [8, 13, 18, 36, 41, 47, 278, 318, 319, 320, 442, 465, 468, 475, 513, 516, 576, 613, 650, 656], "made": [8, 15, 31, 276, 278, 313, 318, 319, 320, 539, 636, 639, 642, 644, 646, 647, 650, 651, 656, 661, 662, 663, 666, 667, 669, 671, 683], "a1": [8, 32, 74, 318, 319, 320, 367, 460], "a2": [8, 318, 319, 320], "atleast_2d": [8, 31, 278], "atleast_3d": [8, 31, 278], "view": [8, 15, 31, 47, 75, 278, 320, 333, 337, 460, 643, 644, 656, 683], "three": [8, 80, 278, 320, 460, 643, 644, 650, 651, 654, 663, 665, 667, 668, 669, 684, 689], "concat_from_sequ": [8, 31, 278], "input_sequ": [8, 31, 278, 322], "new_axi": [8, 31, 278, 322, 674], "insert": [8, 18, 31, 41, 278, 322, 470, 472, 475, 477, 531, 552, 573, 583, 651], "concaten": [8, 9, 15, 31, 36, 278, 322, 375, 379, 465, 470, 511, 529, 664, 667, 669, 672], "do": [8, 9, 25, 31, 32, 208, 278, 287, 322, 362, 363, 400, 463, 465, 472, 547, 554, 557, 558, 559, 564, 633, 637, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 669, 671, 672, 673, 674, 677, 678, 684, 689, 690], "stack": [8, 13, 15, 25, 31, 36, 38, 47, 85, 86, 276, 278, 310, 322, 324, 331, 341, 394, 416, 422, 440, 460, 465, 468, 470, 472, 497, 499, 500, 501, 502, 504, 506, 508, 509, 510, 512, 513, 514, 516, 517, 520, 547, 557, 558, 618, 633, 641, 646, 662, 669, 679, 681, 688, 689], "dsplit": [8, 31, 278], "indices_or_sect": [8, 31, 278, 323, 330, 340], "split": [8, 15, 25, 31, 38, 147, 148, 149, 247, 278, 323, 330, 340, 375, 409, 462, 465, 467, 470, 480, 487, 488, 493, 540, 599, 633, 638, 644, 651, 668, 669, 677, 690], "3rd": [8, 31, 278, 323], "dstack": [8, 31, 278], "start_dim": [8, 31, 278, 326, 633], "end_dim": [8, 31, 278, 326, 633], "read": [8, 15, 25, 31, 38, 227, 269, 278, 326, 470, 535, 642, 643, 649, 651, 665, 667, 683], "fastest": [8, 15, 31, 38, 276, 278, 315, 326, 470, 535], "back": [8, 15, 31, 38, 278, 326, 415, 435, 465, 470, 535, 617, 619, 621, 636, 643, 644, 647, 652, 656, 660, 661, 668, 677, 681, 685], "slowest": [8, 15, 31, 38, 278, 326, 470, 535], "fortran": [8, 15, 31, 38, 278, 326, 470, 535, 683, 687], "layout": [8, 15, 31, 38, 278, 326, 470, 535, 648, 663, 667], "fliplr": [8, 31, 278, 662], "flip": [8, 15, 31, 38, 165, 278, 327, 328, 463, 470, 662, 671, 672, 674], "revers": [8, 9, 13, 21, 31, 36, 44, 47, 48, 278, 327, 328, 374, 465, 468, 470, 478, 521, 532, 585, 586, 642, 650, 651, 652, 654, 655, 662, 663, 667, 674, 677], "diag": [8, 13, 31, 36, 278, 327, 328, 468, 669], "flipud": [8, 31, 278, 662], "heavisid": [8, 31, 278], "step": [8, 10, 27, 31, 33, 65, 78, 278, 329, 443, 444, 447, 449, 450, 451, 460, 466, 471, 544, 545, 546, 616, 621, 633, 637, 639, 642, 643, 644, 647, 648, 650, 651, 652, 653, 654, 661, 663, 665, 669, 672, 673, 674, 676, 683], "5000": [8, 278, 329, 468, 504], "hsplit": [8, 31, 278], "horizont": [8, 31, 278, 330, 375, 465], "hstack": [8, 31, 278], "vstack": [8, 31, 278, 331], "i0": [8, 31, 278], "modifi": [8, 25, 31, 278, 287, 332, 336, 362, 642, 643, 644, 646, 648, 649, 652, 653, 655, 657, 659, 662, 664, 665, 666, 669], "bessel": [8, 21, 31, 44, 230, 269, 278, 332, 478, 592, 594], "kind": [8, 21, 31, 104, 107, 108, 205, 332, 362, 461, 463, 478, 585, 586, 591, 593, 602, 603, 641, 663, 665, 667, 669, 677], "26606588": [8, 31, 278, 332], "2795853": [8, 31, 278, 332], "88079259": [8, 31, 278, 332], "moveaxi": [8, 31, 278], "destin": [8, 31, 278, 333], "unstack": [8, 15, 25, 38, 333, 470, 650, 669, 672, 690], "reorder": [8, 15, 31, 38, 278, 333, 375, 465, 470, 532], "uniqu": [8, 9, 19, 31, 32, 42, 278, 333, 336, 406, 465, 471, 472, 476, 544, 545, 546, 549, 553, 578, 579, 580, 581, 604, 633, 635, 646, 650, 659, 663, 664, 667, 677, 686], "pad_width": [8, 15, 31, 38, 278, 336, 470, 530, 543], "stat_length": [8, 31, 278, 336], "constant_valu": [8, 31, 278, 336], "end_valu": [8, 31, 278, 336], "reflect_typ": [8, 31, 278, 336], "rot90": [8, 31, 278, 662], "rotat": [8, 31, 278, 337, 676], "take_along_axi": [8, 31, 278], "extract": [8, 31, 278, 338, 663, 666, 679, 683, 684, 689], "One": [8, 9, 15, 17, 31, 32, 38, 40, 278, 318, 319, 320, 336, 338, 376, 465, 470, 474, 535, 568, 647, 650, 652, 654, 659, 664, 665, 669, 671, 672], "drop": [8, 31, 278, 338, 617, 643, 677], "how": [8, 31, 278, 338, 616, 617, 618, 619, 633, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 679, 683], "bound": [8, 31, 278, 338, 602, 656, 663, 665, 669, 689], "arr": [8, 9, 28, 31, 112, 278, 338, 414, 461, 652, 653], "top_k": [8, 31, 278], "largest": [8, 25, 31, 104, 107, 278, 339, 461, 468, 507, 516, 676], "top": [8, 15, 31, 278, 339, 375, 465, 529, 616, 633, 643, 644, 652, 663, 665, 667, 672, 673, 683, 687], "retun": [8, 31, 278, 339], "smallest": [8, 25, 31, 104, 107, 170, 278, 339, 461, 463, 468, 507, 602, 604], "name": [8, 13, 19, 23, 36, 42, 46, 51, 53, 276, 278, 310, 339, 365, 366, 457, 465, 468, 476, 500, 501, 505, 513, 514, 516, 521, 578, 579, 580, 599, 608, 626, 628, 642, 643, 644, 648, 649, 650, 651, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 669, 672, 674, 683], "vsplit": [8, 31, 278], "vertic": [8, 31, 278, 340, 341, 375, 465, 644], "_arraywithnormsexperiment": [8, 47], "batch_norm": [8, 31, 281], "varianc": [8, 21, 31, 44, 281, 342, 343, 478, 594, 617], "momentum": [8, 31, 281, 342, 343, 636], "broadcastbl": [8, 31, 281, 342, 343], "present": [8, 25, 31, 238, 272, 281, 342, 343, 635, 642, 644, 650, 652, 653, 658, 662, 669, 680, 681, 690], "avoid": [8, 31, 178, 192, 278, 281, 320, 342, 343, 369, 463, 465, 604, 605, 643, 644, 648, 649, 650, 651, 652, 656, 657, 660, 663, 665, 666, 667, 683], "running_mean": [8, 31, 281, 342, 343], "running_var": [8, 31, 281, 342, 343], "instance_norm": [8, 31, 281], "l2_normal": [8, 31, 281, 345], "l2": [8, 13, 36, 281, 344, 345, 468, 523, 650], "whole": [8, 281, 344, 345, 644, 649], "4472": [8, 281, 344, 345], "8944": [8, 281, 344, 345], "lp_normal": [8, 31, 281], "lp": [8, 281, 345], "_arraywithrandomexperiment": [8, 47], "bernoulli": [8, 31, 275, 282, 296, 297], "seed": [8, 12, 17, 19, 25, 31, 35, 40, 282, 346, 347, 348, 349, 350, 467, 474, 476, 490, 567, 568, 569, 570, 572, 578, 608, 615, 664, 665], "event": [8, 31, 282, 346, 665], "entri": [8, 15, 25, 31, 38, 42, 78, 278, 282, 327, 328, 346, 460, 470, 472, 537, 560, 578, 643, 651, 665, 683], "parameter": [8, 17, 31, 40, 282, 346, 347, 349, 350, 474, 567, 569, 570], "distribut": [8, 14, 17, 31, 37, 40, 275, 277, 282, 296, 297, 316, 346, 347, 348, 349, 350, 469, 474, 525, 526, 527, 567, 568, 569, 570, 572, 617, 618, 619, 642, 651, 653, 677, 683, 686], "prob": [8, 12, 31, 35, 40, 275, 282, 296, 297, 346, 467, 474, 490, 567, 618, 633], "odd": [8, 31, 205, 278, 282, 336, 346, 463, 641, 646], "g": [8, 17, 19, 21, 23, 31, 40, 46, 90, 118, 131, 282, 346, 347, 348, 350, 461, 462, 472, 474, 476, 478, 550, 554, 556, 564, 568, 569, 570, 578, 579, 580, 581, 585, 586, 588, 590, 591, 593, 617, 637, 638, 642, 643, 645, 646, 650, 661, 663, 665, 669, 677, 678, 679], "drawn": [8, 17, 31, 40, 282, 346, 347, 348, 349, 350, 474, 567, 568, 569, 570, 602, 603, 604, 617, 665], "dirichlet": [8, 31, 282], "shuffl": [8, 17, 25, 31, 40, 348, 474], "10598304": [8, 282, 348], "21537054": [8, 282, 348], "67864642": [8, 282, 348], "48006698": [8, 282, 348], "07472073": [8, 282, 348], "44521229": [8, 282, 348], "55479872": [8, 282, 348], "05426367": [8, 282, 348], "39093761": [8, 282, 348], "19531053": [8, 282, 348], "51675832": [8, 282, 348], "28793114": [8, 282, 348], "12315625": [8, 282, 348], "29823365": [8, 282, 348], "5786101": [8, 282, 348], "15564976": [8, 282, 348], "50542368": [8, 282, 348], "33892656": [8, 282, 348], "1325352": [8, 282, 348], "44439589": [8, 282, 348], "42306891": [8, 282, 348], "gamma": [8, 16, 39, 282, 473, 566], "poisson": [8, 31, 282], "rate": [8, 10, 31, 33, 282, 350, 444, 447, 449, 450, 451, 466, 471, 544, 545, 546, 618, 621, 651], "paramt": [8, 350, 472, 554, 564], "lam": [8, 31, 282, 350], "_arraywithsearchingexperiment": [8, 47], "unravel_index": [8, 31, 283], "unravel": [8, 31, 283, 351], "_arraywithsetexperiment": [8, 47], "sort": [8, 25, 31, 48, 263, 272, 276, 287, 310, 352, 353, 362, 468, 500, 501, 516, 517, 582, 583, 604, 633, 641, 651, 666], "_arraywithsortingexperiment": [8, 47], "lexsort": [8, 31, 285], "indirectli": [8, 31, 285, 352], "msort": [8, 31, 285], "statist": [8, 31, 46, 278, 336, 631, 642, 652, 665, 666, 683], "_arraywithstatisticalexperiment": [8, 47], "bincount": [8, 31, 287], "minlength": [8, 31, 287, 358], "alreadi": [8, 25, 31, 170, 179, 209, 218, 278, 287, 319, 320, 336, 358, 362, 463, 468, 503, 511, 633, 642, 643, 644, 648, 650, 652, 658, 662, 663, 667, 677, 683, 685, 690], "bin": [8, 31, 358, 639, 643, 644, 646, 650], "corrcoef": [8, 31, 287], "relationship": [8, 31, 359, 617], "median": [8, 31, 278, 287, 336, 362, 663], "nanmean": [8, 31, 287], "anyth": [8, 31, 287, 361, 362, 644, 665, 666, 683, 684], "sub": [8, 13, 15, 25, 26, 30, 31, 32, 36, 38, 48, 200, 276, 278, 287, 311, 323, 330, 340, 361, 362, 468, 470, 471, 499, 537, 544, 545, 546, 616, 642, 644, 645, 650, 656, 663, 664, 665, 671, 672, 673, 679], "6666666666666665": [8, 31, 287, 361], "nanmedian": [8, 31, 287], "overwrite_input": [8, 31, 287, 362], "save": [8, 25, 31, 287, 362, 395, 423, 462, 465, 619, 637, 639, 651, 657, 665, 677, 682], "content": [8, 25, 31, 287, 362, 642, 649, 662, 669, 672], "treat": [8, 25, 31, 258, 272, 278, 287, 338, 362, 599, 661, 665, 670, 674], "undefin": [8, 31, 278, 287, 336, 362, 657, 661], "fulli": [8, 31, 287, 362, 618, 633, 637, 647, 652, 658, 661, 662, 667, 669, 670, 671, 672, 673, 674, 677, 681, 682, 683, 689, 690], "quantil": [8, 31, 287], "inclus": [8, 31, 65, 287, 363, 460, 474, 568, 638, 648, 662, 667], "higher": [8, 31, 278, 287, 318, 319, 320, 363, 617, 668, 669, 674, 677, 680, 683, 684, 687, 689, 690], "midpoint": [8, 31, 287, 363], "fraction": [8, 31, 287, 363, 467, 490], "surround": [8, 31, 287, 363, 667], "whichev": [8, 31, 287, 363], "_arraywithutilityexperiment": [8, 47], "_arraywithgener": [9, 47], "all_equ": [9, 32, 465], "equality_matrix": [9, 32, 364, 465], "array_equ": [9, 32, 465], "assert_supports_inplac": [9, 32, 465], "ivybackendexcept": [9, 32, 368, 400, 465, 629, 647, 656], "jaxlib": [9, 32, 368, 465, 626, 643, 647, 652, 653, 658, 666, 669, 671], "xla_extens": [9, 32, 368, 465, 626, 647, 652, 653, 658, 666, 669, 671], "devicearrai": [9, 32, 368, 465, 626, 647, 663, 669, 671], "clip_matrix_norm": [9, 32, 465], "downscal": [9, 32, 370, 371, 400, 465], "894": [9, 32, 370, 371, 465, 473, 566], "79": [9, 32, 40, 47, 169, 174, 275, 294, 370, 371, 463, 465, 570], "clip_vector_norm": [9, 32, 465], "default_v": [9, 374, 465], "catch_except": [9, 374, 465], "rev": [9, 374, 465], "with_cal": [9, 374, 465], "catch": [9, 374, 465, 665], "might": [9, 117, 374, 461, 465, 642, 643, 644, 651, 652, 654, 657, 660, 662, 663, 665, 666, 667, 669, 671, 672, 678], "exist": [9, 15, 25, 38, 278, 322, 374, 465, 470, 529, 535, 621, 623, 633, 635, 636, 642, 643, 646, 648, 649, 654, 655, 659, 660, 662, 663, 665, 667, 669, 677, 678, 681, 683, 686, 689], "els": [9, 17, 31, 40, 53, 97, 98, 99, 100, 101, 226, 260, 269, 272, 282, 347, 368, 374, 378, 461, 465, 472, 474, 557, 560, 568, 569, 570, 597, 633, 642, 644, 646, 648, 652, 656, 659, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 677, 684], "einops_rearrang": [9, 32, 465], "pattern": [9, 32, 375, 376, 377, 465, 637, 652, 655], "axes_length": [9, 32, 375, 376, 377, 465], "re": [9, 18, 41, 149, 369, 375, 462, 465, 468, 470, 475, 518, 536, 575, 577, 634, 635, 636, 638, 642, 643, 644, 645, 646, 652, 661, 662, 663, 666, 667, 671, 674, 677, 683], "arrang": [9, 375, 465], "rearrang": [9, 32, 375, 377, 465], "einop": [9, 32, 375, 376, 377, 465, 636], "einops_reduc": [9, 32, 465], "reduct": [9, 14, 22, 25, 31, 32, 37, 45, 277, 316, 376, 413, 414, 465, 469, 479, 525, 526, 527, 595, 596, 652, 656, 665, 671], "prod": [9, 21, 32, 44, 376, 465, 478, 602, 652, 654, 669], "einops_repeat": [9, 32, 465], "fourier_encod": [9, 32, 465], "max_freq": [9, 32, 379, 465], "num_band": [9, 32, 379, 465], "band": [9, 32, 379, 465], "linearli": [9, 32, 379, 465, 468, 515], "oppos": [9, 32, 379, 465, 652], "geometr": [9, 32, 379, 465, 468, 521], "seper": [9, 379, 465, 654, 664, 665], "0000000e": [9, 32, 379, 465], "2246468e": [9, 32, 379, 465], "4492936e": [9, 379, 465], "6739404e": [9, 32, 379, 465], "gather": [9, 32, 383, 387, 465, 690], "batch_dim": [9, 32, 382, 383, 465, 623], "gather_nd": [9, 32, 465], "get_num_dim": [9, 32, 465], "as_arrai": [9, 32, 391, 424, 465], "has_nan": [9, 32, 465], "include_inf": [9, 32, 396, 441, 465], "inplace_decr": [9, 32, 465], "val": [9, 25, 31, 32, 251, 272, 398, 399, 400, 417, 418, 465, 662, 671], "decrement": [9, 32, 398, 465], "inplace_incr": [9, 32, 465], "increment": [9, 32, 399, 465, 644, 666, 683], "inplace_upd": [9, 32, 465, 615, 662], "ensure_in_backend": [9, 32, 400, 465, 662], "keep_input_dtyp": [9, 32, 400, 465, 662], "ensur": [9, 32, 400, 465, 597, 633, 642, 643, 644, 647, 652, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 683], "is_arrai": [9, 32, 465, 662, 663], "exclus": [9, 21, 25, 32, 44, 65, 402, 403, 405, 460, 465, 474, 478, 568, 585, 586, 650, 652, 659, 666, 674, 687, 689], "rather": [9, 25, 32, 65, 149, 402, 403, 405, 460, 462, 465, 636, 644, 646, 650, 652, 655, 662, 663, 664, 665, 666, 674, 677, 679, 682, 683], "is_ivy_arrai": [9, 32, 465, 662, 671], "is_ivy_contain": [9, 465], "is_native_arrai": [9, 32, 114, 403, 461, 465, 671], "isin": [9, 32, 408, 465], "test_el": [9, 32, 406, 465], "assume_uniqu": [9, 32, 406, 465], "invert": [9, 32, 165, 406, 463, 465, 468, 508], "speed": [9, 32, 406, 465, 635, 659, 665, 686], "scatter_flat": [9, 32, 465], "occupi": [9, 104, 107, 413, 414, 461, 465], "scatter_nd": [9, 32, 465, 667, 671], "empti": [9, 25, 32, 65, 278, 336, 370, 414, 456, 460, 465, 466, 468, 472, 478, 479, 523, 561, 593, 595, 596, 642, 643, 647, 649, 652, 653, 662], "stable_divid": [9, 32, 465, 659], "denomin": [9, 16, 32, 39, 389, 418, 426, 465, 473, 566, 620, 659, 677, 680], "min_denomin": [9, 32, 426, 465], "global": [9, 25, 32, 48, 97, 98, 99, 100, 101, 147, 148, 149, 388, 389, 392, 417, 418, 420, 426, 427, 438, 452, 454, 456, 461, 462, 465, 466, 608, 620, 626, 643, 647, 648, 651, 652, 653, 656, 659, 663, 669, 683], "_min_denomin": [9, 32, 426, 465], "stable_pow": [9, 32, 465], "min_bas": [9, 32, 427, 465], "_min_bas": [9, 32, 427, 465, 620], "stabl": [9, 20, 32, 43, 209, 232, 233, 269, 285, 352, 388, 389, 417, 418, 426, 427, 463, 465, 477, 582, 584, 604, 643, 648, 652, 663, 669, 677], "supports_inplace_upd": [9, 32, 465], "to_list": [9, 32, 465], "to_numpi": [9, 32, 465, 633, 664, 672], "address": [9, 432, 465, 637, 642, 644, 646, 647, 669, 679, 681, 683, 689], "to_scalar": [9, 32, 465], "value_is_nan": [9, 32, 465], "92": [9, 40, 441, 451, 466, 468, 497, 569, 570], "_arraywithgradi": [10, 47], "adam_step": [10, 33, 466], "mw": [10, 33, 443, 444, 466, 673], "vw": [10, 33, 443, 444, 466, 673], "beta1": [10, 33, 366, 443, 444, 449, 465, 466, 621, 673], "beta2": [10, 33, 366, 443, 444, 449, 465, 466, 621, 673], "999": [10, 30, 33, 217, 443, 444, 449, 451, 463, 466, 621, 673], "epsilon": [10, 13, 14, 31, 33, 36, 37, 277, 316, 366, 443, 444, 449, 465, 466, 468, 469, 509, 512, 525, 526, 527, 620, 621, 650, 659, 662, 673], "07": [10, 14, 30, 31, 33, 37, 40, 162, 190, 194, 210, 277, 316, 443, 444, 446, 447, 448, 449, 455, 463, 466, 469, 525, 526, 527, 569, 621, 673], "cost": [10, 33, 443, 444, 447, 449, 450, 451, 466, 471, 544, 545, 546, 667, 681], "dc": [10, 33, 443, 444, 447, 449, 450, 451, 466], "dw": [10, 33, 443, 444, 447, 449, 450, 451, 466], "forget": [10, 33, 443, 444, 449, 466, 621, 633, 652], "factor": [10, 12, 13, 31, 33, 35, 36, 147, 148, 149, 304, 443, 444, 449, 450, 462, 466, 467, 468, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 602, 604, 605, 617, 618, 621, 636, 656], "adam": [10, 33, 366, 443, 444, 449, 465, 466, 621, 633, 672, 673, 674, 683], "prevent": [10, 33, 369, 443, 444, 449, 465, 466, 467, 478, 490, 593, 617, 621, 642, 644, 651, 652, 656, 657, 662, 663, 666, 667], "delta": [10, 33, 443, 466], "dcdw": [10, 33, 443, 444, 447, 449, 450, 466], "adam_step_delta": [10, 33, 443, 466], "2020105": [10, 443, 466], "22187898": [10, 443, 466], "24144873": [10, 443, 466], "10000002": [10, 44, 443, 466, 589], "20000005": [10, 443, 466], "00300002": [10, 443, 466], "00800002": [10, 443, 466], "adam_upd": [10, 33, 466, 673], "lr": [10, 33, 366, 444, 447, 449, 450, 451, 465, 466, 621, 672, 673], "mw_tm1": [10, 33, 444, 449, 466], "vw_tm1": [10, 33, 444, 449, 466], "stop_gradi": [10, 33, 149, 366, 444, 447, 449, 450, 451, 462, 465, 466, 471, 544, 545, 546, 621, 673], "learn": [10, 33, 375, 444, 447, 449, 450, 451, 465, 466, 471, 544, 545, 546, 621, 633, 635, 636, 638, 641, 642, 643, 645, 646, 659, 661, 668, 676, 678, 681, 685, 686, 687, 688, 689, 690], "previou": [10, 33, 125, 126, 127, 128, 129, 266, 274, 435, 437, 438, 439, 444, 449, 461, 465, 466, 617, 644, 646, 648, 651, 658, 663, 665, 667, 674, 677, 686], "ws_new": [10, 33, 444, 449, 450, 451, 466], "updated_weight": [10, 33, 444, 466], "92558753": [10, 444], "92558873": [10, 444, 466], "92558718": [10, 444, 466], "00000063e": [10, 33, 444, 466], "00000016e": [10, 33, 444, 466], "00000086e": [10, 33, 444, 466], "gradient_descent_upd": [10, 33, 466, 471, 544, 545, 546], "descent": [10, 33, 447, 466, 621, 673, 683], "new_weight": [10, 33, 447, 449, 466, 672], "95": [10, 17, 24, 33, 40, 52, 275, 294, 443, 447, 451, 457, 466, 474, 569, 570], "97": [10, 30, 33, 40, 160, 447, 463, 466, 569], "96": [10, 30, 31, 32, 40, 171, 216, 253, 275, 294, 375, 376, 447, 463, 465, 466, 468, 478, 511, 570, 587], "lamb_upd": [10, 33, 466], "max_trust_ratio": [10, 33, 449, 466, 621], "decay_lambda": [10, 33, 449, 450, 466, 621], "trust": [10, 33, 449, 466, 621], "ratio": [10, 33, 449, 466, 621], "decai": [10, 33, 449, 450, 466, 621], "lamb": [10, 33, 449, 466, 621, 673], "784": [10, 449, 466], "78": [10, 169, 210, 449, 463, 466, 468, 474, 478, 511, 569, 587], "lars_upd": [10, 33, 466], "lar": [10, 33, 450, 466, 621, 673], "optimizer_upd": [10, 33, 466], "effective_grad": [10, 33, 451, 466], "3e": [10, 33, 451, 466], "preserve_typ": [10, 33, 453, 466], "_arraywithimag": [11, 47], "_arraywithlay": [12, 47], "conv1d": [12, 35, 467, 618], "fw": [12, 35, 276, 308, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 599, 665], "d_out": [12, 35, 467, 480, 481, 482, 483, 484, 485, 486, 487, 488], "wio": [12, 467, 481, 482], "conv1d_transpos": [12, 35, 467], "output_shap": [12, 35, 467, 480, 482, 484, 486, 488, 618], "low": [12, 17, 35, 40, 467, 474, 480, 481, 482, 483, 485, 487, 489, 568, 570, 604, 650, 663, 667, 669, 679, 681, 683, 684, 685, 687, 689], "high": [12, 17, 35, 40, 467, 474, 480, 481, 482, 483, 485, 487, 489, 568, 570, 604, 637, 642, 661, 663, 667, 672, 678, 679, 680, 681, 682, 683, 687, 689, 690], "pair": [12, 35, 162, 265, 272, 278, 334, 463, 467, 468, 480, 481, 482, 483, 485, 487, 489, 494, 496, 651], "give": [12, 35, 117, 461, 467, 470, 480, 481, 482, 483, 485, 487, 489, 535, 616, 617, 633, 637, 639, 643, 644, 645, 648, 649, 651, 654, 655, 658, 665, 683, 687], "conv2d": [12, 35, 467, 484, 618, 633], "fh": [12, 35, 467, 480, 483, 484, 485, 486, 487, 488, 489], "hwio": [12, 467, 483], "conv2d_transpos": [12, 35, 467], "random_norm": [12, 13, 17, 35, 36, 40, 375, 465, 467, 468, 474, 482, 484, 485, 486, 489, 492, 516], "std": [12, 17, 21, 35, 40, 44, 282, 347, 467, 474, 478, 482, 484, 485, 486, 489, 568, 569, 654], "conv3d": [12, 35, 467, 618], "fd": [12, 35, 467, 480, 485, 486, 487, 488], "conv3d_transpos": [12, 35, 467], "depthwise_conv2d": [12, 35, 467], "dropout": [12, 35, 275, 296, 297, 467, 618, 672], "noise_shap": [12, 35, 467, 490], "droput": [12, 490], "turn": [12, 35, 296, 297, 467, 490, 637, 643, 650, 654, 663, 665], "reproduc": [12, 35, 467, 490, 602, 603, 604, 605, 608, 646], "binari": [12, 14, 31, 35, 37, 164, 167, 169, 198, 277, 316, 463, 467, 469, 490, 525], "mask": [12, 35, 387, 465, 467, 490, 493, 494, 667], "42857146": [12, 467, 490], "85714293": [12, 467, 490], "28571415": [12, 35, 467, 490], "71428585": [12, 35, 467, 490], "14285755": [12, 35, 467, 490], "5714283": [12, 467, 490], "4285717": [12, 35, 467, 490], "8571434": [12, 35, 467, 490], "2857151": [12, 467, 490], "dropout1d": [12, 35, 275], "droput1d": [12, 296], "dropout3d": [12, 35, 275], "droput3d": [12, 297], "outer_batch_shap": [12, 35, 467, 491], "inner_batch_shap": [12, 35, 467, 491], "in_featur": [12, 35, 467, 491], "out_featur": [12, 35, 467, 491], "84": [12, 21, 30, 39, 40, 107, 136, 192, 461, 462, 468, 473, 478, 491, 511, 566, 569, 570, 587], "133": [12, 371, 465, 491], "134": [12, 468, 491, 508], "lstm_updat": [12, 35, 467, 669], "init_h": [12, 35, 467, 492, 669], "init_c": [12, 35, 467, 492, 669], "recurrent_kernel": [12, 35, 467, 492, 669], "recurrent_bia": [12, 35, 467, 492, 669], "cell": [12, 35, 467, 492, 618, 651, 669], "batch_shap": [12, 17, 27, 35, 40, 74, 82, 460, 467, 468, 474, 492, 493, 494, 524, 567, 618, 667, 669, 671], "hidden": [12, 35, 467, 492, 618, 649, 656, 669, 673], "recurr": [12, 35, 467, 492, 669, 683, 687], "timestep": [12, 35, 467, 492, 618, 669], "h_i": [12, 35, 492], "c_i": [12, 35, 492], "rc": [12, 35, 492], "multi_head_attent": [12, 35, 467, 662], "num_head": [12, 35, 467, 493, 618], "context": [12, 35, 410, 465, 466, 467, 493, 618, 643, 644, 654], "to_q_fn": [12, 35, 467, 493], "to_kv_fn": [12, 35, 467, 493], "to_out_fn": [12, 35, 467, 493, 662], "to_q_v": [12, 35, 467, 493], "to_kv_v": [12, 35, 467, 493], "to_out_v": [12, 35, 467, 493], "scaled_dot_product_attent": [12, 35, 467], "queri": [12, 25, 35, 136, 148, 387, 462, 465, 467, 493, 494, 618, 650, 652, 671, 683], "num_queri": [12, 35, 467, 493, 494], "feat_dim": [12, 35, 467, 494], "num_kei": [12, 35, 467, 493, 494], "applic": [12, 35, 467, 472, 493, 494, 553, 554, 555, 559, 560, 633, 643, 652, 653, 660, 673, 680, 681, 683, 685, 687, 689], "dot": [12, 31, 35, 276, 315, 467, 468, 493, 494, 522, 618, 633, 651], "attent": [12, 35, 467, 493, 494, 618, 636, 644, 647], "score": [12, 35, 467, 494, 633], "_arraywithlinearalgebra": [13, 47], "choleski": [13, 36, 468, 662], "symmetr": [13, 31, 36, 228, 229, 230, 231, 269, 276, 278, 310, 336, 468, 495, 500, 501, 502, 524, 650], "u": [13, 27, 36, 79, 468, 472, 495, 502, 516, 555, 633, 636, 638, 643, 644, 645, 649, 650, 651, 659, 660, 662, 663, 664, 665, 666, 667, 673, 677], "l": [13, 30, 36, 195, 276, 310, 468, 495, 500, 501, 502, 506, 520, 644, 645], "625": [13, 31, 247, 468, 495], "cross": [13, 14, 31, 36, 37, 277, 316, 468, 469, 525, 526, 527, 633, 651], "vif": [13, 36, 468, 496], "det": [13, 36, 468, 514, 651], "axis1": [13, 15, 36, 38, 468, 470, 499, 520, 540], "axis2": [13, 36, 468, 499, 520], "eigh": [13, 36, 276, 310, 468, 500], "uplo": [13, 36, 468, 501, 502], "eigvalsh": [13, 36, 468], "inner": [13, 27, 36, 82, 276, 310, 460, 468, 471, 500, 501, 506, 544, 545, 546, 642, 662], "inv": [13, 36, 468], "matmul": [13, 36, 442, 465, 468, 516, 648, 665, 666, 669], "transpose_a": [13, 36, 468, 506], "transpose_b": [13, 36, 468, 506], "adjoint_a": [13, 36, 468, 506], "adjoint_b": [13, 36, 468, 506], "detail": [13, 15, 19, 31, 36, 38, 42, 75, 276, 307, 322, 460, 476, 499, 506, 512, 516, 539, 578, 579, 580, 581, 633, 642, 644, 646, 648, 649, 650, 651, 658, 659, 660, 663, 664, 665, 666, 669, 671, 672, 673, 685, 689], "found": [13, 15, 19, 25, 31, 36, 38, 42, 48, 139, 322, 462, 472, 499, 506, 539, 558, 578, 616, 639, 642, 643, 644, 647, 648, 649, 650, 652, 655, 657, 660, 662, 663, 667, 685], "matrix_norm": [13, 36, 468], "ord": [13, 36, 468, 507, 523], "fro": [13, 36, 468, 507], "nuc": [13, 36, 468, 507], "matrix_pow": [13, 36, 468], "matrix_rank": [13, 36, 468], "singular": [13, 36, 468, 507, 509, 512, 516, 517, 604, 652], "largest_singular_valu": [13, 36, 468, 509, 512], "associ": [13, 36, 158, 463, 468, 509, 512, 524, 599, 644, 652, 659, 660, 663, 664, 665, 677], "full": [13, 35, 36, 104, 183, 189, 386, 394, 416, 422, 436, 440, 460, 461, 463, 465, 467, 468, 482, 484, 485, 486, 509, 513, 515, 516, 599, 603, 608, 633, 636, 637, 644, 652, 655, 656, 658, 663, 665, 667, 669, 677, 681, 683, 689], "defici": [13, 468, 509], "matrix_transpos": [13, 36, 468, 671], "outer": [13, 36, 468, 471, 544, 545, 546, 642], "pinv": [13, 36, 468], "pseudo": [13, 36, 468, 512, 661], "0426": [13, 36, 512], "0964": [13, 36, 512], "0605": [13, 36, 512], "1368": [13, 36, 512], "qr": [13, 36, 468, 664], "decomposit": [13, 36, 468, 495, 505, 513, 516, 642, 690], "orthonorm": [13, 36, 468, 513, 516], "lead": [13, 25, 36, 48, 468, 513, 516, 604, 636, 637, 651, 654, 666, 677], "complet": [13, 25, 36, 468, 513, 603, 636, 642, 643, 644, 646, 647, 650, 651, 654, 656, 663, 664, 665, 667, 671, 672, 681], "namedtupl": [13, 19, 36, 42, 276, 310, 468, 476, 500, 501, 513, 514, 516, 578, 579, 580], "field": [13, 19, 36, 42, 276, 310, 468, 476, 500, 501, 513, 514, 516, 578, 579, 580, 633, 651, 676, 681, 689], "those": [13, 15, 25, 31, 36, 38, 65, 117, 338, 442, 460, 461, 465, 468, 470, 472, 513, 516, 528, 549, 635, 642, 643, 644, 647, 650, 651, 652, 660, 662, 663, 664, 665, 667, 680], "slogdet": [13, 36, 468], "logabsdet": [13, 36, 468, 514], "natur": [13, 36, 177, 190, 192, 209, 463, 468, 514, 636, 647, 649, 654, 656, 664, 676], "6931472": [13, 36, 468, 514], "098611": [13, 468, 514], "solv": [13, 36, 468, 633, 643, 646, 663, 670, 676, 685], "svd": [13, 36, 468, 517], "compute_uv": [13, 36, 468, 516], "full_matric": [13, 36, 468, 516], "svf": [13, 516], "vh": [13, 36, 468, 516], "significantli": [13, 36, 468, 516, 635, 651, 681], "faster": [13, 36, 468, 516, 641, 678, 685, 688], "hermitian": [13, 36, 276, 310, 311, 468, 500, 501, 502, 516], "reconstruct": [13, 19, 42, 468, 476, 516, 578, 580, 664], "close": [13, 178, 192, 209, 463, 468, 470, 516, 531, 642, 643, 644, 655, 663, 667, 683], "reconstructed_x": [13, 468, 516], "svdval": [13, 36, 468], "tensordot": [13, 36, 468, 652], "tensorsolv": [13, 36, 468], "vander": [13, 36, 468], "vandermond": [13, 36, 468, 521], "vecdot": [13, 36, 468], "vector_norm": [13, 36, 468], "singleton": [13, 18, 21, 22, 36, 41, 44, 45, 468, 470, 475, 478, 479, 523, 531, 538, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 669], "accordingli": [13, 18, 19, 21, 22, 36, 41, 44, 45, 80, 178, 192, 460, 463, 468, 475, 476, 478, 479, 523, 574, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 657, 663, 669], "mathemat": [13, 36, 158, 162, 178, 192, 458, 463, 468, 507, 523, 652, 663, 667, 683, 689], "l1": [13, 36, 468, 523, 650, 672], "manhattan": [13, 36, 468, 523], "euclidean": [13, 36, 468, 523], "7416575": [13, 36, 468, 523], "vector_to_skew_symmetric_matrix": [13, 36, 468], "_arraywithloss": [14, 47], "binary_cross_entropi": [14, 37, 469, 651], "pred": [14, 31, 37, 277, 316, 469, 525, 526, 527, 633, 650, 659, 662], "label": [14, 31, 37, 277, 316, 469, 525, 526, 527, 633, 642, 644, 646, 651, 663, 668, 669, 670, 674, 683], "predict": [14, 31, 37, 277, 316, 469, 525, 526, 527, 633], "amount": [14, 31, 37, 151, 277, 316, 462, 469, 525, 526, 527, 643, 651, 653, 664], "smooth": [14, 31, 37, 277, 316, 469, 525, 526, 527, 661], "entropi": [14, 31, 37, 277, 316, 469, 525, 526, 527, 633], "357": [14, 37, 469, 525, 527], "223": [14, 37, 469, 525, 527], "cross_entropi": [14, 37, 469, 527, 633, 650, 659, 662], "3862944": [14, 469, 526], "sparse_cross_entropi": [14, 37, 469], "_arraywithmanipul": [15, 47], "x_min": [15, 38, 470, 528, 674], "x_max": [15, 38, 470, 528, 674], "join": [15, 25, 31, 38, 322, 470, 529, 539, 633, 656], "constant_pad": [15, 38, 470], "before_1": [15, 38, 278, 336, 470, 530, 543], "after_1": [15, 38, 278, 336, 470, 530, 543], "before_n": [15, 38, 278, 336, 470, 530, 543], "after_n": [15, 38, 278, 336, 470, 530, 543], "permute_dim": [15, 38, 470], "repetit": [15, 38, 470, 534, 541, 656, 667], "fit": [15, 38, 470, 534, 663, 669, 679, 680, 683], "flat": [15, 25, 38, 283, 351, 413, 465, 470, 534, 616], "allowzero": [15, 38, 470, 535], "remain": [15, 18, 38, 41, 158, 208, 275, 296, 297, 463, 470, 472, 475, 535, 553, 576, 644, 651, 654, 656, 666, 667, 677], "never": [15, 38, 470, 535, 644, 652, 662, 663, 665, 667], "valueerror": [15, 38, 42, 470, 535, 538, 581, 629, 656], "reus": [15, 38, 470, 535, 656, 665, 688], "buffer": [15, 31, 38, 227, 269, 470, 535, 662, 677], "roll": [15, 38, 470, 650, 658], "shift": [15, 27, 38, 48, 77, 166, 168, 232, 233, 269, 463, 470, 536, 643, 644, 654, 658], "restor": [15, 38, 470, 536], "num_or_size_split": [15, 25, 38, 467, 470, 493, 537, 669], "with_remaind": [15, 25, 38, 470, 537], "mani": [15, 25, 38, 232, 233, 269, 470, 537, 616, 633, 635, 636, 637, 642, 643, 644, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 667, 669, 671, 672, 677, 679, 683, 686, 689, 690], "squeez": [15, 38, 470, 683], "document": [15, 442, 465, 539, 638, 640, 641, 644, 649, 651, 652, 654, 656, 662, 663, 664, 665, 672, 674], "swapax": [15, 38, 470], "axis0": [15, 38, 470, 540], "swap_ax": [15, 540], "tile": [15, 32, 38, 377, 470], "unpack": [15, 38, 470, 542, 657, 664, 665], "zero_pad": [15, 38, 470], "_arraywithnorm": [16, 47], "layer_norm": [16, 39, 473], "normalized_idx": [16, 39, 473, 566], "new_std": [16, 39, 473, 566, 620], "learnabl": [16, 39, 473, 566, 620, 674], "post": [16, 39, 473, 566, 643, 661, 674], "deviat": [16, 17, 21, 39, 40, 44, 473, 474, 478, 566, 569, 592, 604, 617, 620, 637, 646], "0976": [16, 473, 566], "3452": [16, 473, 566], "2740": [16, 473, 566], "1047": [16, 473, 566], "5886": [16, 473, 566], "2732": [16, 473, 566], "7696": [16, 473, 566, 602], "7024": [16, 473, 566], "2518": [16, 473, 566], "826": [16, 473, 566], "178": [16, 473, 566], "981": [16, 473, 566], "831": [16, 473, 566], "421": [16, 473, 566], "_arraywithrandom": [17, 47], "multinomi": [17, 40, 282, 348, 474], "population_s": [17, 40, 474, 567], "num_sampl": [17, 40, 474, 567], "unnorm": [17, 40, 474, 567, 665], "popul": [17, 21, 25, 40, 44, 226, 269, 474, 478, 567, 592, 594, 652, 653, 662, 665, 669, 689], "draw": [17, 40, 282, 346, 348, 350, 474, 567, 569, 570, 602, 603, 604, 605, 608, 617, 642, 646, 664, 665], "ve": [17, 40, 474, 567, 642, 643, 644, 665, 667, 668, 671, 678], "highest": [17, 40, 474, 568], "half": [17, 40, 65, 460, 474, 568, 570, 667], "int64": [17, 18, 20, 21, 28, 40, 41, 43, 44, 83, 94, 100, 103, 105, 107, 111, 112, 115, 122, 285, 352, 460, 461, 475, 477, 478, 568, 573, 574, 575, 583, 585, 586, 591, 593, 602, 652, 663, 665, 669], "235": [17, 569], "float16": [17, 28, 40, 96, 99, 104, 106, 227, 244, 269, 272, 461, 468, 523, 569, 570, 602, 652, 663, 665], "807": [17, 569], "random_uniform": [17, 40, 474, 653, 665, 669, 673], "86": [17, 40, 443, 466, 569, 570], "53": [17, 30, 151, 178, 446, 448, 455, 462, 466, 473, 566, 570], "_arraywithsearch": [18, 47], "select_last_index": [18, 41, 475, 573, 574], "occurr": [18, 475, 476, 573, 574, 578], "appropri": [18, 23, 41, 46, 158, 235, 252, 272, 463, 475, 573, 642, 644, 660, 665], "argmin": [18, 41, 475], "output_dtyp": [18, 41, 475, 574], "across": [18, 25, 32, 41, 147, 148, 281, 343, 367, 396, 462, 465, 467, 472, 475, 490, 553, 573, 574, 642, 646, 650, 652, 654, 656, 658, 659, 661, 663, 665, 667, 681, 683, 688], "argwher": [18, 41, 475, 657], "nonzero": [18, 41, 158, 463, 475], "as_tupl": [18, 41, 475, 576], "fewer": [18, 41, 475, 576], "yield": [18, 278, 334, 335, 336, 475, 577, 633, 651, 657], "_arraywithset": [19, 47], "unique_al": [19, 42, 476], "inverse_indic": [19, 42, 476, 578, 580], "unique_count": [19, 42, 476], "unique_invers": [19, 42, 476], "unique_valu": [19, 42, 476], "admonit": [19, 581], "henc": [19, 470, 476, 531, 578, 579, 580, 581, 626, 643, 650, 651, 662, 665], "dask": [19, 476, 578, 579, 580, 581, 636], "difficult": [19, 476, 578, 579, 580, 581, 644, 646, 652, 665, 677], "know": [19, 476, 578, 579, 580, 581, 637, 640, 644, 649, 664, 665, 666, 684], "omit": [19, 209, 463, 476, 578, 579, 580, 581, 658, 662, 663], "x_i": [19, 21, 30, 31, 155, 156, 157, 159, 160, 161, 165, 170, 171, 172, 177, 178, 179, 184, 185, 186, 187, 190, 191, 192, 193, 196, 209, 210, 211, 212, 213, 214, 216, 217, 218, 260, 262, 272, 463, 476, 478, 578, 579, 580, 581, 588, 589, 590, 592, 593, 594, 617, 655], "x_j": [19, 476, 578, 579, 580, 581], "impli": [19, 476, 578, 579, 580, 581, 665], "behavior": [19, 205, 208, 463, 476, 578, 579, 580, 581, 649, 650, 651, 652, 659, 662, 663, 664, 665, 667, 669, 677, 680], "distinct": [19, 476, 578, 579, 580, 581, 636, 643, 650, 655, 661, 662, 663, 668, 683], "could": [19, 476, 578, 579, 580, 581, 636, 637, 642, 643, 644, 646, 649, 651, 652, 654, 660, 662, 663, 664, 665, 669, 671, 672, 673, 683, 688, 689], "vari": [19, 375, 465, 476, 579, 580, 581, 650, 654, 663, 665, 671], "typeerror": [19, 42, 476, 581, 671], "_arraywithsort": [20, 47], "argsort": [20, 43, 477, 583, 663], "descend": [20, 43, 468, 477, 516, 517, 582, 584], "ascend": [20, 43, 285, 352, 477, 582, 583], "stabil": [20, 43, 426, 427, 465, 477, 582, 584, 652, 661, 667], "maintain": [20, 43, 477, 582, 584, 635, 644, 646, 651, 662, 663, 664, 665, 682], "searchsort": [20, 43, 477], "side": [20, 43, 250, 272, 477, 583, 643, 644, 649], "sorter": [20, 43, 477, 583], "ret_dtyp": [20, 43, 477, 583], "_arraywithstatist": [21, 47], "cumprod": [21, 44, 478, 663, 674], "cumul": [21, 44, 478, 585, 586, 676], "uint64": [21, 101, 106, 108, 109, 118, 120, 123, 461, 478, 585, 586, 591, 593, 602, 652, 665, 669], "uint16": [21, 96, 101, 106, 107, 115, 461, 478, 585, 586, 591, 593, 602, 652, 663, 665, 669], "bit": [21, 103, 104, 107, 165, 166, 168, 461, 463, 478, 585, 586, 591, 593, 641, 642, 643, 650, 651, 652, 654, 659, 669, 671, 689], "uint32": [21, 101, 106, 107, 108, 129, 461, 478, 585, 586, 591, 593, 602, 652, 665, 669], "resolv": [21, 470, 478, 531, 585, 586, 591, 593, 644, 649, 652, 669], "120": [21, 44, 48, 468, 511, 585, 633], "cumsum": [21, 44, 478, 652], "einsum": [21, 44, 478], "equat": [21, 31, 44, 228, 269, 468, 478, 515, 587, 683], "operand": [21, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 205, 208, 209, 211, 212, 213, 216, 217, 218, 262, 272, 463, 478, 587, 588, 590, 593, 647, 650, 655, 663], "describ": [21, 31, 282, 285, 350, 352, 478, 587, 591, 593, 640, 642, 644, 651, 662, 663, 665, 669, 674, 683], "contract": [21, 468, 478, 518, 587], "seq": [21, 478, 587, 602], "consist": [21, 25, 276, 310, 468, 478, 500, 501, 587, 619, 635, 646, 647, 651, 652, 656, 662, 669, 684], "ii": [21, 44, 478, 587, 644], "jk": [21, 478, 587], "ik": [21, 478, 587], "66": [21, 32, 33, 169, 375, 376, 447, 463, 465, 466, 468, 478, 511, 587], "104": [21, 468, 478, 511, 587], "126": [21, 52, 206, 457, 463, 468, 478, 508, 587], "510": [21, 478, 587], "special": [21, 36, 47, 48, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 210, 211, 212, 213, 216, 217, 218, 262, 272, 463, 478, 588, 589, 590, 592, 593, 594, 602, 603, 604, 605, 608, 617, 642, 646, 647, 651, 654, 655, 656, 658, 662, 664, 666, 667, 683, 684, 685], "arithmet": [21, 44, 168, 463, 478, 589, 663], "propag": [21, 168, 463, 478, 588, 589, 590, 592, 593, 594, 661], "04999995": [21, 589], "freedom": [21, 44, 478, 592, 594, 648], "adjust": [21, 44, 478, 592, 594, 626], "constitut": [21, 44, 478, 592, 594, 659, 669, 684], "commonli": [21, 44, 478, 592, 594, 656, 659, 661], "8164966": [21, 478, 592], "var": [21, 44, 46, 61, 62, 63, 64, 459, 471, 478, 544, 545, 623, 643, 654, 669], "6666665": [21, 594, 672], "667": [21, 32, 174, 371, 426, 463, 465, 594], "_arraywithutil": [22, 47], "AND": [22, 45, 164, 195, 463, 479, 595], "invalid": [22, 45, 468, 470, 479, 522, 531, 595, 596, 602, 643, 649, 652, 657], "OR": [22, 45, 167, 197, 463, 479, 596, 643, 644, 661], "_wrap_funct": [23, 46, 649, 659, 660], "function_nam": [23, 46, 642], "new_funct": [23, 46, 649], "add_ivy_array_instance_method": 23, "cl": [23, 46], "to_ignor": [23, 46, 472, 558, 559], "shown": [23, 25, 46, 187, 238, 260, 272, 394, 463, 465, 642, 644, 646, 649, 651, 652, 654, 656, 657, 658, 663, 664, 665, 666, 669, 671, 677], "toi": [23, 46], "arrayexampl": 23, "hasattr": [23, 46], "_containerwithactiv": [24, 48], "dict_in": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 392, 420, 438, 465, 672], "queue_load_s": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "container_combine_method": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "list_join": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue_timeout": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "key_length_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_ind": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_line_spac": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "ivyh": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "default_key_color": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "green": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 632, 643, 644], "keyword_color_dict": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "rebuild_child_contain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "types_to_iteratively_nest": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "alphabetical_kei": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "dynamic_backend": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 619], "containerbas": [24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 650], "static": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 71, 293, 305, 337, 428, 460, 511, 615, 642, 654, 655, 659, 660, 663, 677, 682, 683, 684], "_static_gelu": 24, "key_chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 250, 252, 253, 259, 260, 262, 264, 265, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "to_appli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 250, 252, 253, 259, 260, 262, 264, 265, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 472, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "prune_unappli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 250, 252, 253, 259, 260, 262, 264, 265, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 472, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "map_sequ": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 250, 252, 253, 259, 260, 262, 264, 265, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 322, 324, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 363, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "exact": [24, 25, 52, 275, 302, 476, 578, 580, 604, 643, 644, 646, 654, 669], "formul": [24, 52], "chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 238, 240, 250, 252, 259, 260, 262, 264, 265, 296, 297, 308, 322, 337, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 471, 472, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 544, 545, 549, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 616, 622, 647, 650, 661, 663, 673, 674, 677, 683], "skip": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 264, 265, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 472, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 560, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 603, 649, 660, 665], "prune": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 235, 237, 238, 240, 250, 252, 259, 260, 262, 264, 265, 296, 297, 308, 318, 319, 320, 322, 337, 338, 339, 342, 343, 344, 345, 347, 364, 367, 368, 370, 371, 375, 376, 377, 379, 382, 383, 391, 396, 398, 399, 400, 402, 403, 405, 413, 414, 426, 427, 428, 430, 432, 433, 441, 447, 453, 472, 481, 482, 483, 484, 490, 491, 494, 495, 496, 502, 504, 506, 507, 509, 511, 513, 514, 520, 525, 526, 527, 528, 532, 535, 536, 537, 538, 539, 542, 543, 560, 561, 562, 563, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 582, 585, 586, 589, 591, 592, 594, 595, 596, 600, 651], "static_gelu": 24, "185": 24, "046": 24, "_static_leaky_relu": 24, "static_leaky_relu": 24, "38999999": [24, 54], "_static_log_softmax": 24, "static_log_softmax": 24, "371": [24, 55], "_static_mish": 24, "static_mish": 24, "30883577": [24, 56, 457], "28903052": [24, 56, 457], "10714479": [24, 56, 457], "_static_relu": 24, "static_relu": 24, "40000001": [24, 47, 48, 54, 57, 457, 476, 579], "_static_sigmoid": 24, "static_sigmoid": 24, "2689414": [24, 58, 59], "7310586": [24, 58, 59], "88079703": [24, 58], "62245935": [24, 58], "4750208": [24, 58], "_static_softmax": 24, "static_softmax": 24, "72844321": [24, 59], "19852395": [24, 59], "07303288": [24, 59], "_static_softplu": 24, "revert": [24, 60, 457], "static_softplu": 24, "53499615": 24, "42036411": 24, "948": [24, 60], "166": [24, 52, 457], "159": [24, 52, 457, 467, 491], "__getitem__": [25, 650], "slice": [25, 32, 232, 233, 269, 278, 338, 382, 383, 387, 465, 472, 556, 683], "dictionari": [25, 42, 48, 51, 53, 148, 445, 457, 462, 466, 581, 599, 647, 651, 652, 663, 672, 677], "multiprocess": [25, 48, 465, 672, 677], "asynchron": [25, 48, 683], "wait": [25, 48, 420, 465, 633, 642, 644, 651, 663], "combin": [25, 48, 276, 308, 380, 381, 465, 468, 496, 506, 644, 647, 650, 652, 654, 656, 659, 665, 667, 674, 683], "arriv": [25, 48, 420, 465, 667], "cont_list_join": [25, 48], "timeout": [25, 48, 392, 420, 438, 465], "limit": [25, 48, 104, 107, 370, 371, 461, 465, 470, 528, 602, 604, 605, 617, 623, 633, 643, 644, 649, 651, 654, 656, 657, 663, 665, 667, 672, 677, 682, 683, 684], "whitespac": [25, 48], "indent": [25, 48, 672], "newlin": [25, 48, 655], "color": [25, 48, 632], "termin": [25, 48, 643, 644, 650, 669, 672], "termcolor": [25, 48], "rebuild": [25, 48, 639], "constructor": [25, 48, 366, 465, 599, 615, 622, 652, 653, 671], "kept": [25, 48, 471, 544, 545, 644, 662, 666], "structur": [25, 28, 48, 104, 107, 372, 465, 472, 560, 616, 633, 644, 647, 650, 659, 664, 665, 666, 672, 673, 682, 683], "alphabet": [25, 48], "__setitem__": [25, 647, 650, 671], "_cont_at_key_chains_input_as_dict": 25, "current_chain": 25, "ignore_key_error": 25, "_cont_at_key_chains_input_as_seq": 25, "_cont_call_static_method_with_flexible_arg": 25, "static_method": 25, "kw": 25, "self_idx": 25, "_cont_concat_unifi": 25, "_cont_get_dev": 25, "_cont_get_shap": 25, "properti": [25, 47, 613, 619, 621, 646, 650, 654, 659, 664, 665, 671, 672, 673, 689], "_cont_ivi": 25, "_cont_mean_unifi": 25, "_1": 25, "_cont_prune_key_chains_input_as_dict": 25, "return_cont": 25, "_cont_prune_key_chains_input_as_seq": 25, "_cont_slice_kei": 25, "key_slic": 25, "_cont_sum_unifi": 25, "_get_queue_item": 25, "cont_all_fals": 25, "assert_is_bool": 25, "assert": [25, 368, 465, 608, 645, 646, 657, 662, 663, 664, 665, 666, 671, 672], "cont_all_key_chain": 25, "include_empti": 25, "cont_all_tru": [25, 650, 672], "cont_as_bool": 25, "cont_assert_contains_sub_contain": 25, "sub_cont": 25, "screen": [25, 643, 672], "cont_assert_contains_sub_structur": 25, "check_shap": [25, 623], "cont_assert_ident": 25, "check_typ": 25, "same_arrai": [25, 672], "arrays_equ": 25, "ident": [25, 74, 139, 387, 460, 462, 465, 468, 472, 508, 560, 635, 637, 650, 659, 660, 663, 664, 666, 667, 671, 672, 677, 678], "cont_assert_identical_structur": 25, "cont_at_key_chain": 25, "ignore_non": 25, "cont_at_kei": 25, "substr": 25, "try": [25, 434, 465, 617, 626, 633, 634, 636, 637, 642, 643, 644, 646, 647, 650, 651, 652, 656, 657, 662, 663, 664, 669, 671, 677], "cont_combin": 25, "prioriti": [25, 626, 644, 662], "most": [25, 27, 82, 276, 310, 460, 468, 500, 501, 633, 636, 641, 642, 643, 647, 650, 651, 652, 653, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 677, 683, 684, 686, 687, 689, 690], "duplic": [25, 472, 549, 648, 655, 657, 660, 661, 664, 673, 689], "configur": [25, 148, 462, 472, 560, 639, 643, 644, 649, 651, 652, 660], "container_rightmost": 25, "cont_common_key_chain": [25, 650], "cont_config": 25, "cont_contains_sub_contain": 25, "cont_contains_sub_structur": 25, "cont_copi": [25, 672], "cont_create_if_abs": 25, "noth": [25, 667, 689], "cont_cutoff_at_depth": 25, "depth_cutoff": 25, "summari": [25, 108, 372, 393, 461, 465, 643, 644, 665], "cont_cutoff_at_height": 25, "height_cutoff": 25, "deep": [25, 375, 465, 633, 635, 638, 640, 641, 642, 644, 646, 649, 650, 652, 661, 664, 668, 671, 672, 681, 683, 686, 687, 689, 690], "intern": [25, 472, 547, 557, 558, 613, 617, 618, 619, 620, 622, 647, 650, 653, 655, 662, 664, 665], "cont_dev": 25, "belong": [25, 642, 646, 673], "cont_dev_str": 25, "cont_diff": [25, 650, 672], "diff_kei": 25, "detect_key_diff": 25, "detect_value_diff": 25, "detect_shape_diff": 25, "share": [25, 124, 461, 602, 603, 633, 636, 648, 650, 654, 659, 661, 663, 664, 665, 667, 669, 681, 682, 689], "among": [25, 637, 651, 665, 667, 683], "container0": 25, "cont_duplicate_array_keychain": 25, "cont_find_sub_contain": 25, "sub_cont_to_find": 25, "exsit": 25, "cont_find_sub_structur": 25, "sub_struc_to_find": 25, "cont_flatten_key_chain": [25, 672], "__": [25, 654, 672], "above_height": [25, 672], "below_depth": [25, 672], "cont_format_key_chain": 25, "format_fn": 25, "cont_from_disk_as_hdf5": [25, 672], "h5_obj_or_filepath": 25, "slice_obj": 25, "load": [25, 633, 665, 677, 682, 689], "disk": [25, 672, 682], "h5py": 25, "file": [25, 395, 423, 465, 619, 642, 643, 644, 646, 647, 648, 649, 650, 651, 655, 656, 657, 659, 663, 664, 665, 666, 669, 672, 679, 682, 683, 684], "hdf5": [25, 619, 672], "filepath": [25, 644, 646], "h5": 25, "cont_from_disk_as_json": [25, 672], "json_filepath": 25, "json": [25, 639, 643, 672], "cont_from_disk_as_pickl": [25, 672], "pickle_filepath": 25, "pickl": [25, 650, 672], "cont_from_flat_list": 25, "flat_list": 25, "hierarchi": [25, 642, 672, 679, 689], "cont_handle_inplac": 25, "prime": 25, "being": [25, 46, 47, 65, 278, 336, 369, 392, 420, 460, 465, 468, 502, 599, 605, 613, 616, 617, 633, 636, 637, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 657, 658, 660, 662, 663, 664, 665, 667, 669, 672, 676, 677, 679, 681, 682, 683, 684, 689, 690], "overwritten": [25, 647, 648], "cont_has_kei": 25, "query_kei": 25, "somewher": [25, 651], "cont_has_key_chain": 25, "cont_ident": [25, 672], "cont_identical_array_shap": 25, "regardless": [25, 637, 638, 652, 671, 674], "cont_identical_config": 25, "cont_identical_structur": 25, "cont_if_exist": 25, "cont_inplace_upd": 25, "cont_ivi": 25, "cont_key_chains_contain": 25, "sub_str": 25, "cont_list_stack": [25, 672], "cont_map": [25, 650, 672], "func": [25, 149, 266, 274, 369, 442, 445, 446, 448, 455, 462, 465, 466, 472, 560, 599, 642, 646, 647, 654, 656, 661, 662], "cont_map_sub_cont": 25, "include_self": 25, "possibi": 25, "cont_max_depth": 25, "cont_multi_map": [25, 650], "map_nest": 25, "assert_ident": 25, "leftmost": [25, 472, 560], "cont_multi_map_in_funct": [25, 650], "cont_num_arrai": 25, "cont_overwrite_at_key_chain": 25, "target_dict": 25, "return_dict": 25, "cont_prune_empti": 25, "keep_non": 25, "cont_prune_key_chain": 25, "key1": [25, 633, 673], "key2": [25, 633], "key3": 25, "cont_prune_key_from_key_chain": 25, "decid": [25, 472, 547, 548, 557, 558, 559, 633, 642, 643, 652, 667], "cont_prune_kei": 25, "cont_prune_keys_from_key_chain": 25, "cont_reduc": 25, "cont_remove_key_length_limit": 25, "cont_remove_print_limit": 25, "cont_reshape_lik": 25, "leading_shap": 25, "cont_restructur": 25, "keep_orig": 25, "old": [25, 643, 648, 662], "cont_restructure_key_chain": 25, "keychain_map": 25, "cont_set_at_key_chain": 25, "cont_set_at_kei": 25, "cont_shap": [25, 467, 485], "attribut": [25, 104, 105, 106, 107, 137, 138, 145, 226, 269, 380, 381, 461, 462, 465, 600, 649, 650, 652, 655, 660, 662, 663, 670, 671, 672, 673], "cont_show": 25, "cont_show_sub_contain": 25, "sub_cont_or_keychain": 25, "cont_size_ordered_arrai": 25, "keychain": [25, 31, 237, 318, 319, 320, 338], "cont_slice_kei": 25, "all_depth": 25, "cont_slice_via_kei": 25, "slice_kei": 25, "cont_sort_by_kei": 25, "cont_structural_diff": 25, "cont_to_dict": 25, "cont_to_disk_as_hdf5": [25, 672], "starting_index": 25, "max_batch_s": 25, "later": [25, 369, 465, 642, 662, 665, 683], "cont_to_disk_as_json": [25, 672], "cont_to_disk_as_pickl": [25, 672], "cont_to_flat_list": 25, "cont_to_iter": [25, 650], "leaf_keys_onli": 25, "cont_to_iterator_kei": 25, "cont_to_iterator_valu": 25, "cont_to_json": 25, "cont_to_nested_list": 25, "cont_to_raw": 25, "cont_trim_kei": 25, "max_length": 25, "trim": 25, "cont_try_kc": 25, "tri": [25, 600], "cont_unifi": 25, "unifi": [25, 149, 462, 633, 634, 636, 645, 646, 647, 652, 656, 661, 663, 667, 669, 677, 679, 680, 681, 683, 687, 690], "concatten": [25, 149, 462], "cont_unstack_cont": 25, "dim_siz": 25, "cont_update_config": 25, "cont_with_default_key_color": 25, "cont_with_entries_as_list": 25, "cont_with_ivy_backend": 25, "ivy_backend": 25, "cont_with_key_length_limit": [25, 672], "cont_with_print_ind": [25, 672], "cont_with_print_limit": [25, 672], "cont_with_print_line_spac": 25, "h5_file_s": 25, "shuffle_h5_fil": 25, "seed_valu": [25, 474, 571], "split_cont": 25, "constitu": [25, 674], "_is_json": 25, "_repr": 25, "_containerwithconvers": [26, 48], "_static_to_ivi": 26, "_static_to_n": 26, "_containerwithcr": [27, 48], "_static_arang": 27, "_static_asarrai": 27, "_static_empti": 27, "_static_empty_lik": 27, "_static_ey": 27, "n_row": [27, 31, 74, 232, 233, 269, 460], "n_col": [27, 31, 74, 232, 233, 269, 460], "_static_from_dlpack": 27, "_static_full_lik": 27, "static_full_lik": 27, "2324": [27, 77, 460], "234": [27, 30, 77, 176, 218, 460, 463, 467, 491, 602], "123": [27, 28, 77, 107, 378, 460, 465, 665], "_static_linspac": 27, "_static_logspac": 27, "static_logspac": 27, "15443469": [27, 79], "64158883": [27, 79], "_static_meshgrid": 27, "_static_native_arrai": 27, "_static_one_hot": 27, "static_one_hot": 27, "_static_on": 27, "_static_ones_lik": 27, "_static_tril": 27, "_static_triu": 27, "_static_zero": 27, "_static_zeros_lik": 27, "5443469": [27, 79, 460], "_containerwithdatatyp": [28, 48], "_static_astyp": 28, "718": [28, 30, 91, 197, 461], "618": [28, 30, 91, 197, 461], "static_astyp": 28, "_static_broadcast_arrai": 28, "static_broadcast_arrai": 28, "_static_broadcast_to": 28, "static_broadcast_to": 28, "_static_can_cast": 28, "from_": [28, 94, 461], "static_can_cast": 28, "_static_default_complex_dtyp": 28, "complex_dtyp": [28, 97, 119, 461], "_static_default_float_dtyp": 28, "float_dtyp": [28, 99, 121, 461], "_static_dtyp": 28, "_static_finfo": 28, "inquir": [28, 104, 107], "static_finfo": 28, "55040e": [28, 104, 461], "7976931348623157e": [28, 104, 461], "308": [28, 104, 461, 602, 665], "_static_function_supported_dtyp": 28, "_static_function_unsupported_dtyp": 28, "_static_iinfo": 28, "1800": [28, 107, 461], "1084": 28, "40000": 28, "static_iinfo": 28, "2147483648": [28, 107, 461], "2147483647": [28, 107, 461], "_static_is_bool_dtyp": 28, "dtype_in": [28, 89, 90, 103, 109, 110, 111, 112, 113, 114, 115, 130, 461], "_static_is_complex_dtyp": 28, "is_complex_dtyp": [28, 461], "roughli": [28, 643, 646, 686], "static_is_complex_dtyp": 28, "complex64": [28, 97, 111, 119, 125, 461, 652], "_static_is_float_dtyp": 28, "static_is_float_dtyp": 28, "_static_is_int_dtyp": 28, "_static_is_uint_dtyp": 28, "_static_result_typ": 28, "static_result_typ": 28, "broadcats": [28, 92], "_containerwithdevic": [29, 48], "_static_dev": 29, "static_dev": 29, "_static_to_devic": 29, "static_to_devic": 29, "contaion": [29, 135], "_containerwithelementwis": [30, 48], "_static_ab": 30, "static_ab": 30, "_static_aco": 30, "static_aco": 30, "_static_acosh": 30, "static_acosh": 30, "_static_add": 30, "static_add": [30, 650, 654, 655], "_static_asin": 30, "static_asin": 30, "524": [30, 159, 463], "412": [30, 35, 159, 463], "201": [30, 31, 159, 294, 463], "_static_asinh": 30, "static_asinh": 30, "_static_atan": 30, "static_atan": 30, "_static_atan2": 30, "static_atan2": 30, "915": [30, 162, 463], "29": [30, 32, 33, 40, 162, 375, 376, 445, 449, 463, 465, 466, 568, 569, 570], "983": [30, 162, 463], "978": [30, 58, 162, 457, 463], "696": [30, 40, 162, 463, 569], "993": [30, 162, 463], "_static_atanh": 30, "static_atanh": 30, "203": [30, 39, 163, 473, 566], "_static_bitwise_and": 30, "static_bitwise_and": 30, "_static_bitwise_invert": 30, "static_bitwise_invert": 30, "_static_bitwise_left_shift": 30, "_static_bitwise_or": 30, "static_bitwise_or": 30, "_static_bitwise_right_shift": 30, "static_bitwise_right_shift": 30, "_static_bitwise_xor": 30, "static_bitwise_xor": 30, "_static_ceil": 30, "static_ceil": 30, "_static_co": 30, "static_co": 30, "_static_cosh": 30, "static_cosh": 30, "34": [30, 31, 32, 40, 107, 169, 172, 194, 212, 369, 375, 376, 461, 463, 465, 468, 474, 508, 569, 570], "_static_deg2rad": 30, "static_deg2rad": 30, "0262": [30, 173, 206, 463], "873": [30, 173, 206, 463], "_static_divid": 30, "static_divid": 30, "_static_equ": 30, "static_equ": 30, "_static_erf": 30, "static_erf": 30, "27632612": [30, 176], "934008": [30, 176], "99999928": [30, 176], "91903949": [30, 176], "_static_exp": 30, "static_exp": 30, "59814835": [30, 177], "4131622": [30, 177], "_static_expm1": 30, "thefunct": [30, 176], "areal": 30, "static_expm1": 30, "71828175": 30, "38905621": 30, "59815216": 30, "_static_floor": 30, "static_floor": 30, "_static_floor_divid": 30, "static_floor_divid": 30, "_static_great": 30, "static_great": 30, "_static_greater_equ": 30, "static_greater_equ": 30, "_static_isfinit": 30, "999999999999": [30, 184, 463], "static_isfinit": 30, "_static_isinf": 30, "static_isinf": 30, "_static_isnan": 30, "static_isnan": 30, "_static_isr": 30, "0j": [30, 31, 187, 238, 260, 272, 463], "23j": [30, 31], "9j": [30, 31], "static_isr": 30, "_static_less": 30, "static_less": 30, "_static_less_equ": 30, "static_less_equ": 30, "_static_log": 30, "static_log": 30, "_static_log10": 30, "static_log10": 30, "898": [30, 191, 463], "0414": [30, 191, 463], "_static_log1p": 30, "static_log1p": 30, "_static_log2": 30, "_static_logaddexp": 30, "static_logaddexp": 30, "_static_logical_and": 30, "static_logical_and": 30, "_static_logical_not": 30, "static_logical_not": 30, "_static_logical_or": 30, "static_logical_or": 30, "_static_logical_xor": 30, "static_logical_xor": 30, "_static_maximum": 30, "static_maximum": 30, "_static_minimum": 30, "static_minimum": 30, "_static_multipli": 30, "static_multipli": 30, "_static_neg": 30, "static_neg": 30, "_static_not_equ": 30, "static_not_equ": 30, "_static_posit": 30, "static_posit": 30, "_static_pow": 30, "static_pow": 30, "_static_rad2deg": 30, "static_rad2deg": 30, "5160": 30, "10300": [30, 206, 463], "15500": 30, "20600": 30, "2860": [30, 206], "_static_reciproc": 30, "recirpoc": [30, 207], "static_reciproc": 30, "_static_remaind": 30, "static_remaind": 30, "_static_round": 30, "thevfunct": 30, "300": [30, 32, 209, 275, 296, 383, 414, 463, 465, 468, 504, 665], "527": [30, 209, 463], "static_round": 30, "301": [30, 209, 463], "_static_sign": 30, "static_sign": 30, "_static_sin": 30, "static_sin": 30, "757": [30, 211, 463], "959": [30, 178, 211, 463], "279": [30, 211, 275, 294, 370, 463, 465], "_static_sinh": 30, "static_sinh": 30, "835": [30, 212], "347": [30, 212, 656], "721": [30, 212], "_static_sqrt": 30, "93": [30, 32, 40, 136, 213, 375, 376, 462, 465, 569, 570], "static_sqrt": 30, "_static_squar": 30, "static_squar": 30, "_static_subtract": 30, "static_subtract": 30, "_static_tan": 30, "static_tan": [30, 650, 654], "143": [30, 48, 216, 463, 654], "_static_tanh": 30, "static_tanh": 30, "995": [30, 217, 463], "9999": 30, "_static_trapz": 30, "static_trapz": 30, "_static_trunc": 30, "static_trunc": 30, "_static_trunc_divid": 30, "644": [30, 159, 463, 673], "305": [30, 31, 35, 159, 277, 316, 463, 491], "351": [30, 173, 206, 463], "00613": [30, 173], "0154": [30, 173], "403": [30, 177], "428772": [30, 177], "649": [30, 178], "220": [30, 178], "865": [30, 178], "metho": [30, 183, 193], "7j": [30, 31, 187, 238, 260, 272, 463], "956": [30, 192], "nuner": [30, 201], "65": [30, 33, 40, 168, 201, 275, 294, 398, 443, 463, 465, 466, 468, 478, 511, 569, 570, 587], "413": [30, 206, 656], "_containerwithactivationexperiment": [31, 48], "contan": [31, 220], "19722462": [31, 220], "84729779": [31, 220], "31326163": [31, 221], "46328258": [31, 221], "51301527": [31, 221], "79813886": [31, 221], "22856998": [31, 224], "42028043": [31, 224], "31868932": [31, 224], "static_logit": 31, "static_logsigmoid": 31, "34115386": 31, "64439666": 31, "24115384": 31, "55435526": 31, "07888974": 31, "00741899": 31, "26328245": 31, "00012302": 31, "static_prelu": 31, "static_relu6": 31, "static_selu": 31, "static_thresholded_relu": 31, "_containerwithconversionexperiment": [31, 48], "_containerwithcreationexperiment": [31, 48], "frombuff": [31, 269], "expos": [31, 227, 269, 372, 465, 633, 635, 651, 669, 673], "interfac": [31, 227, 269, 636, 671, 674, 677, 678, 679, 680, 681, 682, 683, 687, 690], "\u00f0": [31, 227, 269], "static_frombuff": [31, 227], "hamming_window": [31, 269], "period": [31, 228, 229, 230, 231, 269, 275, 301, 644, 666], "coeffici": [31, 228, 269, 468, 515], "ham": [31, 228, 269], "8000": [31, 228, 269], "2000": [31, 228, 269], "4180": [31, 228], "8180": [31, 228], "hann_window": [31, 269], "hann": [31, 229, 269], "7500": [31, 229], "3455": [31, 229], "9045": [31, 229], "kaiser_bessel_derived_window": [31, 269], "suitabl": [31, 230, 231, 269, 477, 583, 604, 643, 644, 650, 666, 683], "spectral": [31, 230, 231, 269], "analysi": [31, 230, 231, 269, 683, 684], "design": [31, 230, 231, 269, 633, 635, 636, 645, 649, 651, 652, 662, 663, 664, 667, 669, 671, 677, 679, 681, 683, 686, 687, 688], "kaiser": [31, 230, 231, 269], "70710677": [31, 230, 269, 344, 345], "18493208": [31, 230, 269], "9827513": [31, 230, 269], "kaiser_window": [31, 269], "static_kaiser_window": [31, 231], "2049": [31, 231], "8712": [31, 231], "0367": [31, 231, 269], "7753": [31, 231], "static_eye_lik": 31, "static_hamming_window": 31, "static_hann_window": 31, "window_length": [31, 228, 230, 231, 234, 269], "static_hann": 31, "static_kaiser_bessel_derived_window": 31, "static_tril_indic": 31, "static_triu_indic": 31, "static_vorbis_window": 31, "vorbis_window": [31, 269], "vorbi": [31, 234, 269], "38268343": [31, 234], "92387953": [31, 234], "14943586": [31, 234, 269], "51644717": [31, 234], "85631905": [31, 234], "98877142": [31, 234], "tril_indic": [31, 269], "triu_indic": [31, 269], "_containerwithdata_typeexperiment": [31, 48], "_containerwithdeviceexperiment": [31, 48], "_containerwithelementwiseexperiment": [31, 48], "0003": [31, 235, 468, 504, 602, 605], "0006": [31, 235, 265], "75j": [31, 236, 251], "01317055": [31, 236], "05634501": [31, 236], "115": [31, 173, 206, 236, 275, 294, 463], "3461759": [31, 236], "524111": [31, 236], "335": [31, 238, 260], "345j": [31, 238, 260], "2345j": [31, 238], "mantissa": [31, 247, 272], "frist": [31, 249, 272], "coord": [31, 249], "6055": [31, 250], "1080": [31, 253], "1550": [31, 253], "130": [31, 253], "160": [31, 254], "10240": [31, 254], "60000038": [31, 255, 272], "08746284": [31, 256], "32192809": [31, 256], "000": [31, 257, 602], "took": [31, 260], "0707": [31, 262, 272], "0579": [31, 262, 272], "static_allclos": 31, "static_angl": 31, "static_binar": 31, "static_conj": 31, "static_copysign": 31, "static_count_nonzero": 31, "static_diff": 31, "static_exp2": 31, "static_fix": 31, "static_float_pow": 31, "static_fmax": 31, "static_fmin": 31, "static_fmod": 31, "static_frexp": 31, "static_gcd": 31, "static_gradi": 31, "static_hypot": 31, "static_imag": 31, "static_isclos": 31, "static_lcm": 31, "static_ldexp": 31, "static_lerp": 31, "90000057": [31, 255, 272], "80000019": [31, 255, 272], "70000076": [31, 255, 272], "55000019": [31, 255, 272], "05000019": [31, 255, 272], "static_logaddexp2": 31, "static_nan_to_num": 31, "static_nansum": 31, "static_nextaft": 31, "static_r": 31, "static_signbit": 31, "static_sinc": 31, "636": 31, "090": 31, "070": 31, "057": 31, "static_xlogi": 31, "static_zeta": 31, "0244": [31, 265], "_containerwithgeneralexperiment": [31, 48], "_containerwithgradientsexperiment": [31, 48], "_containerwithimageexperiment": [31, 48], "_containerwithlayersexperiment": [31, 48], "673": [31, 294], "0507": [31, 294], "static_adaptive_avg_pool1d": 31, "static_adaptive_avg_pool2d": 31, "static_avg_pool1d": 31, "static_avg_pool2d": 31, "static_avg_pool3d": 31, "static_dct": 31, "132": 31, "182": 31, "242": 31, "253": [31, 212, 463], "515": [31, 474, 569], "467": 31, "static_dft": 31, "static_embed": 31, "static_fft": 31, "static_ifft": 31, "static_interpol": 31, "static_max_pool1d": 31, "static_max_pool2d": 31, "max_pool2dd": 31, "static_max_pool3d": 31, "_containerwithlinearalgebraexperiment": [31, 48], "933034": [31, 276, 307], "eigenvealu": [31, 310, 500], "xx": [31, 310, 312, 500], "37228107": [31, 310, 500], "3722816": [31, 310, 500], "8245648": [31, 310, 500], "41597357": [31, 310, 500], "56576747": [31, 310, 500], "9093767": [31, 310, 500], "56155": [31, 276, 311], "82842": [31, 276, 311], "450": [31, 313], "static_adjoint": 31, "static_cond": 31, "static_cov": [31, 276, 308], "static_diagflat": 31, "static_eig": 31, "static_eigh_tridiagon": 31, "static_eigv": 31, "static_kron": 31, "kroneck": [31, 276, 313], "static_matrix_exp": 31, "static_multi_dot": 31, "regular": [31, 276, 315, 468, 505, 643, 644, 663, 683], "_containerwithlossesexperiment": [31, 48], "binary_cross_entropy_with_logit": [31, 277, 651], "pos_weight": [31, 277, 316], "027": [31, 277, 316], "263": [31, 277, 316, 371, 465], "953": [31, 277, 316], "static_binary_cross_entropy_with_logit": 31, "_containerwithmanipulationexperiment": [31, 48], "atleast": [31, 278, 318, 319, 320], "ary1": [31, 278, 318, 319, 320], "ary2": [31, 278, 318, 319, 320], "3d": [31, 275, 296, 320, 618, 659, 667, 676], "broadcast_shap": [31, 278, 602], "static_concat_from_sequ": [31, 322], "30192195": [31, 332], "static_as_strid": 31, "static_atleast_1d": 31, "static_atleast_2d": 31, "static_atleast_3d": 31, "static_broadcast_shap": 31, "static_dsplit": 31, "static_dstack": 31, "static_expand": 31, "static_flatten": 31, "static_fliplr": 31, "static_flipud": 31, "static_heavisid": 31, "static_hsplit": 31, "static_hstack": 31, "static_i0": 31, "static_moveaxi": 31, "static_pad": 31, "static_rot90": 31, "static_take_along_axi": 31, "static_top_k": 31, "static_vsplit": 31, "static_vstack": 31, "_containerwithnormsexperiment": [31, 48], "static_l2_norm": [31, 344], "16903085": [31, 344, 345], "50709254": [31, 344, 345], "84515423": [31, 344, 345], "44183609": [31, 344, 345], "56807494": [31, 344, 345], "69431382": [31, 344, 345], "89442718": [31, 344, 345], "44721359": [31, 344, 345], "static_lp_norm": [31, 345], "static_batch_norm": 31, "static_instance_norm": 31, "12500000": 31, "37500000": 31, "62500000": 31, "27500000": 31, "35000000": 31, "42500000": 31, "0000000": 31, "5000000": 31, "2500000": 31, "_containerwithrandomexperiment": [31, 48], "43643127": [31, 348], "32325703": [31, 348], "24031169": [31, 348], "34251311": [31, 348], "31692529": [31, 348], "3405616": [31, 348], "5319725": [31, 348], "22458365": [31, 348], "24344385": [31, 348], "26588406": [31, 348], "61075421": [31, 348], "12336174": [31, 348], "51142915": [31, 348], "25041268": [31, 348], "23815817": [31, 348], "64042903": [31, 348], "25763214": [31, 348], "10193883": [31, 348], "31624692": [31, 348], "46567987": [31, 348], "21807321": [31, 348], "37677699": [31, 348], "39914594": [31, 348], "22407707": [31, 348], "static_bernoulli": 31, "static_beta": 31, "static_dirichlet": 31, "static_poisson": 31, "_containerwithsearchingexperiment": [31, 48], "static_unravel_index": 31, "_containerwithsetexperiment": [31, 48], "_containerwithsortingexperiment": [31, 48], "static_lexsort": 31, "static_msort": 31, "_containerwithstatisticalexperiment": [31, 48], "static_bincount": 31, "static_corrcoef": 31, "static_median": 31, "static_nanmean": 31, "static_nanmedian": 31, "static_quantil": 31, "_containerwithutilityexperiment": [31, 48], "_containerwithgener": [32, 48], "_static_all_equ": 32, "static_all_equ": 32, "_static_array_equ": 32, "x0": [32, 367, 465, 654], "level": [32, 367, 616, 633, 637, 638, 642, 644, 650, 656, 659, 661, 663, 667, 668, 669, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690], "a0": [32, 367], "static_array_equ": 32, "_static_assert_supports_inplac": 32, "_static_clip_matrix_norm": 32, "static_clip_matrix_norm": 32, "849": [32, 370, 371, 465], "_static_clip_vector_norm": 32, "static_clip_vector_norm": 32, "_static_einops_rearrang": 32, "static_einops_rearrang": 32, "_static_einops_reduc": 32, "static_einops_reduc": 32, "29333329": [32, 376, 465], "53000069": [32, 376, 465], "39666676": [32, 376, 465], "20666695": [32, 376, 465], "_static_einops_repeat": 32, "static_einops_repeat": 32, "_static_fourier_encod": 32, "static_fourier_encod": 32, "classivi": [32, 38, 379, 470, 476, 537, 541, 579], "89858720e": [32, 379], "79717439e": [32, 379], "_static_gath": 32, "static_gath": 32, "_static_gather_nd": 32, "200": [32, 168, 275, 296, 383, 414, 463, 465, 672], "400": [32, 275, 296, 383, 414, 465, 468, 504, 651], "500": [32, 275, 296, 383, 465], "static_gather_nd": 32, "_static_get_num_dim": 32, "static_get_num_dim": 32, "_static_has_nan": 32, "leafwis": 32, "static_has_nan": 32, "_static_inplace_decr": 32, "_static_inplace_incr": 32, "_static_inplace_upd": 32, "_static_is_arrai": 32, "static_is_arrai": 32, "_static_is_ivy_arrai": 32, "static_is_ivy_arrai": 32, "_static_is_native_arrai": 32, "static_is_native_arrai": 32, "_static_scatter_flat": 32, "ref": [32, 36, 188, 201, 203, 208, 215, 463, 470, 539, 655, 662], "_static_scatter_nd": 32, "70": [32, 275, 294, 383, 414, 468, 478, 511, 587, 636], "static_scatter_nd": 32, "_static_stable_divid": 32, "22222222": 32, "11111111": 32, "857": [32, 426, 465], "444": 32, "_static_stable_pow": 32, "_static_supports_inplace_upd": 32, "_static_to_list": 32, "static_to_list": 32, "_static_to_numpi": 32, "static_to_numpi": 32, "_static_to_scalar": 32, "static_to_scalar": 32, "_static_value_is_nan": 32, "452": 32, "static_value_is_nan": 32, "833": [32, 371], "600": [32, 275, 296, 383, 651], "700": [32, 383], "items": [32, 47, 465], "static_isin": 32, "static_items": 32, "complex128": [32, 97, 111, 119, 125, 408, 461, 465, 602, 652], "425": [32, 441], "_containerwithgradi": [33, 48], "_static_stop_gradi": 33, "static_stop_gradi": 33, "87": [33, 168, 192, 443, 463, 466], "976": [33, 217, 443, 463, 466], "49e": [33, 443, 466], "74e": [33, 443, 466], "95e": [33, 443, 466], "024": [33, 277, 316, 443, 466], "096": [33, 173, 443, 463, 466], "216": [33, 36, 443, 466, 521], "384": [33, 443, 466], "626": [33, 443, 466], "en": [33, 443, 444, 466, 468, 524, 651], "wikipedia": [33, 443, 444, 466, 468, 524], "wiki": [33, 443, 444, 466, 468, 524], "stochastic_gradient_desc": [33, 443, 444, 466], "01099": [33, 444], "01003": [33, 444, 466], "01015": [33, 444, 466], "99936122": [33, 444, 466], "99936116": [33, 444, 466], "99936128": [33, 444, 466], "99936104": [33, 444, 466], "w_new": [33, 447, 466], "88": [33, 40, 54, 169, 447, 457, 463, 466, 468, 474, 478, 511, 517, 570, 587], "708": [33, 449, 466], "445": [33, 449, 466], "6e": [33, 449, 466], "00036": [33, 449, 466], "00016": [33, 449, 466], "00049": [33, 449, 466], "layerwis": [33, 450, 466], "_containerwithimag": [34, 48], "_containerwithlay": [35, 48], "_static_conv1d": 35, "static_conv1d": 35, "_static_conv1d_transpos": 35, "static_conv1d_transpos": 35, "112": [35, 468, 478, 482, 511, 587], "_static_conv2d": 35, "ey": [35, 460, 467, 483, 489, 667, 674], "static_conv2d": 35, "_static_conv2d_transpos": 35, "static_conv2d_transpos": 35, "_static_conv3d": 35, "fdfh": [35, 485], "static_conv3d": 35, "_static_conv3d_transpos": 35, "static_conv3d_transpos": 35, "_static_depthwise_conv2d": 35, "inp": [35, 467, 489], "static_depthwise_conv2d": 35, "_static_dropout": 35, "static_dropout": 35, "_static_dropout1d": 35, "static_dropout1d": 35, "_static_dropout3d": 35, "_static_linear": 35, "278": [35, 467, 490, 491], "105": [35, 467, 468, 469, 490, 491, 511, 525], "static_linear": 35, "352": [35, 467, 491], "195": [35, 491], "_static_lstm_upd": 35, "_static_multi_head_attent": 35, "_static_scaled_dot_product_attent": 35, "static_scaled_dot_product_attent": 35, "_containerwithlinearalgebra": [36, 48], "_static_choleski": 36, "static_choleski": 36, "577": [36, 468, 495], "707": [36, 468, 495], "static_rol": [36, 38, 650, 654], "_static_cross": 36, "static_cross": 36, "_static_det": 36, "_static_diag": 36, "_static_diagon": 36, "static_diagon": 36, "_static_eigh": 36, "_static_eigvalsh": 36, "static_eigvalsh": 36, "51572949": [36, 468, 502], "17091519": [36, 468, 502], "3448143": [36, 468, 502], "88178420e": [36, 468, 502], "35898387e": [36, 468, 502], "46410179e": [36, 468, 502], "_static_inn": 36, "_static_inv": 36, "static_inv": [36, 468, 504], "_static_matmul": 36, "matul": 36, "static_matmul": 36, "_static_matrix_norm": 36, "deimens": 36, "static_matrix_norm": 36, "_static_matrix_pow": 36, "_static_matrix_rank": 36, "static_matrix_rank": 36, "_static_matrix_transpos": 36, "static_matrix_transpos": 36, "_static_out": 36, "n1": [36, 80, 460], "n2": [36, 80, 460], "static_out": [36, 511], "_static_pinv": 36, "static_pinv": 36, "_static_qr": 36, "_static_slogdet": 36, "static_slogdet": 36, "0986123": [36, 468, 514], "_static_solv": 36, "_static_svd": 36, "static_svd": 36, "au": [36, 516], "aS": [36, 516], "avh": [36, 516], "bu": [36, 516, 636], "bvh": [36, 516], "_static_svdv": 36, "_static_tensordot": 36, "_static_tensorsolv": 36, "_static_trac": 36, "static_trac": 36, "_static_vand": 36, "static_vand": 36, "343": [36, 209, 463, 521], "512": [36, 467, 482, 521, 633], "729": [36, 521, 673], "_static_vecdot": 36, "_static_vector_norm": 36, "static_vector_norm": 36, "77359247": [36, 523], "_static_vector_to_skew_symmetric_matrix": 36, "99999988": [36, 512], "_containerwithloss": [37, 48], "_static_binary_cross_entropi": 37, "static_binary_cross_entropi": 37, "511": [37, 469, 525, 527], "_static_cross_entropi": 37, "static_cross_entropi": 37, "20397282": 37, "83258148": 37, "60943794": 37, "_static_sparse_cross_entropi": 37, "static_sparse_cross_entropi": 37, "5108256": [37, 526], "609438": [37, 468, 514, 526], "_containerwithmanipul": [38, 48], "_static_clip": 38, "static_clip": 38, "_static_concat": 38, "_static_constant_pad": 38, "static_constant_pad": 38, "_static_expand_dim": 38, "static_expand_dim": 38, "container_axi": [38, 470, 531], "_static_flip": 38, "static_flip": 38, "_static_permute_dim": 38, "static_permute_dim": 38, "_static_repeat": 38, "static_repeat": 38, "_static_reshap": 38, "static_reshap": 38, "_static_rol": 38, "positivclip": 38, "_static_split": 38, "static_split": 38, "_static_squeez": 38, "static_squeez": 38, "_static_stack": 38, "leavv": 38, "static_stack": 38, "_static_swapax": 38, "_static_til": 38, "static_til": 38, "_static_unstack": 38, "static_unstack": 38, "_static_zero_pad": 38, "repreat": [38, 534], "_containerwithnorm": [39, 48], "342": [39, 473, 566], "0427": [39, 473, 566], "299": [39, 473, 566], "241": [39, 566], "_containerwithrandom": [40, 48], "_static_multinomi": 40, "_static_randint": 40, "static_randint": 40, "_static_random_norm": 40, "static_random_norm": 40, "651": 40, "_static_random_uniform": 40, "static_random_uniform": 40, "481": 40, "0999": 40, "_static_shuffl": 40, "static_shuffl": 40, "431": [40, 569], "83": [40, 213, 275, 294, 463, 467, 491, 569], "274": [40, 569], "91": [40, 169, 463, 467, 468, 474, 478, 491, 511, 569, 587], "_containerwithsearch": [41, 48], "_static_argmax": 41, "static_argmax": 41, "_static_argmin": 41, "static_argmin": 41, "_static_argwher": 41, "static_argwher": 41, "_static_nonzero": 41, "_static_wher": 41, "static_wher": 41, "_containerwithset": [42, 48], "_static_unique_al": 42, "static_unique_al": [42, 578], "_static_unique_count": 42, "static_unique_count": 42, "_static_unique_invers": 42, "static_unique_invers": 42, "_static_unique_valu": 42, "_containerwithsort": [43, 48], "_static_argsort": 43, "static_argsort": 43, "_static_searchsort": 43, "_static_sort": 43, "static_sort": 43, "_containerwithstatist": [44, 48], "_static_cumprod": 44, "static_cumprod": 44, "_static_cumsum": 44, "static_cumsum": 44, "_static_prod": 44, "static_prod": 44, "11000001": [44, 591], "23100001": [44, 591], "30800003": [44, 478, 591], "_static_sum": 44, "_static_var": 44, "static_var": 44, "12666667": [44, 478, 594], "11555555": [44, 478, 594], "60000002": [44, 48, 589], "respectv": [44, 592], "81649649": [44, 592], "94280904": [44, 592], "509902": [44, 478, 592], "2472192": [44, 592], "44948983": [44, 592], "41421354": [44, 592], "contian": [44, 594], "6666667": [44, 594], "_containerwithutil": [45, 48], "_static_al": 45, "static_al": 45, "_static_ani": 45, "static_ani": 45, "add_ivy_container_instance_method": 46, "containerexampl": 46, "__abs__": [47, 48], "__add__": [47, 48, 647, 650, 654, 655, 658, 663, 664, 671], "__eq__": [47, 48], "__ge__": [47, 48], "__gt__": [47, 48, 667], "__le__": [47, 48], "__lt__": [47, 48], "__ne__": [47, 48], "__pow__": [47, 48, 671], "69678056": 47, "59876156": 47, "82660675": 47, "__radd__": [47, 48, 654, 655, 663], "__rrshift__": [47, 48], "__rshift__": [47, 48], "__rsub__": [47, 48], "__sub__": [47, 48, 647, 650, 654, 658, 671], "__truediv__": [47, 48, 647, 650, 654], "__xor__": [47, 48], "referenc": [47, 662], "hardwar": [47, 613, 636, 643, 667, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689], "resid": [47, 470, 531, 613, 649, 663, 669, 673], "mt": [47, 671], "hopefulli": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676], "overview": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 649, 651, 665, 668, 676], "submodul": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 616, 617, 618, 619, 620, 621, 622, 642, 643, 644, 646, 649, 651, 653, 659, 660, 665, 668, 669, 673, 678], "question": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "pleas": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "reach": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 559, 614, 615, 617, 618, 619, 620, 621, 622, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "discord": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 633, 635, 636, 637, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "forum": [47, 48, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 614, 615, 617, 618, 619, 620, 621, 622, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "eq": 48, "ge": 48, "gt": [48, 664, 669], "le": 48, "lt": 48, "ne": 48, "75979435": 48, "52153397": 48, "13532257": 48, "rshift": 48, "truediv": 48, "66666669": [48, 445, 466], "custom_object": [51, 53, 457], "identifi": [51, 53, 457, 646, 651, 665, 667], "user": [51, 53, 257, 272, 278, 336, 457, 616, 618, 619, 633, 635, 636, 639, 643, 644, 645, 647, 648, 650, 651, 652, 656, 660, 661, 662, 663, 665, 667, 668, 669, 677, 681, 683, 689, 690], "xxxxxxxxxxxxxx": [51, 53, 457], "custom_fn": [51, 53, 457], "lambda": [51, 53, 374, 445, 446, 448, 455, 457, 465, 466, 467, 472, 493, 554, 555, 642, 656, 659, 660, 661, 664, 667, 669, 672], "24000001": [54, 457], "703": [55, 457], "683": [55, 457], "408": [55, 457], "313": [55, 457], "437": [55, 457], "40337825": [56, 457], "56114835": [56, 457], "20788449": [56, 457], "214": [58, 457], "891": [58, 457], "846": [58, 457], "985": [58, 457], "0768": [59, 173, 457, 463], "231": [59, 457], "body_fn": [61, 62, 63, 64, 459], "orelse_fn": [61, 63, 459], "chosen": [65, 162, 460, 463, 475, 577, 642, 651, 663], "ml_framework": [65, 460], "distanc": [65, 460], "adjac": [65, 460], "nestedsequ": [66, 67, 460], "typevar": [66, 67, 460], "supportsbufferprotocol": [66, 67, 460], "static_copy_arrai": [71, 460], "intdtyp": [74, 84, 88, 100, 111, 115, 122, 128, 460, 461], "suppos": [74, 375, 460, 465, 665], "numrow": [74, 460], "numcolumn": [74, 460], "interchang": [75, 460, 470, 540], "33333337": [78, 445, 460, 466], "66666663": [78, 460], "gpu": [78, 134, 136, 137, 140, 142, 144, 146, 147, 148, 151, 153, 154, 460, 462, 633, 644, 653, 671, 681, 683, 686, 687, 688], "41588834": [79, 460], "7827941": [79, 460], "6227766": [79, 460], "23413252": [79, 460], "n3": [80, 460], "similarli": [80, 232, 233, 269, 460, 648, 652, 663, 667, 671, 689], "xv": [80, 460], "yv": [80, 460], "x_nativ": [81, 460, 662], "y_nativ": [81, 460], "z_nativ": [81, 460], "locat": [82, 460, 474, 477, 567, 583, 642, 644, 648, 649, 653, 663, 664, 665, 666, 681], "d_type": [83, 460], "__new__": [83, 460], "y1": [84, 88, 226, 269, 460], "y2": [84, 88, 460], "y3": [84, 88, 460], "incompat": [93, 461], "data_type_funct": [94, 461], "uint8": [94, 101, 105, 115, 118, 123, 129, 461, 602, 652, 665], "helper": [95, 461, 597, 598, 599, 600, 606, 607, 633, 642, 649, 652, 656, 672, 678], "closest": [96, 170, 179, 180, 209, 218, 461, 463, 665, 667], "xtype": [96, 461], "ytype": [96, 461], "native_uint16": [96, 461], "complexdtyp": [97, 111, 119, 461], "set_default_complex_dtyp": [97, 125, 461], "4294": [97, 99, 461], "967346": [97, 99, 461], "floatdtyp": [99, 121, 461], "set_default_float_dtyp": [99, 108, 119, 127, 461, 652], "int_dtyp": [100, 122, 461], "set_default_int_dtyp": [100, 108, 128, 461, 652], "4294967346": [100, 101, 461], "uint_dtyp": [101, 123, 461], "uint": [101, 115, 123, 129, 461, 652, 664], "uintdtyp": [101, 115, 123, 129, 461], "set_default_uint_dtyp": [101, 108, 129, 461], "native_bool": [103, 461], "followng": [104, 461], "ieee": [104, 158, 178, 192, 208, 213, 458, 461, 463, 636], "754": [104, 158, 178, 192, 208, 213, 458, 461, 463, 636], "smallest_norm": [104, 461], "bfloat16": [105, 461, 602, 652, 663, 665, 666], "unsupport": [106, 138, 380, 381, 461, 462, 465, 597, 600, 643, 657, 663], "encapsul": [107, 461, 651], "314": [107, 238, 260, 272, 461], "9223372036854775808": [107, 461], "9223372036854775807": [107, 461], "65535": [107, 461], "4294967295": [107, 461], "un": [109, 461, 669], "native_uint8": [109, 461], "type1": [116, 461], "type2": [116, 461], "array_api_promot": [116, 117, 461, 602, 603], "unexpect": [117, 461, 652], "default_complex_dtyp": [119, 461], "default_dtype_stack": [120, 126, 461], "unset_default_dtyp": [120, 461], "native_uint64": [120, 461], "default_float_dtyp": [121, 461, 652], "default_int_dtyp": [122, 128, 461, 652], "default_uint_dtyp": [123, 129, 461], "ret1": [124, 461], "ret2": [124, 461], "reset": [125, 126, 127, 128, 129, 153, 435, 436, 437, 438, 439, 440, 461, 462, 465], "default_complex_dtype_stack": [125, 461], "set_default_dtyp": [126, 461, 652, 659], "default_float_dtype_stack": [127, 461], "native_float16": [130, 461], "unmodifi": [132, 462, 648, 652], "tpu": [132, 147, 152, 462, 653, 683, 686], "clear": [133, 462, 633, 635, 636, 637, 642, 644, 648, 652, 653, 654, 663, 667, 669, 671, 683], "cach": [133, 369, 462, 465, 626, 659, 662, 665], "id": [134, 462, 619, 633, 639, 641, 643, 647, 649, 650, 657, 661], "aliv": [139, 143, 145, 384, 411, 412, 462, 465, 653], "139740789224448": [139, 462], "core": [141, 462, 633, 635, 642, 643, 653, 665, 674, 681, 682, 683, 684, 688, 690], "physic": [141, 462], "default_devic": [143, 146, 147, 153, 462, 653, 656], "process_specif": [144, 154, 462], "percentag": [144, 462], "ram": [144, 151, 154, 462], "alon": [144, 154, 462, 633, 639, 665], "036902561555": [144, 462], "7024003467681645": [144, 462], "as_native_dev": [144, 462], "7095597456708771": [144, 462], "attr_onli": [145, 462], "chunk": [147, 148, 149, 462], "codebas": [147, 148, 462, 637, 638, 645, 652, 662, 663, 665, 666, 668], "split_factor": [147, 462, 656], "max_chunk_s": [149, 462], "chunk_siz": [149, 462], "input_ax": [149, 462], "output_ax": [149, 462], "usag": [149, 462, 636, 652, 662, 665, 669, 677, 686], "fed": [149, 462, 673], "fist": [149, 462], "gb": [151, 154, 462, 643], "66700032": [151, 462], "589934592": [151, 462], "set_default_devic": [153, 462, 653], "219563008": [154, 462], "902400346": [154, 462], "525205504": [154, 462], "magnitud": [155, 158, 463, 468, 516, 517], "particular": [155, 196, 463, 603, 643, 644, 646, 648, 651, 652, 654, 660, 662, 663, 665, 666, 667, 679, 683, 689], "princip": [156, 159, 161, 262, 272, 463], "domain": [156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 193, 211, 212, 213, 216, 217, 262, 272, 463, 655, 681, 683], "codomain": [156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 193, 211, 212, 213, 216, 217, 262, 272, 463, 655], "\u03c0": [156, 159, 161, 162, 458, 463], "x1_i": [158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 463, 646], "neither": [158, 456, 463, 466, 651, 663, 667], "nor": [158, 456, 463, 466, 651, 663, 687], "2019": [158, 178, 192, 463, 683, 686], "too": [158, 463, 617, 642, 643, 644, 646, 652, 656, 657, 677], "overflow": [158, 463, 468, 478, 514, 593, 641, 652], "commut": [158, 463], "809": [160, 463], "199": [160, 463], "569": [160, 463], "733": [160, 463], "notat": [162, 463, 478, 587, 651], "denot": [162, 452, 456, 463, 466, 619], "quadrant": [162, 463], "rai": [162, 463, 636], "3\u03c0": [162, 463], "bitwis": [164, 167, 169, 198, 463], "170": [168, 463], "243": [168, 463], "225": [168, 463], "xor": [169, 198, 463], "77": [169, 463, 468, 478, 511, 587], "654": [171, 463, 651], "368": [172, 463], "670": [172, 463], "202": [172, 463, 646], "548": [172, 463], "1490": [172, 463], "0192": [173, 463], "0384": [173, 463], "0576": [173, 463], "698": [174, 463], "truth": [175, 182, 183, 188, 189, 203, 463, 597, 599, 663, 665], "purpos": [178, 192, 232, 233, 269, 463, 468, 514, 644, 647, 650, 651, 654, 656, 658, 659, 660, 663, 665, 667, 668, 671, 678, 682, 684, 687, 688, 689], "accur": [178, 192, 463, 468, 514], "fdlibm": [178, 192, 463], "compliant": [178, 192, 196, 197, 463, 478, 588, 589, 590, 592], "potenti": [178, 192, 463, 633, 642, 643, 644, 651, 652, 663, 668, 686], "632": [178, 463], "20e": [178, 463], "72e": [178, 463], "greatest": [179, 180, 248, 272, 463], "742": [192, 463], "NOT": [196, 463, 642], "unspecifi": [205, 208, 276, 310, 463, 468, 470, 500, 501, 539, 662], "versu": [205, 463], "52095687": [205, 463], "92457771": [205, 463], "49372482": [205, 463], "22738838": [205, 463], "156": [205, 463, 602], "5877228": [205, 463], "189": [206, 463], "252": [206, 463], "315": [206, 463], "378": [206, 463], "1150": [206, 463], "2890": [206, 463], "172": [206, 463], "229": [206, 463], "487": [206, 463, 467, 491], "344": [206, 463], "semant": [208, 463, 635, 669, 674, 684], "That": [208, 463, 643, 644, 647, 665, 671, 672, 673, 684], "primarili": [208, 463, 644, 650, 683], "reason": [208, 463, 636, 642, 644, 646, 647, 650, 651, 652, 654, 659, 662, 663, 666, 667, 669, 671, 689], "deliber": [209, 463, 667], "imprecis": [209, 463], "5654": [209, 463], "034": [209, 463], "433": [209, 446, 448, 455, 463, 466], "932": [211, 463], "746": [211, 463], "443": [211, 463], "657": [211, 371, 463, 465], "indistinguish": [213, 463], "infinit": [213, 463], "32455532": [213, 463], "89897949": [213, 463], "169": [213, 463], "546": [216, 463, 467, 491], "916": [216, 463, 469, 525], "996": [216, 463], "462": [217, 463], "604": [217, 463], "984": [217, 463], "997": [217, 463], "0375": [218, 463], "032": [218, 463], "20141329": [221, 267], "40318608": [221, 267], "48683619": [221, 267], "46328247": [221, 267], "59813893": [221, 267], "43748799": [221, 267], "parametr": [222, 267, 646, 665, 683], "6705687": [224, 267], "52016652": [224, 267], "40560818": [224, 267], "45630932": [224, 267], "everywher": [226, 269], "t1": [226, 269], "plu": [227, 269], "bde": [227, 269], "0800": [228, 269], "3979": [228, 269], "9121": [228, 269], "5400": [228, 269], "han": [229, 269], "taper": [229, 269], "00713103": [230, 269], "99997455": [230, 269], "kaiser_derived_window": [230, 269], "00726415": [230, 269], "9999736": [230, 269], "2773e": [231, 269], "0172e": [231, 269], "9294e": [231, 269], "4149": [231, 269], "9138": [231, 269], "5529": [231, 269], "col": [232, 233, 269], "retain": [232, 233, 269, 445, 466, 661, 678], "primari": [232, 233, 269, 285, 352, 645, 648, 652, 660, 662, 663, 665, 667, 677, 678], "downward": [232, 233, 269], "upward": [232, 233, 269], "2xn": [232, 233, 269], "subarrai": [232, 233, 269], "complementari": [234, 269, 681, 689], "38268346": [234, 269], "38268352": [234, 269], "8563191": [234, 269], "14943568": [234, 269], "much": [235, 252, 272, 617, 636, 642, 643, 644, 647, 650, 652, 662, 663, 664, 666, 669, 671, 672, 681, 683, 689, 690], "yj": [236, 251, 272], "arrrai": [238, 272], "355j": [238, 260, 272], "55j": [238, 260, 272], "position": [244, 272], "inexact": [244, 272], "decompos": [247, 272, 663], "triangl": [250, 272], "999999e": [252, 272], "65999985": [255, 272], "59999943": [255, 272], "52000141": [255, 272], "1500001": [255, 272, 376, 465], "behaviour": [257, 272, 641, 642, 644, 645, 646, 647, 650, 652, 655, 656, 658, 662, 663, 665, 666, 671], "Not": [258, 272, 276, 312, 458, 648, 664, 672, 673, 677], "suppli": [261, 272, 278, 336, 647], "217234": [262, 272], "hurwitz": [265, 272], "custom_grad_func": [266, 274], "bind": [266, 274, 642, 650, 661, 682, 683], "upstream": [266, 274, 643, 644, 646, 661], "bind_custom_gradient_funct": [274, 661], "avg": [275, 291, 293], "dimensio": [275, 292], "tranform": [275, 294], "22e": [275, 294], "24e": [275, 294], "91e": [275, 294], "10e": [275, 294], "16e": [275, 294], "81e": [275, 294], "280": [275, 294], "container_n": [275, 294], "container_typ": [275, 294, 465], "container_norm": [275, 294], "randomli": [275, 296, 297, 467, 490, 602, 603, 604, 605, 608, 618], "ed": [275, 296, 297], "rest": [275, 278, 296, 297, 323, 643, 649, 651, 674, 685], "4d": [275, 297], "5d": [275, 297], "emb": [275, 298], "frac": [275, 281, 299, 300, 342, 343], "02733949e": [275, 299], "00j": [275, 299], "49660576e": [275, 299], "68178638e": [275, 299], "01j": [275, 299, 300], "98912367e": [275, 299], "21802426e": [275, 299, 300], "04549134e": [275, 299, 300], "82842712e": [275, 299, 300], "86902654e": [275, 299, 300], "25501143e": [275, 299, 300], "32978028e": [275, 299, 300], "52068201e": [275, 299, 300], "71158374e": [275, 299, 300], "15318303e": [275, 300], "15148591e": [275, 300], "19j": [275, 300], "25000000e": [275, 300], "35378602e": [275, 300], "02j": [275, 300], "65404249e": [275, 300], "17611649e": [275, 300], "24320230e": [275, 300], "79344813e": [275, 300], "22374531e": [275, 300], "45929364e": [275, 300], "14208718e": [275, 300], "07177031e": [275, 300], "interp": [275, 667], "xp": [275, 301, 646], "fp": [275, 301], "bicubic_tensorflowbicub": [275, 302], "linalg": [276, 308, 468, 514, 642, 662, 664], "6667": [276, 308], "aw": [276, 308, 636], "48447205": [276, 308], "22727273": [276, 308], "superdiagon": [276, 309, 468, 498], "subdiagon": [276, 309, 468, 498], "eigendecomposit": [276, 310, 468, 500, 501], "qlq\u1d40": [276, 310, 468, 500, 501], "orthogon": [276, 310, 468, 500, 501], "behav": [276, 310, 468, 500, 642, 646, 656, 662, 663, 664, 671, 684], "tridiagon": [276, 311], "18749806": [276, 311], "81250191": [276, 311], "350609": [276, 311], "56713122": [276, 311], "06563006": [276, 311], "74146169": [276, 311], "74215561": [276, 311], "0636413": [276, 311], "56742489": [276, 311], "35291126": [276, 311], "necessarili": [276, 312, 647, 650], "463": [277, 316], "022": [277, 316], "059": [277, 316], "601": [277, 316], "015": [277, 316], "868": [277, 316], "908": [277, 316], "672": [277, 316], "002": [277, 316], "029": [277, 316], "144": [277, 316], "822": [277, 316], "whilst": [278, 318, 319, 320, 674, 678, 683], "ary3": [278, 320], "third": [278, 324, 468, 476, 516, 578, 649, 662, 677, 682, 683, 689], "horizot": [278, 331], "ndenumer": 278, "multidimension": [278, 334, 335, 683], "ndindex": 278, "shortcut": [278, 336, 643], "linear_ramp": [278, 336], "reflect": [278, 336, 639, 644, 647, 665], "ramp": [278, 336], "mirror": [278, 336, 642, 683], "begin": [278, 336, 472, 547, 558, 616, 643, 646, 664], "padding_func": [278, 336], "iaxis_pad_width": [278, 336], "iaxi": [278, 336], "style": [278, 336, 475, 576, 644, 683], "unalt": [278, 336], "extend": [278, 336, 644, 648, 649, 655, 656, 658, 663, 666, 677, 680, 683, 689], "batch_mean": [281, 342, 343], "batch_var": [281, 342, 343], "running_vari": [281, 342, 343], "3333": [281, 345], "6666": [281, 345], "distrubut": [282, 346], "paramter": [282, 346], "seen": [282, 348, 626, 635, 636, 651, 654, 656, 663, 665, 669, 671, 672, 689], "multivari": [282, 348], "bayesian": [282, 348], "indirect": [285, 352], "secondari": [285, 352], "is_ivy_sparse_arrai": 286, "is_native_sparse_arrai": 286, "native_sparse_arrai": 286, "coo_indic": [286, 356], "crow_indic": [286, 356], "col_indic": [286, 356], "ccol_indic": [286, 356], "row_indic": [286, 356], "dense_shap": [286, 356], "native_sparse_array_to_indices_values_and_shap": 286, "nativesparsearrai": 286, "sparsearrai": 286, "idx": [365, 465, 633, 653, 671], "inspect": [365, 465], "retriev": [365, 465, 644, 663], "help": [365, 465, 478, 593, 617, 633, 638, 639, 640, 642, 643, 647, 648, 650, 651, 652, 654, 660, 662, 663, 665, 666, 667, 671, 672, 673, 675, 678, 679, 683, 685, 689], "receiv": [366, 409, 465, 471, 544, 545, 618, 644, 652, 653, 665, 667], "compile_on_next_step": [366, 465, 619, 621, 673], "decor": [369, 465, 602, 604, 608, 646, 647, 650, 652, 653, 659, 660, 662, 663, 664], "recalcul": [369, 465], "my_sum": [369, 465], "val1": [369, 465], "val2": [369, 465], "cached_sum": [369, 465], "line_eq": [369, 465], "slp": [369, 465], "itc": [369, 465], "cached_line_eq": [369, 465], "0353": [370, 465], "424": [370, 465], "58": [370, 465], "176": [370, 465], "339": [370, 465], "271": [370, 465], "168": [370, 465], "391": [370, 465], "417": [371, 465], "583": [371, 465], "0667": [371, 465], "267": [371, 465], "131": [371, 465], "394": [371, 465, 474, 572], "526": [371, 465], "788": [371, 465], "public": [372, 465, 651, 661, 671, 686], "default_str": [374, 465], "46999979": [375, 465], "66000009": [375, 465], "93000001": [375, 465], "29000092": [375, 465], "33999991": [375, 465], "6400001": [375, 465], "96000004": [375, 465], "36000013": [375, 465], "51999998": [375, 465], "67000008": [375, 465], "30000001": [375, 465, 476, 579], "960": [375, 465], "1280": [375, 465, 633], "3600": [375, 465], "bottom": [375, 465, 643, 651, 689], "h1": [375, 465], "w1": [375, 465], "40499985": [376, 465], "61000061": [376, 465], "array_mod": [385, 465], "set_array_mod": [385, 435, 465], "exception_trace_mod": [386, 465], "set_exception_trace_mod": [386, 436, 465, 656], "get_exception_trace_mod": [390, 416, 436, 465], "set_nestable_mod": [390, 437, 465], "set_queue_timeout": [392, 438, 465], "max_depth": [393, 465, 472, 559], "seen_set": [393, 465], "local_set": [393, 465], "set_show_func_wrapper_trace_mod": [394, 440, 465, 656], "path": [395, 465, 599, 608, 625, 643, 649, 662, 663, 664, 683], "directori": [395, 423, 462, 465, 639, 640, 642, 643, 644, 651, 663, 665], "temporari": [395, 423, 465, 642, 652], "thrown": [400, 465, 647, 653, 656, 677], "ivyexcept": [400, 428, 456, 465, 466, 629, 656, 662, 663], "allow_dupl": [409, 465], "best": [409, 465, 633, 638, 641, 642, 643, 644, 645, 651, 652, 657, 665, 666, 686, 687], "o": [409, 465, 633, 643, 645, 651, 669], "fork": [410, 465, 638, 646, 651], "forkserv": [410, 465], "spawn": [410, 465], "garbag": [412, 465], "collector": [412, 465], "get_all_arrays_in_memori": [412, 465], "consol": [412, 465, 644, 665, 671], "get_array_mod": [415, 435, 465], "rtype": [415, 416, 419, 421, 422, 465], "exept": [416, 465], "get_min_bas": [417, 465], "get_min_denomin": [418, 465], "get_nestable_mod": [419, 437, 465], "get_queue_timeout": [420, 438, 465], "shape_array_mod": [421, 439, 465], "get_show_func_wrapper_trace_mod": [422, 440, 465], "tmp_dr": [423, 465], "get_tmp_dir": [423, 465], "tmp": [423, 465], "my_tmp": [423, 465], "set_shape_array_mod": [425, 439, 465], "49999999999975": [426, 465], "5015015015010504": [426, 465], "000444502911705e": [426, 465], "9999999999995j": [426, 465], "isn": [428, 465, 644, 660, 672, 677, 685], "possibli": [430, 465, 663, 665, 677], "100000023841858": [430, 465], "200000047683716": [430, 465], "299999952316284": [430, 465], "400000095367432": [430, 465], "599999904632568": [430, 465], "dictionai": [434, 465], "__name__": [434, 465, 633, 656], "hemant": [434, 465], "unset_shape_array_mod": [435, 438, 465], "previous": [436, 465, 626, 643, 648, 659, 661, 665, 669], "451": [441, 465], "in_ax": [442, 465], "out_ax": [442, 465], "thereof": [442, 465], "fun": [442, 465, 472, 558, 651], "summaris": [442, 465], "grad": [443, 466, 621, 633, 661, 672, 673, 674], "0125": [443, 466], "171": [443, 466, 602], "90000075": [444, 466], "90000164": [444, 466], "9000032": [444, 466], "50000012e": [444, 466], "92558754": [444, 466], "92558694": [444, 466], "92558682": [444, 466], "92558861": [444, 466], "60000025e": [444, 466], "01024": [444, 466], "retain_grad": [445, 466], "xs_grad_idx": [445, 466, 599, 633, 661], "ret_grad_idx": [445, 466, 599, 633, 661], "func_ret": [445, 466, 661], "33333334": [445, 466, 468, 523], "666666": [445, 466], "333332": [445, 466], "66666675": [445, 466], "grad_fn": [446, 455, 466, 672], "933": [446, 448, 455, 466], "jacobian": [448, 466, 677, 683], "jac_fn": [448, 466], "639": [449, 466], "361": [449, 466], "with_grad": [452, 454, 466, 619], "compon": [452, 454, 456, 466, 633, 636, 669, 679, 684, 686], "with_grads_stack": [452, 454, 456, 466], "delet": [454, 466, 644, 651], "set_with_grad": [454, 456, 466], "value_grad": [455, 466], "423332": [455, 466], "enter": [456, 466, 643, 644, 647, 652, 653, 658, 660], "parent": [456, 466, 616, 642, 651, 671], "deseri": 457, "718281828459045": 458, "euler": [458, 676], "141592653589793": 458, "newaxi": 458, "ifels": 459, "whileloop": 459, "if_els": 459, "while_loop": 459, "asarray_handle_nest": 460, "asarray_infer_devic": 460, "asarray_to_native_arrays_and_back": 460, "as_ivy_dtyp": [461, 663], "as_native_dtyp": 461, "check_float": 461, "closest_valid_dtyp": 461, "default_dtyp": [461, 652, 659], "dtype_bit": 461, "function_supported_dtyp": [461, 652], "function_unsupported_dtyp": [461, 652], "infer_default_dtyp": 461, "invalid_dtyp": [461, 652], "is_native_dtyp": 461, "promote_typ": [461, 652], "promote_types_of_input": [461, 652, 662], "type_promote_arrai": [461, 652], "unset_default_complex_dtyp": 461, "unset_default_float_dtyp": 461, "unset_default_int_dtyp": 461, "unset_default_uint_dtyp": 461, "valid_dtyp": 461, "defaultcomplexdtyp": 461, "defaultdtyp": 461, "defaultfloatdtyp": 461, "defaultintdtyp": 461, "defaultuintdtyp": 461, "as_ivy_dev": [462, 671], "clear_cached_mem_on_dev": 462, "dev_util": [462, 653], "function_supported_devic": 462, "function_unsupported_devic": 462, "get_all_ivy_arrays_on_dev": [462, 653], "gpu_is_avail": [462, 633], "num_cpu_cor": [462, 653], "num_gpu": [462, 653, 665], "num_ivy_arrays_on_dev": 462, "percent_used_mem_on_dev": 462, "print_all_ivy_arrays_on_dev": 462, "set_split_factor": [462, 656], "split_func_cal": 462, "total_mem_on_dev": [462, 653], "tpu_is_avail": 462, "unset_default_devic": 462, "used_mem_on_dev": 462, "defaultdevic": 462, "profil": 462, "save_dir": 462, "arg_info": 465, "arg_nam": 465, "cache_fn": [465, 659], "current_backend_str": [465, 656, 669, 671], "function_supported_devices_and_dtyp": 465, "function_unsupported_devices_and_dtyp": 465, "get_item": [465, 662], "get_referrers_recurs": 465, "inplace_arrays_support": 465, "inplace_variables_support": 465, "isscalar": 465, "match_kwarg": 465, "num_arrays_in_memori": 465, "print_all_arrays_in_memori": 465, "set_min_bas": 465, "set_min_denomin": 465, "set_tmp_dir": 465, "to_ivy_shap": 465, "to_native_shap": 465, "try_else_non": 465, "unset_array_mod": 465, "unset_exception_trace_mod": 465, "unset_nestable_mod": 465, "unset_queue_timeout": 465, "unset_show_func_wrapper_trace_mod": 465, "vmap": [465, 677, 683], "arraymod": 465, "manag": [465, 466, 633, 637, 638, 662, 677, 685, 687], "execute_with_gradi": [466, 633, 672, 673, 674, 677], "jac": 466, "unset_with_grad": 466, "value_and_grad": [466, 661], "gradienttrack": 466, "conv": [467, 667], "channel_last": [467, 480, 487, 488], "feature_group_count": [467, 480, 487, 488], "x_dilat": [467, 480, 487], "channel_first": [467, 480, 487, 488], "group": [467, 472, 480, 487, 488, 549, 646, 650, 659, 663, 664, 679, 682, 688], "258": [467, 482, 484, 486], "dhwio": [467, 485], "conv_general_dil": [467, 663], "conv_general_transpos": 467, "depthwis": [467, 489, 604, 618], "hwi": [467, 489], "overfit": [467, 490], "1428566": [467, 490], "19999981": [467, 490], "39999962": [467, 490], "4000001": [467, 490], "49000001": [467, 490], "55599999": [467, 490], "21000004": [467, 490], "incom": [467, 491], "666": [467, 468, 491, 507], "4269": [467, 491], "911": [467, 491], "157": [467, 491], "753": [467, 491], "101": [467, 468, 472, 491, 504, 553], "545": [467, 474, 491, 570], "547": [467, 491], "124": [467, 491, 656], "852": [467, 491], "963": [467, 491], "108": [467, 478, 491, 587], "196": [467, 491], "306": [467, 491], "long": [467, 492, 643, 644, 651, 652, 654, 656, 663, 669, 683], "short": [467, 492, 644, 652, 663, 666, 669, 673], "term": [467, 492, 618, 633, 635, 644, 650, 669, 678, 683], "unrol": [467, 492, 669, 672], "lstm": [467, 492, 618, 669, 683], "multi": [467, 468, 493, 496, 618, 633, 654, 668, 677, 679, 681, 683, 687], "head": [467, 493, 618, 633, 641, 643, 663], "query_dim": [467, 493, 618], "measur": [467, 493, 618], "cont_feat_dim": [467, 493], "numhead": [467, 493], "head_dim": [467, 493, 618], "out_feat_dim": [467, 493], "5678761": [467, 493], "65441847": [467, 493], "18969631": [467, 493], "40131447": [467, 493], "19991851": [467, 493], "40000153": [467, 493], "68589532": [467, 493], "40129396": [467, 493], "40000817": [467, 493], "31219625": [467, 493], "25698996": [467, 493], "31022024": [467, 493], "16286421": [467, 493], "30296469": [467, 493], "16460133": [467, 493], "59497029": [467, 493], "40046397": [467, 493], "14009905": [467, 493], "81691194": [467, 493], "10732293": [467, 493], "40012637": [467, 493], "73519301": [467, 493], "40021262": [467, 493], "7615059": [467, 493], "40326414": [467, 493], "30141067": [467, 493], "19610119": [467, 493], "32028484": [467, 493], "1708746": [467, 493], "34100914": [467, 493], "14920235": [467, 493], "40000009": [467, 493], "73333335": [467, 493], "axisa": [468, 496], "axisb": [468, 496], "axisc": [468, 496], "293": [468, 497], "46997": [468, 497], "futur": [468, 501, 502, 633, 635, 637, 643, 644, 649, 651, 652, 665, 666, 667, 671, 677, 689], "45033181e": [468, 502], "02829754e": [468, 502], "54220343e": [468, 502], "12647155e": [468, 502], "38447177e": [468, 502], "56155300e": [468, 502], "26794919": [468, 502], "7320509": [468, 502], "array_lik": [468, 503, 511], "0012": [468, 504], "00342": [468, 504], "000565": [468, 504], "0104": [468, 504], "000981": [468, 504], "00282": [468, 504], "000766": [468, 504], "0322": [468, 504], "00237": [468, 504], "000151": [468, 504], "00101": [468, 504], "00019": [468, 504], "0214": [468, 504], "00171": [468, 504], "0107": [468, 504], "0167": [468, 504], "0472": [468, 504], "0536": [468, 504], "0177": [468, 504], "000429": [468, 504], "00762": [468, 504], "lu_factor": 468, "pivot": [468, 505], "lu": [468, 505], "convent": [468, 478, 506, 587, 635, 648, 658, 666, 676, 689], "frobeniu": [468, 507], "nuclear": [468, 507], "induc": [468, 507], "47722558": [468, 507], "776": [468, 507], "6000004": [468, 507], "118": [468, 508, 656], "moor": [468, 512], "penros": [468, 512], "underflow": [468, 514, 652], "logsabsdet": [468, 514], "although": [468, 514, 647, 650, 663, 667, 681, 683], "again": [468, 514, 636, 637, 644, 647, 648, 649, 650, 654, 656, 662, 663, 665, 666, 667, 672, 674, 677, 688, 689], "subject": [468, 514], "solut": [468, 515, 633, 644, 650, 652, 664, 665, 667, 681, 685], "ordin": [468, 515, 676], "usvh": [468, 516], "et": [468, 516], "cetera": [468, 516], "ss": [468, 517], "615": [468, 517], "866": [468, 517], "864": [468, 517], "0x": [468, 521], "Such": [468, 521, 644, 659, 665], "progress": [468, 521, 643, 644, 674], "alexandr": [468, 521], "theophil": [468, 521], "9000001": [468, 523], "64158917": [468, 523], "skew": [468, 524], "symmetric_matrix": [468, 524], "cross_product": [468, 524], "35667497": [469, 526], "793291": [469, 527], "512926": [469, 527], "outsid": [470, 528, 539, 653, 657, 659, 671, 688], "indexerror": [470, 531, 629, 656], "beyond": [470, 536, 655, 663, 689], "introduc": [470, 476, 536, 578, 635, 650, 652, 664, 665, 667, 672], "squeezabl": [470, 538], "famili": [470, 539], "intxx": [470, 539], "floatxx": [470, 539], "construct": [470, 541, 618, 620, 621, 622, 669, 673, 674, 681, 683, 690], "rep": [470, 541], "manipulation_funct": [470, 543], "fomaml_step": 471, "inner_cost_fn": [471, 544, 545], "outer_cost_fn": [471, 544, 545], "inner_grad_step": [471, 544, 545, 546], "inner_learning_r": [471, 544, 545, 546], "inner_optimization_step": [471, 544, 545, 546], "inner_batch_fn": [471, 544, 545], "outer_batch_fn": [471, 544, 545], "average_across_step": [471, 544, 545], "inner_v": [471, 544, 545], "keep_inner_v": [471, 544, 545], "outer_v": [471, 544, 545], "keep_outer_v": [471, 544, 545], "return_inner_v": [471, 544, 545, 546], "num_task": [471, 544, 545, 546], "maml": [471, 544, 545], "task": [471, 544, 545, 546, 633, 638, 644, 663, 664, 676, 683, 689, 690], "0x7f93747a1e50": [471, 544, 545, 546], "maml_step": 471, "vanilla": [471, 545, 673, 683], "recev": [471, 545], "reptile_step": 471, "cost_fn": [471, 546], "reptil": [471, 546], "receivng": [471, 546], "all_nested_indic": 472, "include_nest": [472, 547], "_index": [472, 547, 558], "_base": [472, 547, 557, 558, 662], "extra_nest_typ": [472, 547, 548, 557, 558, 559], "themselv": [472, 547, 650, 652, 653, 655, 659, 663, 673, 680, 689], "far": [472, 547, 558, 653, 654, 670, 688, 689], "manual": [472, 547, 557, 558, 642, 643, 644, 663, 665, 673], "go": [472, 547, 548, 557, 558, 559, 633, 638, 639, 642, 643, 644, 645, 648, 649, 651, 652, 654, 663, 664, 665, 666, 668, 672, 677, 679, 683, 684, 688, 690], "deeper": [472, 547, 548, 557, 558, 559, 635, 644, 645, 665, 668], "copy_nest": 472, "to_mut": [472, 548, 559], "deepli": [472, 548, 677, 683], "mutabl": [472, 548, 554, 555, 559, 564, 565], "copied_nest": [472, 548], "1337": [472, 548], "duplicate_array_index_chain": 472, "index_nest": [472, 659], "insert_into_nest_at_index": 472, "insert_into_nest_at_indic": 472, "onto": [472, 553, 559, 634, 635, 683], "special_squar": [472, 553], "6666666666666667": [472, 553], "special_pow": [472, 553], "linear_model": [472, 553], "map_nest_at_index": 472, "shallow": [472, 554, 555, 559, 564, 565], "_result": [472, 554, 564], "placehold": [472, 554, 559, 564, 644, 647, 649, 657, 658, 678], "hh": [472, 554], "map_nest_at_indic": 472, "ub": [472, 555], "tb": [472, 555], "multi_index_nest": 472, "repeatedli": [472, 556, 651, 665], "nested_ani": 472, "check_nest": [472, 557, 558], "via": [472, 557, 558, 644, 646, 650, 652, 653, 662, 666, 667, 669, 671, 672, 676, 683], "conditon": [472, 557, 558], "nested_argwher": 472, "stop_after_n_found": [472, 558], "nested_indic": [472, 558], "nested_map": [472, 659], "_depth": [472, 559], "_tuple_check_fn": [472, 559], "_list_check_fn": [472, 559], "_dict_check_fn": [472, 559], "wherebi": [472, 559, 642, 680], "nested_multi_map": 472, "index_chain": [472, 560], "nest0": [472, 560], "ivy_arrai": [472, 560, 647, 663], "unappli": [472, 560], "prune_empti": 472, "prune_nest_at_index": 472, "prune_nest_at_indic": 472, "set_nest_at_index": 472, "set_nest_at_indic": 472, "111": [472, 565], "xyz": [472, 565], "pqr": [472, 565], "mini": [473, 566, 620], "217": [473, 566], "uniformli": [474, 568, 570], "22346112": [474, 569], "0922": [474, 569], "49671414": [474, 569], "1382643": [474, 569], "64768857": [474, 569], "5230298": [474, 569], "23415337": [474, 569], "23413695": [474, 569], "9213753": [474, 569], "12818667": [474, 569], "799": [474, 569], "469": [474, 569], "287": [474, 569], "0366": [474, 569], "26431865": [474, 570], "475": [474, 570], "878": [474, 570], "861": [474, 570], "929": [474, 570], "789": [474, 570], "519": [474, 570], "0435": [474, 570], "381": [474, 570], "4608004": [474, 570], "8458502": [474, 570], "67270088": [474, 570], "31128597": [474, 570], "major": [475, 576, 636, 652, 653, 664, 665, 677, 680, 683], "guarante": [476, 578, 580, 637, 647, 677], "aggreg": [476, 578, 651], "fourth": [476, 578], "1141": [476, 578], "8101": [476, 578], "9298": [476, 578], "8460": [476, 578], "2119": [476, 578], "3519": [476, 578], "6252": [476, 578], "4033": [476, 578], "7443": [476, 578], "2577": [476, 578], "3707": [476, 578], "0545": [476, 578], "3238": [476, 578], "5944": [476, 578], "0775": [476, 578], "4327": [476, 578], "62519997": [476, 578], "40329999": [476, 578], "59439999": [476, 578], "74430001": [476, 578], "81010002": [476, 578], "84600002": [476, 578], "92979997": [476, 578], "29999995": [476, 579], "einstein": [478, 587], "summat": [478, 587], "117": [478, 587], "sentinel": [478, 588, 590], "90000004": [478, 589], "statistical_funct": [478, 592], "intend": [478, 593, 600, 617, 646, 658, 661, 681, 683, 687, 688], "07472222": [478, 594], "00666667": [478, 594], "08966666": [478, 594], "simplicit": [479, 595, 596], "meta": [544, 545, 546, 647, 666, 683], "ivy_test": [597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 642, 643, 644, 646, 649, 651, 664], "test_ivi": [597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 642, 643, 644, 649, 651, 664, 665], "assert_all_clos": [597, 664], "ret_np": [597, 599, 664], "ret_from_gt_np": [597, 664], "ground_truth_backend": [597, 599, 600, 608, 664], "ground": [597, 599, 635, 663, 665], "mark": [597, 642, 644, 646, 665, 669], "fail": [597, 642, 643, 644, 646, 651, 652, 654, 657, 662, 663, 664], "assert_same_type_and_shap": 597, "this_key_chain": 597, "check_unsupported_devic": 597, "input_devic": 597, "all_as_kwargs_np": [597, 599], "presenc": [597, 650, 662], "check_unsupported_device_and_dtyp": 597, "input_dtyp": [597, 599, 607, 664, 665], "check_unsupported_dtyp": 597, "test_unsupported_funct": 597, "value_test": 597, "ret_np_flat": 597, "ret_np_from_gt_flat": 597, "ret_from_np_gt_flat": 597, "available_framework": 598, "ground_truth": 598, "function_test": 599, "args_to_contain": 599, "array_arg": [599, 659], "args_to_frontend": 599, "frontend_array_fn": 599, "arrays_to_frontend": 599, "as_list": 599, "compiled_if_requir": 599, "test_compil": [599, 607, 608], "convtru": 599, "nativeclass": 599, "counter": [599, 673], "create_args_kwarg": 599, "args_np": 599, "arg_np_val": 599, "args_idx": 599, "kwargs_np": 599, "kwarg_np_val": 599, "kwargs_idx": 599, "test_flag": [599, 664, 665], "on_devic": [599, 607, 664], "empty_func": 599, "flatten_and_to_np": 599, "flatten_frontend": 599, "flatten_frontend_to_np": 599, "flatten_fw_and_to_np": 599, "framework_compar": 599, "get_frontend_ret": 599, "as_ivy_arrai": 599, "get_ret_and_flattened_np_arrai": 599, "gradient_incompatible_funct": 599, "gradient_test": [599, 665], "rtol_": 599, "atol_": [599, 664], "gradient_unsupported_dtyp": 599, "kwargs_to_args_n_kwarg": 599, "num_positional_arg": [599, 607, 608, 664, 665], "port": [599, 637], "make_json_pick": [599, 603], "test_frontend_funct": [599, 664], "fn_tree": [599, 600, 608, 663, 664, 665], "test_valu": [599, 664, 665], "all_alias": [599, 664], "alias": [599, 608, 642, 663, 664], "namespac": [599, 642, 652, 660, 663, 664, 666, 669, 674], "test_frontend_method": [599, 664], "init_input_dtyp": [599, 664], "method_input_dtyp": [599, 664], "init_flag": [599, 664, 665], "method_flag": [599, 607, 664, 665], "init_all_as_kwargs_np": [599, 664], "method_all_as_kwargs_np": [599, 664], "frontend_method_data": [599, 664], "consum": [599, 650, 651, 658, 664, 665], "init_as_variable_flag": [599, 608], "dictat": [599, 647, 654, 658, 662], "init_num_positional_arg": [599, 608], "init_native_array_flag": 599, "with_v": 599, "ret_gt": 599, "test_funct": [599, 643, 644, 651, 664, 665], "fn_name": [599, 600, 608, 648, 664, 665], "return_flat_np_arrai": 599, "functiontestflag": [599, 607], "with_out": [599, 607, 660, 664, 665], "instance_method": [599, 607, 660, 665], "as_vari": [599, 607, 660, 664, 665], "as_variable_flag": [599, 608, 664], "native_array_flag": [599, 608, 664], "container_flag": [599, 607, 608], "test_method": 599, "class_nam": 599, "method_nam": [599, 606, 608, 664], "init_with_v": 599, "method_with_v": 599, "test_gradi": [599, 607, 608, 660], "method_as_variable_flag": [599, 608], "method_num_positional_arg": [599, 608], "method_native_array_flag": 599, "method_container_flag": [599, 608], "tthe": 599, "var_fn": 599, "holder": 600, "interruptedtest": 600, "test_interrup": 600, "baseexcept": 600, "testdata": 600, "supported_device_dtyp": 600, "is_method": 600, "remove_all_current_framework": 600, "setup_api_test": 600, "test_data": 600, "setup_frontend_test": 600, "teardown_api_test": 600, "teardown_frontend_test": 600, "hypothesis_help": [602, 603, 604, 605], "array_help": 602, "array_and_broadcastable_shap": 602, "searchstrategi": [602, 603, 604, 605, 607, 608, 665], "array_bool": [602, 665], "min_valu": [602, 603, 604, 605, 664, 665], "max_valu": [602, 603, 604, 605, 664, 665], "strategi": [602, 603, 604, 608, 642, 660, 664], "array_indices_axi": 602, "array_dtyp": [602, 603, 665], "indices_dtyp": 602, "get_dtyp": [602, 603, 664, 665], "disable_random_axi": 602, "axis_zero": 602, "allow_inf": [602, 605, 664, 665], "min_num_dim": [602, 604, 664, 665], "max_num_dim": [602, 604, 664, 665], "min_dim_s": [602, 604, 664, 665], "max_dim_s": [602, 604, 664], "first_dimension_onli": 602, "indices_same_dim": 602, "valid_bound": 602, "hypothesi": [602, 604, 608, 642, 644, 646, 651, 660], "65536": 602, "44758124e": [602, 665], "array_valu": [602, 665], "abs_smallest_v": [602, 604, 605], "allow_nan": [602, 605, 665], "allow_subnorm": [602, 605, 665], "exclude_min": [602, 605, 665], "exclude_max": [602, 605], "large_abs_safety_factor": [602, 604, 605, 665], "small_abs_safety_factor": [602, 604, 605], "safety_factor_scal": [602, 604, 605, 665], "subnorm": [602, 605], "safeti": [602, 604, 605, 683], "scaler": [602, 605, 665], "0002": [602, 605], "arrays_and_ax": 602, "available_dtyp": [602, 603, 664, 665], "allow_non": [602, 604, 664, 665], "return_dtyp": 602, "force_int_axi": 602, "arrays_for_pool": 602, "min_dim": 602, "max_dim": 602, "min_sid": 602, "max_sid": 602, "allow_explicit_pad": 602, "return_dil": 602, "dtype_and_valu": [602, 664, 665], "num_arrai": [602, 603, 664, 665], "shared_dtyp": [602, 603, 664], "ret_shap": 602, "array_api_dtyp": [602, 603], "tabl": [602, 603, 652, 663, 683], "37915": 602, "6322": 602, "26765": 602, "12413": 602, "26986": 602, "34665": 602, "000e": 602, "711e": 602, "100e": 602, "955e": [602, 665], "40817": 602, "56193": 602, "29200": 602, "5851": 602, "9746": 602, "9604645e": 602, "192": 602, "103": 602, "41795": 602, "1170789994": 602, "44251": 602, "44209": 602, "433075925": 602, "24791": 602, "24691": 602, "24892": 602, "16711": 602, "972": 602, "15357": 602, "72057594037927936": 602, "dtype_values_axi": [602, 665], "min_axi": 602, "max_axi": 602, "valid_axi": 602, "allow_neg_ax": 602, "min_axes_s": 602, "max_axes_s": 602, "force_tuple_axi": 602, "29788": 602, "62222885e": 602, "68281172e": 602, "257j": 602, "40129846e": 602, "90000000e": 602, "63426649e": 602, "50000000e": 602, "91931887e": 602, "29488e": 602, "14361019e": 602, "96046448e": 602, "12445": 602, "list_of_s": 602, "st": [602, 646, 664, 665], "sampled_from": [602, 665], "min_siz": [602, 604, 608, 665], "max_siz": [602, 604, 608, 665], "size_bound": [602, 665], "00001": 602, "999999999999999": 602, "9394938006792373": 602, "mutually_broadcastable_shap": 602, "num_shap": 602, "base_shap": 602, "dtype_help": 603, "univers": [603, 635, 663], "get_castable_dtyp": 603, "castabl": 603, "prune_funct": 603, "intersect": [603, 651, 665, 676], "signed_integ": 603, "real_and_complex": 603, "float_and_complex": 603, "incas": 603, "general_help": 604, "apply_safety_factor": 604, "embedding_help": 604, "get_axi": [604, 665], "allow_neg": 604, "force_tupl": 604, "force_int": 604, "assertionerror": [604, 646, 656, 664, 665], "get_bound": [604, 665], "get_mean_std": [604, 665], "get_shap": [604, 664, 665], "matrix_is_st": 604, "cond_limit": 604, "instabl": [604, 652], "further": [604, 636, 637, 644, 646, 647, 651, 654, 656, 658, 662, 663, 665, 668, 669, 672, 673, 688, 689], "computation": 604, "heavi": [604, 663, 664, 667, 684], "condition_index": 604, "ill": 604, "prone": 604, "thumb": 604, "what": [604, 633, 636, 637, 639, 644, 645, 649, 650, 651, 654, 655, 658, 660, 661, 662, 663, 664, 665, 668, 669, 671, 672, 673, 674, 676, 677, 679, 684, 685, 688], "But": [604, 650, 651, 655, 660, 662, 667, 674], "perfectli": [604, 637], "gradual": 604, "strong": [604, 636, 677, 683], "multicollinear": 604, "tell": 604, "reshape_shap": [604, 665], "subset": [604, 647, 651, 655, 658, 661, 663, 665, 669, 683], "x_and_filt": 604, "number_help": 605, "arbitrarili": [605, 650, 660, 672], "safety_factor": 605, "frontendmethoddata": 606, "ivy_init_modul": 606, "framework_init_modul": 606, "init_nam": 606, "test_parameter_flag": 607, "frontendfunctiontestflag": 607, "generate_frontend_arrai": [607, 608], "testflag": 607, "apply_flag": 607, "args_to_iter": 607, "frontendmethodtestflag": 607, "initmethodtestflag": 607, "methodtestflag": 607, "as_cont": 607, "build_flag": 607, "frontend_function_flag": 607, "frontend_method_flag": 607, "function_flag": 607, "init_method_flag": 607, "testing_help": 608, "handle_frontend_method": [608, 664, 665], "class_tre": [608, 664], "init_tre": [608, 664], "init_native_arrai": 608, "_as_varaible_strategi": 608, "method_native_arrai": 608, "_given_kwarg": 608, "wrapper": [608, 647, 649, 650, 652, 656, 660, 662, 663, 667, 671, 678, 679, 683], "handle_frontend_test": [608, 664, 665], "number_positional_arg": [608, 664], "test_with_out": [608, 664], "test_inplac": 608, "handle_method": [608, 665], "method_tre": [608, 664, 665], "_gradient_strategi": 608, "_compile_strategi": 608, "handle_test": [608, 665], "test_instance_method": 608, "num_positional_args_method": 608, "nested_arrai": [613, 649], "nestedarrai": 613, "classmethod": 613, "from_row_length": 613, "row_length": 613, "from_row_split": 613, "row_split": 613, "unbind": 613, "geglu": 614, "leakyrelu": 614, "logsoftmax": 614, "moduleconvert": [615, 619], "from_flax_modul": 615, "native_modul": 615, "params_fx": 615, "rng_seed": 615, "constructor_arg": 615, "constructor_kwarg": 615, "instance_arg": 615, "instance_kwarg": 615, "flax": [615, 637, 674, 677, 683], "from_haiku_modul": 615, "params_hk": 615, "from_keras_modul": 615, "from_torch_modul": 615, "dedic": [615, 658, 671, 673], "to_ivy_modul": [615, 674], "native_module_class": 615, "modulehelp": [616, 619], "check_submod_ret": 616, "expected_submod_ret": [616, 619], "get_mod_kei": 616, "top_mod": 616, "explicit": [616, 643, 650, 652, 661, 662, 663, 664, 669, 677, 683], "mod_depth": 616, "mod_height": 616, "mod_with_top_mod_key_chain": 616, "flatten_key_chain": 616, "iimedi": 616, "show_mod_in_top_mod": 616, "upper_depth": 616, "lower_depth": 616, "coverag": [616, 652, 665], "prompt": [616, 644], "show_structur": 616, "this_repr": 616, "show_v_in_top_v": 616, "perspect": 616, "top_v": 616, "sub_mod": 616, "show_v": 616, "comopos": 616, "enumer": [616, 633], "track_submod_call_ord": [616, 619], "track_submod_ret": [616, 619], "v_with_top_v_key_chain": 616, "create_vari": [617, 673], "var_shap": [617, 673], "fan_out": [617, 673], "fan_in": [617, 673], "rectangular": 617, "firstlayersiren": 617, "siren": 617, "distribt": 617, "glorotuniform": [617, 618, 673], "glorot": 617, "known": [617, 646, 651, 652, 663, 665], "xavier": 617, "neuron": 617, "w_1x_1": 617, "w_2x_2": 617, "w_nx_n": 617, "w_i": 617, "vanish": 617, "explod": [617, 634, 635], "big": [617, 638, 677, 683], "pick": 617, "carefulli": [617, 663, 681, 686], "abstract": [617, 621, 635, 650, 652, 663, 665, 667, 673, 677, 681, 683, 685, 686, 690], "kaimingnorm": 617, "fan_mod": [617, 673], "kaim": 617, "he": 617, "distibut": 617, "center": 617, "negative_slop": 617, "fan": 617, "propog": 617, "fan_sum": [617, 673], "proport": 617, "Ones": 617, "w0": 617, "gain": [617, 644, 646, 668, 673, 683], "wlim": 617, "predefin": 617, "initialz": 617, "fan_avg": 617, "input_channel": [618, 633, 669, 673], "output_channel": [618, 633, 673], "filter_s": 618, "weight_initi": [618, 673], "bias_initi": [618, 673], "conv1dtranspos": 618, "filter_shap": 618, "conv2dtranspos": 618, "conv3dtranspos": 618, "depthwiseconv2d": 618, "num_channel": 618, "bernoul": 618, "num_lay": 618, "return_sequ": 618, "return_st": 618, "get_initial_st": 618, "dens": [618, 633], "connect": [618, 636, 643, 673, 674, 681], "multiheadattent": 618, "dropout_r": 618, "context_dim": 618, "with_to_q_fn": 618, "with_to_kv_fn": 618, "with_to_out_fn": 618, "build_mod": [618, 619], "on_init": [618, 619], "store_var": 619, "fallback_to_non_compil": [619, 621], "with_partial_v": 619, "submod_depth": 619, "submods_to_track": 619, "varibl": 619, "temporarili": [619, 646, 666], "fall": [619, 621, 642, 644, 652, 668], "from_cal": 619, "trigger": [619, 642], "successfulli": [619, 643, 647, 657], "built_": 619, "compile_kwarg": 619, "_unified_ivy_graph": 619, "_call": 619, "save_weight": 619, "weights_path": 619, "show_graph": 619, "randomness_factor": 619, "save_to_disk": 619, "with_edge_label": 619, "with_arg_label": 619, "with_output_label": 619, "output_connected_onli": 619, "highlight_subgraph": 619, "fname": [619, 672], "return_graph": 619, "layernorm": 620, "normalized_shap": 620, "elementwise_affin": 620, "trail": 620, "affin": 620, "set_stat": [621, 673], "init_on_first_step": 621, "ignore_miss": 621, "privat": [621, 663, 665], "_step": [621, 673], "miss": [621, 642, 643, 647, 650, 651, 654, 657, 665, 667], "sgd": [621, 683], "stochast": [621, 683], "sub_modul": 622, "check_al": 623, "messag": [623, 629, 632, 636, 643, 644, 651, 654, 656, 657, 663, 669, 671], "check_all_or_any_fn": 623, "check_ani": 623, "check_dimens": 623, "check_elem_in_list": [623, 663], "elem": 623, "check_equ": [623, 663], "check_exist": 623, "check_fals": 623, "check_fill_value_and_dtype_are_compat": 623, "check_gather_input_valid": 623, "check_gather_nd_input_valid": 623, "check_great": 623, "allow_equ": [623, 656], "check_inplace_sizes_valid": [623, 662], "check_isinst": 623, "allowed_typ": 623, "check_kernel_padding_s": 623, "kernel_s": 623, "padding_s": 623, "check_less": [623, 656], "check_one_way_broadcast": 623, "check_same_dtyp": 623, "check_shapes_broadcast": 623, "check_tru": 623, "ast_help": 625, "importtransform": 625, "nodetransform": 625, "impersonate_import": 625, "tree": [625, 639, 652], "visit_import": 625, "visit_importfrom": 625, "ivyload": 625, "filenam": [625, 672], "loader": [625, 633, 672, 677], "exec_modul": 625, "ivypathfind": 625, "metapathfind": 625, "find_spec": 625, "fullnam": [625, 649], "contextmanag": 626, "choose_random_backend": 626, "convert_from_numpy_to_target_backend": 626, "variable_id": 626, "numpy_obj": 626, "convert_from_source_backend_to_numpi": 626, "current_backend": [626, 656, 659, 666, 669], "global_backend": 626, "py": [626, 633, 642, 643, 644, 646, 648, 651, 652, 653, 655, 656, 657, 658, 659, 663, 664, 665, 666, 669, 671, 673, 674], "fn_name_from_version_specific_fn_nam": 626, "prevent_access_loc": 626, "previous_backend": [626, 648], "unset": [626, 669], "op": [626, 666, 669, 677], "eagertensor": [626, 664], "subsequ": [626, 643, 647, 651, 652, 654, 658, 659, 662, 665, 667, 673, 684], "Or": [626, 633, 640, 643, 662, 672], "set_backend_to_specific_vers": 626, "set_jax_backend": 626, "set_numpy_backend": 626, "set_tensorflow_backend": 626, "set_torch_backend": 626, "unset_backend": [626, 648], "with_backend": 626, "sub_backend_handl": 627, "available_sub_backend": 627, "clear_sub_backend": 627, "find_available_sub_backend": 627, "sub_backends_loc": 627, "set_sub_backend": 627, "sub_backend_str": 627, "unset_sub_backend": 627, "dynamic_import": 628, "import_modul": [628, 669], "packag": [628, 633, 639, 643, 651, 656, 657, 663, 677, 683, 685], "ivyerror": [629, 633, 656], "attributeerror": [629, 656, 671], "ivynotimplementedexcept": 629, "notimplementederror": [629, 657], "handle_except": 629, "add_array_spec": 630, "fn_array_spec": 630, "print_stat": 631, "viz": 631, "visual": [631, 643, 649, 663, 677, 683, 685, 688], "snakeviz": 631, "bonu": 631, "cprofil": 631, "cprint": [632, 669], "readm": [633, 649, 677], "websit": [633, 636, 646], "faq": [633, 649], "ai": [633, 681, 685], "fingertip": 633, "prefer": [633, 643, 650, 656, 660, 663, 667, 683], "straight": [633, 663, 665, 671], "awai": [633, 681, 683], "dive": [633, 638, 640, 641, 642, 644, 646, 650, 652, 664, 668, 671, 672, 677, 689], "grow": [633, 666, 683], "guid": [633, 638, 642, 643, 644, 657, 663, 689], "own": [633, 636, 637, 643, 646, 651, 652, 655, 656, 662, 663, 666, 669, 677, 678, 679, 682, 683, 688, 689], "variou": [633, 644, 646, 652, 655, 656, 658, 660, 661, 663, 664, 665, 676, 678, 679, 681, 682, 683, 686, 689], "perk": [633, 647, 650], "essenti": [633, 635, 636, 642, 650, 653, 654, 659, 662, 663, 666, 689], "mainli": [633, 644, 645, 661, 665, 670, 672, 678, 683], "handler": [633, 657, 668, 670, 674, 678], "behind": [633, 644, 645, 658, 665, 668, 670], "scene": [633, 634, 635, 645, 668, 670, 683], "facilit": [633, 660], "agnost": [633, 643, 647, 658, 669, 671, 674, 677, 689, 690], "mse_loss": 633, "jax_ms": 633, "tf_mse": 633, "np_mse": 633, "torch_ms": 633, "mymodel": [633, 672], "linear0": [633, 672, 673], "linear1": [633, 672, 673], "_forward": [633, 655, 669, 672, 673], "put": [633, 642, 649, 665, 677, 689], "someth": [633, 644, 666, 672, 673, 677, 689], "easili": [633, 636, 643, 647, 651, 663, 667, 672, 673, 674, 677, 683, 689, 690], "favorit": 633, "x_in": [633, 672, 673, 674], "loss_fn": [633, 672, 673, 674], "finish": [633, 638, 642, 643, 645], "usabl": [633, 658, 666], "cover": [633, 642, 646, 647, 649, 654, 655, 659, 660, 665, 667, 668], "topic": [633, 660, 671, 683], "mechan": [633, 651, 675, 677], "vision": [633, 639, 675, 679, 689], "robot": [633, 675], "reinforc": [633, 676], "gym": 633, "builder": [633, 640, 675, 677, 678], "trainer": [633, 637, 675, 677, 690], "break": [633, 648, 652, 657, 658, 666, 677], "highli": [633, 667, 683], "flexibl": [633, 650, 658, 661, 666, 667, 683], "everyon": [633, 637, 638, 644, 677], "plan": [633, 676], "interoper": [633, 636, 680, 681, 683, 686], "environ": [633, 638, 639, 644, 676, 683, 685], "easiest": [633, 640, 643], "command": [633, 640, 643, 646, 649, 651, 660], "python3": [633, 639, 643, 644, 656], "pre": [633, 639, 642, 665, 674, 677, 683], "pull": [633, 637, 638, 639, 642, 643, 646, 654, 666, 667, 677], "unifyai": [633, 639, 640, 643, 644, 649], "everyth": [633, 637, 642, 644, 645, 651, 654, 662, 663, 664, 665, 666, 670, 677], "sweat_smil": 633, "git": [633, 639, 640, 641, 643, 644, 646, 649, 651, 665], "clone": [633, 639, 640, 644], "github": [633, 635, 639, 640, 641, 642, 644, 646, 651, 652, 654, 655, 665], "com": [633, 639, 640, 643, 646, 649, 651, 652], "cd": [633, 639, 640, 643, 644], "page": [633, 643, 644, 649, 651, 670, 671, 674, 675], "instruct": [633, 642, 643, 646, 656, 664, 665, 681, 684, 687, 689], "video": [633, 638, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 681], "tutori": [633, 644, 663], "quit": [633, 644, 647, 654, 655, 659, 660, 665, 667, 683, 689], "lot": [633, 636, 637, 651, 652, 660, 665, 677, 682], "jax_fn": 633, "jax_x": 633, "torch_x": 633, "torch_fn": 633, "focus": [633, 666, 676, 681, 682, 683, 689, 690], "architectur": [633, 643, 674, 677, 681, 682, 683, 686, 687, 688], "orient": [633, 676], "contributor": [633, 638, 643, 644, 663, 668, 683], "explain": [633, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 679, 686, 689], "nuanc": [633, 663], "background": [633, 643, 649, 683, 685], "contextualis": 633, "problem": [633, 636, 644, 646, 647, 649, 663, 671, 679, 685, 689], "explos": [633, 634, 636], "why": [633, 634, 636, 644, 649, 662, 671], "adher": [633, 635, 636, 646, 652, 655, 658, 667, 669, 674, 679, 680, 689], "lastli": [633, 647], "paint": [633, 635, 669], "pictur": [633, 635, 642, 669], "role": [633, 644, 663, 670, 684, 686, 690], "plai": [633, 647, 663, 665, 674, 683, 686], "wide": [633, 644, 665, 681, 683], "demo": [633, 639, 676], "showcas": [633, 654, 676], "shorter": [633, 671], "ensp": 633, "eff_encod": 633, "efficientnet_v2": 633, "efficientnetv2b0": 633, "include_top": 633, "imagenet": 633, "input_shap": 633, "torch_eff_encod": 633, "customiz": [633, 649], "script": [633, 639, 643, 644, 651, 654, 669, 677, 683], "deepmind_perceiver_io": 633, "perceiver_backbon": 633, "dummy_input": 633, "backbon": [633, 669, 672], "perceiverioclassifi": 633, "max_pool": 633, "maxpool2d": 633, "1024": 633, "sm_framework": 633, "segmentation_model": 633, "sm": 633, "torch_sm": 633, "metric": [633, 677], "iou_scor": 633, "rax": 633, "torch_rax": 633, "poly1_softmax_loss": 633, "madmom": 633, "madmon": 633, "torch_madmom": 633, "freq": 633, "audio": 633, "hz2midi": 633, "todo": [633, 642, 652, 663, 665], "output_dens": 633, "maxpooling1d": 633, "pool_siz": 633, "tf_kornia": 633, "sharp": 633, "tf_rax": 633, "tf_madmom": 633, "hk_eff_encod": 633, "dummy_x": 633, "jax_sm": 633, "jax_madmom": 633, "np_kornia": 633, "np_sm": 633, "np_rax": 633, "yourself": [633, 642, 644, 663, 665, 667, 676], "anyon": [633, 636, 638, 644, 651, 677, 689], "classif": [633, 683], "ivynet": 633, "h_w": 633, "extractor": 633, "image_height": 633, "image_width": 633, "favourit": [633, 643], "pure": [633, 655, 658, 663, 667, 671, 674, 677, 683, 689, 690], "generate_batch": 633, "dataset_s": 633, "y_train": 633, "num_correct": 633, "y_pred": 633, "model_nam": 633, "hyperparam": 633, "num_epoch": 633, "epoch": 633, "epoch_loss": 633, "running_loss": 633, "training_accuraci": 633, "train_loss": 633, "train_correct": 633, "train_loop": 633, "tqdm": 633, "xbatch": 633, "ybatch": 633, "ybatch_encod": 633, "loss_prob": 633, "batch_loss": 633, "set_descript": 633, "set_postfix": 633, "accuracy_percentag": 633, "naverag": 633, "6f": 633, "plot": [633, 683], "_train_summari": 633, "csv": 633, "writer": 633, "writerow": 633, "prepar": [633, 651], "folder": [633, 639, 643, 644, 646, 649, 651, 659, 663, 665, 666], "believ": [633, 636, 644], "bug": [633, 644, 649, 663, 665, 666], "feedback": [633, 651], "welcom": [633, 638, 643, 644], "appreci": 633, "info": [633, 655], "amaz": 633, "acceler": [633, 663, 681, 685, 686, 687, 688], "journei": [633, 638], "achiev": [633, 651, 652, 657, 660, 665, 667, 672, 674, 678], "ambiti": 633, "goal": [633, 636, 642, 683, 689], "season": 633, "server": [633, 643, 644, 649, 683], "perfect": [633, 676], "ask": [633, 637, 642, 643, 654, 669, 671, 677], "idea": [633, 637, 639, 663, 666, 670, 676, 682], "fellow": 633, "team": [633, 638, 642, 643, 644, 663, 685], "twitter": 633, "sneak": 633, "peek": 633, "certainli": [633, 636, 689], "great": [633, 636, 637, 644, 665, 669, 671, 689], "stai": [633, 651], "credit": 633, "accompani": 633, "paper": [633, 637], "continu": [633, 636, 637, 641, 642, 643, 645, 646, 657, 662, 665, 677, 683], "articl": 633, "lenton2021ivi": 633, "titl": [633, 642, 644, 649, 663], "templat": [633, 649, 655, 665], "inter": [633, 664], "author": [633, 642, 644, 681, 685], "lenton": 633, "daniel": 633, "pardo": 633, "fabio": 633, "falck": 633, "fabian": 633, "jame": 633, "stephen": 633, "clark": 633, "ronald": 633, "journal": 633, "arxiv": 633, "preprint": 633, "2102": 633, "02886": 633, "year": [633, 635, 637, 646, 677, 683], "huge": [634, 636, 651, 672, 683, 689], "collabor": [634, 635, 636], "consortium": [634, 636], "grown": 635, "consider": [635, 654, 658, 667, 680, 681], "recent": [635, 636, 643, 644, 665], "especi": [635, 643, 667, 683], "rapidli": 635, "repo": [635, 639, 641, 644, 646, 649, 651, 652, 663, 664, 665, 666], "wonder": [635, 637, 671], "thing": [635, 636, 637, 641, 642, 643, 644, 648, 657, 663, 665, 667, 671, 672, 683], "evolv": [635, 683], "shareabl": 635, "hinder": [635, 658], "outdat": 635, "matter": [635, 654], "month": [635, 643], "rigor": [635, 665], "newest": 635, "softwar": [635, 636, 643, 644, 681, 686, 687, 688], "rapid": [635, 636, 643, 683], "prototyp": [635, 683], "vital": [635, 674], "signific": [635, 636, 677, 683], "bottleneck": 635, "quickli": [635, 637, 643, 644, 651, 672, 673, 683, 690], "obsolet": [635, 637], "constantli": [635, 666, 667], "invent": 635, "wheel": 635, "simultan": [635, 637], "modern": [635, 636, 661, 688], "scalabl": [635, 669, 688, 689], "languag": [635, 637, 663, 667, 669, 678, 681, 684, 686, 687, 688, 689], "front": [635, 663, 668, 669, 672, 681, 683], "runner": 635, "littl": [635, 671, 685], "principl": [635, 681, 683, 686], "almost": [635, 641, 650, 664, 670, 672], "syntax": [635, 636, 652, 657, 683], "unsurprisingli": [635, 654], "fundament": [635, 651, 663, 667, 669, 683], "2006": 635, "cut": [635, 689], "cloth": 635, "central": [636, 642, 667, 689], "forgiven": 636, "eyebrow": 636, "somehow": 636, "industri": [636, 683, 685], "wors": 636, "funni": 636, "comic": 636, "strip": 636, "easi": [636, 643, 644, 647, 650, 659, 661, 664, 665, 667, 681, 683, 689, 690], "unlik": [636, 646, 650, 651, 654, 662, 688, 690], "charger": 636, "charact": [636, 657, 663], "instant": 636, "mandat": [636, 652, 662, 665, 666], "adopt": [636, 644, 647, 658, 667, 682, 683, 688], "despit": [636, 650, 652, 653, 664, 667, 669, 680, 683], "bring": [636, 646, 665, 669, 670, 678], "benefit": [636, 637, 643, 647, 650, 659, 662, 667, 671, 672, 677, 681, 685, 688], "unrel": [636, 644], "contrari": 636, "bumpi": 636, "road": 636, "allud": [636, 672], "technologi": [636, 681, 685], "success": 636, "thank": [636, 672], "bio": [636, 643], "pcie": 636, "motherboard": 636, "raid": 636, "storag": [636, 672], "virtual": [636, 639, 644, 663, 686, 687], "bluetooth": 636, "wireless": 636, "exchang": [636, 641, 679, 681], "btx": 636, "sata": 636, "host": [636, 640, 651, 677, 688], "tcp": 636, "ip": 636, "commun": [636, 638, 642, 643, 644, 677, 682, 683, 685], "smtp": 636, "send": [636, 688], "gmail": [636, 651], "outlook": 636, "pop": [636, 643], "email": [636, 651], "live": [636, 637, 652, 679, 681], "did": [636, 642, 649, 674, 689], "aris": [636, 652, 677], "substanti": [636, 644, 647, 652, 665, 683], "innov": 636, "growth": [636, 686], "necess": 636, "parti": [636, 649, 677, 682, 683, 689], "engag": [636, 638, 644], "regard": [636, 641, 650, 663, 664, 667], "2015": [636, 683], "alongsid": 636, "frame": [636, 676, 683], "matur": [636, 677, 683], "preced": [636, 673], "aros": 636, "effort": [636, 638, 677, 679, 683, 689], "stage": [636, 638, 644, 645, 649, 657, 665, 683], "mission": [636, 685], "At": [636, 642, 643, 646, 663, 665, 666, 683], "ourselv": [636, 689], "quansight": [636, 689], "compani": [636, 679], "organ": [636, 647, 650, 659, 663, 666, 678], "panda": 636, "scipi": [636, 685, 690], "conda": [636, 643, 685], "apach": [636, 685, 689], "mxnet": [636, 690], "onnx": [636, 681, 689], "scikit": 636, "jupyt": [636, 685], "cupi": [636, 683, 690], "net": [636, 637, 669, 674], "sympi": 636, "modin": 636, "spyder": 636, "member": [636, 642, 644, 663], "googl": [636, 651], "octoml": [636, 689], "sponsor": 636, "lg": 636, "electron": 636, "shaw": 636, "intel": [636, 681, 688], "promis": 636, "pursuit": 636, "unif": [636, 638, 671, 679, 689], "clearli": [636, 642, 644, 654, 664, 665, 687], "thought": [636, 643, 644, 658, 681], "care": [636, 644, 663, 667, 674], "gone": [636, 668], "excit": [636, 638, 645], "complianc": 636, "hope": [636, 677, 689], "suit": [636, 643, 645, 646, 651, 665, 672, 676, 678, 683, 689], "motiv": [636, 671], "convinc": 636, "celebr": 636, "encourag": [636, 676, 677], "foundat": [636, 686], "happi": [637, 643, 677], "abund": 637, "better": [637, 639, 645, 663, 664, 666, 667, 668, 671, 672, 673, 686], "streamlin": [637, 686], "workflow": [637, 642, 644, 648, 652, 661, 663, 672, 675, 678, 682, 689, 690], "week": [637, 644], "sai": [637, 643, 660, 671], "deepmind": 637, "releas": [637, 642, 643, 644, 652, 663, 666, 667, 677, 683, 689], "awesom": 637, "love": 637, "perceiverio": 637, "slew": 637, "rush": 637, "inevit": [637, 684], "often": [637, 641, 646, 656, 657, 658, 659, 663, 665, 677, 684, 687, 690], "erron": 637, "poor": 637, "repositori": [637, 639, 640, 643, 644, 645, 646, 657], "confus": [637, 649, 652, 656, 662, 667, 678], "hour": [637, 651], "spent": 637, "spin": 637, "discuss": [637, 644, 649, 652, 653, 662, 663, 665, 667, 670, 671, 672, 677, 679, 684], "sake": 637, "few": [637, 641, 642, 644, 650, 652, 653, 658, 659, 661, 662, 665, 667, 669, 670, 671, 672, 673, 675, 683, 685], "automat": [637, 642, 643, 644, 645, 649, 650, 651, 652, 657, 659, 662, 665, 667, 668, 670, 673, 674, 678, 683, 686, 690], "wouldn": [637, 663], "nice": [637, 665, 683], "frantic": 637, "lucid": 637, "honk": 637, "understand": [637, 639, 641, 642, 643, 644, 645, 646, 649, 654, 655, 658, 664, 667, 668, 679, 689], "hasn": 637, "spend": [637, 683], "torchvis": 637, "sonnet": 637, "statu": [637, 642, 651], "quo": 637, "dopamin": 637, "ignit": 637, "catalyst": 637, "lightn": 637, "fastai": 637, "trax": [637, 674], "objax": [637, 674], "offer": [637, 663, 673, 683, 689, 690], "strongli": [638, 643, 663, 689, 690], "skill": [638, 685], "veteran": 638, "beginn": [638, 683], "aspect": [638, 661, 672, 683], "board": [638, 649], "basic": [638, 642, 654, 665], "local": [638, 639, 643, 646, 649, 659, 664, 665], "resourc": [638, 642, 651], "slightli": [639, 650, 663, 669, 673], "setup": [639, 643, 644, 649, 651], "mech": [639, 640], "grasp": [639, 663], "dir": [639, 672], "mutual": [639, 650, 659], "venv": [639, 656], "ivy_dev": [639, 643, 644], "bat": [639, 643, 644], "mac": [639, 643, 644], "linux": [639, 643, 644, 686, 688], "instal": [639, 640, 643, 644, 648, 649, 657, 676], "edit": [639, 642, 643, 644], "pip": [639, 643, 676], "immedi": [639, 643, 667], "ivy_robot": [639, 676], "docker": [639, 641], "desktop": [639, 643], "my": [639, 651, 666], "mount": [639, 640, 644], "rm": [639, 640, 644], "pwd": [639, 640], "pycharm": 639, "vscode": [639, 643], "devcontain": [639, 643], "remot": [639, 643, 646], "codespac": 639, "good": [639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 673], "commit": [639, 642, 646, 654, 665], "make_doc": 640, "sh": [640, 643, 644, 646, 651], "ssh": [640, 651], "Then": [640, 642, 643, 644, 649, 651, 660, 662, 666, 677], "make_docs_without_dock": [640, 649], "sphinx": [640, 649], "resours": 641, "climb": 641, "steep": 641, "curv": 641, "realpython": 641, "pyn": 641, "platform": [641, 643, 681, 685, 687], "pilot": 641, "stuck": [641, 642], "spell": 641, "though": [641, 642, 644, 652, 655, 659, 662, 663, 667, 672, 677], "sound": [641, 651, 668], "peopl": [641, 643, 644, 645, 683, 685], "action": [641, 651, 654, 665], "frequent": [642, 644, 683], "outlin": [642, 643, 644, 645, 650, 652, 655, 659, 662, 663, 665], "broad": [642, 685], "individu": [642, 644, 646, 652, 659, 662, 663, 683, 686, 689, 690], "explan": [642, 644, 650, 655, 658, 663, 671], "focu": [642, 661, 681, 682, 685, 690], "pypi": [642, 643, 677], "familiar": [642, 643], "sure": [642, 643, 644, 646, 651, 663, 664, 665, 667], "aforement": 642, "categori": [642, 646, 647, 650, 652, 663, 666, 668], "arraywithelementwis": [642, 647, 671], "containerwithmanipul": 642, "thorough": [642, 655, 658, 665], "comment": [642, 643, 644, 646, 649, 652, 657, 663], "add_reformatting_checklist_": 642, "category_nam": [642, 652, 653, 655, 658, 659], "pr": [642, 644, 646, 663, 664, 665], "autom": [642, 651, 665, 678, 685], "bot": 642, "markdown": [642, 649], "text": [642, 644, 649, 654, 655], "patient": [642, 643], "symbol": [642, 643, 683, 684], "emoji": 642, "legend": 642, "review": [642, 644, 651, 654, 663, 666], "checkbox": [642, 643], "proce": [642, 643], "elabor": 642, "struggl": 642, "assigne": 642, "status": 642, "refrain": 642, "subsect": [642, 644, 646, 651], "verifi": [642, 652, 653, 663, 665, 666], "func_nam": [642, 654, 655, 659, 663], "suggest": [642, 643, 644, 649, 652, 661, 663, 665, 666], "assess": [642, 667], "merg": [642, 644, 646, 651, 663, 683], "composition": [642, 662], "pend": 642, "helpfulli": [642, 667, 681], "problemat": [642, 643], "unimpl": 642, "issue_link": 642, "alias_nam": 642, "push": [642, 644, 646, 657, 664, 665, 689], "liner": 642, "meanwhil": [642, 651], "reselect": 642, "placement": 642, "categoris": [642, 646, 663], "faithfulli": 642, "creation_routin": [642, 664], "indexing_routin": 642, "ma": 642, "manipulation_routin": 642, "mathematical_funct": [642, 663], "sorting_searching_count": 642, "ufunc": [642, 663], "matrix_and_vector_product": 642, "matrix_eigenvalu": 642, "norms_and_other_numb": 642, "solving_equations_and_inverting_matric": 642, "seem": [642, 643, 667, 673, 674, 677, 683], "gleam": 642, "uncom": 642, "test_numpy_inn": 642, "test_frontend": [642, 651, 664], "unsur": [642, 665], "explor": [642, 643, 644, 652, 667, 670, 674, 676, 683, 686], "confirm": 642, "backend_nam": [642, 648, 652, 653, 655, 658, 659, 660], "relevant_submodul": 642, "sometim": [642, 643, 644, 646, 652, 659, 663, 665, 666, 667], "recreat": [642, 646], "defer": [642, 647, 650, 652, 653, 659, 660, 662, 663, 665, 689], "clearer": [642, 656, 664, 672], "button": [643, 644], "your_usernam": 643, "gh": 643, "your_fold": 643, "sync": [643, 646], "cours": [643, 644, 646, 647, 654, 662, 663, 666, 667, 672, 677, 688, 689], "whatev": [643, 650, 677], "elig": 643, "student": 643, "licenc": 643, "remind": 643, "licens": [643, 686], "expir": 643, "profession": 643, "trial": 643, "jetbrain": 643, "bui": [643, 689], "paid": 643, "pace": 643, "person": [643, 644], "experi": [643, 656, 665, 670, 672, 677], "abil": [643, 667, 670, 677, 683], "perhap": [643, 671, 672, 673, 677, 689], "click": [643, 644, 651, 655, 670], "icon": [643, 644], "panel": 643, "palett": 643, "ctrl": [643, 644], "On": [643, 652, 663, 665, 667, 670, 674], "optional_ubuntu": 643, "txt": [643, 646, 649, 666], "m1": 643, "optional_m1_1": 643, "optional_m1_2": 643, "builtin": [643, 671, 673], "cmd": 643, "virtualenv": 643, "tick": [643, 644, 651], "array_api_test": [643, 644, 646], "test_array_api": [643, 644, 646, 665], "mitig": [643, 689], "conflict": [643, 644, 651, 663, 672], "wsl": 643, "powershel": 643, "admin": 643, "visit": [643, 644, 651], "menu": 643, "tag": [643, 644], "introspect": 643, "usr": 643, "debug": [643, 644, 650, 651, 661, 665, 667, 672, 683], "dialog": 643, "caus": [643, 644, 646, 648, 649, 650, 651, 652, 654, 662, 664, 665, 677], "earlier": [643, 644], "virtualis": 643, "dropdown": 643, "dockerfil": 643, "navig": [643, 644, 645], "tab": [643, 651, 672], "sudo": 643, "apt": 643, "ca": 643, "certif": 643, "curl": 643, "gnupg": 643, "lsb": 643, "mkdir": [643, 651], "keyr": 643, "fssl": 643, "gpg": 643, "dearmor": 643, "echo": [643, 651], "deb": 643, "arch": 643, "dpkg": 643, "lsb_releas": 643, "tee": 643, "null": 643, "ce": 643, "cli": 643, "containerd": 643, "io": [643, 651], "plugin": 643, "systemctl": 643, "permiss": [643, 651], "press": [643, 644, 672], "ok": 643, "successful": 643, "4a": 643, "socket": 643, "chmod": [643, 651], "rwx": 643, "sock": 643, "pid": 643, "coupl": [643, 647, 671, 673, 683], "test_ab": [643, 665], "editor": 643, "pytest": [643, 644, 646, 651, 665], "keyboard": 643, "displai": [643, 649, 650, 656, 665, 672], "screenshot": 643, "test_elementwis": 643, "bar": [643, 649], "shell": [643, 644], "run_tests_cli": [643, 646], "run_ivy_core_test": 643, "run_ivy_nn_test": 643, "run_ivy_stateful_test": 643, "run_test": [643, 651], "test_depend": 643, "test_ivy_cor": 643, "test_ivy_nn": 643, "test_ivy_st": 643, "test_": [643, 664], "test_cor": [643, 644, 664], "wish": [643, 663], "ivy_cor": 643, "ivy_nn": 643, "ivy_st": 643, "simplest": [643, 654, 665, 667], "header": [643, 644], "advanc": [643, 682], "arrow": 643, "test_stat": 643, "test_submodule_nam": 643, "test_function_nam": 643, "debugg": 643, "studio": 643, "afterward": [643, 672], "restart": 643, "overlap": [643, 651, 666, 667, 684], "test_file_path": 643, "test_fn_nam": 643, "engin": [643, 683, 685, 686], "comma": 643, "postcreatecommand": 643, "bash": [643, 644, 646], "post_create_command": 643, "poststartcommand": 643, "safe": [643, 663], "containerworkspacefold": 643, "reopen": 643, "test_fle_path": 643, "slash": 643, "headach": 643, "arm": [643, 644], "vm": [643, 651], "azur": 643, "cloud": [643, 651, 676, 685], "longer": [643, 652, 660, 662, 665, 683], "worri": 643, "usual": [643, 646, 663, 665, 667], "theme": [643, 649], "slow": 643, "ipad": 643, "browser": [643, 649], "cool": [643, 666], "quota": 643, "requisit": 643, "pane": [643, 644, 651], "readi": 643, "master": [643, 644, 646, 651, 666, 683], "box": 643, "upto": [643, 644], "minut": [643, 651], "launch": 643, "approach": [643, 644, 647, 650, 652, 659, 660, 663, 665, 667, 671, 672, 677, 680, 687, 689], "colour": 643, "chanc": 643, "troubleshoot": 643, "ever": [643, 662], "flask": 643, "toolbar": [643, 644], "_array_modul": [643, 646], "refresh": 643, "conftest": 643, "nutshel": [643, 658], "hook": 643, "lint": 643, "attempt": [643, 657, 677], "properli": [643, 645, 656, 663, 665], "quick": [644, 645, 664, 673], "tendenc": 644, "land": 644, "world": [644, 685], "come": [644, 647, 651, 663, 666, 667, 673, 675, 678, 683], "fly": [644, 683], "hard": [644, 671, 683], "respons": [644, 651, 652], "internship": 644, "serv": [644, 647, 650, 658, 659, 663, 665, 667, 668, 678, 681], "suspect": 644, "act": [644, 654, 677, 690], "iii": 644, "reformat": [644, 657], "issue_numb": 644, "No": [644, 651, 683], "clean": [644, 666, 667, 669, 670, 672], "rememb": 644, "respond": 644, "dai": 644, "freed": 644, "basi": [644, 646, 672], "situat": [644, 651, 674], "upon": [644, 654, 662, 665, 667, 677, 682, 683], "unabl": [644, 667], "obvious": [644, 651], "qualiti": 644, "hypothet": 644, "frustrat": 644, "busi": 644, "fine": [644, 652, 654, 663, 671, 674, 689], "inact": 644, "me": 644, "unfairli": 644, "investig": 644, "incomplet": 644, "wherea": [644, 647, 650, 652, 653, 654, 658, 659, 665, 666, 674, 680], "invit": 644, "roadmap": [644, 651], "ideal": [644, 651, 662, 663, 667, 672], "easier": [644, 646, 647, 652, 663, 664, 666, 678, 683, 685], "forth": 644, "rare": [644, 653, 677, 688], "scenario": [644, 661], "someon": [644, 677], "unfortun": [644, 649], "practic": [644, 651, 663, 686], "separ": [644, 647, 650, 651, 665, 669, 671, 672, 684, 688], "checkout": [644, 646, 665], "name_of_your_branch": 644, "date": [644, 666], "complic": [644, 664, 669], "merge_with_upstream": 644, "abort": 644, "tediou": [644, 654, 667], "stash": 644, "reinstat": 644, "fetch": [644, 646, 651], "uncommit": 644, "unstag": 644, "untrack": 644, "comprehens": [644, 646], "atlassian": 644, "wrote": 644, "blame": 644, "revis": 644, "eg": 644, "past": [644, 646, 664, 665, 683], "grep": 644, "commit_id": 644, "handi": 644, "histori": 644, "toggl": 644, "highlight": [644, 651, 654, 663], "whenev": [644, 651, 652, 656, 660, 662, 665, 672], "think": [644, 651, 654, 684], "approv": 644, "hash": [644, 672], "cancel": 644, "speedup": 644, "unavail": 644, "tickbox": 644, "span": [644, 667, 681, 689], "intent": [644, 662], "discourag": 644, "philosophi": 644, "valuabl": 644, "infrequ": 644, "earli": [644, 683], "wast": [644, 651], "spot": [644, 654, 659], "mistak": [644, 657], "propos": [644, 663, 667, 683], "mountain": 644, "advoc": [644, 677], "actual": [644, 645, 651, 659, 662, 663, 664, 665, 667, 668, 673, 677, 684, 689], "aim": [644, 646, 663, 665, 668, 681, 683, 686], "session": [644, 683], "beauti": 644, "concern": [644, 645, 650, 654, 662, 667, 668, 689], "undo": 644, "stress": 644, "nifti": 644, "reassur": 644, "isol": [644, 684, 689], "fact": [644, 646, 651, 663, 665, 669, 672], "local_path_to_ivi": 644, "subfold": [644, 664, 665, 666], "dep": 644, "fresh": 644, "arsen": 644, "declar": 644, "exec": 644, "rf": 644, "cp": 644, "ivy_contain": 644, "test_imag": 644, "test_random_crop": 644, "test_creation_funct": 644, "test_arang": 644, "cursor": 644, "alt": 644, "blog": 644, "breakpoint": 644, "gutter": 644, "caret": 644, "f8": 644, "f9": 644, "Into": 644, "f7": 644, "smart": 644, "interest": 644, "fragment": [644, 679, 681, 685], "pychram": 644, "dummi": 644, "wherein": [644, 660, 665], "failur": [644, 651, 664, 665], "who": [645, 656, 668, 677, 683, 685], "weed": [645, 668], "tour": 645, "superset": [645, 662, 663, 677], "goe": [645, 662, 667], "runtim": [645, 659, 665, 667, 683], "borrow": 645, "conjunct": 646, "establish": [646, 685], "2020": [646, 683], "popular": [646, 683], "sens": [646, 654, 663, 671], "unconnect": 646, "decis": [646, 650, 652, 663, 667, 669, 671, 683], "initialis": [646, 663, 665], "everytim": [646, 652], "thoroughli": 646, "ci": [646, 652, 657, 664, 665, 677], "test_linalg": [646, 664], "test_set_funct": 646, "test_signatur": 646, "excess": [646, 648, 654], "array_modul": 646, "vv": 646, "test_manipulation_funct": 646, "test_concat": [646, 665], "nb": 646, "liber": 646, "bodi": [646, 665], "fortun": 646, "falsifi": [646, 665], "______________________": 646, "test_remaind": 646, "_______________________": 646, "test_operators_and_elementwise_funct": 646, "1264": 646, "1277": 646, "binary_param_assert_against_refimpl": 646, "ctx": 646, "mod": 646, "620": 646, "binary_assert_against_refimpl": 646, "324": 646, "scalar_o": 646, "17304064": 646, "binaryparamcontext": 646, "reproduce_failur": [646, 665], "axic42baaowcnp": 646, "rumwmabaear0": 646, "make_binary_param": 646, "dh": 646, "numeric_dtyp": 646, "left_strat": 646, "left_sym": 646, "right_strat": 646, "right_sym": 646, "right_is_scalar": 646, "binary_param_assert_dtyp": 646, "binary_param_assert_shap": 646, "led": [646, 685], "unexpectedli": 646, "discrep": [646, 664], "varieti": [646, 651, 652, 653, 665, 679, 681, 685, 686, 689, 690], "test_asarray_arrai": 646, "test_floor_divid": 646, "health": 646, "test_iop": 646, "__imod__": 646, "isequ": 646, "test_matrix_norm": 646, "alter": 646, "tweak": 646, "array_api_methods_to_test": 646, "test_trac": 646, "latter": [646, 648, 652, 655, 663], "scheme": [646, 673, 683], "test_special_cas": 646, "__ipow__": 646, "is_integ": 646, "revisit": [646, 658], "_data": [647, 662, 663, 671], "organiz": [647, 650, 663], "inherit": [647, 650, 656, 671, 677, 678], "bear": [647, 650, 652, 663], "underpin": [647, 650, 669], "programmat": [647, 650, 684], "backup": [647, 649, 650], "accident": [647, 650, 663], "readabl": [647, 650, 656, 658, 665, 666, 671, 672], "absent": [647, 650], "auto": [647, 649, 650, 672], "__mul__": [647, 650, 654, 658, 667, 671], "throw": [647, 652, 656, 671, 683], "imposs": 647, "inputs_to_native_arrai": [647, 660], "outputs_to_ivy_arrai": [647, 652, 653, 658, 660], "firstli": [647, 652, 654, 655, 656, 659, 660, 662, 667, 672, 679, 689], "anywai": [647, 660, 663], "secondli": [647, 652], "permit": [647, 658, 663, 665, 667], "standalon": [647, 665, 678, 679, 684, 689, 690], "__ivy_array_function__": 647, "inspir": [647, 676], "__torch_function__": 647, "myarrai": 647, "handled_funct": 647, "notimpl": [647, 657], "four": [647, 652, 654, 658, 659, 665, 667, 672], "enough": [647, 651, 665, 671, 672, 673], "ivy_funct": 647, "my_ab": 647, "my_arrai": 647, "Of": [647, 662, 663, 672, 688, 689], "implicit_backend": [648, 669], "__dict__": [648, 662, 669], "ivy_original_dict": [648, 669], "get_backend": [648, 659], "opt": [648, 652, 662, 665, 666, 667], "fallback": 648, "backend_handl": [648, 669], "requires_grad": 648, "memory_format": 648, "preserve_format": 648, "weren": 648, "vast": [648, 652, 683], "minor": [648, 667, 677], "fn_name_v_1p12_and_abov": 648, "fn_name_v_1p01_to_1p1": 648, "heavili": [649, 660, 663, 677], "characterist": 649, "conf": 649, "cleanup": 649, "disabl": 649, "procedur": [649, 651, 654], "segment": [649, 654], "toctre": 649, "maxdepth": 649, "related_work": 649, "deep_div": 649, "glossari": 649, "autosummari": 649, "top_level_toc": 649, "restructuredtext": 649, "render": [649, 655], "inlin": 649, "discov": [649, 652], "ivy_toctree_caption_map": 649, "stub": 649, "inturn": 649, "forc": [649, 651], "demonstr": [649, 652, 654, 656, 671], "underlin": 649, "remove_before_her": 649, "top_level_modul": 649, "endfor": 649, "\u2139": 649, "foo": 649, "candid": 649, "postprocess": 649, "linker": 649, "discussion_channel_map": 649, "1000043690254946374": 649, "1028298816526499912": 649, "1000043749088436315": 649, "1028298847950225519": 649, "seri": [649, 663, 665, 683, 685], "discussion_paragraph": 649, "discord_link": 649, "channel_link": 649, "forum_link": 649, "gg": 649, "zvqdvbznqj": 649, "799879767196958751": 649, "channel_id": 649, "forum_id": 649, "paragraph": 649, "autoskippablemethod": 649, "skippable_method_attribut": 649, "__qualname__": 649, "five": [650, 672], "recap": [650, 654, 673], "multi_map": 650, "containerwithelementwis": 650, "__repr__": 650, "__contains__": 650, "__getstate__": 650, "__setstate__": 650, "unpickl": 650, "num_dim": [650, 674], "__len__": 650, "enforc": [650, 671], "extern": [650, 658, 663, 665, 666], "c1": 650, "lefthand": 650, "righthand": 650, "handle_nest": [650, 659, 660, 669], "addition": [650, 662, 663, 689], "counterpart": [650, 660], "absenc": [650, 658, 683], "implicitli": [650, 661, 665, 669], "log_pr": [650, 659, 662], "intuit": [650, 665, 672, 673, 679], "chronolog": 650, "concurr": [650, 651, 659, 683], "had": [650, 651, 662, 669, 683, 684], "implic": 650, "whatsoev": [650, 659, 678, 689], "implicit": [650, 655, 663, 665, 669, 683], "eager": [650, 677, 683], "children": 650, "shallowest": 650, "deepest": 650, "regularli": 651, "rollback": 651, "incorpor": [651, 672, 683], "fold": 651, "techniqu": 651, "triplet": 651, "test_torch": [651, 664], "test_tensor": [651, 664], "test_torch_instance_arctan_": 651, "7284": 651, "daili": 651, "shoot": 651, "impact": [651, 665, 673, 685], "_reduce_loss": 651, "test_nn": 651, "test_loss": 651, "test_binary_cross_entropy_with_logit": 651, "test_cross_entropi": 651, "test_binary_cross_entropi": 651, "test_sparse_cross_entropi": 651, "test_loss_funct": 651, "test_torch_binary_cross_entropi": 651, "test_torch_cross_entropi": 651, "torch_binary_cross_entropi": 651, "torch_cross_entropi": 651, "underneath": [651, 681], "magic": 651, "readthedoc": 651, "affect": [651, 663], "pedagog": 651, "f1": 651, "fm": 651, "yeah": 651, "cyclic": 651, "intellig": [651, 665, 667, 685], "tests_fil": 651, "file_nam": [651, 665, 666], "del": 651, "tests_lin": 651, "elif": [651, 656, 662, 663, 664], "correspondingli": 651, "tests_to_run": 651, "determine_tests_lin": 651, "mongodb": 651, "databas": [651, 665], "secret": 651, "db": 651, "ssh_deploy_kei": 651, "suffic": [651, 660, 665], "massiv": 651, "constraint": [651, 652, 661], "mb": 651, "yml": 651, "felicit": 651, "clone_map": 651, "home": 651, "deploy_kei": 651, "user_email": 651, "rashul": 651, "chutani": 651, "user_nam": 651, "target_branch": 651, "github_serv": 651, "deploy_key_fil": 651, "ssh_known_hosts_fil": 651, "known_host": 651, "keyscan": 651, "export": [651, 682, 689], "git_ssh_command": 651, "userknownhostsfil": 651, "methodologi": 651, "master1": 651, "restructur": 651, "index_map": 651, "test_map": 651, "routin": [651, 662, 663, 667, 677, 683], "incorrect": 651, "snowbal": 651, "irrelev": [651, 652, 654], "recalibr": 651, "workflow_dispatch": 651, "schedul": [651, 677, 683, 690], "cron": 651, "saturdai": 651, "night": 651, "pm": 651, "gut": 651, "lesser": [651, 656], "lol": 651, "cater": 651, "master2": 651, "master32": 651, "synchron": 651, "runner2": 651, "corrupt": 651, "discard": 651, "decoupl": [651, 673], "150": 651, "cycl": [651, 665], "rashulchutani": 651, "yellow": 651, "queu": 651, "redirect": 651, "book": 651, "ran": 651, "badg": 651, "clickabl": 651, "all_dtyp": 652, "all_numeric_dtyp": 652, "all_int_dtyp": 652, "all_float_dtyp": 652, "replic": [652, 654, 661, 662, 663, 667], "thirdli": 652, "native_float32": 652, "importantli": [652, 671, 674, 676], "conveni": [652, 653, 658, 664, 670, 672, 673, 678, 689], "arguabl": [652, 653, 663], "jaxarrai": [652, 653, 658, 662, 666, 669], "_handle_0_dim_output": [652, 662], "experiment": [652, 663, 666, 669, 683], "subtli": [652, 662], "promote_types_frontend_nam": 652, "promote_types_of_frontend_name_input": 652, "frontend_nam": 652, "accuraci": 652, "upcast": 652, "nearli": [652, 658, 660, 683], "downcast": 652, "footprint": 652, "concret": 652, "compound": 652, "infer_dtyp": [652, 653, 658, 660], "settabl": [652, 653], "handle_out_argu": [652, 653, 658, 660, 662, 669], "infer_devic": [652, 653, 658, 660], "deleg": [652, 690], "shape_to_tupl": 652, "with_supported_dtyp": 652, "with_unsupported_dtyp": [652, 663], "unment": 652, "backend_vers": 652, "_cast_for_unary_op": 652, "target_typ": 652, "unsupported_dtyp": 652, "former": [652, 655, 663], "lack": [652, 662, 683, 690], "patch": [652, 683], "subtl": [652, 666, 689], "offici": [652, 669], "inconsist": [652, 656, 661], "84530": 652, "unwarr": 652, "risk": [652, 689], "needlessli": 652, "bloat": 652, "undergo": [652, 677], "supported_dtyp": 652, "unsupported_devic": 652, "supported_devic": 652, "slight": [652, 665, 673], "downsid": 652, "inflat": 652, "dual": 653, "categor": [653, 659, 663], "eight": [654, 668], "static_func_nam": 654, "op_nam": 654, "__r": 654, "combinatori": 654, "variat": [654, 663, 665], "unus": [654, 657, 662], "okai": [654, 667, 669], "meant": [654, 662], "spec": [654, 655], "my_func": [654, 666], "some_flag": 654, "another_flag": 654, "jointli": 654, "5574077": 654, "1850398": 654, "5463025": 654, "8422884": 654, "91601413": 654, "9647598": 654, "3738229": 654, "1597457": 654, "0963247": 654, "9955841": 654, "3278579": 654, "pars": [654, 677], "asid": [654, 676], "14254655": 654, "1578213": 654, "380515": 654, "trivial": [654, 662], "exlud": 654, "failing_fn_nam": 654, "onlin": [654, 655], "minutest": 654, "suffici": [654, 663, 665], "fault": [654, 683], "contrast": [655, 658, 663, 689], "instanti": 655, "array_api": 655, "preview": 655, "needless": [655, 664], "renam": [655, 663], "judgment": 655, "operator_nam": 655, "succinct": 655, "contstructor": 655, "docst": 655, "_default": 656, "_delimit": 656, "comfort": 656, "encount": [656, 665], "julia": [656, 686, 689], "new_fn": [656, 663], "new_arg": 656, "new_kwarg": 656, "186": 656, "lib": 656, "site": [656, 684], "_src": 656, "219": 656, "_reduce_al": 656, "_ensure_optional_ax": 656, "213": [656, 665], "_reduct": 656, "lax": [656, 663, 664, 667, 674, 677], "preproc": 656, "_cast_to_bool": 656, "pos_dim": 656, "_reduction_dim": 656, "113": 656, "canon_axi": 656, "_canonicalize_axis_allow_nam": 656, "genexpr": 656, "106": 656, "maybe_named_axi": 656, "_canonicalize_axi": 656, "stdin": 656, "295": 656, "262": 656, "ivy_arg": 656, "ivy_kwarg": 656, "354": 656, "truth_value_test": 656, "121": 656, "switch": [656, 659, 660, 690], "visibl": 656, "unwieldi": 656, "awar": 656, "recov": [656, 663], "squash": 656, "hid": 656, "cleaner": [656, 672], "caught": 656, "functool": [656, 663, 671], "_print_traceback_histori": 656, "error_stack": 656, "axiserror": 656, "got": 656, "polici": [656, 665, 676], "moreov": 656, "met": 656, "flake8": 657, "annot": [657, 658], "star": 657, "unsuccess": 657, "exceed": 657, "black": 657, "disobei": 657, "inde": [657, 658, 667, 677, 681], "adress": 658, "to_native_arrays_and_back": [658, 660, 669], "sole": [658, 666, 682, 683, 684], "strictli": [658, 662, 663], "rational": 658, "__div__": [658, 667], "dicat": 658, "pep": 658, "484": 658, "brittl": 658, "freeli": 658, "technic": [658, 662, 677, 683, 685], "original_typ": 658, "cumbersom": 658, "venn": 659, "diagram": [659, 689], "light": [659, 663, 677, 678, 684, 689], "maximis": 659, "handle_mixed_funct": [659, 660, 667], "condition": 659, "reap": 659, "deal": [659, 661, 663, 677], "modif": [659, 683], "briefli": [659, 665, 672], "get_all_arrays_on_dev": 659, "inputs_to_ivy_arrai": 660, "integer_array_to_float": 660, "handle_cmd_line_arg": 660, "crucial": 661, "inter_func": 661, "custom_grad_fn": 661, "args1": 661, "detach": 661, "disambigu": 661, "eas": [661, 683], "captur": [661, 665, 674, 684], "program": [662, 680, 681, 683, 686, 687, 690], "ration": [662, 667], "speak": 662, "val_n": 662, "base_idx": 662, "_manipulation_stack": 662, "base_flat": 662, "_view_ref": 662, "_update_view": 662, "contigu": 662, "c_contigu": 662, "ascontiguousarrai": 662, "copyto": 662, "_is_vari": 662, "tensor_scatter_nd_upd": 662, "is_vari": 662, "_update_torch_view": 662, "predominantli": [662, 666, 676], "support_native_out": [662, 669], "math": [662, 663, 664, 674, 681], "_wrap_fn": 662, "dim0": 662, "dim1": 662, "res_floor": 662, "mul": [662, 671], "extent": [662, 663], "maxim": [662, 669, 680, 681, 685, 686, 687], "capabl": [662, 665, 667], "mostli": [662, 665], "metadata": 662, "paradigm": [662, 677, 683], "expans": 662, "handle_view": 662, "handle_view_index": 662, "brief": [662, 665], "stem": 662, "weak": 662, "_torch_bas": 662, "_torch_view_ref": 662, "_torch_manipul": 662, "weakli": 662, "adequ": 662, "exhaust": [662, 665, 680, 689], "input_arrai": 662, "tf_frontend": 663, "wrong": [663, 667], "torch_frontend": [663, 664], "numpy_frontend": 663, "jax_frontend": 663, "to_ivy_arrays_and_back": [663, 664], "fidel": 663, "advis": 663, "slower": 663, "reli": 663, "algebra": [663, 681, 682, 683, 686, 690], "xla": [663, 677, 678, 683], "dynamic": 663, "mimic": 663, "arithmetic_oper": 663, "handle_numpy_out": 663, "handle_numpy_dtyp": 663, "handle_numpy_cast": 663, "from_zero_dim_arrays_to_scalar": 663, "_add": 663, "same_kind": 663, "subok": [663, 664, 667], "promote_types_of_numpy_input": 663, "underscor": 663, "unhandl": 663, "trigonometric_funct": 663, "_tan": 663, "check_tensorflow_cast": 663, "raw_op": [663, 664], "tackl": 663, "map_raw_ops_alia": 663, "unnecessari": [663, 667], "output_typ": 663, "kwargs_to_upd": 663, "implemnt": 663, "pointwise_op": 663, "preferred_element_typ": 663, "finer": 663, "margin": 663, "meet": 663, "criteria": 663, "reduce_logsumexp": 663, "input_tensor": 663, "logsumexp": 663, "trick": 663, "max_input_tensor": 663, "omiss": 663, "sensibl": 663, "deem": 663, "reserv": 663, "resum": 663, "ahead": [663, 683], "logicaland": 663, "np_frontend": 663, "_ivy_arrai": 663, "radd": 663, "_init_data": 663, "isinst": [663, 665, 666, 673, 674], "_process_str_data": 663, "_dtype": [663, 664, 671], "_shape": [663, 671], "govern": 663, "promote_types_of_": 663, "_input": 663, "promote_types_of_torch_input": [663, 664], "saniti": 663, "func_wrapp": 663, "handle_numpy_casting_speci": 663, "equiv": 663, "unsaf": 663, "array_type_test": 663, "_isfinit": 663, "organis": 663, "watch": 663, "youtub": 663, "jump": 664, "knowledg": 664, "lift": [664, 684], "np_frontend_help": 664, "test_jax": 664, "test_jax_lax_oper": 664, "dtype_and_x": [664, 665], "test_jax_lax_tan": 664, "test_numpi": 664, "test_mathematical_funct": 664, "test_np_trigonometric_funct": 664, "dtypes_values_cast": 664, "dtypes_values_casting_dtyp": 664, "arr_func": 664, "get_dtypes_kind": 664, "get_num_positional_args_ufunc": 664, "test_numpy_tan": 664, "handle_where_and_array_bool": 664, "test_tensorflow": 664, "test_math": 664, "test_tensorflow_tan": 664, "test_pointwise_op": 664, "test_torch_tan": 664, "_fill_valu": 664, "test_jax_lax_ful": 664, "test_from_shape_or_valu": 664, "_input_fill_and_dtyp": 664, "dtype_and_input": 664, "dtype_to_cast": 664, "input_fill_dtyp": 664, "test_numpy_ful": 664, "test_tf_funct": 664, "test_tensorflow_fil": 664, "test_creation_op": 664, "test_torch_ful": 664, "add_nois": 664, "all_clos": 664, "_get_dtype_and_matrix": 664, "test_torch_qr": 664, "frontend_ret": 664, "frontend_q": 664, "frontend_r": 664, "walkthrough": 664, "comparison_op": 664, "test_comparison_op": 664, "test_torch_great": 664, "test_ndarrai": 664, "test_numpy_instance_add__": 664, "test_tensorflow_instance_add": 664, "1e04": 664, "allow_infin": 664, "test_torch_instance_add": 664, "_arrays_idx_n_dtyp": 664, "test_manipul": [664, 665], "surprisingli": 664, "closest_relevant_group": 664, "strive": [664, 665, 667, 677, 685], "fixtur": 665, "eleg": [665, 683], "unexplor": 665, "upload": 665, "artifact": 665, "bespok": 665, "_array_or_typ": 665, "test_default_int_dtyp": 665, "clariti": [665, 667, 683], "print_hypothesis_exampl": 665, "custom_strategi": 665, "randomis": 665, "simplist": 665, "intricaci": 665, "glanc": 665, "stratigi": 665, "one_of": 665, "datum": 665, "pipe": 665, "overload": 665, "shorthand": 665, "array_or_scal": 665, "len_of_arrai": 665, "test_add": 665, "keywoard": 665, "test_gpu_is_avail": 665, "requri": 665, "summara": 665, "pretest": 665, "slighlti": 665, "pytet": 665, "thankfulli": 665, "seamlessli": 665, "criterion": 665, "valid_ax": 665, "craft": 665, "hoc": 665, "11228": 665, "456": 665, "268": 665, "wherev": 665, "9622": 665, "28136": 665, "6375": 665, "12720": 665, "21354": 665, "900e": 665, "57384": 665, "25687": 665, "248": 665, "na": 665, "test_devic": 665, "array_shap": 665, "common_shap": 665, "test_lay": 665, "stand": 665, "some_sequ": 665, "arrays_valu": 665, "36418": 665, "21716926": 665, "none_or_list_of_float": 665, "get_prob": 665, "103515625e": 665, "099609375": 665, "probabilist": 665, "number_positional_argu": 665, "unreproduc": 665, "report": 665, "ivy_np": 665, "valid_float_dtyp": 665, "test_demo": 665, "failing_test": 665, "traceback": 665, "shrink": 665, "prescrib": 665, "scratch": 665, "therebi": 665, "test_gelu": 665, "test_fil": 665, "phase": [665, 677, 683], "notabl": [665, 683], "verbos": [665, 669], "newer": 665, "max_exampl": 665, "deadlin": 665, "weird": 665, "systemat": 665, "safeguard": 665, "inabl": 665, "test_result_typ": 665, "9090909090909091": 665, "judgement": 666, "some_namespac": 666, "some_backend": 666, "another_backend": 666, "refactor": 666, "ongo": 666, "cooler": 666, "something_cool": 666, "_assert_fill_value_and_dtype_are_compat": 666, "_to_devic": 666, "older": 666, "unbound": 666, "battl": 666, "answer": [667, 671, 677], "contradict": 667, "entail": 667, "sacrif": 667, "dimems": 667, "jacfwd": 667, "jacrev": 667, "banner": 667, "ravel": 667, "pointwis": 667, "fuse": 667, "tensorrt": 667, "expens": 667, "incredibli": [667, 672, 677, 686], "six": 667, "price": 667, "pai": 667, "intrus": 667, "x_beta": 667, "equip": 667, "priorit": 667, "simplif": 667, "allevi": 667, "ineffici": [667, 677, 683], "hybrid": 667, "workaround": 667, "bicubic_tensorflow": 667, "fulfil": 668, "fledg": [669, 670], "syntact": [669, 674], "power_seq": 669, "backend_stack": 669, "_determine_backend_from_arg": 669, "importlib": 669, "_backend_dict": 669, "illustr": [669, 676], "x_shape": 669, "x_flat": 669, "wi": 669, "wi_x": 669, "wii_x": 669, "wif_x": 669, "wig_x": 669, "wio_x": 669, "wh": 669, "ht": 669, "ct": 669, "hts_list": 669, "wii_xt": 669, "wif_xt": 669, "wig_xt": 669, "wio_xt": 669, "zip": 669, "htm1": 669, "ctm1": 669, "wh_htm1": 669, "whi_htm1": 669, "whf_htm1": 669, "whg_htm1": 669, "who_htm1": 669, "ft": 669, "ot": 669, "reliabl": 669, "sacrific": 669, "hear": 669, "virtu": [669, 680], "pure_ivi": 669, "compile_graph": [669, 674], "pure_torch": 669, "_layer": 669, "unclean": 669, "wx": 669, "temp": 669, "ivy_func": 669, "emphas": 669, "torchscript": [669, 678, 690], "example_input": 669, "primit": [670, 677, 681, 683], "upcom": 670, "hierarch": [670, 672, 673, 683], "arraywithactiv": 671, "arraywithcr": 671, "arraywithdatatyp": 671, "arraywithdevic": 671, "arraywithgener": 671, "arraywithgradi": 671, "arraywithimag": 671, "arraywithlay": 671, "arraywithlinearalgebra": 671, "arraywithloss": 671, "arraywithmanipul": 671, "arraywithnorm": 671, "arraywithrandom": 671, "arraywithsearch": 671, "arraywithset": 671, "arraywithsort": 671, "arraywithstatist": 671, "arraywithutil": 671, "_init": 671, "_size": 671, "_devic": 671, "_dev_str": 671, "_pre_repr": 671, "_post_repr": 671, "framework_str": 671, "noinspect": 671, "pypep8nam": 671, "immut": 671, "claim": 671, "truli": 671, "_native_wrapp": 671, "genuin": 671, "some_method": 671, "rewritten": 671, "strang": 671, "compartment": 671, "newshap": 671, "new_shap": 671, "tidi": 671, "crystal": 671, "ton": 672, "ado": [672, 673], "soup": 672, "walk": [672, 673], "cnt": 672, "combo": 672, "3333335": 672, "delimit": 672, "autocomplet": 672, "midwai": 672, "agent": 672, "total_spe": 672, "total_height": 672, "total_width": 672, "ag": 672, "tot": 672, "total_": 672, "total_h": 672, "cnt0": 672, "cnt1": 672, "diff_0": 672, "diff_1": 672, "config0": 672, "config1": 672, "decod": 672, "l0": 672, "decoder__l0": 672, "decoder__l1": 672, "encoder__l0": 672, "encoder__l1": 672, "l0__b": 672, "l0__w": 672, "l1__b": 672, "l1__w": 672, "printabl": 672, "obviou": [672, 683], "foresight": 672, "untidili": 672, "update_ag": 672, "normalize_img": 672, "img_max": 672, "reduce_max": 672, "img_min": 672, "reduce_min": 672, "img_rang": 672, "agent_posit": 672, "agent_veloc": 672, "agent_cam_front_rgb": 672, "agent_cam_front_depth": 672, "agent_cam_rear_rgb": 672, "agent_cam_rear_depth": 672, "agent_cam_lidar": 672, "camera": 672, "front_rgb": 672, "front_depth": 672, "rear_rgb": 672, "rear_depth": 672, "lidar": 672, "rgb": 672, "rear": 672, "veloc": 672, "cam": 672, "cam_max": 672, "cam_min": 672, "cam_rang": 672, "perman": 672, "thread": [672, 683], "pretti": [672, 689], "straightforward": 672, "dataload": [672, 675], "_cnt": 672, "img_": 672, "png": 672, "_dataset_s": 672, "_batch_siz": 672, "_count": [672, 673], "__next__": 672, "img_fnam": 672, "loaded_img": 672, "cv2": 672, "imread": 672, "from_numpi": 672, "batch_slic": 672, "reduce_mean": [672, 673, 674], "0145": 672, "addbackward0": 672, "_create_vari": 673, "_input_channel": 673, "_output_channel": 673, "_w_shape": 673, "_b_shape": 673, "_with_bia": 673, "396": 673, "764": 673, "872": 673, "211": 673, "439": 673, "nightmar": 673, "overcom": 673, "v0": 673, "v1": 673, "key0": 673, "linear3": 673, "v2": 673, "_w_init": 673, "_b_init": 673, "misnom": 673, "saw": 673, "_beta1": 673, "_beta2": 673, "_epsilon": 673, "_mw": 673, "_vw": 673, "_first_pass": 673, "_should_compil": 673, "new_v": 673, "_lr": 673, "_inplac": 673, "_stop_gradi": 673, "clip_by_valu": 674, "sparse_funct": 674, "_linear": 674, "jax_graph": 674, "to_backend": 674, "thinli": 674, "to_haiku_modul": 674, "loss_fn_t": 674, "without_apply_rng": 674, "update_rul": 674, "tree_multimap": 674, "differenti": [676, 683], "pose": 676, "quaternion": 676, "ivy_mech": 676, "target_facing_rotation_matrix": 676, "polar_to_cartesian_coord": 676, "warp": 676, "optic": 676, "voxel": 676, "ivy_vis": 676, "coords_to_voxel_grid": 676, "render_pixel_coord": 676, "radianc": 676, "nerf": 676, "trajectori": 676, "motion": 676, "mobil": [676, 683], "sample_spline_path": 676, "rigidmobil": 676, "sample_bodi": 676, "drone": 676, "sample_link": 676, "openai": 676, "swimmer": 676, "reward": 676, "supervis": 676, "door": [676, 677], "cartpol": 676, "mountain_car": 676, "pendulum": 676, "reacher": 676, "learnt": 676, "ture": 676, "ntm": 676, "egospher": 676, "esm": 676, "ivy_memori": 676, "egocentr": 676, "room": 676, "doubt": 677, "grate": 677, "probe": 677, "remark": 677, "surpris": 677, "lock": 677, "gold": 677, "dex": 677, "ye": 677, "scan": 677, "tricki": [677, 678], "predictor": 677, "tight": 677, "driver": 677, "dispatch": [677, 683, 686], "ast": 677, "checkpoint": 677, "autodiff": 677, "shine": 677, "merci": 677, "autograd": 677, "compet": [677, 683], "parallelis": 677, "spmd": 677, "mixtur": 677, "expert": 677, "sophist": 677, "depart": 677, "hundr": 677, "thousand": 677, "broadli": [677, 689], "supplementari": 677, "reusabl": [677, 681, 683], "fanci": [677, 683], "fusion": [677, 687], "lose": 677, "pmap": 677, "eventu": 677, "supplement": 677, "backdoor": 677, "callback": 677, "record": [677, 684], "somewhat": [677, 683], "outsourc": 677, "nail": 678, "funtion": 678, "asset": 678, "scientist": 678, "correl": 678, "analyz": 678, "conceptu": [679, 684], "broken": [679, 683], "tracer": 679, "infrastructur": [679, 685, 686], "vendor": [679, 685], "complimentari": [679, 689], "acycl": [679, 684], "insert_numb": 680, "insert_t": 680, "scaffold": [681, 689], "heart": 681, "toolchain": [681, 686], "intermedi": [681, 682, 683, 684, 689], "ir": [681, 684, 689], "assembli": [681, 688, 689], "idl": 681, "middl": 681, "emit": 681, "gnu": [681, 686], "gcc": [681, 688], "broader": 681, "heterogen": 681, "aid": 681, "coprocessor": 681, "programm": [681, 688], "gate": 681, "onednn": 681, "sit": [681, 684, 689], "tandem": 681, "possess": 681, "khrono": [682, 688], "appl": 682, "interact": [682, 683, 688], "coremltool": 682, "albeit": 682, "promin": 683, "abbrevi": 683, "laboratori": 683, "proprietari": [683, 687, 688], "mathwork": 683, "commerci": 683, "1984": 683, "toolbox": 683, "mupad": 683, "simulink": 683, "graphic": [683, 687, 688], "simul": 683, "million": [683, 686], "worldwid": 683, "scienc": [683, 685], "econom": 683, "2001": 683, "scientif": 683, "od": 683, "solver": 683, "cython": 683, "friendli": 683, "2002": 683, "lua": 683, "luajit": 683, "idiap": 683, "epfl": 683, "2005": 683, "numarrai": 683, "cpython": 683, "partli": 683, "2007": 683, "regress": [683, 690], "forest": 683, "boost": 683, "dbscan": 683, "inbuilt": 683, "esqu": 683, "aesara": 683, "2008": 683, "datafram": 683, "critic": [683, 689], "2012": 683, "Its": 683, "polymorph": 683, "parallel": [683, 687, 688], "mpi": 683, "openmp": 683, "glue": 683, "jaot": 683, "nasa": 683, "cern": 683, "climat": 683, "allianc": 683, "influenti": 683, "2014": 683, "analyt": [683, 685, 689], "scala": 683, "ship": 683, "forgiv": 683, "decemb": 683, "announc": 683, "transit": 683, "mainten": 683, "v7": 683, "meaning": 683, "2016": 683, "imper": 683, "amazon": 683, "traction": 683, "cognit": [683, 690], "toolkit": [683, 684, 690], "grade": 683, "realiz": 683, "dnn": 683, "cnn": 683, "rnn": 683, "backpropag": 683, "succumb": 683, "came": 683, "monitor": 683, "practition": [683, 687, 688, 689], "hobbyist": 683, "tremend": 683, "ecosystem": 683, "gear": 683, "batteri": 683, "zygot": 683, "jl": 683, "workload": 683, "daggerflux": 683, "frontier": 683, "hessian": 683, "2018": 683, "lightweight": [683, 690], "shortcom": 683, "barrier": 683, "inexperienc": 683, "underdevelop": 683, "fanat": 683, "ounc": 683, "infanc": 683, "emerg": 683, "nich": 683, "introduct": 683, "lite": 683, "enterpris": 683, "reinvent": [683, 685], "inertia": 683, "haven": 683, "creator": [683, 685], "paszk": 683, "hi": 683, "bulk": 683, "haskel": 683, "dataflow": 684, "distil": 684, "essenc": [684, 689], "enclos": 684, "scope": [684, 688], "trace_modul": 684, "scriptfunct": 684, "scriptmodul": 684, "fake": 684, "proxi": 684, "graphmodul": 684, "travi": 685, "oliph": 685, "leader": 685, "cornerston": 685, "numba": 685, "numfocu": 685, "pydata": 685, "confer": 685, "consult": 685, "servic": 685, "expertis": 685, "devop": 685, "mlop": 685, "dashboard": 685, "startup": 685, "mlir": [685, 686, 689], "Their": 685, "held": 685, "privileg": 685, "presum": 685, "llvm": [685, 688], "founder": 685, "tvm": [685, 689], "sustain": 685, "empow": 685, "har": 685, "burden": 685, "benchmark": 685, "convention": 686, "precompil": 686, "executor": 686, "exploit": 686, "fsf": 686, "gpl": 686, "biggest": [686, 689], "nvidia": [687, 688], "conduct": 687, "throughput": 687, "autotun": 687, "consumpt": 687, "gpgpu": 687, "talk": 688, "classic": 688, "sycl": 688, "dpc": 688, "processor": 688, "maco": 688, "x86": 688, "oneapi": 688, "ia": 688, "aka": 688, "xeon": 688, "gen9": 688, "xe": 688, "card": 688, "arria": 688, "gx": 688, "fpga": 688, "tune": [688, 689], "lofti": 689, "ambit": 689, "realm": 689, "bedrock": 689, "flux": 689, "bite": 689, "chew": 689, "eagerpi": 689, "tensorli": 689, "thinc": 689, "neuropod": 689, "exhibit": 689, "emploi": 689, "fx": 689, "retrain": 689, "wider": 689, "closer": 689, "greatli": 689, "challeng": 689, "modular": 689, "anywher": 689, "theano": 690, "plaidml": 690, "partial_svd": 690, "tucker_mode_dot": 690, "excel": 690, "subsystem": 690}, "objects": {"ivy.Array": [[155, 0, 1, "", "abs"], [156, 0, 1, "", "acos"], [157, 0, 1, "", "acosh"], [443, 0, 1, "", "adam_step"], [444, 0, 1, "", "adam_update"], [289, 0, 1, "", "adaptive_avg_pool1d"], [290, 0, 1, "", "adaptive_avg_pool2d"], [158, 0, 1, "", "add"], [306, 0, 1, "", "adjoint"], [595, 0, 1, "", "all"], [364, 0, 1, "", "all_equal"], [235, 0, 1, "", "allclose"], [236, 0, 1, "", "angle"], [596, 0, 1, "", "any"], [573, 0, 1, "", "argmax"], [574, 0, 1, "", "argmin"], [582, 0, 1, "", "argsort"], [575, 0, 1, "", "argwhere"], [367, 0, 1, "", "array_equal"], [317, 0, 1, "", "as_strided"], [67, 0, 1, "", "asarray"], [159, 0, 1, "", "asin"], [160, 0, 1, "", "asinh"], [368, 0, 1, "", "assert_supports_inplace"], [91, 0, 1, "", "astype"], [161, 0, 1, "", "atan"], [162, 0, 1, "", "atan2"], [163, 0, 1, "", "atanh"], [318, 0, 1, "", "atleast_1d"], [319, 0, 1, "", "atleast_2d"], [320, 0, 1, "", "atleast_3d"], [291, 0, 1, "", "avg_pool1d"], [292, 0, 1, "", "avg_pool2d"], [293, 0, 1, "", "avg_pool3d"], [342, 0, 1, "", "batch_norm"], [346, 0, 1, "", "bernoulli"], [347, 0, 1, "", "beta"], [237, 0, 1, "", "binarizer"], [525, 0, 1, "", "binary_cross_entropy"], [358, 0, 1, "", "bincount"], [164, 0, 1, "", "bitwise_and"], [165, 0, 1, "", "bitwise_invert"], [166, 0, 1, "", "bitwise_left_shift"], [167, 0, 1, "", "bitwise_or"], [168, 0, 1, "", "bitwise_right_shift"], [169, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "broadcast_arrays"], [93, 0, 1, "", "broadcast_to"], [94, 0, 1, "", "can_cast"], [170, 0, 1, "", "ceil"], [495, 0, 1, "", "cholesky"], [528, 0, 1, "", "clip"], [370, 0, 1, "", "clip_matrix_norm"], [371, 0, 1, "", "clip_vector_norm"], [529, 0, 1, "", "concat"], [322, 0, 1, "", "concat_from_sequence"], [307, 0, 1, "", "cond"], [238, 0, 1, "", "conj"], [530, 0, 1, "", "constant_pad"], [481, 0, 1, "", "conv1d"], [482, 0, 1, "", "conv1d_transpose"], [483, 0, 1, "", "conv2d"], [484, 0, 1, "", "conv2d_transpose"], [485, 0, 1, "", "conv3d"], [486, 0, 1, "", "conv3d_transpose"], [71, 0, 1, "", "copy_array"], [239, 0, 1, "", "copysign"], [359, 0, 1, "", "corrcoef"], [171, 0, 1, "", "cos"], [172, 0, 1, "", "cosh"], [240, 0, 1, "", "count_nonzero"], [308, 0, 1, "", "cov"], [496, 0, 1, "", "cross"], [526, 0, 1, "", "cross_entropy"], [585, 0, 1, "", "cumprod"], [586, 0, 1, "", "cumsum"], [294, 0, 1, "", "dct"], [374, 0, 1, "", "default"], [173, 0, 1, "", "deg2rad"], [489, 0, 1, "", "depthwise_conv2d"], [497, 0, 1, "", "det"], [135, 0, 1, "", "dev"], [295, 0, 1, "", "dft"], [498, 0, 1, "", "diag"], [309, 0, 1, "", "diagflat"], [499, 0, 1, "", "diagonal"], [241, 0, 1, "", "diff"], [348, 0, 1, "", "dirichlet"], [174, 0, 1, "", "divide"], [490, 0, 1, "", "dropout"], [296, 0, 1, "", "dropout1d"], [297, 0, 1, "", "dropout3d"], [323, 0, 1, "", "dsplit"], [324, 0, 1, "", "dstack"], [102, 0, 1, "", "dtype"], [500, 0, 1, "", "eig"], [501, 0, 1, "", "eigh"], [311, 0, 1, "", "eigh_tridiagonal"], [312, 0, 1, "", "eigvals"], [502, 0, 1, "", "eigvalsh"], [375, 0, 1, "", "einops_rearrange"], [376, 0, 1, "", "einops_reduce"], [377, 0, 1, "", "einops_repeat"], [587, 0, 1, "", "einsum"], [298, 0, 1, "", "embedding"], [73, 0, 1, "", "empty_like"], [175, 0, 1, "", "equal"], [176, 0, 1, "", "erf"], [378, 0, 1, "", "exists"], [177, 0, 1, "", "exp"], [242, 0, 1, "", "exp2"], [325, 0, 1, "", "expand"], [531, 0, 1, "", "expand_dims"], [178, 0, 1, "", "expm1"], [226, 0, 1, "", "eye_like"], [299, 0, 1, "", "fft"], [104, 0, 1, "", "finfo"], [243, 0, 1, "", "fix"], [326, 0, 1, "", "flatten"], [532, 0, 1, "", "flip"], [327, 0, 1, "", "fliplr"], [328, 0, 1, "", "flipud"], [244, 0, 1, "", "float_power"], [179, 0, 1, "", "floor"], [180, 0, 1, "", "floor_divide"], [245, 0, 1, "", "fmax"], [246, 0, 1, "", "fmin"], [181, 0, 1, "", "fmod"], [379, 0, 1, "", "fourier_encode"], [247, 0, 1, "", "frexp"], [75, 0, 1, "", "from_dlpack"], [77, 0, 1, "", "full_like"], [349, 0, 1, "", "gamma"], [382, 0, 1, "", "gather"], [383, 0, 1, "", "gather_nd"], [248, 0, 1, "", "gcd"], [52, 0, 1, "", "gelu"], [391, 0, 1, "", "get_num_dims"], [249, 0, 1, "", "gradient"], [447, 0, 1, "", "gradient_descent_update"], [182, 0, 1, "", "greater"], [183, 0, 1, "", "greater_equal"], [396, 0, 1, "", "has_nans"], [329, 0, 1, "", "heaviside"], [330, 0, 1, "", "hsplit"], [331, 0, 1, "", "hstack"], [250, 0, 1, "", "hypot"], [332, 0, 1, "", "i0"], [300, 0, 1, "", "ifft"], [107, 0, 1, "", "iinfo"], [251, 0, 1, "", "imag"], [503, 0, 1, "", "inner"], [398, 0, 1, "", "inplace_decrement"], [399, 0, 1, "", "inplace_increment"], [400, 0, 1, "", "inplace_update"], [343, 0, 1, "", "instance_norm"], [302, 0, 1, "", "interpolate"], [504, 0, 1, "", "inv"], [402, 0, 1, "", "is_array"], [110, 0, 1, "", "is_bool_dtype"], [112, 0, 1, "", "is_float_dtype"], [113, 0, 1, "", "is_int_dtype"], [403, 0, 1, "", "is_ivy_array"], [404, 0, 1, "", "is_ivy_container"], [405, 0, 1, "", "is_native_array"], [115, 0, 1, "", "is_uint_dtype"], [252, 0, 1, "", "isclose"], [184, 0, 1, "", "isfinite"], [406, 0, 1, "", "isin"], [185, 0, 1, "", "isinf"], [186, 0, 1, "", "isnan"], [187, 0, 1, "", "isreal"], [408, 0, 1, "", "itemsize"], [313, 0, 1, "", "kron"], [344, 0, 1, "", "l2_normalize"], [449, 0, 1, "", "lamb_update"], [450, 0, 1, "", "lars_update"], [566, 0, 1, "", "layer_norm"], [253, 0, 1, "", "lcm"], [254, 0, 1, "", "ldexp"], [54, 0, 1, "", "leaky_relu"], [255, 0, 1, "", "lerp"], [188, 0, 1, "", "less"], [189, 0, 1, "", "less_equal"], [352, 0, 1, "", "lexsort"], [491, 0, 1, "", "linear"], [78, 0, 1, "", "linspace"], [190, 0, 1, "", "log"], [191, 0, 1, "", "log10"], [192, 0, 1, "", "log1p"], [193, 0, 1, "", "log2"], [55, 0, 1, "", "log_softmax"], [194, 0, 1, "", "logaddexp"], [256, 0, 1, "", "logaddexp2"], [195, 0, 1, "", "logical_and"], [196, 0, 1, "", "logical_not"], [197, 0, 1, "", "logical_or"], [198, 0, 1, "", "logical_xor"], [220, 0, 1, "", "logit"], [221, 0, 1, "", "logsigmoid"], [79, 0, 1, "", "logspace"], [345, 0, 1, "", "lp_normalize"], [492, 0, 1, "", "lstm_update"], [506, 0, 1, "", "matmul"], [314, 0, 1, "", "matrix_exp"], [507, 0, 1, "", "matrix_norm"], [508, 0, 1, "", "matrix_power"], [509, 0, 1, "", "matrix_rank"], [510, 0, 1, "", "matrix_transpose"], [588, 0, 1, "", "max"], [303, 0, 1, "", "max_pool1d"], [304, 0, 1, "", "max_pool2d"], [305, 0, 1, "", "max_pool3d"], [199, 0, 1, "", "maximum"], [589, 0, 1, "", "mean"], [360, 0, 1, "", "median"], [80, 0, 1, "", "meshgrid"], [590, 0, 1, "", "min"], [200, 0, 1, "", "minimum"], [56, 0, 1, "", "mish"], [333, 0, 1, "", "moveaxis"], [353, 0, 1, "", "msort"], [315, 0, 1, "", "multi_dot"], [493, 0, 1, "", "multi_head_attention"], [567, 0, 1, "", "multinomial"], [201, 0, 1, "", "multiply"], [257, 0, 1, "", "nan_to_num"], [361, 0, 1, "", "nanmean"], [362, 0, 1, "", "nanmedian"], [258, 0, 1, "", "nansum"], [81, 0, 1, "", "native_array"], [202, 0, 1, "", "negative"], [259, 0, 1, "", "nextafter"], [576, 0, 1, "", "nonzero"], [203, 0, 1, "", "not_equal"], [82, 0, 1, "", "one_hot"], [84, 0, 1, "", "ones_like"], [451, 0, 1, "", "optimizer_update"], [511, 0, 1, "", "outer"], [336, 0, 1, "", "pad"], [533, 0, 1, "", "permute_dims"], [512, 0, 1, "", "pinv"], [350, 0, 1, "", "poisson"], [204, 0, 1, "", "positive"], [205, 0, 1, "", "pow"], [222, 0, 1, "", "prelu"], [591, 0, 1, "", "prod"], [513, 0, 1, "", "qr"], [363, 0, 1, "", "quantile"], [206, 0, 1, "", "rad2deg"], [568, 0, 1, "", "randint"], [569, 0, 1, "", "random_normal"], [570, 0, 1, "", "random_uniform"], [260, 0, 1, "", "real"], [207, 0, 1, "", "reciprocal"], [57, 0, 1, "", "relu"], [223, 0, 1, "", "relu6"], [208, 0, 1, "", "remainder"], [534, 0, 1, "", "repeat"], [535, 0, 1, "", "reshape"], [118, 0, 1, "", "result_type"], [536, 0, 1, "", "roll"], [337, 0, 1, "", "rot90"], [209, 0, 1, "", "round"], [494, 0, 1, "", "scaled_dot_product_attention"], [413, 0, 1, "", "scatter_flat"], [414, 0, 1, "", "scatter_nd"], [583, 0, 1, "", "searchsorted"], [224, 0, 1, "", "selu"], [424, 0, 1, "", "shape"], [572, 0, 1, "", "shuffle"], [58, 0, 1, "", "sigmoid"], [210, 0, 1, "", "sign"], [261, 0, 1, "", "signbit"], [211, 0, 1, "", "sin"], [262, 0, 1, "", "sinc"], [212, 0, 1, "", "sinh"], [514, 0, 1, "", "slogdet"], [59, 0, 1, "", "softmax"], [60, 0, 1, "", "softplus"], [515, 0, 1, "", "solve"], [584, 0, 1, "", "sort"], [527, 0, 1, "", "sparse_cross_entropy"], [537, 0, 1, "", "split"], [213, 0, 1, "", "sqrt"], [214, 0, 1, "", "square"], [538, 0, 1, "", "squeeze"], [426, 0, 1, "", "stable_divide"], [427, 0, 1, "", "stable_pow"], [539, 0, 1, "", "stack"], [592, 0, 1, "", "std"], [453, 0, 1, "", "stop_gradient"], [215, 0, 1, "", "subtract"], [593, 0, 1, "", "sum"], [428, 0, 1, "", "supports_inplace_updates"], [516, 0, 1, "", "svd"], [517, 0, 1, "", "svdvals"], [540, 0, 1, "", "swapaxes"], [338, 0, 1, "", "take_along_axis"], [216, 0, 1, "", "tan"], [217, 0, 1, "", "tanh"], [518, 0, 1, "", "tensordot"], [519, 0, 1, "", "tensorsolve"], [225, 0, 1, "", "thresholded_relu"], [541, 0, 1, "", "tile"], [150, 0, 1, "", "to_device"], [430, 0, 1, "", "to_list"], [432, 0, 1, "", "to_numpy"], [433, 0, 1, "", "to_scalar"], [339, 0, 1, "", "top_k"], [520, 0, 1, "", "trace"], [263, 0, 1, "", "trapz"], [85, 0, 1, "", "tril"], [86, 0, 1, "", "triu"], [218, 0, 1, "", "trunc"], [219, 0, 1, "", "trunc_divide"], [578, 0, 1, "", "unique_all"], [579, 0, 1, "", "unique_counts"], [580, 0, 1, "", "unique_inverse"], [581, 0, 1, "", "unique_values"], [351, 0, 1, "", "unravel_index"], [542, 0, 1, "", "unstack"], [441, 0, 1, "", "value_is_nan"], [521, 0, 1, "", "vander"], [594, 0, 1, "", "var"], [522, 0, 1, "", "vecdot"], [523, 0, 1, "", "vector_norm"], [524, 0, 1, "", "vector_to_skew_symmetric_matrix"], [340, 0, 1, "", "vsplit"], [341, 0, 1, "", "vstack"], [577, 0, 1, "", "where"], [264, 0, 1, "", "xlogy"], [543, 0, 1, "", "zero_pad"], [88, 0, 1, "", "zeros_like"], [265, 0, 1, "", "zeta"]], "ivy": [[465, 1, 1, "", "ArrayMode"], [461, 1, 1, "", "DefaultComplexDtype"], [462, 1, 1, "", "DefaultDevice"], [461, 1, 1, "", "DefaultDtype"], [461, 1, 1, "", "DefaultFloatDtype"], [461, 1, 1, "", "DefaultIntDtype"], [461, 1, 1, "", "DefaultUintDtype"], [466, 1, 1, "", "GradientTracking"], [459, 2, 1, "", "IfElse"], [286, 1, 1, "", "NativeSparseArray"], [460, 1, 1, "", "NestedSequence"], [462, 1, 1, "", "Profiler"], [286, 1, 1, "", "SparseArray"], [459, 2, 1, "", "WhileLoop"], [463, 2, 1, "", "abs"], [463, 2, 1, "", "acos"], [463, 2, 1, "", "acosh"], [466, 2, 1, "", "adam_step"], [466, 2, 1, "", "adam_update"], [289, 2, 1, "", "adaptive_avg_pool1d"], [290, 2, 1, "", "adaptive_avg_pool2d"], [463, 2, 1, "", "add"], [306, 2, 1, "", "adjoint"], [595, 2, 1, "", "all"], [465, 2, 1, "", "all_equal"], [547, 2, 1, "", "all_nested_indices"], [272, 2, 1, "", "allclose"], [272, 2, 1, "", "angle"], [596, 2, 1, "", "any"], [460, 2, 1, "", "arange"], [465, 2, 1, "", "arg_info"], [465, 2, 1, "", "arg_names"], [573, 2, 1, "", "argmax"], [574, 2, 1, "", "argmin"], [582, 2, 1, "", "argsort"], [575, 2, 1, "", "argwhere"], [460, 2, 1, "", "array"], [465, 2, 1, "", "array_equal"], [462, 2, 1, "", "as_ivy_dev"], [461, 2, 1, "", "as_ivy_dtype"], [462, 2, 1, "", "as_native_dev"], [461, 2, 1, "", "as_native_dtype"], [317, 2, 1, "", "as_strided"], [460, 2, 1, "", "asarray"], [460, 2, 1, "", "asarray_handle_nestable"], [460, 2, 1, "", "asarray_infer_device"], [460, 2, 1, "", "asarray_to_native_arrays_and_back"], [463, 2, 1, "", "asin"], [463, 2, 1, "", "asinh"], [465, 2, 1, "", "assert_supports_inplace"], [461, 2, 1, "", "astype"], [463, 2, 1, "", "atan"], [463, 2, 1, "", "atan2"], [463, 2, 1, "", "atanh"], [318, 2, 1, "", "atleast_1d"], [319, 2, 1, "", "atleast_2d"], [320, 2, 1, "", "atleast_3d"], [291, 2, 1, "", "avg_pool1d"], [292, 2, 1, "", "avg_pool2d"], [293, 2, 1, "", "avg_pool3d"], [342, 2, 1, "", "batch_norm"], [346, 2, 1, "", "bernoulli"], [347, 2, 1, "", "beta"], [272, 2, 1, "", "binarizer"], [525, 2, 1, "", "binary_cross_entropy"], [316, 2, 1, "", "binary_cross_entropy_with_logits"], [358, 2, 1, "", "bincount"], [274, 2, 1, "", "bind_custom_gradient_function"], [463, 2, 1, "", "bitwise_and"], [463, 2, 1, "", "bitwise_invert"], [463, 2, 1, "", "bitwise_left_shift"], [463, 2, 1, "", "bitwise_or"], [463, 2, 1, "", "bitwise_right_shift"], [463, 2, 1, "", "bitwise_xor"], [461, 2, 1, "", "broadcast_arrays"], [321, 2, 1, "", "broadcast_shapes"], [461, 2, 1, "", "broadcast_to"], [465, 2, 1, "", "cache_fn"], [461, 2, 1, "", "can_cast"], [463, 2, 1, "", "ceil"], [461, 2, 1, "", "check_float"], [495, 2, 1, "", "cholesky"], [462, 2, 1, "", "clear_cached_mem_on_dev"], [528, 2, 1, "", "clip"], [465, 2, 1, "", "clip_matrix_norm"], [465, 2, 1, "", "clip_vector_norm"], [461, 2, 1, "", "closest_valid_dtype"], [0, 2, 1, "", "compile"], [529, 2, 1, "", "concat"], [322, 2, 1, "", "concat_from_sequence"], [307, 2, 1, "", "cond"], [272, 2, 1, "", "conj"], [530, 2, 1, "", "constant_pad"], [465, 2, 1, "", "container_types"], [480, 2, 1, "", "conv"], [481, 2, 1, "", "conv1d"], [482, 2, 1, "", "conv1d_transpose"], [483, 2, 1, "", "conv2d"], [484, 2, 1, "", "conv2d_transpose"], [485, 2, 1, "", "conv3d"], [486, 2, 1, "", "conv3d_transpose"], [487, 2, 1, "", "conv_general_dilated"], [488, 2, 1, "", "conv_general_transpose"], [460, 2, 1, "", "copy_array"], [548, 2, 1, "", "copy_nest"], [272, 2, 1, "", "copysign"], [359, 2, 1, "", "corrcoef"], [463, 2, 1, "", "cos"], [463, 2, 1, "", "cosh"], [272, 2, 1, "", "count_nonzero"], [308, 2, 1, "", "cov"], [496, 2, 1, "", "cross"], [526, 2, 1, "", "cross_entropy"], [585, 2, 1, "", "cumprod"], [586, 2, 1, "", "cumsum"], [465, 2, 1, "", "current_backend_str"], [294, 2, 1, "", "dct"], [465, 2, 1, "", "default"], [461, 2, 1, "", "default_complex_dtype"], [462, 2, 1, "", "default_device"], [461, 2, 1, "", "default_dtype"], [461, 2, 1, "", "default_float_dtype"], [461, 2, 1, "", "default_int_dtype"], [461, 2, 1, "", "default_uint_dtype"], [463, 2, 1, "", "deg2rad"], [489, 2, 1, "", "depthwise_conv2d"], [457, 2, 1, "", "deserialize"], [497, 2, 1, "", "det"], [462, 2, 1, "", "dev"], [462, 2, 1, "", "dev_util"], [295, 2, 1, "", "dft"], [498, 2, 1, "", "diag"], [309, 2, 1, "", "diagflat"], [499, 2, 1, "", "diagonal"], [272, 2, 1, "", "diff"], [348, 2, 1, "", "dirichlet"], [463, 2, 1, "", "divide"], [490, 2, 1, "", "dropout"], [296, 2, 1, "", "dropout1d"], [297, 2, 1, "", "dropout3d"], [323, 2, 1, "", "dsplit"], [324, 2, 1, "", "dstack"], [461, 2, 1, "", "dtype"], [461, 2, 1, "", "dtype_bits"], [549, 2, 1, "", "duplicate_array_index_chains"], [458, 6, 1, "", "e"], [500, 2, 1, "", "eig"], [501, 2, 1, "", "eigh"], [311, 2, 1, "", "eigh_tridiagonal"], [312, 2, 1, "", "eigvals"], [502, 2, 1, "", "eigvalsh"], [465, 2, 1, "", "einops_rearrange"], [465, 2, 1, "", "einops_reduce"], [465, 2, 1, "", "einops_repeat"], [587, 2, 1, "", "einsum"], [298, 2, 1, "", "embedding"], [460, 2, 1, "", "empty"], [460, 2, 1, "", "empty_like"], [463, 2, 1, "", "equal"], [463, 2, 1, "", "erf"], [466, 2, 1, "", "execute_with_gradients"], [465, 2, 1, "", "exists"], [463, 2, 1, "", "exp"], [272, 2, 1, "", "exp2"], [325, 2, 1, "", "expand"], [531, 2, 1, "", "expand_dims"], [463, 2, 1, "", "expm1"], [460, 2, 1, "", "eye"], [269, 2, 1, "", "eye_like"], [299, 2, 1, "", "fft"], [461, 2, 1, "", "finfo"], [272, 2, 1, "", "fix"], [326, 2, 1, "", "flatten"], [532, 2, 1, "", "flip"], [327, 2, 1, "", "fliplr"], [328, 2, 1, "", "flipud"], [272, 2, 1, "", "float_power"], [463, 2, 1, "", "floor"], [463, 2, 1, "", "floor_divide"], [272, 2, 1, "", "fmax"], [272, 2, 1, "", "fmin"], [463, 2, 1, "", "fmod"], [544, 2, 1, "", "fomaml_step"], [465, 2, 1, "", "fourier_encode"], [272, 2, 1, "", "frexp"], [460, 2, 1, "", "from_dlpack"], [269, 2, 1, "", "frombuffer"], [460, 2, 1, "", "full"], [460, 2, 1, "", "full_like"], [462, 2, 1, "", "function_supported_devices"], [465, 2, 1, "", "function_supported_devices_and_dtypes"], [461, 2, 1, "", "function_supported_dtypes"], [462, 2, 1, "", "function_unsupported_devices"], [465, 2, 1, "", "function_unsupported_devices_and_dtypes"], [461, 2, 1, "", "function_unsupported_dtypes"], [349, 2, 1, "", "gamma"], [465, 2, 1, "", "gather"], [465, 2, 1, "", "gather_nd"], [272, 2, 1, "", "gcd"], [457, 2, 1, "", "gelu"], [457, 2, 1, "", "get"], [465, 2, 1, "", "get_all_arrays_in_memory"], [462, 2, 1, "", "get_all_ivy_arrays_on_dev"], [465, 2, 1, "", "get_array_mode"], [465, 2, 1, "", "get_exception_trace_mode"], [465, 2, 1, "", "get_item"], [465, 2, 1, "", "get_min_base"], [465, 2, 1, "", "get_min_denominator"], [465, 2, 1, "", "get_nestable_mode"], [465, 2, 1, "", "get_num_dims"], [465, 2, 1, "", "get_queue_timeout"], [465, 2, 1, "", "get_referrers_recursive"], [465, 2, 1, "", "get_show_func_wrapper_trace_mode"], [465, 2, 1, "", "get_tmp_dir"], [462, 2, 1, "", "gpu_is_available"], [466, 2, 1, "", "grad"], [272, 2, 1, "", "gradient"], [466, 2, 1, "", "gradient_descent_update"], [463, 2, 1, "", "greater"], [463, 2, 1, "", "greater_equal"], [269, 2, 1, "", "hamming_window"], [269, 2, 1, "", "hann_window"], [465, 2, 1, "", "has_nans"], [329, 2, 1, "", "heaviside"], [330, 2, 1, "", "hsplit"], [331, 2, 1, "", "hstack"], [272, 2, 1, "", "hypot"], [332, 2, 1, "", "i0"], [459, 2, 1, "", "if_else"], [300, 2, 1, "", "ifft"], [461, 2, 1, "", "iinfo"], [272, 2, 1, "", "imag"], [550, 2, 1, "", "index_nest"], [458, 6, 1, "", "inf"], [461, 2, 1, "", "infer_default_dtype"], [503, 2, 1, "", "inner"], [465, 2, 1, "", "inplace_arrays_supported"], [465, 2, 1, "", "inplace_decrement"], [465, 2, 1, "", "inplace_increment"], [465, 2, 1, "", "inplace_update"], [465, 2, 1, "", "inplace_variables_supported"], [551, 2, 1, "", "insert_into_nest_at_index"], [552, 2, 1, "", "insert_into_nest_at_indices"], [343, 2, 1, "", "instance_norm"], [301, 2, 1, "", "interp"], [302, 2, 1, "", "interpolate"], [504, 2, 1, "", "inv"], [461, 2, 1, "", "invalid_dtype"], [465, 2, 1, "", "is_array"], [461, 2, 1, "", "is_bool_dtype"], [461, 2, 1, "", "is_complex_dtype"], [461, 2, 1, "", "is_float_dtype"], [461, 2, 1, "", "is_int_dtype"], [465, 2, 1, "", "is_ivy_array"], [465, 2, 1, "", "is_ivy_container"], [354, 2, 1, "", "is_ivy_sparse_array"], [465, 2, 1, "", "is_native_array"], [461, 2, 1, "", "is_native_dtype"], [355, 2, 1, "", "is_native_sparse_array"], [461, 2, 1, "", "is_uint_dtype"], [272, 2, 1, "", "isclose"], [463, 2, 1, "", "isfinite"], [465, 2, 1, "", "isin"], [463, 2, 1, "", "isinf"], [463, 2, 1, "", "isnan"], [463, 2, 1, "", "isreal"], [465, 2, 1, "", "isscalar"], [465, 2, 1, "", "itemsize"], [466, 2, 1, "", "jac"], [269, 2, 1, "", "kaiser_bessel_derived_window"], [269, 2, 1, "", "kaiser_window"], [313, 2, 1, "", "kron"], [344, 2, 1, "", "l2_normalize"], [466, 2, 1, "", "lamb_update"], [466, 2, 1, "", "lars_update"], [566, 2, 1, "", "layer_norm"], [272, 2, 1, "", "lcm"], [272, 2, 1, "", "ldexp"], [457, 2, 1, "", "leaky_relu"], [272, 2, 1, "", "lerp"], [463, 2, 1, "", "less"], [463, 2, 1, "", "less_equal"], [352, 2, 1, "", "lexsort"], [491, 2, 1, "", "linear"], [460, 2, 1, "", "linspace"], [463, 2, 1, "", "log"], [463, 2, 1, "", "log10"], [463, 2, 1, "", "log1p"], [463, 2, 1, "", "log2"], [457, 2, 1, "", "log_softmax"], [463, 2, 1, "", "logaddexp"], [272, 2, 1, "", "logaddexp2"], [463, 2, 1, "", "logical_and"], [463, 2, 1, "", "logical_not"], [463, 2, 1, "", "logical_or"], [463, 2, 1, "", "logical_xor"], [267, 2, 1, "", "logit"], [267, 2, 1, "", "logsigmoid"], [460, 2, 1, "", "logspace"], [345, 2, 1, "", "lp_normalize"], [492, 2, 1, "", "lstm_update"], [505, 2, 1, "", "lu_factor"], [545, 2, 1, "", "maml_step"], [553, 2, 1, "", "map"], [554, 2, 1, "", "map_nest_at_index"], [555, 2, 1, "", "map_nest_at_indices"], [465, 2, 1, "", "match_kwargs"], [506, 2, 1, "", "matmul"], [314, 2, 1, "", "matrix_exp"], [507, 2, 1, "", "matrix_norm"], [508, 2, 1, "", "matrix_power"], [509, 2, 1, "", "matrix_rank"], [510, 2, 1, "", "matrix_transpose"], [588, 2, 1, "", "max"], [303, 2, 1, "", "max_pool1d"], [304, 2, 1, "", "max_pool2d"], [305, 2, 1, "", "max_pool3d"], [463, 2, 1, "", "maximum"], [589, 2, 1, "", "mean"], [360, 2, 1, "", "median"], [460, 2, 1, "", "meshgrid"], [590, 2, 1, "", "min"], [463, 2, 1, "", "minimum"], [457, 2, 1, "", "mish"], [333, 2, 1, "", "moveaxis"], [353, 2, 1, "", "msort"], [315, 2, 1, "", "multi_dot"], [493, 2, 1, "", "multi_head_attention"], [556, 2, 1, "", "multi_index_nest"], [567, 2, 1, "", "multinomial"], [463, 2, 1, "", "multiply"], [465, 2, 1, "", "multiprocessing"], [458, 6, 1, "", "nan"], [272, 2, 1, "", "nan_to_num"], [361, 2, 1, "", "nanmean"], [362, 2, 1, "", "nanmedian"], [272, 2, 1, "", "nansum"], [460, 2, 1, "", "native_array"], [356, 2, 1, "", "native_sparse_array"], [357, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [334, 2, 1, "", "ndenumerate"], [335, 2, 1, "", "ndindex"], [463, 2, 1, "", "negative"], [557, 2, 1, "", "nested_any"], [558, 2, 1, "", "nested_argwhere"], [559, 2, 1, "", "nested_map"], [560, 2, 1, "", "nested_multi_map"], [458, 6, 1, "", "newaxis"], [272, 2, 1, "", "nextafter"], [576, 2, 1, "", "nonzero"], [463, 2, 1, "", "not_equal"], [465, 2, 1, "", "num_arrays_in_memory"], [462, 2, 1, "", "num_cpu_cores"], [462, 2, 1, "", "num_gpus"], [462, 2, 1, "", "num_ivy_arrays_on_dev"], [460, 2, 1, "", "one_hot"], [460, 2, 1, "", "ones"], [460, 2, 1, "", "ones_like"], [466, 2, 1, "", "optimizer_update"], [511, 2, 1, "", "outer"], [336, 2, 1, "", "pad"], [462, 2, 1, "", "percent_used_mem_on_dev"], [533, 2, 1, "", "permute_dims"], [458, 6, 1, "", "pi"], [512, 2, 1, "", "pinv"], [350, 2, 1, "", "poisson"], [463, 2, 1, "", "positive"], [463, 2, 1, "", "pow"], [267, 2, 1, "", "prelu"], [465, 2, 1, "", "print_all_arrays_in_memory"], [462, 2, 1, "", "print_all_ivy_arrays_on_dev"], [591, 2, 1, "", "prod"], [461, 2, 1, "", "promote_types"], [461, 2, 1, "", "promote_types_of_inputs"], [561, 2, 1, "", "prune_empty"], [562, 2, 1, "", "prune_nest_at_index"], [563, 2, 1, "", "prune_nest_at_indices"], [513, 2, 1, "", "qr"], [363, 2, 1, "", "quantile"], [463, 2, 1, "", "rad2deg"], [568, 2, 1, "", "randint"], [569, 2, 1, "", "random_normal"], [570, 2, 1, "", "random_uniform"], [272, 2, 1, "", "real"], [463, 2, 1, "", "reciprocal"], [457, 2, 1, "", "relu"], [267, 2, 1, "", "relu6"], [463, 2, 1, "", "remainder"], [534, 2, 1, "", "repeat"], [546, 2, 1, "", "reptile_step"], [535, 2, 1, "", "reshape"], [461, 2, 1, "", "result_type"], [536, 2, 1, "", "roll"], [337, 2, 1, "", "rot90"], [463, 2, 1, "", "round"], [494, 2, 1, "", "scaled_dot_product_attention"], [465, 2, 1, "", "scatter_flat"], [465, 2, 1, "", "scatter_nd"], [583, 2, 1, "", "searchsorted"], [571, 2, 1, "", "seed"], [267, 2, 1, "", "selu"], [465, 2, 1, "", "set_array_mode"], [461, 2, 1, "", "set_default_complex_dtype"], [462, 2, 1, "", "set_default_device"], [461, 2, 1, "", "set_default_dtype"], [461, 2, 1, "", "set_default_float_dtype"], [461, 2, 1, "", "set_default_int_dtype"], [461, 2, 1, "", "set_default_uint_dtype"], [465, 2, 1, "", "set_exception_trace_mode"], [465, 2, 1, "", "set_min_base"], [465, 2, 1, "", "set_min_denominator"], [564, 2, 1, "", "set_nest_at_index"], [565, 2, 1, "", "set_nest_at_indices"], [465, 2, 1, "", "set_nestable_mode"], [465, 2, 1, "", "set_queue_timeout"], [465, 2, 1, "", "set_shape_array_mode"], [465, 2, 1, "", "set_show_func_wrapper_trace_mode"], [462, 2, 1, "", "set_split_factor"], [465, 2, 1, "", "set_tmp_dir"], [466, 2, 1, "", "set_with_grads"], [465, 2, 1, "", "shape"], [465, 2, 1, "", "shape_array_mode"], [572, 2, 1, "", "shuffle"], [457, 2, 1, "", "sigmoid"], [463, 2, 1, "", "sign"], [272, 2, 1, "", "signbit"], [463, 2, 1, "", "sin"], [272, 2, 1, "", "sinc"], [463, 2, 1, "", "sinh"], [514, 2, 1, "", "slogdet"], [457, 2, 1, "", "softmax"], [457, 2, 1, "", "softplus"], [515, 2, 1, "", "solve"], [584, 2, 1, "", "sort"], [527, 2, 1, "", "sparse_cross_entropy"], [537, 2, 1, "", "split"], [462, 2, 1, "", "split_factor"], [462, 2, 1, "", "split_func_call"], [463, 2, 1, "", "sqrt"], [463, 2, 1, "", "square"], [538, 2, 1, "", "squeeze"], [465, 2, 1, "", "stable_divide"], [465, 2, 1, "", "stable_pow"], [539, 2, 1, "", "stack"], [592, 2, 1, "", "std"], [466, 2, 1, "", "stop_gradient"], [463, 2, 1, "", "subtract"], [593, 2, 1, "", "sum"], [465, 2, 1, "", "supports_inplace_updates"], [516, 2, 1, "", "svd"], [517, 2, 1, "", "svdvals"], [540, 2, 1, "", "swapaxes"], [338, 2, 1, "", "take_along_axis"], [463, 2, 1, "", "tan"], [463, 2, 1, "", "tanh"], [518, 2, 1, "", "tensordot"], [519, 2, 1, "", "tensorsolve"], [267, 2, 1, "", "thresholded_relu"], [541, 2, 1, "", "tile"], [462, 2, 1, "", "to_device"], [465, 2, 1, "", "to_ivy_shape"], [465, 2, 1, "", "to_list"], [465, 2, 1, "", "to_native_shape"], [465, 2, 1, "", "to_numpy"], [465, 2, 1, "", "to_scalar"], [339, 2, 1, "", "top_k"], [462, 2, 1, "", "total_mem_on_dev"], [462, 2, 1, "", "tpu_is_available"], [520, 2, 1, "", "trace"], [1, 2, 1, "", "transpile"], [272, 2, 1, "", "trapz"], [460, 2, 1, "", "tril"], [269, 2, 1, "", "tril_indices"], [460, 2, 1, "", "triu"], [269, 2, 1, "", "triu_indices"], [463, 2, 1, "", "trunc"], [463, 2, 1, "", "trunc_divide"], [465, 2, 1, "", "try_else_none"], [461, 2, 1, "", "type_promote_arrays"], [1, 2, 1, "", "unify"], [578, 2, 1, "", "unique_all"], [579, 2, 1, "", "unique_counts"], [580, 2, 1, "", "unique_inverse"], [581, 2, 1, "", "unique_values"], [351, 2, 1, "", "unravel_index"], [465, 2, 1, "", "unset_array_mode"], [461, 2, 1, "", "unset_default_complex_dtype"], [462, 2, 1, "", "unset_default_device"], [461, 2, 1, "", "unset_default_dtype"], [461, 2, 1, "", "unset_default_float_dtype"], [461, 2, 1, "", "unset_default_int_dtype"], [461, 2, 1, "", "unset_default_uint_dtype"], [465, 2, 1, "", "unset_exception_trace_mode"], [465, 2, 1, "", "unset_nestable_mode"], [465, 2, 1, "", "unset_queue_timeout"], [465, 2, 1, "", "unset_shape_array_mode"], [465, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [466, 2, 1, "", "unset_with_grads"], [542, 2, 1, "", "unstack"], [462, 2, 1, "", "used_mem_on_dev"], [461, 2, 1, "", "valid_dtype"], [466, 2, 1, "", "value_and_grad"], [465, 2, 1, "", "value_is_nan"], [521, 2, 1, "", "vander"], [594, 2, 1, "", "var"], [522, 2, 1, "", "vecdot"], [523, 2, 1, "", "vector_norm"], [524, 2, 1, "", "vector_to_skew_symmetric_matrix"], [465, 2, 1, "", "vmap"], [269, 2, 1, "", "vorbis_window"], [340, 2, 1, "", "vsplit"], [341, 2, 1, "", "vstack"], [577, 2, 1, "", "where"], [459, 2, 1, "", "while_loop"], [466, 2, 1, "", "with_grads"], [272, 2, 1, "", "xlogy"], [543, 2, 1, "", "zero_pad"], [460, 2, 1, "", "zeros"], [460, 2, 1, "", "zeros_like"], [272, 2, 1, "", "zeta"]], "ivy.Container": [[155, 0, 1, "", "abs"], [156, 0, 1, "", "acos"], [157, 0, 1, "", "acosh"], [443, 0, 1, "", "adam_step"], [444, 0, 1, "", "adam_update"], [289, 0, 1, "", "adaptive_avg_pool1d"], [290, 0, 1, "", "adaptive_avg_pool2d"], [158, 0, 1, "", "add"], [306, 0, 1, "", "adjoint"], [595, 0, 1, "", "all"], [364, 0, 1, "", "all_equal"], [235, 0, 1, "", "allclose"], [236, 0, 1, "", "angle"], [596, 0, 1, "", "any"], [573, 0, 1, "", "argmax"], [574, 0, 1, "", "argmin"], [582, 0, 1, "", "argsort"], [575, 0, 1, "", "argwhere"], [367, 0, 1, "", "array_equal"], [317, 0, 1, "", "as_strided"], [159, 0, 1, "", "asin"], [160, 0, 1, "", "asinh"], [368, 0, 1, "", "assert_supports_inplace"], [91, 0, 1, "", "astype"], [161, 0, 1, "", "atan"], [162, 0, 1, "", "atan2"], [163, 0, 1, "", "atanh"], [318, 0, 1, "", "atleast_1d"], [319, 0, 1, "", "atleast_2d"], [320, 0, 1, "", "atleast_3d"], [291, 0, 1, "", "avg_pool1d"], [292, 0, 1, "", "avg_pool2d"], [293, 0, 1, "", "avg_pool3d"], [342, 0, 1, "", "batch_norm"], [346, 0, 1, "", "bernoulli"], [347, 0, 1, "", "beta"], [237, 0, 1, "", "binarizer"], [525, 0, 1, "", "binary_cross_entropy"], [316, 0, 1, "", "binary_cross_entropy_with_logits"], [358, 0, 1, "", "bincount"], [164, 0, 1, "", "bitwise_and"], [165, 0, 1, "", "bitwise_invert"], [166, 0, 1, "", "bitwise_left_shift"], [167, 0, 1, "", "bitwise_or"], [168, 0, 1, "", "bitwise_right_shift"], [169, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "broadcast_arrays"], [321, 0, 1, "", "broadcast_shapes"], [93, 0, 1, "", "broadcast_to"], [94, 0, 1, "", "can_cast"], [170, 0, 1, "", "ceil"], [495, 0, 1, "", "cholesky"], [528, 0, 1, "", "clip"], [370, 0, 1, "", "clip_matrix_norm"], [371, 0, 1, "", "clip_vector_norm"], [529, 0, 1, "", "concat"], [322, 0, 1, "", "concat_from_sequence"], [307, 0, 1, "", "cond"], [238, 0, 1, "", "conj"], [530, 0, 1, "", "constant_pad"], [481, 0, 1, "", "conv1d"], [482, 0, 1, "", "conv1d_transpose"], [483, 0, 1, "", "conv2d"], [484, 0, 1, "", "conv2d_transpose"], [485, 0, 1, "", "conv3d"], [486, 0, 1, "", "conv3d_transpose"], [239, 0, 1, "", "copysign"], [359, 0, 1, "", "corrcoef"], [171, 0, 1, "", "cos"], [172, 0, 1, "", "cosh"], [240, 0, 1, "", "count_nonzero"], [308, 0, 1, "", "cov"], [496, 0, 1, "", "cross"], [526, 0, 1, "", "cross_entropy"], [585, 0, 1, "", "cumprod"], [586, 0, 1, "", "cumsum"], [294, 0, 1, "", "dct"], [173, 0, 1, "", "deg2rad"], [489, 0, 1, "", "depthwise_conv2d"], [497, 0, 1, "", "det"], [135, 0, 1, "", "dev"], [295, 0, 1, "", "dft"], [498, 0, 1, "", "diag"], [309, 0, 1, "", "diagflat"], [499, 0, 1, "", "diagonal"], [241, 0, 1, "", "diff"], [348, 0, 1, "", "dirichlet"], [174, 0, 1, "", "divide"], [490, 0, 1, "", "dropout"], [296, 0, 1, "", "dropout1d"], [297, 0, 1, "", "dropout3d"], [323, 0, 1, "", "dsplit"], [324, 0, 1, "", "dstack"], [102, 0, 1, "", "dtype"], [500, 0, 1, "", "eig"], [501, 0, 1, "", "eigh"], [311, 0, 1, "", "eigh_tridiagonal"], [312, 0, 1, "", "eigvals"], [502, 0, 1, "", "eigvalsh"], [375, 0, 1, "", "einops_rearrange"], [376, 0, 1, "", "einops_reduce"], [377, 0, 1, "", "einops_repeat"], [587, 0, 1, "", "einsum"], [298, 0, 1, "", "embedding"], [73, 0, 1, "", "empty_like"], [175, 0, 1, "", "equal"], [176, 0, 1, "", "erf"], [177, 0, 1, "", "exp"], [242, 0, 1, "", "exp2"], [325, 0, 1, "", "expand"], [531, 0, 1, "", "expand_dims"], [178, 0, 1, "", "expm1"], [226, 0, 1, "", "eye_like"], [299, 0, 1, "", "fft"], [104, 0, 1, "", "finfo"], [243, 0, 1, "", "fix"], [326, 0, 1, "", "flatten"], [532, 0, 1, "", "flip"], [327, 0, 1, "", "fliplr"], [328, 0, 1, "", "flipud"], [244, 0, 1, "", "float_power"], [179, 0, 1, "", "floor"], [180, 0, 1, "", "floor_divide"], [245, 0, 1, "", "fmax"], [246, 0, 1, "", "fmin"], [181, 0, 1, "", "fmod"], [379, 0, 1, "", "fourier_encode"], [247, 0, 1, "", "frexp"], [75, 0, 1, "", "from_dlpack"], [227, 0, 1, "", "frombuffer"], [77, 0, 1, "", "full_like"], [382, 0, 1, "", "gather"], [383, 0, 1, "", "gather_nd"], [248, 0, 1, "", "gcd"], [52, 0, 1, "", "gelu"], [53, 0, 1, "", "get"], [391, 0, 1, "", "get_num_dims"], [249, 0, 1, "", "gradient"], [447, 0, 1, "", "gradient_descent_update"], [182, 0, 1, "", "greater"], [183, 0, 1, "", "greater_equal"], [228, 0, 1, "", "hamming_window"], [229, 0, 1, "", "hann_window"], [396, 0, 1, "", "has_nans"], [329, 0, 1, "", "heaviside"], [330, 0, 1, "", "hsplit"], [331, 0, 1, "", "hstack"], [250, 0, 1, "", "hypot"], [332, 0, 1, "", "i0"], [300, 0, 1, "", "ifft"], [107, 0, 1, "", "iinfo"], [251, 0, 1, "", "imag"], [503, 0, 1, "", "inner"], [398, 0, 1, "", "inplace_decrement"], [399, 0, 1, "", "inplace_increment"], [400, 0, 1, "", "inplace_update"], [343, 0, 1, "", "instance_norm"], [302, 0, 1, "", "interpolate"], [504, 0, 1, "", "inv"], [402, 0, 1, "", "is_array"], [110, 0, 1, "", "is_bool_dtype"], [111, 0, 1, "", "is_complex_dtype"], [112, 0, 1, "", "is_float_dtype"], [113, 0, 1, "", "is_int_dtype"], [403, 0, 1, "", "is_ivy_array"], [405, 0, 1, "", "is_native_array"], [115, 0, 1, "", "is_uint_dtype"], [252, 0, 1, "", "isclose"], [184, 0, 1, "", "isfinite"], [406, 0, 1, "", "isin"], [185, 0, 1, "", "isinf"], [186, 0, 1, "", "isnan"], [187, 0, 1, "", "isreal"], [408, 0, 1, "", "itemsize"], [230, 0, 1, "", "kaiser_bessel_derived_window"], [231, 0, 1, "", "kaiser_window"], [313, 0, 1, "", "kron"], [344, 0, 1, "", "l2_normalize"], [449, 0, 1, "", "lamb_update"], [450, 0, 1, "", "lars_update"], [566, 0, 1, "", "layer_norm"], [253, 0, 1, "", "lcm"], [254, 0, 1, "", "ldexp"], [54, 0, 1, "", "leaky_relu"], [255, 0, 1, "", "lerp"], [188, 0, 1, "", "less"], [189, 0, 1, "", "less_equal"], [352, 0, 1, "", "lexsort"], [491, 0, 1, "", "linear"], [78, 0, 1, "", "linspace"], [190, 0, 1, "", "log"], [191, 0, 1, "", "log10"], [192, 0, 1, "", "log1p"], [193, 0, 1, "", "log2"], [55, 0, 1, "", "log_softmax"], [194, 0, 1, "", "logaddexp"], [256, 0, 1, "", "logaddexp2"], [195, 0, 1, "", "logical_and"], [196, 0, 1, "", "logical_not"], [197, 0, 1, "", "logical_or"], [198, 0, 1, "", "logical_xor"], [220, 0, 1, "", "logit"], [221, 0, 1, "", "logsigmoid"], [79, 0, 1, "", "logspace"], [345, 0, 1, "", "lp_normalize"], [492, 0, 1, "", "lstm_update"], [506, 0, 1, "", "matmul"], [314, 0, 1, "", "matrix_exp"], [507, 0, 1, "", "matrix_norm"], [508, 0, 1, "", "matrix_power"], [509, 0, 1, "", "matrix_rank"], [510, 0, 1, "", "matrix_transpose"], [588, 0, 1, "", "max"], [303, 0, 1, "", "max_pool1d"], [304, 0, 1, "", "max_pool2d"], [305, 0, 1, "", "max_pool3d"], [199, 0, 1, "", "maximum"], [589, 0, 1, "", "mean"], [360, 0, 1, "", "median"], [80, 0, 1, "", "meshgrid"], [590, 0, 1, "", "min"], [200, 0, 1, "", "minimum"], [56, 0, 1, "", "mish"], [333, 0, 1, "", "moveaxis"], [353, 0, 1, "", "msort"], [315, 0, 1, "", "multi_dot"], [493, 0, 1, "", "multi_head_attention"], [567, 0, 1, "", "multinomial"], [201, 0, 1, "", "multiply"], [257, 0, 1, "", "nan_to_num"], [361, 0, 1, "", "nanmean"], [362, 0, 1, "", "nanmedian"], [258, 0, 1, "", "nansum"], [81, 0, 1, "", "native_array"], [202, 0, 1, "", "negative"], [259, 0, 1, "", "nextafter"], [576, 0, 1, "", "nonzero"], [203, 0, 1, "", "not_equal"], [82, 0, 1, "", "one_hot"], [84, 0, 1, "", "ones_like"], [451, 0, 1, "", "optimizer_update"], [511, 0, 1, "", "outer"], [336, 0, 1, "", "pad"], [533, 0, 1, "", "permute_dims"], [512, 0, 1, "", "pinv"], [350, 0, 1, "", "poisson"], [204, 0, 1, "", "positive"], [205, 0, 1, "", "pow"], [222, 0, 1, "", "prelu"], [591, 0, 1, "", "prod"], [513, 0, 1, "", "qr"], [363, 0, 1, "", "quantile"], [206, 0, 1, "", "rad2deg"], [568, 0, 1, "", "randint"], [569, 0, 1, "", "random_normal"], [570, 0, 1, "", "random_uniform"], [260, 0, 1, "", "real"], [207, 0, 1, "", "reciprocal"], [57, 0, 1, "", "relu"], [223, 0, 1, "", "relu6"], [208, 0, 1, "", "remainder"], [534, 0, 1, "", "repeat"], [535, 0, 1, "", "reshape"], [118, 0, 1, "", "result_type"], [536, 0, 1, "", "roll"], [337, 0, 1, "", "rot90"], [209, 0, 1, "", "round"], [494, 0, 1, "", "scaled_dot_product_attention"], [413, 0, 1, "", "scatter_flat"], [414, 0, 1, "", "scatter_nd"], [583, 0, 1, "", "searchsorted"], [224, 0, 1, "", "selu"], [572, 0, 1, "", "shuffle"], [58, 0, 1, "", "sigmoid"], [210, 0, 1, "", "sign"], [261, 0, 1, "", "signbit"], [211, 0, 1, "", "sin"], [262, 0, 1, "", "sinc"], [212, 0, 1, "", "sinh"], [514, 0, 1, "", "slogdet"], [59, 0, 1, "", "softmax"], [60, 0, 1, "", "softplus"], [515, 0, 1, "", "solve"], [584, 0, 1, "", "sort"], [527, 0, 1, "", "sparse_cross_entropy"], [537, 0, 1, "", "split"], [213, 0, 1, "", "sqrt"], [214, 0, 1, "", "square"], [538, 0, 1, "", "squeeze"], [426, 0, 1, "", "stable_divide"], [427, 0, 1, "", "stable_pow"], [539, 0, 1, "", "stack"], [592, 0, 1, "", "std"], [453, 0, 1, "", "stop_gradient"], [215, 0, 1, "", "subtract"], [593, 0, 1, "", "sum"], [428, 0, 1, "", "supports_inplace_updates"], [516, 0, 1, "", "svd"], [517, 0, 1, "", "svdvals"], [540, 0, 1, "", "swapaxes"], [338, 0, 1, "", "take_along_axis"], [216, 0, 1, "", "tan"], [217, 0, 1, "", "tanh"], [518, 0, 1, "", "tensordot"], [519, 0, 1, "", "tensorsolve"], [225, 0, 1, "", "thresholded_relu"], [541, 0, 1, "", "tile"], [150, 0, 1, "", "to_device"], [430, 0, 1, "", "to_list"], [432, 0, 1, "", "to_numpy"], [433, 0, 1, "", "to_scalar"], [339, 0, 1, "", "top_k"], [520, 0, 1, "", "trace"], [263, 0, 1, "", "trapz"], [85, 0, 1, "", "tril"], [232, 0, 1, "", "tril_indices"], [86, 0, 1, "", "triu"], [233, 0, 1, "", "triu_indices"], [218, 0, 1, "", "trunc"], [219, 0, 1, "", "trunc_divide"], [578, 0, 1, "", "unique_all"], [579, 0, 1, "", "unique_counts"], [580, 0, 1, "", "unique_inverse"], [581, 0, 1, "", "unique_values"], [351, 0, 1, "", "unravel_index"], [542, 0, 1, "", "unstack"], [441, 0, 1, "", "value_is_nan"], [521, 0, 1, "", "vander"], [594, 0, 1, "", "var"], [522, 0, 1, "", "vecdot"], [523, 0, 1, "", "vector_norm"], [524, 0, 1, "", "vector_to_skew_symmetric_matrix"], [234, 0, 1, "", "vorbis_window"], [340, 0, 1, "", "vsplit"], [341, 0, 1, "", "vstack"], [577, 0, 1, "", "where"], [264, 0, 1, "", "xlogy"], [543, 0, 1, "", "zero_pad"], [88, 0, 1, "", "zeros_like"], [265, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[2, 3, 0, "-", "activations"], [47, 3, 0, "-", "array"], [3, 3, 0, "-", "conversions"], [4, 3, 0, "-", "creation"], [5, 3, 0, "-", "data_type"], [6, 3, 0, "-", "device"], [7, 3, 0, "-", "elementwise"], [8, 3, 0, "-", "experimental"], [9, 3, 0, "-", "general"], [10, 3, 0, "-", "gradients"], [11, 3, 0, "-", "image"], [12, 3, 0, "-", "layers"], [13, 3, 0, "-", "linear_algebra"], [14, 3, 0, "-", "losses"], [15, 3, 0, "-", "manipulation"], [16, 3, 0, "-", "norms"], [17, 3, 0, "-", "random"], [18, 3, 0, "-", "searching"], [19, 3, 0, "-", "set"], [20, 3, 0, "-", "sorting"], [21, 3, 0, "-", "statistical"], [22, 3, 0, "-", "utility"], [23, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[2, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[2, 4, 1, "", "_abc_impl"], [2, 0, 1, "", "gelu"], [2, 0, 1, "", "leaky_relu"], [2, 0, 1, "", "log_softmax"], [2, 0, 1, "", "mish"], [2, 0, 1, "", "relu"], [2, 0, 1, "", "sigmoid"], [2, 0, 1, "", "softmax"], [2, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[47, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[47, 5, 1, "", "T"], [47, 0, 1, "", "__abs__"], [47, 0, 1, "", "__add__"], [47, 0, 1, "", "__eq__"], [47, 0, 1, "", "__ge__"], [47, 0, 1, "", "__gt__"], [47, 0, 1, "", "__init__"], [47, 0, 1, "", "__le__"], [47, 0, 1, "", "__lt__"], [47, 0, 1, "", "__ne__"], [47, 0, 1, "", "__pow__"], [47, 0, 1, "", "__radd__"], [47, 0, 1, "", "__rrshift__"], [47, 0, 1, "", "__rshift__"], [47, 0, 1, "", "__rsub__"], [47, 0, 1, "", "__sub__"], [47, 0, 1, "", "__truediv__"], [47, 0, 1, "", "__xor__"], [47, 5, 1, "", "base"], [47, 5, 1, "", "data"], [47, 5, 1, "", "device"], [47, 5, 1, "", "dtype"], [47, 5, 1, "", "dynamic_backend"], [47, 5, 1, "", "itemsize"], [47, 5, 1, "", "mT"], [47, 5, 1, "", "ndim"], [47, 5, 1, "", "shape"], [47, 5, 1, "", "size"]], "ivy.data_classes.array.conversions": [[3, 2, 1, "", "_to_ivy"], [3, 2, 1, "", "_to_native"], [3, 2, 1, "", "args_to_ivy"], [3, 2, 1, "", "args_to_native"], [3, 2, 1, "", "to_ivy"], [3, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[4, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "asarray"], [4, 0, 1, "", "copy_array"], [4, 0, 1, "", "empty_like"], [4, 0, 1, "", "from_dlpack"], [4, 0, 1, "", "full_like"], [4, 0, 1, "", "linspace"], [4, 0, 1, "", "logspace"], [4, 0, 1, "", "meshgrid"], [4, 0, 1, "", "native_array"], [4, 0, 1, "", "one_hot"], [4, 0, 1, "", "ones_like"], [4, 0, 1, "", "tril"], [4, 0, 1, "", "triu"], [4, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[5, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "astype"], [5, 0, 1, "", "broadcast_arrays"], [5, 0, 1, "", "broadcast_to"], [5, 0, 1, "", "can_cast"], [5, 0, 1, "", "dtype"], [5, 0, 1, "", "finfo"], [5, 0, 1, "", "iinfo"], [5, 0, 1, "", "is_bool_dtype"], [5, 0, 1, "", "is_float_dtype"], [5, 0, 1, "", "is_int_dtype"], [5, 0, 1, "", "is_uint_dtype"], [5, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[6, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "dev"], [6, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[7, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "abs"], [7, 0, 1, "", "acos"], [7, 0, 1, "", "acosh"], [7, 0, 1, "", "add"], [7, 0, 1, "", "asin"], [7, 0, 1, "", "asinh"], [7, 0, 1, "", "atan"], [7, 0, 1, "", "atan2"], [7, 0, 1, "", "atanh"], [7, 0, 1, "", "bitwise_and"], [7, 0, 1, "", "bitwise_invert"], [7, 0, 1, "", "bitwise_left_shift"], [7, 0, 1, "", "bitwise_or"], [7, 0, 1, "", "bitwise_right_shift"], [7, 0, 1, "", "bitwise_xor"], [7, 0, 1, "", "ceil"], [7, 0, 1, "", "cos"], [7, 0, 1, "", "cosh"], [7, 0, 1, "", "deg2rad"], [7, 0, 1, "", "divide"], [7, 0, 1, "", "equal"], [7, 0, 1, "", "erf"], [7, 0, 1, "", "exp"], [7, 0, 1, "", "expm1"], [7, 0, 1, "", "floor"], [7, 0, 1, "", "floor_divide"], [7, 0, 1, "", "greater"], [7, 0, 1, "", "greater_equal"], [7, 0, 1, "", "isfinite"], [7, 0, 1, "", "isinf"], [7, 0, 1, "", "isnan"], [7, 0, 1, "", "isreal"], [7, 0, 1, "", "less"], [7, 0, 1, "", "less_equal"], [7, 0, 1, "", "log"], [7, 0, 1, "", "log10"], [7, 0, 1, "", "log1p"], [7, 0, 1, "", "log2"], [7, 0, 1, "", "logaddexp"], [7, 0, 1, "", "logical_and"], [7, 0, 1, "", "logical_not"], [7, 0, 1, "", "logical_or"], [7, 0, 1, "", "logical_xor"], [7, 0, 1, "", "maximum"], [7, 0, 1, "", "minimum"], [7, 0, 1, "", "multiply"], [7, 0, 1, "", "negative"], [7, 0, 1, "", "not_equal"], [7, 0, 1, "", "positive"], [7, 0, 1, "", "pow"], [7, 0, 1, "", "rad2deg"], [7, 0, 1, "", "reciprocal"], [7, 0, 1, "", "remainder"], [7, 0, 1, "", "round"], [7, 0, 1, "", "sign"], [7, 0, 1, "", "sin"], [7, 0, 1, "", "sinh"], [7, 0, 1, "", "sqrt"], [7, 0, 1, "", "square"], [7, 0, 1, "", "subtract"], [7, 0, 1, "", "tan"], [7, 0, 1, "", "tanh"], [7, 0, 1, "", "trunc"], [7, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[8, 3, 0, "-", "activations"], [8, 3, 0, "-", "conversions"], [8, 3, 0, "-", "creation"], [8, 3, 0, "-", "data_type"], [8, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [8, 3, 0, "-", "general"], [8, 3, 0, "-", "gradients"], [8, 3, 0, "-", "image"], [8, 3, 0, "-", "layers"], [8, 3, 0, "-", "linear_algebra"], [8, 3, 0, "-", "losses"], [8, 3, 0, "-", "manipulation"], [8, 3, 0, "-", "norms"], [8, 3, 0, "-", "random"], [8, 3, 0, "-", "searching"], [8, 3, 0, "-", "set"], [8, 3, 0, "-", "sorting"], [8, 3, 0, "-", "statistical"], [8, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[8, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "logit"], [8, 0, 1, "", "logsigmoid"], [8, 0, 1, "", "prelu"], [8, 0, 1, "", "relu6"], [8, 0, 1, "", "selu"], [8, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[8, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[8, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "eye_like"]], "ivy.data_classes.array.experimental.data_type": [[8, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[8, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[8, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "allclose"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "binarizer"], [8, 0, 1, "", "conj"], [8, 0, 1, "", "copysign"], [8, 0, 1, "", "count_nonzero"], [8, 0, 1, "", "diff"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "fix"], [8, 0, 1, "", "float_power"], [8, 0, 1, "", "fmax"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "fmod"], [8, 0, 1, "", "frexp"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "gradient"], [8, 0, 1, "", "hypot"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isclose"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "ldexp"], [8, 0, 1, "", "lerp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "nansum"], [8, 0, 1, "", "nextafter"], [8, 0, 1, "", "real"], [8, 0, 1, "", "signbit"], [8, 0, 1, "", "sinc"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "xlogy"], [8, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[8, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.gradients": [[8, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[8, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[8, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adaptive_avg_pool1d"], [8, 0, 1, "", "adaptive_avg_pool2d"], [8, 0, 1, "", "avg_pool1d"], [8, 0, 1, "", "avg_pool2d"], [8, 0, 1, "", "avg_pool3d"], [8, 0, 1, "", "dct"], [8, 0, 1, "", "dft"], [8, 0, 1, "", "embedding"], [8, 0, 1, "", "fft"], [8, 0, 1, "", "ifft"], [8, 0, 1, "", "interpolate"], [8, 0, 1, "", "max_pool1d"], [8, 0, 1, "", "max_pool2d"], [8, 0, 1, "", "max_pool3d"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adjoint"], [8, 0, 1, "", "cond"], [8, 0, 1, "", "cov"], [8, 0, 1, "", "diagflat"], [8, 0, 1, "", "eig"], [8, 0, 1, "", "eigh_tridiagonal"], [8, 0, 1, "", "eigvals"], [8, 0, 1, "", "kron"], [8, 0, 1, "", "matrix_exp"], [8, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[8, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[8, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "as_strided"], [8, 0, 1, "", "atleast_1d"], [8, 0, 1, "", "atleast_2d"], [8, 0, 1, "", "atleast_3d"], [8, 0, 1, "", "concat_from_sequence"], [8, 0, 1, "", "dsplit"], [8, 0, 1, "", "dstack"], [8, 0, 1, "", "expand"], [8, 0, 1, "", "flatten"], [8, 0, 1, "", "fliplr"], [8, 0, 1, "", "flipud"], [8, 0, 1, "", "heaviside"], [8, 0, 1, "", "hsplit"], [8, 0, 1, "", "hstack"], [8, 0, 1, "", "i0"], [8, 0, 1, "", "moveaxis"], [8, 0, 1, "", "pad"], [8, 0, 1, "", "rot90"], [8, 0, 1, "", "take_along_axis"], [8, 0, 1, "", "top_k"], [8, 0, 1, "", "vsplit"], [8, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[8, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "batch_norm"], [8, 0, 1, "", "instance_norm"], [8, 0, 1, "", "l2_normalize"], [8, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[8, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bernoulli"], [8, 0, 1, "", "beta"], [8, 0, 1, "", "dirichlet"], [8, 0, 1, "", "gamma"], [8, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[8, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[8, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[8, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "lexsort"], [8, 0, 1, "", "msort"]], "ivy.data_classes.array.experimental.statistical": [[8, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bincount"], [8, 0, 1, "", "corrcoef"], [8, 0, 1, "", "median"], [8, 0, 1, "", "nanmean"], [8, 0, 1, "", "nanmedian"], [8, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[8, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[9, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "all_equal"], [9, 0, 1, "", "array_equal"], [9, 0, 1, "", "assert_supports_inplace"], [9, 0, 1, "", "clip_matrix_norm"], [9, 0, 1, "", "clip_vector_norm"], [9, 0, 1, "", "default"], [9, 0, 1, "", "einops_rearrange"], [9, 0, 1, "", "einops_reduce"], [9, 0, 1, "", "einops_repeat"], [9, 0, 1, "", "exists"], [9, 0, 1, "", "fourier_encode"], [9, 0, 1, "", "gather"], [9, 0, 1, "", "gather_nd"], [9, 0, 1, "", "get_num_dims"], [9, 0, 1, "", "has_nans"], [9, 0, 1, "", "inplace_decrement"], [9, 0, 1, "", "inplace_increment"], [9, 0, 1, "", "inplace_update"], [9, 0, 1, "", "is_array"], [9, 0, 1, "", "is_ivy_array"], [9, 0, 1, "", "is_ivy_container"], [9, 0, 1, "", "is_native_array"], [9, 0, 1, "", "isin"], [9, 0, 1, "", "scatter_flat"], [9, 0, 1, "", "scatter_nd"], [9, 0, 1, "", "stable_divide"], [9, 0, 1, "", "stable_pow"], [9, 0, 1, "", "supports_inplace_updates"], [9, 0, 1, "", "to_list"], [9, 0, 1, "", "to_numpy"], [9, 0, 1, "", "to_scalar"], [9, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[10, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "adam_step"], [10, 0, 1, "", "adam_update"], [10, 0, 1, "", "gradient_descent_update"], [10, 0, 1, "", "lamb_update"], [10, 0, 1, "", "lars_update"], [10, 0, 1, "", "optimizer_update"], [10, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[11, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[11, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[12, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "conv1d"], [12, 0, 1, "", "conv1d_transpose"], [12, 0, 1, "", "conv2d"], [12, 0, 1, "", "conv2d_transpose"], [12, 0, 1, "", "conv3d"], [12, 0, 1, "", "conv3d_transpose"], [12, 0, 1, "", "depthwise_conv2d"], [12, 0, 1, "", "dropout"], [12, 0, 1, "", "dropout1d"], [12, 0, 1, "", "dropout3d"], [12, 0, 1, "", "linear"], [12, 0, 1, "", "lstm_update"], [12, 0, 1, "", "multi_head_attention"], [12, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[13, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "cholesky"], [13, 0, 1, "", "cross"], [13, 0, 1, "", "det"], [13, 0, 1, "", "diag"], [13, 0, 1, "", "diagonal"], [13, 0, 1, "", "eig"], [13, 0, 1, "", "eigh"], [13, 0, 1, "", "eigvalsh"], [13, 0, 1, "", "inner"], [13, 0, 1, "", "inv"], [13, 0, 1, "", "matmul"], [13, 0, 1, "", "matrix_norm"], [13, 0, 1, "", "matrix_power"], [13, 0, 1, "", "matrix_rank"], [13, 0, 1, "", "matrix_transpose"], [13, 0, 1, "", "outer"], [13, 0, 1, "", "pinv"], [13, 0, 1, "", "qr"], [13, 0, 1, "", "slogdet"], [13, 0, 1, "", "solve"], [13, 0, 1, "", "svd"], [13, 0, 1, "", "svdvals"], [13, 0, 1, "", "tensordot"], [13, 0, 1, "", "tensorsolve"], [13, 0, 1, "", "trace"], [13, 0, 1, "", "vander"], [13, 0, 1, "", "vecdot"], [13, 0, 1, "", "vector_norm"], [13, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[14, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "binary_cross_entropy"], [14, 0, 1, "", "cross_entropy"], [14, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[15, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "clip"], [15, 0, 1, "", "concat"], [15, 0, 1, "", "constant_pad"], [15, 0, 1, "", "expand_dims"], [15, 0, 1, "", "flip"], [15, 0, 1, "", "permute_dims"], [15, 0, 1, "", "repeat"], [15, 0, 1, "", "reshape"], [15, 0, 1, "", "roll"], [15, 0, 1, "", "split"], [15, 0, 1, "", "squeeze"], [15, 0, 1, "", "stack"], [15, 0, 1, "", "swapaxes"], [15, 0, 1, "", "tile"], [15, 0, 1, "", "unstack"], [15, 0, 1, "", "view"], [15, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[16, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[17, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "multinomial"], [17, 0, 1, "", "randint"], [17, 0, 1, "", "random_normal"], [17, 0, 1, "", "random_uniform"], [17, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[18, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "argmax"], [18, 0, 1, "", "argmin"], [18, 0, 1, "", "argwhere"], [18, 0, 1, "", "nonzero"], [18, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[19, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "unique_all"], [19, 0, 1, "", "unique_counts"], [19, 0, 1, "", "unique_inverse"], [19, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[20, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "argsort"], [20, 0, 1, "", "searchsorted"], [20, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[21, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "cumprod"], [21, 0, 1, "", "cumsum"], [21, 0, 1, "", "einsum"], [21, 0, 1, "", "max"], [21, 0, 1, "", "mean"], [21, 0, 1, "", "min"], [21, 0, 1, "", "prod"], [21, 0, 1, "", "std"], [21, 0, 1, "", "sum"], [21, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[22, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "all"], [22, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[23, 2, 1, "", "_wrap_function"], [23, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[24, 3, 0, "-", "activations"], [25, 3, 0, "-", "base"], [48, 3, 0, "-", "container"], [26, 3, 0, "-", "conversions"], [27, 3, 0, "-", "creation"], [28, 3, 0, "-", "data_type"], [29, 3, 0, "-", "device"], [30, 3, 0, "-", "elementwise"], [31, 3, 0, "-", "experimental"], [32, 3, 0, "-", "general"], [33, 3, 0, "-", "gradients"], [34, 3, 0, "-", "image"], [35, 3, 0, "-", "layers"], [36, 3, 0, "-", "linear_algebra"], [37, 3, 0, "-", "losses"], [38, 3, 0, "-", "manipulation"], [39, 3, 0, "-", "norms"], [40, 3, 0, "-", "random"], [41, 3, 0, "-", "searching"], [42, 3, 0, "-", "set"], [43, 3, 0, "-", "sorting"], [44, 3, 0, "-", "statistical"], [45, 3, 0, "-", "utility"], [46, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[24, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "_static_gelu"], [24, 0, 1, "", "_static_leaky_relu"], [24, 0, 1, "", "_static_log_softmax"], [24, 0, 1, "", "_static_mish"], [24, 0, 1, "", "_static_relu"], [24, 0, 1, "", "_static_sigmoid"], [24, 0, 1, "", "_static_softmax"], [24, 0, 1, "", "_static_softplus"], [24, 0, 1, "", "gelu"], [24, 0, 1, "", "leaky_relu"], [24, 0, 1, "", "log_softmax"], [24, 0, 1, "", "mish"], [24, 0, 1, "", "relu"], [24, 0, 1, "", "sigmoid"], [24, 0, 1, "", "softmax"], [24, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[25, 1, 1, "", "ContainerBase"], [25, 2, 1, "", "_is_jsonable"], [25, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[25, 0, 1, "", "__getitem__"], [25, 0, 1, "", "__init__"], [25, 0, 1, "", "__setitem__"], [25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [25, 0, 1, "", "_cont_concat_unify"], [25, 0, 1, "", "_cont_get_dev"], [25, 0, 1, "", "_cont_get_shape"], [25, 0, 1, "", "_cont_get_shapes"], [25, 5, 1, "", "_cont_ivy"], [25, 0, 1, "", "_cont_mean_unify"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_slice_keys"], [25, 0, 1, "", "_cont_sum_unify"], [25, 0, 1, "", "_get_queue_item"], [25, 0, 1, "", "cont_all_false"], [25, 0, 1, "", "cont_all_key_chains"], [25, 0, 1, "", "cont_all_true"], [25, 0, 1, "", "cont_as_bools"], [25, 0, 1, "", "cont_assert_contains_sub_container"], [25, 0, 1, "", "cont_assert_contains_sub_structure"], [25, 0, 1, "", "cont_assert_identical"], [25, 0, 1, "", "cont_assert_identical_structure"], [25, 0, 1, "", "cont_at_key_chain"], [25, 0, 1, "", "cont_at_key_chains"], [25, 0, 1, "", "cont_at_keys"], [25, 0, 1, "", "cont_combine"], [25, 0, 1, "", "cont_common_key_chains"], [25, 5, 1, "", "cont_config"], [25, 0, 1, "", "cont_contains_sub_container"], [25, 0, 1, "", "cont_contains_sub_structure"], [25, 0, 1, "", "cont_copy"], [25, 0, 1, "", "cont_create_if_absent"], [25, 0, 1, "", "cont_cutoff_at_depth"], [25, 0, 1, "", "cont_cutoff_at_height"], [25, 0, 1, "", "cont_deep_copy"], [25, 5, 1, "", "cont_dev"], [25, 5, 1, "", "cont_dev_str"], [25, 0, 1, "", "cont_diff"], [25, 0, 1, "", "cont_duplicate_array_keychains"], [25, 0, 1, "", "cont_find_sub_container"], [25, 0, 1, "", "cont_find_sub_structure"], [25, 0, 1, "", "cont_flatten_key_chain"], [25, 0, 1, "", "cont_flatten_key_chains"], [25, 0, 1, "", "cont_format_key_chains"], [25, 0, 1, "", "cont_from_disk_as_hdf5"], [25, 0, 1, "", "cont_from_disk_as_json"], [25, 0, 1, "", "cont_from_disk_as_pickled"], [25, 0, 1, "", "cont_from_flat_list"], [25, 0, 1, "", "cont_handle_inplace"], [25, 0, 1, "", "cont_has_key"], [25, 0, 1, "", "cont_has_key_chain"], [25, 0, 1, "", "cont_identical"], [25, 0, 1, "", "cont_identical_array_shapes"], [25, 0, 1, "", "cont_identical_configs"], [25, 0, 1, "", "cont_identical_structure"], [25, 0, 1, "", "cont_if_exists"], [25, 0, 1, "", "cont_inplace_update"], [25, 5, 1, "", "cont_ivy"], [25, 0, 1, "", "cont_key_chains_containing"], [25, 0, 1, "", "cont_list_join"], [25, 0, 1, "", "cont_list_stack"], [25, 0, 1, "", "cont_map"], [25, 0, 1, "", "cont_map_sub_conts"], [25, 5, 1, "", "cont_max_depth"], [25, 0, 1, "", "cont_multi_map"], [25, 0, 1, "", "cont_multi_map_in_function"], [25, 0, 1, "", "cont_num_arrays"], [25, 0, 1, "", "cont_overwrite_at_key_chain"], [25, 0, 1, "", "cont_overwrite_at_key_chains"], [25, 0, 1, "", "cont_prune_empty"], [25, 0, 1, "", "cont_prune_key_chain"], [25, 0, 1, "", "cont_prune_key_chains"], [25, 0, 1, "", "cont_prune_key_from_key_chains"], [25, 0, 1, "", "cont_prune_keys"], [25, 0, 1, "", "cont_prune_keys_from_key_chains"], [25, 0, 1, "", "cont_reduce"], [25, 0, 1, "", "cont_remove_key_length_limit"], [25, 0, 1, "", "cont_remove_print_limit"], [25, 0, 1, "", "cont_reshape_like"], [25, 0, 1, "", "cont_restructure"], [25, 0, 1, "", "cont_restructure_key_chains"], [25, 0, 1, "", "cont_set_at_key_chain"], [25, 0, 1, "", "cont_set_at_key_chains"], [25, 0, 1, "", "cont_set_at_keys"], [25, 5, 1, "", "cont_shape"], [25, 5, 1, "", "cont_shapes"], [25, 0, 1, "", "cont_show"], [25, 0, 1, "", "cont_show_sub_container"], [25, 0, 1, "", "cont_size_ordered_arrays"], [25, 0, 1, "", "cont_slice_keys"], [25, 0, 1, "", "cont_slice_via_key"], [25, 0, 1, "", "cont_sort_by_key"], [25, 0, 1, "", "cont_structural_diff"], [25, 0, 1, "", "cont_to_dict"], [25, 0, 1, "", "cont_to_disk_as_hdf5"], [25, 0, 1, "", "cont_to_disk_as_json"], [25, 0, 1, "", "cont_to_disk_as_pickled"], [25, 0, 1, "", "cont_to_flat_list"], [25, 0, 1, "", "cont_to_iterator"], [25, 0, 1, "", "cont_to_iterator_keys"], [25, 0, 1, "", "cont_to_iterator_values"], [25, 0, 1, "", "cont_to_jsonable"], [25, 0, 1, "", "cont_to_nested_list"], [25, 0, 1, "", "cont_to_raw"], [25, 0, 1, "", "cont_trim_key"], [25, 0, 1, "", "cont_try_kc"], [25, 0, 1, "", "cont_unify"], [25, 0, 1, "", "cont_unstack_conts"], [25, 0, 1, "", "cont_update_config"], [25, 0, 1, "", "cont_with_default_key_color"], [25, 0, 1, "", "cont_with_entries_as_lists"], [25, 0, 1, "", "cont_with_ivy_backend"], [25, 0, 1, "", "cont_with_key_length_limit"], [25, 0, 1, "", "cont_with_print_indent"], [25, 0, 1, "", "cont_with_print_limit"], [25, 0, 1, "", "cont_with_print_line_spacing"], [25, 5, 1, "", "dynamic_backend"], [25, 0, 1, "", "h5_file_size"], [25, 0, 1, "", "shuffle_h5_file"], [25, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[48, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[48, 0, 1, "", "__abs__"], [48, 0, 1, "", "__add__"], [48, 0, 1, "", "__eq__"], [48, 0, 1, "", "__ge__"], [48, 0, 1, "", "__gt__"], [48, 0, 1, "", "__init__"], [48, 0, 1, "", "__le__"], [48, 0, 1, "", "__lt__"], [48, 0, 1, "", "__ne__"], [48, 0, 1, "", "__pow__"], [48, 0, 1, "", "__radd__"], [48, 0, 1, "", "__rrshift__"], [48, 0, 1, "", "__rshift__"], [48, 0, 1, "", "__rsub__"], [48, 0, 1, "", "__sub__"], [48, 0, 1, "", "__truediv__"], [48, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[26, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_static_to_ivy"], [26, 0, 1, "", "_static_to_native"], [26, 0, 1, "", "to_ivy"], [26, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[27, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_arange"], [27, 0, 1, "", "_static_asarray"], [27, 0, 1, "", "_static_empty"], [27, 0, 1, "", "_static_empty_like"], [27, 0, 1, "", "_static_eye"], [27, 0, 1, "", "_static_from_dlpack"], [27, 0, 1, "", "_static_full_like"], [27, 0, 1, "", "_static_linspace"], [27, 0, 1, "", "_static_logspace"], [27, 0, 1, "", "_static_meshgrid"], [27, 0, 1, "", "_static_native_array"], [27, 0, 1, "", "_static_one_hot"], [27, 0, 1, "", "_static_ones"], [27, 0, 1, "", "_static_ones_like"], [27, 0, 1, "", "_static_tril"], [27, 0, 1, "", "_static_triu"], [27, 0, 1, "", "_static_zeros"], [27, 0, 1, "", "_static_zeros_like"], [27, 0, 1, "", "empty_like"], [27, 0, 1, "", "from_dlpack"], [27, 0, 1, "", "full_like"], [27, 0, 1, "", "linspace"], [27, 0, 1, "", "logspace"], [27, 0, 1, "", "meshgrid"], [27, 0, 1, "", "native_array"], [27, 0, 1, "", "one_hot"], [27, 0, 1, "", "ones_like"], [27, 0, 1, "", "tril"], [27, 0, 1, "", "triu"], [27, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[28, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_astype"], [28, 0, 1, "", "_static_broadcast_arrays"], [28, 0, 1, "", "_static_broadcast_to"], [28, 0, 1, "", "_static_can_cast"], [28, 0, 1, "", "_static_default_complex_dtype"], [28, 0, 1, "", "_static_default_float_dtype"], [28, 0, 1, "", "_static_dtype"], [28, 0, 1, "", "_static_finfo"], [28, 0, 1, "", "_static_function_supported_dtypes"], [28, 0, 1, "", "_static_function_unsupported_dtypes"], [28, 0, 1, "", "_static_iinfo"], [28, 0, 1, "", "_static_is_bool_dtype"], [28, 0, 1, "", "_static_is_complex_dtype"], [28, 0, 1, "", "_static_is_float_dtype"], [28, 0, 1, "", "_static_is_int_dtype"], [28, 0, 1, "", "_static_is_uint_dtype"], [28, 0, 1, "", "_static_result_type"], [28, 0, 1, "", "astype"], [28, 0, 1, "", "broadcast_arrays"], [28, 0, 1, "", "broadcast_to"], [28, 0, 1, "", "can_cast"], [28, 0, 1, "", "dtype"], [28, 0, 1, "", "finfo"], [28, 0, 1, "", "iinfo"], [28, 0, 1, "", "is_bool_dtype"], [28, 0, 1, "", "is_complex_dtype"], [28, 0, 1, "", "is_float_dtype"], [28, 0, 1, "", "is_int_dtype"], [28, 0, 1, "", "is_uint_dtype"], [28, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[29, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_dev"], [29, 0, 1, "", "_static_to_device"], [29, 0, 1, "", "dev"], [29, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[30, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_abs"], [30, 0, 1, "", "_static_acos"], [30, 0, 1, "", "_static_acosh"], [30, 0, 1, "", "_static_add"], [30, 0, 1, "", "_static_asin"], [30, 0, 1, "", "_static_asinh"], [30, 0, 1, "", "_static_atan"], [30, 0, 1, "", "_static_atan2"], [30, 0, 1, "", "_static_atanh"], [30, 0, 1, "", "_static_bitwise_and"], [30, 0, 1, "", "_static_bitwise_invert"], [30, 0, 1, "", "_static_bitwise_left_shift"], [30, 0, 1, "", "_static_bitwise_or"], [30, 0, 1, "", "_static_bitwise_right_shift"], [30, 0, 1, "", "_static_bitwise_xor"], [30, 0, 1, "", "_static_ceil"], [30, 0, 1, "", "_static_cos"], [30, 0, 1, "", "_static_cosh"], [30, 0, 1, "", "_static_deg2rad"], [30, 0, 1, "", "_static_divide"], [30, 0, 1, "", "_static_equal"], [30, 0, 1, "", "_static_erf"], [30, 0, 1, "", "_static_exp"], [30, 0, 1, "", "_static_expm1"], [30, 0, 1, "", "_static_floor"], [30, 0, 1, "", "_static_floor_divide"], [30, 0, 1, "", "_static_greater"], [30, 0, 1, "", "_static_greater_equal"], [30, 0, 1, "", "_static_isfinite"], [30, 0, 1, "", "_static_isinf"], [30, 0, 1, "", "_static_isnan"], [30, 0, 1, "", "_static_isreal"], [30, 0, 1, "", "_static_less"], [30, 0, 1, "", "_static_less_equal"], [30, 0, 1, "", "_static_log"], [30, 0, 1, "", "_static_log10"], [30, 0, 1, "", "_static_log1p"], [30, 0, 1, "", "_static_log2"], [30, 0, 1, "", "_static_logaddexp"], [30, 0, 1, "", "_static_logical_and"], [30, 0, 1, "", "_static_logical_not"], [30, 0, 1, "", "_static_logical_or"], [30, 0, 1, "", "_static_logical_xor"], [30, 0, 1, "", "_static_maximum"], [30, 0, 1, "", "_static_minimum"], [30, 0, 1, "", "_static_multiply"], [30, 0, 1, "", "_static_negative"], [30, 0, 1, "", "_static_not_equal"], [30, 0, 1, "", "_static_positive"], [30, 0, 1, "", "_static_pow"], [30, 0, 1, "", "_static_rad2deg"], [30, 0, 1, "", "_static_reciprocal"], [30, 0, 1, "", "_static_remainder"], [30, 0, 1, "", "_static_round"], [30, 0, 1, "", "_static_sign"], [30, 0, 1, "", "_static_sin"], [30, 0, 1, "", "_static_sinh"], [30, 0, 1, "", "_static_sqrt"], [30, 0, 1, "", "_static_square"], [30, 0, 1, "", "_static_subtract"], [30, 0, 1, "", "_static_tan"], [30, 0, 1, "", "_static_tanh"], [30, 0, 1, "", "_static_trapz"], [30, 0, 1, "", "_static_trunc"], [30, 0, 1, "", "_static_trunc_divide"], [30, 0, 1, "", "abs"], [30, 0, 1, "", "acos"], [30, 0, 1, "", "acosh"], [30, 0, 1, "", "add"], [30, 0, 1, "", "asin"], [30, 0, 1, "", "asinh"], [30, 0, 1, "", "atan"], [30, 0, 1, "", "atan2"], [30, 0, 1, "", "atanh"], [30, 0, 1, "", "bitwise_and"], [30, 0, 1, "", "bitwise_invert"], [30, 0, 1, "", "bitwise_left_shift"], [30, 0, 1, "", "bitwise_or"], [30, 0, 1, "", "bitwise_right_shift"], [30, 0, 1, "", "bitwise_xor"], [30, 0, 1, "", "ceil"], [30, 0, 1, "", "cos"], [30, 0, 1, "", "cosh"], [30, 0, 1, "", "deg2rad"], [30, 0, 1, "", "divide"], [30, 0, 1, "", "equal"], [30, 0, 1, "", "erf"], [30, 0, 1, "", "exp"], [30, 0, 1, "", "expm1"], [30, 0, 1, "", "floor"], [30, 0, 1, "", "floor_divide"], [30, 0, 1, "", "greater"], [30, 0, 1, "", "greater_equal"], [30, 0, 1, "", "isfinite"], [30, 0, 1, "", "isinf"], [30, 0, 1, "", "isnan"], [30, 0, 1, "", "isreal"], [30, 0, 1, "", "less"], [30, 0, 1, "", "less_equal"], [30, 0, 1, "", "log"], [30, 0, 1, "", "log10"], [30, 0, 1, "", "log1p"], [30, 0, 1, "", "log2"], [30, 0, 1, "", "logaddexp"], [30, 0, 1, "", "logical_and"], [30, 0, 1, "", "logical_not"], [30, 0, 1, "", "logical_or"], [30, 0, 1, "", "logical_xor"], [30, 0, 1, "", "maximum"], [30, 0, 1, "", "minimum"], [30, 0, 1, "", "multiply"], [30, 0, 1, "", "negative"], [30, 0, 1, "", "not_equal"], [30, 0, 1, "", "positive"], [30, 0, 1, "", "pow"], [30, 0, 1, "", "rad2deg"], [30, 0, 1, "", "reciprocal"], [30, 0, 1, "", "remainder"], [30, 0, 1, "", "round"], [30, 0, 1, "", "sign"], [30, 0, 1, "", "sin"], [30, 0, 1, "", "sinh"], [30, 0, 1, "", "sqrt"], [30, 0, 1, "", "square"], [30, 0, 1, "", "subtract"], [30, 0, 1, "", "tan"], [30, 0, 1, "", "tanh"], [30, 0, 1, "", "trapz"], [30, 0, 1, "", "trunc"], [30, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[31, 3, 0, "-", "activations"], [31, 3, 0, "-", "conversions"], [31, 3, 0, "-", "creation"], [31, 3, 0, "-", "data_type"], [31, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [31, 3, 0, "-", "general"], [31, 3, 0, "-", "gradients"], [31, 3, 0, "-", "image"], [31, 3, 0, "-", "layers"], [31, 3, 0, "-", "linear_algebra"], [31, 3, 0, "-", "losses"], [31, 3, 0, "-", "manipulation"], [31, 3, 0, "-", "norms"], [31, 3, 0, "-", "random"], [31, 3, 0, "-", "searching"], [31, 3, 0, "-", "set"], [31, 3, 0, "-", "sorting"], [31, 3, 0, "-", "statistical"], [31, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[31, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "logit"], [31, 0, 1, "", "logsigmoid"], [31, 0, 1, "", "prelu"], [31, 0, 1, "", "relu6"], [31, 0, 1, "", "selu"], [31, 0, 1, "", "static_logit"], [31, 0, 1, "", "static_logsigmoid"], [31, 0, 1, "", "static_prelu"], [31, 0, 1, "", "static_relu6"], [31, 0, 1, "", "static_selu"], [31, 0, 1, "", "static_thresholded_relu"], [31, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[31, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[31, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "eye_like"], [31, 0, 1, "", "frombuffer"], [31, 0, 1, "", "hamming_window"], [31, 0, 1, "", "hann_window"], [31, 0, 1, "", "kaiser_bessel_derived_window"], [31, 0, 1, "", "kaiser_window"], [31, 0, 1, "", "static_eye_like"], [31, 0, 1, "", "static_frombuffer"], [31, 0, 1, "", "static_hamming_window"], [31, 0, 1, "", "static_hann_window"], [31, 0, 1, "", "static_kaiser_bessel_derived_window"], [31, 0, 1, "", "static_kaiser_window"], [31, 0, 1, "", "static_tril_indices"], [31, 0, 1, "", "static_triu_indices"], [31, 0, 1, "", "static_vorbis_window"], [31, 0, 1, "", "tril_indices"], [31, 0, 1, "", "triu_indices"], [31, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[31, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[31, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[31, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "allclose"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "binarizer"], [31, 0, 1, "", "conj"], [31, 0, 1, "", "copysign"], [31, 0, 1, "", "count_nonzero"], [31, 0, 1, "", "diff"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "fix"], [31, 0, 1, "", "float_power"], [31, 0, 1, "", "fmax"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "fmod"], [31, 0, 1, "", "frexp"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "gradient"], [31, 0, 1, "", "hypot"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isclose"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "ldexp"], [31, 0, 1, "", "lerp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "nansum"], [31, 0, 1, "", "nextafter"], [31, 0, 1, "", "real"], [31, 0, 1, "", "signbit"], [31, 0, 1, "", "sinc"], [31, 0, 1, "", "static_allclose"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_binarizer"], [31, 0, 1, "", "static_conj"], [31, 0, 1, "", "static_copysign"], [31, 0, 1, "", "static_count_nonzero"], [31, 0, 1, "", "static_diff"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fix"], [31, 0, 1, "", "static_float_power"], [31, 0, 1, "", "static_fmax"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_fmod"], [31, 0, 1, "", "static_frexp"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_gradient"], [31, 0, 1, "", "static_hypot"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_isclose"], [31, 0, 1, "", "static_lcm"], [31, 0, 1, "", "static_ldexp"], [31, 0, 1, "", "static_lerp"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_nansum"], [31, 0, 1, "", "static_nextafter"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "static_signbit"], [31, 0, 1, "", "static_sinc"], [31, 0, 1, "", "static_xlogy"], [31, 0, 1, "", "static_zeta"], [31, 0, 1, "", "xlogy"], [31, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[31, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.gradients": [[31, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[31, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[31, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adaptive_avg_pool1d"], [31, 0, 1, "", "adaptive_avg_pool2d"], [31, 0, 1, "", "avg_pool1d"], [31, 0, 1, "", "avg_pool2d"], [31, 0, 1, "", "avg_pool3d"], [31, 0, 1, "", "dct"], [31, 0, 1, "", "dft"], [31, 0, 1, "", "embedding"], [31, 0, 1, "", "fft"], [31, 0, 1, "", "ifft"], [31, 0, 1, "", "interpolate"], [31, 0, 1, "", "max_pool1d"], [31, 0, 1, "", "max_pool2d"], [31, 0, 1, "", "max_pool3d"], [31, 0, 1, "", "static_adaptive_avg_pool1d"], [31, 0, 1, "", "static_adaptive_avg_pool2d"], [31, 0, 1, "", "static_avg_pool1d"], [31, 0, 1, "", "static_avg_pool2d"], [31, 0, 1, "", "static_avg_pool3d"], [31, 0, 1, "", "static_dct"], [31, 0, 1, "", "static_dft"], [31, 0, 1, "", "static_embedding"], [31, 0, 1, "", "static_fft"], [31, 0, 1, "", "static_ifft"], [31, 0, 1, "", "static_interpolate"], [31, 0, 1, "", "static_max_pool1d"], [31, 0, 1, "", "static_max_pool2d"], [31, 0, 1, "", "static_max_pool3d"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adjoint"], [31, 0, 1, "", "cond"], [31, 0, 1, "", "cov"], [31, 0, 1, "", "diagflat"], [31, 0, 1, "", "eig"], [31, 0, 1, "", "eigh_tridiagonal"], [31, 0, 1, "", "eigvals"], [31, 0, 1, "", "kron"], [31, 0, 1, "", "matrix_exp"], [31, 0, 1, "", "multi_dot"], [31, 0, 1, "", "static_adjoint"], [31, 0, 1, "", "static_cond"], [31, 0, 1, "", "static_cov"], [31, 0, 1, "", "static_diagflat"], [31, 0, 1, "", "static_eig"], [31, 0, 1, "", "static_eigh_tridiagonal"], [31, 0, 1, "", "static_eigvals"], [31, 0, 1, "", "static_kron"], [31, 0, 1, "", "static_matrix_exp"], [31, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.losses": [[31, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "binary_cross_entropy_with_logits"], [31, 0, 1, "", "static_binary_cross_entropy_with_logits"]], "ivy.data_classes.container.experimental.manipulation": [[31, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "as_strided"], [31, 0, 1, "", "atleast_1d"], [31, 0, 1, "", "atleast_2d"], [31, 0, 1, "", "atleast_3d"], [31, 0, 1, "", "broadcast_shapes"], [31, 0, 1, "", "concat_from_sequence"], [31, 0, 1, "", "dsplit"], [31, 0, 1, "", "dstack"], [31, 0, 1, "", "expand"], [31, 0, 1, "", "flatten"], [31, 0, 1, "", "fliplr"], [31, 0, 1, "", "flipud"], [31, 0, 1, "", "heaviside"], [31, 0, 1, "", "hsplit"], [31, 0, 1, "", "hstack"], [31, 0, 1, "", "i0"], [31, 0, 1, "", "moveaxis"], [31, 0, 1, "", "pad"], [31, 0, 1, "", "rot90"], [31, 0, 1, "", "static_as_strided"], [31, 0, 1, "", "static_atleast_1d"], [31, 0, 1, "", "static_atleast_2d"], [31, 0, 1, "", "static_atleast_3d"], [31, 0, 1, "", "static_broadcast_shapes"], [31, 0, 1, "", "static_concat_from_sequence"], [31, 0, 1, "", "static_dsplit"], [31, 0, 1, "", "static_dstack"], [31, 0, 1, "", "static_expand"], [31, 0, 1, "", "static_flatten"], [31, 0, 1, "", "static_fliplr"], [31, 0, 1, "", "static_flipud"], [31, 0, 1, "", "static_heaviside"], [31, 0, 1, "", "static_hsplit"], [31, 0, 1, "", "static_hstack"], [31, 0, 1, "", "static_i0"], [31, 0, 1, "", "static_moveaxis"], [31, 0, 1, "", "static_pad"], [31, 0, 1, "", "static_rot90"], [31, 0, 1, "", "static_take_along_axis"], [31, 0, 1, "", "static_top_k"], [31, 0, 1, "", "static_vsplit"], [31, 0, 1, "", "static_vstack"], [31, 0, 1, "", "take_along_axis"], [31, 0, 1, "", "top_k"], [31, 0, 1, "", "vsplit"], [31, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[31, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "batch_norm"], [31, 0, 1, "", "instance_norm"], [31, 0, 1, "", "l2_normalize"], [31, 0, 1, "", "lp_normalize"], [31, 0, 1, "", "static_batch_norm"], [31, 0, 1, "", "static_instance_norm"], [31, 0, 1, "", "static_l2_normalize"], [31, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[31, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bernoulli"], [31, 0, 1, "", "beta"], [31, 0, 1, "", "dirichlet"], [31, 0, 1, "", "poisson"], [31, 0, 1, "", "static_bernoulli"], [31, 0, 1, "", "static_beta"], [31, 0, 1, "", "static_dirichlet"], [31, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[31, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "static_unravel_index"], [31, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[31, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[31, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "lexsort"], [31, 0, 1, "", "msort"], [31, 0, 1, "", "static_lexsort"], [31, 0, 1, "", "static_msort"]], "ivy.data_classes.container.experimental.statistical": [[31, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bincount"], [31, 0, 1, "", "corrcoef"], [31, 0, 1, "", "median"], [31, 0, 1, "", "nanmean"], [31, 0, 1, "", "nanmedian"], [31, 0, 1, "", "quantile"], [31, 0, 1, "", "static_bincount"], [31, 0, 1, "", "static_corrcoef"], [31, 0, 1, "", "static_median"], [31, 0, 1, "", "static_nanmean"], [31, 0, 1, "", "static_nanmedian"], [31, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[31, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[32, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_all_equal"], [32, 0, 1, "", "_static_array_equal"], [32, 0, 1, "", "_static_assert_supports_inplace"], [32, 0, 1, "", "_static_clip_matrix_norm"], [32, 0, 1, "", "_static_clip_vector_norm"], [32, 0, 1, "", "_static_einops_rearrange"], [32, 0, 1, "", "_static_einops_reduce"], [32, 0, 1, "", "_static_einops_repeat"], [32, 0, 1, "", "_static_fourier_encode"], [32, 0, 1, "", "_static_gather"], [32, 0, 1, "", "_static_gather_nd"], [32, 0, 1, "", "_static_get_num_dims"], [32, 0, 1, "", "_static_has_nans"], [32, 0, 1, "", "_static_inplace_decrement"], [32, 0, 1, "", "_static_inplace_increment"], [32, 0, 1, "", "_static_inplace_update"], [32, 0, 1, "", "_static_is_array"], [32, 0, 1, "", "_static_is_ivy_array"], [32, 0, 1, "", "_static_is_native_array"], [32, 0, 1, "", "_static_scatter_flat"], [32, 0, 1, "", "_static_scatter_nd"], [32, 0, 1, "", "_static_stable_divide"], [32, 0, 1, "", "_static_stable_pow"], [32, 0, 1, "", "_static_supports_inplace_updates"], [32, 0, 1, "", "_static_to_list"], [32, 0, 1, "", "_static_to_numpy"], [32, 0, 1, "", "_static_to_scalar"], [32, 0, 1, "", "_static_value_is_nan"], [32, 0, 1, "", "all_equal"], [32, 0, 1, "", "array_equal"], [32, 0, 1, "", "assert_supports_inplace"], [32, 0, 1, "", "clip_matrix_norm"], [32, 0, 1, "", "clip_vector_norm"], [32, 0, 1, "", "einops_rearrange"], [32, 0, 1, "", "einops_reduce"], [32, 0, 1, "", "einops_repeat"], [32, 0, 1, "", "fourier_encode"], [32, 0, 1, "", "gather"], [32, 0, 1, "", "gather_nd"], [32, 0, 1, "", "get_num_dims"], [32, 0, 1, "", "has_nans"], [32, 0, 1, "", "inplace_decrement"], [32, 0, 1, "", "inplace_increment"], [32, 0, 1, "", "inplace_update"], [32, 0, 1, "", "is_array"], [32, 0, 1, "", "is_ivy_array"], [32, 0, 1, "", "is_native_array"], [32, 0, 1, "", "isin"], [32, 0, 1, "", "itemsize"], [32, 0, 1, "", "scatter_flat"], [32, 0, 1, "", "scatter_nd"], [32, 0, 1, "", "stable_divide"], [32, 0, 1, "", "stable_pow"], [32, 0, 1, "", "static_isin"], [32, 0, 1, "", "static_itemsize"], [32, 0, 1, "", "supports_inplace_updates"], [32, 0, 1, "", "to_list"], [32, 0, 1, "", "to_numpy"], [32, 0, 1, "", "to_scalar"], [32, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[33, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_stop_gradient"], [33, 0, 1, "", "adam_step"], [33, 0, 1, "", "adam_update"], [33, 0, 1, "", "gradient_descent_update"], [33, 0, 1, "", "lamb_update"], [33, 0, 1, "", "lars_update"], [33, 0, 1, "", "optimizer_update"], [33, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[34, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[34, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[35, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_conv1d"], [35, 0, 1, "", "_static_conv1d_transpose"], [35, 0, 1, "", "_static_conv2d"], [35, 0, 1, "", "_static_conv2d_transpose"], [35, 0, 1, "", "_static_conv3d"], [35, 0, 1, "", "_static_conv3d_transpose"], [35, 0, 1, "", "_static_depthwise_conv2d"], [35, 0, 1, "", "_static_dropout"], [35, 0, 1, "", "_static_dropout1d"], [35, 0, 1, "", "_static_dropout3d"], [35, 0, 1, "", "_static_linear"], [35, 0, 1, "", "_static_lstm_update"], [35, 0, 1, "", "_static_multi_head_attention"], [35, 0, 1, "", "_static_scaled_dot_product_attention"], [35, 0, 1, "", "conv1d"], [35, 0, 1, "", "conv1d_transpose"], [35, 0, 1, "", "conv2d"], [35, 0, 1, "", "conv2d_transpose"], [35, 0, 1, "", "conv3d"], [35, 0, 1, "", "conv3d_transpose"], [35, 0, 1, "", "depthwise_conv2d"], [35, 0, 1, "", "dropout"], [35, 0, 1, "", "dropout1d"], [35, 0, 1, "", "dropout3d"], [35, 0, 1, "", "linear"], [35, 0, 1, "", "lstm_update"], [35, 0, 1, "", "multi_head_attention"], [35, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[36, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_cholesky"], [36, 0, 1, "", "_static_cross"], [36, 0, 1, "", "_static_det"], [36, 0, 1, "", "_static_diag"], [36, 0, 1, "", "_static_diagonal"], [36, 0, 1, "", "_static_eigh"], [36, 0, 1, "", "_static_eigvalsh"], [36, 0, 1, "", "_static_inner"], [36, 0, 1, "", "_static_inv"], [36, 0, 1, "", "_static_matmul"], [36, 0, 1, "", "_static_matrix_norm"], [36, 0, 1, "", "_static_matrix_power"], [36, 0, 1, "", "_static_matrix_rank"], [36, 0, 1, "", "_static_matrix_transpose"], [36, 0, 1, "", "_static_outer"], [36, 0, 1, "", "_static_pinv"], [36, 0, 1, "", "_static_qr"], [36, 0, 1, "", "_static_slogdet"], [36, 0, 1, "", "_static_solve"], [36, 0, 1, "", "_static_svd"], [36, 0, 1, "", "_static_svdvals"], [36, 0, 1, "", "_static_tensordot"], [36, 0, 1, "", "_static_tensorsolve"], [36, 0, 1, "", "_static_trace"], [36, 0, 1, "", "_static_vander"], [36, 0, 1, "", "_static_vecdot"], [36, 0, 1, "", "_static_vector_norm"], [36, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [36, 0, 1, "", "cholesky"], [36, 0, 1, "", "cross"], [36, 0, 1, "", "det"], [36, 0, 1, "", "diag"], [36, 0, 1, "", "diagonal"], [36, 0, 1, "", "eigh"], [36, 0, 1, "", "eigvalsh"], [36, 0, 1, "", "inner"], [36, 0, 1, "", "inv"], [36, 0, 1, "", "matmul"], [36, 0, 1, "", "matrix_norm"], [36, 0, 1, "", "matrix_power"], [36, 0, 1, "", "matrix_rank"], [36, 0, 1, "", "matrix_transpose"], [36, 0, 1, "", "outer"], [36, 0, 1, "", "pinv"], [36, 0, 1, "", "qr"], [36, 0, 1, "", "slogdet"], [36, 0, 1, "", "solve"], [36, 0, 1, "", "svd"], [36, 0, 1, "", "svdvals"], [36, 0, 1, "", "tensordot"], [36, 0, 1, "", "tensorsolve"], [36, 0, 1, "", "trace"], [36, 0, 1, "", "vander"], [36, 0, 1, "", "vecdot"], [36, 0, 1, "", "vector_norm"], [36, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[37, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_binary_cross_entropy"], [37, 0, 1, "", "_static_cross_entropy"], [37, 0, 1, "", "_static_sparse_cross_entropy"], [37, 0, 1, "", "binary_cross_entropy"], [37, 0, 1, "", "cross_entropy"], [37, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[38, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_clip"], [38, 0, 1, "", "_static_concat"], [38, 0, 1, "", "_static_constant_pad"], [38, 0, 1, "", "_static_expand_dims"], [38, 0, 1, "", "_static_flip"], [38, 0, 1, "", "_static_permute_dims"], [38, 0, 1, "", "_static_repeat"], [38, 0, 1, "", "_static_reshape"], [38, 0, 1, "", "_static_roll"], [38, 0, 1, "", "_static_split"], [38, 0, 1, "", "_static_squeeze"], [38, 0, 1, "", "_static_stack"], [38, 0, 1, "", "_static_swapaxes"], [38, 0, 1, "", "_static_tile"], [38, 0, 1, "", "_static_unstack"], [38, 0, 1, "", "_static_zero_pad"], [38, 0, 1, "", "clip"], [38, 0, 1, "", "concat"], [38, 0, 1, "", "constant_pad"], [38, 0, 1, "", "expand_dims"], [38, 0, 1, "", "flip"], [38, 0, 1, "", "permute_dims"], [38, 0, 1, "", "repeat"], [38, 0, 1, "", "reshape"], [38, 0, 1, "", "roll"], [38, 0, 1, "", "split"], [38, 0, 1, "", "squeeze"], [38, 0, 1, "", "stack"], [38, 0, 1, "", "swapaxes"], [38, 0, 1, "", "tile"], [38, 0, 1, "", "unstack"], [38, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[39, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[40, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_multinomial"], [40, 0, 1, "", "_static_randint"], [40, 0, 1, "", "_static_random_normal"], [40, 0, 1, "", "_static_random_uniform"], [40, 0, 1, "", "_static_shuffle"], [40, 0, 1, "", "multinomial"], [40, 0, 1, "", "randint"], [40, 0, 1, "", "random_normal"], [40, 0, 1, "", "random_uniform"], [40, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[41, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_argmax"], [41, 0, 1, "", "_static_argmin"], [41, 0, 1, "", "_static_argwhere"], [41, 0, 1, "", "_static_nonzero"], [41, 0, 1, "", "_static_where"], [41, 0, 1, "", "argmax"], [41, 0, 1, "", "argmin"], [41, 0, 1, "", "argwhere"], [41, 0, 1, "", "nonzero"], [41, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[42, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_unique_all"], [42, 0, 1, "", "_static_unique_counts"], [42, 0, 1, "", "_static_unique_inverse"], [42, 0, 1, "", "_static_unique_values"], [42, 0, 1, "", "unique_all"], [42, 0, 1, "", "unique_counts"], [42, 0, 1, "", "unique_inverse"], [42, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[43, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_argsort"], [43, 0, 1, "", "_static_searchsorted"], [43, 0, 1, "", "_static_sort"], [43, 0, 1, "", "argsort"], [43, 0, 1, "", "searchsorted"], [43, 0, 1, "", "sort"]], "ivy.data_classes.container.statistical": [[44, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_cumprod"], [44, 0, 1, "", "_static_cumsum"], [44, 0, 1, "", "_static_prod"], [44, 0, 1, "", "_static_sum"], [44, 0, 1, "", "_static_var"], [44, 0, 1, "", "cumprod"], [44, 0, 1, "", "cumsum"], [44, 0, 1, "", "einsum"], [44, 0, 1, "", "max"], [44, 0, 1, "", "mean"], [44, 0, 1, "", "min"], [44, 0, 1, "", "prod"], [44, 0, 1, "", "std"], [44, 0, 1, "", "sum"], [44, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[45, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_all"], [45, 0, 1, "", "_static_any"], [45, 0, 1, "", "all"], [45, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[46, 2, 1, "", "_wrap_function"], [46, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.functional.ivy": [[457, 3, 0, "-", "activations"], [458, 3, 0, "-", "constants"], [459, 3, 0, "-", "control_flow_ops"], [460, 3, 0, "-", "creation"], [461, 3, 0, "-", "data_type"], [462, 3, 0, "-", "device"], [463, 3, 0, "-", "elementwise"], [464, 3, 0, "-", "experimental"], [465, 3, 0, "-", "general"], [466, 3, 0, "-", "gradients"], [467, 3, 0, "-", "layers"], [468, 3, 0, "-", "linear_algebra"], [469, 3, 0, "-", "losses"], [470, 3, 0, "-", "manipulation"], [471, 3, 0, "-", "meta"], [472, 3, 0, "-", "nest"], [473, 3, 0, "-", "norms"], [474, 3, 0, "-", "random"], [475, 3, 0, "-", "searching"], [476, 3, 0, "-", "set"], [477, 3, 0, "-", "sorting"], [478, 3, 0, "-", "statistical"], [479, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[267, 3, 0, "-", "activations"], [268, 3, 0, "-", "constants"], [269, 3, 0, "-", "creation"], [270, 3, 0, "-", "data_type"], [271, 3, 0, "-", "device"], [272, 3, 0, "-", "elementwise"], [273, 3, 0, "-", "general"], [274, 3, 0, "-", "gradients"], [275, 3, 0, "-", "layers"], [276, 3, 0, "-", "linear_algebra"], [277, 3, 0, "-", "losses"], [278, 3, 0, "-", "manipulation"], [279, 3, 0, "-", "meta"], [280, 3, 0, "-", "nest"], [281, 3, 0, "-", "norms"], [282, 3, 0, "-", "random"], [283, 3, 0, "-", "searching"], [284, 3, 0, "-", "set"], [285, 3, 0, "-", "sorting"], [286, 3, 0, "-", "sparse_array"], [287, 3, 0, "-", "statistical"], [288, 3, 0, "-", "utility"]], "ivy.nested_array": [[613, 3, 0, "-", "nested_array"]], "ivy.nested_array.nested_array": [[613, 1, 1, "", "NestedArray"]], "ivy.nested_array.nested_array.NestedArray": [[613, 0, 1, "", "__init__"], [613, 5, 1, "", "data"], [613, 5, 1, "", "device"], [613, 5, 1, "", "dtype"], [613, 0, 1, "", "from_row_lengths"], [613, 0, 1, "", "from_row_split"], [613, 5, 1, "", "ndim"], [613, 0, 1, "", "nested_array"], [613, 0, 1, "", "reshape"], [613, 5, 1, "", "shape"], [613, 0, 1, "", "unbind"]], "ivy.stateful": [[614, 3, 0, "-", "activations"], [615, 3, 0, "-", "converters"], [616, 3, 0, "-", "helpers"], [617, 3, 0, "-", "initializers"], [618, 3, 0, "-", "layers"], [619, 3, 0, "-", "module"], [620, 3, 0, "-", "norms"], [621, 3, 0, "-", "optimizers"], [622, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[614, 1, 1, "", "GEGLU"], [614, 1, 1, "", "GELU"], [614, 1, 1, "", "LeakyReLU"], [614, 1, 1, "", "LogSoftmax"], [614, 1, 1, "", "Mish"], [614, 1, 1, "", "ReLU"], [614, 1, 1, "", "Softmax"], [614, 1, 1, "", "Softplus"]], "ivy.stateful.activations.GEGLU": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[614, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[614, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[615, 1, 1, "", "ModuleConverters"], [615, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[615, 0, 1, "", "from_flax_module"], [615, 0, 1, "", "from_haiku_module"], [615, 0, 1, "", "from_keras_module"], [615, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[616, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[616, 0, 1, "", "check_submod_rets"], [616, 0, 1, "", "get_mod_key"], [616, 0, 1, "", "mod_depth"], [616, 0, 1, "", "mod_height"], [616, 0, 1, "", "mod_with_top_mod_key_chain"], [616, 0, 1, "", "show_mod_in_top_mod"], [616, 0, 1, "", "show_structure"], [616, 0, 1, "", "show_v_in_top_v"], [616, 0, 1, "", "sub_mods"], [616, 0, 1, "", "track_submod_call_order"], [616, 0, 1, "", "track_submod_rets"], [616, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[617, 1, 1, "", "Constant"], [617, 1, 1, "", "FirstLayerSiren"], [617, 1, 1, "", "GlorotUniform"], [617, 1, 1, "", "Initializer"], [617, 1, 1, "", "KaimingNormal"], [617, 1, 1, "", "Ones"], [617, 1, 1, "", "Siren"], [617, 1, 1, "", "Uniform"], [617, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[617, 0, 1, "", "__init__"], [617, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[617, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[617, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[617, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[617, 0, 1, "", "__init__"], [617, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[617, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[617, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[617, 0, 1, "", "__init__"], [617, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[617, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[618, 1, 1, "", "Conv1D"], [618, 1, 1, "", "Conv1DTranspose"], [618, 1, 1, "", "Conv2D"], [618, 1, 1, "", "Conv2DTranspose"], [618, 1, 1, "", "Conv3D"], [618, 1, 1, "", "Conv3DTranspose"], [618, 1, 1, "", "DepthwiseConv2D"], [618, 1, 1, "", "Dropout"], [618, 1, 1, "", "LSTM"], [618, 1, 1, "", "Linear"], [618, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[618, 0, 1, "", "__init__"], [618, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[618, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[618, 0, 1, "", "__init__"]], "ivy.stateful.module": [[619, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[619, 0, 1, "", "__call__"], [619, 0, 1, "", "__init__"], [619, 0, 1, "", "build"], [619, 5, 1, "", "build_mode"], [619, 5, 1, "", "built_"], [619, 0, 1, "", "compile"], [619, 0, 1, "", "save_weights"], [619, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[620, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[620, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[621, 1, 1, "", "Adam"], [621, 1, 1, "", "LAMB"], [621, 1, 1, "", "LARS"], [621, 1, 1, "", "Optimizer"], [621, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[621, 0, 1, "", "__init__"], [621, 0, 1, "", "set_state"], [621, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[621, 0, 1, "", "__init__"], [621, 0, 1, "", "set_state"], [621, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[621, 0, 1, "", "__init__"], [621, 0, 1, "", "set_state"], [621, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[621, 0, 1, "", "__init__"], [621, 0, 1, "", "set_state"], [621, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[621, 0, 1, "", "__init__"], [621, 0, 1, "", "set_state"], [621, 5, 1, "", "state"]], "ivy.stateful.sequential": [[622, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[622, 0, 1, "", "__init__"]], "ivy.utils": [[623, 3, 0, "-", "assertions"], [624, 3, 0, "-", "backend"], [628, 3, 0, "-", "dynamic_import"], [629, 3, 0, "-", "exceptions"], [630, 3, 0, "-", "inspection"], [631, 3, 0, "-", "profiler"], [632, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[623, 2, 1, "", "check_all"], [623, 2, 1, "", "check_all_or_any_fn"], [623, 2, 1, "", "check_any"], [623, 2, 1, "", "check_dimensions"], [623, 2, 1, "", "check_elem_in_list"], [623, 2, 1, "", "check_equal"], [623, 2, 1, "", "check_exists"], [623, 2, 1, "", "check_false"], [623, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [623, 2, 1, "", "check_gather_input_valid"], [623, 2, 1, "", "check_gather_nd_input_valid"], [623, 2, 1, "", "check_greater"], [623, 2, 1, "", "check_inplace_sizes_valid"], [623, 2, 1, "", "check_isinstance"], [623, 2, 1, "", "check_kernel_padding_size"], [623, 2, 1, "", "check_less"], [623, 2, 1, "", "check_one_way_broadcastable"], [623, 2, 1, "", "check_same_dtype"], [623, 2, 1, "", "check_shape"], [623, 2, 1, "", "check_shapes_broadcastable"], [623, 2, 1, "", "check_true"]], "ivy.utils.backend": [[625, 3, 0, "-", "ast_helpers"], [626, 3, 0, "-", "handler"], [627, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[625, 1, 1, "", "ImportTransformer"], [625, 1, 1, "", "IvyLoader"], [625, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[625, 0, 1, "", "__init__"], [625, 0, 1, "", "impersonate_import"], [625, 0, 1, "", "visit_Import"], [625, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[625, 0, 1, "", "__init__"], [625, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[625, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[626, 1, 1, "", "ContextManager"], [626, 2, 1, "", "choose_random_backend"], [626, 2, 1, "", "convert_from_numpy_to_target_backend"], [626, 2, 1, "", "convert_from_source_backend_to_numpy"], [626, 2, 1, "", "current_backend"], [626, 2, 1, "", "fn_name_from_version_specific_fn_name"], [626, 2, 1, "", "prevent_access_locally"], [626, 2, 1, "", "previous_backend"], [626, 2, 1, "", "set_backend"], [626, 2, 1, "", "set_backend_to_specific_version"], [626, 2, 1, "", "set_jax_backend"], [626, 2, 1, "", "set_numpy_backend"], [626, 2, 1, "", "set_tensorflow_backend"], [626, 2, 1, "", "set_torch_backend"], [626, 2, 1, "", "unset_backend"], [626, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[626, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[627, 2, 1, "", "available_sub_backends"], [627, 2, 1, "", "clear_sub_backends"], [627, 2, 1, "", "find_available_sub_backends"], [627, 2, 1, "", "set_sub_backend"], [627, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[628, 2, 1, "", "import_module"]], "ivy.utils.exceptions": [[629, 7, 1, "", "IvyBackendException"], [629, 7, 1, "", "IvyError"], [629, 7, 1, "", "IvyException"], [629, 7, 1, "", "IvyNotImplementedException"], [629, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyBackendException": [[629, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[629, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[629, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[629, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[630, 2, 1, "", "add_array_specs"], [630, 2, 1, "", "fn_array_spec"]], "ivy.utils.profiler": [[631, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[631, 0, 1, "", "__init__"], [631, 4, 1, "", "print_stats"], [631, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[632, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[597, 3, 0, "-", "assertions"], [598, 3, 0, "-", "available_frameworks"], [599, 3, 0, "-", "function_testing"], [600, 3, 0, "-", "globals"], [601, 3, 0, "-", "hypothesis_helpers"], [606, 3, 0, "-", "structs"], [607, 3, 0, "-", "test_parameter_flags"], [608, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[597, 2, 1, "", "assert_all_close"], [597, 2, 1, "", "assert_same_type_and_shape"], [597, 2, 1, "", "check_unsupported_device"], [597, 2, 1, "", "check_unsupported_device_and_dtype"], [597, 2, 1, "", "check_unsupported_dtype"], [597, 2, 1, "", "test_unsupported_function"], [597, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[598, 2, 1, "", "available_frameworks"], [598, 2, 1, "", "ground_truth"]], "ivy_tests.test_ivy.helpers.function_testing": [[599, 2, 1, "", "args_to_container"], [599, 2, 1, "", "args_to_frontend"], [599, 2, 1, "", "arrays_to_frontend"], [599, 2, 1, "", "as_lists"], [599, 2, 1, "", "compiled_if_required"], [599, 2, 1, "", "convtrue"], [599, 2, 1, "", "create_args_kwargs"], [599, 2, 1, "", "empty_func"], [599, 2, 1, "", "flatten"], [599, 2, 1, "", "flatten_and_to_np"], [599, 2, 1, "", "flatten_frontend"], [599, 2, 1, "", "flatten_frontend_to_np"], [599, 2, 1, "", "flatten_fw_and_to_np"], [599, 2, 1, "", "framework_comparator"], [599, 2, 1, "", "get_frontend_ret"], [599, 2, 1, "", "get_ret_and_flattened_np_array"], [599, 2, 1, "", "gradient_incompatible_function"], [599, 2, 1, "", "gradient_test"], [599, 2, 1, "", "gradient_unsupported_dtypes"], [599, 2, 1, "", "kwargs_to_args_n_kwargs"], [599, 2, 1, "", "make_json_pickable"], [599, 2, 1, "", "test_frontend_function"], [599, 2, 1, "", "test_frontend_method"], [599, 2, 1, "", "test_function"], [599, 2, 1, "", "test_method"], [599, 2, 1, "", "var_fn"]], "ivy_tests.test_ivy.helpers.globals": [[600, 7, 1, "", "InterruptedTest"], [600, 1, 1, "", "TestData"], [600, 2, 1, "", "remove_all_current_framework"], [600, 2, 1, "", "setup_api_test"], [600, 2, 1, "", "setup_frontend_test"], [600, 2, 1, "", "teardown_api_test"], [600, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[600, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[600, 0, 1, "", "__init__"], [600, 4, 1, "", "fn_name"], [600, 4, 1, "", "fn_tree"], [600, 4, 1, "", "is_method"], [600, 4, 1, "", "supported_device_dtypes"], [600, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[602, 3, 0, "-", "array_helpers"], [603, 3, 0, "-", "dtype_helpers"], [604, 3, 0, "-", "general_helpers"], [605, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[602, 2, 1, "", "array_and_broadcastable_shape"], [602, 2, 1, "", "array_bools"], [602, 2, 1, "", "array_indices_axis"], [602, 2, 1, "", "array_values"], [602, 2, 1, "", "arrays_and_axes"], [602, 2, 1, "", "arrays_for_pooling"], [602, 2, 1, "", "broadcast_shapes"], [602, 2, 1, "", "dtype_and_values"], [602, 2, 1, "", "dtype_values_axis"], [602, 2, 1, "", "list_of_size"], [602, 2, 1, "", "lists"], [602, 2, 1, "", "mutually_broadcastable_shapes"], [602, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[603, 2, 1, "", "array_dtypes"], [603, 2, 1, "", "get_castable_dtype"], [603, 2, 1, "", "get_dtypes"], [603, 2, 1, "", "make_json_pickable"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[604, 2, 1, "", "apply_safety_factor"], [604, 2, 1, "", "embedding_helper"], [604, 2, 1, "", "get_axis"], [604, 2, 1, "", "get_bounds"], [604, 2, 1, "", "get_mean_std"], [604, 2, 1, "", "get_shape"], [604, 2, 1, "", "matrix_is_stable"], [604, 2, 1, "", "reshape_shapes"], [604, 2, 1, "", "subsets"], [604, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[605, 2, 1, "", "floats"], [605, 2, 1, "", "ints"], [605, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.structs": [[606, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[606, 0, 1, "", "__init__"], [606, 4, 1, "", "framework_init_module"], [606, 4, 1, "", "init_name"], [606, 4, 1, "", "ivy_init_module"], [606, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[607, 1, 1, "", "FrontendFunctionTestFlags"], [607, 1, 1, "", "FrontendMethodTestFlags"], [607, 1, 1, "", "FunctionTestFlags"], [607, 1, 1, "", "InitMethodTestFlags"], [607, 1, 1, "", "MethodTestFlags"], [607, 1, 1, "", "TestFlags"], [607, 2, 1, "", "as_cont"], [607, 2, 1, "", "build_flag"], [607, 2, 1, "", "frontend_function_flags"], [607, 2, 1, "", "frontend_method_flags"], [607, 2, 1, "", "function_flags"], [607, 2, 1, "", "init_method_flags"], [607, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[607, 0, 1, "", "__init__"], [607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[607, 0, 1, "", "__init__"], [607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[607, 0, 1, "", "__init__"], [607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[607, 0, 1, "", "__init__"], [607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[607, 0, 1, "", "__init__"], [607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[607, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[608, 2, 1, "", "handle_frontend_method"], [608, 2, 1, "", "handle_frontend_test"], [608, 2, 1, "", "handle_method"], [608, 2, 1, "", "handle_test"], [608, 2, 1, "", "num_positional_args"], [608, 2, 1, "", "num_positional_args_method"], [608, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 669, 674, 684, 689], "compil": [0, 669, 674, 681, 686, 688, 689], "api": [0, 1, 636, 642, 644, 646, 650, 651, 661, 666, 669, 671, 673, 674, 680, 687, 689], "us": [0, 1, 633, 640, 643, 646, 661, 664, 672], "eager": 0, "v": [0, 636, 677], "lazi": 0, "arrai": [0, 47, 66, 286, 602, 609, 613, 636, 646, 647, 651, 658, 671, 680], "cach": 0, "gener": [0, 9, 32, 273, 465, 604, 661, 665, 667], "state": [0, 673, 677], "sharp": [0, 1], "bit": [0, 1], "exampl": [0, 1, 633, 639, 654, 658, 661, 664, 667], "transpil": [1, 633, 674], "function": [1, 50, 599, 642, 650, 652, 653, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 674, 677], "librari": [1, 639, 676], "modul": [1, 619, 652, 653, 673], "ivi": [1, 633, 639, 642, 644, 647, 649, 651, 654, 656, 661, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 689], "unifi": [1, 637, 671, 685, 689], "activ": [2, 24, 267, 457, 614], "convers": [3, 26], "creation": [4, 27, 269, 460], "data": [5, 28, 49, 270, 461, 476, 578, 579, 580, 581, 652, 663, 665, 672, 677], "type": [5, 28, 270, 461, 652, 659, 663, 677], "devic": [6, 29, 271, 462, 653, 658, 663], "elementwis": [7, 30, 272, 463], "experiment": [8, 31, 464, 642, 644], "gradient": [10, 33, 249, 274, 466, 661], "imag": [11, 34, 251, 640, 649], "layer": [12, 35, 275, 467, 618], "linear": [13, 36, 276, 468, 491], "algebra": [13, 36, 276, 468], "loss": [14, 37, 277, 469], "manipul": [15, 38, 278, 470], "norm": [16, 39, 281, 473, 620], "random": [17, 40, 282, 474], "search": [18, 41, 283, 475], "set": [19, 42, 284, 476, 633, 643, 648], "sort": [20, 43, 285, 477, 584], "statist": [21, 44, 287, 478], "util": [22, 45, 288, 479, 611], "wrap": [23, 46, 660], "base": 25, "contain": [48, 644, 650, 672], "class": [49, 610, 647, 656, 663, 671], "deseri": 51, "gelu": 52, "get": [53, 644], "leaky_relu": 54, "log_softmax": 55, "mish": 56, "relu": 57, "sigmoid": 58, "softmax": 59, "softplu": 60, "ifels": 61, "whileloop": 62, "if_els": 63, "while_loop": 64, "arang": 65, "asarrai": 67, "asarray_handle_nest": 68, "asarray_infer_devic": 69, "asarray_to_native_arrays_and_back": 70, "copy_arrai": 71, "empti": 72, "empty_lik": 73, "ey": 74, "from_dlpack": 75, "note": [75, 460], "full": [76, 664], "full_lik": 77, "linspac": 78, "logspac": 79, "meshgrid": 80, "native_arrai": 81, "one_hot": 82, "ones": 83, "ones_lik": 84, "tril": 85, "triu": 86, "zero": 87, "zeros_lik": 88, "as_ivy_dtyp": 89, "as_native_dtyp": 90, "astyp": 91, "broadcast_arrai": 92, "broadcast_to": 93, "can_cast": 94, "check_float": 95, "closest_valid_dtyp": 96, "default_complex_dtyp": 97, "default_dtyp": 98, "default_float_dtyp": 99, "default_int_dtyp": 100, "default_uint_dtyp": 101, "dtype": [102, 603, 658], "dtype_bit": 103, "finfo": 104, "function_supported_dtyp": 105, "function_unsupported_dtyp": 106, "iinfo": 107, "infer_default_dtyp": 108, "invalid_dtyp": 109, "is_bool_dtyp": 110, "is_complex_dtyp": 111, "is_float_dtyp": 112, "is_int_dtyp": 113, "is_native_dtyp": 114, "is_uint_dtyp": 115, "promote_typ": 116, "promote_types_of_input": 117, "result_typ": 118, "set_default_complex_dtyp": 119, "set_default_dtyp": 120, "set_default_float_dtyp": 121, "set_default_int_dtyp": 122, "set_default_uint_dtyp": 123, "type_promote_arrai": 124, "unset_default_complex_dtyp": 125, "unset_default_dtyp": 126, "unset_default_float_dtyp": 127, "unset_default_int_dtyp": 128, "unset_default_uint_dtyp": 129, "valid_dtyp": 130, "as_ivy_dev": 131, "as_native_dev": 132, "clear_cached_mem_on_dev": 133, "default_devic": 134, "dev": 135, "dev_util": 136, "function_supported_devic": 137, "function_unsupported_devic": 138, "get_all_ivy_arrays_on_dev": 139, "gpu_is_avail": 140, "num_cpu_cor": 141, "num_gpu": 142, "num_ivy_arrays_on_dev": 143, "percent_used_mem_on_dev": 144, "print_all_ivy_arrays_on_dev": 145, "set_default_devic": 146, "set_split_factor": 147, "split_factor": 148, "split_func_cal": 149, "to_devic": 150, "total_mem_on_dev": 151, "tpu_is_avail": 152, "unset_default_devic": 153, "used_mem_on_dev": 154, "ab": 155, "aco": 156, "acosh": 157, "add": [158, 654, 664, 689], "asin": 159, "asinh": 160, "atan": 161, "atan2": 162, "atanh": 163, "bitwise_and": 164, "bitwise_invert": 165, "bitwise_left_shift": 166, "bitwise_or": 167, "bitwise_right_shift": 168, "bitwise_xor": 169, "ceil": 170, "co": 171, "cosh": 172, "deg2rad": 173, "divid": 174, "equal": 175, "erf": 176, "exp": 177, "expm1": 178, "floor": 179, "floor_divid": 180, "fmod": 181, "greater": 182, "greater_equ": 183, "isfinit": 184, "isinf": 185, "isnan": 186, "isreal": 187, "less": 188, "less_equ": 189, "log": [190, 643], "log10": 191, "log1p": 192, "log2": 193, "logaddexp": 194, "logical_and": 195, "logical_not": 196, "logical_or": 197, "logical_xor": 198, "maximum": 199, "minimum": 200, "multipli": 201, "neg": 202, "not_equ": 203, "posit": [204, 658], "pow": 205, "rad2deg": 206, "reciproc": 207, "remaind": 208, "round": 209, "sign": 210, "sin": 211, "sinh": 212, "sqrt": 213, "squar": 214, "subtract": 215, "tan": [216, 654, 664], "tanh": 217, "trunc": 218, "trunc_divid": 219, "logit": 220, "logsigmoid": 221, "prelu": 222, "relu6": 223, "selu": 224, "thresholded_relu": 225, "eye_lik": 226, "frombuff": 227, "hamming_window": 228, "hann_window": 229, "kaiser_bessel_derived_window": 230, "kaiser_window": 231, "tril_indic": 232, "triu_indic": 233, "vorbis_window": 234, "allclos": 235, "angl": 236, "binar": 237, "conj": 238, "copysign": 239, "count_nonzero": 240, "diff": 241, "exp2": 242, "fix": [243, 649], "float_pow": 244, "fmax": 245, "fmin": 246, "frexp": 247, "gcd": 248, "hypot": 250, "isclos": 252, "lcm": 253, "ldexp": 254, "lerp": 255, "logaddexp2": 256, "nan_to_num": 257, "nansum": 258, "nextaft": 259, "real": 260, "signbit": 261, "sinc": 262, "trapz": 263, "xlogi": 264, "zeta": 265, "bind_custom_gradient_funct": 266, "constant": [268, 458], "meta": [279, 471], "nest": [280, 472, 609, 613], "spars": 286, "adaptive_avg_pool1d": 289, "adaptive_avg_pool2d": 290, "avg_pool1d": 291, "avg_pool2d": 292, "avg_pool3d": 293, "dct": 294, "dft": 295, "dropout1d": 296, "dropout3d": 297, "embed": 298, "fft": 299, "ifft": 300, "interp": 301, "interpol": 302, "max_pool1d": 303, "max_pool2d": 304, "max_pool3d": 305, "adjoint": 306, "cond": 307, "cov": 308, "diagflat": 309, "eig": [310, 500], "eigh_tridiagon": 311, "eigval": 312, "kron": 313, "matrix_exp": 314, "multi_dot": 315, "binary_cross_entropy_with_logit": 316, "as_strid": 317, "atleast_1d": 318, "atleast_2d": 319, "atleast_3d": 320, "broadcast_shap": 321, "concat_from_sequ": 322, "dsplit": 323, "dstack": 324, "expand": 325, "flatten": 326, "fliplr": 327, "flipud": 328, "heavisid": 329, "hsplit": 330, "hstack": 331, "i0": 332, "moveaxi": 333, "ndenumer": 334, "ndindex": 335, "pad": 336, "rot90": 337, "take_along_axi": 338, "top_k": 339, "vsplit": 340, "vstack": 341, "batch_norm": 342, "instance_norm": 343, "l2_normal": 344, "lp_normal": 345, "bernoulli": 346, "beta": 347, "dirichlet": 348, "gamma": 349, "poisson": 350, "unravel_index": 351, "lexsort": 352, "msort": 353, "is_ivy_sparse_arrai": 354, "is_native_sparse_arrai": 355, "native_sparse_arrai": 356, "native_sparse_array_to_indices_values_and_shap": 357, "bincount": 358, "corrcoef": 359, "median": 360, "nanmean": 361, "nanmedian": 362, "quantil": 363, "all_equ": 364, "arg_info": 365, "arg_nam": 366, "array_equ": 367, "assert_supports_inplac": 368, "cache_fn": 369, "clip_matrix_norm": 370, "clip_vector_norm": 371, "container_typ": 372, "current_backend_str": 373, "default": 374, "einops_rearrang": 375, "einops_reduc": 376, "einops_repeat": 377, "exist": [378, 640], "fourier_encod": 379, "function_supported_devices_and_dtyp": 380, "function_unsupported_devices_and_dtyp": 381, "gather": 382, "gather_nd": 383, "get_all_arrays_in_memori": 384, "get_array_mod": 385, "get_exception_trace_mod": 386, "get_item": 387, "get_min_bas": 388, "get_min_denomin": 389, "get_nestable_mod": 390, "get_num_dim": 391, "get_queue_timeout": 392, "get_referrers_recurs": 393, "get_show_func_wrapper_trace_mod": 394, "get_tmp_dir": 395, "has_nan": 396, "inplace_arrays_support": 397, "inplace_decr": 398, "inplace_incr": 399, "inplace_upd": 400, "inplace_variables_support": 401, "is_arrai": 402, "is_ivy_arrai": 403, "is_ivy_contain": 404, "is_native_arrai": 405, "isin": 406, "isscalar": 407, "items": 408, "match_kwarg": 409, "multiprocess": 410, "num_arrays_in_memori": 411, "print_all_arrays_in_memori": 412, "scatter_flat": 413, "scatter_nd": 414, "set_array_mod": 415, "paramet": [415, 416, 419, 421, 422, 465, 607], "set_exception_trace_mod": 416, "set_min_bas": 417, "set_min_denomin": 418, "set_nestable_mod": 419, "set_queue_timeout": 420, "set_shape_array_mod": 421, "set_show_func_wrapper_trace_mod": 422, "set_tmp_dir": 423, "shape": [424, 476, 578, 579, 580, 581, 677], "shape_array_mod": 425, "stable_divid": 426, "stable_pow": 427, "supports_inplace_upd": 428, "to_ivy_shap": 429, "to_list": 430, "to_native_shap": 431, "to_numpi": 432, "to_scalar": 433, "try_else_non": 434, "unset_array_mod": 435, "unset_exception_trace_mod": 436, "unset_nestable_mod": 437, "unset_queue_timeout": 438, "unset_shape_array_mod": 439, "unset_show_func_wrapper_trace_mod": 440, "value_is_nan": 441, "vmap": 442, "adam_step": 443, "adam_upd": 444, "execute_with_gradi": [445, 661], "grad": 446, "gradient_descent_upd": 447, "jac": 448, "lamb_upd": 449, "lars_upd": 450, "optimizer_upd": 451, "set_with_grad": 452, "stop_gradi": 453, "unset_with_grad": 454, "value_and_grad": 455, "with_grad": 456, "control": [459, 677], "flow": [459, 677], "op": 459, "depend": [476, 578, 579, 580, 581], "output": [476, 578, 579, 580, 581], "conv": 480, "conv1d": 481, "conv1d_transpos": 482, "conv2d": 483, "conv2d_transpos": 484, "conv3d": 485, "conv3d_transpos": 486, "conv_general_dil": 487, "conv_general_transpos": 488, "depthwise_conv2d": 489, "dropout": 490, "lstm_updat": 492, "multi_head_attent": 493, "scaled_dot_product_attent": 494, "choleski": 495, "cross": 496, "det": 497, "diag": 498, "diagon": 499, "eigh": 501, "eigvalsh": 502, "inner": 503, "inv": 504, "lu_factor": 505, "matmul": 506, "matrix_norm": 507, "matrix_pow": 508, "matrix_rank": 509, "matrix_transpos": 510, "outer": 511, "pinv": 512, "qr": 513, "slogdet": 514, "solv": 515, "svd": 516, "svdval": 517, "tensordot": 518, "tensorsolv": 519, "trace": [520, 656], "vander": 521, "vecdot": 522, "vector_norm": 523, "vector_to_skew_symmetric_matrix": 524, "binary_cross_entropi": 525, "cross_entropi": 526, "sparse_cross_entropi": 527, "clip": 528, "concat": 529, "constant_pad": 530, "expand_dim": 531, "flip": 532, "permute_dim": 533, "repeat": 534, "reshap": 535, "roll": [536, 654], "split": 537, "squeez": 538, "stack": [539, 656], "swapax": 540, "tile": 541, "unstack": 542, "zero_pad": 543, "fomaml_step": 544, "maml_step": 545, "reptile_step": 546, "all_nested_indic": 547, "copy_nest": 548, "duplicate_array_index_chain": 549, "index_nest": 550, "insert_into_nest_at_index": 551, "insert_into_nest_at_indic": 552, "map": [553, 651], "map_nest_at_index": 554, "map_nest_at_indic": 555, "multi_index_nest": 556, "nested_ani": 557, "nested_argwher": 558, "nested_map": 559, "nested_multi_map": 560, "prune_empti": 561, "prune_nest_at_index": 562, "prune_nest_at_indic": 563, "set_nest_at_index": 564, "set_nest_at_indic": 565, "layer_norm": 566, "multinomi": 567, "randint": 568, "random_norm": 569, "random_uniform": 570, "seed": 571, "shuffl": 572, "argmax": 573, "argmin": 574, "argwher": 575, "nonzero": 576, "where": [577, 642], "unique_al": 578, "unique_count": 579, "unique_invers": 580, "unique_valu": 581, "argsort": 582, "searchsort": 583, "cumprod": 585, "cumsum": 586, "einsum": 587, "max": 588, "mean": 589, "min": 590, "prod": 591, "std": 592, "sum": 593, "var": 594, "all": 595, "ani": 596, "assert": [597, 623, 656], "avail": 598, "framework": [598, 610, 633, 661, 670, 683, 686, 689, 690], "test": [599, 607, 608, 612, 643, 644, 646, 651, 664, 665], "global": 600, "hypothesi": [601, 643, 664, 665], "helper": [601, 602, 603, 604, 605, 608, 616, 625, 664, 665, 666], "number": [605, 658], "struct": 606, "flag": 607, "convert": [615, 674], "initi": [617, 673], "optim": [621, 673], "sequenti": 622, "backend": [624, 627, 648, 652, 661, 666, 669, 677], "ast": 625, "handler": [626, 627, 669], "sub": 627, "dynam": [628, 677], "import": 628, "except": [629, 656], "inspect": 630, "profil": 631, "verbos": 632, "content": 633, "when": [633, 667], "should": 633, "i": [633, 649, 667], "up": [633, 643], "instal": 633, "pip": 633, "docker": [633, 640, 643, 644, 649], "from": 633, "sourc": 633, "document": 633, "contribut": [633, 638], "commun": 633, "citat": 633, "background": 634, "ml": [635, 685, 689], "explos": 635, "standard": [636, 667, 680, 689], "skeptic": 636, "complimentari": 636, "competit": 636, "do": [636, 665], "work": [636, 679], "The": [636, 644, 649, 661, 663, 671, 677], "why": [637, 665], "No": [637, 643], "more": [637, 643, 667], "re": [637, 665], "implement": [637, 651, 661], "infinit": 637, "shelf": 637, "life": 637, "appli": [639, 676], "introduct": [639, 663, 664], "robot": [639, 676], "build": [640, 649, 669], "doc": [640, 649], "conveni": [640, 649, 659], "script": [640, 649], "hub": 640, "local": [640, 644], "without": [640, 664], "help": [641, 644], "resourc": 641, "open": 642, "task": 642, "format": [642, 657, 682, 689], "checklist": 642, "frontend": [642, 648, 663, 664, 674], "place": 642, "fork": [643, 644], "clone": [643, 651], "repo": 643, "pycharm": [643, 644], "virtual": 643, "environ": 643, "miniconda": 643, "venv": 643, "interpret": 643, "window": 643, "maco": 643, "ubuntu": 643, "detail": 643, "free": 643, "github": 643, "codespac": 643, "pre": [643, 657], "commit": [643, 644, 651, 657], "basic": [644, 663], "todo": 644, "list": 644, "issu": 644, "manag": 644, "your": [644, 665], "who": 644, "To": 644, "ask": 644, "With": 644, "command": 644, "line": 644, "browser": 644, "pull": [644, 651], "request": [644, 651], "small": 644, "often": 644, "interact": 644, "run": [644, 646, 649, 665], "most": 644, "out": [644, 658, 662], "id": [644, 646], "deep": 645, "dive": 645, "termin": 646, "regener": 646, "failur": 646, "skip": 646, "nativ": [647, 667], "handl": [647, 656, 677], "integr": [647, 651, 665], "custom": [647, 649, 661, 672, 677], "version": [648, 666, 677], "support": [648, 652, 663, 677], "pipelin": [649, 651, 665, 677], "how": [649, 665], "builder": 649, "being": 649, "option": 649, "": 649, "structur": [649, 661, 677], "index": 649, "rst": 649, "partial_conf": 649, "py": 649, "prebuild": 649, "sh": 649, "extens": [649, 675], "custom_autosummari": 649, "hide": 649, "tabl": 649, "includ": 649, "directori": 649, "substitut": 649, "caption": 649, "custom_build": 649, "discussion_link": 649, "skippable_funct": 649, "instanc": [650, 663, 664, 671], "method": [650, 663, 664, 671, 672], "static": 650, "special": [650, 663], "nestabl": [650, 658, 659], "continu": 651, "push": 651, "pr": 651, "trigger": 651, "A": [651, 667], "top": 651, "down": 651, "view": [651, 662], "store": 651, "retriev": 651, "repositori": 651, "nitti": 651, "gritti": 651, "storag": 651, "space": 651, "unifyai": 651, "determin": 651, "coverag": 651, "workflow": 651, "multipl": 651, "runner": 651, "race": 651, "condit": 651, "period": 651, "manual": 651, "dispatch": 651, "ci": 651, "dashboard": 651, "promot": [652, 663], "argument": [652, 653, 658, 662, 663], "other": [652, 653], "unsupport": 652, "bug": 652, "superset": [652, 667], "docstr": [654, 655], "configur": [656, 672], "mode": 656, "func_wrapp": 656, "prune": 656, "handle_except": 656, "decor": [656, 665], "lint": 657, "check": [657, 677], "hook": 657, "keyword": 658, "input": 658, "oper": [658, 671, 677], "integ": 658, "sequenc": 658, "primari": 659, "composit": [659, 663], "mix": 659, "standalon": 659, "overview": 661, "usag": [661, 667], "signatur": 661, "an": 661, "design": [661, 666, 668], "our": 661, "polici": [661, 663], "specif": [661, 687, 688, 689], "consider": 661, "inplac": 662, "updat": 662, "copi": 662, "write": [663, 665], "unus": 663, "miss": 663, "temporari": 663, "rule": 663, "numpi": [663, 683], "cast": 663, "duplic": [663, 667], "valu": 664, "alia": 664, "own": 665, "strategi": 665, "we": 665, "need": 665, "effect": 665, "bonu": 665, "extend": [665, 667], "featur": 665, "self": 665, "consist": 665, "explicit": 665, "test_array_funct": 665, "fail": 665, "navig": 666, "code": 666, "categor": 666, "submodul": 666, "pin": 666, "behaviour": 667, "what": [667, 689], "non": 667, "too": 667, "much": 667, "balanc": 667, "effici": 667, "maxim": 667, "block": 669, "monkei": 671, "patch": 671, "construct": 672, "represent": 672, "recurs": 672, "built": 672, "ins": 672, "access": 672, "save": 672, "load": 672, "comparison": 672, "case": 672, "compartment": 672, "network": [672, 674], "weight": 672, "role": 674, "model": [674, 677], "mechan": 676, "vision": 676, "gym": 676, "memori": 676, "faq": 677, "maintain": 677, "size": 677, "gpu": 677, "deploy": 677, "auto": 677, "differenti": 677, "replica": 677, "parallel": 677, "altern": 677, "glossari": 678, "relat": 679, "infrastructur": [681, 689], "llvm": 681, "mlir": 681, "oneapi": 681, "exchang": [682, 689], "onnx": 682, "nnef": 682, "coreml": 682, "matlab": 683, "scipi": 683, "torch": [683, 684], "scikit": 683, "learn": 683, "theano": 683, "panda": 683, "julia": 683, "apach": [683, 686], "spark": 683, "mllib": 683, "caff": 683, "chainer": 683, "tensorflow": 683, "1": 683, "mxnet": 683, "cntk": 683, "pytorch": 683, "flux": 683, "jax": 683, "2": 683, "dex": 683, "languag": 683, "tracer": [684, 689], "tf": 684, "jaxpr": 684, "jit": 684, "fx": 684, "compani": [685, 689], "quansight": 685, "modular": 685, "octoml": 685, "multi": [686, 689], "vendor": [686, 687, 688, 689], "tvm": 686, "xla": 686, "gcc": 686, "tensorrt": 687, "cuda": 687, "icc": 688, "icx": 688, "nvcc": 688, "doe": 689, "wrapper": [689, 690], "eagerpi": 690, "kera": 690, "thinc": 690, "tensorli": 690, "neuropod": 690}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [1, "sharp-bits"]], "Examples": [[0, "examples"], [1, "examples"], [633, "examples"], [658, "examples"]], "Transpiler": [[1, "transpiler"]], "Transpiler API": [[1, "transpiler-api"]], "Using the transpiler": [[1, "using-the-transpiler"]], "Transpiling functions": [[1, "transpiling-functions"]], "Transpiling Libraries": [[1, "transpiling-libraries"]], "Transpiling Modules": [[1, "transpiling-modules"]], "Ivy.unify": [[1, "ivy-unify"]], "Activations": [[2, "module-ivy.data_classes.array.activations"], [24, "module-ivy.data_classes.container.activations"], [267, "activations"], [457, "activations"], [614, "module-ivy.stateful.activations"]], "Conversions": [[3, "module-ivy.data_classes.array.conversions"], [26, "module-ivy.data_classes.container.conversions"]], "Creation": [[4, "module-ivy.data_classes.array.creation"], [27, "module-ivy.data_classes.container.creation"], [269, "creation"], [460, "creation"]], "Data type": [[5, "module-ivy.data_classes.array.data_type"], [28, "module-ivy.data_classes.container.data_type"], [270, "module-ivy.functional.ivy.experimental.data_type"], [461, "data-type"]], "Device": [[6, "module-ivy.data_classes.array.device"], [29, "module-ivy.data_classes.container.device"], [271, "module-ivy.functional.ivy.experimental.device"], [462, "device"]], "Elementwise": [[7, "module-ivy.data_classes.array.elementwise"], [30, "module-ivy.data_classes.container.elementwise"], [272, "elementwise"], [463, "elementwise"]], "Experimental": [[8, "module-ivy.data_classes.array.experimental"], [31, "module-ivy.data_classes.container.experimental"], [464, "experimental"]], "General": [[9, "module-ivy.data_classes.array.general"], [32, "module-ivy.data_classes.container.general"], [273, "module-ivy.functional.ivy.experimental.general"], [465, "general"]], "Gradients": [[10, "module-ivy.data_classes.array.gradients"], [33, "module-ivy.data_classes.container.gradients"], [274, "gradients"], [466, "gradients"], [661, "gradients"]], "Image": [[11, "module-ivy.data_classes.array.image"], [34, "module-ivy.data_classes.container.image"]], "Layers": [[12, "module-ivy.data_classes.array.layers"], [35, "module-ivy.data_classes.container.layers"], [275, "layers"], [467, "layers"], [618, "module-ivy.stateful.layers"]], "Linear algebra": [[13, "module-ivy.data_classes.array.linear_algebra"], [36, "module-ivy.data_classes.container.linear_algebra"], [276, "linear-algebra"], [468, "linear-algebra"]], "Losses": [[14, "module-ivy.data_classes.array.losses"], [37, "module-ivy.data_classes.container.losses"], [277, "losses"], [469, "losses"]], "Manipulation": [[15, "module-ivy.data_classes.array.manipulation"], [38, "module-ivy.data_classes.container.manipulation"], [278, "manipulation"], [470, "manipulation"]], "Norms": [[16, "module-ivy.data_classes.array.norms"], [39, "module-ivy.data_classes.container.norms"], [281, "norms"], [473, "norms"], [620, "module-ivy.stateful.norms"]], "Random": [[17, "module-ivy.data_classes.array.random"], [40, "module-ivy.data_classes.container.random"], [282, "random"], [474, "random"]], "Searching": [[18, "module-ivy.data_classes.array.searching"], [41, "module-ivy.data_classes.container.searching"], [283, "searching"], [475, "searching"]], "Set": [[19, "module-ivy.data_classes.array.set"], [42, "module-ivy.data_classes.container.set"], [284, "module-ivy.functional.ivy.experimental.set"], [476, "set"]], "Sorting": [[20, "module-ivy.data_classes.array.sorting"], [43, "module-ivy.data_classes.container.sorting"], [285, "sorting"], [477, "sorting"]], "Statistical": [[21, "module-ivy.data_classes.array.statistical"], [44, "module-ivy.data_classes.container.statistical"], [287, "statistical"], [478, "statistical"]], "Utility": [[22, "module-ivy.data_classes.array.utility"], [45, "module-ivy.data_classes.container.utility"], [288, "module-ivy.functional.ivy.experimental.utility"], [479, "utility"]], "Wrapping": [[23, "module-ivy.data_classes.array.wrapping"], [46, "module-ivy.data_classes.container.wrapping"]], "Base": [[25, "module-ivy.data_classes.container.base"]], "Array": [[47, "array"]], "Container": [[48, "container"]], "Data classes": [[49, "data-classes"]], "Functions": [[50, "functions"]], "deserialize": [[51, "deserialize"]], "gelu": [[52, "gelu"]], "get": [[53, "get"]], "leaky_relu": [[54, "leaky-relu"]], "log_softmax": [[55, "log-softmax"]], "mish": [[56, "mish"]], "relu": [[57, "relu"]], "sigmoid": [[58, "sigmoid"]], "softmax": [[59, "softmax"]], "softplus": [[60, "softplus"]], "IfElse": [[61, "ifelse"]], "WhileLoop": [[62, "whileloop"]], "if_else": [[63, "if-else"]], "while_loop": [[64, "while-loop"]], "arange": [[65, "arange"]], "array": [[66, "array"]], "asarray": [[67, "asarray"]], "asarray_handle_nestable": [[68, "asarray-handle-nestable"]], "asarray_infer_device": [[69, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[70, "asarray-to-native-arrays-and-back"]], "copy_array": [[71, "copy-array"]], "empty": [[72, "empty"]], "empty_like": [[73, "empty-like"]], "eye": [[74, "eye"]], "from_dlpack": [[75, "from-dlpack"]], "Note": [[75, null], [460, null]], "full": [[76, "full"]], "full_like": [[77, "full-like"]], "linspace": [[78, "linspace"]], "logspace": [[79, "logspace"]], "meshgrid": [[80, "meshgrid"]], "native_array": [[81, "native-array"]], "one_hot": [[82, "one-hot"]], "ones": [[83, "ones"]], "ones_like": [[84, "ones-like"]], "tril": [[85, "tril"]], "triu": [[86, "triu"]], "zeros": [[87, "zeros"]], "zeros_like": [[88, "zeros-like"]], "as_ivy_dtype": [[89, "as-ivy-dtype"]], "as_native_dtype": [[90, "as-native-dtype"]], "astype": [[91, "astype"]], "broadcast_arrays": [[92, "broadcast-arrays"]], "broadcast_to": [[93, "broadcast-to"]], "can_cast": [[94, "can-cast"]], "check_float": [[95, "check-float"]], "closest_valid_dtype": [[96, "closest-valid-dtype"]], "default_complex_dtype": [[97, "default-complex-dtype"]], "default_dtype": [[98, "default-dtype"]], "default_float_dtype": [[99, "default-float-dtype"]], "default_int_dtype": [[100, "default-int-dtype"]], "default_uint_dtype": [[101, "default-uint-dtype"]], "dtype": [[102, "dtype"]], "dtype_bits": [[103, "dtype-bits"]], "finfo": [[104, "finfo"]], "function_supported_dtypes": [[105, "function-supported-dtypes"]], "function_unsupported_dtypes": [[106, "function-unsupported-dtypes"]], "iinfo": [[107, "iinfo"]], "infer_default_dtype": [[108, "infer-default-dtype"]], "invalid_dtype": [[109, "invalid-dtype"]], "is_bool_dtype": [[110, "is-bool-dtype"]], "is_complex_dtype": [[111, "is-complex-dtype"]], "is_float_dtype": [[112, "is-float-dtype"]], "is_int_dtype": [[113, "is-int-dtype"]], "is_native_dtype": [[114, "is-native-dtype"]], "is_uint_dtype": [[115, "is-uint-dtype"]], "promote_types": [[116, "promote-types"]], "promote_types_of_inputs": [[117, "promote-types-of-inputs"]], "result_type": [[118, "result-type"]], "set_default_complex_dtype": [[119, "set-default-complex-dtype"]], "set_default_dtype": [[120, "set-default-dtype"]], "set_default_float_dtype": [[121, "set-default-float-dtype"]], "set_default_int_dtype": [[122, "set-default-int-dtype"]], "set_default_uint_dtype": [[123, "set-default-uint-dtype"]], "type_promote_arrays": [[124, "type-promote-arrays"]], "unset_default_complex_dtype": [[125, "unset-default-complex-dtype"]], "unset_default_dtype": [[126, "unset-default-dtype"]], "unset_default_float_dtype": [[127, "unset-default-float-dtype"]], "unset_default_int_dtype": [[128, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[129, "unset-default-uint-dtype"]], "valid_dtype": [[130, "valid-dtype"]], "as_ivy_dev": [[131, "as-ivy-dev"]], "as_native_dev": [[132, "as-native-dev"]], "clear_cached_mem_on_dev": [[133, "clear-cached-mem-on-dev"]], "default_device": [[134, "default-device"]], "dev": [[135, "dev"]], "dev_util": [[136, "dev-util"]], "function_supported_devices": [[137, "function-supported-devices"]], "function_unsupported_devices": [[138, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[139, "get-all-ivy-arrays-on-dev"]], "gpu_is_available": [[140, "gpu-is-available"]], "num_cpu_cores": [[141, "num-cpu-cores"]], "num_gpus": [[142, "num-gpus"]], "num_ivy_arrays_on_dev": [[143, "num-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[144, "percent-used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[145, "print-all-ivy-arrays-on-dev"]], "set_default_device": [[146, "set-default-device"]], "set_split_factor": [[147, "set-split-factor"]], "split_factor": [[148, "split-factor"]], "split_func_call": [[149, "split-func-call"]], "to_device": [[150, "to-device"]], "total_mem_on_dev": [[151, "total-mem-on-dev"]], "tpu_is_available": [[152, "tpu-is-available"]], "unset_default_device": [[153, "unset-default-device"]], "used_mem_on_dev": [[154, "used-mem-on-dev"]], "abs": [[155, "abs"]], "acos": [[156, "acos"]], "acosh": [[157, "acosh"]], "add": [[158, "add"]], "asin": [[159, "asin"]], "asinh": [[160, "asinh"]], "atan": [[161, "atan"]], "atan2": [[162, "atan2"]], "atanh": [[163, "atanh"]], "bitwise_and": [[164, "bitwise-and"]], "bitwise_invert": [[165, "bitwise-invert"]], "bitwise_left_shift": [[166, "bitwise-left-shift"]], "bitwise_or": [[167, "bitwise-or"]], "bitwise_right_shift": [[168, "bitwise-right-shift"]], "bitwise_xor": [[169, "bitwise-xor"]], "ceil": [[170, "ceil"]], "cos": [[171, "cos"]], "cosh": [[172, "cosh"]], "deg2rad": [[173, "deg2rad"]], "divide": [[174, "divide"]], "equal": [[175, "equal"]], "erf": [[176, "erf"]], "exp": [[177, "exp"]], "expm1": [[178, "expm1"]], "floor": [[179, "floor"]], "floor_divide": [[180, "floor-divide"]], "fmod": [[181, "fmod"]], "greater": [[182, "greater"]], "greater_equal": [[183, "greater-equal"]], "isfinite": [[184, "isfinite"]], "isinf": [[185, "isinf"]], "isnan": [[186, "isnan"]], "isreal": [[187, "isreal"]], "less": [[188, "less"]], "less_equal": [[189, "less-equal"]], "log": [[190, "log"]], "log10": [[191, "log10"]], "log1p": [[192, "log1p"]], "log2": [[193, "log2"]], "logaddexp": [[194, "logaddexp"]], "logical_and": [[195, "logical-and"]], "logical_not": [[196, "logical-not"]], "logical_or": [[197, "logical-or"]], "logical_xor": [[198, "logical-xor"]], "maximum": [[199, "maximum"]], "minimum": [[200, "minimum"]], "multiply": [[201, "multiply"]], "negative": [[202, "negative"]], "not_equal": [[203, "not-equal"]], "positive": [[204, "positive"]], "pow": [[205, "pow"]], "rad2deg": [[206, "rad2deg"]], "reciprocal": [[207, "reciprocal"]], "remainder": [[208, "remainder"]], "round": [[209, "round"]], "sign": [[210, "sign"]], "sin": [[211, "sin"]], "sinh": [[212, "sinh"]], "sqrt": [[213, "sqrt"]], "square": [[214, "square"]], "subtract": [[215, "subtract"]], "tan": [[216, "tan"]], "tanh": [[217, "tanh"]], "trunc": [[218, "trunc"]], "trunc_divide": [[219, "trunc-divide"]], "logit": [[220, "logit"]], "logsigmoid": [[221, "logsigmoid"]], "prelu": [[222, "prelu"]], "relu6": [[223, "relu6"]], "selu": [[224, "selu"]], "thresholded_relu": [[225, "thresholded-relu"]], "eye_like": [[226, "eye-like"]], "frombuffer": [[227, "frombuffer"]], "hamming_window": [[228, "hamming-window"]], "hann_window": [[229, "hann-window"]], "kaiser_bessel_derived_window": [[230, "kaiser-bessel-derived-window"]], "kaiser_window": [[231, "kaiser-window"]], "tril_indices": [[232, "tril-indices"]], "triu_indices": [[233, "triu-indices"]], "vorbis_window": [[234, "vorbis-window"]], "allclose": [[235, "allclose"]], "angle": [[236, "angle"]], "binarizer": [[237, "binarizer"]], "conj": [[238, "conj"]], "copysign": [[239, "copysign"]], "count_nonzero": [[240, "count-nonzero"]], "diff": [[241, "diff"]], "exp2": [[242, "exp2"]], "fix": [[243, "fix"]], "float_power": [[244, "float-power"]], "fmax": [[245, "fmax"]], "fmin": [[246, "fmin"]], "frexp": [[247, "frexp"]], "gcd": [[248, "gcd"]], "gradient": [[249, "gradient"]], "hypot": [[250, "hypot"]], "imag": [[251, "imag"]], "isclose": [[252, "isclose"]], "lcm": [[253, "lcm"]], "ldexp": [[254, "ldexp"]], "lerp": [[255, "lerp"]], "logaddexp2": [[256, "logaddexp2"]], "nan_to_num": [[257, "nan-to-num"]], "nansum": [[258, "nansum"]], "nextafter": [[259, "nextafter"]], "real": [[260, "real"]], "signbit": [[261, "signbit"]], "sinc": [[262, "sinc"]], "trapz": [[263, "trapz"]], "xlogy": [[264, "xlogy"]], "zeta": [[265, "zeta"]], "bind_custom_gradient_function": [[266, "bind-custom-gradient-function"]], "Constants": [[268, "module-ivy.functional.ivy.experimental.constants"], [458, "module-ivy.functional.ivy.constants"]], "Meta": [[279, "module-ivy.functional.ivy.experimental.meta"], [471, "meta"]], "Nest": [[280, "module-ivy.functional.ivy.experimental.nest"], [472, "nest"]], "Sparse array": [[286, "sparse-array"]], "adaptive_avg_pool1d": [[289, "adaptive-avg-pool1d"]], "adaptive_avg_pool2d": [[290, "adaptive-avg-pool2d"]], "avg_pool1d": [[291, "avg-pool1d"]], "avg_pool2d": [[292, "avg-pool2d"]], "avg_pool3d": [[293, "avg-pool3d"]], "dct": [[294, "dct"]], "dft": [[295, "dft"]], "dropout1d": [[296, "dropout1d"]], "dropout3d": [[297, "dropout3d"]], "embedding": [[298, "embedding"]], "fft": [[299, "fft"]], "ifft": [[300, "ifft"]], "interp": [[301, "interp"]], "interpolate": [[302, "interpolate"]], "max_pool1d": [[303, "max-pool1d"]], "max_pool2d": [[304, "max-pool2d"]], "max_pool3d": [[305, "max-pool3d"]], "adjoint": [[306, "adjoint"]], "cond": [[307, "cond"]], "cov": [[308, "cov"]], "diagflat": [[309, "diagflat"]], "eig": [[310, "eig"], [500, "eig"]], "eigh_tridiagonal": [[311, "eigh-tridiagonal"]], "eigvals": [[312, "eigvals"]], "kron": [[313, "kron"]], "matrix_exp": [[314, "matrix-exp"]], "multi_dot": [[315, "multi-dot"]], "binary_cross_entropy_with_logits": [[316, "binary-cross-entropy-with-logits"]], "as_strided": [[317, "as-strided"]], "atleast_1d": [[318, "atleast-1d"]], "atleast_2d": [[319, "atleast-2d"]], "atleast_3d": [[320, "atleast-3d"]], "broadcast_shapes": [[321, "broadcast-shapes"]], "concat_from_sequence": [[322, "concat-from-sequence"]], "dsplit": [[323, "dsplit"]], "dstack": [[324, "dstack"]], "expand": [[325, "expand"]], "flatten": [[326, "flatten"]], "fliplr": [[327, "fliplr"]], "flipud": [[328, "flipud"]], "heaviside": [[329, "heaviside"]], "hsplit": [[330, "hsplit"]], "hstack": [[331, "hstack"]], "i0": [[332, "i0"]], "moveaxis": [[333, "moveaxis"]], "ndenumerate": [[334, "ndenumerate"]], "ndindex": [[335, "ndindex"]], "pad": [[336, "pad"]], "rot90": [[337, "rot90"]], "take_along_axis": [[338, "take-along-axis"]], "top_k": [[339, "top-k"]], "vsplit": [[340, "vsplit"]], "vstack": [[341, "vstack"]], "batch_norm": [[342, "batch-norm"]], "instance_norm": [[343, "instance-norm"]], "l2_normalize": [[344, "l2-normalize"]], "lp_normalize": [[345, "lp-normalize"]], "bernoulli": [[346, "bernoulli"]], "beta": [[347, "beta"]], "dirichlet": [[348, "dirichlet"]], "gamma": [[349, "gamma"]], "poisson": [[350, "poisson"]], "unravel_index": [[351, "unravel-index"]], "lexsort": [[352, "lexsort"]], "msort": [[353, "msort"]], "is_ivy_sparse_array": [[354, "is-ivy-sparse-array"]], "is_native_sparse_array": [[355, "is-native-sparse-array"]], "native_sparse_array": [[356, "native-sparse-array"]], "native_sparse_array_to_indices_values_and_shape": [[357, "native-sparse-array-to-indices-values-and-shape"]], "bincount": [[358, "bincount"]], "corrcoef": [[359, "corrcoef"]], "median": [[360, "median"]], "nanmean": [[361, "nanmean"]], "nanmedian": [[362, "nanmedian"]], "quantile": [[363, "quantile"]], "all_equal": [[364, "all-equal"]], "arg_info": [[365, "arg-info"]], "arg_names": [[366, "arg-names"]], "array_equal": [[367, "array-equal"]], "assert_supports_inplace": [[368, "assert-supports-inplace"]], "cache_fn": [[369, "cache-fn"]], "clip_matrix_norm": [[370, "clip-matrix-norm"]], "clip_vector_norm": [[371, "clip-vector-norm"]], "container_types": [[372, "container-types"]], "current_backend_str": [[373, "current-backend-str"]], "default": [[374, "default"]], "einops_rearrange": [[375, "einops-rearrange"]], "einops_reduce": [[376, "einops-reduce"]], "einops_repeat": [[377, "einops-repeat"]], "exists": [[378, "exists"]], "fourier_encode": [[379, "fourier-encode"]], "function_supported_devices_and_dtypes": [[380, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[381, "function-unsupported-devices-and-dtypes"]], "gather": [[382, "gather"]], "gather_nd": [[383, "gather-nd"]], "get_all_arrays_in_memory": [[384, "get-all-arrays-in-memory"]], "get_array_mode": [[385, "get-array-mode"]], "get_exception_trace_mode": [[386, "get-exception-trace-mode"]], "get_item": [[387, "get-item"]], "get_min_base": [[388, "get-min-base"]], "get_min_denominator": [[389, "get-min-denominator"]], "get_nestable_mode": [[390, "get-nestable-mode"]], "get_num_dims": [[391, "get-num-dims"]], "get_queue_timeout": [[392, "get-queue-timeout"]], "get_referrers_recursive": [[393, "get-referrers-recursive"]], "get_show_func_wrapper_trace_mode": [[394, "get-show-func-wrapper-trace-mode"]], "get_tmp_dir": [[395, "get-tmp-dir"]], "has_nans": [[396, "has-nans"]], "inplace_arrays_supported": [[397, "inplace-arrays-supported"]], "inplace_decrement": [[398, "inplace-decrement"]], "inplace_increment": [[399, "inplace-increment"]], "inplace_update": [[400, "inplace-update"]], "inplace_variables_supported": [[401, "inplace-variables-supported"]], "is_array": [[402, "is-array"]], "is_ivy_array": [[403, "is-ivy-array"]], "is_ivy_container": [[404, "is-ivy-container"]], "is_native_array": [[405, "is-native-array"]], "isin": [[406, "isin"]], "isscalar": [[407, "isscalar"]], "itemsize": [[408, "itemsize"]], "match_kwargs": [[409, "match-kwargs"]], "multiprocessing": [[410, "multiprocessing"]], "num_arrays_in_memory": [[411, "num-arrays-in-memory"]], "print_all_arrays_in_memory": [[412, "print-all-arrays-in-memory"]], "scatter_flat": [[413, "scatter-flat"]], "scatter_nd": [[414, "scatter-nd"]], "set_array_mode": [[415, "set-array-mode"]], "Parameter": [[415, "parameter"], [416, "parameter"], [419, "parameter"], [421, "parameter"], [422, "parameter"], [465, "parameter"], [465, "id1"], [465, "id2"], [465, "id3"], [465, "id4"]], "set_exception_trace_mode": [[416, "set-exception-trace-mode"]], "set_min_base": [[417, "set-min-base"]], "set_min_denominator": [[418, "set-min-denominator"]], "set_nestable_mode": [[419, "set-nestable-mode"]], "set_queue_timeout": [[420, "set-queue-timeout"]], "set_shape_array_mode": [[421, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[422, "set-show-func-wrapper-trace-mode"]], "set_tmp_dir": [[423, "set-tmp-dir"]], "shape": [[424, "shape"]], "shape_array_mode": [[425, "shape-array-mode"]], "stable_divide": [[426, "stable-divide"]], "stable_pow": [[427, "stable-pow"]], "supports_inplace_updates": [[428, "supports-inplace-updates"]], "to_ivy_shape": [[429, "to-ivy-shape"]], "to_list": [[430, "to-list"]], "to_native_shape": [[431, "to-native-shape"]], "to_numpy": [[432, "to-numpy"]], "to_scalar": [[433, "to-scalar"]], "try_else_none": [[434, "try-else-none"]], "unset_array_mode": [[435, "unset-array-mode"]], "unset_exception_trace_mode": [[436, "unset-exception-trace-mode"]], "unset_nestable_mode": [[437, "unset-nestable-mode"]], "unset_queue_timeout": [[438, "unset-queue-timeout"]], "unset_shape_array_mode": [[439, "unset-shape-array-mode"]], "unset_show_func_wrapper_trace_mode": [[440, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[441, "value-is-nan"]], "vmap": [[442, "vmap"]], "adam_step": [[443, "adam-step"]], "adam_update": [[444, "adam-update"]], "execute_with_gradients": [[445, "execute-with-gradients"]], "grad": [[446, "grad"]], "gradient_descent_update": [[447, "gradient-descent-update"]], "jac": [[448, "jac"]], "lamb_update": [[449, "lamb-update"]], "lars_update": [[450, "lars-update"]], "optimizer_update": [[451, "optimizer-update"]], "set_with_grads": [[452, "set-with-grads"]], "stop_gradient": [[453, "stop-gradient"]], "unset_with_grads": [[454, "unset-with-grads"]], "value_and_grad": [[455, "value-and-grad"]], "with_grads": [[456, "with-grads"]], "Control flow ops": [[459, "control-flow-ops"]], "Data-dependent output shape": [[476, null], [476, null], [476, null], [476, null], [578, null], [579, null], [580, null], [581, null]], "conv": [[480, "conv"]], "conv1d": [[481, "conv1d"]], "conv1d_transpose": [[482, "conv1d-transpose"]], "conv2d": [[483, "conv2d"]], "conv2d_transpose": [[484, "conv2d-transpose"]], "conv3d": [[485, "conv3d"]], "conv3d_transpose": [[486, "conv3d-transpose"]], "conv_general_dilated": [[487, "conv-general-dilated"]], "conv_general_transpose": [[488, "conv-general-transpose"]], "depthwise_conv2d": [[489, "depthwise-conv2d"]], "dropout": [[490, "dropout"]], "linear": [[491, "linear"]], "lstm_update": [[492, "lstm-update"]], "multi_head_attention": [[493, "multi-head-attention"]], "scaled_dot_product_attention": [[494, "scaled-dot-product-attention"]], "cholesky": [[495, "cholesky"]], "cross": [[496, "cross"]], "det": [[497, "det"]], "diag": [[498, "diag"]], "diagonal": [[499, "diagonal"]], "eigh": [[501, "eigh"]], "eigvalsh": [[502, "eigvalsh"]], "inner": [[503, "inner"]], "inv": [[504, "inv"]], "lu_factor": [[505, "lu-factor"]], "matmul": [[506, "matmul"]], "matrix_norm": [[507, "matrix-norm"]], "matrix_power": [[508, "matrix-power"]], "matrix_rank": [[509, "matrix-rank"]], "matrix_transpose": [[510, "matrix-transpose"]], "outer": [[511, "outer"]], "pinv": [[512, "pinv"]], "qr": [[513, "qr"]], "slogdet": [[514, "slogdet"]], "solve": [[515, "solve"]], "svd": [[516, "svd"]], "svdvals": [[517, "svdvals"]], "tensordot": [[518, "tensordot"]], "tensorsolve": [[519, "tensorsolve"]], "trace": [[520, "trace"]], "vander": [[521, "vander"]], "vecdot": [[522, "vecdot"]], "vector_norm": [[523, "vector-norm"]], "vector_to_skew_symmetric_matrix": [[524, "vector-to-skew-symmetric-matrix"]], "binary_cross_entropy": [[525, "binary-cross-entropy"]], "cross_entropy": [[526, "cross-entropy"]], "sparse_cross_entropy": [[527, "sparse-cross-entropy"]], "clip": [[528, "clip"]], "concat": [[529, "concat"]], "constant_pad": [[530, "constant-pad"]], "expand_dims": [[531, "expand-dims"]], "flip": [[532, "flip"]], "permute_dims": [[533, "permute-dims"]], "repeat": [[534, "repeat"]], "reshape": [[535, "reshape"]], "roll": [[536, "roll"]], "split": [[537, "split"]], "squeeze": [[538, "squeeze"]], "stack": [[539, "stack"]], "swapaxes": [[540, "swapaxes"]], "tile": [[541, "tile"]], "unstack": [[542, "unstack"]], "zero_pad": [[543, "zero-pad"]], "fomaml_step": [[544, "fomaml-step"]], "maml_step": [[545, "maml-step"]], "reptile_step": [[546, "reptile-step"]], "all_nested_indices": [[547, "all-nested-indices"]], "copy_nest": [[548, "copy-nest"]], "duplicate_array_index_chains": [[549, "duplicate-array-index-chains"]], "index_nest": [[550, "index-nest"]], "insert_into_nest_at_index": [[551, "insert-into-nest-at-index"]], "insert_into_nest_at_indices": [[552, "insert-into-nest-at-indices"]], "map": [[553, "map"]], "map_nest_at_index": [[554, "map-nest-at-index"]], "map_nest_at_indices": [[555, "map-nest-at-indices"]], "multi_index_nest": [[556, "multi-index-nest"]], "nested_any": [[557, "nested-any"]], "nested_argwhere": [[558, "nested-argwhere"]], "nested_map": [[559, "nested-map"]], "nested_multi_map": [[560, "nested-multi-map"]], "prune_empty": [[561, "prune-empty"]], "prune_nest_at_index": [[562, "prune-nest-at-index"]], "prune_nest_at_indices": [[563, "prune-nest-at-indices"]], "set_nest_at_index": [[564, "set-nest-at-index"]], "set_nest_at_indices": [[565, "set-nest-at-indices"]], "layer_norm": [[566, "layer-norm"]], "multinomial": [[567, "multinomial"]], "randint": [[568, "randint"]], "random_normal": [[569, "random-normal"]], "random_uniform": [[570, "random-uniform"]], "seed": [[571, "seed"]], "shuffle": [[572, "shuffle"]], "argmax": [[573, "argmax"]], "argmin": [[574, "argmin"]], "argwhere": [[575, "argwhere"]], "nonzero": [[576, "nonzero"]], "where": [[577, "where"]], "unique_all": [[578, "unique-all"]], "unique_counts": [[579, "unique-counts"]], "unique_inverse": [[580, "unique-inverse"]], "unique_values": [[581, "unique-values"]], "argsort": [[582, "argsort"]], "searchsorted": [[583, "searchsorted"]], "sort": [[584, "sort"]], "cumprod": [[585, "cumprod"]], "cumsum": [[586, "cumsum"]], "einsum": [[587, "einsum"]], "max": [[588, "max"]], "mean": [[589, "mean"]], "min": [[590, "min"]], "prod": [[591, "prod"]], "std": [[592, "std"]], "sum": [[593, "sum"]], "var": [[594, "var"]], "all": [[595, "all"]], "any": [[596, "any"]], "Assertions": [[597, "module-ivy_tests.test_ivy.helpers.assertions"], [623, "module-ivy.utils.assertions"]], "Available frameworks": [[598, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Function testing": [[599, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[600, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[601, "hypothesis-helpers"]], "Array helpers": [[602, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Dtype helpers": [[603, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "General helpers": [[604, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Number helpers": [[605, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Structs": [[606, "module-ivy_tests.test_ivy.helpers.structs"]], "Test parameter flags": [[607, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Testing helpers": [[608, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Nested array": [[609, "nested-array"], [613, "module-ivy.nested_array.nested_array"]], "Framework classes": [[610, "framework-classes"]], "Utils": [[611, "utils"]], "Testing": [[612, "testing"]], "Converters": [[615, "module-ivy.stateful.converters"]], "Helpers": [[616, "module-ivy.stateful.helpers"]], "Initializers": [[617, "module-ivy.stateful.initializers"], [673, "initializers"]], "Module": [[619, "module-ivy.stateful.module"]], "Optimizers": [[621, "module-ivy.stateful.optimizers"], [673, "optimizers"]], "Sequential": [[622, "module-ivy.stateful.sequential"]], "Backend": [[624, "backend"]], "Ast helpers": [[625, "module-ivy.utils.backend.ast_helpers"]], "Handler": [[626, "module-ivy.utils.backend.handler"]], "Sub backend handler": [[627, "module-ivy.utils.backend.sub_backend_handler"]], "Dynamic import": [[628, "module-ivy.utils.dynamic_import"]], "Exceptions": [[629, "module-ivy.utils.exceptions"]], "Inspection": [[630, "module-ivy.utils.inspection"]], "Profiler": [[631, "module-ivy.utils.profiler"]], "Verbosity": [[632, "module-ivy.utils.verbosity"]], "Contents": [[633, "contents"]], "Ivy as a transpiler": [[633, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[633, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[633, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[633, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[633, "setting-up-ivy"]], "Installing using pip": [[633, "installing-using-pip"]], "Docker": [[633, "docker"]], "Installing from source": [[633, "installing-from-source"]], "Using Ivy": [[633, "using-ivy"]], "Documentation": [[633, "documentation"]], "Contributing": [[633, "contributing"], [638, "contributing"]], "Community": [[633, "community"]], "Citation": [[633, "citation"]], "Background": [[634, "background"]], "ML Explosion": [[635, "ml-explosion"]], "Standardization": [[636, "standardization"]], "Skepticism": [[636, "skepticism"]], "Complimentary vs Competitive": [[636, "complimentary-vs-competitive"]], "Do Standards Work?": [[636, "do-standards-work"]], "The Array API Standard": [[636, "the-array-api-standard"]], "Why Unify?": [[637, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[637, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[637, "infinite-shelf-life"]], "Applied Libraries": [[639, "applied-libraries"], [676, "applied-libraries"]], "Introduction": [[639, "introduction"], [663, "introduction"], [664, "introduction"]], "Example - Ivy Robot": [[639, "example-ivy-robot"]], "Building the Docs": [[640, "building-the-docs"]], "Building the Docs using Docker": [[640, "building-the-docs-using-docker"]], "Using convenience script": [[640, "using-convenience-script"]], "Using existing image on Docker Hub": [[640, "using-existing-image-on-docker-hub"]], "Building the image locally": [[640, "building-the-image-locally"]], "Building the Docs without Docker": [[640, "building-the-docs-without-docker"]], "Helpful Resources": [[641, "helpful-resources"]], "Open Tasks": [[642, "open-tasks"]], "Function Formatting": [[642, "function-formatting"]], "Formatting checklist": [[642, "formatting-checklist"]], "Frontend APIs": [[642, "frontend-apis"]], "Where to place a frontend function": [[642, "where-to-place-a-frontend-function"]], "Ivy Experimental API": [[642, "ivy-experimental-api"], [644, "id4"]], "Setting Up": [[643, "setting-up"]], "Forking and cloning the repo": [[643, "forking-and-cloning-the-repo"]], "PyCharm": [[643, "pycharm"]], "Virtual environments - No Docker": [[643, "virtual-environments-no-docker"]], "Using miniconda": [[643, "using-miniconda"]], "Using venv": [[643, "using-venv"]], "Docker Interpreter with PyCharm": [[643, "docker-interpreter-with-pycharm"]], "Windows": [[643, "windows"], [643, "id6"]], "MacOS": [[643, "macos"]], "Ubuntu": [[643, "ubuntu"], [643, "id8"]], "Setting Up Testing": [[643, "setting-up-testing"]], "More Detailed Hypothesis Logs": [[643, "more-detailed-hypothesis-logs"]], "Setting up for Free": [[643, "setting-up-for-free"]], "GitHub Codespaces": [[643, "github-codespaces"]], "Pre-Commit": [[643, "pre-commit"]], "The Basics": [[644, "the-basics"]], "Getting Help": [[644, "getting-help"]], "ToDo List Issues": [[644, "todo-list-issues"]], "Managing Your Fork": [[644, "managing-your-fork"]], "Who To Ask": [[644, "who-to-ask"]], "With Command Line:": [[644, "with-command-line"]], "With Browser:": [[644, "with-browser"]], "Pull Requests": [[644, "pull-requests"]], "Small Commits Often": [[644, "small-commits-often"]], "Interactive Ivy Docker Container": [[644, "interactive-ivy-docker-container"]], "Running Tests Locally": [[644, "running-tests-locally"]], "With Docker": [[644, "with-docker"]], "Getting the most out of IDE": [[644, "getting-the-most-out-of-ide"]], "with PyCharm": [[644, "with-pycharm"]], "Deep Dive": [[645, "deep-dive"]], "Array API Tests": [[646, "array-api-tests"], [651, "array-api-tests"]], "Running the Tests": [[646, "running-the-tests"]], "Using Terminal": [[646, "using-terminal"]], "Using the IDE": [[646, "using-the-ide"]], "Regenerating Test Failures": [[646, "regenerating-test-failures"]], "Test Skipping": [[646, "test-skipping"]], "Arrays": [[647, "arrays"]], "Native Array": [[647, "native-array"]], "Ivy Array": [[647, "ivy-array"], [671, "ivy-array"]], "Array Handling": [[647, "array-handling"]], "Integrating custom classes with Ivy": [[647, "integrating-custom-classes-with-ivy"]], "Backend Setting": [[648, "backend-setting"]], "Backend and Frontend Version Support": [[648, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[649, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[649, "how-the-doc-builder-is-being-run"]], "The convenience script": [[649, "the-convenience-script"]], "Options": [[649, "options"]], "The Docker image": [[649, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[649, "how-ivy-s-docs-is-structured"]], "index.rst": [[649, "index-rst"]], "partial_conf.py": [[649, "partial-conf-py"]], "prebuild.sh": [[649, "prebuild-sh"]], "Custom Extensions": [[649, "custom-extensions"]], "custom_autosummary": [[649, "custom-autosummary"]], ":hide-table:": [[649, "hide-table"]], ":include:": [[649, "include"]], ":fix-directory:": [[649, "fix-directory"]], ":substitute-caption:": [[649, "substitute-caption"]], "custom_builder": [[649, "custom-builder"]], "discussion_linker": [[649, "discussion-linker"]], "skippable_function": [[649, "skippable-function"]], "Containers": [[650, "containers"]], "Container Instance Methods": [[650, "container-instance-methods"]], "Container Static Methods": [[650, "container-static-methods"]], "API Static Methods": [[650, "api-static-methods"]], "API Instance Methods": [[650, "api-instance-methods"]], "API Special Methods": [[650, "api-special-methods"]], "Nestable Functions": [[650, "nestable-functions"], [658, "nestable-functions"], [659, "nestable-functions"]], "Continuous Integration": [[651, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[651, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[651, "ivy-tests"], [665, "ivy-tests"]], "Implementation": [[651, "implementation"]], "A Top-Down View": [[651, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[651, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[651, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[651, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[651, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[651, "determine-test-coverage-workflow"]], "Multiple Runners": [[651, "multiple-runners"]], "Race Condition": [[651, "race-condition"]], "Periodic Testing": [[651, "periodic-testing"]], "Manually Dispatched Workflows": [[651, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[651, "ci-pipeline"]], "Push": [[651, "push"]], "Pull Request": [[651, "pull-request"]], "Dashboard": [[651, "dashboard"]], "Data Types": [[652, "data-types"]], "Data Type Module": [[652, "data-type-module"]], "Data Type Promotion": [[652, "data-type-promotion"]], "Arguments in other Functions": [[652, "arguments-in-other-functions"], [653, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[652, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[652, "backend-data-type-bugs"]], "Superset Data Type Support": [[652, "superset-data-type-support"]], "Devices": [[653, "devices"]], "Device Module": [[653, "device-module"]], "Docstring Examples": [[654, "docstring-examples"]], "ivy.tan": [[654, "ivy-tan"]], "ivy.roll": [[654, "ivy-roll"]], "ivy.add": [[654, "ivy-add"]], "Docstrings": [[655, "docstrings"]], "Exception Handling": [[656, "exception-handling"]], "Ivy Exception Class": [[656, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[656, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[656, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[656, "handle-exceptions-decorator"]], "Assertion Function": [[656, "assertion-function"]], "Formatting": [[657, "formatting"]], "Lint Checks": [[657, "lint-checks"]], "Pre-Commit Hook": [[657, "pre-commit-hook"]], "Function Arguments": [[658, "function-arguments"]], "Positional and Keyword Arguments": [[658, "positional-and-keyword-arguments"]], "Input Arrays": [[658, "input-arrays"]], "out Argument": [[658, "out-argument"]], "dtype and device arguments": [[658, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[658, "numbers-in-operator-functions"]], "Integer Sequences": [[658, "integer-sequences"]], "Function Types": [[659, "function-types"]], "Primary Functions": [[659, "primary-functions"]], "Compositional Functions": [[659, "compositional-functions"]], "Mixed Functions": [[659, "mixed-functions"]], "Standalone Functions": [[659, "standalone-functions"]], "Convenience Functions": [[659, "convenience-functions"]], "Function Wrapping": [[660, "function-wrapping"]], "Overview": [[661, "overview"]], "Example Usage of the Gradient API": [[661, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[661, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[661, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[661, "custom-gradient-functions"]], "Design of the Gradient API": [[661, "design-of-the-gradient-api"]], "Our policy on gradients": [[661, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[661, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[661, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[661, "framework-specific-considerations"]], "Inplace Updates": [[662, "inplace-updates"]], "out argument": [[662, "out-argument"]], "Views": [[662, "views"]], "copy argument": [[662, "copy-argument"]], "Ivy Frontends": [[663, "ivy-frontends"]], "The Frontend Basics": [[663, "the-frontend-basics"]], "Writing Frontend Functions": [[663, "writing-frontend-functions"]], "Unused Arguments": [[663, "unused-arguments"]], "Compositions": [[663, "compositions"]], "Missing Ivy Functions": [[663, "missing-ivy-functions"]], "Temporary Compositions": [[663, "temporary-compositions"]], "Supported Data Types and Devices": [[663, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[663, "id6"]], "Frontend Data Type Promotion Rules": [[663, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[663, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[663, "frontends-duplicate-policy"]], "Ivy Frontend Tests": [[664, "ivy-frontend-tests"]], "Frontend Test Examples": [[664, "frontend-test-examples"]], "ivy.tan()": [[664, "ivy-tan"]], "ivy.full()": [[664, "ivy-full"]], "Testing Without Using Tests Values": [[664, "testing-without-using-tests-values"]], "Alias functions": [[664, "alias-functions"]], "Frontend Instance Method Tests": [[664, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[664, "frontend-instance-method-test-examples"]], "ivy.add()": [[664, "ivy-add"]], "Hypothesis Helpers": [[664, "hypothesis-helpers"]], "Testing Pipeline": [[665, "testing-pipeline"]], "Hypothesis": [[665, "id2"]], "Data Generation": [[665, "id3"]], "Writing your own strategy": [[665, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[665, "writing-hypothesis-test"]], "Ivy Test Decorators": [[665, "ivy-test-decorators"]], "Writing Ivy Tests": [[665, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[665, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[665, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[665, "how-to-write-hypothesis-tests-effectively"]], "Bonus: Hypothesis\u2019 Extended Features": [[665, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[665, "self-consistent-and-explicit-testing"]], "test_array_function": [[665, "id6"]], "Running Ivy Tests": [[665, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[665, "re-running-failed-ivy-tests"]], "Navigating the Code": [[666, "navigating-the-code"]], "Categorization": [[666, "categorization"]], "Submodule Design": [[666, "submodule-design"]], "Ivy API": [[666, "ivy-api"]], "Backend API": [[666, "backend-api"]], "Submodule Helper Functions": [[666, "submodule-helper-functions"]], "Version Pinning": [[666, "version-pinning"]], "Superset Behaviour": [[667, "superset-behaviour"]], "Extending the Standard": [[667, "extending-the-standard"]], "What is the Superset?": [[667, "what-is-the-superset"]], "A Non-Duplicate Superset": [[667, "a-non-duplicate-superset"]], "What is not the Superset?": [[667, "what-is-not-the-superset"]], "When the Superset is Too Much": [[667, "when-the-superset-is-too-much"]], "Balancing Generalization with Efficiency": [[667, "balancing-generalization-with-efficiency"]], "More Examples": [[667, "more-examples"]], "Maximizing Usage of Native Functionality": [[667, "maximizing-usage-of-native-functionality"]], "Design": [[668, "design"]], "Building Blocks": [[669, "building-blocks"]], "Backend Functional APIs \u2705": [[669, "backend-functional-apis"]], "Ivy Functional API \u2705": [[669, "ivy-functional-api"]], "Backend Handler \u2705": [[669, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[669, "graph-compiler"]], "Ivy as a Framework": [[670, "ivy-as-a-framework"]], "The Array Class": [[671, "the-array-class"]], "Unifying Operators": [[671, "unifying-operators"]], "API Monkey Patching": [[671, "api-monkey-patching"]], "Instance Methods": [[671, "instance-methods"]], "Ivy Container": [[672, "ivy-container"]], "Construction": [[672, "construction"]], "Representation": [[672, "representation"]], "Recursive Methods": [[672, "recursive-methods"]], "Built-ins": [[672, "built-ins"]], "Access": [[672, "access"]], "Saving and Loading": [[672, "saving-and-loading"]], "Comparisons": [[672, "comparisons"]], "Customized Representations": [[672, "customized-representations"]], "Use Cases": [[672, "use-cases"]], "Compartmentalization": [[672, "compartmentalization"]], "Configuration": [[672, "configuration"]], "Data loading": [[672, "data-loading"]], "Network weights": [[672, "network-weights"]], "Ivy Stateful API": [[673, "ivy-stateful-api"]], "Modules": [[673, "modules"]], "Ivy as a Transpiler": [[674, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[674, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[674, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[674, "converting-network-models"]], "Extensions": [[675, "extensions"]], "Ivy Mechanics": [[676, "ivy-mechanics"]], "Ivy Vision": [[676, "ivy-vision"]], "Ivy Robot": [[676, "ivy-robot"]], "Ivy Gym": [[676, "ivy-gym"]], "Ivy Memory": [[676, "ivy-memory"]], "FAQ": [[677, "faq"]], "Maintaining Backend Versions": [[677, "maintaining-backend-versions"]], "Dynamic Sizes": [[677, "dynamic-sizes"]], "Type and Shape Checking": [[677, "type-and-shape-checking"]], "GPU handling": [[677, "gpu-handling"]], "Model Deployment": [[677, "model-deployment"]], "Dynamic Control Flow": [[677, "dynamic-control-flow"]], "Auto-Differentiation": [[677, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[677, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[677, "support-for-functions"]], "Alternative Data Structures": [[677, "alternative-data-structures"]], "Custom Operations": [[677, "custom-operations"]], "The Pipeline": [[677, "the-pipeline"]], "State": [[677, "state"]], "Glossary": [[678, "glossary"]], "Related Work": [[679, "related-work"]], "API Standards": [[680, "api-standards"], [689, "api-standards"]], "Array API Standard": [[680, "id1"]], "Compiler Infrastructure": [[681, "compiler-infrastructure"], [689, "compiler-infrastructure"]], "LLVM": [[681, "id1"]], "MLIR": [[681, "id2"]], "OneAPI": [[681, "id3"]], "Exchange Formats": [[682, "exchange-formats"], [689, "exchange-formats"]], "ONNX onnx": [[682, "onnx-onnx"]], "NNEF nnef": [[682, "nnef-nnef"]], "CoreML coreml": [[682, "coreml-coreml"]], "Frameworks": [[683, "frameworks"], [689, "frameworks"]], "MATLAB matlab": [[683, "matlab-matlab"]], "SciPy scipy": [[683, "scipy-scipy"]], "Torch torch": [[683, "torch-torch"]], "NumPy numpy": [[683, "numpy-numpy"]], "SciKit Learn scikit-learn": [[683, "scikit-learn-scikit-learn"]], "Theano theano": [[683, "theano-theano"]], "Pandas pandas": [[683, "pandas-pandas"]], "Julia julia": [[683, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[683, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[683, "caffe-caffe"]], "Chainer chainer": [[683, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[683, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[683, "mxnet-mxnet"]], "CNTK cntk": [[683, "cntk-cntk"]], "PyTorch pytorch": [[683, "pytorch-pytorch"]], "Flux flux": [[683, "flux-flux"]], "JAX jax": [[683, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[683, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[683, "dex-language-dex-language"]], "Graph Tracers": [[684, "graph-tracers"], [689, "graph-tracers"]], "tf.Graph": [[684, "tf-graph"]], "Jaxpr": [[684, "jaxpr"]], "torch.jit": [[684, "torch-jit"]], "torch.fx": [[684, "torch-fx"]], "ML-Unifying Companies": [[685, "ml-unifying-companies"], [689, "ml-unifying-companies"]], "Quansight": [[685, "id1"]], "Modular": [[685, "id2"]], "OctoML": [[685, "id3"]], "Multi-Vendor Compiler Frameworks": [[686, "multi-vendor-compiler-frameworks"], [689, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[686, "apache-tvm"]], "XLA": [[686, "xla"]], "GCC": [[686, "gcc"]], "Vendor-Specific APIs": [[687, "vendor-specific-apis"], [689, "vendor-specific-apis"]], "TensorRT tensorrt": [[687, "tensorrt-tensorrt"]], "CUDA cuda": [[687, "cuda-cuda"]], "Vendor-Specific Compilers": [[688, "vendor-specific-compilers"], [689, "vendor-specific-compilers"]], "ICC": [[688, "id1"]], "ICX": [[688, "icx"]], "NVCC": [[688, "nvcc"]], "What does Ivy Add?": [[689, "what-does-ivy-add"]], "Wrapper Frameworks": [[689, "wrapper-frameworks"], [690, "wrapper-frameworks"]], "EagerPy eagerpy": [[690, "eagerpy-eagerpy"]], "Keras keras": [[690, "keras-keras"]], "Thinc thinc": [[690, "thinc-thinc"]], "TensorLy tensorly": [[690, "tensorly-tensorly"]], "NeuroPod": [[690, "id1"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [1, "ivy.transpile"], [1, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[1, "ivy.transpile"]], "ivy.unify()": [[1, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "ivy.data_classes.array.activations": [[2, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[2, "module-ivy.data_classes.array.activations"], [3, "module-ivy.data_classes.array.conversions"], [4, "module-ivy.data_classes.array.creation"], [5, "module-ivy.data_classes.array.data_type"], [6, "module-ivy.data_classes.array.device"], [7, "module-ivy.data_classes.array.elementwise"], [8, "module-ivy.data_classes.array.experimental"], [8, "module-ivy.data_classes.array.experimental.activations"], [8, "module-ivy.data_classes.array.experimental.conversions"], [8, "module-ivy.data_classes.array.experimental.creation"], [8, "module-ivy.data_classes.array.experimental.data_type"], [8, "module-ivy.data_classes.array.experimental.device"], [8, "module-ivy.data_classes.array.experimental.elementwise"], [8, "module-ivy.data_classes.array.experimental.general"], [8, "module-ivy.data_classes.array.experimental.gradients"], [8, "module-ivy.data_classes.array.experimental.image"], [8, "module-ivy.data_classes.array.experimental.layers"], [8, "module-ivy.data_classes.array.experimental.linear_algebra"], [8, "module-ivy.data_classes.array.experimental.losses"], [8, "module-ivy.data_classes.array.experimental.manipulation"], [8, "module-ivy.data_classes.array.experimental.norms"], [8, "module-ivy.data_classes.array.experimental.random"], [8, "module-ivy.data_classes.array.experimental.searching"], [8, "module-ivy.data_classes.array.experimental.set"], [8, "module-ivy.data_classes.array.experimental.sorting"], [8, "module-ivy.data_classes.array.experimental.statistical"], [8, "module-ivy.data_classes.array.experimental.utility"], [9, "module-ivy.data_classes.array.general"], [10, "module-ivy.data_classes.array.gradients"], [11, "module-ivy.data_classes.array.image"], [12, "module-ivy.data_classes.array.layers"], [13, "module-ivy.data_classes.array.linear_algebra"], [14, "module-ivy.data_classes.array.losses"], [15, "module-ivy.data_classes.array.manipulation"], [16, "module-ivy.data_classes.array.norms"], [17, "module-ivy.data_classes.array.random"], [18, "module-ivy.data_classes.array.searching"], [19, "module-ivy.data_classes.array.set"], [20, "module-ivy.data_classes.array.sorting"], [21, "module-ivy.data_classes.array.statistical"], [22, "module-ivy.data_classes.array.utility"], [23, "module-ivy.data_classes.array.wrapping"], [24, "module-ivy.data_classes.container.activations"], [25, "module-ivy.data_classes.container.base"], [26, "module-ivy.data_classes.container.conversions"], [27, "module-ivy.data_classes.container.creation"], [28, "module-ivy.data_classes.container.data_type"], [29, "module-ivy.data_classes.container.device"], [30, "module-ivy.data_classes.container.elementwise"], [31, "module-ivy.data_classes.container.experimental"], [31, "module-ivy.data_classes.container.experimental.activations"], [31, "module-ivy.data_classes.container.experimental.conversions"], [31, "module-ivy.data_classes.container.experimental.creation"], [31, "module-ivy.data_classes.container.experimental.data_type"], [31, "module-ivy.data_classes.container.experimental.device"], [31, "module-ivy.data_classes.container.experimental.elementwise"], [31, "module-ivy.data_classes.container.experimental.general"], [31, "module-ivy.data_classes.container.experimental.gradients"], [31, "module-ivy.data_classes.container.experimental.image"], [31, "module-ivy.data_classes.container.experimental.layers"], [31, "module-ivy.data_classes.container.experimental.linear_algebra"], [31, "module-ivy.data_classes.container.experimental.losses"], [31, "module-ivy.data_classes.container.experimental.manipulation"], [31, "module-ivy.data_classes.container.experimental.norms"], [31, "module-ivy.data_classes.container.experimental.random"], [31, "module-ivy.data_classes.container.experimental.searching"], [31, "module-ivy.data_classes.container.experimental.set"], [31, "module-ivy.data_classes.container.experimental.sorting"], [31, "module-ivy.data_classes.container.experimental.statistical"], [31, "module-ivy.data_classes.container.experimental.utility"], [32, "module-ivy.data_classes.container.general"], [33, "module-ivy.data_classes.container.gradients"], [34, "module-ivy.data_classes.container.image"], [35, "module-ivy.data_classes.container.layers"], [36, "module-ivy.data_classes.container.linear_algebra"], [37, "module-ivy.data_classes.container.losses"], [38, "module-ivy.data_classes.container.manipulation"], [39, "module-ivy.data_classes.container.norms"], [40, "module-ivy.data_classes.container.random"], [41, "module-ivy.data_classes.container.searching"], [42, "module-ivy.data_classes.container.set"], [43, "module-ivy.data_classes.container.sorting"], [44, "module-ivy.data_classes.container.statistical"], [45, "module-ivy.data_classes.container.utility"], [46, "module-ivy.data_classes.container.wrapping"], [47, "module-ivy.data_classes.array.array"], [48, "module-ivy.data_classes.container.container"], [267, "module-ivy.functional.ivy.experimental.activations"], [268, "module-ivy.functional.ivy.experimental.constants"], [269, "module-ivy.functional.ivy.experimental.creation"], [270, "module-ivy.functional.ivy.experimental.data_type"], [271, "module-ivy.functional.ivy.experimental.device"], [272, "module-ivy.functional.ivy.experimental.elementwise"], [273, "module-ivy.functional.ivy.experimental.general"], [274, "module-ivy.functional.ivy.experimental.gradients"], [275, "module-ivy.functional.ivy.experimental.layers"], [276, "module-ivy.functional.ivy.experimental.linear_algebra"], [277, "module-ivy.functional.ivy.experimental.losses"], [278, "module-ivy.functional.ivy.experimental.manipulation"], [279, "module-ivy.functional.ivy.experimental.meta"], [280, "module-ivy.functional.ivy.experimental.nest"], [281, "module-ivy.functional.ivy.experimental.norms"], [282, "module-ivy.functional.ivy.experimental.random"], [283, "module-ivy.functional.ivy.experimental.searching"], [284, "module-ivy.functional.ivy.experimental.set"], [285, "module-ivy.functional.ivy.experimental.sorting"], [286, "module-ivy.functional.ivy.experimental.sparse_array"], [287, "module-ivy.functional.ivy.experimental.statistical"], [288, "module-ivy.functional.ivy.experimental.utility"], [457, "module-ivy.functional.ivy.activations"], [458, "module-ivy.functional.ivy.constants"], [459, "module-ivy.functional.ivy.control_flow_ops"], [460, "module-ivy.functional.ivy.creation"], [461, "module-ivy.functional.ivy.data_type"], [462, "module-ivy.functional.ivy.device"], [463, "module-ivy.functional.ivy.elementwise"], [464, "module-ivy.functional.ivy.experimental"], [465, "module-ivy.functional.ivy.general"], [466, "module-ivy.functional.ivy.gradients"], [467, "module-ivy.functional.ivy.layers"], [468, "module-ivy.functional.ivy.linear_algebra"], [469, "module-ivy.functional.ivy.losses"], [470, "module-ivy.functional.ivy.manipulation"], [471, "module-ivy.functional.ivy.meta"], [472, "module-ivy.functional.ivy.nest"], [473, "module-ivy.functional.ivy.norms"], [474, "module-ivy.functional.ivy.random"], [475, "module-ivy.functional.ivy.searching"], [476, "module-ivy.functional.ivy.set"], [477, "module-ivy.functional.ivy.sorting"], [478, "module-ivy.functional.ivy.statistical"], [479, "module-ivy.functional.ivy.utility"], [597, "module-ivy_tests.test_ivy.helpers.assertions"], [598, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [599, "module-ivy_tests.test_ivy.helpers.function_testing"], [600, "module-ivy_tests.test_ivy.helpers.globals"], [601, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [602, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [603, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [604, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [605, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [606, "module-ivy_tests.test_ivy.helpers.structs"], [607, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [608, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [613, "module-ivy.nested_array.nested_array"], [614, "module-ivy.stateful.activations"], [615, "module-ivy.stateful.converters"], [616, "module-ivy.stateful.helpers"], [617, "module-ivy.stateful.initializers"], [618, "module-ivy.stateful.layers"], [619, "module-ivy.stateful.module"], [620, "module-ivy.stateful.norms"], [621, "module-ivy.stateful.optimizers"], [622, "module-ivy.stateful.sequential"], [623, "module-ivy.utils.assertions"], [624, "module-ivy.utils.backend"], [625, "module-ivy.utils.backend.ast_helpers"], [626, "module-ivy.utils.backend.handler"], [627, "module-ivy.utils.backend.sub_backend_handler"], [628, "module-ivy.utils.dynamic_import"], [629, "module-ivy.utils.exceptions"], [630, "module-ivy.utils.inspection"], [631, "module-ivy.utils.profiler"], [632, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[3, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[4, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[5, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[6, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[6, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[6, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[7, "module-ivy.data_classes.array.elementwise"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.angle"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cov"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gcd() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[8, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[8, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[8, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[8, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[8, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[8, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[8, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[8, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[8, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[8, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[8, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[8, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[8, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[8, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[8, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[8, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[8, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[8, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[8, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[8, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trapz() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.trapz"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[9, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[10, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[11, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[11, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[11, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[12, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[13, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[14, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[15, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[16, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[17, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[17, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[17, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[18, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[19, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[19, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[19, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[20, "module-ivy.data_classes.array.sorting"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[21, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[22, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[23, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "ivy.data_classes.container.activations": [[24, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[25, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[25, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[26, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[27, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[28, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[29, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[29, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[30, "module-ivy.data_classes.container.elementwise"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.angle"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.binary_cross_entropy_with_logits"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cov"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "frombuffer() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.frombuffer"]], "gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[31, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[31, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[31, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[31, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[31, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[31, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[31, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[31, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[31, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[31, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[31, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[31, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[31, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[31, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[31, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[31, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[31, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[31, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[31, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[31, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_angle"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.static_binary_cross_entropy_with_logits"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_exp2"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_fft"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmin"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_frombuffer() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_frombuffer"]], "static_gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gcd"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_imag"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lcm"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_logaddexp2"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_msort"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nan_to_num"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_real"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_triu_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.triu_indices"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[32, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[33, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[34, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[34, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[34, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[35, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[36, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[37, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[38, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[39, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[40, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[40, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[41, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[42, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[42, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[42, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[43, "module-ivy.data_classes.container.sorting"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[44, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[45, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[46, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[47, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__xor__"]], "base (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dynamic_backend"]], "itemsize (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[47, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.size"]], "container (class in ivy.data_classes.container.container)": [[48, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[48, "module-ivy.data_classes.container.container"]], "deserialize() (in module ivy)": [[51, "ivy.deserialize"], [457, "ivy.deserialize"]], "gelu() (in module ivy)": [[52, "ivy.gelu"], [457, "ivy.gelu"]], "gelu() (ivy.array method)": [[52, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[52, "ivy.Container.gelu"]], "get() (in module ivy)": [[53, "ivy.get"], [457, "ivy.get"]], "get() (ivy.container method)": [[53, "ivy.Container.get"]], "leaky_relu() (in module ivy)": [[54, "ivy.leaky_relu"], [457, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[54, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[54, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[55, "ivy.log_softmax"], [457, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[55, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[55, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[56, "ivy.mish"], [457, "ivy.mish"]], "mish() (ivy.array method)": [[56, "ivy.Array.mish"]], "mish() (ivy.container method)": [[56, "ivy.Container.mish"]], "relu() (in module ivy)": [[57, "ivy.relu"], [457, "ivy.relu"]], "relu() (ivy.array method)": [[57, "ivy.Array.relu"]], "relu() (ivy.container method)": [[57, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[58, "ivy.sigmoid"], [457, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[58, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[58, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[59, "ivy.softmax"], [457, "ivy.softmax"]], "softmax() (ivy.array method)": [[59, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[59, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[60, "ivy.softplus"], [457, "ivy.softplus"]], "softplus() (ivy.array method)": [[60, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[60, "ivy.Container.softplus"]], "ifelse() (in module ivy)": [[61, "ivy.IfElse"], [459, "ivy.IfElse"]], "whileloop() (in module ivy)": [[62, "ivy.WhileLoop"], [459, "ivy.WhileLoop"]], "if_else() (in module ivy)": [[63, "ivy.if_else"], [459, "ivy.if_else"]], "while_loop() (in module ivy)": [[64, "ivy.while_loop"], [459, "ivy.while_loop"]], "arange() (in module ivy)": [[65, "ivy.arange"], [460, "ivy.arange"]], "array() (in module ivy)": [[66, "ivy.array"], [460, "ivy.array"]], "asarray() (in module ivy)": [[67, "ivy.asarray"], [460, "ivy.asarray"]], "asarray() (ivy.array method)": [[67, "ivy.Array.asarray"]], "asarray_handle_nestable() (in module ivy)": [[68, "ivy.asarray_handle_nestable"], [460, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[69, "ivy.asarray_infer_device"], [460, "ivy.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[70, "ivy.asarray_to_native_arrays_and_back"], [460, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[71, "ivy.copy_array"], [460, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[71, "ivy.Array.copy_array"]], "empty() (in module ivy)": [[72, "ivy.empty"], [460, "ivy.empty"]], "empty_like() (in module ivy)": [[73, "ivy.empty_like"], [460, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[73, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[73, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[74, "ivy.eye"], [460, "ivy.eye"]], "from_dlpack() (in module ivy)": [[75, "ivy.from_dlpack"], [460, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[75, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[75, "ivy.Container.from_dlpack"]], "full() (in module ivy)": [[76, "ivy.full"], [460, "ivy.full"]], "full_like() (in module ivy)": [[77, "ivy.full_like"], [460, "ivy.full_like"]], "full_like() (ivy.array method)": [[77, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[77, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[78, "ivy.linspace"], [460, "ivy.linspace"]], "linspace() (ivy.array method)": [[78, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[78, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[79, "ivy.logspace"], [460, "ivy.logspace"]], "logspace() (ivy.array method)": [[79, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[79, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[80, "ivy.meshgrid"], [460, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[80, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[80, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[81, "ivy.native_array"], [460, "ivy.native_array"]], "native_array() (ivy.array method)": [[81, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[81, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[82, "ivy.one_hot"], [460, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[82, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[82, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[83, "ivy.ones"], [460, "ivy.ones"]], "ones_like() (in module ivy)": [[84, "ivy.ones_like"], [460, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[84, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[84, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[85, "ivy.tril"], [460, "ivy.tril"]], "tril() (ivy.array method)": [[85, "ivy.Array.tril"]], "tril() (ivy.container method)": [[85, "ivy.Container.tril"]], "triu() (in module ivy)": [[86, "ivy.triu"], [460, "ivy.triu"]], "triu() (ivy.array method)": [[86, "ivy.Array.triu"]], "triu() (ivy.container method)": [[86, "ivy.Container.triu"]], "zeros() (in module ivy)": [[87, "ivy.zeros"], [460, "ivy.zeros"]], "zeros_like() (in module ivy)": [[88, "ivy.zeros_like"], [460, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[88, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[88, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[89, "ivy.as_ivy_dtype"], [461, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[90, "ivy.as_native_dtype"], [461, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[91, "ivy.astype"], [461, "ivy.astype"]], "astype() (ivy.array method)": [[91, "ivy.Array.astype"]], "astype() (ivy.container method)": [[91, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[92, "ivy.broadcast_arrays"], [461, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[92, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[92, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[93, "ivy.broadcast_to"], [461, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[93, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[93, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[94, "ivy.can_cast"], [461, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[94, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[94, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[95, "ivy.check_float"], [461, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[96, "ivy.closest_valid_dtype"], [461, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[97, "ivy.default_complex_dtype"], [461, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[98, "ivy.default_dtype"], [461, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[99, "ivy.default_float_dtype"], [461, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[100, "ivy.default_int_dtype"], [461, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[101, "ivy.default_uint_dtype"], [461, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[102, "ivy.dtype"], [461, "ivy.dtype"]], "dtype() (ivy.array method)": [[102, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[102, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[103, "ivy.dtype_bits"], [461, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[104, "ivy.finfo"], [461, "ivy.finfo"]], "finfo() (ivy.array method)": [[104, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[104, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[105, "ivy.function_supported_dtypes"], [461, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[106, "ivy.function_unsupported_dtypes"], [461, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[107, "ivy.iinfo"], [461, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[107, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[107, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[108, "ivy.infer_default_dtype"], [461, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[109, "ivy.invalid_dtype"], [461, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[110, "ivy.is_bool_dtype"], [461, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[110, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[110, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[111, "ivy.is_complex_dtype"], [461, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[111, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[112, "ivy.is_float_dtype"], [461, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[112, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[112, "ivy.Container.is_float_dtype"]], "is_int_dtype() (in module ivy)": [[113, "ivy.is_int_dtype"], [461, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[113, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[113, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[114, "ivy.is_native_dtype"], [461, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[115, "ivy.is_uint_dtype"], [461, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[115, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[115, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[116, "ivy.promote_types"], [461, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[117, "ivy.promote_types_of_inputs"], [461, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[118, "ivy.result_type"], [461, "ivy.result_type"]], "result_type() (ivy.array method)": [[118, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[118, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[119, "ivy.set_default_complex_dtype"], [461, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[120, "ivy.set_default_dtype"], [461, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[121, "ivy.set_default_float_dtype"], [461, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[122, "ivy.set_default_int_dtype"], [461, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[123, "ivy.set_default_uint_dtype"], [461, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[124, "ivy.type_promote_arrays"], [461, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[125, "ivy.unset_default_complex_dtype"], [461, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[126, "ivy.unset_default_dtype"], [461, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[127, "ivy.unset_default_float_dtype"], [461, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[128, "ivy.unset_default_int_dtype"], [461, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[129, "ivy.unset_default_uint_dtype"], [461, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[130, "ivy.valid_dtype"], [461, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[131, "ivy.as_ivy_dev"], [462, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[132, "ivy.as_native_dev"], [462, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[133, "ivy.clear_cached_mem_on_dev"], [462, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[134, "ivy.default_device"], [462, "ivy.default_device"]], "dev() (in module ivy)": [[135, "ivy.dev"], [462, "ivy.dev"]], "dev() (ivy.array method)": [[135, "ivy.Array.dev"]], "dev() (ivy.container method)": [[135, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[136, "ivy.dev_util"], [462, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[137, "ivy.function_supported_devices"], [462, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[138, "ivy.function_unsupported_devices"], [462, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[139, "ivy.get_all_ivy_arrays_on_dev"], [462, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[140, "ivy.gpu_is_available"], [462, "ivy.gpu_is_available"]], "num_cpu_cores() (in module ivy)": [[141, "ivy.num_cpu_cores"], [462, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[142, "ivy.num_gpus"], [462, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[143, "ivy.num_ivy_arrays_on_dev"], [462, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[144, "ivy.percent_used_mem_on_dev"], [462, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[145, "ivy.print_all_ivy_arrays_on_dev"], [462, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[146, "ivy.set_default_device"], [462, "ivy.set_default_device"]], "set_split_factor() (in module ivy)": [[147, "ivy.set_split_factor"], [462, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[148, "ivy.split_factor"], [462, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[149, "ivy.split_func_call"], [462, "ivy.split_func_call"]], "to_device() (in module ivy)": [[150, "ivy.to_device"], [462, "ivy.to_device"]], "to_device() (ivy.array method)": [[150, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[150, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[151, "ivy.total_mem_on_dev"], [462, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[152, "ivy.tpu_is_available"], [462, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[153, "ivy.unset_default_device"], [462, "ivy.unset_default_device"]], "used_mem_on_dev() (in module ivy)": [[154, "ivy.used_mem_on_dev"], [462, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[155, "ivy.abs"], [463, "ivy.abs"]], "abs() (ivy.array method)": [[155, "ivy.Array.abs"]], "abs() (ivy.container method)": [[155, "ivy.Container.abs"]], "acos() (in module ivy)": [[156, "ivy.acos"], [463, "ivy.acos"]], "acos() (ivy.array method)": [[156, "ivy.Array.acos"]], "acos() (ivy.container method)": [[156, "ivy.Container.acos"]], "acosh() (in module ivy)": [[157, "ivy.acosh"], [463, "ivy.acosh"]], "acosh() (ivy.array method)": [[157, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[157, "ivy.Container.acosh"]], "add() (in module ivy)": [[158, "ivy.add"], [463, "ivy.add"]], "add() (ivy.array method)": [[158, "ivy.Array.add"]], "add() (ivy.container method)": [[158, "ivy.Container.add"]], "asin() (in module ivy)": [[159, "ivy.asin"], [463, "ivy.asin"]], "asin() (ivy.array method)": [[159, "ivy.Array.asin"]], "asin() (ivy.container method)": [[159, "ivy.Container.asin"]], "asinh() (in module ivy)": [[160, "ivy.asinh"], [463, "ivy.asinh"]], "asinh() (ivy.array method)": [[160, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[160, "ivy.Container.asinh"]], "atan() (in module ivy)": [[161, "ivy.atan"], [463, "ivy.atan"]], "atan() (ivy.array method)": [[161, "ivy.Array.atan"]], "atan() (ivy.container method)": [[161, "ivy.Container.atan"]], "atan2() (in module ivy)": [[162, "ivy.atan2"], [463, "ivy.atan2"]], "atan2() (ivy.array method)": [[162, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[162, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[163, "ivy.atanh"], [463, "ivy.atanh"]], "atanh() (ivy.array method)": [[163, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[163, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[164, "ivy.bitwise_and"], [463, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[164, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[164, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[165, "ivy.bitwise_invert"], [463, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[165, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[165, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[166, "ivy.bitwise_left_shift"], [463, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[166, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[166, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[167, "ivy.bitwise_or"], [463, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[167, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[167, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[168, "ivy.bitwise_right_shift"], [463, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[168, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[168, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[169, "ivy.bitwise_xor"], [463, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[169, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[169, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[170, "ivy.ceil"], [463, "ivy.ceil"]], "ceil() (ivy.array method)": [[170, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[170, "ivy.Container.ceil"]], "cos() (in module ivy)": [[171, "ivy.cos"], [463, "ivy.cos"]], "cos() (ivy.array method)": [[171, "ivy.Array.cos"]], "cos() (ivy.container method)": [[171, "ivy.Container.cos"]], "cosh() (in module ivy)": [[172, "ivy.cosh"], [463, "ivy.cosh"]], "cosh() (ivy.array method)": [[172, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[172, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[173, "ivy.deg2rad"], [463, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[173, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[173, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[174, "ivy.divide"], [463, "ivy.divide"]], "divide() (ivy.array method)": [[174, "ivy.Array.divide"]], "divide() (ivy.container method)": [[174, "ivy.Container.divide"]], "equal() (in module ivy)": [[175, "ivy.equal"], [463, "ivy.equal"]], "equal() (ivy.array method)": [[175, "ivy.Array.equal"]], "equal() (ivy.container method)": [[175, "ivy.Container.equal"]], "erf() (in module ivy)": [[176, "ivy.erf"], [463, "ivy.erf"]], "erf() (ivy.array method)": [[176, "ivy.Array.erf"]], "erf() (ivy.container method)": [[176, "ivy.Container.erf"]], "exp() (in module ivy)": [[177, "ivy.exp"], [463, "ivy.exp"]], "exp() (ivy.array method)": [[177, "ivy.Array.exp"]], "exp() (ivy.container method)": [[177, "ivy.Container.exp"]], "expm1() (in module ivy)": [[178, "ivy.expm1"], [463, "ivy.expm1"]], "expm1() (ivy.array method)": [[178, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[178, "ivy.Container.expm1"]], "floor() (in module ivy)": [[179, "ivy.floor"], [463, "ivy.floor"]], "floor() (ivy.array method)": [[179, "ivy.Array.floor"]], "floor() (ivy.container method)": [[179, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[180, "ivy.floor_divide"], [463, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[180, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[180, "ivy.Container.floor_divide"]], "fmod() (in module ivy)": [[181, "ivy.fmod"], [463, "ivy.fmod"]], "fmod() (ivy.array method)": [[181, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[181, "ivy.Container.fmod"]], "greater() (in module ivy)": [[182, "ivy.greater"], [463, "ivy.greater"]], "greater() (ivy.array method)": [[182, "ivy.Array.greater"]], "greater() (ivy.container method)": [[182, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[183, "ivy.greater_equal"], [463, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[183, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[183, "ivy.Container.greater_equal"]], "isfinite() (in module ivy)": [[184, "ivy.isfinite"], [463, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[184, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[184, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[185, "ivy.isinf"], [463, "ivy.isinf"]], "isinf() (ivy.array method)": [[185, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[185, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[186, "ivy.isnan"], [463, "ivy.isnan"]], "isnan() (ivy.array method)": [[186, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[186, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[187, "ivy.isreal"], [463, "ivy.isreal"]], "isreal() (ivy.array method)": [[187, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[187, "ivy.Container.isreal"]], "less() (in module ivy)": [[188, "ivy.less"], [463, "ivy.less"]], "less() (ivy.array method)": [[188, "ivy.Array.less"]], "less() (ivy.container method)": [[188, "ivy.Container.less"]], "less_equal() (in module ivy)": [[189, "ivy.less_equal"], [463, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[189, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[189, "ivy.Container.less_equal"]], "log() (in module ivy)": [[190, "ivy.log"], [463, "ivy.log"]], "log() (ivy.array method)": [[190, "ivy.Array.log"]], "log() (ivy.container method)": [[190, "ivy.Container.log"]], "log10() (in module ivy)": [[191, "ivy.log10"], [463, "ivy.log10"]], "log10() (ivy.array method)": [[191, "ivy.Array.log10"]], "log10() (ivy.container method)": [[191, "ivy.Container.log10"]], "log1p() (in module ivy)": [[192, "ivy.log1p"], [463, "ivy.log1p"]], "log1p() (ivy.array method)": [[192, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[192, "ivy.Container.log1p"]], "log2() (in module ivy)": [[193, "ivy.log2"], [463, "ivy.log2"]], "log2() (ivy.array method)": [[193, "ivy.Array.log2"]], "log2() (ivy.container method)": [[193, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[194, "ivy.logaddexp"], [463, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[194, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[194, "ivy.Container.logaddexp"]], "logical_and() (in module ivy)": [[195, "ivy.logical_and"], [463, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[195, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[195, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[196, "ivy.logical_not"], [463, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[196, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[196, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[197, "ivy.logical_or"], [463, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[197, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[197, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[198, "ivy.logical_xor"], [463, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[198, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[198, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[199, "ivy.maximum"], [463, "ivy.maximum"]], "maximum() (ivy.array method)": [[199, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[199, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[200, "ivy.minimum"], [463, "ivy.minimum"]], "minimum() (ivy.array method)": [[200, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[200, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[201, "ivy.multiply"], [463, "ivy.multiply"]], "multiply() (ivy.array method)": [[201, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[201, "ivy.Container.multiply"]], "negative() (in module ivy)": [[202, "ivy.negative"], [463, "ivy.negative"]], "negative() (ivy.array method)": [[202, "ivy.Array.negative"]], "negative() (ivy.container method)": [[202, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[203, "ivy.not_equal"], [463, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[203, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[203, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[204, "ivy.positive"], [463, "ivy.positive"]], "positive() (ivy.array method)": [[204, "ivy.Array.positive"]], "positive() (ivy.container method)": [[204, "ivy.Container.positive"]], "pow() (in module ivy)": [[205, "ivy.pow"], [463, "ivy.pow"]], "pow() (ivy.array method)": [[205, "ivy.Array.pow"]], "pow() (ivy.container method)": [[205, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[206, "ivy.rad2deg"], [463, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[206, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[206, "ivy.Container.rad2deg"]], "reciprocal() (in module ivy)": [[207, "ivy.reciprocal"], [463, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[207, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[207, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[208, "ivy.remainder"], [463, "ivy.remainder"]], "remainder() (ivy.array method)": [[208, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[208, "ivy.Container.remainder"]], "round() (in module ivy)": [[209, "ivy.round"], [463, "ivy.round"]], "round() (ivy.array method)": [[209, "ivy.Array.round"]], "round() (ivy.container method)": [[209, "ivy.Container.round"]], "sign() (in module ivy)": [[210, "ivy.sign"], [463, "ivy.sign"]], "sign() (ivy.array method)": [[210, "ivy.Array.sign"]], "sign() (ivy.container method)": [[210, "ivy.Container.sign"]], "sin() (in module ivy)": [[211, "ivy.sin"], [463, "ivy.sin"]], "sin() (ivy.array method)": [[211, "ivy.Array.sin"]], "sin() (ivy.container method)": [[211, "ivy.Container.sin"]], "sinh() (in module ivy)": [[212, "ivy.sinh"], [463, "ivy.sinh"]], "sinh() (ivy.array method)": [[212, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[212, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[213, "ivy.sqrt"], [463, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[213, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[213, "ivy.Container.sqrt"]], "square() (in module ivy)": [[214, "ivy.square"], [463, "ivy.square"]], "square() (ivy.array method)": [[214, "ivy.Array.square"]], "square() (ivy.container method)": [[214, "ivy.Container.square"]], "subtract() (in module ivy)": [[215, "ivy.subtract"], [463, "ivy.subtract"]], "subtract() (ivy.array method)": [[215, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[215, "ivy.Container.subtract"]], "tan() (in module ivy)": [[216, "ivy.tan"], [463, "ivy.tan"]], "tan() (ivy.array method)": [[216, "ivy.Array.tan"]], "tan() (ivy.container method)": [[216, "ivy.Container.tan"]], "tanh() (in module ivy)": [[217, "ivy.tanh"], [463, "ivy.tanh"]], "tanh() (ivy.array method)": [[217, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[217, "ivy.Container.tanh"]], "trunc() (in module ivy)": [[218, "ivy.trunc"], [463, "ivy.trunc"]], "trunc() (ivy.array method)": [[218, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[218, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[219, "ivy.trunc_divide"], [463, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[219, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[219, "ivy.Container.trunc_divide"]], "logit() (in module ivy)": [[220, "ivy.logit"], [267, "ivy.logit"]], "logit() (ivy.array method)": [[220, "ivy.Array.logit"]], "logit() (ivy.container method)": [[220, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[221, "ivy.logsigmoid"], [267, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[221, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[221, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[222, "ivy.prelu"], [267, "ivy.prelu"]], "prelu() (ivy.array method)": [[222, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[222, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[223, "ivy.relu6"], [267, "ivy.relu6"]], "relu6() (ivy.array method)": [[223, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[223, "ivy.Container.relu6"]], "selu() (in module ivy)": [[224, "ivy.selu"], [267, "ivy.selu"]], "selu() (ivy.array method)": [[224, "ivy.Array.selu"]], "selu() (ivy.container method)": [[224, "ivy.Container.selu"]], "thresholded_relu() (in module ivy)": [[225, "ivy.thresholded_relu"], [267, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[225, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[225, "ivy.Container.thresholded_relu"]], "eye_like() (in module ivy)": [[226, "ivy.eye_like"], [269, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[226, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[226, "ivy.Container.eye_like"]], "frombuffer() (in module ivy)": [[227, "ivy.frombuffer"], [269, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[227, "ivy.Container.frombuffer"]], "hamming_window() (in module ivy)": [[228, "ivy.hamming_window"], [269, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[228, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[229, "ivy.hann_window"], [269, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[229, "ivy.Container.hann_window"]], "kaiser_bessel_derived_window() (in module ivy)": [[230, "ivy.kaiser_bessel_derived_window"], [269, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[230, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[231, "ivy.kaiser_window"], [269, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[231, "ivy.Container.kaiser_window"]], "tril_indices() (in module ivy)": [[232, "ivy.tril_indices"], [269, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[232, "ivy.Container.tril_indices"]], "triu_indices() (in module ivy)": [[233, "ivy.triu_indices"], [269, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[233, "ivy.Container.triu_indices"]], "vorbis_window() (in module ivy)": [[234, "ivy.vorbis_window"], [269, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[234, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[235, "ivy.allclose"], [272, "ivy.allclose"]], "allclose() (ivy.array method)": [[235, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[235, "ivy.Container.allclose"]], "angle() (in module ivy)": [[236, "ivy.angle"], [272, "ivy.angle"]], "angle() (ivy.array method)": [[236, "ivy.Array.angle"]], "angle() (ivy.container method)": [[236, "ivy.Container.angle"]], "binarizer() (in module ivy)": [[237, "ivy.binarizer"], [272, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[237, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[237, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[238, "ivy.conj"], [272, "ivy.conj"]], "conj() (ivy.array method)": [[238, "ivy.Array.conj"]], "conj() (ivy.container method)": [[238, "ivy.Container.conj"]], "copysign() (in module ivy)": [[239, "ivy.copysign"], [272, "ivy.copysign"]], "copysign() (ivy.array method)": [[239, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[239, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[240, "ivy.count_nonzero"], [272, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[240, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[240, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[241, "ivy.diff"], [272, "ivy.diff"]], "diff() (ivy.array method)": [[241, "ivy.Array.diff"]], "diff() (ivy.container method)": [[241, "ivy.Container.diff"]], "exp2() (in module ivy)": [[242, "ivy.exp2"], [272, "ivy.exp2"]], "exp2() (ivy.array method)": [[242, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[242, "ivy.Container.exp2"]], "fix() (in module ivy)": [[243, "ivy.fix"], [272, "ivy.fix"]], "fix() (ivy.array method)": [[243, "ivy.Array.fix"]], "fix() (ivy.container method)": [[243, "ivy.Container.fix"]], "float_power() (in module ivy)": [[244, "ivy.float_power"], [272, "ivy.float_power"]], "float_power() (ivy.array method)": [[244, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[244, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[245, "ivy.fmax"], [272, "ivy.fmax"]], "fmax() (ivy.array method)": [[245, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[245, "ivy.Container.fmax"]], "fmin() (in module ivy)": [[246, "ivy.fmin"], [272, "ivy.fmin"]], "fmin() (ivy.array method)": [[246, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[246, "ivy.Container.fmin"]], "frexp() (in module ivy)": [[247, "ivy.frexp"], [272, "ivy.frexp"]], "frexp() (ivy.array method)": [[247, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[247, "ivy.Container.frexp"]], "gcd() (in module ivy)": [[248, "ivy.gcd"], [272, "ivy.gcd"]], "gcd() (ivy.array method)": [[248, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[248, "ivy.Container.gcd"]], "gradient() (in module ivy)": [[249, "ivy.gradient"], [272, "ivy.gradient"]], "gradient() (ivy.array method)": [[249, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[249, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[250, "ivy.hypot"], [272, "ivy.hypot"]], "hypot() (ivy.array method)": [[250, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[250, "ivy.Container.hypot"]], "imag() (in module ivy)": [[251, "ivy.imag"], [272, "ivy.imag"]], "imag() (ivy.array method)": [[251, "ivy.Array.imag"]], "imag() (ivy.container method)": [[251, "ivy.Container.imag"]], "isclose() (in module ivy)": [[252, "ivy.isclose"], [272, "ivy.isclose"]], "isclose() (ivy.array method)": [[252, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[252, "ivy.Container.isclose"]], "lcm() (in module ivy)": [[253, "ivy.lcm"], [272, "ivy.lcm"]], "lcm() (ivy.array method)": [[253, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[253, "ivy.Container.lcm"]], "ldexp() (in module ivy)": [[254, "ivy.ldexp"], [272, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[254, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[254, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[255, "ivy.lerp"], [272, "ivy.lerp"]], "lerp() (ivy.array method)": [[255, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[255, "ivy.Container.lerp"]], "logaddexp2() (in module ivy)": [[256, "ivy.logaddexp2"], [272, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[256, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[256, "ivy.Container.logaddexp2"]], "nan_to_num() (in module ivy)": [[257, "ivy.nan_to_num"], [272, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[257, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[257, "ivy.Container.nan_to_num"]], "nansum() (in module ivy)": [[258, "ivy.nansum"], [272, "ivy.nansum"]], "nansum() (ivy.array method)": [[258, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[258, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[259, "ivy.nextafter"], [272, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[259, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[259, "ivy.Container.nextafter"]], "real() (in module ivy)": [[260, "ivy.real"], [272, "ivy.real"]], "real() (ivy.array method)": [[260, "ivy.Array.real"]], "real() (ivy.container method)": [[260, "ivy.Container.real"]], "signbit() (in module ivy)": [[261, "ivy.signbit"], [272, "ivy.signbit"]], "signbit() (ivy.array method)": [[261, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[261, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[262, "ivy.sinc"], [272, "ivy.sinc"]], "sinc() (ivy.array method)": [[262, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[262, "ivy.Container.sinc"]], "trapz() (in module ivy)": [[263, "ivy.trapz"], [272, "ivy.trapz"]], "trapz() (ivy.array method)": [[263, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[263, "ivy.Container.trapz"]], "xlogy() (in module ivy)": [[264, "ivy.xlogy"], [272, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[264, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[264, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[265, "ivy.zeta"], [272, "ivy.zeta"]], "zeta() (ivy.array method)": [[265, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[265, "ivy.Container.zeta"]], "bind_custom_gradient_function() (in module ivy)": [[266, "ivy.bind_custom_gradient_function"], [274, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[267, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[268, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[269, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[270, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[271, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[272, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[273, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[274, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[275, "ivy.adaptive_avg_pool1d"], [289, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[275, "ivy.adaptive_avg_pool2d"], [290, "ivy.adaptive_avg_pool2d"]], "avg_pool1d() (in module ivy)": [[275, "ivy.avg_pool1d"], [291, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[275, "ivy.avg_pool2d"], [292, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[275, "ivy.avg_pool3d"], [293, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[275, "ivy.dct"], [294, "ivy.dct"]], "dft() (in module ivy)": [[275, "ivy.dft"], [295, "ivy.dft"]], "dropout1d() (in module ivy)": [[275, "ivy.dropout1d"], [296, "ivy.dropout1d"]], "dropout3d() (in module ivy)": [[275, "ivy.dropout3d"], [297, "ivy.dropout3d"]], "embedding() (in module ivy)": [[275, "ivy.embedding"], [298, "ivy.embedding"]], "fft() (in module ivy)": [[275, "ivy.fft"], [299, "ivy.fft"]], "ifft() (in module ivy)": [[275, "ivy.ifft"], [300, "ivy.ifft"]], "interp() (in module ivy)": [[275, "ivy.interp"], [301, "ivy.interp"]], "interpolate() (in module ivy)": [[275, "ivy.interpolate"], [302, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[275, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[275, "ivy.max_pool1d"], [303, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[275, "ivy.max_pool2d"], [304, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[275, "ivy.max_pool3d"], [305, "ivy.max_pool3d"]], "adjoint() (in module ivy)": [[276, "ivy.adjoint"], [306, "ivy.adjoint"]], "cond() (in module ivy)": [[276, "ivy.cond"], [307, "ivy.cond"]], "cov() (in module ivy)": [[276, "ivy.cov"], [308, "ivy.cov"]], "diagflat() (in module ivy)": [[276, "ivy.diagflat"], [309, "ivy.diagflat"]], "eig() (in module ivy)": [[276, "ivy.eig"], [310, "ivy.eig"], [468, "ivy.eig"], [500, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[276, "ivy.eigh_tridiagonal"], [311, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[276, "ivy.eigvals"], [312, "ivy.eigvals"]], "ivy.functional.ivy.experimental.linear_algebra": [[276, "module-ivy.functional.ivy.experimental.linear_algebra"]], "kron() (in module ivy)": [[276, "ivy.kron"], [313, "ivy.kron"]], "matrix_exp() (in module ivy)": [[276, "ivy.matrix_exp"], [314, "ivy.matrix_exp"]], "multi_dot() (in module ivy)": [[276, "ivy.multi_dot"], [315, "ivy.multi_dot"]], "binary_cross_entropy_with_logits() (in module ivy)": [[277, "ivy.binary_cross_entropy_with_logits"], [316, "ivy.binary_cross_entropy_with_logits"]], "ivy.functional.ivy.experimental.losses": [[277, "module-ivy.functional.ivy.experimental.losses"]], "as_strided() (in module ivy)": [[278, "ivy.as_strided"], [317, "ivy.as_strided"]], "atleast_1d() (in module ivy)": [[278, "ivy.atleast_1d"], [318, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[278, "ivy.atleast_2d"], [319, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[278, "ivy.atleast_3d"], [320, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[278, "ivy.broadcast_shapes"], [321, "ivy.broadcast_shapes"]], "concat_from_sequence() (in module ivy)": [[278, "ivy.concat_from_sequence"], [322, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[278, "ivy.dsplit"], [323, "ivy.dsplit"]], "dstack() (in module ivy)": [[278, "ivy.dstack"], [324, "ivy.dstack"]], "expand() (in module ivy)": [[278, "ivy.expand"], [325, "ivy.expand"]], "flatten() (in module ivy)": [[278, "ivy.flatten"], [326, "ivy.flatten"]], "fliplr() (in module ivy)": [[278, "ivy.fliplr"], [327, "ivy.fliplr"]], "flipud() (in module ivy)": [[278, "ivy.flipud"], [328, "ivy.flipud"]], "heaviside() (in module ivy)": [[278, "ivy.heaviside"], [329, "ivy.heaviside"]], "hsplit() (in module ivy)": [[278, "ivy.hsplit"], [330, "ivy.hsplit"]], "hstack() (in module ivy)": [[278, "ivy.hstack"], [331, "ivy.hstack"]], "i0() (in module ivy)": [[278, "ivy.i0"], [332, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[278, "module-ivy.functional.ivy.experimental.manipulation"]], "moveaxis() (in module ivy)": [[278, "ivy.moveaxis"], [333, "ivy.moveaxis"]], "ndenumerate() (in module ivy)": [[278, "ivy.ndenumerate"], [334, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[278, "ivy.ndindex"], [335, "ivy.ndindex"]], "pad() (in module ivy)": [[278, "ivy.pad"], [336, "ivy.pad"]], "rot90() (in module ivy)": [[278, "ivy.rot90"], [337, "ivy.rot90"]], "take_along_axis() (in module ivy)": [[278, "ivy.take_along_axis"], [338, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[278, "ivy.top_k"], [339, "ivy.top_k"]], "vsplit() (in module ivy)": [[278, "ivy.vsplit"], [340, "ivy.vsplit"]], "vstack() (in module ivy)": [[278, "ivy.vstack"], [341, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[279, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[280, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[281, "ivy.batch_norm"], [342, "ivy.batch_norm"]], "instance_norm() (in module ivy)": [[281, "ivy.instance_norm"], [343, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[281, "module-ivy.functional.ivy.experimental.norms"]], "l2_normalize() (in module ivy)": [[281, "ivy.l2_normalize"], [344, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[281, "ivy.lp_normalize"], [345, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[282, "ivy.bernoulli"], [346, "ivy.bernoulli"]], "beta() (in module ivy)": [[282, "ivy.beta"], [347, "ivy.beta"]], "dirichlet() (in module ivy)": [[282, "ivy.dirichlet"], [348, "ivy.dirichlet"]], "gamma() (in module ivy)": [[282, "ivy.gamma"], [349, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[282, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[282, "ivy.poisson"], [350, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[283, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[283, "ivy.unravel_index"], [351, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[284, "module-ivy.functional.ivy.experimental.set"]], "ivy.functional.ivy.experimental.sorting": [[285, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[285, "ivy.lexsort"], [352, "ivy.lexsort"]], "msort() (in module ivy)": [[285, "ivy.msort"], [353, "ivy.msort"]], "nativesparsearray (class in ivy)": [[286, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[286, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[286, "ivy.is_ivy_sparse_array"], [354, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[286, "ivy.is_native_sparse_array"], [355, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[286, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[286, "ivy.native_sparse_array"], [356, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[286, "ivy.native_sparse_array_to_indices_values_and_shape"], [357, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[287, "ivy.bincount"], [358, "ivy.bincount"]], "corrcoef() (in module ivy)": [[287, "ivy.corrcoef"], [359, "ivy.corrcoef"]], "ivy.functional.ivy.experimental.statistical": [[287, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[287, "ivy.median"], [360, "ivy.median"]], "nanmean() (in module ivy)": [[287, "ivy.nanmean"], [361, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[287, "ivy.nanmedian"], [362, "ivy.nanmedian"]], "quantile() (in module ivy)": [[287, "ivy.quantile"], [363, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[288, "module-ivy.functional.ivy.experimental.utility"]], "adaptive_avg_pool1d() (ivy.array method)": [[289, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[289, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[290, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[290, "ivy.Container.adaptive_avg_pool2d"]], "avg_pool1d() (ivy.array method)": [[291, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[291, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[292, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[292, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[293, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[293, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[294, "ivy.Array.dct"]], "dct() (ivy.container method)": [[294, "ivy.Container.dct"]], "dft() (ivy.array method)": [[295, "ivy.Array.dft"]], "dft() (ivy.container method)": [[295, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[296, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[296, "ivy.Container.dropout1d"]], "dropout3d() (ivy.array method)": [[297, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[297, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[298, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[298, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[299, "ivy.Array.fft"]], "fft() (ivy.container method)": [[299, "ivy.Container.fft"]], "ifft() (ivy.array method)": [[300, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[300, "ivy.Container.ifft"]], "interpolate() (ivy.array method)": [[302, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[302, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[303, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[303, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[304, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[304, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[305, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[305, "ivy.Container.max_pool3d"]], "adjoint() (ivy.array method)": [[306, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[306, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[307, "ivy.Array.cond"]], "cond() (ivy.container method)": [[307, "ivy.Container.cond"]], "cov() (ivy.array method)": [[308, "ivy.Array.cov"]], "cov() (ivy.container method)": [[308, "ivy.Container.cov"]], "diagflat() (ivy.array method)": [[309, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[309, "ivy.Container.diagflat"]], "eig() (ivy.array method)": [[310, "ivy.Array.eig"], [500, "ivy.Array.eig"]], "eig() (ivy.container method)": [[310, "ivy.Container.eig"], [500, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[311, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[311, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[312, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[312, "ivy.Container.eigvals"]], "kron() (ivy.array method)": [[313, "ivy.Array.kron"]], "kron() (ivy.container method)": [[313, "ivy.Container.kron"]], "matrix_exp() (ivy.array method)": [[314, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[314, "ivy.Container.matrix_exp"]], "multi_dot() (ivy.array method)": [[315, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[315, "ivy.Container.multi_dot"]], "binary_cross_entropy_with_logits() (ivy.container method)": [[316, "ivy.Container.binary_cross_entropy_with_logits"]], "as_strided() (ivy.array method)": [[317, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[317, "ivy.Container.as_strided"]], "atleast_1d() (ivy.array method)": [[318, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[318, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[319, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[319, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[320, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[320, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[321, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[322, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[322, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[323, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[323, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[324, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[324, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[325, "ivy.Array.expand"]], "expand() (ivy.container method)": [[325, "ivy.Container.expand"]], "flatten() (ivy.array method)": [[326, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[326, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[327, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[327, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[328, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[328, "ivy.Container.flipud"]], "heaviside() (ivy.array method)": [[329, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[329, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[330, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[330, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[331, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[331, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[332, "ivy.Array.i0"]], "i0() (ivy.container method)": [[332, "ivy.Container.i0"]], "moveaxis() (ivy.array method)": [[333, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[333, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[336, "ivy.Array.pad"]], "pad() (ivy.container method)": [[336, "ivy.Container.pad"]], "rot90() (ivy.array method)": [[337, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[337, "ivy.Container.rot90"]], "take_along_axis() (ivy.array method)": [[338, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[338, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[339, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[339, "ivy.Container.top_k"]], "vsplit() (ivy.array method)": [[340, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[340, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[341, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[341, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[342, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[342, "ivy.Container.batch_norm"]], "instance_norm() (ivy.array method)": [[343, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[343, "ivy.Container.instance_norm"]], "l2_normalize() (ivy.array method)": [[344, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[344, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[345, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[345, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[346, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[346, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[347, "ivy.Array.beta"]], "beta() (ivy.container method)": [[347, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[348, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[348, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[349, "ivy.Array.gamma"]], "poisson() (ivy.array method)": [[350, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[350, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[351, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[351, "ivy.Container.unravel_index"]], "lexsort() (ivy.array method)": [[352, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[352, "ivy.Container.lexsort"]], "msort() (ivy.array method)": [[353, "ivy.Array.msort"]], "msort() (ivy.container method)": [[353, "ivy.Container.msort"]], "bincount() (ivy.array method)": [[358, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[358, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[359, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[359, "ivy.Container.corrcoef"]], "median() (ivy.array method)": [[360, "ivy.Array.median"]], "median() (ivy.container method)": [[360, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[361, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[361, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[362, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[362, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[363, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[363, "ivy.Container.quantile"]], "all_equal() (in module ivy)": [[364, "ivy.all_equal"], [465, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[364, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[364, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[365, "ivy.arg_info"], [465, "ivy.arg_info"]], "arg_names() (in module ivy)": [[366, "ivy.arg_names"], [465, "ivy.arg_names"]], "array_equal() (in module ivy)": [[367, "ivy.array_equal"], [465, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[367, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[367, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[368, "ivy.assert_supports_inplace"], [465, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[368, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[368, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[369, "ivy.cache_fn"], [465, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[370, "ivy.clip_matrix_norm"], [465, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[370, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[370, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[371, "ivy.clip_vector_norm"], [465, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[371, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[371, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[372, "ivy.container_types"], [465, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[373, "ivy.current_backend_str"], [465, "ivy.current_backend_str"]], "default() (in module ivy)": [[374, "ivy.default"], [465, "ivy.default"]], "default() (ivy.array method)": [[374, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[375, "ivy.einops_rearrange"], [465, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[375, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[375, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[376, "ivy.einops_reduce"], [465, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[376, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[376, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[377, "ivy.einops_repeat"], [465, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[377, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[377, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[378, "ivy.exists"], [465, "ivy.exists"]], "exists() (ivy.array method)": [[378, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[379, "ivy.fourier_encode"], [465, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[379, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[379, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[380, "ivy.function_supported_devices_and_dtypes"], [465, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[381, "ivy.function_unsupported_devices_and_dtypes"], [465, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[382, "ivy.gather"], [465, "ivy.gather"]], "gather() (ivy.array method)": [[382, "ivy.Array.gather"]], "gather() (ivy.container method)": [[382, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[383, "ivy.gather_nd"], [465, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[383, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[383, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[384, "ivy.get_all_arrays_in_memory"], [465, "ivy.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy)": [[385, "ivy.get_array_mode"], [465, "ivy.get_array_mode"]], "get_exception_trace_mode() (in module ivy)": [[386, "ivy.get_exception_trace_mode"], [465, "ivy.get_exception_trace_mode"]], "get_item() (in module ivy)": [[387, "ivy.get_item"], [465, "ivy.get_item"]], "get_min_base() (in module ivy)": [[388, "ivy.get_min_base"], [465, "ivy.get_min_base"]], "get_min_denominator() (in module ivy)": [[389, "ivy.get_min_denominator"], [465, "ivy.get_min_denominator"]], "get_nestable_mode() (in module ivy)": [[390, "ivy.get_nestable_mode"], [465, "ivy.get_nestable_mode"]], "get_num_dims() (in module ivy)": [[391, "ivy.get_num_dims"], [465, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[391, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[391, "ivy.Container.get_num_dims"]], "get_queue_timeout() (in module ivy)": [[392, "ivy.get_queue_timeout"], [465, "ivy.get_queue_timeout"]], "get_referrers_recursive() (in module ivy)": [[393, "ivy.get_referrers_recursive"], [465, "ivy.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy)": [[394, "ivy.get_show_func_wrapper_trace_mode"], [465, "ivy.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy)": [[395, "ivy.get_tmp_dir"], [465, "ivy.get_tmp_dir"]], "has_nans() (in module ivy)": [[396, "ivy.has_nans"], [465, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[396, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[396, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[397, "ivy.inplace_arrays_supported"], [465, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[398, "ivy.inplace_decrement"], [465, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[398, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[398, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[399, "ivy.inplace_increment"], [465, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[399, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[399, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[400, "ivy.inplace_update"], [465, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[400, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[400, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[401, "ivy.inplace_variables_supported"], [465, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[402, "ivy.is_array"], [465, "ivy.is_array"]], "is_array() (ivy.array method)": [[402, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[402, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[403, "ivy.is_ivy_array"], [465, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[403, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[403, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[404, "ivy.is_ivy_container"], [465, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[404, "ivy.Array.is_ivy_container"]], "is_native_array() (in module ivy)": [[405, "ivy.is_native_array"], [465, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[405, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[405, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[406, "ivy.isin"], [465, "ivy.isin"]], "isin() (ivy.array method)": [[406, "ivy.Array.isin"]], "isin() (ivy.container method)": [[406, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[407, "ivy.isscalar"], [465, "ivy.isscalar"]], "itemsize() (in module ivy)": [[408, "ivy.itemsize"], [465, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[408, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[408, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[409, "ivy.match_kwargs"], [465, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[410, "ivy.multiprocessing"], [465, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[411, "ivy.num_arrays_in_memory"], [465, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[412, "ivy.print_all_arrays_in_memory"], [465, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[413, "ivy.scatter_flat"], [465, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[413, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[413, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[414, "ivy.scatter_nd"], [465, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[414, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[414, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[415, "ivy.set_array_mode"], [465, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[416, "ivy.set_exception_trace_mode"], [465, "ivy.set_exception_trace_mode"]], "set_min_base() (in module ivy)": [[417, "ivy.set_min_base"], [465, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[418, "ivy.set_min_denominator"], [465, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[419, "ivy.set_nestable_mode"], [465, "ivy.set_nestable_mode"]], "set_queue_timeout() (in module ivy)": [[420, "ivy.set_queue_timeout"], [465, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[421, "ivy.set_shape_array_mode"], [465, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[422, "ivy.set_show_func_wrapper_trace_mode"], [465, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[423, "ivy.set_tmp_dir"], [465, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[424, "ivy.shape"], [465, "ivy.shape"]], "shape() (ivy.array method)": [[424, "ivy.Array.shape"]], "shape_array_mode() (in module ivy)": [[425, "ivy.shape_array_mode"], [465, "ivy.shape_array_mode"]], "stable_divide() (in module ivy)": [[426, "ivy.stable_divide"], [465, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[426, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[426, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[427, "ivy.stable_pow"], [465, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[427, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[427, "ivy.Container.stable_pow"]], "supports_inplace_updates() (in module ivy)": [[428, "ivy.supports_inplace_updates"], [465, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[428, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[428, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[429, "ivy.to_ivy_shape"], [465, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[430, "ivy.to_list"], [465, "ivy.to_list"]], "to_list() (ivy.array method)": [[430, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[430, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[431, "ivy.to_native_shape"], [465, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[432, "ivy.to_numpy"], [465, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[432, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[432, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[433, "ivy.to_scalar"], [465, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[433, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[433, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[434, "ivy.try_else_none"], [465, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[435, "ivy.unset_array_mode"], [465, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[436, "ivy.unset_exception_trace_mode"], [465, "ivy.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy)": [[437, "ivy.unset_nestable_mode"], [465, "ivy.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy)": [[438, "ivy.unset_queue_timeout"], [465, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[439, "ivy.unset_shape_array_mode"], [465, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[440, "ivy.unset_show_func_wrapper_trace_mode"], [465, "ivy.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy)": [[441, "ivy.value_is_nan"], [465, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[441, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[441, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[442, "ivy.vmap"], [465, "ivy.vmap"]], "adam_step() (in module ivy)": [[443, "ivy.adam_step"], [466, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[443, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[443, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[444, "ivy.adam_update"], [466, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[444, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[444, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[445, "ivy.execute_with_gradients"], [466, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[446, "ivy.grad"], [466, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[447, "ivy.gradient_descent_update"], [466, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[447, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[447, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[448, "ivy.jac"], [466, "ivy.jac"]], "lamb_update() (in module ivy)": [[449, "ivy.lamb_update"], [466, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[449, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[449, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[450, "ivy.lars_update"], [466, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[450, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[450, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[451, "ivy.optimizer_update"], [466, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[451, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[451, "ivy.Container.optimizer_update"]], "set_with_grads() (in module ivy)": [[452, "ivy.set_with_grads"], [466, "ivy.set_with_grads"]], "stop_gradient() (in module ivy)": [[453, "ivy.stop_gradient"], [466, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[453, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[453, "ivy.Container.stop_gradient"]], "unset_with_grads() (in module ivy)": [[454, "ivy.unset_with_grads"], [466, "ivy.unset_with_grads"]], "value_and_grad() (in module ivy)": [[455, "ivy.value_and_grad"], [466, "ivy.value_and_grad"]], "with_grads() (in module ivy)": [[456, "ivy.with_grads"], [466, "ivy.with_grads"]], "ivy.functional.ivy.activations": [[457, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[458, "ivy.e"]], "inf (in module ivy)": [[458, "ivy.inf"]], "ivy.functional.ivy.constants": [[458, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[458, "ivy.nan"]], "newaxis (in module ivy)": [[458, "ivy.newaxis"]], "pi (in module ivy)": [[458, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[459, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[460, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[460, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[461, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[461, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[461, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[461, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[461, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[461, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[462, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[462, "ivy.Profiler"]], "ivy.functional.ivy.device": [[462, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[463, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[464, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[465, "ivy.ArrayMode"]], "ivy.functional.ivy.general": [[465, "module-ivy.functional.ivy.general"]], "gradienttracking (class in ivy)": [[466, "ivy.GradientTracking"]], "ivy.functional.ivy.gradients": [[466, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[467, "ivy.conv"], [480, "ivy.conv"]], "conv1d() (in module ivy)": [[467, "ivy.conv1d"], [481, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[467, "ivy.conv1d_transpose"], [482, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[467, "ivy.conv2d"], [483, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[467, "ivy.conv2d_transpose"], [484, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[467, "ivy.conv3d"], [485, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[467, "ivy.conv3d_transpose"], [486, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[467, "ivy.conv_general_dilated"], [487, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[467, "ivy.conv_general_transpose"], [488, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[467, "ivy.depthwise_conv2d"], [489, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[467, "ivy.dropout"], [490, "ivy.dropout"]], "ivy.functional.ivy.layers": [[467, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[467, "ivy.linear"], [491, "ivy.linear"]], "lstm_update() (in module ivy)": [[467, "ivy.lstm_update"], [492, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[467, "ivy.multi_head_attention"], [493, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[467, "ivy.scaled_dot_product_attention"], [494, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[468, "ivy.cholesky"], [495, "ivy.cholesky"]], "cross() (in module ivy)": [[468, "ivy.cross"], [496, "ivy.cross"]], "det() (in module ivy)": [[468, "ivy.det"], [497, "ivy.det"]], "diag() (in module ivy)": [[468, "ivy.diag"], [498, "ivy.diag"]], "diagonal() (in module ivy)": [[468, "ivy.diagonal"], [499, "ivy.diagonal"]], "eigh() (in module ivy)": [[468, "ivy.eigh"], [501, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[468, "ivy.eigvalsh"], [502, "ivy.eigvalsh"]], "inner() (in module ivy)": [[468, "ivy.inner"], [503, "ivy.inner"]], "inv() (in module ivy)": [[468, "ivy.inv"], [504, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[468, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[468, "ivy.lu_factor"], [505, "ivy.lu_factor"]], "matmul() (in module ivy)": [[468, "ivy.matmul"], [506, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[468, "ivy.matrix_norm"], [507, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[468, "ivy.matrix_power"], [508, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[468, "ivy.matrix_rank"], [509, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[468, "ivy.matrix_transpose"], [510, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[468, "ivy.outer"], [511, "ivy.outer"]], "pinv() (in module ivy)": [[468, "ivy.pinv"], [512, "ivy.pinv"]], "qr() (in module ivy)": [[468, "ivy.qr"], [513, "ivy.qr"]], "slogdet() (in module ivy)": [[468, "ivy.slogdet"], [514, "ivy.slogdet"]], "solve() (in module ivy)": [[468, "ivy.solve"], [515, "ivy.solve"]], "svd() (in module ivy)": [[468, "ivy.svd"], [516, "ivy.svd"]], "svdvals() (in module ivy)": [[468, "ivy.svdvals"], [517, "ivy.svdvals"]], "tensordot() (in module ivy)": [[468, "ivy.tensordot"], [518, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[468, "ivy.tensorsolve"], [519, "ivy.tensorsolve"]], "trace() (in module ivy)": [[468, "ivy.trace"], [520, "ivy.trace"]], "vander() (in module ivy)": [[468, "ivy.vander"], [521, "ivy.vander"]], "vecdot() (in module ivy)": [[468, "ivy.vecdot"], [522, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[468, "ivy.vector_norm"], [523, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[468, "ivy.vector_to_skew_symmetric_matrix"], [524, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[469, "ivy.binary_cross_entropy"], [525, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[469, "ivy.cross_entropy"], [526, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[469, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[469, "ivy.sparse_cross_entropy"], [527, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[470, "ivy.clip"], [528, "ivy.clip"]], "concat() (in module ivy)": [[470, "ivy.concat"], [529, "ivy.concat"]], "constant_pad() (in module ivy)": [[470, "ivy.constant_pad"], [530, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[470, "ivy.expand_dims"], [531, "ivy.expand_dims"]], "flip() (in module ivy)": [[470, "ivy.flip"], [532, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[470, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[470, "ivy.permute_dims"], [533, "ivy.permute_dims"]], "repeat() (in module ivy)": [[470, "ivy.repeat"], [534, "ivy.repeat"]], "reshape() (in module ivy)": [[470, "ivy.reshape"], [535, "ivy.reshape"]], "roll() (in module ivy)": [[470, "ivy.roll"], [536, "ivy.roll"]], "split() (in module ivy)": [[470, "ivy.split"], [537, "ivy.split"]], "squeeze() (in module ivy)": [[470, "ivy.squeeze"], [538, "ivy.squeeze"]], "stack() (in module ivy)": [[470, "ivy.stack"], [539, "ivy.stack"]], "swapaxes() (in module ivy)": [[470, "ivy.swapaxes"], [540, "ivy.swapaxes"]], "tile() (in module ivy)": [[470, "ivy.tile"], [541, "ivy.tile"]], "unstack() (in module ivy)": [[470, "ivy.unstack"], [542, "ivy.unstack"]], "zero_pad() (in module ivy)": [[470, "ivy.zero_pad"], [543, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[471, "ivy.fomaml_step"], [544, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[471, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[471, "ivy.maml_step"], [545, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[471, "ivy.reptile_step"], [546, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[472, "ivy.all_nested_indices"], [547, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[472, "ivy.copy_nest"], [548, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[472, "ivy.duplicate_array_index_chains"], [549, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[472, "ivy.index_nest"], [550, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[472, "ivy.insert_into_nest_at_index"], [551, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[472, "ivy.insert_into_nest_at_indices"], [552, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[472, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[472, "ivy.map"], [553, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[472, "ivy.map_nest_at_index"], [554, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[472, "ivy.map_nest_at_indices"], [555, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[472, "ivy.multi_index_nest"], [556, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[472, "ivy.nested_any"], [557, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[472, "ivy.nested_argwhere"], [558, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[472, "ivy.nested_map"], [559, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[472, "ivy.nested_multi_map"], [560, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[472, "ivy.prune_empty"], [561, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[472, "ivy.prune_nest_at_index"], [562, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[472, "ivy.prune_nest_at_indices"], [563, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[472, "ivy.set_nest_at_index"], [564, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[472, "ivy.set_nest_at_indices"], [565, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[473, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[473, "ivy.layer_norm"], [566, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[474, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[474, "ivy.multinomial"], [567, "ivy.multinomial"]], "randint() (in module ivy)": [[474, "ivy.randint"], [568, "ivy.randint"]], "random_normal() (in module ivy)": [[474, "ivy.random_normal"], [569, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[474, "ivy.random_uniform"], [570, "ivy.random_uniform"]], "seed() (in module ivy)": [[474, "ivy.seed"], [571, "ivy.seed"]], "shuffle() (in module ivy)": [[474, "ivy.shuffle"], [572, "ivy.shuffle"]], "argmax() (in module ivy)": [[475, "ivy.argmax"], [573, "ivy.argmax"]], "argmin() (in module ivy)": [[475, "ivy.argmin"], [574, "ivy.argmin"]], "argwhere() (in module ivy)": [[475, "ivy.argwhere"], [575, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[475, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[475, "ivy.nonzero"], [576, "ivy.nonzero"]], "where() (in module ivy)": [[475, "ivy.where"], [577, "ivy.where"]], "ivy.functional.ivy.set": [[476, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[476, "ivy.unique_all"], [578, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[476, "ivy.unique_counts"], [579, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[476, "ivy.unique_inverse"], [580, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[476, "ivy.unique_values"], [581, "ivy.unique_values"]], "argsort() (in module ivy)": [[477, "ivy.argsort"], [582, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[477, "module-ivy.functional.ivy.sorting"]], "searchsorted() (in module ivy)": [[477, "ivy.searchsorted"], [583, "ivy.searchsorted"]], "sort() (in module ivy)": [[477, "ivy.sort"], [584, "ivy.sort"]], "cumprod() (in module ivy)": [[478, "ivy.cumprod"], [585, "ivy.cumprod"]], "cumsum() (in module ivy)": [[478, "ivy.cumsum"], [586, "ivy.cumsum"]], "einsum() (in module ivy)": [[478, "ivy.einsum"], [587, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[478, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[478, "ivy.max"], [588, "ivy.max"]], "mean() (in module ivy)": [[478, "ivy.mean"], [589, "ivy.mean"]], "min() (in module ivy)": [[478, "ivy.min"], [590, "ivy.min"]], "prod() (in module ivy)": [[478, "ivy.prod"], [591, "ivy.prod"]], "std() (in module ivy)": [[478, "ivy.std"], [592, "ivy.std"]], "sum() (in module ivy)": [[478, "ivy.sum"], [593, "ivy.sum"]], "var() (in module ivy)": [[478, "ivy.var"], [594, "ivy.var"]], "all() (in module ivy)": [[479, "ivy.all"], [595, "ivy.all"]], "any() (in module ivy)": [[479, "ivy.any"], [596, "ivy.any"]], "ivy.functional.ivy.utility": [[479, "module-ivy.functional.ivy.utility"]], "conv1d() (ivy.array method)": [[481, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[481, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[482, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[482, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[483, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[483, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[484, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[484, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[485, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[485, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[486, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[486, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[489, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[489, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[490, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[490, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[491, "ivy.Array.linear"]], "linear() (ivy.container method)": [[491, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[492, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[492, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[493, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[493, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[494, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[494, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[495, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[495, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[496, "ivy.Array.cross"]], "cross() (ivy.container method)": [[496, "ivy.Container.cross"]], "det() (ivy.array method)": [[497, "ivy.Array.det"]], "det() (ivy.container method)": [[497, "ivy.Container.det"]], "diag() (ivy.array method)": [[498, "ivy.Array.diag"]], "diag() (ivy.container method)": [[498, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[499, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[499, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[501, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[501, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[502, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[502, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[503, "ivy.Array.inner"]], "inner() (ivy.container method)": [[503, "ivy.Container.inner"]], "inv() (ivy.array method)": [[504, "ivy.Array.inv"]], "inv() (ivy.container method)": [[504, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[506, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[506, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[507, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[507, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[508, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[508, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[509, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[509, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[510, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[510, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[511, "ivy.Array.outer"]], "outer() (ivy.container method)": [[511, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[512, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[512, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[513, "ivy.Array.qr"]], "qr() (ivy.container method)": [[513, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[514, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[514, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[515, "ivy.Array.solve"]], "solve() (ivy.container method)": [[515, "ivy.Container.solve"]], "svd() (ivy.array method)": [[516, "ivy.Array.svd"]], "svd() (ivy.container method)": [[516, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[517, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[517, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[518, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[518, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[519, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[519, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[520, "ivy.Array.trace"]], "trace() (ivy.container method)": [[520, "ivy.Container.trace"]], "vander() (ivy.array method)": [[521, "ivy.Array.vander"]], "vander() (ivy.container method)": [[521, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[522, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[522, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[523, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[523, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[524, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[524, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[525, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[525, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[526, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[526, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[527, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[527, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[528, "ivy.Array.clip"]], "clip() (ivy.container method)": [[528, "ivy.Container.clip"]], "concat() (ivy.array method)": [[529, "ivy.Array.concat"]], "concat() (ivy.container method)": [[529, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[530, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[530, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[531, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[531, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[532, "ivy.Array.flip"]], "flip() (ivy.container method)": [[532, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[533, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[533, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[534, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[534, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[535, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[535, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[536, "ivy.Array.roll"]], "roll() (ivy.container method)": [[536, "ivy.Container.roll"]], "split() (ivy.array method)": [[537, "ivy.Array.split"]], "split() (ivy.container method)": [[537, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[538, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[538, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[539, "ivy.Array.stack"]], "stack() (ivy.container method)": [[539, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[540, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[540, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[541, "ivy.Array.tile"]], "tile() (ivy.container method)": [[541, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[542, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[542, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[543, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[543, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[566, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[566, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[567, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[567, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[568, "ivy.Array.randint"]], "randint() (ivy.container method)": [[568, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[569, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[569, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[570, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[570, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[572, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[572, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[573, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[573, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[574, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[574, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[575, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[575, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[576, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[576, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[577, "ivy.Array.where"]], "where() (ivy.container method)": [[577, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[578, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[578, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[579, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[579, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[580, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[580, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[581, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[581, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[582, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[582, "ivy.Container.argsort"]], "searchsorted() (ivy.array method)": [[583, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[583, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[584, "ivy.Array.sort"]], "sort() (ivy.container method)": [[584, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[585, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[585, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[586, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[586, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[587, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[587, "ivy.Container.einsum"]], "max() (ivy.array method)": [[588, "ivy.Array.max"]], "max() (ivy.container method)": [[588, "ivy.Container.max"]], "mean() (ivy.array method)": [[589, "ivy.Array.mean"]], "mean() (ivy.container method)": [[589, "ivy.Container.mean"]], "min() (ivy.array method)": [[590, "ivy.Array.min"]], "min() (ivy.container method)": [[590, "ivy.Container.min"]], "prod() (ivy.array method)": [[591, "ivy.Array.prod"]], "prod() (ivy.container method)": [[591, "ivy.Container.prod"]], "std() (ivy.array method)": [[592, "ivy.Array.std"]], "std() (ivy.container method)": [[592, "ivy.Container.std"]], "sum() (ivy.array method)": [[593, "ivy.Array.sum"]], "sum() (ivy.container method)": [[593, "ivy.Container.sum"]], "var() (ivy.array method)": [[594, "ivy.Array.var"]], "var() (ivy.container method)": [[594, "ivy.Container.var"]], "all() (ivy.array method)": [[595, "ivy.Array.all"]], "all() (ivy.container method)": [[595, "ivy.Container.all"]], "any() (ivy.array method)": [[596, "ivy.Array.any"]], "any() (ivy.container method)": [[596, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[597, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[597, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "available_frameworks() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[598, "ivy_tests.test_ivy.helpers.available_frameworks.available_frameworks"]], "ground_truth() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[598, "ivy_tests.test_ivy.helpers.available_frameworks.ground_truth"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[598, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "empty_func() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.empty_func"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "flatten_fw_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.flatten_fw_and_to_np"]], "framework_comparator() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.framework_comparator"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[599, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.make_json_pickable"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "var_fn() (in module ivy_tests.test_ivy.helpers.function_testing)": [[599, "ivy_tests.test_ivy.helpers.function_testing.var_fn"]], "interruptedtest": [[600, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[600, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[600, "module-ivy_tests.test_ivy.helpers.globals"]], "remove_all_current_framework() (in module ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.remove_all_current_framework"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[600, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[600, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[601, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[602, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[602, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[603, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[603, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[603, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[603, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[603, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.make_json_pickable"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[604, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[604, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[605, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[605, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[605, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[605, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[606, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[606, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "as_cont() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.as_cont"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[607, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[607, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[608, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[608, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "nestedarray (class in ivy.nested_array.nested_array)": [[613, "ivy.nested_array.nested_array.NestedArray"]], "__init__() (ivy.nested_array.nested_array.nestedarray method)": [[613, "ivy.nested_array.nested_array.NestedArray.__init__"]], "data (ivy.nested_array.nested_array.nestedarray property)": [[613, "ivy.nested_array.nested_array.NestedArray.data"]], "device (ivy.nested_array.nested_array.nestedarray property)": [[613, "ivy.nested_array.nested_array.NestedArray.device"]], "dtype (ivy.nested_array.nested_array.nestedarray property)": [[613, "ivy.nested_array.nested_array.NestedArray.dtype"]], "from_row_lengths() (ivy.nested_array.nested_array.nestedarray class method)": [[613, "ivy.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_split() (ivy.nested_array.nested_array.nestedarray class method)": [[613, "ivy.nested_array.nested_array.NestedArray.from_row_split"]], "ivy.nested_array.nested_array": [[613, "module-ivy.nested_array.nested_array"]], "ndim (ivy.nested_array.nested_array.nestedarray property)": [[613, "ivy.nested_array.nested_array.NestedArray.ndim"]], "nested_array() (ivy.nested_array.nested_array.nestedarray class method)": [[613, "ivy.nested_array.nested_array.NestedArray.nested_array"]], "reshape() (ivy.nested_array.nested_array.nestedarray method)": [[613, "ivy.nested_array.nested_array.NestedArray.reshape"]], "shape (ivy.nested_array.nested_array.nestedarray property)": [[613, "ivy.nested_array.nested_array.NestedArray.shape"]], "unbind() (ivy.nested_array.nested_array.nestedarray method)": [[613, "ivy.nested_array.nested_array.NestedArray.unbind"]], "geglu (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.GELU"]], "leakyrelu (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.LeakyReLU"]], "logsoftmax (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.LogSoftmax"]], "mish (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.Mish"]], "relu (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.ReLU"]], "softmax (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[614, "ivy.stateful.activations.Softplus"]], "__init__() (ivy.stateful.activations.geglu method)": [[614, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[614, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[614, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[614, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[614, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[614, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[614, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[614, "ivy.stateful.activations.Softplus.__init__"]], "ivy.stateful.activations": [[614, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[615, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[615, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[615, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[615, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[615, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[615, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[615, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[616, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[616, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[616, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Ones"]], "siren (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[617, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[617, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[617, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[617, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[617, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[617, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[617, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[617, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[617, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[617, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[617, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[617, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[617, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[617, "module-ivy.stateful.initializers"]], "conv1d (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Conv3DTranspose"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Dropout"]], "lstm (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.Linear"]], "multiheadattention (class in ivy.stateful.layers)": [[618, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.conv1d method)": [[618, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[618, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[618, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[618, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[618, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[618, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[618, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[618, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[618, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[618, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[618, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[618, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[618, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[619, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[619, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[619, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[619, "module-ivy.stateful.module"]], "save_weights() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[619, "ivy.stateful.module.Module.show_graph"]], "layernorm (class in ivy.stateful.norms)": [[620, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.layernorm method)": [[620, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[620, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[621, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[621, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[621, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[621, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[621, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[621, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[621, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[621, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[621, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[621, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[621, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[621, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[621, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[621, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[621, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[621, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[621, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[621, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[621, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[621, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[621, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[622, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[622, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[622, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_any"]], "check_dimensions() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[623, "ivy.utils.assertions.check_true"]], "ivy.utils.assertions": [[623, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[624, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[625, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[625, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[625, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[625, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[625, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[625, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[625, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[625, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[625, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[625, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[625, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[626, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[626, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_jax_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_numpy_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[626, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[627, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[627, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[627, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[627, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[627, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[627, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[628, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[628, "module-ivy.utils.dynamic_import"]], "ivybackendexception": [[629, "ivy.utils.exceptions.IvyBackendException"]], "ivyerror": [[629, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[629, "ivy.utils.exceptions.IvyException"]], "ivynotimplementedexception": [[629, "ivy.utils.exceptions.IvyNotImplementedException"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[629, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[629, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[629, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[629, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[629, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[629, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[630, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[630, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[630, "module-ivy.utils.inspection"]], "profiler (class in ivy.utils.profiler)": [[631, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[631, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[631, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[631, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[631, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[632, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[632, "module-ivy.utils.verbosity"]], "applied libraries": [[678, "term-Applied-Libraries"]], "automatic code conversions": [[678, "term-Automatic-Code-Conversions"]], "backend handler": [[678, "term-Backend-Handler"]], "compositional functions": [[678, "term-Compositional-Functions"]], "convenience functions": [[678, "term-Convenience-Functions"]], "framework": [[678, "term-Framework"]], "framework handler": [[678, "term-Framework-Handler"]], "graph compiler": [[678, "term-Graph-Compiler"]], "ivy array": [[678, "term-Ivy-Array"]], "ivy backends": [[678, "term-Ivy-Backends"]], "ivy builder": [[678, "term-Ivy-Builder"]], "ivy compiler": [[678, "term-Ivy-Compiler"]], "ivy container": [[678, "term-Ivy-Container"]], "ivy frontends": [[678, "term-Ivy-Frontends"]], "ivy functional api": [[678, "term-Ivy-Functional-API"]], "ivy graph compiler": [[678, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[678, "term-Ivy-Transpiler"]], "mixed functions": [[678, "term-Mixed-Functions"]], "native array": [[678, "term-Native-Array"]], "nestable functions": [[678, "term-Nestable-Functions"]], "pipeline": [[678, "term-Pipeline"]], "primary functions": [[678, "term-Primary-Functions"]], "standalone functions": [[678, "term-Standalone-Functions"]], "submodule helper functions": [[678, "term-Submodule-Helper-Functions"]]}})