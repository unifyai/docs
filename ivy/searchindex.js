Search.setIndex({"docnames": ["docs/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/ivy.data_classes.array", "docs/data_classes/ivy.data_classes.container", "docs/framework/ivy.stateful", "docs/framework/stateful/ivy.stateful.activations", "docs/framework/stateful/ivy.stateful.converters", "docs/framework/stateful/ivy.stateful.helpers", "docs/framework/stateful/ivy.stateful.initializers", "docs/framework/stateful/ivy.stateful.layers", "docs/framework/stateful/ivy.stateful.module", "docs/framework/stateful/ivy.stateful.norms", "docs/framework/stateful/ivy.stateful.optimizers", "docs/framework/stateful/ivy.stateful.sequential", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/nested-array/ivy.nested_array", "docs/nested-array/nested_array/ivy.nested_array.nested_array", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/testing/ivy_tests.test_ivy.helpers", "docs/utilities/ivy.utils", "docs/utilities/utils/ivy.utils.assertions", "docs/utilities/utils/ivy.utils.backend", "docs/utilities/utils/ivy.utils.dynamic_import", "docs/utilities/utils/ivy.utils.exceptions", "docs/utilities/utils/ivy.utils.inspection", "docs/utilities/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["docs/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/ivy.data_classes.array.rst", "docs/data_classes/ivy.data_classes.container.rst", "docs/framework/ivy.stateful.rst", "docs/framework/stateful/ivy.stateful.activations.rst", "docs/framework/stateful/ivy.stateful.converters.rst", "docs/framework/stateful/ivy.stateful.helpers.rst", "docs/framework/stateful/ivy.stateful.initializers.rst", "docs/framework/stateful/ivy.stateful.layers.rst", "docs/framework/stateful/ivy.stateful.module.rst", "docs/framework/stateful/ivy.stateful.norms.rst", "docs/framework/stateful/ivy.stateful.optimizers.rst", "docs/framework/stateful/ivy.stateful.sequential.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/nested-array/ivy.nested_array.rst", "docs/nested-array/nested_array/ivy.nested_array.nested_array.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/testing/ivy_tests.test_ivy.helpers.rst", "docs/utilities/ivy.utils.rst", "docs/utilities/utils/ivy.utils.assertions.rst", "docs/utilities/utils/ivy.utils.backend.rst", "docs/utilities/utils/ivy.utils.dynamic_import.rst", "docs/utilities/utils/ivy.utils.exceptions.rst", "docs/utilities/utils/ivy.utils.inspection.rst", "docs/utilities/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "stateful", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "ivy", "deserialize", "gelu", "get", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "IfElse", "WhileLoop", "if_else", "while_loop", "_ivy_to_native", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "_check_complex128", "_check_float64", "_get_dtypes", "_get_function_list", "_get_functions_from_string", "_handle_nestable_dtype_info", "_is_valid_dtypes_attributes", "_lstrip_lines", "_nested_get", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "_get_devices", "_get_nvml_gpu_handle", "_is_valid_devices_attributes", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "fmod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "isreal", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "rad2deg", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "trunc_divide", "_all_dnd_combinations", "_dnd_dict_difference", "_dnd_dict_intersection", "_dnd_dict_union", "_get_devices_and_dtypes", "_is_valid_device_and_dtypes_attributes", "_parse_ellipsis", "_valid_attrib_combinations", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_show_func_wrapper_trace_mode", "get_tmp_dir", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "isin", "isscalar", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "value_is_nan", "vmap", "_arrays_to_float_variables", "_check_if_empty", "_get_duplicate_index_chains", "_get_native_variables_and_indices", "_get_native_y", "_get_required_float_variables", "_get_required_native_variables", "_get_y_and_ret_idxs", "_idxs_to_str", "_is_variable", "_non_finite_to_zero", "_process_func_ret_and_grads", "_set_duplicates", "_stop_grad_and_index", "_to_ivy", "_variable", "_variable_data", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "with_grads", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "_deconv_length", "_get_x_data_format", "_handle_padding", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "_reduce_loss", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "_calculate_out_shape", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "_compute_cost_and_update_grads", "_train_task", "_train_tasks", "_train_tasks_batched", "_train_tasks_with_for_loop", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "_check_bounds_and_get_shape", "_check_shapes_broadcastable", "_check_valid_scale", "_randint_check_dtype_and_bound", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "searchsorted", "sort", "_get_promoted_type_of_operands", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "nested_array", "Nested array", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Structs", "Test parameter flags", "Testing helpers", "helpers", "utils", "Assertions", "Backend", "Dynamic import", "Exceptions", "Inspection", "Verbosity", "Contents", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 92, 96, 121, 124, 136, 138, 139, 250, 252, 259, 284, 292, 311, 360, 361, 362, 364, 365, 366, 367, 372, 375, 376, 395, 397, 403, 414, 458, 469, 490, 494, 495, 506, 507, 513, 516, 517, 519, 520, 521, 530, 539, 546, 547, 549, 550, 551, 552, 555, 558, 561, 562, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 578, 580, 581, 587], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 520, 521, 524, 526, 527, 528, 529, 533, 534, 535, 537, 538, 540, 542, 543, 545, 547, 549, 550, 552, 554, 555, 556, 557, 559, 564, 565, 572, 574, 575, 576, 587], "data_class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "arraiarraywithactiv": [0, 45], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 524, 526, 527, 528, 529, 532, 533, 534, 535, 536, 539, 540, 541, 543, 544, 547, 548, 560, 579, 580, 581, 582, 583], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 87, 134, 197, 210, 211, 212, 213, 225, 272, 300, 310, 360, 361, 362, 363, 364, 365, 366, 370, 376, 378, 436, 492, 493, 494, 495, 502, 513, 517, 519, 520, 527, 530, 541, 543, 547, 548, 549, 553, 555, 557, 558, 561, 562, 563, 564, 566, 573, 580, 585, 587], "abc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 50, 51, 55, 262, 362, 365, 372, 475, 513, 568], "_abc_impl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "_abc_data": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "object": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 52, 53, 58, 60, 79, 83, 91, 112, 121, 124, 131, 134, 170, 220, 357, 360, 361, 362, 364, 365, 366, 372, 374, 460, 462, 464, 465, 466, 472, 473, 474, 475, 486, 513, 516, 517, 519, 520, 530, 544, 547, 548, 557, 560, 561, 562, 564, 568, 571, 580, 586], "gelu": [0, 22, 48, 357, 530], "approxim": [0, 6, 11, 22, 28, 29, 34, 48, 59, 176, 177, 179, 180, 181, 182, 191, 192, 197, 198, 210, 211, 212, 213, 225, 231, 232, 236, 237, 357, 363, 364, 368, 412, 415, 552, 560], "falsout": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 108, 110, 119, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 254, 255, 259, 260, 261, 263, 266, 267, 284, 292, 296, 297, 343, 344, 347, 349, 350, 351, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 491, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 521, 530, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 121, 124, 126, 127, 128, 129, 130, 132, 135, 145, 147, 153, 154, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 277, 280, 282, 283, 284, 286, 287, 289, 293, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 521, 526, 530, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 568, 570, 571], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 121, 124, 127, 128, 129, 130, 135, 155, 166, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 304, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 521, 536, 539, 540, 541, 543, 544, 549, 551, 552, 555, 556, 557, 558, 559, 562, 569, 570, 571, 575, 581], "method": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 121, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 352, 353, 354, 356, 360, 361, 363, 364, 365, 366, 368, 369, 372, 375, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 468, 469, 470, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 539, 541, 543, 544, 548, 549, 551, 552, 554, 555, 556, 557, 562, 563, 566, 567, 570, 571, 574, 581, 587], "variant": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 121, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 364, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 412, 415, 416, 417, 419, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 544, 551, 552, 564], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 121, 124, 127, 128, 129, 130, 134, 135, 152, 155, 164, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 276, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 303, 309, 310, 311, 313, 315, 316, 324, 325, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 459, 463, 464, 469, 470, 474, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "simpli": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 363, 364, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 415, 416, 417, 419, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 530, 539, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 559, 560, 561, 562, 564, 566, 570, 571, 574, 575, 581, 586], "wrap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 305, 309, 310, 311, 313, 315, 316, 323, 324, 343, 344, 347, 349, 350, 351, 353, 364, 365, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 415, 416, 417, 419, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 516, 530, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 559, 560, 562, 566, 568, 571, 574, 575, 576, 580, 581, 586, 587], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 112, 121, 122, 123, 124, 127, 128, 129, 130, 134, 135, 155, 157, 158, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 274, 275, 276, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 295, 296, 297, 302, 303, 305, 309, 310, 311, 313, 315, 316, 317, 320, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 459, 463, 464, 465, 467, 468, 469, 470, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 517, 521, 528, 530, 532, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 559, 565, 567, 568, 569, 570, 572, 573, 575, 577, 578, 579, 580, 581, 586, 587], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 364, 367, 372, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 415, 416, 417, 419, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 457, 468, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 530, 532, 533, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 580, 581, 582, 584], "docstr": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 121, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 343, 344, 347, 349, 350, 351, 353, 360, 361, 363, 364, 365, 368, 370, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 538, 539, 542, 546, 554, 555, 556, 560, 563], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 124, 127, 128, 129, 130, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 467, 468, 469, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 54, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 412, 414, 415, 416, 417, 419, 423, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 463, 466, 469, 470, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 530, 535, 537, 539, 540, 541, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 563, 568, 569, 570, 571, 572, 574, 575, 581], "minim": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 364, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 415, 416, 417, 419, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 552, 559, 561, 564, 566, 578, 586], "chang": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 364, 370, 372, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 415, 416, 417, 419, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 469, 474, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 516, 530, 534, 536, 539, 540, 541, 543, 545, 546, 547, 548, 549, 551, 552, 560, 561, 562, 563, 564, 566, 570, 574, 583, 586], "parametself": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 55, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 362, 364, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 530, 541, 544, 547, 553, 560, 561, 566, 568, 569, 570, 571], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 152, 154, 155, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 274, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 298, 302, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 458, 460, 463, 464, 465, 466, 468, 469, 470, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 521, 543, 544, 545, 547, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 574, 581, 584], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 79, 84, 85, 86, 87, 88, 90, 92, 96, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 143, 147, 154, 155, 157, 158, 160, 161, 164, 165, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 274, 275, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 307, 308, 309, 310, 311, 313, 315, 316, 324, 344, 345, 347, 349, 350, 351, 352, 353, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 423, 424, 426, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 456, 457, 458, 463, 464, 465, 467, 468, 469, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 549, 551, 553, 559, 560, 562, 563, 564, 566, 571], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 15, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 49, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 85, 90, 92, 96, 108, 109, 111, 114, 115, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 147, 154, 155, 157, 158, 160, 161, 164, 165, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 274, 275, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 296, 297, 298, 299, 302, 304, 305, 307, 309, 310, 311, 313, 315, 316, 320, 323, 324, 344, 345, 347, 349, 350, 351, 352, 353, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 384, 385, 386, 387, 393, 394, 397, 398, 399, 404, 405, 407, 408, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 456, 457, 458, 463, 464, 465, 467, 468, 469, 470, 474, 475, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 514, 516, 530, 535, 539, 540, 544, 547, 549, 551, 555, 556, 559, 560, 562, 563, 564], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 44, 46, 49, 50, 51, 52, 53, 54, 55, 59, 87, 90, 108, 120, 122, 123, 133, 134, 157, 158, 160, 164, 167, 168, 169, 170, 172, 174, 179, 187, 210, 211, 214, 215, 216, 217, 219, 220, 229, 233, 253, 264, 265, 272, 273, 282, 283, 292, 300, 301, 309, 310, 343, 344, 349, 350, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 394, 396, 397, 402, 420, 426, 429, 439, 440, 441, 445, 454, 455, 456, 457, 459, 460, 466, 467, 468, 470, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 494, 502, 517, 521, 534, 535, 536, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "version": [0, 6, 29, 59, 325, 364, 365, 368, 404, 405, 516, 530, 532, 533, 534, 540, 541, 546, 548, 549, 552, 561, 566, 586, 587], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 154, 155, 157, 158, 161, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 253, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 274, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 289, 290, 292, 293, 296, 297, 303, 307, 309, 310, 311, 313, 315, 316, 324, 325, 343, 344, 345, 347, 349, 350, 351, 353, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 463, 464, 465, 467, 468, 469, 470, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 539, 540, 541, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 562, 564, 566, 570, 575, 580], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 124, 126, 135, 147, 154, 165, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 257, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 293, 296, 297, 309, 310, 311, 313, 315, 316, 317, 324, 343, 344, 345, 347, 349, 350, 351, 353, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 463, 464, 467, 468, 469, 474, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 539, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 571, 574, 580, 586], "output": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 110, 134, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 253, 254, 255, 259, 260, 261, 263, 267, 284, 290, 296, 297, 298, 318, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 470, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 530, 537, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 568, 570, 571, 574, 575, 581], "write": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 296, 297, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 488, 489, 491, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 517, 530, 534, 538, 539, 541, 542, 543, 545, 546, 548, 549, 551, 552, 553, 556, 559, 560, 561, 563, 566, 568, 571, 580, 587], "result": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 134, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 290, 296, 297, 343, 344, 345, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 460, 463, 464, 466, 470, 474, 476, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 524, 530, 541, 543, 544, 546, 547, 548, 549, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 566, 569, 574, 581, 583], "It": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 296, 297, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 412, 413, 414, 415, 418, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 491, 495, 496, 498, 500, 501, 504, 506, 507, 509, 510, 511, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 578, 580, 581, 583, 584, 585, 586, 587], "must": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 55, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 296, 297, 325, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 524, 532, 534, 536, 538, 539, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 555, 556, 560, 562, 563, 564, 566, 570, 571, 581, 587], "have": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 121, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 296, 297, 343, 344, 347, 349, 350, 351, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 531, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "shape": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 52, 54, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 165, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 263, 266, 267, 275, 284, 290, 296, 297, 304, 312, 314, 322, 325, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 496, 498, 500, 501, 502, 504, 506, 507, 509, 510, 511, 513, 516, 530, 541, 547, 549, 550, 551, 552, 555, 559, 560, 561, 562, 563, 566, 568, 569, 570, 571], "broadcast": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 259, 260, 261, 266, 267, 284, 296, 297, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 476, 481, 482, 483, 484, 486, 487, 488, 489, 491, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 547, 549, 551, 552, 562, 563, 566], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 520, 521, 527, 528, 530, 540, 541, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 574, 581], "type": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 300, 301, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 520, 521, 524, 527, 530, 536, 539, 540, 541, 542, 543, 544, 547, 550, 551, 552, 554, 555, 557, 559, 561, 562, 563, 564, 566, 568, 569, 580, 581, 584], "retan": [0, 1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 34, 36, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 121, 124, 127, 130, 134, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 252, 254, 255, 263, 266, 275, 280, 282, 283, 284, 286, 287, 288, 289, 297, 307, 311, 315, 316, 317, 325, 345, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 463, 476, 482, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 520, 521, 530, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587], "element": [0, 2, 5, 6, 7, 10, 11, 13, 15, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 33, 34, 36, 38, 39, 40, 42, 45, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 84, 85, 93, 94, 119, 121, 124, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251, 254, 255, 266, 267, 290, 309, 310, 311, 315, 316, 356, 357, 360, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 378, 379, 393, 399, 401, 403, 404, 409, 414, 416, 417, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 457, 460, 466, 481, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 552, 561, 562, 564, 566, 584], "wise": [0, 5, 6, 11, 22, 28, 29, 34, 45, 46, 55, 59, 61, 62, 63, 64, 65, 66, 67, 175, 176, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 200, 201, 202, 203, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 235, 239, 357, 363, 364, 370, 399, 433, 564], "exampl": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 559, 560, 562, 563, 566, 568, 569, 570, 571, 573, 574, 577, 578, 581, 583, 586, 587], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 135, 154, 155, 159, 163, 164, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 268, 271, 272, 273, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 300, 301, 303, 306, 307, 309, 311, 313, 315, 316, 317, 324, 325, 344, 345, 346, 348, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 460, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 520, 524, 530, 544, 545, 547, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571], "1": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 119, 120, 121, 124, 129, 130, 135, 154, 155, 159, 162, 163, 165, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 268, 271, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 294, 296, 297, 307, 309, 310, 311, 313, 315, 316, 317, 325, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 469, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 521, 530, 533, 534, 540, 541, 543, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574], "2": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 51, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 119, 121, 129, 130, 135, 154, 155, 156, 159, 161, 163, 165, 167, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 268, 271, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 294, 296, 297, 307, 309, 311, 313, 317, 325, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 540, 541, 543, 545, 546, 547, 548, 549, 551, 553, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 571, 574, 586, 587], "0": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 82, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 108, 109, 110, 111, 119, 121, 124, 125, 129, 130, 135, 151, 154, 156, 159, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 253, 254, 255, 258, 259, 260, 262, 263, 266, 267, 268, 271, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 294, 296, 297, 303, 307, 309, 311, 313, 315, 316, 321, 324, 325, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 415, 417, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 469, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 524, 530, 541, 543, 545, 547, 548, 549, 551, 552, 553, 558, 559, 560, 561, 562, 563, 566, 568, 569, 570, 571, 574], "6": [0, 2, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 51, 59, 61, 65, 66, 74, 75, 84, 85, 88, 89, 92, 96, 109, 110, 119, 121, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 252, 254, 255, 258, 259, 260, 266, 267, 282, 283, 284, 297, 309, 311, 313, 317, 343, 344, 345, 346, 347, 348, 349, 351, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 409, 410, 411, 414, 417, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 458, 468, 475, 476, 481, 482, 483, 484, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 530, 543, 545, 547, 548, 551, 558, 562, 564, 566, 568, 569, 570], "5": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 109, 110, 111, 119, 121, 129, 130, 135, 155, 163, 167, 170, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 252, 253, 254, 255, 258, 259, 260, 261, 263, 266, 267, 271, 280, 282, 283, 284, 296, 297, 309, 311, 313, 317, 325, 343, 344, 346, 347, 348, 349, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 413, 414, 415, 417, 419, 420, 421, 423, 424, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 483, 484, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 540, 541, 543, 545, 547, 551, 555, 558, 561, 562, 568, 569, 570], "y": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 79, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 119, 121, 124, 135, 151, 155, 159, 163, 164, 165, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 254, 255, 258, 259, 261, 262, 263, 266, 267, 268, 276, 280, 282, 283, 284, 286, 287, 289, 290, 294, 300, 301, 303, 306, 307, 309, 311, 313, 315, 316, 317, 321, 324, 325, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 385, 387, 389, 392, 393, 394, 398, 399, 400, 405, 407, 409, 410, 412, 413, 414, 415, 417, 419, 420, 421, 423, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 460, 463, 464, 466, 474, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 545, 547, 551, 558, 560, 561, 562, 563, 564, 566, 568], "print": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 126, 128, 129, 130, 135, 147, 151, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 271, 272, 273, 275, 276, 280, 282, 283, 284, 286, 287, 288, 289, 292, 295, 296, 297, 300, 301, 303, 306, 307, 309, 311, 313, 315, 316, 317, 321, 324, 325, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 402, 405, 407, 409, 410, 412, 413, 414, 415, 417, 419, 420, 421, 423, 426, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 540, 541, 547, 551, 561, 562, 566, 568, 569, 570], "138": [0, 59, 357], "165": [0, 59, 357, 367, 394], "4": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 55, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 85, 86, 87, 88, 89, 90, 92, 96, 109, 110, 111, 119, 121, 124, 129, 130, 135, 155, 156, 163, 167, 170, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 258, 259, 260, 261, 263, 266, 267, 271, 280, 282, 283, 284, 290, 296, 297, 309, 311, 313, 317, 325, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 530, 534, 539, 540, 545, 547, 548, 551, 558, 561, 562, 564, 566, 568, 569, 570, 571, 580, 586, 587], "leaky_relu": [0, 22, 357], "alpha": [0, 5, 6, 22, 28, 29, 48, 61, 178, 235, 357, 363, 364, 560, 561], "float": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 19, 22, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 42, 45, 48, 51, 54, 55, 61, 67, 73, 74, 75, 80, 82, 84, 85, 86, 87, 91, 95, 108, 112, 114, 116, 121, 125, 129, 134, 135, 138, 144, 156, 164, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 253, 254, 255, 263, 272, 273, 276, 280, 300, 301, 303, 309, 310, 324, 343, 344, 347, 349, 350, 351, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 378, 393, 396, 397, 398, 400, 403, 404, 405, 407, 410, 411, 412, 415, 416, 417, 418, 419, 423, 426, 429, 430, 431, 454, 455, 456, 463, 476, 483, 484, 492, 493, 494, 495, 500, 501, 503, 504, 505, 506, 507, 508, 509, 516, 543, 547, 549, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 568, 570], "slope": [0, 6, 22, 29, 48, 61, 357, 364], "neg": [0, 5, 6, 11, 13, 15, 20, 22, 28, 29, 34, 36, 38, 43, 48, 61, 73, 82, 204, 205, 225, 228, 357, 360, 363, 364, 368, 370, 374, 379, 401, 419, 423, 425, 426, 434, 436, 437, 441, 483, 510, 511, 547, 556, 559], "section": [0, 6, 17, 29, 61, 364, 376, 492, 493, 494, 495, 530, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 569, 570, 576, 583, 586], "leaki": [0, 22, 48, 61, 357], "relu": [0, 6, 21, 22, 29, 48, 61, 357, 364, 530, 561, 569, 570], "39": [0, 5, 6, 15, 22, 28, 29, 31, 38, 61, 180, 197, 210, 212, 214, 343, 357, 363, 364, 366, 368, 378, 414, 483, 502], "85": [0, 15, 22, 28, 31, 33, 38, 46, 61, 179, 188, 189, 226, 309, 347, 357, 363, 365, 366, 367, 374, 394, 482, 483, 484], "17": [0, 6, 22, 28, 29, 30, 31, 33, 38, 46, 61, 62, 87, 178, 194, 214, 221, 260, 283, 343, 345, 357, 360, 363, 364, 365, 366, 367, 368, 372, 374, 384, 393, 394, 402, 420, 465, 482, 483, 484, 486, 547, 551], "log_softmax": [0, 22, 357], "axi": [0, 2, 6, 7, 11, 12, 13, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 34, 35, 36, 39, 41, 42, 43, 62, 66, 86, 87, 90, 169, 259, 266, 325, 357, 360, 362, 364, 365, 367, 368, 369, 370, 374, 375, 377, 378, 379, 392, 396, 399, 402, 410, 425, 426, 430, 431, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 486, 487, 488, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 524, 547, 549, 551, 553, 555, 556, 559, 560, 562, 564, 566, 568, 571, 573], "int": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 62, 66, 67, 74, 75, 82, 84, 85, 86, 87, 90, 93, 94, 110, 117, 120, 121, 124, 130, 145, 161, 162, 163, 169, 170, 178, 184, 185, 186, 187, 188, 189, 235, 249, 259, 260, 261, 263, 266, 267, 275, 294, 296, 309, 325, 343, 344, 345, 349, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 401, 402, 410, 411, 421, 423, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 460, 463, 464, 466, 468, 469, 474, 475, 476, 481, 482, 483, 484, 485, 486, 487, 488, 490, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 547, 549, 550, 551, 553, 554, 555, 556, 559, 561, 562, 563, 564, 566, 571], "ax": [0, 6, 11, 13, 16, 19, 20, 22, 29, 34, 36, 39, 42, 43, 45, 62, 66, 169, 259, 325, 362, 364, 365, 368, 370, 375, 378, 379, 410, 418, 421, 422, 426, 435, 437, 438, 441, 443, 445, 448, 487, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 549, 551, 562, 563, 566, 568], "along": [0, 2, 6, 7, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 62, 66, 86, 87, 169, 259, 266, 360, 362, 364, 365, 368, 369, 370, 371, 374, 375, 377, 378, 379, 414, 423, 425, 426, 430, 431, 434, 437, 438, 439, 441, 442, 444, 446, 447, 454, 455, 456, 486, 487, 488, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 530, 539, 551, 559, 563, 564, 566, 580], "which": [0, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 109, 111, 113, 119, 121, 124, 126, 129, 135, 147, 155, 159, 163, 165, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 258, 259, 260, 261, 263, 266, 267, 268, 271, 275, 280, 282, 283, 284, 286, 287, 289, 290, 294, 295, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 393, 394, 396, 397, 398, 399, 401, 402, 405, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 423, 425, 426, 429, 430, 431, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 462, 463, 464, 465, 470, 472, 473, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 528, 530, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587], "should": [0, 2, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 22, 23, 25, 28, 29, 30, 31, 33, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 66, 88, 90, 93, 94, 110, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 253, 284, 325, 344, 347, 349, 350, 351, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 390, 391, 397, 398, 399, 400, 402, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 440, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 506, 508, 509, 516, 517, 531, 533, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 576, 577, 580, 582, 587], "comput": [0, 5, 6, 7, 8, 10, 11, 12, 17, 19, 22, 23, 28, 29, 30, 31, 33, 34, 35, 42, 62, 66, 169, 178, 184, 187, 189, 195, 196, 201, 202, 203, 208, 209, 215, 216, 217, 218, 220, 223, 227, 228, 253, 254, 255, 343, 345, 346, 348, 352, 353, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 376, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 398, 399, 403, 404, 405, 408, 409, 410, 414, 416, 418, 419, 425, 426, 429, 430, 431, 436, 463, 492, 493, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 516, 530, 533, 534, 540, 547, 548, 549, 556, 558, 560, 562, 564, 566, 569, 574, 575, 576, 578, 580, 581, 583, 584, 586], "98": [0, 8, 15, 22, 28, 31, 38, 62, 189, 192, 232, 347, 357, 363, 366, 368, 372, 375, 378, 414, 458, 482, 484, 491, 502], "3": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 82, 85, 86, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 119, 121, 129, 130, 135, 152, 154, 155, 165, 167, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 296, 297, 307, 309, 313, 316, 317, 325, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 530, 540, 543, 544, 545, 546, 547, 549, 551, 553, 558, 561, 562, 564, 566, 568, 569, 570, 571, 587], "37": [0, 5, 6, 22, 28, 29, 45, 62, 180, 188, 229, 232, 236, 363, 364, 367, 368, 372, 374, 394, 411, 465, 483], "35": [0, 10, 22, 28, 29, 33, 34, 38, 62, 182, 233, 363, 364, 367, 368, 375, 378, 394, 397, 399, 483, 491, 502], "0719": [0, 22, 62], "62": [0, 22, 29, 37, 38, 62, 232, 363, 373, 374, 476, 482, 484], "221": [0, 62], "7": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 61, 62, 63, 64, 65, 73, 74, 75, 86, 89, 90, 121, 124, 156, 175, 178, 180, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 202, 203, 207, 208, 209, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 233, 236, 237, 238, 239, 252, 254, 255, 259, 260, 282, 283, 284, 290, 296, 297, 309, 311, 343, 344, 346, 347, 348, 349, 351, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 384, 385, 387, 389, 392, 393, 394, 396, 397, 399, 400, 401, 402, 405, 409, 411, 414, 417, 419, 420, 421, 423, 424, 429, 430, 431, 433, 436, 437, 442, 444, 445, 447, 458, 465, 476, 481, 482, 483, 484, 486, 491, 492, 494, 496, 498, 500, 501, 502, 504, 506, 508, 509, 541, 547, 548, 551, 556, 558, 559, 562], "82": [0, 5, 31, 38, 62, 180, 343, 366, 483, 484, 553], "mish": [0, 22, 48, 357], "30340147": [0, 63, 357], "86509842": [0, 22, 63, 357], "sigmoid": [0, 6, 22, 29, 58, 60, 357, 364, 530, 566, 569, 570], "same": [0, 1, 2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 18, 19, 23, 25, 26, 28, 29, 31, 33, 34, 36, 38, 40, 42, 45, 52, 65, 73, 81, 85, 87, 88, 90, 92, 93, 94, 96, 108, 109, 110, 121, 124, 169, 175, 176, 177, 178, 179, 181, 185, 187, 190, 199, 222, 224, 228, 229, 230, 238, 290, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 376, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 400, 402, 403, 404, 405, 407, 409, 411, 413, 414, 415, 416, 418, 419, 423, 425, 434, 437, 438, 440, 441, 443, 444, 454, 455, 470, 484, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 530, 532, 534, 536, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 570, 571, 574, 577, 579, 586, 587], "269": [0, 65, 357], "731": [0, 65, 357], "881": [0, 5, 28, 65, 180, 193, 226, 357, 363], "softmax": [0, 10, 21, 22, 33, 48, 357, 367, 396, 397, 530], "422": [0, 66, 357], "155": [0, 33, 66, 357, 367, 394], "softplu": [0, 22, 48, 357, 564], "beta": [0, 6, 14, 22, 29, 37, 67, 357, 364, 373, 476, 564], "threshold": [0, 5, 6, 22, 28, 29, 67, 219, 220, 357, 363, 364, 564], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 147, 151, 152, 153, 154, 155, 156, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 268, 271, 275, 280, 282, 283, 284, 286, 287, 289, 290, 292, 296, 297, 307, 309, 310, 311, 312, 313, 314, 315, 316, 324, 325, 343, 344, 345, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 544, 547, 549, 550, 551, 553, 554, 555, 556, 559, 563, 564, 566, 571], "3461": [0, 22, 67, 357], "6491": [0, 22, 67, 357], "535": [0, 22, 67, 357], "42": [0, 15, 22, 31, 37, 38, 67, 188, 343, 347, 357, 363, 364, 366, 368, 373, 374, 378, 410, 414, 476, 481, 482, 483, 484, 485, 500, 502, 530, 566, 571], "22": [0, 5, 6, 7, 15, 19, 22, 29, 30, 33, 38, 62, 67, 189, 260, 297, 324, 357, 363, 364, 367, 368, 372, 375, 378, 393, 394, 402, 407, 414, 465, 475, 482, 483, 484, 491, 501, 502, 547], "09": [0, 5, 31, 38, 67, 225, 234, 343, 357, 363, 366, 367, 397, 483], "31": [0, 5, 6, 28, 29, 30, 33, 38, 62, 67, 87, 188, 214, 221, 254, 357, 360, 363, 364, 365, 368, 394, 420, 483, 484, 569], "55": [0, 38, 67, 188, 238, 282, 363, 365, 368, 374, 378, 407, 414, 420, 483, 484, 502, 543], "13": [0, 5, 6, 10, 15, 19, 28, 29, 30, 31, 33, 36, 38, 42, 45, 67, 124, 156, 178, 189, 192, 200, 225, 233, 254, 255, 259, 260, 283, 301, 309, 343, 357, 361, 362, 363, 364, 365, 366, 367, 368, 370, 375, 376, 378, 384, 385, 393, 394, 397, 402, 414, 420, 447, 482, 483, 484, 491, 492, 500, 501, 502, 547, 551], "collect": [1, 23, 24, 48, 52, 54, 55, 357, 362, 365, 366, 367, 369, 372, 373, 374, 470, 548, 553, 558, 561, 562, 573, 578, 580, 583], "accept": [1, 2, 5, 11, 24, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 260, 261, 266, 275, 280, 282, 284, 296, 311, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 540, 541, 544, 547, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 575, 578], "_to_ivi": 1, "ani": [1, 2, 4, 5, 6, 7, 11, 20, 21, 25, 27, 28, 29, 30, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 111, 112, 127, 130, 134, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 258, 259, 260, 261, 262, 266, 275, 280, 282, 286, 288, 310, 316, 317, 325, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 460, 463, 464, 466, 467, 474, 476, 484, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 514, 517, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "_to_n": 1, "inplac": [1, 7, 23, 30, 49, 55, 250, 252, 281, 284, 285, 365, 372, 464, 465, 469, 474, 475, 520, 521, 542, 544, 551, 555, 557, 560, 564, 568, 570], "args_to_ivi": 1, "arg": [1, 23, 49, 53, 169, 317, 360, 362, 364, 365, 514, 516, 524, 530, 544, 553, 558, 560, 564, 566, 570], "include_deriv": [1, 24, 372, 458, 469, 516], "kwarg": [1, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 53, 292, 317, 360, 364, 365, 514, 516, 530, 544, 553, 560, 564, 566, 570], "keyword": [1, 2, 23, 46, 53, 88, 250, 253, 292, 317, 360, 364, 365, 372, 378, 463, 508, 514, 516, 539, 544, 547, 549, 550, 557, 559, 560, 561, 562, 563, 564, 569], "form": [1, 2, 11, 23, 25, 34, 51, 74, 75, 89, 93, 94, 249, 312, 314, 360, 364, 365, 367, 368, 372, 398, 400, 402, 403, 404, 405, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 458, 469, 533, 535, 556, 562, 564, 570, 571, 580, 581, 586], "all": [1, 2, 6, 7, 10, 11, 13, 15, 20, 21, 23, 24, 28, 29, 30, 33, 34, 36, 38, 43, 44, 50, 51, 73, 90, 93, 94, 159, 165, 220, 248, 251, 268, 294, 295, 309, 315, 316, 325, 345, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 379, 393, 395, 412, 417, 418, 421, 426, 437, 441, 443, 454, 455, 456, 457, 458, 459, 468, 469, 470, 471, 481, 484, 489, 514, 516, 520, 524, 528, 530, 532, 533, 534, 535, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 586, 587], "nest": [1, 23, 24, 46, 50, 53, 55, 313, 325, 345, 356, 365, 366, 371, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 544, 546, 547, 556, 558, 563, 569, 570, 574, 575, 580], "otherwis": [1, 2, 3, 5, 6, 7, 10, 11, 13, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 53, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 85, 86, 87, 90, 92, 96, 108, 109, 111, 112, 114, 115, 116, 117, 118, 127, 130, 134, 135, 154, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 317, 324, 347, 353, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 375, 377, 378, 379, 384, 385, 386, 387, 393, 394, 397, 398, 399, 400, 405, 407, 409, 410, 412, 414, 416, 417, 419, 423, 425, 426, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 470, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 530, 541, 544, 547, 549, 550, 551, 556, 557, 562, 566], "argument": [1, 2, 5, 6, 7, 11, 23, 24, 28, 29, 30, 46, 49, 53, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 250, 252, 253, 258, 260, 261, 266, 275, 280, 282, 284, 292, 296, 297, 311, 316, 317, 325, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 463, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 521, 528, 530, 532, 539, 542, 543, 544, 545, 546, 547, 551, 552, 554, 556, 557, 561, 562, 563, 564, 566, 568, 569, 575, 580], "ar": [1, 2, 5, 6, 7, 11, 13, 15, 16, 23, 25, 28, 29, 30, 34, 36, 38, 39, 45, 46, 50, 51, 53, 56, 73, 85, 87, 90, 159, 163, 165, 169, 191, 193, 216, 217, 226, 229, 231, 236, 248, 251, 252, 253, 268, 274, 278, 281, 285, 294, 295, 302, 311, 320, 345, 356, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 393, 394, 399, 403, 404, 405, 409, 410, 412, 415, 419, 420, 424, 425, 426, 433, 434, 437, 441, 443, 458, 463, 468, 469, 470, 482, 483, 484, 487, 488, 489, 490, 492, 494, 514, 516, 521, 524, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587], "unchang": [1, 6, 364, 367, 393], "iter": [1, 7, 13, 21, 23, 30, 36, 44, 46, 169, 248, 292, 362, 364, 365, 370, 372, 435, 439, 446, 448, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 475, 534, 547, 566, 569], "The": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 83, 85, 87, 90, 92, 93, 94, 96, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 126, 128, 129, 132, 133, 135, 136, 138, 139, 140, 141, 147, 151, 152, 153, 154, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 273, 275, 276, 279, 280, 282, 283, 284, 286, 287, 288, 289, 293, 296, 297, 300, 301, 303, 306, 309, 310, 311, 312, 313, 314, 315, 316, 324, 343, 344, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 521, 530, 531, 532, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "posit": [1, 5, 6, 7, 11, 13, 28, 29, 30, 34, 36, 49, 82, 121, 175, 204, 205, 227, 228, 253, 263, 325, 358, 360, 361, 363, 364, 365, 368, 370, 374, 375, 379, 398, 401, 423, 436, 441, 485, 490, 510, 511, 516, 521, 530, 539, 541, 543, 547, 557, 560, 562, 563, 569, 573, 582], "check": [1, 3, 7, 23, 26, 30, 50, 112, 113, 122, 123, 126, 128, 129, 132, 147, 157, 158, 164, 174, 252, 262, 264, 265, 274, 280, 286, 287, 288, 289, 302, 311, 320, 324, 361, 362, 364, 365, 368, 372, 404, 405, 457, 458, 467, 468, 469, 514, 530, 537, 538, 539, 540, 541, 543, 547, 548, 551, 553, 556, 557, 560, 561, 562, 563, 565, 566, 568, 569, 570], "dict": [1, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 135, 154, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 292, 296, 297, 309, 310, 311, 313, 315, 316, 324, 353, 357, 362, 364, 365, 372, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 458, 460, 463, 464, 465, 466, 468, 469, 470, 474, 475, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 516, 517, 544, 547, 554, 569, 570, 575], "recurs": [1, 23, 24, 122, 123, 157, 158, 264, 265, 361, 362, 365, 372, 457, 458, 467, 468, 469, 540, 543, 546, 547, 556, 570, 574], "deriv": [1, 2, 6, 8, 24, 25, 29, 31, 53, 55, 56, 81, 85, 92, 96, 343, 344, 347, 348, 349, 350, 351, 360, 364, 366, 372, 458, 469, 549, 550, 568, 570], "from": [1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 38, 39, 42, 43, 44, 46, 49, 50, 51, 52, 53, 55, 73, 75, 81, 83, 84, 85, 88, 89, 92, 96, 111, 129, 134, 135, 154, 159, 163, 168, 169, 193, 226, 233, 253, 258, 266, 267, 271, 295, 303, 313, 325, 344, 349, 354, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 384, 392, 393, 396, 402, 419, 423, 424, 425, 434, 437, 440, 443, 454, 455, 456, 458, 469, 470, 471, 481, 482, 483, 484, 488, 491, 492, 494, 500, 501, 506, 507, 508, 509, 510, 511, 514, 516, 521, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 587], "tupl": [1, 2, 3, 6, 7, 10, 11, 13, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 51, 53, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 85, 89, 90, 92, 96, 109, 110, 111, 122, 123, 124, 128, 129, 134, 135, 141, 154, 157, 158, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 271, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 343, 344, 345, 347, 349, 353, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 403, 404, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 421, 422, 423, 426, 429, 430, 431, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 447, 448, 454, 455, 456, 457, 458, 460, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 481, 482, 483, 484, 486, 489, 490, 492, 493, 494, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 544, 549, 553, 554, 555, 561, 562, 566, 569, 570, 574], "list": [1, 2, 3, 6, 7, 10, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 85, 88, 89, 90, 92, 96, 109, 111, 124, 128, 129, 135, 154, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 250, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 268, 275, 280, 282, 283, 284, 286, 287, 289, 292, 296, 297, 309, 310, 311, 313, 315, 316, 317, 324, 325, 347, 352, 353, 354, 356, 357, 360, 361, 362, 364, 365, 366, 368, 370, 372, 373, 375, 376, 377, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 421, 423, 429, 430, 431, 433, 434, 437, 440, 441, 442, 443, 444, 447, 448, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 474, 475, 476, 481, 482, 483, 484, 486, 489, 490, 492, 493, 494, 495, 496, 497, 500, 501, 504, 506, 507, 509, 510, 511, 513, 514, 516, 521, 524, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 560, 561, 562, 563, 566, 569, 570, 571, 574, 580, 581, 586], "istr": [1, 2, 6, 7, 10, 11, 13, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 88, 90, 92, 96, 106, 109, 111, 113, 114, 115, 116, 120, 121, 124, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 147, 151, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 257, 259, 260, 261, 263, 266, 267, 270, 275, 280, 282, 283, 284, 286, 287, 289, 293, 296, 297, 299, 306, 309, 310, 311, 313, 315, 316, 324, 345, 353, 357, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 456, 463, 464, 474, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 502, 504, 506, 507, 509, 510, 511, 516, 517, 519, 521, 549, 550, 553, 554, 560, 563, 566, 571], "kei": [1, 6, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 50, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 252, 254, 255, 256, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 364, 365, 367, 371, 372, 384, 385, 386, 387, 393, 394, 396, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 460, 466, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 520, 530, 546, 547, 548, 554, 560, 561, 562, 569, 580, 583, 587], "word": [1, 49, 73, 360, 374, 484, 547, 560, 575], "convert": [1, 2, 5, 24, 25, 28, 74, 75, 89, 106, 107, 151, 152, 153, 154, 164, 171, 174, 193, 226, 298, 312, 314, 315, 316, 318, 360, 361, 362, 363, 364, 365, 368, 372, 427, 458, 469, 470, 516, 530, 534, 539, 544, 557, 558, 560, 562, 566, 574, 575, 578, 579, 586], "args_to_n": [1, 559], "cont_inplac": 1, "nativ": [1, 2, 4, 7, 24, 27, 30, 45, 49, 89, 106, 107, 113, 114, 115, 116, 117, 118, 131, 134, 152, 153, 154, 155, 164, 171, 174, 284, 286, 289, 295, 314, 360, 361, 362, 364, 365, 513, 516, 521, 530, 549, 553, 557, 559, 560, 561, 562, 566, 568, 569, 575, 578, 587], "backend": [1, 2, 6, 7, 11, 23, 29, 30, 34, 49, 53, 55, 79, 122, 123, 126, 147, 157, 158, 160, 162, 172, 252, 264, 265, 281, 284, 285, 293, 311, 314, 360, 361, 362, 364, 365, 368, 419, 514, 516, 517, 530, 532, 538, 539, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 565, 567, 568, 571, 575, 580, 583, 586, 587], "framework": [1, 7, 49, 55, 126, 147, 160, 162, 172, 257, 281, 285, 311, 314, 361, 362, 365, 372, 459, 514, 516, 517, 521, 532, 533, 534, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 553, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 568, 571, 573, 574, 575, 576, 577, 578, 579, 581, 584], "updat": [1, 7, 8, 23, 30, 31, 49, 55, 284, 296, 297, 343, 344, 347, 349, 350, 351, 365, 366, 367, 371, 372, 393, 395, 454, 455, 464, 465, 469, 474, 475, 521, 530, 539, 540, 541, 542, 543, 544, 547, 548, 549, 551, 555, 557, 558, 560, 561, 562, 564, 566, 568, 569, 571, 574], "contain": [1, 2, 3, 5, 6, 7, 11, 12, 13, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 155, 157, 158, 159, 163, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 262, 263, 266, 267, 274, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 296, 297, 302, 303, 309, 310, 311, 313, 315, 316, 320, 324, 325, 343, 344, 345, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 460, 464, 465, 466, 470, 474, 475, 476, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 520, 521, 530, 532, 536, 537, 539, 540, 542, 543, 544, 546, 548, 549, 551, 552, 555, 556, 557, 558, 559, 562, 564, 565, 566, 567, 570, 574, 575, 580, 581, 586], "place": [1, 2, 5, 6, 7, 11, 13, 23, 25, 27, 28, 29, 30, 36, 55, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 111, 127, 130, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 260, 261, 266, 275, 280, 282, 283, 284, 296, 311, 316, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 536, 538, 541, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 571, 575, 582], "to_ivi": [1, 24, 372, 470], "frontend": [1, 299, 365, 516, 517, 521, 530, 538, 541, 542, 548, 549, 553, 558, 562, 563, 564, 565, 567, 575, 580], "If": [1, 2, 3, 5, 6, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 50, 51, 53, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 135, 154, 168, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 290, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 345, 347, 353, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 393, 394, 397, 398, 399, 401, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 429, 430, 431, 433, 434, 436, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 469, 470, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 530, 532, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "set": [1, 6, 7, 10, 11, 16, 18, 19, 23, 29, 30, 33, 34, 39, 41, 42, 50, 51, 52, 55, 136, 137, 138, 139, 140, 154, 166, 167, 168, 169, 182, 248, 252, 259, 284, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 319, 361, 362, 363, 364, 365, 367, 368, 372, 374, 375, 377, 378, 393, 399, 410, 412, 415, 418, 419, 457, 464, 467, 468, 469, 474, 475, 485, 487, 488, 492, 494, 495, 496, 498, 507, 509, 516, 521, 532, 535, 541, 542, 543, 544, 547, 548, 549, 550, 551, 553, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 578, 579, 580, 581, 582, 584, 587], "leaf": [1, 23, 42, 372, 467, 468, 470, 501, 547, 556, 569], "within": [1, 6, 29, 73, 360, 364, 374, 484, 530, 539, 541, 544, 546, 548, 560, 561, 562, 570, 574, 576, 577, 581], "nativearraimanner": [1, 24, 372, 469, 532, 540, 550, 552, 560, 563, 569, 573, 574, 576, 578, 586, 587], "travers": [1, 24, 372, 469, 547, 549, 553, 566], "lowest": [1, 15, 24, 38, 372, 374, 469, 482, 556, 574, 575, 577, 581, 585], "leav": [1, 24, 26, 28, 29, 30, 33, 34, 36, 42, 46, 121, 124, 194, 263, 313, 370, 372, 389, 397, 402, 419, 435, 439, 444, 446, 447, 457, 458, 467, 468, 469, 470, 500, 501, 520, 530, 539, 547, 549, 551, 552, 555, 556, 559, 560, 562, 569, 570], "search": [1, 6, 24, 29, 487, 488, 521, 532, 538, 540, 546, 547, 551, 562, 563], "its": [1, 3, 6, 13, 23, 26, 30, 36, 50, 109, 114, 115, 116, 117, 118, 169, 263, 314, 361, 362, 364, 365, 368, 370, 372, 409, 436, 440, 441, 445, 463, 516, 520, 530, 539, 540, 541, 544, 546, 548, 549, 552, 557, 558, 560, 561, 562, 563, 564, 566, 571, 574, 575, 579, 580, 586], "case": [1, 2, 6, 7, 13, 19, 23, 30, 36, 46, 52, 53, 55, 88, 152, 164, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 192, 197, 198, 199, 210, 211, 212, 213, 214, 216, 225, 228, 229, 230, 231, 232, 233, 236, 237, 238, 284, 296, 297, 360, 362, 363, 364, 365, 368, 370, 372, 378, 417, 440, 460, 466, 503, 504, 505, 507, 508, 509, 530, 533, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 570, 571, 574, 579, 583], "to_n": [1, 24, 566], "item": [1, 7, 21, 23, 29, 30, 53, 115, 154, 256, 266, 267, 277, 309, 310, 354, 361, 362, 365, 366, 372, 462, 463, 464, 465, 469, 474, 475, 530, 539, 547, 549, 566, 568, 569, 571], "mayb": [1, 530, 540, 548, 566, 568], "_arraywithcr": [2, 45], "asarrai": [2, 6, 7, 25, 29, 30, 74, 259, 275, 282, 283, 309, 360, 364, 365, 367, 376, 384, 493, 557, 559, 560, 561], "copi": [2, 3, 4, 6, 7, 13, 23, 25, 26, 27, 29, 30, 36, 74, 75, 79, 83, 108, 170, 309, 315, 316, 360, 361, 362, 364, 365, 370, 372, 377, 436, 437, 438, 440, 442, 443, 445, 447, 458, 498, 540, 541, 543, 545, 548, 549, 552, 560, 561, 566, 573, 574], "dtype": [2, 3, 6, 7, 10, 11, 15, 16, 19, 25, 26, 29, 30, 33, 34, 38, 39, 42, 45, 51, 52, 53, 54, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 165, 263, 264, 265, 267, 284, 315, 360, 361, 362, 364, 365, 367, 368, 374, 375, 377, 378, 379, 386, 393, 410, 426, 482, 483, 484, 487, 488, 489, 497, 498, 500, 501, 506, 508, 510, 511, 513, 514, 516, 524, 530, 543, 545, 549, 550, 551, 554, 556, 557, 559, 560, 561, 562, 563, 566, 568], "devic": [2, 6, 15, 23, 25, 29, 38, 45, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 250, 264, 265, 360, 364, 365, 374, 481, 482, 483, 484, 513, 514, 516, 517, 530, 533, 541, 542, 545, 549, 553, 556, 557, 561, 562, 563, 564, 566, 571, 574, 575, 579, 580, 582, 583, 584, 585], "data": [2, 5, 6, 7, 10, 11, 13, 15, 16, 17, 18, 19, 20, 23, 25, 28, 29, 30, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 51, 52, 53, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 147, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 263, 284, 286, 287, 289, 311, 360, 362, 363, 364, 365, 367, 368, 370, 374, 375, 377, 378, 379, 383, 390, 391, 393, 394, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 434, 437, 438, 440, 441, 443, 444, 448, 482, 483, 484, 486, 487, 488, 490, 491, 496, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 521, 524, 530, 531, 533, 540, 542, 543, 544, 547, 550, 552, 555, 556, 557, 559, 561, 563, 564, 566, 568, 575, 580, 581, 582, 584, 585, 586], "can": [2, 3, 6, 11, 13, 15, 17, 25, 26, 29, 34, 36, 38, 40, 74, 75, 87, 89, 111, 152, 167, 168, 169, 290, 325, 345, 360, 361, 362, 364, 365, 366, 368, 370, 374, 402, 409, 419, 423, 440, 444, 482, 483, 484, 492, 516, 521, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 586, 587], "includ": [2, 6, 7, 11, 16, 19, 20, 23, 25, 28, 29, 30, 34, 39, 42, 43, 51, 52, 54, 73, 74, 75, 86, 87, 89, 201, 280, 324, 360, 364, 365, 368, 372, 374, 375, 378, 379, 403, 424, 426, 457, 484, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 528, 530, 533, 539, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 573, 574, 577, 578, 580, 582, 585, 586, 587], "ndarrai": [2, 6, 7, 25, 29, 74, 75, 89, 315, 360, 364, 365, 539, 544, 549, 550, 555, 559, 560, 561, 563, 564, 566, 568, 571, 575], "boolean": [2, 3, 5, 6, 7, 13, 16, 19, 23, 25, 26, 28, 29, 30, 36, 39, 42, 45, 46, 74, 75, 79, 84, 108, 124, 126, 128, 129, 131, 147, 160, 172, 184, 185, 186, 187, 188, 189, 215, 216, 217, 218, 248, 251, 271, 280, 281, 285, 286, 287, 288, 289, 290, 298, 302, 304, 305, 324, 352, 356, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 378, 440, 454, 455, 467, 489, 491, 503, 505, 521, 547, 560, 562, 564], "indic": [2, 6, 7, 10, 11, 13, 14, 16, 17, 18, 23, 25, 26, 29, 30, 33, 34, 36, 37, 39, 40, 41, 50, 52, 53, 74, 75, 90, 124, 128, 129, 230, 251, 266, 267, 271, 296, 297, 325, 345, 360, 363, 364, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 384, 386, 387, 388, 389, 392, 426, 440, 441, 457, 460, 462, 464, 465, 466, 468, 472, 473, 474, 475, 476, 481, 487, 488, 489, 490, 492, 494, 496, 497, 498, 516, 517, 524, 528, 548, 554, 555, 558, 560, 571], "nativedtyp": [2, 3, 6, 10, 11, 15, 16, 19, 25, 29, 34, 38, 39, 42, 51, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 131, 133, 137, 147, 360, 361, 364, 367, 368, 374, 375, 377, 378, 393, 426, 482, 483, 484, 487, 488, 497, 500, 501, 506, 508, 549, 550, 555, 563, 566], "datatyp": [2, 23, 25, 75, 85, 89, 113, 133, 137, 360, 361, 514, 563], "infer": [2, 6, 7, 10, 13, 25, 29, 30, 33, 36, 73, 75, 81, 84, 85, 89, 92, 96, 114, 115, 116, 117, 118, 275, 307, 360, 361, 364, 365, 367, 370, 393, 440, 542, 545, 546, 549, 550, 557, 562, 566, 571, 578, 579, 582, 584], "nativedevic": [2, 4, 6, 15, 25, 27, 29, 38, 51, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 152, 153, 154, 155, 156, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 360, 362, 364, 374, 481, 482, 483, 484, 549, 550, 553, 555, 563], "creat": [2, 6, 15, 23, 25, 29, 34, 38, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 313, 325, 355, 360, 364, 365, 366, 374, 414, 481, 482, 483, 484, 486, 516, 521, 533, 535, 536, 539, 540, 541, 544, 546, 548, 549, 550, 553, 557, 559, 560, 561, 562, 564, 566, 567, 570, 572, 573, 575, 580, 581, 586], "interpret": [2, 25, 74, 75, 89, 360, 548, 581], "With": [2, 3, 5, 6, 7, 8, 10, 11, 13, 16, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 113, 119, 120, 121, 124, 130, 135, 136, 137, 138, 139, 152, 155, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 248, 252, 253, 254, 255, 258, 259, 260, 261, 262, 266, 267, 275, 280, 282, 283, 284, 296, 297, 309, 311, 313, 315, 316, 324, 325, 343, 344, 345, 347, 348, 349, 351, 353, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 405, 407, 409, 410, 411, 412, 413, 417, 419, 420, 421, 423, 424, 429, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 460, 463, 464, 465, 466, 468, 474, 475, 476, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 533, 534, 540, 551, 557, 560, 562, 564, 566, 580, 583], "9": [2, 3, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 19, 22, 26, 28, 29, 30, 31, 33, 34, 36, 38, 40, 41, 42, 45, 46, 55, 59, 73, 74, 75, 89, 114, 116, 117, 118, 121, 124, 176, 178, 179, 180, 183, 184, 185, 188, 194, 195, 200, 204, 209, 210, 211, 216, 217, 219, 220, 221, 223, 225, 226, 229, 230, 233, 234, 235, 239, 255, 259, 260, 261, 263, 266, 282, 283, 286, 287, 289, 296, 297, 309, 343, 344, 345, 349, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 378, 384, 385, 386, 389, 392, 393, 394, 396, 399, 400, 402, 405, 409, 410, 411, 414, 417, 419, 420, 421, 423, 424, 433, 437, 441, 442, 444, 445, 447, 458, 463, 465, 468, 481, 482, 483, 484, 486, 491, 492, 494, 496, 498, 501, 502, 504, 506, 508, 509, 547, 551, 553, 558, 562, 569, 570, 576], "39999998": [2, 74, 75, 360, 376, 493], "5999999": [2, 74, 75, 360, 367, 393], "0999999": [2, 19, 74, 75, 360, 504], "10000038": [2, 74, 75, 360], "np": [2, 6, 28, 29, 30, 74, 75, 79, 89, 131, 207, 309, 360, 361, 363, 364, 365, 372, 463, 516, 530, 539, 544, 549, 550, 553, 555, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 575], "order": [2, 6, 10, 11, 13, 17, 18, 23, 29, 33, 34, 36, 41, 45, 46, 50, 53, 56, 74, 75, 88, 182, 360, 363, 364, 367, 368, 370, 371, 375, 376, 377, 384, 385, 386, 387, 388, 389, 392, 403, 404, 410, 419, 420, 424, 426, 437, 440, 454, 455, 490, 492, 493, 494, 495, 496, 497, 498, 516, 530, 532, 539, 540, 541, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 559, 560, 561, 562, 563, 564, 569, 571, 574, 576, 579, 580, 581, 583, 586], "c": [2, 6, 7, 8, 10, 13, 19, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 42, 74, 75, 87, 90, 121, 124, 188, 210, 211, 223, 230, 251, 259, 260, 261, 275, 282, 283, 316, 343, 344, 347, 349, 350, 351, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 375, 376, 378, 384, 385, 386, 387, 388, 389, 403, 405, 407, 440, 444, 460, 464, 465, 466, 468, 474, 475, 490, 495, 501, 502, 507, 509, 531, 533, 534, 535, 540, 542, 547, 551, 556, 558, 564, 565, 566, 567, 569, 574, 575, 576, 580, 584, 585, 587], "90786433e": [2, 74, 75, 360], "310": [2, 74, 75, 360], "copy_arrai": [2, 360], "to_ivy_arrai": [2, 79, 360], "truee": [2, 6, 11, 15, 17, 18, 19, 21, 29, 34, 38, 41, 42, 44, 45, 79, 87, 88, 107, 135, 151, 175, 182, 186, 188, 190, 197, 199, 200, 204, 210, 212, 219, 220, 225, 228, 358, 360, 361, 362, 363, 364, 368, 370, 372, 374, 376, 377, 378, 399, 409, 410, 412, 415, 418, 419, 426, 436, 444, 460, 464, 465, 466, 474, 475, 482, 483, 484, 492, 493, 494, 495, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 530, 533, 534, 535, 536, 539, 540, 541, 542, 543, 547, 553, 558, 560, 562, 566, 569, 574, 575, 576], "torch": [2, 7, 11, 21, 30, 34, 49, 79, 123, 152, 153, 166, 167, 229, 284, 311, 360, 361, 362, 363, 365, 368, 419, 516, 530, 540, 541, 543, 544, 545, 546, 548, 549, 550, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 574, 575, 586], "tensor": [2, 5, 6, 7, 10, 13, 15, 23, 25, 28, 29, 30, 33, 34, 36, 38, 52, 79, 86, 87, 90, 119, 134, 219, 220, 296, 297, 360, 361, 363, 364, 365, 367, 368, 370, 374, 393, 395, 408, 421, 442, 481, 530, 532, 544, 545, 549, 550, 555, 556, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 574, 575, 577, 578, 581, 583, 584, 587], "etc": [2, 6, 15, 17, 21, 25, 29, 38, 44, 51, 52, 53, 54, 55, 56, 79, 86, 87, 90, 360, 364, 374, 376, 481, 482, 483, 484, 492, 493, 494, 495, 534, 539, 540, 541, 543, 544, 546, 547, 549, 551, 553, 555, 560, 561, 562, 563, 566, 568, 569, 574, 575, 578, 580, 586], "depend": [2, 3, 7, 11, 17, 18, 26, 34, 41, 42, 79, 108, 175, 176, 177, 179, 180, 181, 182, 191, 192, 197, 198, 210, 211, 212, 213, 225, 231, 232, 236, 237, 311, 360, 361, 363, 364, 365, 368, 375, 377, 403, 404, 416, 417, 418, 419, 491, 496, 498, 509, 530, 533, 536, 537, 539, 540, 541, 546, 549, 552, 557, 559, 560, 561, 562, 564, 566, 574, 578, 580, 581], "empty_lik": [2, 25, 360, 564], "deafult": [2, 16, 39, 81, 360, 375, 487], "uniniti": [2, 80, 81, 360], "from_dlpack": [2, 25, 360], "full_lik": [2, 25, 360, 563], "fill_valu": [2, 16, 25, 39, 84, 85, 203, 209, 360, 363, 375, 490, 524, 549, 561, 563], "scalar": [2, 5, 6, 7, 11, 22, 25, 28, 29, 30, 34, 61, 85, 90, 178, 235, 316, 324, 360, 363, 364, 365, 368, 426, 549, 558, 560, 574, 580], "fill": [2, 6, 15, 16, 23, 25, 29, 38, 39, 51, 80, 84, 85, 87, 90, 91, 92, 95, 96, 360, 364, 374, 375, 482, 490, 561], "valu": [2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 50, 51, 52, 53, 54, 55, 60, 67, 73, 82, 84, 85, 86, 87, 90, 108, 125, 129, 134, 168, 169, 175, 176, 177, 178, 179, 181, 182, 190, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 233, 234, 235, 237, 238, 239, 252, 253, 254, 255, 256, 258, 263, 266, 267, 271, 273, 276, 277, 282, 283, 284, 290, 296, 297, 300, 301, 303, 311, 316, 321, 324, 325, 343, 344, 345, 349, 352, 354, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 401, 410, 411, 412, 415, 416, 417, 418, 419, 420, 426, 433, 434, 435, 439, 440, 448, 454, 455, 459, 461, 462, 463, 464, 465, 470, 474, 475, 476, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 513, 514, 516, 520, 540, 541, 543, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 562, 564, 566, 568, 574, 580, 581], "where": [2, 5, 6, 7, 11, 13, 15, 16, 19, 20, 23, 25, 28, 29, 30, 34, 36, 38, 39, 42, 43, 51, 84, 85, 88, 90, 182, 197, 207, 212, 219, 220, 225, 284, 296, 325, 356, 360, 363, 364, 365, 366, 368, 370, 372, 374, 375, 378, 379, 403, 404, 408, 410, 412, 414, 415, 416, 419, 420, 423, 425, 433, 435, 436, 438, 444, 448, 468, 481, 482, 483, 484, 489, 490, 507, 509, 510, 511, 530, 532, 533, 534, 535, 540, 541, 543, 544, 545, 547, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 574, 578, 587], "everi": [2, 6, 7, 29, 30, 84, 85, 248, 360, 364, 365, 536, 539, 541, 543, 545, 546, 547, 548, 549, 551, 555, 556, 557, 559, 560, 561, 562, 563, 566, 568, 570, 580], "equal": [2, 3, 5, 6, 7, 11, 13, 15, 17, 18, 19, 23, 26, 28, 29, 30, 34, 36, 38, 41, 45, 46, 51, 82, 84, 85, 108, 186, 188, 204, 205, 225, 229, 248, 251, 325, 360, 361, 363, 364, 365, 368, 370, 374, 376, 377, 378, 402, 411, 412, 415, 417, 433, 435, 442, 448, 484, 492, 493, 494, 495, 496, 498, 504, 507, 508, 509, 521, 546, 547, 549, 551, 553, 556, 561, 562], "000123": [2, 85, 360], "ones": [2, 6, 8, 10, 15, 23, 25, 29, 33, 38, 82, 85, 90, 92, 96, 157, 158, 190, 343, 360, 362, 363, 364, 366, 367, 388, 482, 483, 484, 530, 544, 548, 551, 555, 562, 568, 569, 580], "linspac": [2, 25, 73, 360, 555, 564, 566, 587], "stop": [2, 8, 25, 31, 55, 73, 86, 87, 169, 344, 347, 349, 350, 351, 353, 360, 362, 366, 371, 372, 454, 455, 456, 468, 555, 558, 564, 566, 574, 580], "num": [2, 25, 86, 87, 360, 541, 555, 566], "endpoint": [2, 25, 51, 86, 87, 360, 555], "logspac": [2, 25, 360, 566], "10": [2, 5, 6, 7, 8, 10, 11, 15, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 55, 73, 85, 86, 87, 177, 184, 185, 188, 192, 198, 203, 209, 211, 221, 226, 232, 233, 253, 259, 260, 261, 263, 266, 267, 271, 276, 282, 283, 290, 297, 303, 309, 321, 349, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 384, 385, 387, 393, 400, 402, 407, 409, 410, 411, 414, 419, 420, 421, 437, 442, 443, 444, 445, 447, 463, 465, 468, 476, 481, 482, 483, 484, 490, 492, 497, 500, 501, 502, 503, 505, 506, 508, 509, 530, 533, 540, 543, 547, 548, 549, 551, 558, 561, 562, 566, 568, 569, 585], "first": [2, 5, 6, 11, 13, 15, 16, 17, 19, 25, 28, 29, 30, 34, 36, 38, 40, 42, 45, 46, 51, 52, 53, 55, 86, 87, 133, 141, 154, 178, 182, 184, 186, 187, 188, 189, 195, 200, 201, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 225, 235, 251, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 399, 402, 403, 404, 406, 409, 414, 416, 417, 419, 421, 425, 440, 441, 444, 445, 454, 455, 456, 457, 458, 467, 468, 470, 486, 487, 488, 492, 493, 494, 497, 500, 501, 516, 530, 532, 533, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 551, 555, 556, 557, 559, 560, 562, 564, 566, 568, 569, 571, 578, 580, 581, 585], "rang": [2, 6, 19, 25, 29, 51, 73, 86, 87, 259, 325, 360, 364, 365, 376, 378, 492, 500, 501, 506, 508, 530, 549, 553, 562, 566, 569, 570, 571, 580, 586], "log": [2, 5, 6, 11, 25, 28, 29, 34, 48, 87, 212, 214, 360, 363, 364, 417, 541, 547, 548, 551, 556, 559, 560, 562, 564, 566, 569], "space": [2, 6, 7, 25, 28, 29, 30, 73, 86, 87, 259, 263, 356, 360, 364, 365, 366, 533, 564], "start": [2, 23, 25, 50, 73, 86, 87, 360, 362, 364, 530, 535, 536, 539, 540, 541, 542, 548, 549, 551, 552, 555, 560, 562, 564, 565, 566, 568, 569, 570, 573, 574, 580, 586], "sequenc": [2, 6, 10, 11, 13, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 52, 54, 56, 59, 61, 62, 63, 64, 65, 66, 67, 82, 85, 87, 90, 92, 96, 109, 111, 124, 128, 129, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 292, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 345, 347, 353, 360, 364, 365, 366, 367, 368, 370, 372, 378, 379, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 426, 429, 430, 431, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 464, 474, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 541, 548, 549, 550, 551, 553, 562, 563, 564, 566, 571, 573, 583], "last": [2, 6, 10, 11, 12, 13, 16, 18, 19, 20, 23, 25, 29, 33, 34, 35, 36, 41, 42, 43, 45, 52, 86, 87, 90, 154, 354, 356, 360, 362, 364, 366, 367, 368, 369, 370, 375, 377, 378, 379, 395, 399, 402, 414, 423, 425, 430, 431, 434, 437, 440, 441, 442, 444, 487, 488, 496, 497, 498, 500, 501, 510, 511, 530, 534, 541, 543, 545, 546, 549, 551, 554, 559, 561, 562, 564, 566, 574, 580], "final": [2, 7, 30, 52, 86, 87, 263, 360, 365, 539, 541, 543, 544, 546, 548, 549, 551, 552, 554, 556, 558, 559, 560, 564, 565, 569, 576, 586], "number": [2, 3, 5, 6, 7, 10, 11, 13, 15, 16, 17, 19, 20, 23, 25, 26, 28, 29, 30, 33, 34, 36, 38, 39, 40, 42, 43, 45, 46, 50, 51, 52, 73, 82, 85, 86, 87, 88, 89, 90, 109, 114, 115, 116, 117, 118, 120, 121, 124, 127, 128, 129, 130, 132, 135, 161, 162, 163, 178, 182, 190, 194, 199, 200, 207, 219, 220, 225, 228, 229, 230, 238, 263, 272, 275, 294, 309, 310, 316, 324, 325, 358, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 374, 375, 376, 378, 379, 383, 390, 391, 393, 396, 403, 404, 405, 412, 417, 419, 424, 425, 433, 435, 436, 438, 439, 441, 442, 444, 446, 448, 454, 455, 456, 481, 485, 490, 492, 493, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 516, 521, 530, 531, 532, 540, 541, 547, 548, 549, 550, 551, 558, 559, 562, 564, 566, 569], "gener": [2, 5, 6, 10, 15, 21, 25, 28, 29, 33, 38, 44, 55, 73, 86, 87, 111, 204, 217, 228, 229, 360, 361, 363, 364, 367, 368, 370, 374, 378, 393, 417, 424, 448, 481, 482, 484, 485, 507, 521, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 565, 566, 568, 570, 571, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586], "oper": [2, 3, 6, 7, 10, 23, 25, 26, 29, 30, 33, 46, 86, 87, 135, 178, 188, 228, 252, 259, 260, 261, 311, 360, 361, 363, 364, 365, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 530, 532, 539, 540, 543, 544, 547, 549, 550, 551, 552, 553, 556, 559, 560, 562, 564, 566, 569, 570, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587], "perform": [2, 6, 10, 11, 19, 20, 25, 29, 30, 33, 34, 42, 43, 62, 66, 86, 87, 239, 259, 260, 261, 282, 283, 284, 298, 305, 357, 360, 363, 364, 365, 367, 368, 371, 372, 378, 379, 393, 395, 419, 426, 454, 455, 456, 464, 465, 500, 501, 510, 511, 514, 534, 543, 544, 545, 547, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 569, 574, 577, 580, 581, 582, 583, 584, 585, 587], "relev": [2, 25, 55, 87, 360, 364, 530, 533, 539, 540, 541, 544, 547, 548, 549, 551, 558, 561, 562, 569, 578, 585, 586], "onli": [2, 6, 11, 13, 15, 23, 25, 29, 34, 36, 38, 45, 53, 55, 87, 133, 134, 165, 174, 216, 217, 253, 360, 361, 362, 363, 364, 365, 368, 370, 372, 374, 375, 377, 378, 409, 416, 419, 437, 440, 457, 458, 464, 465, 467, 468, 469, 474, 475, 482, 483, 484, 487, 488, 497, 504, 507, 517, 530, 532, 535, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 574, 579, 580, 581, 586, 587], "like": [2, 6, 13, 25, 29, 36, 87, 112, 134, 360, 361, 364, 368, 370, 374, 403, 440, 484, 530, 533, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 580, 585], "sampl": [2, 6, 15, 19, 25, 28, 29, 38, 42, 52, 86, 87, 360, 364, 374, 378, 481, 482, 483, 484, 507, 509, 557, 561, 562], "on_valu": [2, 25, 87, 90, 360], "off_valu": [2, 25, 87, 90, 360], "float32": [2, 3, 7, 10, 25, 26, 30, 33, 42, 87, 90, 92, 96, 106, 107, 111, 116, 119, 120, 121, 122, 125, 128, 129, 130, 135, 138, 144, 284, 315, 360, 361, 364, 365, 367, 368, 386, 388, 392, 426, 516, 530, 549, 551, 561, 562], "cuda": [2, 6, 15, 25, 29, 38, 51, 52, 53, 54, 55, 56, 86, 87, 90, 151, 152, 153, 166, 167, 360, 362, 364, 374, 481, 482, 483, 484, 530, 566, 574, 575, 585], "cpu": [2, 4, 6, 15, 25, 27, 29, 38, 51, 52, 53, 54, 55, 56, 73, 82, 84, 86, 87, 90, 91, 92, 96, 152, 154, 155, 156, 157, 161, 164, 166, 167, 170, 171, 173, 174, 360, 362, 364, 368, 374, 408, 481, 482, 483, 484, 516, 530, 541, 550, 560, 562, 574, 578, 580, 583, 585], "evenli": [2, 6, 10, 13, 23, 25, 28, 33, 36, 73, 86, 87, 360, 364, 367, 370, 383, 384, 385, 386, 388, 390, 392, 442], "both": [2, 5, 6, 11, 25, 28, 29, 34, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 111, 127, 130, 133, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 290, 316, 353, 355, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 530, 541, 545, 547, 548, 549, 550, 551, 552, 555, 556, 559, 560, 562, 564, 566, 568, 569, 570, 571, 573, 574, 580, 583, 585, 586, 587], "descript": [2, 5, 11, 28, 34, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 539, 552, 558], "hint": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 539, 544, 552, 555, 556, 559, 560, 563], "abov": [2, 5, 6, 11, 15, 22, 28, 29, 34, 38, 67, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 284, 316, 353, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 482, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 540, 541, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 566, 568, 569, 570, 571, 580, 585], "assum": [2, 5, 6, 11, 28, 29, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 290, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 543, 545, 546, 548, 549, 552, 561, 562, 564, 568, 569, 574], "simplic": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 266, 275, 280, 282, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 552, 564, 570, 573], "nestabl": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 260, 261, 266, 275, 280, 282, 284, 296, 311, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 542, 551, 552, 559, 562, 575], "therefor": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 260, 261, 266, 275, 280, 282, 284, 296, 311, 316, 353, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 476, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 532, 536, 539, 541, 543, 544, 547, 548, 549, 550, 551, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 566, 568, 570, 574, 577, 580, 586], "01": [2, 6, 7, 8, 29, 30, 31, 34, 38, 87, 214, 229, 230, 263, 309, 343, 344, 349, 360, 363, 364, 365, 366, 368, 374, 405, 420, 483, 484, 545, 571], "02": [2, 8, 14, 15, 28, 31, 38, 87, 179, 180, 214, 309, 343, 344, 349, 360, 363, 364, 365, 366, 373, 374, 476, 483, 484, 561], "03": [2, 5, 8, 28, 31, 38, 87, 192, 212, 309, 344, 349, 360, 363, 365, 366, 367, 368, 397, 407, 483], "04": [2, 8, 22, 26, 31, 61, 62, 87, 121, 198, 300, 343, 344, 349, 357, 360, 361, 363, 365, 366, 367, 397, 562], "05": [2, 5, 6, 8, 14, 28, 29, 31, 37, 54, 87, 214, 272, 282, 300, 343, 344, 349, 360, 363, 364, 365, 366, 368, 373, 410, 476, 514, 561, 562], "100": [2, 6, 25, 28, 29, 30, 87, 188, 233, 267, 283, 297, 360, 363, 364, 365, 368, 372, 407, 463, 530, 533, 534, 548, 562, 569, 570, 571, 574], "464": [2, 5, 38, 87, 181, 182, 360, 363], "15888336": [2, 87, 360], "1000": [2, 25, 87, 360, 530, 569], "2154": [2, 87, 360], "43469003": [2, 87, 360], "10000": [2, 25, 87, 360], "meshgrid": [2, 25, 360], "spars": [2, 12, 25, 35, 88, 360, 369, 431], "index": [2, 6, 7, 13, 16, 17, 18, 23, 25, 29, 30, 36, 39, 40, 41, 82, 88, 166, 249, 267, 271, 296, 297, 358, 360, 362, 364, 365, 370, 372, 375, 376, 377, 440, 444, 459, 460, 461, 464, 465, 466, 472, 474, 487, 488, 490, 492, 493, 494, 496, 497, 528, 547, 548, 556, 558, 561, 562, 568, 580], "xy": [2, 25, 88, 360], "one": [2, 6, 7, 10, 11, 13, 16, 17, 19, 23, 25, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 42, 73, 79, 88, 90, 109, 111, 169, 188, 214, 219, 220, 248, 292, 296, 297, 299, 313, 315, 316, 324, 343, 344, 347, 349, 351, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 375, 376, 378, 384, 385, 386, 387, 388, 389, 392, 406, 409, 410, 414, 416, 425, 426, 436, 437, 438, 441, 443, 447, 476, 487, 490, 492, 493, 494, 495, 500, 502, 524, 530, 533, 534, 539, 540, 541, 543, 544, 545, 546, 547, 549, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 568, 569, 571, 574, 580, 581, 583, 586], "dimension": [2, 6, 11, 13, 16, 19, 20, 23, 28, 29, 34, 36, 42, 43, 45, 73, 82, 88, 360, 364, 368, 370, 375, 378, 379, 399, 400, 406, 409, 412, 414, 415, 425, 426, 442, 487, 488, 490, 503, 504, 505, 506, 507, 508, 509, 510, 511, 558, 564, 566, 577, 580, 587], "arbitrari": [2, 3, 6, 23, 26, 88, 109, 135, 345, 360, 361, 366, 547, 555, 556, 558, 559, 560, 562, 570, 574, 581, 586], "repres": [2, 5, 6, 10, 11, 28, 29, 33, 34, 51, 88, 90, 120, 177, 178, 180, 183, 192, 232, 237, 356, 360, 361, 363, 364, 366, 367, 368, 393, 394, 414, 417, 418, 544, 564, 568, 577, 578, 581], "grid": [2, 88, 360, 551, 562, 573], "coordin": [2, 5, 16, 28, 29, 39, 88, 182, 360, 363, 364, 375, 490], "each": [2, 3, 5, 6, 7, 8, 10, 11, 13, 16, 17, 19, 23, 26, 28, 29, 30, 31, 33, 34, 36, 39, 40, 42, 45, 46, 52, 54, 55, 56, 63, 64, 65, 67, 88, 109, 121, 124, 169, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 251, 259, 266, 267, 290, 325, 344, 345, 347, 349, 350, 351, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 399, 400, 403, 404, 405, 409, 411, 412, 413, 415, 417, 418, 419, 424, 435, 439, 441, 442, 444, 446, 448, 463, 470, 481, 490, 492, 493, 495, 501, 502, 509, 532, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 573, 574, 576, 577, 581, 583, 586], "numer": [2, 3, 5, 7, 11, 15, 16, 19, 26, 28, 29, 30, 34, 38, 39, 41, 45, 46, 51, 88, 108, 175, 178, 190, 194, 198, 199, 200, 204, 205, 206, 208, 216, 217, 221, 222, 223, 224, 225, 228, 229, 230, 234, 235, 238, 239, 272, 273, 300, 301, 309, 310, 360, 361, 363, 364, 365, 368, 374, 375, 378, 399, 406, 409, 414, 417, 419, 421, 423, 425, 482, 483, 484, 486, 487, 488, 490, 491, 496, 503, 506, 508, 549, 557, 558, 560, 561, 562, 563, 564, 566, 570, 577, 580, 586], "conserv": [2, 88, 360], "memori": [2, 6, 13, 29, 36, 88, 153, 164, 169, 171, 174, 360, 362, 364, 367, 370, 395, 440, 530, 548, 549, 550, 559, 560, 564, 566, 572, 574, 580, 582, 583, 584], "cartesian": [2, 88, 360], "matrix": [2, 6, 7, 10, 11, 29, 30, 33, 34, 45, 51, 52, 88, 93, 94, 248, 254, 360, 364, 365, 367, 368, 394, 398, 400, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 424, 427, 539, 549, 556, 560, 578, 580], "ij": [2, 19, 88, 360, 378, 502], "provid": [2, 6, 7, 11, 13, 16, 19, 20, 23, 25, 29, 30, 34, 36, 39, 42, 43, 52, 55, 58, 60, 88, 90, 114, 115, 116, 117, 118, 126, 135, 147, 154, 253, 258, 296, 297, 357, 360, 361, 362, 364, 365, 368, 370, 375, 378, 379, 411, 414, 425, 436, 437, 444, 487, 507, 509, 510, 511, 530, 532, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 564, 568, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 587], "zero": [2, 3, 5, 6, 8, 10, 11, 13, 16, 17, 19, 20, 25, 26, 28, 29, 31, 33, 34, 38, 39, 42, 43, 51, 52, 55, 61, 63, 64, 79, 80, 82, 88, 90, 92, 93, 94, 96, 108, 109, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 191, 192, 193, 198, 199, 204, 205, 206, 207, 212, 216, 217, 219, 220, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 255, 259, 292, 343, 344, 349, 350, 351, 353, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 388, 390, 392, 393, 394, 397, 398, 400, 405, 407, 408, 409, 410, 411, 412, 413, 415, 417, 425, 426, 435, 436, 437, 438, 441, 448, 476, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 534, 544, 547, 549, 550, 551, 555, 557, 558, 561, 566, 569, 570, 579], "vector": [2, 6, 7, 10, 11, 30, 33, 34, 52, 88, 255, 259, 284, 325, 360, 364, 365, 367, 368, 394, 399, 403, 404, 406, 409, 414, 419, 420, 424, 425, 426, 427, 573, 580], "": [2, 6, 7, 8, 11, 19, 29, 31, 34, 42, 50, 51, 52, 53, 54, 55, 56, 88, 93, 94, 122, 123, 154, 157, 158, 168, 228, 264, 265, 311, 344, 346, 347, 348, 349, 351, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 378, 385, 387, 389, 391, 401, 412, 419, 420, 426, 469, 507, 509, 516, 530, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 579, 580, 581, 583, 584, 585, 586], "respect": [2, 5, 6, 8, 11, 28, 29, 31, 34, 51, 88, 175, 178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 228, 235, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 360, 363, 364, 366, 367, 368, 371, 383, 390, 391, 416, 419, 454, 455, 456, 516, 538, 539, 540, 541, 544, 547, 548, 549, 551, 555, 558, 560, 562, 563, 576, 586], "ha": [2, 6, 11, 13, 17, 19, 23, 26, 29, 30, 34, 36, 40, 42, 50, 88, 154, 175, 207, 225, 229, 280, 356, 360, 362, 363, 364, 366, 368, 370, 376, 378, 409, 418, 419, 423, 436, 443, 492, 493, 494, 495, 500, 501, 504, 506, 507, 508, 509, 532, 533, 534, 539, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 573, 574, 576, 579, 580, 582, 583, 586], "effect": [2, 6, 8, 19, 29, 31, 42, 88, 343, 351, 360, 364, 366, 378, 507, 509, 533, 539, 544, 547, 548, 552, 555, 559, 564, 574], "ignor": [2, 6, 23, 29, 55, 88, 360, 364, 368, 372, 408, 468, 469, 546, 548, 551, 562, 574, 586], "n": [2, 6, 10, 11, 13, 15, 16, 19, 20, 28, 29, 33, 34, 36, 38, 39, 42, 43, 45, 88, 93, 94, 360, 364, 367, 368, 370, 372, 374, 375, 378, 379, 383, 384, 385, 386, 388, 390, 392, 396, 402, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 426, 435, 436, 438, 444, 448, 465, 482, 483, 484, 490, 504, 507, 508, 509, 510, 511, 530, 542, 562], "rank": [2, 6, 11, 13, 20, 29, 34, 36, 43, 88, 360, 364, 368, 370, 375, 379, 399, 401, 412, 416, 418, 423, 425, 426, 435, 436, 444, 447, 448, 490, 510, 511, 553], "For": [2, 6, 11, 17, 29, 34, 49, 73, 88, 175, 176, 177, 178, 179, 180, 181, 182, 190, 191, 192, 197, 198, 199, 210, 211, 212, 213, 214, 216, 225, 228, 229, 231, 232, 233, 236, 237, 238, 360, 363, 364, 368, 370, 376, 378, 417, 419, 423, 433, 444, 492, 493, 494, 495, 503, 505, 508, 532, 533, 534, 536, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 577, 578, 581, 586, 587], "length": [2, 6, 13, 23, 29, 36, 46, 50, 73, 88, 325, 360, 364, 365, 368, 370, 419, 420, 440, 554, 562, 569], "ni": [2, 88, 360], "len": [2, 6, 11, 29, 34, 88, 360, 364, 368, 424, 530, 547, 548, 559, 560, 562, 568, 571], "xi": [2, 88, 360], "native_arrai": [2, 3, 5, 7, 25, 27, 28, 30, 41, 59, 62, 85, 88, 90, 92, 96, 108, 109, 110, 111, 119, 124, 130, 155, 163, 170, 184, 188, 189, 193, 194, 195, 200, 202, 203, 208, 209, 216, 221, 223, 226, 228, 233, 248, 286, 287, 289, 315, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 375, 378, 379, 384, 385, 392, 396, 397, 400, 405, 411, 412, 420, 421, 423, 426, 429, 431, 433, 440, 481, 490, 498, 505, 508, 510, 516, 520, 557, 561, 562], "A": [2, 3, 6, 7, 13, 15, 19, 20, 23, 26, 28, 29, 30, 34, 36, 38, 40, 43, 46, 50, 51, 56, 82, 89, 109, 152, 169, 222, 224, 227, 251, 282, 283, 309, 310, 313, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 378, 379, 393, 402, 407, 408, 413, 414, 418, 419, 433, 436, 438, 442, 444, 457, 460, 462, 464, 465, 466, 467, 468, 472, 473, 474, 475, 481, 482, 483, 484, 486, 492, 502, 510, 511, 514, 516, 517, 521, 531, 532, 533, 534, 538, 539, 540, 542, 547, 549, 550, 553, 555, 556, 560, 561, 562, 566, 569, 574, 575, 580, 581], "one_hot": [2, 25, 360, 530, 571], "depth": [2, 6, 10, 25, 29, 33, 50, 53, 90, 259, 277, 360, 364, 365, 367, 372, 388, 389, 469, 541, 548, 569, 570, 571, 573], "scatter": [2, 7, 25, 30, 90, 296, 297, 360, 365, 546, 564, 587], "defin": [2, 6, 7, 11, 25, 29, 30, 34, 90, 228, 282, 283, 360, 363, 364, 365, 368, 378, 399, 404, 405, 418, 503, 504, 505, 507, 530, 539, 540, 544, 548, 549, 552, 555, 558, 560, 561, 562, 563, 568, 570, 574, 575, 577, 578, 579, 580, 581, 584, 586, 587], "hot": [2, 25, 90, 360, 530], "dimens": [2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 20, 23, 25, 29, 30, 33, 34, 35, 36, 38, 39, 40, 42, 43, 45, 46, 52, 62, 66, 90, 93, 94, 259, 260, 261, 263, 275, 307, 325, 357, 360, 364, 365, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 426, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 454, 455, 456, 486, 487, 488, 490, 492, 493, 494, 495, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 551, 553, 556, 558, 560, 561, 562, 564, 566, 569], "when": [2, 3, 6, 11, 12, 15, 16, 19, 23, 25, 26, 28, 29, 34, 35, 38, 39, 42, 46, 50, 51, 53, 90, 108, 178, 198, 212, 225, 284, 303, 310, 360, 361, 363, 364, 365, 367, 368, 369, 372, 374, 375, 378, 383, 412, 417, 429, 430, 431, 457, 458, 467, 468, 469, 482, 483, 484, 487, 488, 490, 491, 503, 505, 507, 509, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 566, 568, 569, 571, 574, 578, 580, 583, 584, 585, 586], "j": [2, 6, 11, 19, 25, 28, 29, 34, 90, 215, 251, 360, 364, 365, 368, 378, 403, 423, 502, 541, 542, 576], "unless": [2, 6, 11, 25, 29, 90, 360, 364, 368, 412, 545, 550, 559, 574], "overrid": [2, 25, 90, 360, 544, 546], "z": [2, 5, 6, 7, 11, 12, 15, 17, 19, 25, 28, 29, 30, 34, 35, 36, 38, 42, 45, 46, 51, 86, 87, 89, 90, 159, 178, 182, 184, 187, 189, 194, 202, 203, 205, 206, 207, 208, 209, 214, 215, 217, 218, 219, 220, 235, 251, 263, 266, 267, 282, 283, 297, 307, 309, 317, 325, 360, 362, 363, 364, 365, 368, 369, 370, 372, 374, 375, 376, 378, 399, 409, 414, 415, 419, 426, 429, 430, 431, 433, 460, 464, 466, 474, 482, 483, 484, 487, 492, 502, 503, 505, 506, 507, 530, 545, 547, 551, 566, 568], "ones_lik": [2, 25, 360, 545, 571], "tril": [2, 25, 360], "k": [2, 6, 10, 11, 15, 25, 28, 29, 33, 34, 38, 82, 93, 94, 215, 251, 360, 364, 365, 367, 368, 372, 374, 375, 397, 401, 409, 410, 416, 418, 419, 420, 423, 465, 482, 483, 484, 490, 530, 542, 543, 560, 561, 566, 576, 580], "m": [2, 6, 11, 15, 28, 29, 34, 38, 45, 88, 93, 94, 215, 360, 364, 368, 372, 374, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 465, 482, 483, 484, 530, 536, 540, 541, 542, 548, 566], "whose": [2, 5, 6, 7, 11, 13, 17, 19, 25, 28, 29, 30, 34, 36, 40, 42, 45, 85, 93, 94, 177, 180, 183, 191, 192, 193, 225, 226, 231, 232, 236, 237, 253, 311, 360, 363, 364, 365, 368, 370, 376, 378, 398, 400, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 437, 441, 492, 493, 494, 501, 502, 552, 562], "innermost": [2, 11, 34, 93, 94, 360, 368, 398, 400, 402, 403, 404, 405, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423], "two": [2, 6, 11, 17, 29, 30, 34, 45, 46, 73, 82, 88, 93, 94, 133, 141, 188, 201, 229, 251, 360, 361, 363, 364, 365, 368, 370, 376, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 445, 492, 493, 494, 495, 534, 539, 540, 543, 544, 549, 551, 552, 560, 561, 562, 564, 565, 569, 571, 577, 585], "mxn": [2, 11, 34, 93, 94, 360, 368, 402, 410, 412, 413, 415, 416, 420, 423], "matric": [2, 11, 29, 34, 45, 88, 93, 94, 360, 364, 367, 368, 394, 398, 400, 402, 403, 404, 405, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 424, 556, 573, 580], "diagon": [2, 6, 11, 29, 34, 82, 93, 94, 360, 364, 368, 401, 423], "main": [2, 6, 11, 29, 34, 82, 93, 94, 360, 364, 368, 401, 402, 423, 540, 543, 546, 547, 554, 557, 578, 580, 581, 586], "below": [2, 11, 34, 42, 93, 94, 207, 360, 363, 364, 368, 402, 423, 509, 530, 535, 539, 540, 542, 543, 547, 548, 549, 550, 551, 553, 554, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 578, 583, 585], "lower": [2, 5, 6, 11, 15, 28, 29, 34, 38, 50, 51, 82, 93, 219, 360, 363, 364, 368, 374, 398, 405, 484, 530, 541, 551, 560, 562, 564, 566, 574, 575, 576, 577, 578, 580, 581, 586, 587], "triangular": [2, 11, 34, 93, 94, 360, 364, 368, 398, 405, 416], "part": [2, 6, 29, 53, 93, 94, 207, 360, 363, 364, 368, 405, 516, 530, 536, 541, 543, 546, 556, 560, 562, 563, 564, 566, 567, 571, 573, 574, 578, 580, 585, 586, 587], "specifi": [2, 3, 6, 7, 11, 12, 13, 15, 16, 17, 19, 20, 22, 23, 26, 29, 30, 34, 35, 36, 38, 39, 42, 43, 50, 61, 73, 80, 84, 86, 91, 93, 94, 95, 108, 110, 159, 163, 165, 168, 169, 170, 228, 249, 266, 267, 271, 280, 325, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 396, 401, 402, 405, 410, 421, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 437, 441, 443, 444, 447, 448, 462, 464, 465, 472, 473, 474, 475, 482, 483, 484, 487, 488, 490, 492, 493, 494, 495, 496, 500, 501, 502, 506, 508, 510, 511, 541, 542, 546, 549, 550, 555, 556, 557, 559, 560, 561, 562, 564, 566, 569, 570, 586], "alloc": [2, 3, 26, 93, 94, 108, 360, 361, 539, 541, 574], "triu": [2, 25, 360], "upper": [2, 6, 11, 15, 29, 34, 38, 50, 82, 94, 360, 364, 368, 374, 398, 405, 416, 484, 559, 562], "zeros_lik": [2, 25, 34, 108, 217, 343, 344, 347, 349, 351, 360, 361, 363, 366, 367, 370, 385, 387, 392, 415, 433, 560, 564], "data_typ": [3, 6, 26, 29, 137, 361, 546, 549, 562, 563], "_arraywithdatatyp": [3, 45], "astyp": [3, 10, 26, 33, 361, 367, 386, 388, 392, 530, 549, 559, 560, 564], "irrespect": [3, 11, 26, 34, 108, 361, 368, 419, 547, 559, 568, 587], "promot": [3, 5, 6, 11, 26, 28, 29, 34, 41, 45, 46, 108, 111, 133, 134, 135, 141, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 198, 200, 210, 211, 212, 213, 214, 218, 221, 225, 228, 231, 232, 233, 234, 235, 236, 237, 239, 361, 363, 364, 368, 370, 378, 398, 399, 406, 407, 409, 411, 412, 414, 415, 417, 418, 425, 426, 434, 444, 496, 504, 507, 543, 552, 553, 556], "rule": [3, 6, 11, 26, 28, 34, 108, 111, 133, 134, 135, 183, 194, 221, 228, 239, 361, 363, 364, 368, 370, 398, 399, 406, 411, 414, 418, 434, 543, 544, 547, 548, 549, 551, 554, 555, 556, 558, 562, 564, 581], "cast": [3, 6, 11, 19, 26, 29, 34, 108, 111, 135, 361, 364, 368, 378, 426, 500, 501, 506, 508, 549, 556, 561, 566], "point": [3, 5, 6, 11, 15, 17, 19, 26, 28, 29, 34, 38, 42, 73, 74, 75, 80, 82, 84, 91, 95, 108, 121, 125, 129, 135, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 197, 198, 199, 210, 211, 212, 213, 214, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 358, 360, 361, 363, 364, 368, 374, 376, 377, 378, 398, 400, 403, 404, 405, 407, 410, 411, 412, 415, 416, 417, 418, 419, 423, 426, 483, 484, 492, 493, 494, 495, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 534, 539, 540, 541, 543, 544, 546, 548, 551, 552, 555, 559, 560, 562, 563, 564, 566, 568, 569, 573, 586], "nan": [3, 5, 6, 7, 17, 19, 26, 28, 29, 30, 108, 175, 176, 177, 178, 179, 180, 181, 182, 190, 191, 192, 193, 197, 198, 199, 201, 204, 206, 210, 211, 212, 213, 214, 216, 225, 226, 228, 229, 231, 232, 233, 236, 237, 238, 280, 324, 358, 361, 363, 364, 365, 376, 378, 379, 492, 493, 494, 495, 503, 504, 505, 507, 508, 509, 510, 511, 543, 549, 552, 558, 563], "infin": [3, 5, 6, 7, 11, 26, 28, 29, 34, 108, 175, 177, 178, 180, 181, 182, 190, 191, 192, 197, 198, 199, 200, 204, 205, 210, 211, 212, 213, 214, 216, 225, 228, 229, 231, 232, 233, 236, 237, 238, 280, 358, 361, 363, 364, 365, 368, 378, 379, 417, 426, 503, 505, 510, 511, 543, 552], "integr": [3, 6, 26, 28, 108, 361, 364, 530, 538, 540, 542, 578, 580, 582, 583, 584], "implement": [3, 4, 6, 17, 18, 26, 27, 29, 34, 41, 108, 135, 170, 175, 176, 177, 179, 180, 181, 182, 191, 192, 197, 198, 210, 211, 212, 213, 225, 228, 231, 232, 236, 237, 361, 362, 363, 364, 368, 376, 377, 378, 403, 404, 405, 414, 492, 493, 494, 495, 496, 498, 503, 504, 505, 507, 530, 539, 542, 543, 544, 545, 547, 549, 550, 552, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 583, 586, 587], "non": [3, 6, 11, 15, 16, 19, 20, 26, 29, 34, 38, 39, 42, 43, 51, 53, 55, 108, 126, 134, 216, 217, 361, 363, 364, 368, 372, 374, 375, 378, 379, 400, 410, 412, 419, 421, 425, 426, 470, 483, 487, 488, 489, 490, 503, 504, 505, 506, 507, 509, 510, 511, 544, 547, 549, 551, 557, 566, 580], "desir": [3, 4, 6, 16, 23, 26, 27, 29, 39, 51, 52, 108, 110, 111, 170, 361, 362, 364, 375, 489, 532, 541, 545, 548, 549, 560, 566, 580], "match": [3, 6, 23, 26, 29, 108, 228, 292, 361, 363, 364, 365, 514, 539, 544, 546, 547, 551, 561, 581, 586], "newli": [3, 26, 108, 253, 361, 365, 541, 548, 559, 562], "alwai": [3, 13, 26, 36, 108, 178, 284, 361, 363, 364, 365, 370, 440, 530, 539, 541, 544, 545, 547, 549, 552, 554, 555, 556, 559, 560, 561, 562, 563, 564, 566, 574], "float64": [3, 15, 19, 26, 29, 38, 42, 73, 84, 108, 111, 116, 121, 122, 125, 126, 130, 131, 135, 137, 138, 144, 147, 360, 361, 364, 374, 483, 484, 501, 516, 549, 561, 562], "broadcast_arrai": [3, 26, 361], "against": [3, 6, 11, 16, 26, 28, 29, 34, 39, 109, 220, 290, 361, 364, 365, 368, 375, 409, 410, 412, 415, 487, 532, 562, 566, 574, 580], "other": [3, 6, 7, 13, 19, 23, 26, 28, 29, 30, 36, 42, 45, 46, 73, 90, 109, 134, 198, 212, 220, 248, 249, 360, 361, 363, 364, 365, 374, 378, 434, 444, 484, 507, 509, 530, 533, 536, 539, 540, 541, 543, 544, 547, 548, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 586, 587], "correspond": [3, 5, 6, 7, 10, 13, 16, 17, 19, 23, 26, 28, 29, 33, 36, 42, 46, 58, 60, 109, 121, 124, 182, 225, 309, 325, 357, 361, 363, 364, 365, 367, 368, 370, 374, 375, 376, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 403, 404, 410, 417, 418, 441, 481, 487, 488, 492, 493, 494, 495, 500, 501, 506, 507, 508, 509, 516, 530, 539, 541, 544, 545, 547, 548, 549, 551, 552, 555, 556, 557, 558, 560, 562, 564, 566, 580], "x1": [3, 5, 6, 7, 11, 16, 26, 28, 29, 30, 34, 39, 41, 45, 46, 82, 92, 96, 109, 119, 134, 141, 163, 178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 201, 202, 203, 208, 209, 214, 215, 217, 218, 219, 220, 221, 223, 225, 228, 235, 239, 248, 251, 360, 361, 362, 363, 364, 365, 368, 375, 377, 399, 406, 409, 414, 418, 421, 422, 425, 491, 497, 516, 524, 530, 543, 549, 551, 553, 555, 559, 560], "x2": [3, 5, 6, 7, 11, 16, 26, 28, 29, 30, 34, 39, 45, 46, 92, 96, 109, 134, 141, 163, 178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 201, 202, 203, 208, 209, 214, 215, 217, 218, 219, 220, 221, 223, 225, 228, 235, 239, 248, 360, 361, 362, 363, 364, 365, 368, 375, 399, 406, 409, 414, 418, 421, 422, 425, 491, 516, 524, 543, 549, 551, 553, 555, 559, 560], "x3": [3, 7, 92, 96, 109, 248, 360, 361, 365], "mix": [3, 5, 26, 28, 30, 35, 38, 45, 46, 109, 135, 184, 187, 188, 189, 194, 195, 200, 202, 203, 208, 209, 218, 221, 223, 228, 262, 266, 267, 284, 313, 316, 361, 363, 364, 365, 367, 368, 369, 370, 373, 375, 378, 384, 386, 389, 392, 394, 396, 397, 398, 421, 429, 431, 433, 476, 491, 502, 504, 507, 542, 551, 557, 559, 562, 564, 566, 575, 580, 584, 586], "broadcast_to": [3, 26, 361, 549], "store": [3, 7, 11, 13, 23, 26, 30, 34, 36, 40, 53, 82, 92, 96, 110, 263, 360, 364, 365, 368, 370, 423, 442, 495, 516, 517, 537, 541, 544, 545, 547, 552, 557, 560, 566, 568, 569, 570, 575], "can_cast": [3, 26, 361, 549, 556, 560], "occur": [3, 6, 17, 26, 29, 40, 111, 361, 364, 375, 376, 487, 488, 492, 493, 494, 495, 543, 548, 553], "accord": [3, 7, 13, 19, 26, 36, 42, 111, 121, 178, 188, 266, 271, 296, 297, 361, 363, 364, 365, 368, 370, 378, 425, 435, 448, 507, 509, 524, 539, 540, 543, 549, 556, 560, 562], "as_n": [3, 4, 23, 26, 27, 114, 115, 116, 117, 118, 119, 125, 154, 155, 166, 361, 362, 549], "int32": [3, 7, 15, 16, 19, 26, 30, 38, 39, 82, 92, 96, 108, 111, 113, 117, 119, 122, 124, 125, 129, 130, 131, 135, 139, 143, 145, 165, 267, 284, 315, 360, 361, 362, 364, 365, 374, 375, 378, 482, 483, 484, 488, 500, 501, 506, 508, 549, 560, 562, 566], "finfo": [3, 26, 361, 562], "inform": [3, 8, 26, 31, 121, 124, 249, 353, 361, 365, 366, 530, 538, 539, 540, 541, 543, 547, 548, 553, 562, 583], "about": [3, 26, 121, 124, 361, 530, 534, 537, 538, 539, 540, 541, 542, 543, 546, 548, 549, 555, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574, 581, 582, 585], "8": [3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 52, 59, 65, 84, 85, 89, 92, 96, 114, 116, 117, 118, 121, 156, 171, 178, 179, 180, 184, 185, 188, 190, 192, 200, 202, 203, 208, 209, 214, 216, 217, 219, 220, 221, 225, 226, 228, 229, 230, 233, 234, 237, 238, 252, 253, 255, 259, 260, 263, 266, 275, 282, 283, 284, 286, 287, 289, 296, 297, 309, 311, 343, 346, 348, 351, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 384, 388, 389, 392, 393, 394, 396, 400, 401, 402, 405, 409, 410, 411, 414, 417, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 437, 444, 445, 447, 458, 465, 481, 482, 483, 484, 486, 491, 492, 494, 496, 498, 501, 502, 504, 506, 508, 509, 540, 547, 548, 551, 558, 562, 565, 569], "14": [3, 5, 6, 10, 15, 19, 26, 28, 29, 30, 33, 34, 36, 38, 108, 121, 124, 176, 180, 182, 189, 193, 214, 217, 221, 226, 232, 239, 309, 343, 361, 363, 364, 365, 366, 367, 368, 370, 376, 378, 384, 385, 387, 389, 393, 397, 402, 414, 423, 447, 482, 483, 484, 492, 501, 502, 547, 551, 562], "resolut": [3, 26, 121, 361, 541], "1e": [3, 6, 8, 11, 12, 14, 26, 29, 31, 34, 35, 37, 54, 55, 121, 272, 273, 300, 301, 309, 343, 344, 349, 351, 361, 364, 365, 366, 368, 369, 373, 419, 429, 430, 431, 476, 514, 516, 530, 547, 556, 559, 561, 570, 571], "06": [3, 15, 28, 31, 59, 121, 177, 192, 349, 357, 361, 364, 366, 484, 514, 516, 562, 569], "min": [3, 6, 7, 11, 19, 26, 29, 30, 34, 42, 121, 124, 220, 260, 296, 297, 309, 361, 363, 364, 365, 368, 378, 410, 416, 419, 420, 426, 530], "4028235e": [3, 121, 361], "38": [3, 6, 28, 29, 38, 121, 236, 361, 363, 364, 368, 411, 551], "max": [3, 6, 7, 11, 19, 26, 29, 30, 34, 42, 55, 121, 124, 219, 254, 255, 260, 284, 296, 297, 361, 363, 364, 365, 368, 378, 410, 412, 415, 548, 560, 562], "iinfo": [3, 26, 361, 554], "integ": [3, 5, 6, 10, 11, 13, 15, 19, 20, 23, 28, 29, 33, 34, 36, 38, 42, 43, 45, 46, 73, 84, 124, 125, 130, 134, 135, 139, 175, 184, 185, 186, 187, 188, 189, 190, 199, 200, 218, 225, 228, 229, 238, 239, 271, 325, 360, 361, 363, 364, 365, 367, 368, 370, 374, 377, 378, 379, 383, 384, 385, 386, 388, 390, 392, 401, 411, 425, 426, 442, 481, 482, 483, 484, 485, 486, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 521, 541, 547, 549, 557, 558, 561, 562, 566, 568], "119": [3, 124], "122": [3, 124, 192, 363], "int8": [3, 15, 26, 38, 117, 122, 124, 125, 129, 361, 482, 549, 562], "128": [3, 6, 10, 26, 29, 33, 46, 124, 259, 271, 361, 364, 365, 367, 368, 385, 387, 392, 414], "127": [3, 6, 26, 29, 124, 361, 364], "12": [3, 5, 6, 7, 10, 11, 15, 19, 26, 28, 29, 30, 33, 34, 36, 37, 38, 42, 45, 46, 124, 178, 179, 184, 188, 189, 192, 194, 195, 196, 209, 221, 223, 229, 232, 238, 239, 255, 259, 260, 273, 296, 297, 301, 309, 363, 364, 365, 367, 368, 370, 373, 374, 375, 376, 378, 384, 388, 393, 394, 402, 410, 414, 421, 423, 437, 441, 443, 445, 447, 476, 482, 483, 484, 491, 492, 500, 501, 502, 506, 508, 540, 545, 547, 549, 551, 558, 563], "54": [3, 5, 10, 28, 29, 33, 38, 124, 191, 192, 197, 233, 238, 363, 364, 367, 368, 378, 394, 397, 411, 414, 482, 483, 484, 502, 551], "1220": [3, 124], "int16": [3, 15, 19, 26, 38, 111, 117, 122, 124, 130, 145, 361, 378, 482, 500, 501, 506, 508, 549, 560, 562, 566], "32768": [3, 26, 124], "32767": [3, 26, 124], "is_bool_dtyp": [3, 26, 361], "is_float_dtyp": [3, 26, 361, 563], "see": [3, 5, 11, 16, 17, 19, 20, 28, 29, 34, 39, 42, 43, 45, 46, 73, 83, 86, 110, 129, 135, 178, 182, 184, 186, 187, 188, 189, 194, 195, 198, 200, 202, 203, 208, 209, 212, 214, 215, 217, 218, 221, 223, 225, 228, 235, 239, 360, 361, 363, 364, 368, 375, 376, 378, 379, 399, 412, 415, 418, 425, 426, 488, 492, 493, 494, 495, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 532, 535, 539, 540, 541, 543, 544, 546, 547, 548, 550, 551, 555, 556, 560, 561, 562, 563, 564, 566, 568, 569, 573, 574, 576], "is_int_dtyp": [3, 26, 361, 561, 563], "is_uint_dtyp": [3, 26, 361, 561, 563], "result_typ": [3, 26, 361, 549], "arrays_and_dtyp": [3, 26, 135, 361], "involv": [3, 26, 135, 178, 361, 363, 533, 535, 542, 548, 549, 551, 564, 571, 580, 586], "_arraywithdevic": [4, 45], "dev": [4, 23, 27, 91, 159, 165, 360, 362, 540, 550, 556, 568, 570], "get": [4, 11, 23, 27, 34, 40, 50, 51, 52, 119, 120, 121, 124, 154, 155, 156, 159, 164, 168, 171, 174, 250, 268, 269, 270, 272, 273, 274, 276, 278, 279, 295, 308, 357, 361, 362, 365, 368, 372, 426, 459, 495, 530, 534, 535, 538, 539, 540, 542, 546, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 575, 580, 586], "handl": [4, 6, 23, 27, 29, 46, 55, 151, 152, 153, 154, 155, 159, 163, 164, 171, 174, 362, 364, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 564, 570, 577, 587], "format": [4, 6, 19, 22, 23, 24, 27, 29, 67, 119, 155, 259, 357, 361, 362, 364, 365, 367, 378, 383, 390, 391, 502, 514, 530, 542, 549, 550, 551, 552, 553, 560, 566, 568, 569, 576, 578, 580, 581], "to_devic": [4, 27, 154, 362, 530], "stream": [4, 27, 170, 362, 530, 584], "move": [4, 6, 27, 29, 170, 362, 364, 530, 541, 563], "dure": [4, 8, 19, 23, 27, 31, 42, 50, 53, 55, 170, 317, 343, 344, 349, 362, 364, 365, 366, 367, 368, 371, 378, 393, 409, 454, 455, 456, 507, 509, 540, 547, 549, 550, 553, 556, 557, 559, 560, 561, 562, 564, 574, 580, 581, 586], "In": [4, 7, 13, 27, 30, 36, 164, 170, 171, 174, 178, 228, 249, 284, 362, 363, 364, 365, 368, 370, 374, 417, 440, 484, 530, 532, 534, 536, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 576, 578, 580, 581, 583, 586], "addit": [4, 6, 7, 14, 27, 29, 30, 37, 52, 170, 178, 229, 259, 260, 261, 325, 362, 363, 365, 373, 476, 539, 540, 541, 545, 547, 549, 551, 552, 558, 560, 562, 563, 564, 568, 569, 571, 580, 581, 582, 586], "support": [4, 6, 7, 11, 27, 29, 30, 34, 55, 122, 126, 147, 157, 170, 174, 178, 216, 217, 229, 252, 264, 281, 284, 285, 311, 361, 362, 363, 364, 365, 367, 368, 394, 403, 404, 405, 408, 410, 419, 426, 514, 530, 532, 533, 534, 536, 540, 543, 544, 547, 550, 551, 552, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 568, 569, 571, 575, 577, 579, 580, 583, 585, 586, 587], "__dlpack__": [4, 27, 83, 170, 360, 362], "mai": [4, 5, 6, 11, 17, 18, 27, 28, 34, 41, 45, 46, 73, 83, 170, 195, 203, 209, 216, 217, 223, 258, 360, 362, 363, 364, 365, 368, 376, 377, 378, 417, 426, 492, 493, 494, 495, 496, 498, 503, 504, 505, 507, 534, 538, 539, 540, 541, 543, 547, 548, 549, 553, 556, 558, 559, 560, 561, 562, 564, 567, 568, 570, 587], "choos": [4, 16, 17, 27, 170, 216, 217, 362, 363, 375, 376, 378, 491, 492, 493, 494, 495, 503, 504, 505, 507, 539, 540, 541, 562, 567, 571, 587], "librari": [4, 17, 27, 170, 198, 212, 216, 217, 362, 363, 368, 376, 378, 404, 405, 492, 493, 494, 495, 503, 504, 505, 507, 530, 532, 533, 534, 535, 537, 539, 540, 543, 564, 571, 572, 574, 575, 576, 577, 578, 580, 584, 587], "specif": [4, 7, 27, 30, 40, 53, 135, 167, 170, 216, 217, 259, 260, 261, 293, 361, 362, 363, 365, 368, 370, 371, 374, 377, 378, 404, 405, 421, 444, 454, 455, 456, 481, 495, 497, 503, 504, 505, 507, 516, 528, 530, 532, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 553, 555, 556, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 573, 574, 575, 576, 578, 579, 581, 582, 583, 587], "caveat": [4, 27, 170, 362], "code": [4, 5, 23, 27, 28, 46, 170, 209, 252, 260, 261, 284, 296, 311, 356, 362, 365, 366, 367, 368, 370, 392, 411, 412, 413, 444, 530, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587], "would": [4, 6, 13, 27, 29, 36, 62, 66, 170, 357, 362, 364, 370, 440, 530, 533, 535, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 554, 555, 557, 559, 560, 561, 562, 564, 565, 566, 568, 570, 571, 574, 580, 586], "portabl": [4, 27, 170, 362, 530, 578], "_arraywithelementwis": [5, 45], "ab": [5, 11, 21, 28, 44, 45, 46, 225, 363, 364, 368, 372, 410, 420, 426, 465, 468, 516, 544, 549, 557, 560, 562], "absolut": [5, 6, 11, 21, 23, 28, 29, 34, 45, 175, 363, 364, 368, 410, 411, 412, 417, 514, 516, 535, 540, 564], "aco": [5, 28, 363], "real": [5, 6, 19, 28, 29, 42, 176, 177, 179, 181, 182, 194, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 221, 225, 228, 233, 234, 235, 237, 238, 239, 363, 364, 368, 378, 403, 417, 503, 505, 507, 547, 582], "invers": [5, 6, 11, 28, 29, 34, 176, 177, 179, 180, 181, 182, 183, 363, 364, 368, 407, 411, 415, 524, 549, 573], "cosin": [5, 28, 176, 177, 191, 192, 363, 364], "57": [5, 28, 156, 176, 177, 179, 180, 182, 192, 193, 226, 362, 363], "69": [5, 31, 38, 176, 212, 347, 363, 364, 366, 368, 410, 411, 483, 562, 569], "acosh": [5, 28, 122, 123, 361, 363], "area": [5, 6, 28, 29, 177, 180, 183, 363, 364, 533, 559, 564, 572, 576], "hyperbol": [5, 28, 177, 180, 183, 192, 232, 237, 363], "sector": [5, 28, 177, 180, 183, 363, 533], "32": [5, 6, 15, 28, 29, 34, 38, 45, 46, 61, 120, 177, 188, 189, 229, 230, 259, 283, 357, 361, 363, 364, 365, 367, 368, 374, 375, 378, 385, 387, 388, 389, 392, 394, 409, 414, 482, 483, 484, 491, 502, 530, 548, 558, 569, 585], "99": [5, 8, 26, 28, 38, 84, 177, 191, 309, 347, 360, 363, 365, 366, 378, 483, 502], "add": [5, 14, 21, 23, 28, 37, 44, 45, 46, 54, 292, 317, 352, 356, 363, 364, 365, 366, 373, 476, 516, 521, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 555, 556, 559, 560, 562, 563, 564, 566, 568, 574, 576, 578, 580], "second": [5, 6, 8, 11, 13, 17, 28, 29, 30, 31, 34, 36, 40, 45, 46, 55, 133, 141, 178, 182, 184, 186, 187, 188, 189, 195, 200, 201, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 225, 235, 251, 276, 303, 321, 343, 344, 349, 361, 363, 364, 365, 366, 368, 370, 371, 372, 376, 399, 402, 403, 404, 406, 409, 414, 416, 417, 419, 421, 425, 444, 445, 455, 458, 492, 493, 494, 534, 540, 543, 546, 549, 551, 559, 560, 562, 568, 585], "compat": [5, 11, 13, 16, 19, 20, 28, 34, 36, 39, 42, 43, 45, 46, 110, 178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 225, 228, 235, 239, 361, 363, 368, 370, 375, 378, 379, 399, 412, 415, 418, 421, 425, 426, 440, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 533, 545, 555, 560, 561, 563, 566, 574], "multipli": [5, 6, 10, 19, 28, 29, 33, 178, 235, 363, 364, 367, 378, 393, 500, 541, 544, 545, 547, 551], "sum": [5, 6, 7, 10, 11, 12, 19, 23, 28, 29, 30, 33, 34, 35, 42, 45, 46, 51, 169, 178, 214, 235, 260, 296, 297, 362, 363, 364, 365, 367, 368, 369, 378, 393, 397, 410, 419, 423, 426, 430, 431, 501, 502, 530, 547, 549, 556, 558, 559, 560, 566], "determin": [5, 6, 11, 13, 17, 20, 23, 28, 29, 30, 34, 41, 43, 45, 46, 51, 82, 111, 113, 120, 126, 127, 128, 129, 130, 131, 132, 147, 160, 161, 162, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 198, 200, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 221, 225, 228, 231, 232, 233, 234, 235, 236, 237, 239, 248, 251, 280, 281, 285, 286, 287, 288, 289, 311, 324, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 376, 379, 396, 398, 399, 400, 402, 406, 407, 409, 411, 412, 414, 415, 417, 418, 423, 425, 426, 434, 454, 455, 456, 492, 493, 494, 495, 496, 510, 511, 521, 532, 547, 549, 550, 552, 556, 560, 564], "15": [5, 6, 7, 11, 15, 19, 25, 26, 28, 29, 30, 33, 34, 36, 38, 42, 46, 85, 121, 178, 184, 188, 194, 202, 208, 214, 221, 228, 229, 230, 255, 259, 260, 263, 276, 282, 283, 303, 309, 321, 360, 361, 363, 364, 365, 367, 368, 370, 374, 375, 376, 378, 384, 394, 402, 405, 407, 414, 420, 421, 441, 447, 482, 483, 490, 492, 500, 501, 502, 516, 540, 551, 558, 583], "asin": [5, 28, 363], "sine": [5, 28, 179, 180, 231, 232, 363], "927": [5, 28, 179], "asinh": [5, 28, 363], "atan": [5, 28, 363], "tangent": [5, 28, 181, 182, 183, 236, 237, 363, 552], "785": [5, 28, 181, 182, 363], "atan2": [5, 28, 363], "quotient": [5, 28, 182, 363], "245": [5, 33, 182, 367, 393, 394], "68": [5, 38, 62, 84, 182, 357, 360, 363, 364, 373, 476, 483, 484], "588": [5, 182, 363], "inf": [5, 6, 7, 11, 28, 29, 30, 34, 182, 198, 204, 205, 206, 207, 210, 211, 280, 324, 358, 363, 364, 365, 368, 410, 426, 549, 558], "36": [5, 6, 10, 19, 29, 30, 34, 182, 229, 230, 259, 260, 363, 364, 365, 368, 372, 378, 394, 411, 414, 420, 424, 468, 502], "75": [5, 6, 28, 29, 30, 33, 38, 86, 180, 182, 194, 261, 282, 309, 360, 363, 364, 365, 368, 372, 374, 384, 407, 414, 465, 484], "52": [5, 28, 30, 31, 38, 182, 192, 194, 259, 260, 283, 343, 363, 365, 366, 367, 368, 378, 394, 414, 484, 502], "719": [5, 182, 363], "197": [5, 182, 363], "atanh": [5, 28, 363], "549": [5, 28, 33, 183, 363, 367, 394], "47": [5, 6, 15, 28, 29, 30, 31, 38, 183, 233, 259, 260, 347, 363, 364, 365, 366, 367, 374, 394, 483, 484], "bitwise_and": [5, 28, 363, 553], "11": [5, 6, 7, 10, 11, 15, 19, 28, 29, 30, 33, 34, 36, 38, 42, 46, 178, 181, 184, 198, 228, 229, 235, 253, 259, 260, 266, 283, 297, 363, 364, 365, 367, 368, 369, 370, 372, 374, 375, 376, 378, 384, 385, 393, 394, 402, 405, 407, 409, 410, 414, 419, 420, 431, 437, 442, 443, 445, 447, 463, 465, 475, 482, 483, 484, 491, 492, 500, 501, 502, 509, 547, 548, 549, 551, 558, 563], "bitwise_invert": [5, 28, 363], "bitiwse_invert": [5, 185], "bitwise_left_shift": [5, 28, 363], "bitwise_or": [5, 28, 363], "bitwise_right_shift": [5, 28, 45, 363], "64": [5, 6, 10, 28, 29, 30, 33, 34, 38, 42, 46, 52, 120, 188, 225, 233, 234, 259, 260, 349, 361, 363, 364, 365, 366, 367, 368, 378, 385, 387, 389, 392, 411, 414, 420, 424, 483, 502, 506, 530, 540, 569, 570, 585], "b": [5, 6, 7, 10, 14, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 74, 75, 79, 82, 84, 85, 87, 90, 92, 96, 108, 109, 110, 111, 119, 129, 130, 135, 155, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 290, 296, 297, 309, 311, 315, 316, 324, 343, 344, 345, 347, 349, 351, 353, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 424, 426, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 460, 463, 464, 465, 466, 468, 474, 475, 476, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 531, 534, 535, 542, 543, 545, 547, 548, 551, 556, 558, 561, 565, 566, 567, 569, 570, 571, 572, 576], "16": [5, 6, 7, 10, 11, 15, 19, 26, 28, 29, 30, 33, 34, 36, 38, 45, 46, 124, 188, 212, 229, 236, 260, 263, 309, 355, 361, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 378, 392, 394, 398, 402, 405, 414, 420, 447, 465, 482, 483, 484, 491, 501, 502, 530, 541, 551, 569], "bitwise_xor": [5, 28, 45, 363], "89": [5, 15, 26, 28, 29, 38, 46, 124, 189, 361, 363, 364, 368, 378, 421, 483, 484, 508], "51": [5, 6, 28, 29, 30, 38, 189, 221, 232, 363, 364, 484], "18": [5, 6, 15, 28, 29, 33, 34, 38, 42, 62, 189, 194, 228, 232, 357, 363, 364, 368, 374, 378, 388, 402, 409, 414, 482, 483, 484, 501, 502, 506, 547, 551, 553], "19": [5, 6, 15, 28, 29, 34, 38, 180, 189, 212, 221, 236, 363, 364, 368, 372, 374, 377, 402, 410, 423, 468, 482, 483, 484, 498, 551], "26": [5, 6, 14, 15, 29, 30, 31, 38, 189, 194, 232, 282, 343, 363, 364, 365, 366, 367, 368, 372, 373, 378, 392, 402, 414, 421, 458, 476, 482, 483, 502], "27": [5, 6, 11, 15, 28, 29, 33, 34, 38, 42, 188, 189, 192, 225, 232, 233, 283, 363, 364, 365, 367, 368, 372, 378, 397, 409, 414, 424, 458, 465, 483, 502, 506], "23": [5, 6, 10, 15, 25, 28, 29, 30, 38, 85, 189, 192, 205, 206, 207, 228, 229, 230, 232, 238, 360, 363, 364, 367, 368, 372, 375, 389, 397, 402, 410, 420, 458, 465, 482, 483, 484, 491, 530, 562, 566], "20": [5, 6, 10, 15, 19, 28, 29, 30, 33, 34, 38, 42, 189, 193, 197, 226, 229, 233, 259, 267, 271, 297, 309, 363, 364, 365, 368, 374, 375, 378, 384, 385, 395, 402, 407, 410, 414, 421, 482, 490, 491, 500, 501, 502, 506, 508, 530, 548, 553, 564, 568], "74": [5, 38, 189, 214, 363, 364, 368, 411], "41": [5, 6, 28, 29, 30, 34, 62, 181, 189, 221, 233, 254, 255, 357, 363, 364, 365, 368, 378, 398, 508], "59": [5, 189], "24": [5, 6, 11, 19, 29, 30, 33, 34, 38, 45, 189, 209, 221, 229, 230, 233, 259, 260, 363, 364, 365, 368, 372, 378, 384, 402, 410, 414, 458, 482, 483, 484, 500, 502, 516, 569], "ceil": [5, 28, 73, 360, 363, 559], "round": [5, 6, 28, 29, 178, 190, 199, 200, 233, 238, 239, 363, 364, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "co": [5, 7, 28, 263, 363, 365, 533, 538, 549, 566, 573], "express": [5, 6, 28, 29, 176, 179, 181, 182, 191, 193, 226, 231, 236, 363, 364, 524, 552, 554, 560, 566, 571, 580, 581], "radian": [5, 6, 28, 29, 176, 179, 181, 182, 191, 193, 226, 231, 236, 363, 364, 552], "416": [5, 191, 363], "540": [5, 191], "990": [5, 191], "cosh": [5, 28, 363], "angl": [5, 6, 28, 29, 182, 192, 232, 237, 363, 364, 573], "76": [5, 19, 26, 28, 38, 124, 177, 192, 232, 361, 363, 368, 372, 378, 421, 465, 483, 502], "81": [5, 26, 28, 34, 38, 124, 192, 212, 234, 361, 363, 368, 372, 374, 378, 411, 424, 465, 484, 502, 562], "deg2rad": [5, 28, 363], "degre": [5, 6, 19, 28, 29, 42, 193, 226, 363, 364, 378, 507, 509, 579], "convers": [5, 6, 29, 193, 226, 298, 305, 365, 534, 539, 557, 565, 567, 571, 573, 574, 575, 579, 586], "90": [5, 6, 28, 29, 189, 193, 226, 229, 363, 364, 368, 378, 414, 502, 533], "180": [5, 28, 193, 226, 363], "270": [5, 28, 193, 226, 363], "360": [5, 28, 193, 226, 363, 548], "71": [5, 28, 193, 226, 363], "28": [5, 10, 14, 28, 29, 30, 33, 34, 38, 42, 193, 212, 226, 282, 343, 363, 364, 365, 366, 367, 368, 373, 378, 385, 387, 389, 392, 394, 414, 476, 482, 483, 484, 502, 506, 530], "divid": [5, 6, 7, 13, 23, 28, 29, 36, 45, 46, 200, 309, 363, 364, 365, 370, 442, 544, 547, 551, 562], "dividend": [5, 28, 194, 200, 228, 239, 363], "divisor": [5, 6, 8, 19, 28, 29, 31, 42, 55, 194, 200, 202, 228, 239, 343, 344, 349, 363, 364, 366, 378, 507, 509], "375": [5, 195, 223], "erf": [5, 28, 363], "exponenti": [5, 6, 28, 29, 196, 197, 214, 225, 363, 364], "gauss": [5, 28, 196, 363], "error": [5, 6, 23, 28, 29, 53, 55, 59, 196, 357, 363, 364, 368, 378, 417, 420, 503, 505, 534, 538, 540, 541, 543, 544, 545, 548, 549, 550, 551, 553, 554, 555, 560, 562, 563, 568, 574, 580], "328": [5, 196, 236, 363], "677": [5, 196, 363], "842": [5, 196, 236, 363], "exp": [5, 6, 28, 29, 198, 214, 363, 364, 368, 417, 558, 560], "evalu": [5, 23, 28, 29, 197, 198, 210, 211, 212, 213, 216, 222, 224, 230, 234, 355, 363, 364, 366, 372, 379, 467, 468, 510, 511, 541, 547, 549, 556, 557, 564, 580], "71828198": [5, 28, 197], "38905573": [5, 28, 197], "08553696": [5, 28, 197], "expm1": [5, 28, 363, 549], "244": [5, 198, 364, 530], "918": [5, 198], "48": [5, 6, 28, 29, 30, 31, 38, 61, 177, 198, 233, 282, 343, 347, 357, 363, 364, 365, 366, 368, 372, 378, 414, 458, 483, 502], "_": [5, 23, 28, 31, 111, 198, 204, 217, 229, 259, 343, 344, 361, 363, 364, 365, 366, 368, 370, 372, 378, 417, 420, 427, 448, 464, 507, 536, 547, 552, 554, 559, 562, 569], "147": [5, 198, 363], "floor": [5, 6, 28, 188, 363, 364, 559], "floor_divid": [5, 28, 363, 521], "greater": [5, 6, 15, 28, 29, 38, 45, 46, 176, 179, 182, 186, 188, 199, 200, 225, 228, 230, 238, 363, 364, 368, 370, 374, 399, 411, 443, 484, 541, 561], "greater_equ": [5, 28, 45, 46, 214, 363], "isfinit": [5, 28, 363, 560], "test": [5, 6, 20, 28, 29, 43, 127, 130, 204, 205, 206, 207, 290, 361, 363, 364, 365, 379, 510, 511, 514, 517, 530, 534, 538, 539, 542, 546, 549, 551, 553, 554, 557, 560, 563, 574, 580], "out_i": [5, 28, 29, 204, 205, 206, 207, 363, 364], "self_i": [5, 28, 29, 204, 205, 206, 207], "finit": [5, 6, 28, 29, 178, 182, 204, 225, 228, 363, 364], "isinf": [5, 28, 363], "detect_posit": [5, 28, 205, 363], "detect_neg": [5, 28, 205, 363], "detect": [5, 23, 28, 205, 363, 372, 457, 468, 539, 540, 545, 547, 548, 554, 562, 569, 570], "either": [5, 6, 7, 10, 19, 23, 28, 29, 30, 33, 34, 50, 52, 53, 83, 178, 182, 205, 210, 211, 213, 214, 228, 230, 231, 236, 258, 286, 292, 293, 317, 360, 363, 364, 365, 367, 368, 371, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 409, 414, 417, 454, 455, 456, 500, 501, 506, 508, 539, 540, 541, 545, 547, 549, 550, 551, 552, 553, 556, 559, 560, 561, 562, 564, 566, 569, 574, 580], "isnan": [5, 28, 363], "isreal": [5, 28, 363], "1j": [5, 6, 28, 29, 207, 309, 364, 365], "5j": [5, 28, 29, 207, 363, 364], "6j": [5, 6, 29, 207, 363, 364], "less": [5, 6, 11, 15, 19, 28, 29, 34, 38, 45, 46, 176, 177, 179, 182, 190, 210, 211, 212, 213, 225, 228, 230, 233, 363, 364, 368, 374, 378, 411, 412, 415, 426, 484, 507, 509, 533, 541, 547, 549, 551, 553, 555, 559, 560, 562, 564, 565, 566, 580, 582], "less_equ": [5, 28, 45, 46, 363, 553], "61": [5, 6, 28, 29, 31, 35, 38, 180, 210, 212, 234, 343, 363, 364, 366, 367, 369, 392, 429, 431, 484], "log10": [5, 28, 363], "logarithm": [5, 28, 197, 210, 211, 212, 213, 214, 363, 368, 417], "602": [5, 211, 363], "699": [5, 211, 363], "log1p": [5, 28, 363, 558], "693": [5, 28, 66, 180, 212, 357, 363, 369, 431], "001": [5, 6, 14, 26, 29, 31, 65, 121, 212, 344, 357, 361, 364, 366, 373, 476, 569, 570], "0953": [5, 28, 210, 212, 363], "log2": [5, 28, 363, 364], "logaddexp": [5, 28, 363], "logical_and": [5, 28, 363, 560, 564, 587], "logical_not": [5, 28, 363, 549], "logical_or": [5, 28, 363, 587], "conform": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 360, 361, 363, 364, 368, 370, 375, 376, 377, 378, 379, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 434, 436, 437, 438, 440, 441, 443, 444, 448, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 552], "api": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 133, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 360, 361, 363, 364, 368, 370, 375, 376, 377, 378, 379, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 434, 436, 437, 438, 440, 441, 443, 444, 448, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 531, 532, 540, 542, 544, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 565, 567, 569, 574, 575, 576, 578, 580, 582, 585, 587], "standard": [5, 6, 11, 14, 15, 19, 28, 29, 37, 38, 42, 51, 54, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 325, 360, 361, 363, 364, 365, 368, 370, 373, 374, 375, 376, 377, 378, 379, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 434, 436, 437, 438, 440, 441, 443, 444, 448, 476, 483, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 531, 542, 543, 544, 547, 549, 552, 555, 559, 562, 563, 574, 576, 578, 579, 582, 583, 585], "http": [5, 28, 31, 111, 204, 217, 221, 229, 343, 344, 361, 363, 364, 366, 368, 370, 378, 417, 427, 448, 507, 530, 536, 537, 540, 543, 546, 548, 549, 552], "org": [5, 28, 31, 111, 204, 217, 229, 343, 344, 361, 363, 364, 366, 368, 370, 378, 417, 427, 448, 507, 530, 552], "latest": [5, 28, 52, 111, 204, 217, 229, 361, 363, 364, 368, 370, 378, 417, 448, 507, 530, 539, 540, 541, 545, 548, 549, 552, 563, 574, 585], "extens": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 360, 361, 363, 368, 370, 375, 376, 377, 378, 379, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 434, 436, 437, 438, 440, 441, 443, 444, 448, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 536, 538, 540, 541, 552, 562, 577, 580, 587], "api_specif": [5, 28, 111, 204, 217, 229, 361, 363, 370, 378, 448, 507, 552], "signatur": [5, 28, 111, 204, 217, 229, 361, 363, 364, 368, 370, 378, 417, 448, 507, 533, 549, 550, 551, 552, 555, 559, 562, 563, 564, 577, 586], "elementwise_funct": [5, 28, 204, 217, 229, 363, 552], "html": [5, 28, 111, 204, 217, 229, 361, 363, 364, 368, 370, 378, 417, 448, 507, 533, 546, 552], "noqa": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 135, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 202, 203, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 325, 360, 361, 363, 364, 365, 368, 370, 375, 376, 377, 378, 379, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 434, 436, 437, 438, 440, 441, 443, 444, 448, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 503, 505, 506, 507, 508, 509, 510, 511, 561], "logical_xor": [5, 28, 363], "maximum": [5, 6, 7, 8, 13, 16, 19, 23, 28, 29, 30, 31, 36, 39, 42, 46, 169, 254, 255, 263, 349, 362, 363, 364, 365, 366, 368, 370, 372, 375, 378, 410, 433, 469, 487, 503, 505, 521, 541, 551, 559, 569, 587], "use_wher": [5, 28, 219, 220, 363], "calcul": [5, 6, 12, 19, 23, 28, 29, 34, 35, 42, 46, 51, 175, 176, 177, 178, 179, 180, 181, 182, 191, 192, 194, 197, 198, 210, 211, 212, 213, 214, 219, 220, 221, 225, 231, 232, 233, 235, 236, 237, 290, 363, 364, 365, 368, 369, 378, 405, 414, 417, 429, 430, 431, 503, 504, 505, 506, 507, 508, 509, 533, 539, 552, 566], "formula": [5, 28, 219, 220, 363], "clip": [5, 6, 13, 28, 29, 30, 36, 219, 220, 254, 255, 363, 364, 365, 370, 547, 556, 558, 559, 569, 571], "than": [5, 6, 7, 11, 13, 15, 16, 17, 19, 23, 28, 29, 30, 34, 36, 38, 39, 40, 42, 45, 46, 73, 121, 169, 176, 177, 179, 182, 186, 188, 190, 199, 200, 210, 211, 212, 213, 219, 225, 228, 230, 233, 238, 286, 287, 289, 360, 361, 362, 363, 364, 365, 368, 370, 374, 375, 376, 378, 399, 409, 411, 412, 415, 426, 433, 437, 443, 484, 490, 492, 493, 494, 495, 500, 501, 506, 507, 508, 509, 533, 536, 541, 543, 547, 548, 549, 551, 553, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 574, 577, 578, 579, 580, 586, 587], "minimum": [5, 6, 7, 13, 16, 19, 28, 29, 30, 36, 39, 42, 175, 272, 273, 300, 301, 309, 310, 363, 364, 365, 370, 375, 378, 433, 488, 503, 505, 521, 577, 583, 587], "exce": [5, 6, 29, 220, 363, 364], "product": [5, 10, 11, 19, 28, 29, 33, 34, 42, 52, 221, 363, 364, 367, 368, 378, 396, 397, 399, 406, 409, 414, 425, 500, 501, 502, 506, 507, 539, 566, 580, 582], "30": [5, 6, 29, 30, 38, 42, 46, 51, 221, 259, 261, 267, 282, 283, 297, 303, 309, 363, 364, 365, 368, 372, 378, 407, 414, 466, 482, 483, 501, 502, 506, 548], "56": [5, 6, 10, 15, 28, 29, 33, 87, 221, 233, 236, 238, 343, 360, 363, 364, 366, 367, 368, 378, 385, 387, 389, 394, 414, 420, 483, 502, 551], "21": [5, 6, 7, 15, 25, 28, 29, 34, 38, 42, 45, 87, 124, 178, 180, 182, 188, 189, 221, 297, 360, 361, 363, 364, 368, 369, 372, 378, 402, 414, 431, 463, 482, 483, 500, 501, 502, 558], "not_equ": [5, 28, 45, 46, 363], "pow": [5, 28, 45, 46, 363, 543], "expon": [5, 6, 7, 29, 30, 225, 310, 363, 364, 365, 368, 411], "25": [5, 7, 11, 12, 15, 19, 22, 28, 29, 30, 33, 34, 37, 38, 42, 45, 46, 67, 86, 178, 188, 194, 196, 221, 225, 227, 229, 232, 233, 234, 238, 282, 283, 297, 309, 360, 363, 364, 365, 368, 369, 372, 373, 378, 384, 398, 402, 407, 424, 426, 430, 458, 476, 482, 483, 484, 501, 502, 504, 509, 547, 558], "rad2deg": [5, 28, 363], "286": [5, 29, 226], "458": [5, 226], "573": [5, 226, 363], "reciproc": [5, 28, 363], "333": [5, 28, 194, 227, 255, 363, 365, 367, 392], "remaind": [5, 6, 13, 23, 28, 29, 36, 201, 363, 370, 442, 543, 559], "modulu": [5, 28, 228, 363, 559], "instead": [5, 28, 152, 228, 362, 363, 539, 540, 541, 543, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 566, 568, 569, 574, 578, 580, 586, 587], "sign": [5, 6, 11, 17, 19, 28, 29, 34, 73, 175, 178, 182, 188, 228, 360, 363, 364, 368, 376, 378, 417, 492, 493, 494, 495, 500, 501, 506, 508, 533, 540, 566, 571], "x2_i": [5, 28, 178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 225, 228, 235, 363, 543], "94": [5, 8, 15, 28, 31, 38, 164, 229, 230, 347, 362, 364, 366, 484], "256": [5, 229, 230, 367, 385, 387, 389], "0001": [5, 55, 229, 230], "67": [5, 7, 28, 30, 38, 45, 189, 192, 229, 230, 232, 238, 259, 260, 309, 346, 348, 355, 363, 365, 366, 484], "45": [5, 6, 19, 28, 29, 31, 38, 46, 182, 194, 229, 230, 343, 349, 363, 364, 366, 368, 370, 378, 414, 442, 483, 484, 502], "678": [5, 229, 230], "33": [5, 15, 19, 28, 30, 31, 33, 180, 181, 188, 229, 255, 309, 347, 363, 364, 365, 366, 367, 368, 372, 378, 393, 394, 414, 475, 482, 502, 509], "sin": [5, 7, 28, 263, 363, 365, 544, 566], "841": [5, 22, 28, 59, 231, 357, 363], "909": [5, 28, 30, 231, 363], "141": [5, 28, 108, 231, 361, 363], "sinh": [5, 28, 363], "63": [5, 22, 28, 34, 67, 226, 232, 233, 363, 364, 368, 372, 378, 398, 414, 458, 502], "232": [5, 28, 232, 363], "sqrt": [5, 6, 28, 29, 51, 363, 364], "squar": [5, 11, 28, 34, 233, 345, 346, 348, 355, 363, 364, 366, 368, 372, 398, 400, 401, 403, 404, 405, 407, 411, 417, 418, 419, 424, 463], "root": [5, 28, 50, 233, 363, 537, 540, 541, 546, 560, 569], "73": [5, 34, 233, 368, 374, 398, 483, 562], "44": [5, 6, 15, 28, 29, 38, 180, 221, 229, 233, 234, 253, 363, 364, 365, 367, 368, 372, 375, 378, 393, 414, 465, 482, 483, 491, 502], "subtract": [5, 28, 45, 46, 363, 364, 544, 547, 551], "differ": [5, 6, 7, 19, 23, 29, 30, 42, 45, 46, 53, 121, 178, 235, 266, 267, 361, 363, 364, 365, 367, 368, 370, 378, 393, 394, 417, 434, 444, 500, 501, 506, 508, 509, 530, 532, 533, 534, 538, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 574, 577, 578, 579, 580, 583, 586, 587], "tan": [5, 28, 250, 363, 365, 547, 552, 555, 556, 559, 560, 566], "tanh": [5, 28, 363, 566], "762": [5, 28, 237, 363], "964": [5, 28, 237, 363], "trunc": [5, 28, 363], "025": [5, 238, 363], "trunc_divid": [5, 28, 363], "activ": [6, 7, 21, 29, 44, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 311, 364, 530, 536, 540, 541, 563, 570, 580, 583], "_arraywithactivationsexperiment": [6, 45], "batch_norm": [6, 29, 364], "mean": [6, 7, 10, 13, 15, 19, 21, 23, 29, 30, 33, 36, 38, 42, 44, 51, 169, 260, 345, 346, 348, 355, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 378, 385, 387, 388, 389, 392, 393, 401, 440, 454, 455, 456, 463, 482, 483, 530, 540, 541, 542, 543, 545, 547, 549, 550, 551, 556, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 577, 580], "varianc": [6, 19, 29, 42, 51, 364, 378, 509], "offset": [6, 11, 29, 34, 364, 368, 402, 423, 520], "scale": [6, 10, 14, 29, 31, 33, 37, 51, 52, 55, 167, 168, 350, 362, 364, 366, 367, 373, 393, 396, 397, 476, 580, 582], "train": [6, 8, 10, 29, 31, 33, 51, 343, 344, 349, 364, 366, 367, 393, 530, 534, 547, 550, 556, 569, 570, 571, 572, 573, 574, 575, 578, 579, 584, 586, 587], "ep": [6, 11, 29, 34, 121, 361, 364, 368, 412, 415], "batch": [6, 7, 11, 23, 29, 30, 34, 54, 167, 168, 263, 266, 267, 325, 362, 364, 365, 367, 368, 371, 373, 394, 408, 426, 454, 455, 456, 476, 530, 547, 556, 569, 578], "featur": [6, 29, 51, 364, 530, 540, 541, 544, 555, 560, 563, 564, 569, 574, 580, 581, 582, 586], "follow": [6, 7, 8, 10, 11, 17, 23, 29, 30, 31, 33, 34, 52, 55, 124, 169, 228, 282, 283, 284, 309, 310, 344, 347, 349, 350, 351, 361, 362, 363, 364, 365, 366, 367, 368, 372, 376, 396, 397, 410, 416, 426, 463, 469, 492, 493, 494, 495, 530, 532, 533, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 577, 580, 583], "spatial": [6, 10, 29, 33, 364, 367, 383, 384, 385, 386, 388, 390, 392, 573], "normal": [6, 14, 15, 29, 37, 38, 51, 54, 364, 370, 373, 374, 434, 444, 476, 481, 483, 530, 539, 560, 564, 569, 578], "present": [6, 23, 29, 364, 532, 539, 541, 547, 549, 550, 555, 559, 566, 577, 578, 587], "ad": [6, 13, 29, 36, 44, 56, 309, 310, 364, 365, 368, 370, 404, 405, 436, 530, 533, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 570, 574, 579, 580], "small": [6, 11, 14, 29, 34, 37, 51, 54, 364, 368, 373, 412, 415, 417, 476, 530, 540, 548, 551, 556, 561, 564, 566, 570, 574, 581], "avoid": [6, 29, 198, 212, 253, 363, 364, 365, 540, 541, 545, 546, 547, 548, 549, 553, 554, 557, 560, 562, 563, 564, 580], "logit": [6, 12, 29, 35, 364, 369, 431, 530], "outpu": [6, 29, 364], "clamp": [6, 29, 364, 571], "elementwis": [6, 14, 29, 37, 239, 364, 368, 373, 424, 476, 556, 563, 566], "19722438": [6, 29, 364], "38629448": [6, 29, 364], "38629436": [6, 29, 364], "logsigmoid": [6, 29, 364], "31326175": [6, 22, 364], "126928": [6, 29], "01814993": 6, "00004578": 6, "57888985": 6, "31326169": [6, 29, 364], "69314718": [6, 22, 29, 364], "01104775": 6, "prelu": [6, 29, 364], "take": [6, 11, 13, 19, 29, 36, 51, 90, 189, 360, 363, 364, 368, 370, 409, 413, 440, 500, 521, 530, 534, 535, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 556, 559, 560, 561, 562, 564, 566, 568, 570, 571, 574, 577, 578, 586], "produc": [6, 10, 29, 33, 364, 367, 397, 539, 549, 561, 562, 563, 581, 583], "f": [6, 13, 29, 36, 364, 370, 372, 440, 460, 464, 465, 466, 474, 475, 530, 534, 535, 541, 542, 547, 548, 554, 566, 569, 576], "unidirect": [6, 364], "smaller": [6, 13, 19, 36, 259, 364, 365, 370, 378, 433, 441, 500, 501, 506, 508, 530, 541, 566], "relu6": [6, 29, 364], "rectifi": [6, 22, 29, 61, 63, 64, 357, 364], "linear": [6, 7, 10, 22, 29, 30, 33, 51, 52, 59, 60, 61, 63, 64, 67, 263, 292, 357, 364, 365, 367, 372, 418, 464, 530, 547, 552, 556, 560, 562, 564, 566, 569, 570, 571, 578, 579, 580, 583], "unit": [6, 22, 29, 59, 61, 62, 63, 64, 65, 66, 67, 357, 364, 530, 540, 543, 549, 560, 561, 562, 574, 581, 584], "selu": [6, 29, 364], "11133075": [6, 364], "05070102": [6, 29, 364], "10140204": [6, 364], "15210295": [6, 364], "20280409": [6, 364], "25350523": [6, 364], "30420589": [6, 364], "35490704": [6, 364], "thresholded_relu": [6, 29, 364], "custom": [6, 29, 364, 533, 537, 548, 553, 561, 562, 564, 570, 580, 584, 585, 586], "_arraywithconversionsexperiment": [6, 45], "creation": [6, 23, 29, 46, 546, 549, 550, 553, 555, 557, 560, 561, 562, 563, 566, 580, 582, 586], "_arraywithcreationexperiment": [6, 45], "eye_lik": [6, 29, 364], "refer": [6, 13, 19, 20, 29, 31, 36, 42, 43, 52, 82, 198, 212, 343, 344, 360, 363, 364, 366, 368, 370, 378, 379, 401, 425, 440, 507, 509, 510, 511, 530, 538, 539, 540, 541, 543, 544, 548, 549, 555, 556, 557, 558, 560, 561, 562, 574, 575, 580], "elsewher": [6, 29, 82, 360, 364, 375, 491, 540], "_arraywithdata_typeexperiment": [6, 45], "_arraywithdeviceexperiment": [6, 45], "_arraywithelementwiseexperiment": [6, 45], "allclos": [6, 29, 364], "rtol": [6, 11, 29, 34, 364, 368, 412, 415, 514, 516, 561], "atol": [6, 11, 29, 34, 364, 368, 412, 514, 516, 561], "08": [6, 19, 29, 38, 180, 363, 364, 367, 397, 483, 484, 509, 514], "equal_nan": [6, 29, 364], "rel": [6, 8, 11, 13, 18, 25, 29, 31, 34, 36, 41, 45, 85, 344, 347, 349, 350, 351, 364, 366, 368, 370, 377, 402, 412, 415, 423, 437, 441, 496, 498, 514, 516, 541, 546, 548, 561, 564, 580, 582], "toler": [6, 11, 29, 34, 364, 368, 412, 415, 514, 516, 543, 561, 580], "compar": [6, 7, 17, 18, 23, 29, 30, 41, 248, 251, 364, 365, 376, 377, 492, 493, 494, 495, 496, 498, 516, 530, 545, 551, 553, 554, 561, 562, 564, 569, 576, 578, 580, 586, 587], "consid": [6, 11, 17, 29, 34, 51, 216, 217, 363, 364, 368, 376, 401, 412, 492, 493, 494, 495, 532, 533, 544, 548, 549, 556, 558, 563, 564, 567, 568, 569, 577, 581, 585, 587], "altern": [6, 29, 364, 530, 539, 540, 546, 559, 560, 569, 583], "given": [6, 7, 12, 13, 15, 23, 29, 30, 31, 35, 36, 38, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 60, 73, 80, 86, 87, 114, 115, 116, 117, 118, 134, 156, 164, 166, 167, 168, 169, 171, 174, 267, 296, 297, 304, 343, 344, 347, 349, 350, 351, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 427, 429, 430, 431, 433, 436, 437, 438, 439, 441, 442, 446, 447, 464, 465, 474, 475, 482, 483, 484, 486, 497, 498, 500, 501, 514, 516, 521, 524, 533, 534, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 570, 573, 577, 582, 583, 586, 587], "1e10": [6, 364], "00001e10": [6, 364], "00001e": [6, 364], "005": [6, 364], "deg": [6, 29, 364], "complex": [6, 11, 26, 29, 34, 114, 128, 136, 142, 207, 309, 361, 363, 364, 365, 368, 403, 404, 405, 419, 536, 539, 546, 549, 551, 560, 562, 564, 569, 570, 571, 574, 575, 576, 578, 580, 582, 586, 587], "def": [6, 29, 253, 365, 372, 463, 530, 539, 540, 543, 544, 547, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571], "set_backend": [6, 21, 29, 123, 131, 152, 153, 166, 167, 361, 362, 364, 530, 543, 545, 549, 556, 557, 558, 566, 568, 571], "tensorflow": [6, 7, 29, 152, 311, 362, 364, 365, 514, 521, 530, 533, 534, 538, 539, 540, 541, 543, 548, 549, 550, 555, 559, 560, 561, 562, 563, 564, 566, 571, 574, 575, 578, 581, 583, 584, 586, 587], "2j": [6, 29, 364], "3j": [6, 28, 29, 207, 363, 364], "35619449": [6, 364], "78539816": [6, 364], "numpi": [6, 7, 19, 29, 30, 131, 152, 252, 284, 309, 311, 315, 361, 362, 364, 365, 378, 502, 514, 516, 530, 532, 533, 538, 539, 540, 541, 543, 544, 545, 548, 549, 550, 553, 555, 559, 561, 562, 563, 564, 566, 568, 571, 575, 582, 587], "135": [6, 254, 364, 365], "binar": [6, 29, 364], "map": [6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 325, 347, 353, 364, 365, 372, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 464, 465, 469, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 544, 547, 549, 555, 556, 560, 562, 563, 569, 573, 574, 575, 581], "outcom": [6, 29, 364], "comparison": [6, 29, 364, 368, 420, 553], "conj": [6, 29, 364], "conjug": [6, 11, 29, 34, 364, 368, 409, 413], "copysign": [6, 29, 364], "new": [6, 7, 8, 13, 14, 23, 25, 29, 30, 31, 34, 36, 37, 40, 49, 52, 54, 55, 80, 83, 84, 85, 90, 91, 92, 95, 96, 141, 183, 222, 224, 227, 259, 260, 261, 263, 266, 267, 271, 296, 297, 300, 306, 309, 310, 315, 344, 347, 349, 350, 351, 360, 361, 363, 364, 365, 366, 370, 372, 373, 414, 436, 440, 444, 462, 474, 475, 476, 495, 530, 532, 533, 534, 535, 539, 540, 541, 542, 544, 545, 547, 548, 549, 551, 552, 554, 557, 559, 560, 561, 562, 563, 564, 565, 568, 571, 573, 575, 578, 582, 586, 587], "unsign": [6, 19, 29, 364, 378, 500, 501, 506, 508, 549, 566], "count_nonzero": [6, 29, 364], "keepdim": [6, 11, 13, 16, 19, 20, 23, 29, 34, 36, 39, 42, 43, 364, 368, 370, 375, 378, 379, 410, 426, 447, 487, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 553, 560, 566], "count": [6, 13, 17, 20, 29, 36, 40, 43, 163, 362, 364, 368, 370, 376, 379, 425, 434, 437, 492, 493, 510, 511, 547, 551, 569], "flatten": [6, 7, 11, 13, 16, 17, 29, 30, 34, 36, 39, 40, 50, 259, 263, 364, 365, 368, 370, 375, 376, 406, 414, 426, 434, 439, 441, 487, 488, 492, 493, 494, 495, 514, 516, 530, 564], "left": [6, 11, 16, 18, 29, 34, 39, 41, 186, 259, 363, 364, 365, 368, 375, 377, 403, 404, 410, 419, 424, 487, 497, 540, 541, 543, 546, 548, 549, 551], "size": [6, 7, 10, 11, 13, 15, 16, 23, 29, 30, 33, 34, 36, 38, 39, 45, 46, 52, 86, 167, 168, 169, 296, 360, 362, 364, 365, 367, 368, 370, 374, 375, 379, 397, 402, 406, 410, 414, 416, 419, 425, 436, 441, 442, 443, 481, 487, 490, 510, 511, 530, 561, 562, 564, 569], "correctli": [6, 11, 16, 29, 34, 39, 364, 368, 375, 410, 487, 539, 540, 541, 544, 547, 549, 551, 553, 554, 555, 559, 561, 562, 564, 570, 574], "total": [6, 19, 23, 29, 42, 46, 171, 362, 364, 375, 378, 490, 507, 509, 530, 534, 535, 541, 549, 550, 551, 562, 564, 569, 570, 574], "diff": [6, 23, 29, 364, 551, 559], "prepend": [6, 29, 364, 368, 370, 409, 436], "append": [6, 11, 23, 29, 186, 363, 364, 368, 370, 402, 409, 436, 530, 548, 553, 562, 566, 569], "time": [6, 8, 11, 17, 29, 31, 40, 52, 53, 344, 349, 364, 366, 367, 368, 370, 371, 375, 376, 393, 395, 409, 446, 454, 455, 456, 487, 488, 492, 493, 532, 533, 534, 539, 540, 541, 545, 547, 548, 549, 551, 555, 556, 557, 559, 560, 562, 563, 566, 569, 571, 574, 578, 580, 581, 584, 585, 586], "differenc": [6, 29, 364], "taken": [6, 11, 29, 34, 364, 368, 402, 548, 554, 560, 563, 571, 581], "prior": [6, 29, 364, 553, 563], "expand": [6, 7, 13, 29, 30, 263, 364, 365, 370, 436, 546, 547], "direct": [6, 29, 364, 377, 498, 539, 544, 546, 560, 564, 570, 571, 573, 576, 580, 581, 584], "except": [6, 7, 13, 15, 20, 23, 29, 30, 34, 38, 43, 53, 110, 258, 284, 299, 311, 317, 361, 362, 364, 365, 368, 370, 374, 375, 379, 415, 434, 436, 444, 482, 483, 484, 490, 510, 511, 514, 517, 530, 541, 542, 543, 544, 548, 549, 552, 554, 555, 559, 560, 564, 568, 574], "th": [6, 29, 364], "discret": [6, 29, 364, 369, 430], "exp2": [6, 29, 364], "power": [6, 7, 11, 29, 30, 34, 45, 46, 51, 188, 197, 225, 272, 300, 310, 363, 364, 365, 368, 372, 411, 424, 463, 568, 569, 570, 580, 582, 586], "fix": [6, 29, 364, 530, 540, 541, 543, 549, 562, 563], "nearest": [6, 29, 178, 229, 363, 364, 564], "toward": [6, 13, 36, 239, 363, 364, 370, 441, 530, 536, 540, 563, 566, 576, 580], "float_pow": [6, 29, 364], "rais": [6, 7, 13, 15, 17, 20, 23, 29, 30, 36, 38, 40, 43, 53, 55, 110, 197, 225, 252, 272, 284, 300, 310, 311, 317, 356, 361, 362, 363, 364, 365, 366, 368, 370, 374, 375, 376, 378, 379, 409, 411, 425, 436, 440, 444, 482, 483, 484, 490, 495, 503, 505, 510, 511, 514, 530, 533, 541, 543, 545, 553, 554, 559, 560, 566, 568], "thei": [6, 11, 15, 23, 34, 38, 56, 133, 361, 364, 368, 371, 374, 424, 454, 455, 481, 514, 530, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 574, 577, 580, 582, 583, 586, 587], "common": [6, 23, 29, 134, 361, 364, 532, 539, 540, 546, 547, 549, 550, 551, 554, 556, 557, 560, 563, 564, 574, 577, 580, 587], "becom": [6, 29, 364, 370, 433, 532, 534, 541, 546, 547, 551, 553, 560, 574], "125": [6, 11, 34, 188, 363, 364, 368, 424], "fmax": [6, 29, 364], "fmin": [6, 29, 364], "fmod": [6, 29, 363], "divis": [6, 7, 8, 29, 30, 31, 55, 188, 194, 200, 201, 228, 239, 273, 301, 309, 343, 344, 349, 363, 364, 365, 366, 367, 383, 390, 391, 556], "frexp": [6, 29, 364], "next": [6, 29, 51, 53, 55, 121, 361, 364, 534, 536, 539, 540, 541, 545, 551, 552, 557, 560, 563, 567, 568, 569, 580, 582], "represent": [6, 7, 23, 29, 30, 46, 106, 107, 121, 124, 151, 152, 175, 178, 184, 187, 189, 218, 249, 313, 358, 361, 362, 363, 364, 365, 573, 578, 579, 581, 585, 586], "gcd": [6, 29, 364], "gradient": [6, 29, 53, 55, 169, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 362, 364, 371, 454, 455, 456, 516, 521, 542, 563, 569, 570, 573, 574, 580], "edge_ord": [6, 29, 364], "w": [6, 7, 8, 10, 23, 28, 29, 30, 31, 33, 215, 259, 261, 309, 343, 344, 345, 347, 349, 350, 351, 364, 365, 366, 367, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 463, 530, 558, 566, 569, 570], "r": [6, 11, 23, 29, 34, 345, 364, 366, 368, 370, 416, 447, 540, 541, 542, 558, 561], "t": [6, 10, 21, 29, 33, 44, 45, 284, 311, 345, 364, 365, 366, 367, 372, 394, 395, 465, 530, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 551, 557, 558, 559, 562, 563, 564, 566, 568, 569, 570, 571, 574, 578, 580, 582], "estim": [6, 29, 364], "boundari": [6, 15, 29, 38, 364, 374, 484, 580], "note": [6, 11, 13, 17, 29, 34, 36, 134, 212, 228, 229, 253, 361, 363, 364, 365, 368, 370, 376, 378, 403, 404, 417, 419, 440, 444, 493, 495, 504, 536, 539, 540, 541, 544, 546, 549, 551, 552, 560, 561, 562, 563], "jax": [6, 7, 17, 30, 252, 284, 311, 325, 364, 365, 376, 492, 493, 494, 495, 530, 533, 534, 538, 539, 540, 541, 543, 545, 549, 550, 553, 555, 558, 559, 560, 561, 562, 563, 564, 566, 568, 571, 574, 581, 583, 586, 587], "over": [6, 11, 19, 20, 21, 26, 29, 34, 42, 43, 44, 54, 325, 364, 365, 368, 373, 374, 378, 379, 410, 421, 425, 426, 476, 484, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 532, 534, 540, 541, 545, 551, 552, 558, 559, 561, 566, 568, 574, 578, 580], "partial": [6, 23, 29, 53, 348, 364, 366, 368, 408, 541, 546, 564], "diment": [6, 364], "40": [6, 7, 29, 30, 38, 42, 46, 188, 192, 233, 259, 261, 267, 297, 309, 325, 345, 363, 364, 365, 366, 368, 372, 378, 407, 414, 466, 483, 502, 506, 548], "80": [6, 29, 364, 368, 372, 378, 414, 468, 502, 533, 553], "72": [6, 15, 29, 31, 197, 198, 347, 363, 364, 366, 368, 378, 414, 483, 502], "33333333": [6, 29, 227, 363, 364], "hypot": [6, 29, 364], "hypotenus": [6, 364], "4031": [6, 364], "8102": [6, 364], "imag": [6, 10, 29, 33, 259, 364, 365, 367, 383, 384, 385, 386, 387, 390, 391, 392, 530, 536, 540, 563, 564, 566, 567, 569, 571, 573, 580], "imaginari": [6, 29, 364, 551], "4j": [6, 29, 364], "isclos": [6, 29, 364, 543], "hold": [6, 7, 11, 19, 29, 34, 42, 296, 297, 364, 365, 368, 378, 410, 501, 517, 530, 569, 581], "lcm": [6, 29, 364], "least": [6, 11, 29, 364, 368, 409, 530, 541, 544, 548, 549, 551, 556, 562], "multipl": [6, 11, 14, 19, 20, 23, 28, 29, 30, 31, 34, 36, 37, 42, 43, 52, 188, 214, 219, 220, 248, 292, 343, 344, 347, 349, 351, 353, 363, 364, 365, 366, 367, 368, 370, 373, 375, 378, 379, 385, 386, 387, 388, 398, 407, 409, 410, 433, 436, 441, 442, 476, 487, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 534, 541, 544, 545, 546, 547, 551, 553, 556, 559, 560, 561, 562, 564, 566, 574, 578, 579, 580, 587], "60": [6, 19, 29, 30, 38, 42, 267, 283, 297, 309, 325, 364, 365, 368, 372, 378, 414, 460, 482, 500, 502, 506, 548], "ldexp": [6, 29, 364], "logaddexp2": [6, 29, 364], "169925": [6, 29, 364], "nan_to_num": [6, 29, 364], "posinf": [6, 29, 364], "neginf": [6, 29, 364], "replac": [6, 7, 13, 15, 23, 29, 30, 36, 38, 82, 296, 297, 360, 364, 365, 370, 374, 433, 481, 533, 541, 546, 547, 549, 550, 551, 557, 560, 562, 568, 571, 574, 587], "doe": [6, 7, 13, 23, 29, 36, 189, 284, 363, 364, 365, 368, 370, 403, 442, 514, 533, 539, 541, 542, 545, 548, 549, 551, 552, 555, 556, 559, 560, 561, 562, 563, 564, 566, 568, 569, 574, 575, 576, 580, 581, 587], "requir": [6, 23, 29, 49, 233, 363, 364, 368, 370, 403, 404, 405, 444, 521, 536, 537, 539, 540, 544, 546, 548, 549, 550, 551, 552, 553, 555, 557, 560, 561, 562, 563, 564, 566, 568, 574, 580, 586], "pass": [6, 21, 23, 29, 44, 46, 49, 53, 55, 56, 113, 134, 152, 169, 182, 284, 361, 362, 363, 364, 365, 371, 454, 455, 514, 516, 521, 530, 539, 541, 543, 544, 545, 547, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 574, 578], "veri": [6, 29, 364, 368, 417, 532, 533, 538, 539, 540, 541, 546, 547, 549, 550, 551, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 569, 570, 571, 574, 576, 577, 578, 580, 581, 582, 585, 586, 587], "larg": [6, 29, 178, 363, 364, 368, 417, 540, 541, 548, 569, 580], "itself": [6, 249, 317, 364, 365, 372, 469, 532, 540, 541, 543, 546, 547, 548, 553, 559, 560, 570, 573, 574, 579, 580, 581, 586], "5e": [6, 8, 29, 349, 364, 366], "nansum": [6, 29, 364], "accumul": [6, 29, 364], "By": [6, 13, 19, 20, 29, 36, 42, 43, 364, 368, 370, 378, 379, 425, 439, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 549, 551, 553, 556, 558, 559, 560, 566, 570, 571], "reduc": [6, 7, 11, 16, 19, 20, 23, 29, 30, 34, 39, 42, 43, 169, 260, 362, 364, 365, 368, 375, 378, 379, 416, 487, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 548, 553, 560, 564, 566, 568, 578, 582, 583, 584], "nextaft": [6, 29, 364], "0e": [6, 8, 29, 31, 349, 364, 366], "50": [6, 19, 28, 29, 30, 193, 226, 261, 267, 282, 283, 297, 309, 363, 364, 365, 368, 372, 375, 378, 407, 414, 458, 460, 490, 502, 558, 568], "4013e": [6, 29, 364], "4028e": [6, 29, 364], "hand": [6, 530, 543, 546, 549, 556, 562, 574], "signbit": [6, 29, 364], "sinc": [6, 29, 364, 530, 533, 540, 541, 543, 544, 547, 548, 553, 559, 560, 574, 580, 586], "637": [6, 29, 364], "212": [6, 10, 29, 364, 394], "0909": [6, 29, 364], "trapz": [6, 28, 364], "dx": [6, 28, 364], "apart": [6, 28, 364], "between": [6, 10, 11, 12, 13, 17, 23, 28, 29, 33, 35, 36, 46, 55, 73, 121, 182, 225, 360, 361, 363, 364, 367, 369, 370, 372, 374, 376, 393, 414, 429, 430, 431, 436, 444, 463, 482, 492, 493, 494, 495, 532, 544, 545, 547, 551, 555, 556, 557, 560, 561, 562, 564, 565, 567, 568, 569, 571, 573, 576, 577, 579, 580, 581, 586], "definit": [6, 11, 28, 34, 364, 368, 398, 530, 541, 544, 549, 556, 568], "singl": [6, 15, 23, 28, 38, 316, 324, 345, 364, 365, 366, 374, 376, 482, 483, 484, 492, 534, 539, 540, 541, 543, 546, 547, 548, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 574], "trapezoid": [6, 28, 364], "xlogi": [6, 29, 364], "0986": [6, 29, 364], "3863": [6, 29, 364], "0000": [6, 29, 364], "zeta": [6, 29, 364], "q": [6, 10, 11, 29, 33, 34, 364, 367, 368, 372, 397, 403, 404, 416, 465, 540, 541, 542, 561, 574], "0369": [6, 29, 364], "2021": [6, 29, 364, 530], "_arraywithgeneralexperiment": [6, 45], "isin": [6, 29, 365], "test_el": [6, 29, 290, 365], "assume_uniqu": [6, 29, 290, 365], "invert": [6, 29, 185, 290, 363, 365, 368, 411], "uniqu": [6, 17, 29, 40, 290, 364, 365, 371, 372, 376, 454, 455, 456, 459, 463, 492, 493, 494, 495, 530, 532, 543, 547, 556, 560, 561, 564, 574, 583], "speed": [6, 29, 290, 365, 532, 556, 562, 583], "up": [6, 29, 50, 290, 364, 365, 367, 393, 532, 533, 534, 535, 536, 539, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "_arraywithgradientsexperiment": [6, 45], "_arraywithimageexperiment": [6, 45], "layer": [6, 14, 29, 37, 50, 51, 53, 54, 55, 56, 373, 395, 396, 476, 530, 532, 546, 552, 560, 563, 564, 566, 567, 570, 578, 580, 584, 587], "_arraywithlayersexperiment": [6, 45], "adaptive_avg_pool1d": [6, 29, 364], "output_s": [6, 29, 364, 530], "1d": [6, 29, 52, 364], "adapt": [6, 29, 31, 55, 350, 364, 366, 533], "averag": [6, 8, 29, 31, 51, 343, 344, 349, 364, 366, 371, 454, 455], "pool": [6, 29, 364], "signal": [6, 29, 364, 579, 580], "compos": [6, 29, 50, 364, 540, 547, 560, 562, 574, 580, 587], "sever": [6, 29, 364, 540, 541, 563, 574, 578, 584], "plane": [6, 29, 364], "l_in": [6, 29, 364], "Will": [6, 29, 50, 364, 574], "l_out": [6, 29, 364], "adaptive_avg_pool2d": [6, 29, 364], "2d": [6, 29, 52, 364, 530, 556, 560, 564], "h_in": [6, 29, 364], "w_in": [6, 29, 364], "s_0": [6, 29, 364], "s_1": [6, 29, 364], "avg_pool1d": [6, 29, 364], "kernel": [6, 10, 29, 33, 364, 367, 395, 564, 566, 574, 580, 583, 584], "stride": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 580], "pad": [6, 10, 13, 29, 33, 36, 52, 263, 364, 365, 367, 370, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 435, 448, 530], "data_format": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 530], "nwc": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 390, 391], "batch_siz": [6, 10, 15, 29, 33, 38, 364, 367, 374, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 481, 530, 569], "d_in": [6, 10, 29, 33, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "window": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 536, 541, 585], "slide": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "valid": [6, 10, 20, 29, 33, 43, 52, 113, 287, 361, 364, 365, 367, 370, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 436, 444, 510, 511, 540, 545, 549, 551, 558, 561, 562, 581], "algorithm": [6, 10, 22, 29, 33, 52, 59, 364, 368, 384, 386, 387, 388, 389, 392, 417, 549, 560, 564, 574, 580, 582, 584], "per": [6, 10, 29, 33, 52, 364, 384, 386, 387, 388, 389, 392, 541, 548, 560, 569], "ncw": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 390, 391], "arang": [6, 11, 19, 29, 34, 86, 292, 325, 360, 364, 365, 368, 378, 410, 426, 502, 530, 549, 587], "reshap": [6, 10, 11, 13, 23, 29, 33, 34, 36, 325, 364, 365, 367, 368, 370, 386, 388, 392, 410, 426, 513, 559, 560, 562, 564, 566, 568, 571], "avg_pool2d": [6, 29, 364], "nhwc": [6, 10, 29, 33, 52, 364, 367, 383, 386, 387, 390, 391, 392], "h": [6, 7, 10, 29, 30, 33, 259, 261, 364, 365, 367, 372, 383, 386, 387, 388, 389, 390, 391, 392, 460, 464, 466, 474, 542, 547, 548, 576], "nchw": [6, 10, 29, 33, 52, 364, 367, 383, 386, 387, 390, 391, 392, 530], "max_pool2d": [6, 29, 364], "46": [6, 15, 29, 33, 38, 87, 212, 230, 360, 363, 364, 372, 394, 458, 482, 483], "avg_pool3d": [6, 29, 364], "ndhwc": [6, 10, 29, 33, 52, 364, 367, 383, 388, 389, 390, 391], "d": [6, 10, 11, 25, 29, 30, 33, 34, 87, 135, 251, 361, 364, 367, 368, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 401, 402, 410, 414, 424, 460, 464, 465, 466, 474, 475, 530, 533, 534, 535, 540, 542, 547, 558, 562, 564, 569, 576], "volum": [6, 10, 29, 33, 364, 367, 388, 389, 536], "convolut": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 578, 580], "filter": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 530], "ncdhw": [6, 10, 29, 33, 52, 364, 367, 383, 388, 389, 390, 391], "43": [6, 38, 46, 188, 363, 364, 374, 375, 483, 484, 491], "dct": [6, 29, 364, 569], "norm": [6, 7, 11, 29, 30, 34, 55, 254, 255, 284, 364, 365, 368, 410, 426, 476, 563], "liter": [6, 11, 29, 34, 364, 368, 377, 410, 426, 497, 554, 564], "lenght": [6, 29, 364], "transform": [6, 10, 29, 33, 364, 367, 394, 530, 562, 571, 573, 575, 578, 580, 581, 582], "truncat": [6, 29, 50, 299, 364, 365, 553, 569], "larger": [6, 13, 19, 29, 36, 42, 121, 361, 364, 370, 378, 433, 441, 507, 509, 562, 564, 587], "ortho": [6, 29, 364], "102": [6, 29, 38, 364, 482], "406": [6, 29, 254, 364, 365], "dft": [6, 29, 364], "onesid": [6, 29, 364], "dft_length": [6, 29, 364], "backward": [6, 20, 29, 43, 228, 363, 364, 368, 379, 425, 510, 511, 574], "fourier": [6, 263, 364, 365], "need": [6, 7, 13, 29, 30, 36, 254, 255, 284, 364, 365, 368, 370, 372, 403, 433, 436, 468, 530, 534, 536, 537, 539, 540, 541, 543, 544, 546, 547, 548, 549, 551, 552, 553, 556, 558, 559, 560, 561, 563, 564, 566, 568, 569, 573, 574, 576, 580, 581, 582, 586], "fft": [6, 29, 364, 539, 580], "after": [6, 7, 8, 10, 14, 23, 29, 30, 31, 33, 37, 55, 141, 233, 284, 344, 347, 349, 350, 351, 361, 362, 363, 364, 365, 366, 367, 372, 373, 383, 384, 385, 386, 388, 390, 392, 393, 468, 476, 530, 536, 539, 540, 541, 543, 546, 548, 549, 551, 553, 555, 558, 560, 562, 565, 580], "n_fft": [6, 364], "becaus": [6, 364, 540, 541, 544, 545, 546, 547, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 570, 571, 574, 580, 583, 586], "satisfi": [6, 364, 551], "symmetri": [6, 364], "possibl": [6, 13, 36, 292, 354, 364, 365, 366, 367, 370, 378, 393, 440, 503, 505, 530, 533, 535, 539, 540, 541, 543, 547, 549, 551, 552, 556, 558, 559, 560, 561, 562, 564, 566, 569, 573, 574, 578, 580, 586], "enabl": [6, 23, 46, 356, 364, 366, 530, 533, 540, 541, 544, 547, 556, 557, 558, 559, 560, 562, 563, 564, 565, 567, 569, 571, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587], "fast": [6, 364, 580], "rfft": [6, 364], "invok": [6, 364, 530], "forward": [6, 29, 49, 51, 53, 55, 364, 530, 540, 545, 552, 558, 562, 563, 564, 571, 573, 574, 580, 581], "expect": [6, 11, 50, 51, 53, 134, 250, 361, 364, 365, 414, 530, 534, 541, 543, 549, 553, 561, 562, 564, 574], "batch_idx": [6, 364], "signal_dim1": [6, 364], "signal_dim2": [6, 364], "signal_dimn": [6, 364], "signal_dim": [6, 364], "embed": [6, 29, 364, 580], "max_norm": [6, 7, 29, 30, 254, 255, 364, 365], "dim": [6, 23, 25, 29, 52, 90, 360, 364, 367, 383, 390, 391, 530, 549, 553, 560, 561, 564], "ifft": [6, 29, 364], "befor": [6, 10, 11, 13, 17, 19, 23, 29, 33, 34, 50, 169, 362, 364, 367, 368, 370, 371, 372, 376, 378, 383, 384, 385, 386, 388, 390, 392, 396, 397, 409, 426, 434, 454, 455, 469, 492, 493, 494, 495, 500, 501, 506, 508, 539, 540, 541, 543, 544, 546, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 566, 569, 574, 580], "pi": [6, 29, 358, 364], "44509285e": [6, 29, 364], "14423775e": [6, 29, 364], "17j": [6, 29, 364], "00000000e": [6, 29, 30, 263, 364], "00": [6, 7, 29, 30, 34, 198, 263, 363, 364, 365, 368, 405, 562], "11483250e": [6, 29, 364], "16j": [6, 29, 364], "33486982e": [6, 29, 364], "22464680e": [6, 29, 364], "95799250e": [6, 29, 364], "66951701e": [6, 29, 364], "30636606e": [6, 29, 364], "43029718e": [6, 29, 364], "18j": [6, 29, 364], "53080850e": [6, 29, 364], "58689626e": [6, 29, 364], "24474906e": [6, 29, 364], "91858728e": [6, 29, 364], "01435406e": [6, 29, 364], "interpol": [6, 29, 364, 564, 580], "mode": [6, 11, 23, 29, 34, 169, 178, 274, 298, 299, 302, 304, 305, 318, 319, 320, 322, 323, 362, 363, 364, 365, 368, 416, 536, 540, 541, 547, 551, 564, 574, 580, 583], "scale_factor": [6, 29, 364, 564], "recompute_scale_factor": [6, 29, 364, 564], "align_corn": [6, 29, 364, 564], "antialia": [6, 29, 364, 564], "down": [6, 29, 50, 364, 540, 562, 575, 580, 586], "channel": [6, 7, 10, 29, 30, 33, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 259, 263, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 384, 385, 386, 387, 388, 389, 392, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "height": [6, 7, 10, 29, 30, 33, 50, 259, 364, 365, 367, 386, 387, 388, 389, 392, 569], "width": [6, 7, 10, 29, 30, 33, 259, 364, 365, 367, 384, 385, 386, 387, 388, 389, 392], "bilinear": [6, 29, 364, 564], "trilinear": [6, 29, 364, 564], "nearest_exact": [6, 29, 364, 564], "tf_area": [6, 29, 364, 564], "bicub": [6, 29, 364, 564], "mitchellcub": [6, 29, 364, 564], "lanczos3": [6, 29, 364, 564], "lanczos5": [6, 29, 364, 564], "gaussian": [6, 29, 59, 357, 364, 564], "overwrit": [6, 23, 29, 169, 362, 364, 541, 559, 560, 566], "corner": [6, 29, 364, 540, 541, 560], "pixel": [6, 29, 364], "align": [6, 23, 29, 364, 540, 541, 560, 566, 568, 575, 586], "thu": [6, 29, 188, 225, 228, 363, 364, 368, 403, 404, 536, 539, 548, 553, 560], "preserv": [6, 7, 8, 23, 29, 30, 31, 46, 284, 353, 364, 365, 366, 370, 437, 562, 571, 574], "edg": [6, 13, 29, 36, 364, 370, 433, 435, 448, 543, 562, 580, 582, 586], "antialias": [6, 29, 364], "downsampl": [6, 29, 364], "resiz": [6, 29, 364, 564], "max_pool1d": [6, 29, 364], "dilat": [6, 10, 29, 33, 52, 364, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "ceil_mod": [6, 29, 364], "max_pool3d": [6, 29, 364], "linear_algebra": [6, 11, 29, 34, 368, 563], "_arraywithlinearalgebraexperiment": [6, 45], "adjoint": [6, 11, 29, 34, 364, 368, 407, 418, 419], "cond": [6, 29, 68, 70, 359, 364, 574], "p": [6, 7, 11, 29, 30, 34, 52, 88, 254, 255, 360, 364, 365, 368, 372, 410, 426, 465, 540, 541, 542], "933034373659268": 6, "diagflat": [6, 29, 364], "padding_valu": [6, 29, 364], "right_left": [6, 29, 364], "num_row": [6, 29, 364], "num_col": [6, 29, 364], "eig": [6, 11, 29, 364, 368, 404, 405], "37228132": [6, 29, 364, 403], "82456484": [6, 364, 403], "41597356": [6, 364, 403], "56576746": [6, 364, 403], "90937671": [6, 364, 403], "eigh_tridiagon": [6, 29, 364], "eigvals_onli": [6, 29, 364], "select": [6, 19, 29, 42, 364, 378, 500, 501, 539, 540, 541, 548, 559, 562, 566, 568, 571, 574, 580, 583, 584], "select_rang": [6, 29, 364], "tol": [6, 29, 364], "super": [6, 29, 364, 530, 553, 556, 566, 569, 570, 571], "eigenvalu": [6, 11, 29, 34, 364, 368, 403, 404, 405], "eigenvector": [6, 29, 364, 368, 403, 404], "string": [6, 10, 23, 29, 33, 50, 58, 60, 106, 107, 119, 126, 147, 151, 152, 153, 154, 156, 164, 170, 171, 174, 257, 357, 361, 362, 364, 365, 367, 368, 383, 384, 385, 386, 388, 390, 392, 405, 516, 545, 546, 548, 549, 550, 553, 554, 560, 566, 569], "v": [6, 10, 18, 25, 29, 33, 41, 50, 52, 53, 54, 55, 56, 87, 364, 367, 377, 396, 397, 497, 516, 530, 536, 537, 540, 541, 542, 546, 566, 569, 570, 571], "interv": [6, 15, 20, 29, 38, 43, 73, 86, 87, 360, 364, 368, 370, 374, 379, 425, 433, 436, 444, 482, 484, 510, 511, 541], "togeth": [6, 23, 29, 56, 364, 530, 533, 544, 547, 554, 560, 563, 564, 570, 571, 574, 578, 580, 581, 586], "cluster": [6, 29, 364, 574, 580], "converg": [6, 29, 364, 534], "li": [6, 29, 364, 532], "_2": [6, 29, 364], "machin": [6, 11, 29, 34, 121, 124, 361, 364, 368, 412, 415, 533, 540, 543, 556, 573, 575, 578, 580, 582, 583, 584, 585, 586], "precis": [6, 11, 29, 34, 121, 233, 361, 363, 364, 368, 417, 426, 548, 549, 560, 564, 584], "eig_val": [6, 29, 364], "decreas": [6, 29, 364], "eig_vector": [6, 29, 364], "38196": [6, 364], "61803": [6, 364], "eigval": [6, 29, 364], "kron": [6, 29, 364, 587], "matrix_exp": [6, 29, 364], "7183": [6, 29, 364], "3891": [6, 29, 364], "multi_dot": [6, 29, 364], "49": [6, 15, 29, 34, 233, 363, 364, 378, 424, 483, 502], "148": [6, 28, 29, 197, 364], "loss": [6, 29, 364, 429, 430, 431, 530, 548, 549, 556, 560, 563, 569, 570, 571, 580, 587], "_arraywithlossesexperiment": [6, 45], "manipul": [6, 29, 364, 532, 560, 563, 564, 566, 571, 573, 580], "_arraywithmanipulationexperiment": [6, 45], "atleast_1d": [6, 29, 364], "ari": [6, 29, 364], "cannot": [6, 541, 543, 545, 549, 560, 566, 571, 586], "ndim": [6, 11, 16, 34, 39, 45, 325, 364, 365, 368, 375, 416, 419, 490, 513, 547, 553], "made": [6, 13, 29, 364, 444, 533, 536, 539, 541, 543, 544, 547, 548, 553, 558, 559, 560, 563, 564, 566, 568, 580], "necessari": [6, 13, 29, 36, 364, 370, 440, 530, 540, 541, 544, 545, 547, 551, 557, 559, 560, 562, 564], "a1": [6, 30, 82, 251, 360], "a2": 6, "atleast_2d": [6, 29, 364], "atleast_3d": [6, 29, 364], "view": [6, 13, 29, 83, 360, 364, 540, 541, 553, 580], "three": [6, 88, 360, 364, 540, 541, 547, 548, 551, 560, 562, 564, 565, 566, 581, 586], "more": [6, 11, 13, 17, 29, 34, 36, 40, 73, 109, 198, 212, 360, 361, 363, 364, 368, 370, 376, 402, 408, 409, 415, 417, 419, 426, 437, 444, 492, 493, 494, 495, 530, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 578, 579, 580, 581, 582, 583, 586, 587], "dsplit": [6, 29, 364], "indices_or_sect": [6, 29, 364], "split": [6, 13, 23, 29, 36, 167, 168, 169, 259, 292, 362, 364, 365, 367, 370, 383, 390, 391, 396, 445, 516, 530, 535, 541, 548, 565, 566, 574, 587], "3rd": [6, 29, 364], "dstack": [6, 29, 364], "nativeshap": [6, 10, 13, 15, 29, 36, 38, 80, 84, 91, 95, 297, 307, 312, 314, 360, 364, 365, 367, 370, 374, 383, 385, 387, 389, 391, 440, 482, 483, 484], "you": [6, 7, 29, 30, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 266, 267, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "want": [6, 21, 44, 50, 53, 364, 530, 533, 535, 537, 539, 540, 541, 546, 548, 553, 556, 557, 558, 559, 562, 564, 569, 570, 571, 574], "start_dim": [6, 29, 364, 530], "end_dim": [6, 29, 364, 530], "read": [6, 13, 23, 29, 36, 364, 370, 440, 539, 540, 546, 548, 562, 564, 580], "fastest": [6, 13, 29, 36, 364, 370, 440], "back": [6, 13, 29, 36, 51, 53, 55, 298, 318, 364, 365, 370, 440, 533, 540, 541, 544, 549, 553, 557, 558, 565, 574, 578, 582], "slowest": [6, 13, 29, 36, 364, 370, 440], "fortran": [6, 13, 29, 36, 364, 370, 440, 580, 584], "account": [6, 13, 29, 36, 51, 364, 370, 440, 540, 548, 552, 560], "layout": [6, 13, 29, 36, 364, 370, 440, 545, 560, 564], "underli": [6, 13, 29, 36, 184, 187, 189, 218, 363, 364, 368, 370, 417, 440, 547, 564, 580], "fliplr": [6, 29, 364], "flip": [6, 13, 29, 36, 185, 363, 364, 370, 568, 569, 571], "revers": [6, 7, 11, 19, 29, 34, 42, 45, 46, 258, 364, 365, 368, 370, 378, 424, 437, 500, 501, 539, 547, 548, 549, 551, 552, 560, 564, 571, 574], "diag": [6, 11, 29, 34, 364, 368, 566], "flipud": [6, 29, 364], "heavisid": [6, 29, 364], "step": [6, 8, 25, 29, 31, 50, 55, 73, 86, 343, 344, 347, 349, 350, 351, 360, 364, 366, 371, 454, 455, 456, 530, 534, 536, 539, 540, 541, 544, 545, 547, 548, 549, 550, 551, 558, 560, 562, 566, 569, 570, 571, 573, 580], "5000": [6, 364, 368, 407], "hsplit": [6, 29, 364], "horizont": [6, 29, 259, 364, 365], "hstack": [6, 29, 364], "vstack": [6, 29, 364], "i0": [6, 29, 364], "modifi": [6, 23, 29, 364, 539, 540, 541, 543, 545, 546, 549, 550, 552, 554, 556, 561, 562, 563, 566], "bessel": [6, 19, 29, 42, 364, 378, 507, 509], "kind": [6, 19, 29, 121, 124, 125, 225, 361, 363, 378, 500, 501, 506, 508, 538, 560, 562, 564, 566, 574], "26606588": [6, 29, 364], "2795853": [6, 29, 364], "88079259": [6, 29, 364], "moveaxi": [6, 29, 364], "destin": [6, 29, 364], "unstack": [6, 13, 23, 36, 370, 547, 566, 569, 587], "reorder": [6, 13, 29, 36, 259, 364, 365, 370, 437], "origin": [6, 11, 13, 19, 23, 29, 34, 36, 42, 45, 46, 182, 363, 364, 368, 370, 378, 410, 440, 441, 501, 516, 530, 534, 539, 540, 541, 545, 546, 548, 549, 557, 559, 560, 561, 566, 580, 581], "These": [6, 29, 364, 368, 403, 404, 530, 532, 533, 534, 536, 538, 539, 540, 541, 543, 547, 549, 551, 552, 554, 555, 556, 559, 560, 562, 563, 566, 567, 569, 570, 571, 574, 575, 580, 584, 586, 587], "pad_width": [6, 13, 29, 36, 364, 370, 435, 448], "constant": [6, 13, 14, 29, 36, 37, 51, 53, 54, 364, 370, 372, 373, 435, 463, 476, 530, 556, 561, 563, 570, 571, 574], "stat_length": [6, 29, 364], "constant_valu": [6, 29, 364], "end_valu": [6, 29, 364], "reflect_typ": [6, 29, 364], "even": [6, 29, 225, 229, 363, 364, 533, 534, 540, 541, 543, 548, 549, 550, 552, 555, 556, 559, 560, 561, 564, 568, 569, 570, 571, 574, 586], "rot90": [6, 29, 364], "rotat": [6, 29, 364, 573], "take_along_axi": [6, 29, 364], "extract": [6, 29, 364, 560, 563, 576, 580, 581, 586], "One": [6, 7, 13, 15, 29, 30, 36, 38, 260, 364, 365, 370, 374, 440, 482, 544, 547, 549, 551, 556, 561, 562, 566, 568, 569], "drop": [6, 29, 51, 364, 540, 574], "control": [6, 29, 50, 364, 368, 401, 547, 549, 558, 559, 560, 561, 564, 568, 569, 573, 575, 580, 586], "how": [6, 29, 50, 51, 52, 53, 364, 530, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 571, 573, 574, 576, 580], "bound": [6, 29, 364, 553, 562, 566, 586], "arr": [6, 7, 26, 29, 129, 297, 361, 364, 549, 550], "top_k": [6, 29, 364], "largest": [6, 23, 29, 121, 124, 361, 364, 368, 410, 419, 573], "top": [6, 13, 29, 50, 259, 364, 365, 434, 530, 540, 541, 549, 560, 562, 564, 569, 570, 580, 584], "retun": [6, 29, 364], "we": [6, 21, 29, 44, 50, 53, 259, 311, 345, 346, 348, 355, 364, 365, 366, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 580, 581, 585, 586], "smallest": [6, 23, 29, 121, 124, 190, 361, 363, 364, 368, 410], "name": [6, 11, 17, 21, 34, 40, 44, 58, 60, 249, 250, 357, 364, 365, 368, 376, 403, 404, 408, 416, 417, 419, 424, 492, 493, 494, 516, 521, 526, 539, 540, 541, 545, 546, 547, 548, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 566, 569, 571, 580], "vsplit": [6, 29, 364], "vertic": [6, 29, 259, 364, 365, 541], "_arraywithnormsexperiment": [6, 45], "instance_norm": [6, 29, 364], "bia": [6, 10, 29, 33, 37, 52, 292, 364, 365, 367, 373, 383, 390, 391, 394, 395, 476, 566, 570], "momentum": [6, 29, 364, 533], "running_mean": [6, 29, 364], "running_stddev": [6, 29, 364], "affin": [6, 29, 54, 364], "track_running_stat": [6, 29, 364], "4d": [6, 364], "run": [6, 8, 29, 31, 52, 53, 343, 344, 349, 364, 366, 371, 454, 455, 456, 516, 517, 530, 536, 537, 539, 540, 542, 544, 545, 548, 551, 553, 554, 555, 556, 557, 560, 561, 566, 567, 568, 569, 570, 571, 573, 574, 578, 580, 581, 582, 583, 585, 586, 587], "statist": [6, 29, 44, 364, 539, 549, 562, 563, 580], "deviat": [6, 14, 15, 19, 29, 37, 38, 42, 51, 54, 364, 373, 374, 378, 476, 483, 507, 534, 543], "track": [6, 29, 50, 53, 364, 366, 372, 469, 540, 541, 543, 558, 580], "OR": [6, 20, 29, 43, 187, 217, 363, 364, 379, 511, 540, 541, 558], "stddev": [6, 29, 364], "ey": [6, 29, 33, 360, 364, 367, 386, 392, 564, 571], "82836342": [6, 364], "58581817": [6, 364], "29290909": [6, 29, 364], "41418171": [6, 29, 364], "14645454": [6, 364], "20709085": [6, 364], "30000001": [6, 29, 259, 364, 365, 376, 493], "52426404": [6, 29, 364], "l2_normal": [6, 29, 364], "l2": [6, 11, 34, 364, 368, 426, 547], "whole": [6, 364, 541, 546], "4472": [6, 364], "8944": [6, 364], "lp_normal": [6, 29, 364], "lp": [6, 364], "random": [6, 10, 23, 29, 33, 364, 367, 393, 481, 482, 483, 484, 485, 486, 530, 539, 550, 561, 562, 563, 571, 573, 580], "_arraywithrandomexperiment": [6, 45], "bernoulli": [6, 29, 364], "seed": [6, 10, 15, 17, 23, 29, 33, 38, 49, 364, 367, 374, 376, 393, 481, 482, 483, 484, 486, 492, 521, 561, 562], "probabl": [6, 10, 15, 29, 33, 38, 51, 52, 364, 367, 374, 393, 481, 530, 534, 546, 562], "event": [6, 29, 364, 562], "entri": [6, 13, 23, 29, 36, 40, 86, 360, 364, 370, 372, 442, 470, 492, 540, 548, 562, 580], "parameter": [6, 15, 29, 38, 364, 374, 481, 483, 484], "independ": [6, 15, 29, 38, 364, 368, 374, 399, 418, 481, 530, 543, 549, 551, 557, 566, 571, 578], "distribut": [6, 12, 15, 29, 35, 38, 51, 52, 53, 364, 369, 374, 429, 430, 431, 481, 482, 483, 484, 486, 539, 548, 550, 574, 580, 583], "prob": [6, 10, 29, 33, 38, 52, 364, 367, 374, 393, 481, 530], "odd": [6, 29, 225, 363, 364, 538, 543], "g": [6, 15, 17, 19, 21, 29, 38, 44, 51, 107, 135, 151, 361, 362, 364, 372, 374, 376, 378, 460, 464, 466, 474, 482, 483, 484, 492, 493, 494, 495, 500, 501, 503, 505, 506, 508, 534, 535, 539, 540, 542, 543, 547, 558, 560, 562, 566, 574, 575, 576], "drawn": [6, 15, 29, 38, 51, 364, 374, 481, 482, 483, 484, 562], "python": [6, 15, 29, 38, 73, 164, 174, 228, 325, 360, 362, 363, 364, 365, 374, 481, 482, 483, 484, 486, 531, 532, 533, 538, 540, 541, 543, 544, 546, 547, 548, 553, 554, 560, 562, 564, 566, 568, 569, 574, 575, 577, 580, 581, 582, 586, 587], "dirichlet": [6, 29, 364], "shuffl": [6, 15, 23, 29, 38, 374], "10598304": [6, 364], "21537054": [6, 364], "67864642": [6, 364], "48006698": [6, 364], "07472073": [6, 364], "44521229": [6, 364], "55479872": [6, 364], "05426367": [6, 364], "39093761": [6, 364], "19531053": [6, 364], "51675832": [6, 364], "28793114": [6, 364], "12315625": [6, 364], "29823365": [6, 364], "5786101": [6, 364], "15564976": [6, 364], "50542368": [6, 364], "33892656": [6, 364], "1325352": [6, 364], "44439589": [6, 364], "42306891": [6, 364], "gamma": [6, 14, 37, 364, 373, 476], "poisson": [6, 29, 364], "rate": [6, 8, 29, 31, 52, 55, 344, 347, 349, 350, 351, 364, 366, 371, 454, 455, 456, 548], "paramt": [6, 372, 464, 474], "request": [6, 161, 362, 364, 530, 534, 535, 539, 551, 563, 564], "lam": [6, 29, 364], "_arraywithsearchingexperiment": [6, 45], "unravel_index": [6, 29, 364], "unravel": [6, 29, 364], "_arraywithsetexperiment": [6, 45], "sort": [6, 23, 29, 46, 364, 368, 403, 404, 419, 420, 496, 497, 530, 538, 548, 563], "_arraywithsortingexperiment": [6, 45], "lexsort": [6, 29, 364], "indirectli": [6, 29, 364], "column": [6, 11, 29, 34, 51, 82, 360, 364, 368, 403, 404, 410, 416, 418, 419, 424], "msort": [6, 29, 364], "_arraywithstatisticalexperiment": [6, 45], "bincount": [6, 29, 364], "weight": [6, 8, 10, 29, 31, 33, 51, 52, 53, 55, 343, 344, 347, 349, 350, 351, 364, 366, 367, 394, 395, 397, 530, 547, 556, 566, 570, 571, 579], "minlength": [6, 29, 364], "alreadi": [6, 23, 29, 190, 199, 229, 238, 363, 364, 368, 406, 414, 530, 539, 540, 541, 545, 547, 549, 555, 560, 564, 574, 580, 582, 587], "bin": [6, 29, 536, 540, 541, 543, 547], "corrcoef": [6, 29, 364], "rowvar": [6, 29, 364], "row": [6, 29, 51, 82, 360, 364, 368, 374, 375, 410, 418, 419, 424, 481, 490], "variabl": [6, 7, 8, 14, 23, 29, 30, 31, 37, 49, 50, 51, 52, 53, 54, 55, 56, 252, 284, 285, 286, 287, 289, 311, 344, 345, 347, 349, 350, 351, 364, 365, 366, 367, 368, 371, 373, 396, 418, 454, 455, 456, 476, 516, 521, 541, 545, 549, 552, 554, 555, 558, 559, 562, 563, 566, 569, 570, 571, 574, 581], "observ": [6, 29, 541, 553, 566, 582], "relationship": [6, 29, 51], "transpos": [6, 10, 11, 23, 29, 33, 34, 45, 52, 364, 367, 368, 383, 385, 387, 389, 390, 391, 409, 413, 415, 530, 559, 568, 571], "while": [6, 10, 23, 29, 33, 46, 90, 134, 216, 217, 360, 361, 363, 364, 367, 376, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 492, 504, 507, 517, 532, 533, 539, 540, 541, 544, 545, 546, 548, 549, 551, 554, 555, 556, 558, 559, 560, 561, 562, 564, 568, 570, 571, 574, 580, 586, 587], "median": [6, 29, 364, 560], "nanmean": [6, 29, 364], "anyth": [6, 29, 364, 541, 562, 563, 580, 581], "through": [6, 29, 53, 182, 363, 364, 372, 460, 466, 530, 535, 538, 539, 541, 542, 545, 546, 547, 548, 551, 553, 556, 557, 559, 560, 561, 562, 564, 565, 566, 569, 570, 571, 573, 578, 580, 581, 582], "sub": [6, 11, 13, 23, 24, 28, 29, 30, 34, 36, 46, 50, 220, 364, 368, 370, 371, 402, 442, 454, 455, 456, 539, 541, 542, 547, 553, 560, 561, 562, 568, 569, 570, 576], "6666666666666665": [6, 29, 364], "nanmedian": [6, 29, 364], "overwrite_input": [6, 29, 364], "allow": [6, 29, 50, 53, 86, 292, 360, 364, 365, 377, 497, 530, 533, 536, 539, 541, 544, 548, 549, 553, 554, 556, 557, 558, 560, 561, 562, 564, 566, 568, 574, 575, 578, 580, 584, 585], "call": [6, 21, 26, 29, 44, 46, 50, 52, 53, 55, 128, 129, 169, 276, 303, 317, 345, 346, 348, 362, 364, 365, 366, 368, 372, 417, 457, 463, 467, 468, 516, 530, 533, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 574, 580, 581, 584], "save": [6, 23, 29, 53, 279, 306, 362, 364, 365, 534, 536, 548, 554, 562, 574, 579], "do": [6, 7, 23, 29, 30, 228, 284, 363, 364, 365, 372, 457, 464, 467, 468, 469, 474, 530, 534, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 574, 575, 581, 586, 587], "content": [6, 23, 29, 364, 539, 546, 559, 566, 569], "treat": [6, 23, 29, 364, 516, 558, 562, 567, 571], "undefin": [6, 29, 364, 554, 558], "fulli": [6, 29, 52, 364, 530, 534, 544, 549, 555, 558, 559, 564, 566, 567, 568, 569, 570, 571, 574, 578, 579, 580, 586, 587], "quantil": [6, 29, 364], "inclus": [6, 29, 73, 360, 364, 374, 482, 535, 545, 559, 564], "higher": [6, 29, 51, 364, 565, 566, 571, 574, 577, 580, 581, 584, 586, 587], "midpoint": [6, 29, 364], "fraction": [6, 29, 364, 367, 393], "surround": [6, 29, 364, 564], "whichev": [6, 29, 364], "work": [6, 29, 364, 372, 464, 465, 469, 474, 475, 530, 534, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 553, 560, 561, 562, 563, 565, 566, 568, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "util": [6, 29, 156, 362, 524, 526, 527, 528, 529, 530, 536, 546, 550, 553, 559, 563, 578, 586, 587], "_arraywithutilityexperiment": [6, 45], "_arraywithgener": [7, 45], "all_equ": [7, 30, 365], "equality_matrix": [7, 30, 248, 365], "array_equ": [7, 30, 365], "assert_supports_inplac": [7, 30, 365], "ivybackendexcept": [7, 30, 252, 284, 365, 527, 544, 553], "jaxlib": [7, 30, 252, 365, 540, 544, 549, 550, 555, 563, 566, 568], "xla_extens": [7, 30, 252, 365, 544, 549, 550, 555, 563, 566, 568], "devicearrai": [7, 30, 252, 365, 544, 560, 566, 568], "clip_matrix_norm": [7, 30, 365], "downscal": [7, 30, 254, 255, 284, 365], "894": [7, 30, 254, 255, 365, 373, 476], "79": [7, 30, 38, 45, 189, 194, 254, 255, 363, 364, 365, 484], "clip_vector_norm": [7, 30, 365], "default_v": [7, 258, 365], "catch_except": [7, 258, 365], "rev": [7, 258, 365], "with_cal": [7, 258, 365], "catch": [7, 258, 365, 562], "callabl": [7, 21, 30, 44, 55, 58, 60, 76, 77, 78, 122, 123, 157, 158, 169, 249, 253, 258, 260, 264, 265, 292, 317, 325, 346, 348, 355, 357, 360, 361, 362, 364, 365, 366, 367, 371, 372, 396, 454, 455, 456, 463, 464, 465, 467, 468, 469, 470, 514, 517, 521, 527, 547, 553, 558, 560, 566], "might": [7, 134, 258, 361, 365, 539, 540, 541, 548, 549, 551, 554, 557, 559, 560, 562, 563, 564, 566, 568, 569, 575], "exist": [7, 13, 23, 36, 55, 258, 365, 370, 434, 440, 524, 530, 532, 533, 539, 540, 543, 545, 546, 551, 552, 556, 557, 559, 560, 562, 564, 566, 574, 575, 578, 580, 583, 586], "els": [7, 15, 29, 38, 60, 114, 115, 116, 117, 118, 252, 258, 262, 361, 364, 365, 372, 374, 467, 470, 482, 483, 484, 514, 530, 539, 541, 543, 545, 549, 553, 556, 559, 560, 561, 562, 563, 564, 566, 568, 570, 571, 574, 581], "einops_rearrang": [7, 30, 365], "pattern": [7, 30, 259, 260, 261, 365, 534, 549, 552], "axes_length": [7, 30, 259, 260, 261, 365], "re": [7, 16, 39, 169, 253, 259, 362, 365, 368, 370, 375, 421, 441, 489, 491, 531, 532, 533, 535, 539, 540, 541, 542, 543, 549, 558, 559, 560, 563, 564, 568, 571, 574, 580], "arrang": [7, 259, 365], "rearrang": [7, 30, 259, 261, 365], "einop": [7, 30, 259, 260, 261, 365, 533], "been": [7, 15, 30, 38, 154, 229, 259, 260, 261, 362, 363, 365, 374, 481, 539, 541, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 562, 566, 568, 573, 574, 575, 580, 587], "einops_reduc": [7, 30, 365], "reduct": [7, 12, 20, 23, 29, 30, 35, 43, 260, 296, 297, 364, 365, 369, 379, 429, 430, 431, 510, 511, 549, 553, 562, 568], "avail": [7, 30, 154, 160, 161, 162, 172, 260, 362, 365, 530, 532, 540, 541, 546, 547, 548, 550, 552, 553, 560, 562, 564, 574, 585, 586], "prod": [7, 19, 30, 42, 260, 365, 378, 549, 551, 566], "einops_repeat": [7, 30, 365], "repeat": [7, 13, 30, 36, 261, 365, 370, 446, 536, 541, 544, 545, 551, 552, 554, 562], "fourier_encod": [7, 30, 365], "max_freq": [7, 30, 263, 365], "num_band": [7, 30, 263, 365], "concat": [7, 13, 23, 36, 169, 263, 362, 365, 370, 448, 561, 564, 566], "encod": [7, 30, 263, 365, 530, 533, 569], "frequenc": [7, 30, 263, 365, 541], "band": [7, 30, 263, 365], "linearli": [7, 30, 263, 365, 368, 418], "oppos": [7, 30, 263, 365, 549], "geometr": [7, 30, 263, 365, 368, 424], "concaten": [7, 13, 34, 259, 263, 365, 370, 414, 434, 561, 564, 566, 569], "seper": [7, 263, 365, 551, 561, 562], "0000000e": [7, 30, 263, 365], "2246468e": [7, 30, 263, 365], "4492936e": [7, 263, 365], "6739404e": [7, 30, 263, 365], "gather": [7, 30, 267, 271, 365, 587], "batch_dim": [7, 30, 266, 267, 365, 524], "let": [7, 19, 30, 266, 267, 365, 378, 504, 507, 508, 509, 530, 534, 536, 544, 546, 547, 549, 550, 551, 552, 553, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 587], "gather_nd": [7, 30, 365], "get_num_dim": [7, 30, 365], "as_arrai": [7, 30, 275, 307, 365], "has_nan": [7, 30, 365], "include_inf": [7, 30, 280, 324, 365], "inplace_decr": [7, 30, 365], "val": [7, 23, 29, 30, 282, 283, 284, 300, 301, 364, 365, 559, 568], "decrement": [7, 30, 282, 365], "inplace_incr": [7, 30, 365], "increment": [7, 30, 283, 365, 541, 563, 580], "inplace_upd": [7, 30, 49, 365, 559], "ensure_in_backend": [7, 30, 284, 365, 559], "keep_input_dtyp": [7, 30, 284, 365], "ensur": [7, 30, 284, 365, 514, 530, 539, 540, 541, 544, 549, 551, 553, 554, 555, 557, 559, 560, 561, 562, 563, 580], "is_arrai": [7, 30, 365, 560], "exclus": [7, 19, 23, 30, 42, 73, 286, 287, 289, 360, 365, 374, 378, 482, 500, 501, 547, 549, 556, 563, 571, 584, 586], "rather": [7, 23, 30, 73, 169, 286, 287, 289, 360, 362, 365, 533, 541, 543, 547, 549, 552, 559, 560, 561, 562, 563, 571, 574, 576, 579, 580], "trace": [7, 11, 23, 30, 34, 278, 286, 287, 289, 299, 305, 319, 323, 365, 368, 530, 543, 549, 566, 574, 575, 581, 586], "is_ivy_arrai": [7, 30, 365, 559, 568], "is_ivy_contain": [7, 365], "is_native_arrai": [7, 30, 131, 287, 361, 365, 568], "scatter_flat": [7, 30, 365], "occupi": [7, 121, 124, 296, 297, 361, 365], "scatter_nd": [7, 30, 365, 564, 568], "empti": [7, 23, 30, 73, 254, 297, 356, 360, 364, 365, 366, 368, 372, 378, 379, 426, 471, 508, 510, 511, 539, 540, 544, 546, 549, 550], "stable_divid": [7, 30, 365, 556], "denomin": [7, 14, 30, 37, 54, 273, 301, 309, 365, 373, 476, 556, 574, 577], "min_denomin": [7, 30, 309, 365], "global": [7, 14, 23, 30, 37, 46, 54, 114, 115, 116, 117, 118, 167, 168, 169, 272, 273, 276, 300, 301, 303, 309, 310, 321, 352, 354, 356, 361, 362, 364, 365, 366, 373, 476, 521, 540, 544, 545, 548, 549, 550, 553, 556, 560, 566, 580], "_min_denomin": [7, 30, 309, 365], "stable_pow": [7, 30, 365], "min_bas": [7, 30, 310, 365], "_min_bas": [7, 14, 30, 37, 54, 310, 365, 373, 476], "stabl": [7, 18, 30, 41, 229, 272, 273, 300, 301, 309, 310, 363, 364, 365, 377, 496, 498, 540, 545, 549, 560, 566, 574], "supports_inplace_upd": [7, 30, 365], "current": [7, 23, 46, 50, 53, 122, 123, 126, 142, 143, 144, 145, 146, 147, 156, 157, 158, 159, 163, 165, 174, 264, 265, 268, 269, 270, 274, 278, 281, 285, 294, 295, 308, 311, 356, 361, 362, 364, 365, 366, 368, 372, 403, 457, 467, 468, 516, 530, 534, 537, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 553, 556, 557, 560, 561, 562, 564, 566, 571, 573, 574, 580, 586, 587], "to_list": [7, 30, 365], "to_numpi": [7, 30, 365, 530, 561, 569], "address": [7, 315, 365, 534, 539, 541, 543, 544, 566, 576, 578, 580, 586], "to_scalar": [7, 30, 365], "value_is_nan": [7, 30, 365], "92": [7, 38, 324, 351, 366, 368, 400, 483, 484], "_arraywithgradi": [8, 45], "adam_step": [8, 31, 366], "mw": [8, 31, 343, 344, 366, 570], "vw": [8, 31, 343, 344, 366, 570], "beta1": [8, 31, 55, 250, 343, 344, 349, 365, 366, 570], "beta2": [8, 31, 55, 250, 343, 344, 349, 365, 366, 570], "999": [8, 28, 31, 55, 237, 343, 344, 349, 351, 363, 366, 570], "epsilon": [8, 11, 12, 14, 29, 31, 34, 35, 37, 54, 55, 250, 343, 344, 349, 364, 365, 366, 368, 369, 373, 412, 415, 429, 430, 431, 476, 547, 556, 559, 570], "07": [8, 12, 28, 29, 31, 35, 38, 55, 182, 210, 214, 230, 343, 344, 346, 347, 348, 349, 355, 363, 364, 366, 369, 429, 430, 431, 483, 570], "cost": [8, 31, 343, 344, 347, 349, 350, 351, 366, 371, 454, 455, 456, 564, 578], "dc": [8, 31, 343, 344, 347, 349, 350, 351, 366], "dw": [8, 31, 343, 344, 347, 349, 350, 351, 366], "moment": [8, 31, 55, 343, 344, 349, 366, 539, 545, 574], "forget": [8, 31, 55, 343, 344, 349, 366, 530, 549], "factor": [8, 10, 11, 29, 31, 33, 34, 51, 52, 55, 167, 168, 169, 343, 344, 349, 350, 362, 366, 367, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 398, 533, 553], "adam": [8, 31, 55, 250, 343, 344, 349, 365, 366, 530, 569, 570, 571, 580], "prevent": [8, 31, 51, 55, 253, 343, 344, 349, 365, 366, 367, 378, 393, 508, 539, 541, 548, 549, 553, 554, 559, 560, 563, 564], "delta": [8, 31, 343, 366], "dcdw": [8, 31, 343, 344, 347, 349, 350, 366], "adam_step_delta": [8, 31, 343, 366], "2020105": [8, 343, 366], "22187898": [8, 343, 366], "24144873": [8, 343, 366], "10000002": [8, 42, 343, 366, 504], "20000005": [8, 343, 366], "00300002": [8, 343, 366], "00800002": [8, 343, 366], "adam_upd": [8, 31, 366, 570], "lr": [8, 31, 55, 250, 344, 347, 349, 350, 351, 365, 366, 569, 570], "mw_tm1": [8, 31, 344, 349, 366], "vw_tm1": [8, 31, 344, 349, 366], "stop_gradi": [8, 31, 55, 169, 250, 344, 347, 349, 350, 351, 362, 365, 366, 371, 454, 455, 456, 570], "learn": [8, 31, 55, 259, 344, 347, 349, 350, 351, 365, 366, 371, 454, 455, 456, 530, 532, 533, 535, 538, 539, 540, 542, 543, 556, 558, 565, 573, 575, 578, 582, 583, 584, 585, 586, 587], "previou": [8, 31, 51, 142, 143, 144, 145, 146, 318, 320, 321, 322, 344, 349, 361, 364, 365, 366, 541, 543, 545, 548, 555, 560, 562, 564, 571, 574, 583], "ws_new": [8, 31, 344, 349, 350, 351, 366], "updated_weight": [8, 31, 344, 366], "92558753": [8, 344], "92558873": [8, 344, 366], "92558718": [8, 344, 366], "00000063e": [8, 31, 344, 366], "00000016e": [8, 31, 344, 366], "00000086e": [8, 31, 344, 366], "gradient_descent_upd": [8, 31, 366, 371, 454, 455, 456], "descent": [8, 31, 55, 347, 366, 570, 580], "new_weight": [8, 31, 347, 349, 366, 569], "95": [8, 15, 22, 31, 38, 59, 343, 347, 351, 357, 364, 366, 374, 483, 484], "97": [8, 28, 31, 38, 180, 347, 363, 366, 483], "96": [8, 28, 29, 30, 38, 191, 236, 259, 260, 347, 363, 364, 365, 366, 368, 378, 414, 484, 502], "lamb_upd": [8, 31, 366], "max_trust_ratio": [8, 31, 55, 349, 366], "decay_lambda": [8, 31, 55, 349, 350, 366], "trust": [8, 31, 55, 349, 366], "ratio": [8, 31, 55, 349, 366], "decai": [8, 31, 55, 349, 350, 366], "lamb": [8, 31, 55, 349, 366, 570], "784": [8, 349, 366], "78": [8, 189, 230, 349, 363, 366, 368, 374, 378, 414, 483, 502], "lars_upd": [8, 31, 366], "lar": [8, 31, 55, 350, 366, 570], "optimizer_upd": [8, 31, 366], "effective_grad": [8, 31, 351, 366], "optim": [8, 31, 51, 250, 351, 365, 366, 371, 454, 455, 456, 530, 534, 559, 567, 569, 571, 573, 578, 579, 580, 581, 582, 583, 584, 587], "3e": [8, 31, 351, 366], "preserve_typ": [8, 31, 353, 366], "_arraywithimag": [9, 45], "_arraywithlay": [10, 45], "conv1d": [10, 33, 52, 367], "fw": [10, 33, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 516, 562], "d_out": [10, 33, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391], "wio": [10, 367, 384, 385], "conv1d_transpos": [10, 33, 367], "output_shap": [10, 33, 52, 367, 383, 385, 387, 389, 391], "low": [10, 15, 33, 38, 367, 374, 383, 384, 385, 386, 388, 390, 392, 482, 484, 547, 560, 564, 566, 576, 578, 580, 581, 582, 584, 586], "high": [10, 15, 33, 38, 367, 374, 383, 384, 385, 386, 388, 390, 392, 482, 484, 534, 539, 558, 560, 564, 569, 575, 576, 577, 578, 579, 580, 584, 586, 587], "pair": [10, 33, 182, 363, 364, 367, 368, 383, 384, 385, 386, 388, 390, 392, 397, 399, 548], "give": [10, 33, 50, 51, 134, 361, 367, 370, 383, 384, 385, 386, 388, 390, 392, 440, 530, 534, 536, 540, 541, 542, 545, 546, 548, 551, 552, 555, 562, 580, 584], "conv2d": [10, 33, 52, 367, 387, 530], "fh": [10, 33, 367, 383, 386, 387, 388, 389, 390, 391, 392], "hwio": [10, 367, 386], "conv2d_transpos": [10, 33, 367], "random_norm": [10, 11, 15, 33, 34, 38, 259, 365, 367, 368, 374, 385, 387, 388, 389, 392, 395, 419], "std": [10, 15, 19, 33, 38, 42, 364, 367, 374, 378, 385, 387, 388, 389, 392, 482, 483, 551], "conv3d": [10, 33, 52, 367], "fd": [10, 33, 367, 383, 388, 389, 390, 391], "conv3d_transpos": [10, 33, 367], "depthwise_conv2d": [10, 33, 367], "randint": [10, 15, 17, 33, 38, 374, 376, 392, 395, 492, 549], "255": [10, 29, 33, 188, 363, 392, 530], "dropout": [10, 33, 52, 364, 367, 569], "noise_shap": [10, 33, 367, 393], "droput": [10, 393], "turn": [10, 33, 367, 393, 534, 540, 547, 551, 560, 562], "off": [10, 11, 33, 34, 51, 367, 368, 393, 402, 423, 534, 540, 565, 586], "reproduc": [10, 33, 367, 393, 521, 543], "binari": [10, 12, 29, 33, 35, 184, 187, 189, 218, 363, 364, 367, 369, 393, 429], "mask": [10, 33, 271, 365, 367, 393, 396, 397, 564], "42857146": [10, 367, 393], "85714293": [10, 367, 393], "28571415": [10, 33, 367, 393], "71428585": [10, 33, 367, 393], "14285755": [10, 33, 367, 393], "5714283": [10, 367, 393], "4285717": [10, 33, 367, 393], "8571434": [10, 33, 367, 393], "2857151": [10, 367, 393], "dropout1d": [10, 33, 364], "droput1d": 10, "dropout3d": [10, 33, 364], "droput3d": 10, "outer_batch_shap": [10, 33, 367, 394], "inner_batch_shap": [10, 33, 367, 394], "in_featur": [10, 33, 367, 394], "out_featur": [10, 33, 367, 394], "84": [10, 19, 28, 37, 38, 124, 156, 212, 361, 362, 368, 373, 378, 394, 414, 476, 483, 484, 502], "133": [10, 255, 365, 394], "134": [10, 368, 394, 411], "lstm_updat": [10, 33, 367, 566], "init_h": [10, 33, 367, 395, 566], "init_c": [10, 33, 367, 395, 566], "recurrent_kernel": [10, 33, 367, 395, 566], "recurrent_bia": [10, 33, 367, 395, 566], "initi": [10, 23, 33, 46, 49, 50, 52, 53, 55, 367, 395, 530, 533, 541, 545, 549, 550, 561, 562, 566, 580, 586, 587], "state": [10, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 142, 143, 144, 145, 146, 269, 270, 278, 308, 318, 320, 321, 322, 361, 365, 367, 395, 517, 530, 533, 540, 546, 549, 552, 553, 555, 560, 562, 565, 566, 567, 569, 573, 586, 587], "cell": [10, 33, 52, 367, 395, 548, 566], "batch_shap": [10, 15, 25, 33, 38, 52, 82, 90, 360, 367, 368, 374, 395, 396, 397, 427, 481, 564, 566, 568], "hidden": [10, 33, 52, 367, 395, 546, 553, 566, 570], "recurr": [10, 33, 367, 395, 566, 580, 584], "timestep": [10, 33, 52, 367, 395, 566], "h_i": [10, 33, 395], "c_i": [10, 33, 395], "rc": [10, 33, 395], "multi_head_attent": [10, 33, 367, 559], "num_head": [10, 33, 52, 367, 396], "context": [10, 33, 52, 293, 362, 365, 366, 367, 396, 540, 541, 551], "to_q_fn": [10, 33, 367, 396], "to_kv_fn": [10, 33, 367, 396], "to_out_fn": [10, 33, 367, 396, 559], "to_q_v": [10, 33, 367, 396], "to_kv_v": [10, 33, 367, 396], "to_out_v": [10, 33, 367, 396], "scaled_dot_product_attent": [10, 33, 367], "queri": [10, 23, 33, 52, 156, 168, 271, 362, 365, 367, 396, 397, 547, 549, 568, 580], "num_queri": [10, 33, 367, 396, 397], "feat_dim": [10, 33, 367, 397], "num_kei": [10, 33, 367, 396, 397], "applic": [10, 33, 367, 372, 396, 397, 463, 464, 465, 469, 470, 530, 540, 549, 550, 557, 570, 577, 578, 580, 582, 584, 586], "dot": [10, 29, 33, 52, 364, 367, 368, 396, 397, 425, 530, 548], "attent": [10, 33, 52, 367, 396, 397, 533, 541, 544], "score": [10, 33, 367, 397, 530], "_arraywithlinearalgebra": [11, 45], "choleski": [11, 34, 368, 559], "symmetr": [11, 29, 34, 364, 368, 398, 403, 404, 405, 427, 547], "u": [11, 25, 34, 87, 368, 372, 398, 405, 419, 465, 530, 533, 535, 540, 541, 542, 546, 547, 548, 556, 557, 559, 560, 561, 562, 563, 564, 570, 574], "l": [11, 28, 34, 215, 368, 398, 403, 404, 405, 409, 423, 541, 542], "625": [11, 29, 368, 398], "cross": [11, 12, 29, 34, 35, 364, 368, 369, 429, 430, 431, 530, 548], "vif": [11, 34, 368, 399], "det": [11, 34, 368, 417, 548], "axis1": [11, 13, 34, 36, 368, 370, 402, 423, 445], "axis2": [11, 34, 368, 402, 423], "remov": [11, 23, 34, 354, 366, 368, 370, 371, 372, 402, 409, 423, 443, 454, 455, 471, 530, 539, 545, 546, 548, 549, 552, 556, 562, 564, 571, 580], "eigh": [11, 34, 368, 403], "uplo": [11, 34, 368, 404, 405], "eigvalsh": [11, 34, 368], "inner": [11, 25, 34, 90, 360, 368, 371, 403, 404, 409, 454, 455, 456, 539, 559], "inv": [11, 34, 368], "matmul": [11, 34, 325, 365, 368, 419, 545, 562, 563, 566], "transpose_a": [11, 34, 368, 409], "transpose_b": [11, 34, 368, 409], "adjoint_a": [11, 34, 368, 409], "adjoint_b": [11, 34, 368, 409], "detail": [11, 13, 17, 34, 36, 40, 83, 360, 364, 376, 402, 409, 415, 419, 444, 492, 493, 494, 495, 530, 539, 541, 543, 545, 546, 547, 548, 555, 556, 557, 560, 561, 562, 563, 566, 568, 569, 570, 582, 586], "found": [11, 13, 17, 23, 34, 36, 40, 46, 50, 159, 362, 372, 402, 409, 444, 468, 492, 536, 539, 540, 541, 544, 545, 546, 547, 549, 552, 554, 557, 559, 560, 564, 582], "matrix_norm": [11, 34, 368], "ord": [11, 34, 368, 410, 426], "fro": [11, 34, 368, 410], "nuc": [11, 34, 368, 410], "matrix_pow": [11, 34, 368], "matrix_rank": [11, 34, 368], "singular": [11, 34, 368, 410, 412, 415, 419, 420, 549], "stack": [11, 13, 23, 29, 34, 36, 45, 52, 93, 94, 278, 299, 305, 323, 360, 364, 365, 368, 370, 372, 400, 402, 403, 404, 405, 407, 409, 411, 412, 413, 415, 416, 417, 419, 420, 423, 457, 467, 468, 530, 538, 543, 566, 576, 578, 585, 586], "largest_singular_valu": [11, 34, 368, 412, 415], "equival": [11, 34, 73, 188, 216, 217, 228, 360, 363, 368, 412, 415, 418, 426, 559, 560, 564, 569, 571], "associ": [11, 34, 178, 363, 368, 412, 415, 427, 516, 541, 549, 556, 557, 560, 561, 562, 574], "full": [11, 33, 34, 121, 203, 209, 270, 278, 299, 305, 319, 323, 360, 361, 363, 365, 367, 368, 385, 387, 388, 389, 412, 416, 418, 419, 516, 521, 530, 533, 534, 541, 549, 552, 553, 555, 560, 562, 564, 566, 574, 578, 580, 586], "defici": [11, 368, 412], "matrix_transpos": [11, 34, 368, 568], "outer": [11, 34, 368, 371, 454, 455, 456, 539], "pinv": [11, 34, 368], "pseudo": [11, 34, 368, 415, 558], "0426": [11, 34, 415], "0964": [11, 34, 415], "0605": [11, 34, 415], "1368": [11, 34, 415], "qr": [11, 34, 368, 561], "decomposit": [11, 34, 368, 398, 408, 416, 419, 539, 587], "orthonorm": [11, 34, 368, 416, 419], "lead": [11, 23, 34, 46, 368, 416, 419, 533, 534, 548, 551, 563, 574], "complet": [11, 23, 34, 368, 416, 533, 539, 540, 541, 543, 544, 547, 548, 551, 553, 560, 561, 562, 564, 568, 569, 578], "namedtupl": [11, 17, 34, 40, 368, 376, 403, 404, 416, 417, 419, 492, 493, 494], "field": [11, 17, 34, 40, 368, 376, 403, 404, 416, 417, 419, 492, 493, 494, 530, 548, 573, 578, 586], "those": [11, 13, 23, 29, 34, 36, 73, 134, 325, 360, 361, 365, 368, 370, 372, 416, 419, 433, 459, 532, 539, 540, 541, 544, 547, 548, 549, 557, 560, 561, 562, 564, 577], "slogdet": [11, 34, 368], "logabsdet": [11, 34, 368, 417], "natur": [11, 34, 197, 210, 212, 229, 363, 368, 417, 533, 544, 546, 551, 553, 561, 573], "6931472": [11, 34, 368, 417], "098611": [11, 368, 417], "solv": [11, 34, 368, 530, 540, 543, 560, 567, 573, 582], "svd": [11, 34, 368, 420], "compute_uv": [11, 34, 368, 419], "full_matric": [11, 34, 368, 419], "svf": [11, 419], "vh": [11, 34, 368, 419], "right": [11, 23, 34, 46, 186, 188, 259, 363, 364, 365, 368, 377, 419, 424, 497, 535, 540, 541, 542, 543, 551, 564, 569], "significantli": [11, 34, 368, 419, 532, 548, 578], "faster": [11, 34, 368, 419, 538, 575, 582, 585], "still": [11, 23, 34, 368, 419, 533, 539, 541, 544, 549, 552, 553, 559, 560, 562, 564, 570, 574, 577, 580, 586], "howev": [11, 34, 368, 417, 419, 533, 539, 540, 541, 543, 544, 545, 547, 549, 550, 551, 552, 553, 555, 556, 559, 560, 561, 562, 564, 566, 568, 569, 570, 571, 574, 579, 580, 586], "onc": [11, 15, 34, 38, 169, 362, 368, 374, 403, 404, 405, 419, 481, 534, 539, 540, 541, 547, 548, 549, 550, 551, 560, 562, 564, 566, 569, 574], "hermitian": [11, 34, 364, 368, 403, 404, 405, 419], "reconstruct": [11, 17, 40, 368, 376, 419, 492, 494, 561], "close": [11, 198, 212, 229, 363, 368, 370, 419, 436, 539, 540, 541, 552, 560, 564, 580], "reconstructed_x": [11, 368, 419], "svdval": [11, 34, 368], "tensordot": [11, 34, 368, 549], "tensorsolv": [11, 34, 368], "vander": [11, 34, 368], "increas": [11, 13, 34, 36, 364, 368, 370, 372, 424, 435, 448, 469, 532, 549, 553, 560, 563, 564, 580], "vandermond": [11, 34, 368, 424], "vecdot": [11, 34, 368], "vector_norm": [11, 34, 368], "singleton": [11, 16, 19, 20, 34, 39, 42, 43, 368, 370, 375, 378, 379, 426, 436, 443, 488, 503, 504, 505, 506, 507, 508, 509, 510, 511, 566], "accordingli": [11, 16, 17, 19, 20, 34, 39, 42, 43, 88, 198, 212, 360, 363, 368, 375, 376, 378, 379, 426, 488, 492, 493, 494, 495, 503, 504, 505, 506, 507, 508, 509, 510, 511, 554, 560, 566], "mathemat": [11, 34, 178, 182, 198, 212, 358, 363, 368, 410, 426, 549, 560, 564, 580, 586], "l1": [11, 34, 368, 426, 547, 569], "manhattan": [11, 34, 368, 426], "euclidean": [11, 34, 368, 426], "7416575": [11, 34, 368, 426], "vector_to_skew_symmetric_matrix": [11, 34, 368], "_arraywithloss": [12, 45], "binary_cross_entropi": [12, 35, 369, 548], "pred": [12, 29, 35, 364, 369, 429, 430, 431, 530, 547, 556, 559], "label": [12, 29, 35, 364, 369, 429, 430, 431, 530, 539, 541, 543, 548, 560, 565, 566, 567, 571, 580], "predict": [12, 29, 35, 364, 369, 429, 430, 431, 530], "amount": [12, 29, 35, 171, 362, 364, 369, 429, 430, 431, 540, 548, 550, 561], "smooth": [12, 29, 35, 364, 369, 429, 430, 431, 558], "entropi": [12, 29, 35, 364, 369, 429, 430, 431, 530], "357": [12, 35, 369, 429, 431], "223": [12, 35, 369, 429, 431], "cross_entropi": [12, 35, 369, 431, 530, 547, 556, 559], "3862944": [12, 369, 430], "sparse_cross_entropi": [12, 35, 369], "_arraywithmanipul": [13, 45], "x_min": [13, 36, 370, 433, 571], "x_max": [13, 36, 370, 433, 571], "join": [13, 23, 36, 370, 434, 444, 530, 553], "constant_pad": [13, 36, 370], "before_1": [13, 36, 364, 370, 435, 448], "after_1": [13, 36, 364, 370, 435, 448], "before_n": [13, 36, 364, 370, 435, 448], "after_n": [13, 36, 364, 370, 435, 448], "expand_dim": [13, 36, 367, 370, 392, 530, 560, 566, 569], "permute_dim": [13, 36, 370], "permut": [13, 36, 45, 370, 438, 445], "repetit": [13, 36, 370, 439, 446, 553, 564], "fit": [13, 36, 370, 439, 560, 566, 576, 577, 580], "flat": [13, 23, 36, 50, 296, 364, 365, 370, 439], "allowzero": [13, 36, 370, 440], "remain": [13, 16, 36, 39, 178, 228, 363, 364, 370, 372, 375, 440, 463, 490, 541, 548, 551, 553, 563, 564, 574], "never": [13, 36, 370, 440, 541, 549, 560, 562, 564], "valueerror": [13, 36, 40, 370, 440, 443, 495, 527, 553], "reus": [13, 36, 370, 440, 553, 562, 585], "buffer": [13, 36, 370, 440, 574], "roll": [13, 36, 370, 547, 555], "shift": [13, 25, 36, 46, 85, 186, 188, 363, 364, 370, 441, 540, 541, 551, 555], "restor": [13, 36, 370, 441], "num_or_size_split": [13, 23, 36, 367, 370, 396, 442, 566], "with_remaind": [13, 23, 36, 370, 442], "mani": [13, 23, 36, 50, 364, 370, 442, 530, 532, 533, 534, 539, 540, 541, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 566, 568, 569, 574, 576, 580, 583, 586, 587], "squeez": [13, 36, 370, 580], "document": [13, 325, 365, 444, 535, 537, 538, 541, 546, 548, 549, 551, 553, 560, 561, 562, 569, 571], "swapax": [13, 36, 370], "axis0": [13, 36, 370, 445], "swap_ax": [13, 445], "swap": [13, 36, 370, 445], "tile": [13, 30, 36, 261, 370], "unpack": [13, 36, 370, 447, 554, 561, 562], "keep": [13, 23, 36, 370, 447, 538, 539, 540, 541, 543, 546, 547, 548, 553, 560, 562, 563, 564, 569, 571], "zero_pad": [13, 36, 370], "_arraywithnorm": [14, 45], "layer_norm": [14, 37, 373], "normalized_idx": [14, 37, 373, 476], "new_std": [14, 37, 54, 373, 476], "learnabl": [14, 37, 54, 373, 476, 571], "post": [14, 37, 373, 476, 540, 558, 571], "0976": [14, 373, 476], "3452": [14, 373, 476], "2740": [14, 373, 476], "1047": [14, 373, 476], "5886": [14, 373, 476], "2732": [14, 373, 476], "7696": [14, 373, 476], "7024": [14, 373, 476], "2518": [14, 373, 476], "826": [14, 373, 476], "178": [14, 373, 476], "981": [14, 373, 476], "831": [14, 373, 476], "421": [14, 373, 476], "_arraywithrandom": [15, 45], "multinomi": [15, 38, 364, 374], "population_s": [15, 38, 374, 481], "num_sampl": [15, 38, 374, 481], "unnorm": [15, 38, 374, 481, 562], "popul": [15, 19, 23, 38, 42, 364, 374, 378, 481, 507, 509, 549, 550, 562, 566, 586], "uniform": [15, 38, 51, 374, 481, 482, 484, 530, 570, 587], "draw": [15, 38, 51, 364, 374, 481, 483, 484, 521, 539, 543, 561, 562], "ve": [15, 38, 374, 481, 539, 540, 541, 562, 564, 565, 568, 575], "highest": [15, 38, 374, 482], "half": [15, 38, 73, 360, 374, 482, 484, 564], "open": [15, 38, 73, 360, 374, 482, 484, 530, 532, 533, 534, 535, 540, 541, 546, 549, 552, 560, 561, 564, 573, 578, 579, 580, 582, 583], "int64": [15, 16, 18, 19, 26, 38, 39, 41, 42, 91, 111, 117, 120, 122, 124, 128, 129, 132, 139, 360, 361, 364, 375, 377, 378, 482, 487, 488, 489, 497, 500, 501, 506, 508, 549, 560, 562, 566], "235": [15, 483], "float16": [15, 26, 38, 113, 116, 121, 123, 361, 364, 368, 426, 483, 484, 549, 562], "807": [15, 483], "random_uniform": [15, 38, 374, 550, 562, 566, 570], "86": [15, 38, 343, 366, 483, 484], "53": [15, 28, 171, 198, 346, 348, 355, 362, 366, 373, 476, 484], "_arraywithsearch": [16, 45], "argmax": [16, 39, 375, 530, 560], "select_last_index": [16, 39, 375, 487, 488], "occurr": [16, 375, 376, 487, 488, 492], "insert": [16, 39, 370, 372, 375, 377, 436, 462, 487, 497, 548], "appropri": [16, 21, 39, 44, 178, 363, 364, 375, 487, 539, 541, 557, 562], "argmin": [16, 39, 375], "output_dtyp": [16, 39, 375, 488], "across": [16, 23, 30, 39, 167, 168, 251, 280, 362, 365, 367, 372, 375, 393, 463, 487, 488, 539, 543, 547, 549, 551, 553, 555, 556, 558, 560, 562, 564, 578, 580, 585], "argwher": [16, 39, 375, 554], "nonzero": [16, 39, 178, 363, 375], "as_tupl": [16, 39, 375, 490], "fewer": [16, 39, 375, 490], "yield": [16, 364, 375, 491, 530, 548, 554], "condit": [16, 29, 39, 364, 372, 375, 467, 468, 491, 543, 549, 551, 553, 556, 557, 559, 573], "_arraywithset": [17, 45], "unique_al": [17, 40, 376], "inverse_indic": [17, 40, 376, 492, 494], "vari": [17, 259, 365, 376, 492, 493, 494, 495, 547, 551, 560, 562, 568], "unique_count": [17, 40, 376], "unique_invers": [17, 40, 376], "unique_valu": [17, 40, 376], "admonit": [17, 495], "import": [17, 21, 25, 44, 152, 153, 157, 158, 166, 167, 362, 364, 376, 495, 521, 530, 533, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 554, 558, 559, 560, 561, 562, 563, 566, 568, 569, 571, 574, 576, 578, 580, 583, 584, 586], "henc": [17, 370, 376, 436, 492, 493, 494, 495, 540, 547, 548, 562], "build": [17, 52, 53, 376, 492, 493, 494, 495, 530, 533, 535, 536, 540, 542, 548, 549, 556, 558, 565, 567, 570, 571, 574, 575, 578, 580, 582, 585, 586, 587], "graph": [17, 53, 376, 492, 493, 494, 495, 521, 530, 534, 547, 556, 560, 564, 567, 574, 575, 576, 580, 583], "dask": [17, 376, 492, 493, 494, 495, 533], "find": [17, 23, 372, 376, 459, 492, 493, 494, 495, 530, 532, 535, 538, 539, 540, 541, 543, 546, 548, 558, 562, 564, 566, 569, 575], "difficult": [17, 376, 492, 493, 494, 495, 541, 543, 549, 562, 574], "without": [17, 23, 276, 303, 317, 365, 370, 372, 376, 440, 458, 492, 493, 494, 495, 541, 544, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 562, 563, 564, 568, 569, 570, 573, 574, 577, 580, 581, 582, 586], "know": [17, 376, 492, 493, 494, 495, 534, 537, 541, 546, 561, 562, 563, 581], "omit": [17, 229, 363, 376, 492, 493, 494, 495, 555, 559, 560], "x_i": [17, 19, 28, 29, 51, 175, 176, 177, 179, 180, 181, 185, 190, 191, 192, 197, 198, 199, 204, 205, 206, 207, 210, 211, 212, 213, 216, 229, 230, 231, 232, 233, 234, 236, 237, 238, 363, 364, 376, 378, 492, 493, 494, 495, 503, 504, 505, 507, 508, 509, 552], "x_j": [17, 376, 492, 493, 494, 495], "impli": [17, 376, 492, 493, 494, 495, 562], "behavior": [17, 225, 228, 363, 376, 492, 493, 494, 495, 546, 547, 548, 549, 556, 560, 561, 562, 564, 566, 574, 577], "As": [17, 21, 44, 376, 492, 493, 494, 495, 530, 532, 541, 544, 546, 547, 548, 549, 550, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 568, 569, 570, 574, 580, 585], "distinct": [17, 376, 492, 493, 494, 495, 533, 540, 547, 552, 558, 559, 560, 565, 580], "could": [17, 376, 492, 493, 494, 495, 533, 534, 539, 540, 541, 543, 546, 548, 549, 551, 557, 559, 560, 561, 562, 566, 568, 569, 570, 580, 585, 586], "typeerror": [17, 40, 376, 495, 568], "_arraywithsort": [18, 45], "argsort": [18, 41, 377, 497, 560], "descend": [18, 41, 368, 377, 419, 420, 496, 498], "ascend": [18, 41, 364, 377, 496, 497], "stabil": [18, 41, 309, 310, 365, 377, 496, 498, 549, 558, 564], "maintain": [18, 41, 377, 496, 498, 532, 541, 543, 548, 560, 561, 562, 579], "searchsort": [18, 41, 377], "side": [18, 41, 364, 377, 497, 540, 541, 546], "sorter": [18, 41, 377, 497], "ret_dtyp": [18, 41, 377, 497], "_arraywithstatist": [19, 45], "cumprod": [19, 42, 378, 560, 571], "cumul": [19, 42, 378, 500, 501, 573], "exclud": [19, 42, 73, 360, 364, 374, 484, 500, 551, 566], "uint64": [19, 118, 123, 125, 126, 135, 137, 140, 361, 378, 500, 501, 506, 508, 549, 562, 566], "uint16": [19, 113, 118, 123, 124, 132, 361, 378, 500, 501, 506, 508, 549, 560, 562, 566], "bit": [19, 120, 121, 124, 185, 186, 188, 361, 363, 378, 500, 501, 506, 508, 538, 539, 540, 547, 548, 549, 551, 556, 566, 568, 586], "uint32": [19, 118, 123, 124, 125, 146, 361, 378, 500, 501, 506, 508, 549, 562, 566], "resolv": [19, 370, 378, 436, 500, 501, 506, 508, 541, 546, 549, 566], "120": [19, 42, 46, 368, 414, 500, 530], "cumsum": [19, 42, 378, 549], "einsum": [19, 42, 378], "equat": [19, 29, 42, 364, 368, 378, 418, 502, 580], "operand": [19, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 192, 197, 198, 199, 210, 211, 212, 213, 214, 225, 228, 229, 231, 232, 233, 236, 237, 238, 363, 364, 378, 502, 503, 505, 508, 544, 547, 552, 560], "describ": [19, 29, 364, 378, 502, 506, 508, 537, 539, 541, 548, 562, 566, 571, 580], "contract": [19, 368, 378, 421, 502], "seq": [19, 378, 502], "consist": [19, 23, 53, 368, 378, 403, 404, 502, 532, 543, 544, 548, 549, 553, 559, 566, 581], "ii": [19, 42, 378, 502, 541], "jk": [19, 378, 502], "ik": [19, 378, 502], "66": [19, 30, 31, 189, 259, 260, 347, 363, 365, 366, 368, 378, 414, 502], "104": [19, 368, 378, 414, 502], "126": [19, 59, 226, 357, 363, 368, 378, 411, 502], "just": [19, 52, 364, 378, 502, 521, 530, 533, 534, 540, 541, 543, 545, 548, 549, 551, 552, 556, 557, 559, 560, 561, 562, 566, 568, 569, 574, 580, 581, 586], "510": [19, 378, 502], "entir": [19, 20, 23, 30, 42, 43, 52, 169, 280, 362, 364, 378, 379, 503, 504, 505, 506, 507, 508, 509, 510, 511, 533, 534, 539, 540, 541, 543, 544, 547, 549, 551, 553, 559, 560, 561, 562, 564, 566, 569, 570, 571, 574, 580, 586, 587], "wa": [19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 317, 324, 347, 353, 362, 364, 365, 372, 378, 379, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 530, 533, 541, 543, 548, 551, 558, 560, 566, 568, 579, 580, 582], "special": [19, 34, 45, 46, 51, 175, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 192, 197, 198, 199, 210, 211, 212, 213, 214, 216, 225, 228, 229, 230, 231, 232, 233, 236, 237, 238, 363, 364, 378, 503, 504, 505, 507, 508, 509, 521, 539, 543, 544, 548, 551, 552, 553, 555, 559, 561, 563, 564, 580, 581, 582], "arithmet": [19, 42, 188, 363, 378, 504, 560], "propag": [19, 188, 363, 378, 503, 504, 505, 507, 508, 509, 558], "04999995": [19, 504], "correct": [19, 42, 141, 361, 370, 378, 433, 507, 509, 516, 530, 539, 541, 542, 546, 547, 548, 549, 550, 554, 555, 556, 561, 562], "freedom": [19, 42, 378, 507, 509, 545], "adjust": [19, 42, 378, 507, 509], "choic": [19, 42, 378, 507, 509, 530, 534, 540, 559, 560, 569, 580], "constitut": [19, 42, 378, 507, 509, 556, 566, 581], "commonli": [19, 42, 378, 507, 509, 553, 556, 558], "8164966": [19, 378, 507], "var": [19, 42, 44, 68, 69, 70, 71, 359, 371, 378, 454, 455, 524, 540, 551, 566], "unbias": [19, 42, 378, 509], "6666665": [19, 509, 569], "667": [19, 30, 194, 255, 309, 363, 365, 509], "_arraywithutil": [20, 45], "logic": [20, 43, 161, 215, 216, 217, 362, 363, 379, 510, 511, 539, 544, 548, 549, 550, 553, 557, 558, 560, 562, 564, 568], "AND": [20, 43, 184, 215, 363, 379, 510], "invalid": [20, 43, 368, 370, 379, 425, 436, 510, 511, 540, 546, 549, 554], "_wrap_funct": [21, 44, 546, 556, 557], "function_nam": [21, 44, 539], "new_funct": [21, 44, 546], "add_ivy_array_instance_method": 21, "cl": [21, 44], "modul": [21, 23, 44, 46, 48, 49, 50, 52, 54, 56, 293, 364, 365, 516, 530, 534, 537, 540, 544, 545, 546, 553, 554, 556, 559, 560, 562, 566, 567, 569, 571, 573, 574, 580, 581, 583], "to_ignor": [21, 44, 372, 468, 469], "loop": [21, 44, 371, 454, 455, 456, 530, 545, 554, 574], "don": [21, 44, 530, 534, 539, 540, 541, 546, 548, 549, 558, 562, 564, 570, 574], "shown": [21, 23, 44, 207, 278, 363, 364, 365, 539, 541, 543, 546, 548, 549, 551, 553, 554, 555, 560, 561, 562, 563, 566, 568, 574], "our": [21, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 551, 553, 554, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574, 585, 586], "toi": [21, 44], "arrayexampl": 21, "hasattr": [21, 44], "_containerwithactiv": [22, 46], "dict_in": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "queue": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 276, 303, 321, 365, 569], "queue_load_s": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "container_combine_method": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "list_join": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "queue_timeout": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_limit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "key_length_limit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_ind": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_line_spac": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "ivyh": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "default_key_color": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "green": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 529, 540, 541], "keyword_color_dict": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "rebuild_child_contain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "types_to_iteratively_nest": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "alphabetical_kei": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "dynamic_backend": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53], "containerbas": [22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 547], "static": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 49, 79, 311, 360, 414, 539, 551, 552, 556, 557, 560, 574, 579, 580, 581], "_static_gelu": 22, "key_chain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "to_appli": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 372, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "prune_unappli": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 372, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "map_sequ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 132, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "exact": [22, 23, 59, 364, 376, 492, 494, 540, 541, 543, 551, 566], "formul": [22, 59], "chain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 50, 56, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 371, 372, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 454, 455, 459, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 544, 547, 558, 560, 570, 571, 574, 580], "skip": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 372, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 470, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 546, 557, 562], "prune": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 135, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 251, 252, 254, 255, 259, 260, 261, 263, 266, 267, 275, 280, 282, 283, 284, 286, 287, 289, 296, 297, 309, 310, 311, 313, 315, 316, 324, 347, 353, 372, 384, 385, 386, 387, 393, 394, 397, 398, 399, 405, 407, 409, 410, 412, 414, 416, 417, 423, 429, 430, 431, 433, 437, 440, 441, 442, 443, 444, 447, 448, 470, 471, 472, 473, 481, 482, 483, 484, 486, 489, 492, 493, 494, 495, 496, 500, 501, 504, 506, 507, 509, 510, 511, 517, 548], "static_gelu": 22, "185": 22, "046": 22, "_static_leaky_relu": 22, "static_leaky_relu": 22, "38999999": [22, 61], "_static_log_softmax": 22, "static_log_softmax": 22, "371": [22, 62], "_static_mish": 22, "static_mish": 22, "30883577": [22, 63, 357], "28903052": [22, 63, 357], "10714479": [22, 63, 357], "_static_relu": 22, "static_relu": 22, "40000001": [22, 45, 46, 61, 64, 357, 376, 493], "_static_sigmoid": 22, "static_sigmoid": 22, "2689414": [22, 65, 66], "7310586": [22, 65, 66], "88079703": [22, 65], "62245935": [22, 65], "4750208": [22, 65], "_static_softmax": 22, "static_softmax": 22, "72844321": [22, 66], "19852395": [22, 66], "07303288": [22, 66], "_static_softplu": 22, "revert": [22, 67, 357], "static_softplu": 22, "53499615": 22, "42036411": 22, "948": [22, 67], "166": [22, 59, 357], "159": [22, 59, 357, 367, 394], "__getitem__": [23, 547], "slice": [23, 30, 266, 267, 271, 364, 365, 372, 466, 580], "__init__": [23, 45, 46, 48, 51, 52, 53, 54, 55, 56, 360, 361, 362, 364, 365, 366, 513, 517, 519, 520, 527, 530, 539, 544, 545, 549, 553, 560, 563, 566, 568, 569, 570, 571], "dictionari": [23, 40, 46, 58, 60, 168, 345, 357, 362, 366, 495, 516, 544, 548, 549, 560, 569, 574], "around": [23, 46, 364, 541, 544, 546, 555, 556, 560, 563, 568, 574, 575, 578, 580, 587], "multiprocess": [23, 46, 365, 569, 574], "asynchron": [23, 46, 580], "wait": [23, 46, 303, 365, 530, 539, 541, 548, 560], "combin": [23, 46, 264, 265, 365, 368, 399, 409, 541, 544, 547, 549, 551, 553, 556, 562, 564, 571, 580], "arriv": [23, 46, 303, 365, 564], "cont_list_join": [23, 46], "timeout": [23, 46, 276, 303, 321, 365], "limit": [23, 46, 51, 121, 124, 254, 255, 361, 365, 370, 433, 524, 530, 540, 541, 546, 548, 551, 553, 554, 560, 562, 564, 569, 574, 579, 580, 581], "whitespac": [23, 46], "indent": [23, 46, 569], "extra": [23, 46, 325, 365, 544, 549, 551, 557, 560, 561, 564, 566, 577, 582], "newlin": [23, 46, 552], "color": [23, 46, 529], "termin": [23, 46, 540, 541, 547, 566, 569], "termcolor": [23, 46], "rebuild": [23, 46, 536], "constructor": [23, 46, 49, 56, 250, 365, 516, 549, 550, 568], "param": [23, 29, 30, 40, 46, 48, 221, 249, 266, 267, 363, 365, 495, 524, 530, 571], "kept": [23, 46, 371, 454, 455, 541, 559, 563], "structur": [23, 26, 46, 50, 121, 124, 256, 365, 372, 470, 530, 541, 544, 547, 556, 561, 562, 563, 569, 570, 579, 580], "alphabet": [23, 46], "__setitem__": [23, 544, 547, 568], "_cont_at_key_chains_input_as_dict": 23, "current_chain": 23, "ignore_key_error": 23, "_cont_at_key_chains_input_as_seq": 23, "_cont_call_static_method_with_flexible_arg": 23, "static_method": 23, "kw": 23, "self_idx": 23, "_cont_concat_unifi": 23, "_cont_get_dev": 23, "_cont_get_shap": 23, "properti": [23, 45, 53, 55, 364, 513, 543, 547, 551, 556, 561, 562, 568, 569, 570, 586], "_cont_ivi": 23, "_cont_mean_unifi": 23, "_1": 23, "_cont_prune_key_chains_input_as_dict": 23, "return_cont": 23, "_cont_prune_key_chains_input_as_seq": 23, "_cont_slice_kei": 23, "key_slic": 23, "_cont_sum_unifi": 23, "_get_queue_item": 23, "cont_all_fals": 23, "assert_is_bool": 23, "assert": [23, 252, 365, 521, 542, 543, 554, 560, 561, 562, 563, 568, 569], "cont_all_key_chain": 23, "include_empti": 23, "cont_all_tru": [23, 547, 569], "cont_as_bool": 23, "cont_assert_contains_sub_contain": 23, "sub_cont": 23, "screen": [23, 540, 569], "cont_assert_contains_sub_structur": 23, "check_shap": [23, 524], "cont_assert_ident": 23, "check_typ": 23, "same_arrai": [23, 569], "arrays_equ": 23, "ident": [23, 82, 159, 271, 360, 362, 365, 368, 372, 411, 470, 532, 534, 547, 556, 557, 560, 561, 563, 564, 568, 569, 574, 575], "node": [23, 30, 51, 252, 311, 372, 467, 468, 533, 546, 547, 560, 581], "cont_assert_identical_structur": 23, "cont_at_key_chain": 23, "ignore_non": 23, "cont_at_kei": 23, "substr": 23, "try": [23, 51, 317, 364, 365, 530, 531, 533, 534, 539, 540, 541, 543, 544, 547, 548, 549, 553, 554, 559, 560, 561, 566, 568, 574], "access": [23, 539, 540, 541, 548, 549, 560, 580, 582, 584], "cont_combin": 23, "config": [23, 372, 470, 536, 540, 543, 546, 548, 569, 581], "prioriti": [23, 364, 541, 559], "most": [23, 25, 90, 360, 368, 403, 404, 530, 533, 538, 539, 540, 544, 547, 548, 549, 550, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 574, 580, 581, 583, 584, 586, 587], "duplic": [23, 372, 459, 545, 552, 554, 557, 558, 561, 570, 586], "configur": [23, 168, 362, 372, 470, 536, 540, 541, 546, 548, 549, 557], "container_rightmost": 23, "cont_common_key_chain": [23, 547], "cont_config": 23, "cont_contains_sub_contain": 23, "cont_contains_sub_structur": 23, "cont_copi": [23, 569], "cont_create_if_abs": 23, "noth": [23, 564, 586], "cont_cutoff_at_depth": 23, "depth_cutoff": 23, "summari": [23, 125, 256, 277, 361, 365, 540, 541, 562], "cont_cutoff_at_height": 23, "height_cutoff": 23, "cont_deep_copi": [23, 569], "deep": [23, 259, 365, 530, 532, 535, 537, 538, 539, 541, 543, 546, 547, 549, 558, 561, 565, 568, 569, 578, 580, 583, 584, 586, 587], "intern": [23, 51, 52, 53, 54, 56, 372, 457, 467, 468, 513, 544, 547, 550, 552, 559, 561, 562], "cont_dev": 23, "belong": [23, 539, 543, 570], "cont_dev_str": 23, "cont_diff": [23, 547, 569], "diff_kei": 23, "detect_key_diff": 23, "detect_value_diff": 23, "detect_shape_diff": 23, "share": [23, 141, 361, 530, 533, 545, 547, 551, 556, 558, 560, 561, 562, 564, 566, 578, 579, 586], "among": [23, 534, 548, 562, 564, 580], "flag": [23, 154, 362, 516, 521, 541, 549, 557, 559, 560, 561, 562], "container0": 23, "cont_duplicate_array_keychain": 23, "cont_find_sub_contain": 23, "sub_cont_to_find": 23, "exsit": 23, "cont_find_sub_structur": 23, "sub_struc_to_find": 23, "cont_flatten_key_chain": [23, 569], "__": [23, 551, 569], "above_height": [23, 569], "below_depth": [23, 569], "cont_format_key_chain": 23, "format_fn": 23, "cont_from_disk_as_hdf5": [23, 569], "h5_obj_or_filepath": 23, "slice_obj": 23, "load": [23, 530, 562, 574, 579, 586], "disk": [23, 569, 579], "h5py": 23, "file": [23, 53, 279, 306, 365, 539, 540, 541, 543, 544, 545, 546, 547, 548, 552, 553, 554, 556, 560, 561, 562, 563, 566, 569, 576, 579, 580, 581], "hdf5": [23, 53, 569], "filepath": [23, 541, 543], "h5": 23, "cont_from_disk_as_json": [23, 569], "json_filepath": 23, "json": [23, 536, 540, 569], "some": [23, 31, 52, 198, 212, 343, 344, 347, 349, 350, 351, 362, 363, 364, 366, 372, 468, 530, 533, 534, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 573, 574, 575, 576, 577, 579, 580, 581, 586, 587], "were": [23, 26, 124, 128, 129, 541, 549, 553, 554, 558, 562, 563, 564, 566, 580, 581, 586], "abl": [23, 540, 541, 543, 549, 556, 559, 560, 564, 566, 571, 583, 586], "cont_from_disk_as_pickl": [23, 569], "pickle_filepath": 23, "pickl": [23, 547, 569], "cont_from_flat_list": 23, "flat_list": 23, "hierarchi": [23, 539, 569, 576, 586], "cont_handle_inplac": 23, "prime": 23, "being": [23, 44, 45, 50, 51, 73, 253, 276, 303, 360, 364, 365, 368, 405, 513, 516, 530, 533, 534, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 557, 559, 560, 561, 562, 564, 566, 569, 573, 574, 576, 578, 579, 580, 581, 586, 587], "overwritten": [23, 544, 545], "cont_has_kei": 23, "query_kei": 23, "somewher": [23, 548], "cont_has_key_chain": 23, "cont_ident": [23, 569], "cont_identical_array_shap": 23, "regardless": [23, 534, 535, 549, 568, 571], "cont_identical_config": 23, "cont_identical_structur": 23, "cont_if_exist": 23, "cont_inplace_upd": 23, "cont_ivi": 23, "cont_key_chains_contain": 23, "sub_str": 23, "cont_list_stack": [23, 569], "cont_map": [23, 547, 569], "func": [23, 169, 253, 325, 345, 346, 348, 355, 362, 364, 365, 366, 372, 470, 516, 539, 543, 544, 551, 553, 558, 559], "cont_map_sub_cont": 23, "include_self": 23, "possibi": 23, "cont_max_depth": 23, "cont_multi_map": [23, 547], "map_nest": 23, "assert_ident": 23, "leftmost": [23, 372, 470], "cont_multi_map_in_funct": [23, 547], "fn": [23, 26, 76, 77, 78, 122, 123, 157, 158, 249, 264, 265, 317, 360, 361, 362, 364, 365, 372, 463, 464, 465, 467, 468, 469, 514, 516, 524, 527, 528, 553, 560, 566], "cont_num_arrai": 23, "cont_overwrite_at_key_chain": 23, "target_dict": 23, "return_dict": 23, "cont_prune_empti": 23, "keep_non": 23, "cont_prune_key_chain": 23, "key1": [23, 530, 570], "key2": [23, 530], "key3": 23, "cont_prune_key_from_key_chain": 23, "certain": [23, 73, 86, 87, 360, 530, 540, 541, 543, 549, 556, 562, 564, 574, 584], "decid": [23, 372, 457, 458, 467, 468, 469, 530, 539, 540, 549, 564], "cont_prune_kei": 23, "cont_prune_keys_from_key_chain": 23, "cont_reduc": 23, "cont_remove_key_length_limit": 23, "cont_remove_print_limit": 23, "cont_reshape_lik": 23, "leading_shap": 23, "cont_restructur": 23, "keep_orig": 23, "old": [23, 540, 545, 559], "cont_restructure_key_chain": 23, "keychain_map": 23, "cont_set_at_key_chain": 23, "cont_set_at_kei": 23, "cont_shap": [23, 367, 388], "attribut": [23, 121, 122, 123, 124, 157, 158, 165, 264, 265, 361, 362, 364, 365, 517, 546, 547, 549, 552, 557, 559, 560, 567, 568, 569, 570], "cont_show": 23, "cont_show_sub_contain": 23, "sub_cont_or_keychain": 23, "cont_size_ordered_arrai": 23, "keychain": [23, 29], "cont_slice_kei": 23, "all_depth": 23, "cont_slice_via_kei": 23, "slice_kei": 23, "cont_sort_by_kei": 23, "cont_structural_diff": 23, "cont_to_dict": 23, "cont_to_disk_as_hdf5": [23, 569], "starting_index": 23, "max_batch_s": 23, "later": [23, 253, 365, 539, 562, 580], "cont_to_disk_as_json": [23, 569], "cont_to_disk_as_pickl": [23, 569], "cont_to_flat_list": 23, "cont_to_iter": [23, 547], "leaf_keys_onli": 23, "cont_to_iterator_kei": 23, "cont_to_iterator_valu": 23, "cont_to_json": 23, "cont_to_nested_list": 23, "cont_to_raw": 23, "raw": [23, 530, 552, 581], "cont_trim_kei": 23, "max_length": 23, "trim": 23, "cont_try_kc": 23, "tri": [23, 517], "cont_unifi": 23, "unifi": [23, 169, 362, 530, 531, 533, 542, 543, 544, 549, 553, 558, 560, 564, 566, 574, 576, 577, 578, 580, 584, 587], "concatten": [23, 169, 362], "cont_unstack_cont": 23, "dim_siz": 23, "cont_update_config": 23, "cont_with_default_key_color": 23, "cont_with_entries_as_list": 23, "cont_with_ivy_backend": 23, "ivy_backend": 23, "cont_with_key_length_limit": [23, 569], "cont_with_print_ind": [23, 569], "cont_with_print_limit": [23, 569], "cont_with_print_line_spac": 23, "h5_file_s": 23, "shuffle_h5_fil": 23, "seed_valu": [23, 374, 485], "dataset": [23, 530, 569, 572], "split_cont": 23, "constitu": [23, 571], "_is_json": 23, "_repr": 23, "_containerwithconvers": [24, 46], "_static_to_ivi": 24, "_static_to_n": 24, "_containerwithcr": [25, 46], "_static_arang": 25, "_static_asarrai": 25, "_static_empty_lik": 25, "_static_ey": 25, "n_row": [25, 29, 82, 360, 364], "n_col": [25, 29, 82, 360, 364], "_static_from_dlpack": 25, "_static_full_lik": 25, "static_full_lik": 25, "2324": [25, 85, 360], "234": [25, 28, 85, 196, 238, 360, 363, 367, 394], "123": [25, 26, 85, 124, 262, 360, 365, 562], "_static_linspac": 25, "_static_logspac": 25, "static_logspac": 25, "15443469": [25, 87], "64158883": [25, 87], "_static_meshgrid": 25, "_static_native_arrai": 25, "_static_one_hot": 25, "static_one_hot": 25, "_static_on": 25, "_static_ones_lik": 25, "_static_tril": 25, "_static_triu": 25, "_static_zero": 25, "_static_zeros_lik": 25, "5443469": [25, 87, 360], "_containerwithdatatyp": [26, 46], "_static_astyp": 26, "718": [26, 28, 108, 217, 361], "618": [26, 28, 108, 217, 361], "static_astyp": 26, "_static_broadcast_arrai": 26, "And": [26, 530, 546, 562], "static_broadcast_arrai": 26, "_static_broadcast_to": 26, "static_broadcast_to": 26, "_static_can_cast": 26, "from_": [26, 111, 361], "static_can_cast": 26, "_static_default_complex_dtyp": 26, "complex_dtyp": [26, 114, 136, 361], "_static_default_float_dtyp": 26, "float_dtyp": [26, 116, 138, 361], "_static_dtyp": 26, "_static_finfo": 26, "inquir": [26, 121, 124], "static_finfo": 26, "55040e": [26, 121, 361], "7976931348623157e": [26, 121, 361], "308": [26, 121, 361, 562], "_static_function_supported_dtyp": 26, "_static_function_unsupported_dtyp": 26, "_static_iinfo": 26, "1800": [26, 124, 361], "1084": 26, "40000": 26, "static_iinfo": 26, "2147483648": [26, 124, 361], "2147483647": [26, 124, 361], "_static_is_bool_dtyp": 26, "dtype_in": [26, 106, 107, 120, 126, 127, 128, 129, 130, 131, 132, 147, 361], "_static_is_complex_dtyp": 26, "is_complex_dtyp": [26, 361], "roughli": [26, 540, 543, 583], "static_is_complex_dtyp": 26, "complex64": [26, 114, 128, 136, 142, 361], "_static_is_float_dtyp": 26, "static_is_float_dtyp": 26, "_static_is_int_dtyp": 26, "_static_is_uint_dtyp": 26, "_static_result_typ": 26, "static_result_typ": 26, "broadcats": [26, 109], "_containerwithdevic": [27, 46], "_static_dev": 27, "static_dev": 27, "_static_to_devic": 27, "static_to_devic": 27, "contaion": [27, 155], "_containerwithelementwis": [28, 46], "_static_ab": 28, "static_ab": 28, "_static_aco": 28, "static_aco": 28, "_static_acosh": 28, "static_acosh": 28, "_static_add": 28, "static_add": [28, 547, 551, 552], "_static_asin": 28, "static_asin": 28, "524": [28, 179, 363], "412": [28, 33, 179, 363], "201": [28, 29, 179, 363], "_static_asinh": 28, "static_asinh": 28, "_static_atan": 28, "static_atan": 28, "_static_atan2": 28, "static_atan2": 28, "915": [28, 182, 363], "29": [28, 30, 31, 38, 182, 259, 260, 345, 349, 363, 365, 366, 482, 483, 484], "983": [28, 182, 363], "978": [28, 65, 182, 357, 363], "696": [28, 38, 182, 363, 483], "993": [28, 182, 363], "_static_atanh": 28, "static_atanh": 28, "203": [28, 37, 183, 373, 476], "_static_bitwise_and": 28, "static_bitwise_and": 28, "_static_bitwise_invert": 28, "static_bitwise_invert": 28, "_static_bitwise_left_shift": 28, "_static_bitwise_or": 28, "static_bitwise_or": 28, "_static_bitwise_right_shift": 28, "static_bitwise_right_shift": 28, "_static_bitwise_xor": 28, "static_bitwise_xor": 28, "_static_ceil": 28, "static_ceil": 28, "_static_co": 28, "static_co": 28, "_static_cosh": 28, "static_cosh": 28, "34": [28, 29, 30, 38, 124, 189, 192, 214, 232, 253, 259, 260, 361, 363, 365, 368, 374, 411, 483, 484], "_static_deg2rad": 28, "static_deg2rad": 28, "0262": [28, 193, 226, 363], "873": [28, 193, 226, 363], "_static_divid": 28, "static_divid": 28, "_static_equ": 28, "static_equ": 28, "_static_erf": 28, "static_erf": 28, "27632612": [28, 196], "934008": [28, 196], "99999928": [28, 196], "91903949": [28, 196], "_static_exp": 28, "static_exp": 28, "59814835": [28, 197], "4131622": [28, 197], "_static_expm1": 28, "thefunct": [28, 196], "areal": 28, "static_expm1": 28, "71828175": 28, "38905621": 28, "59815216": 28, "_static_floor": 28, "static_floor": 28, "_static_floor_divid": 28, "static_floor_divid": 28, "_static_great": 28, "static_great": 28, "_static_greater_equ": 28, "static_greater_equ": 28, "_static_isfinit": 28, "999999999999": [28, 204, 363], "static_isfinit": 28, "_static_isinf": 28, "static_isinf": 28, "_static_isnan": 28, "static_isnan": 28, "_static_isr": 28, "0j": [28, 29, 207, 363, 364], "23j": [28, 29], "9j": [28, 29], "static_isr": 28, "_static_less": 28, "static_less": 28, "_static_less_equ": 28, "static_less_equ": 28, "_static_log": 28, "static_log": 28, "_static_log10": 28, "static_log10": 28, "898": [28, 211, 363], "0414": [28, 211, 363], "_static_log1p": 28, "static_log1p": 28, "_static_log2": 28, "_static_logaddexp": 28, "static_logaddexp": 28, "_static_logical_and": 28, "static_logical_and": 28, "_static_logical_not": 28, "static_logical_not": 28, "_static_logical_or": 28, "static_logical_or": 28, "_static_logical_xor": 28, "static_logical_xor": 28, "_static_maximum": 28, "static_maximum": 28, "_static_minimum": 28, "static_minimum": 28, "_static_multipli": 28, "static_multipli": 28, "_static_neg": 28, "static_neg": 28, "_static_not_equ": 28, "static_not_equ": 28, "_static_posit": 28, "static_posit": 28, "_static_pow": 28, "static_pow": 28, "_static_rad2deg": 28, "static_rad2deg": 28, "5160": 28, "10300": [28, 226, 363], "15500": 28, "20600": 28, "2860": [28, 226], "_static_reciproc": 28, "recirpoc": [28, 227], "static_reciproc": 28, "_static_remaind": 28, "static_remaind": 28, "_static_round": 28, "thevfunct": 28, "300": [28, 30, 229, 267, 297, 363, 364, 365, 368, 407, 562], "527": [28, 229, 363], "static_round": 28, "301": [28, 229, 363], "_static_sign": 28, "static_sign": 28, "_static_sin": 28, "static_sin": 28, "757": [28, 231, 363], "959": [28, 198, 231, 363], "279": [28, 231, 254, 363, 364, 365], "_static_sinh": 28, "static_sinh": 28, "835": [28, 232], "347": [28, 232, 553], "721": [28, 232], "_static_sqrt": 28, "93": [28, 30, 38, 156, 233, 259, 260, 362, 365, 483, 484], "static_sqrt": 28, "_static_squar": 28, "static_squar": 28, "_static_subtract": 28, "static_subtract": 28, "_static_tan": 28, "static_tan": [28, 547, 551], "143": [28, 46, 236, 363, 551], "_static_tanh": 28, "static_tanh": 28, "995": [28, 237, 363], "9999": 28, "_static_trapz": 28, "static_trapz": 28, "_static_trunc": 28, "static_trunc": 28, "_static_trunc_divid": 28, "644": [28, 179, 363, 570], "305": [28, 29, 33, 179, 363, 364, 394], "351": [28, 193, 226, 363], "00613": [28, 193], "0154": [28, 193], "403": [28, 197], "428772": [28, 197], "649": [28, 198], "220": [28, 198], "865": [28, 198], "metho": [28, 203, 213], "7j": [28, 29, 207, 363, 364], "956": [28, 212], "nuner": [28, 221], "65": [28, 31, 38, 188, 221, 282, 343, 363, 364, 365, 366, 368, 378, 414, 483, 484, 502], "413": [28, 226, 553], "_containerwithactivationexperiment": [29, 46], "contan": 29, "19722462": 29, "84729779": 29, "31326163": 29, "46328258": 29, "51301527": 29, "79813886": 29, "22856998": 29, "42028043": 29, "31868932": 29, "static_batch_norm": 29, "static_logit": 29, "static_logsigmoid": 29, "34115386": 29, "64439666": 29, "24115384": 29, "55435526": 29, "07888974": 29, "00741899": 29, "26328245": 29, "00012302": 29, "static_prelu": 29, "static_relu6": 29, "static_selu": 29, "static_thresholded_relu": 29, "_containerwithconversionexperiment": [29, 46], "_containerwithcreationexperiment": [29, 46], "hamming_window": [29, 364], "period": [29, 364, 541, 563], "coeffici": [29, 364, 368, 418], "ham": [29, 364], "8000": [29, 364], "2000": [29, 364], "4180": 29, "8180": 29, "hann_window": [29, 364], "hann": [29, 364], "7500": 29, "3455": 29, "9045": 29, "kaiser_bessel_derived_window": [29, 364], "suitabl": [29, 364, 377, 497, 540, 541, 547, 563, 580], "spectral": [29, 364], "analysi": [29, 364, 580, 581], "design": [29, 364, 530, 532, 533, 542, 546, 548, 549, 559, 560, 561, 564, 566, 568, 574, 576, 578, 580, 583, 584, 585], "kaiser": [29, 364], "70710677": [29, 364], "18493208": [29, 364], "9827513": [29, 364], "kaiser_window": [29, 364], "static_kaiser_window": 29, "2049": 29, "8712": 29, "0367": [29, 364], "7753": 29, "static_eye_lik": 29, "static_hamming_window": 29, "static_hann_window": 29, "window_length": [29, 364], "static_hann": 29, "static_kaiser_bessel_derived_window": 29, "static_tril_indic": 29, "static_triu_indic": 29, "static_vorbis_window": 29, "vorbis_window": [29, 364], "vorbi": [29, 364], "38268343": 29, "92387953": 29, "14943586": [29, 364], "51644717": 29, "85631905": 29, "98877142": 29, "tril_indic": [29, 364], "triu_indic": [29, 364], "_containerwithdata_typeexperiment": [29, 46], "_containerwithdeviceexperiment": [29, 46], "_containerwithelementwiseexperiment": [29, 46], "0003": [29, 368, 407], "0006": 29, "75j": 29, "01317055": 29, "05634501": 29, "115": [29, 193, 226, 363, 364], "3461759": 29, "524111": 29, "335": 29, "345j": 29, "2345j": 29, "mantissa": [29, 364], "frist": [29, 364], "coord": 29, "6055": 29, "1080": 29, "1550": 29, "130": 29, "160": 29, "10240": 29, "08746284": 29, "32192809": 29, "000": 29, "took": 29, "0707": [29, 364], "0579": [29, 364], "static_allclos": 29, "static_angl": 29, "static_binar": 29, "static_conj": 29, "static_copysign": 29, "static_count_nonzero": 29, "static_diff": 29, "static_exp2": 29, "static_fix": 29, "static_float_pow": 29, "static_fmax": 29, "static_fmin": 29, "static_fmod": 29, "static_frexp": 29, "static_gcd": 29, "static_gradi": 29, "static_hypot": 29, "static_imag": 29, "static_isclos": 29, "static_lcm": 29, "static_ldexp": 29, "static_logaddexp2": 29, "static_nan_to_num": 29, "static_nansum": 29, "static_nextaft": 29, "static_r": 29, "static_signbit": 29, "static_sinc": 29, "636": 29, "090": 29, "070": 29, "057": 29, "static_xlogi": 29, "static_zeta": 29, "0244": 29, "_containerwithgeneralexperiment": [29, 46], "static_isin": 29, "_containerwithgradientsexperiment": [29, 46], "_containerwithimageexperiment": [29, 46], "_containerwithlayersexperiment": [29, 46], "673": 29, "0507": 29, "static_adaptive_avg_pool1d": 29, "static_adaptive_avg_pool2d": 29, "static_avg_pool1d": 29, "static_avg_pool2d": 29, "static_avg_pool3d": 29, "static_dct": 29, "132": 29, "182": 29, "242": 29, "253": [29, 232, 363], "515": [29, 374, 483], "467": 29, "static_dft": 29, "static_embed": 29, "static_fft": 29, "static_ifft": 29, "static_interpol": 29, "static_max_pool1d": 29, "static_max_pool2d": 29, "max_pool2dd": 29, "static_max_pool3d": 29, "_containerwithlinearalgebraexperiment": [29, 46], "933034": [29, 364], "eigenvealu": [29, 403], "xx": [29, 403], "37228107": [29, 403], "3722816": [29, 403], "8245648": [29, 403], "41597357": [29, 403], "56576747": [29, 403], "9093767": [29, 403], "56155": [29, 364], "82842": [29, 364], "450": 29, "static_adjoint": 29, "static_cond": 29, "static_diagflat": 29, "static_eig": 29, "static_eigh_tridiagon": 29, "static_eigv": 29, "static_kron": 29, "kroneck": [29, 364], "static_matrix_exp": 29, "static_multi_dot": 29, "regular": [29, 364, 368, 408, 540, 541, 560, 580], "_containerwithlossesexperiment": [29, 46], "binary_cross_entropy_with_logit": [29, 364, 548], "pos_weight": [29, 364], "027": [29, 364], "263": [29, 255, 364, 365], "953": [29, 364], "static_binary_cross_entropy_with_logit": 29, "_containerwithmanipulationexperiment": [29, 46], "atleast": [29, 364], "ary1": [29, 364], "ary2": [29, 364], "3d": [29, 52, 364, 556, 564, 573], "broadcast_shap": [29, 364], "30192195": 29, "static_atleast_1d": 29, "static_atleast_2d": 29, "static_atleast_3d": 29, "static_broadcast_shap": 29, "static_dsplit": 29, "static_dstack": 29, "static_expand": 29, "static_flatten": 29, "static_fliplr": 29, "static_flipud": 29, "static_heavisid": 29, "static_hsplit": 29, "static_hstack": 29, "static_i0": 29, "static_moveaxi": 29, "static_pad": 29, "static_rot90": 29, "static_take_along_axi": 29, "static_top_k": 29, "static_vsplit": 29, "static_vstack": 29, "_containerwithnormsexperiment": [29, 46], "static_instance_norm": 29, "68283635": 29, "25858182": 29, "14645457": 29, "20709086": 29, "59998751": 29, "10000312": 29, "20000625": 29, "19997501": 29, "25000787": 29, "49996877": 29, "35001087": 29, "09995651": 29, "30002821": 29, "79988766": 29, "17999999": 29, "46000001": 29, "45999998": 29, "static_l2_norm": 29, "16903085": 29, "50709254": 29, "84515423": 29, "44183609": 29, "56807494": 29, "69431382": 29, "89442718": 29, "44721359": 29, "static_lp_norm": 29, "12500000": 29, "37500000": 29, "62500000": 29, "27500000": 29, "35000000": 29, "42500000": 29, "0000000": 29, "5000000": 29, "2500000": 29, "_containerwithrandomexperiment": [29, 46], "43643127": 29, "32325703": 29, "24031169": 29, "34251311": 29, "31692529": 29, "3405616": 29, "5319725": 29, "22458365": 29, "24344385": 29, "26588406": 29, "61075421": 29, "12336174": 29, "51142915": 29, "25041268": 29, "23815817": 29, "64042903": 29, "25763214": 29, "10193883": 29, "31624692": 29, "46567987": 29, "21807321": 29, "37677699": 29, "39914594": 29, "22407707": 29, "static_bernoulli": 29, "static_beta": 29, "static_dirichlet": 29, "static_poisson": 29, "_containerwithsearchingexperiment": [29, 46], "static_unravel_index": 29, "_containerwithsetexperiment": [29, 46], "_containerwithsortingexperiment": [29, 46], "static_lexsort": 29, "static_msort": 29, "_containerwithstatisticalexperiment": [29, 46], "static_bincount": 29, "static_corrcoef": 29, "static_median": 29, "static_nanmean": 29, "static_nanmedian": 29, "static_quantil": 29, "_containerwithutilityexperiment": [29, 46], "_containerwithgener": [30, 46], "_static_all_equ": 30, "static_all_equ": 30, "_static_array_equ": 30, "x0": [30, 251, 365, 551], "level": [30, 50, 251, 530, 534, 535, 539, 541, 547, 553, 556, 558, 560, 564, 565, 566, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587], "a0": [30, 251], "static_array_equ": 30, "_static_assert_supports_inplac": 30, "_static_clip_matrix_norm": 30, "static_clip_matrix_norm": 30, "849": [30, 254, 255, 365], "_static_clip_vector_norm": 30, "static_clip_vector_norm": 30, "_static_einops_rearrang": 30, "static_einops_rearrang": 30, "_static_einops_reduc": 30, "static_einops_reduc": 30, "29333329": [30, 260, 365], "53000069": [30, 260, 365], "39666676": [30, 260, 365], "20666695": [30, 260, 365], "_static_einops_repeat": 30, "static_einops_repeat": 30, "_static_fourier_encod": 30, "static_fourier_encod": 30, "classivi": [30, 36, 263, 370, 376, 442, 446, 493], "89858720e": [30, 263], "79717439e": [30, 263], "_static_gath": 30, "static_gath": 30, "_static_gather_nd": 30, "200": [30, 188, 267, 297, 363, 364, 365, 569], "400": [30, 267, 297, 364, 365, 368, 407, 548], "500": [30, 267, 364, 365], "static_gather_nd": 30, "_static_get_num_dim": 30, "static_get_num_dim": 30, "_static_has_nan": 30, "well": [30, 280, 365, 368, 418, 530, 537, 541, 546, 548, 549, 553, 559, 560, 561, 562, 570, 571, 573, 579, 580, 581, 585], "leafwis": 30, "static_has_nan": 30, "_static_inplace_decr": 30, "_static_inplace_incr": 30, "_static_inplace_upd": 30, "_static_is_arrai": 30, "static_is_arrai": 30, "_static_is_ivy_arrai": 30, "static_is_ivy_arrai": 30, "_static_is_native_arrai": 30, "static_is_native_arrai": 30, "_static_scatter_flat": 30, "ref": [30, 34, 208, 221, 223, 228, 235, 363, 370, 444, 552], "_static_scatter_nd": 30, "70": [30, 267, 297, 364, 368, 378, 414, 502, 533], "static_scatter_nd": 30, "_static_stable_divid": 30, "22222222": 30, "11111111": 30, "857": [30, 309, 365], "444": 30, "_static_stable_pow": 30, "_static_supports_inplace_upd": 30, "_static_to_list": 30, "static_to_list": 30, "_static_to_numpi": 30, "static_to_numpi": 30, "_static_to_scalar": 30, "static_to_scalar": 30, "_static_value_is_nan": 30, "452": 30, "static_value_is_nan": 30, "833": [30, 255], "600": [30, 267, 364, 548], "700": [30, 267], "425": [30, 324], "_containerwithgradi": [31, 46], "_static_stop_gradi": 31, "static_stop_gradi": 31, "87": [31, 188, 212, 343, 363, 366], "976": [31, 237, 343, 363, 366], "49e": [31, 343, 366], "74e": [31, 343, 366], "95e": [31, 343, 366], "024": [31, 343, 364, 366], "096": [31, 193, 343, 363, 366], "216": [31, 34, 343, 366, 424], "384": [31, 343, 366], "626": [31, 343, 366], "en": [31, 343, 344, 366, 368, 427, 548], "wikipedia": [31, 343, 344, 366, 368, 427], "wiki": [31, 343, 344, 366, 368, 427], "stochastic_gradient_desc": [31, 343, 344, 366], "01099": [31, 344], "01003": [31, 344, 366], "01015": [31, 344, 366], "99936122": [31, 344, 366], "99936116": [31, 344, 366], "99936128": [31, 344, 366], "99936104": [31, 344, 366], "w_new": [31, 347, 366], "88": [31, 38, 61, 189, 347, 357, 363, 366, 368, 374, 378, 414, 420, 484, 502], "708": [31, 349, 366], "445": [31, 349, 366], "6e": [31, 349, 366], "00036": [31, 349, 366], "00016": [31, 349, 366], "00049": [31, 349, 366], "layerwis": [31, 350, 366], "_containerwithimag": [32, 46], "_containerwithlay": [33, 46], "_static_conv1d": 33, "static_conv1d": 33, "_static_conv1d_transpos": 33, "static_conv1d_transpos": 33, "112": [33, 368, 378, 385, 414, 502], "_static_conv2d": 33, "static_conv2d": 33, "_static_conv2d_transpos": 33, "static_conv2d_transpos": 33, "_static_conv3d": 33, "fdfh": [33, 388], "static_conv3d": 33, "_static_conv3d_transpos": 33, "static_conv3d_transpos": 33, "_static_depthwise_conv2d": 33, "inp": [33, 367, 392], "static_depthwise_conv2d": 33, "_static_dropout": 33, "static_dropout": 33, "_static_dropout1d": 33, "static_dropout1d": 33, "_static_dropout3d": 33, "_static_linear": 33, "278": [33, 367, 393, 394], "105": [33, 367, 368, 369, 393, 394, 414, 429], "static_linear": 33, "352": [33, 367, 394], "195": [33, 394], "_static_lstm_upd": 33, "_static_multi_head_attent": 33, "_static_scaled_dot_product_attent": 33, "static_scaled_dot_product_attent": 33, "_containerwithlinearalgebra": [34, 46], "_static_choleski": 34, "static_choleski": 34, "577": [34, 368, 398], "707": [34, 368, 398], "static_rol": [34, 36, 547, 551], "_static_cross": 34, "static_cross": 34, "_static_det": 34, "_static_diag": 34, "_static_diagon": 34, "static_diagon": 34, "_static_eigh": 34, "_static_eigvalsh": 34, "static_eigvalsh": 34, "51572949": [34, 368, 405], "17091519": [34, 368, 405], "3448143": [34, 368, 405], "88178420e": [34, 368, 405], "35898387e": [34, 368, 405], "46410179e": [34, 368, 405], "_static_inn": 34, "_static_inv": 34, "static_inv": [34, 368, 407], "_static_matmul": 34, "matul": 34, "static_matmul": 34, "_static_matrix_norm": 34, "deimens": 34, "static_matrix_norm": 34, "_static_matrix_pow": 34, "_static_matrix_rank": 34, "static_matrix_rank": 34, "_static_matrix_transpos": 34, "static_matrix_transpos": 34, "_static_out": 34, "n1": [34, 88, 360], "n2": [34, 88, 360], "static_out": [34, 414], "_static_pinv": 34, "static_pinv": 34, "_static_qr": 34, "_static_slogdet": 34, "static_slogdet": 34, "0986123": [34, 368, 417], "_static_solv": 34, "_static_svd": 34, "static_svd": 34, "au": [34, 419], "aS": [34, 419], "avh": [34, 419], "bu": [34, 419, 533], "bvh": [34, 419], "_static_svdv": 34, "_static_tensordot": 34, "_static_tensorsolv": 34, "_static_trac": 34, "static_trac": 34, "_static_vand": 34, "static_vand": 34, "343": [34, 229, 363, 424], "512": [34, 367, 385, 424, 530], "729": [34, 424, 570], "_static_vecdot": 34, "_static_vector_norm": 34, "static_vector_norm": 34, "77359247": [34, 426], "_static_vector_to_skew_symmetric_matrix": 34, "99999988": [34, 415], "_containerwithloss": [35, 46], "_static_binary_cross_entropi": 35, "static_binary_cross_entropi": 35, "511": [35, 369, 429, 431], "_static_cross_entropi": 35, "static_cross_entropi": 35, "20397282": 35, "83258148": 35, "60943794": 35, "_static_sparse_cross_entropi": 35, "static_sparse_cross_entropi": 35, "5108256": [35, 430], "609438": [35, 368, 417, 430], "_containerwithmanipul": [36, 46], "_static_clip": 36, "static_clip": 36, "_static_concat": 36, "_static_constant_pad": 36, "static_constant_pad": 36, "_static_expand_dim": 36, "static_expand_dim": 36, "container_axi": [36, 370, 436], "_static_flip": 36, "static_flip": 36, "_static_permute_dim": 36, "static_permute_dim": 36, "_static_repeat": 36, "static_repeat": 36, "_static_reshap": 36, "static_reshap": 36, "_static_rol": 36, "positivclip": 36, "_static_split": 36, "static_split": 36, "_static_squeez": 36, "static_squeez": 36, "_static_stack": 36, "leavv": 36, "static_stack": 36, "_static_swapax": 36, "_static_til": 36, "static_til": 36, "_static_unstack": 36, "static_unstack": 36, "_static_zero_pad": 36, "repreat": [36, 439], "_containerwithnorm": [37, 46], "342": [37, 373, 476], "0427": [37, 373, 476], "299": [37, 373, 476], "241": [37, 476], "_containerwithrandom": [38, 46], "_static_multinomi": 38, "_static_randint": 38, "static_randint": 38, "_static_random_norm": 38, "static_random_norm": 38, "651": 38, "_static_random_uniform": 38, "static_random_uniform": 38, "481": 38, "0999": 38, "_static_shuffl": 38, "static_shuffl": 38, "431": [38, 483], "83": [38, 233, 363, 364, 367, 394, 483], "274": [38, 483], "91": [38, 189, 363, 367, 368, 374, 378, 394, 414, 483, 502], "_containerwithsearch": [39, 46], "_static_argmax": 39, "static_argmax": 39, "_static_argmin": 39, "static_argmin": 39, "_static_argwher": 39, "static_argwher": 39, "_static_nonzero": 39, "_static_wher": 39, "static_wher": 39, "_containerwithset": [40, 46], "_static_unique_al": 40, "static_unique_al": [40, 492], "_static_unique_count": 40, "static_unique_count": 40, "_static_unique_invers": 40, "static_unique_invers": 40, "_static_unique_valu": 40, "them": [40, 253, 295, 365, 495, 530, 531, 532, 533, 534, 537, 539, 541, 543, 544, 545, 546, 547, 548, 553, 557, 559, 560, 561, 562, 566, 568, 569, 570, 574, 575, 577, 578, 580, 582, 586], "_containerwithsort": [41, 46], "_static_argsort": 41, "static_argsort": 41, "_static_searchsort": 41, "_static_sort": 41, "static_sort": 41, "_containerwithstatist": [42, 46], "_static_cumprod": 42, "static_cumprod": 42, "_static_cumsum": 42, "static_cumsum": 42, "_static_prod": 42, "static_prod": 42, "11000001": [42, 506], "23100001": [42, 506], "30800003": [42, 378, 506], "_static_sum": 42, "_static_var": 42, "static_var": 42, "12666667": [42, 378, 509], "11555555": [42, 378, 509], "60000002": [42, 46, 504], "respectv": [42, 507], "81649649": [42, 507], "94280904": [42, 507], "509902": [42, 378, 507], "2472192": [42, 507], "44948983": [42, 507], "41421354": [42, 507], "contian": [42, 509], "6666667": [42, 509], "_containerwithutil": [43, 46], "_static_al": 43, "static_al": 43, "_static_ani": 43, "static_ani": 43, "add_ivy_container_instance_method": 44, "containerexampl": 44, "__abs__": [45, 46], "__add__": [45, 46, 544, 547, 551, 552, 555, 560, 561, 568], "__eq__": [45, 46], "__ge__": [45, 46], "__gt__": [45, 46, 564], "__le__": [45, 46], "__lt__": [45, 46], "__ne__": [45, 46], "__pow__": [45, 46, 568], "69678056": 45, "59876156": 45, "82660675": 45, "__radd__": [45, 46, 551, 552, 560], "__rrshift__": [45, 46], "__rshift__": [45, 46], "__rsub__": [45, 46], "__sub__": [45, 46, 544, 547, 551, 555, 568], "__truediv__": [45, 46, 544, 547, 551], "__xor__": [45, 46], "hardwar": [45, 513, 533, 540, 564, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586], "resid": [45, 370, 436, 513, 546, 560, 566, 570], "mt": [45, 568], "hopefulli": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 532, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573], "overview": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 546, 548, 562, 565, 573], "submodul": [45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 539, 540, 541, 543, 546, 548, 550, 556, 557, 562, 565, 566, 570, 575], "question": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "pleas": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "feel": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "free": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 536, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "reach": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 469, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "discord": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 530, 532, 533, 534, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "forum": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "eq": 46, "insid": [46, 364, 517, 540, 541, 544, 547, 549, 557, 562, 563, 586], "ge": 46, "gt": [46, 561, 566], "le": 46, "lt": 46, "ne": 46, "75979435": 46, "52153397": 46, "13532257": 46, "rshift": 46, "truediv": 46, "66666669": [46, 345, 366], "neural": [48, 52, 367, 530, 573, 576, 578, 579, 580, 584, 586, 587], "network": [48, 50, 51, 52, 53, 367, 394, 530, 533, 547, 556, 566, 570, 573, 576, 578, 579, 580, 584, 586, 587], "geglu": 48, "leakyrelu": 48, "logsoftmax": 48, "moduleconvert": [49, 53], "from_haiku_modul": 49, "native_modul": 49, "params_hk": 49, "rng_seed": 49, "constructor_arg": 49, "constructor_kwarg": 49, "instance_arg": 49, "instance_kwarg": 49, "haiku": [49, 530, 534, 571, 580], "trainabl": [49, 53, 56, 530, 552, 567, 569, 570], "from_keras_modul": 49, "kera": [49, 530, 534, 586], "from_torch_modul": 49, "dedic": [49, 555, 568, 570], "to_ivy_modul": [49, 571], "native_module_class": 49, "modulehelp": [50, 53], "check_submod_ret": 50, "user": [50, 52, 53, 58, 60, 357, 364, 530, 532, 533, 536, 540, 541, 542, 544, 545, 547, 548, 549, 553, 557, 558, 559, 560, 562, 564, 565, 566, 574, 578, 580, 586, 587], "expected_submod_ret": [50, 53], "get_mod_kei": 50, "top_mod": 50, "explicit": [50, 540, 547, 549, 558, 559, 560, 561, 566, 574, 580], "mod_depth": 50, "mod_height": 50, "mod_with_top_mod_key_chain": 50, "flatten_key_chain": 50, "end": [50, 73, 182, 360, 363, 364, 530, 540, 541, 545, 548, 559, 563, 564, 565, 573, 574, 578, 583], "iimedi": 50, "parent": [50, 356, 366, 539, 548, 568], "show_mod_in_top_mod": 50, "upper_depth": 50, "lower_depth": 50, "show": [50, 278, 299, 305, 323, 365, 530, 539, 540, 541, 548, 551, 559, 560, 562, 573, 574, 580], "coverag": [50, 549, 562], "prompt": [50, 541], "show_structur": 50, "this_repr": 50, "show_v_in_top_v": 50, "perspect": 50, "top_v": 50, "sub_mod": 50, "show_v": 50, "comopos": 50, "begin": [50, 364, 372, 457, 468, 540, 543, 561], "enumer": [50, 530], "track_submod_call_ord": [50, 53], "track_submod_ret": [50, 53], "v_with_top_v_key_chain": 50, "create_vari": [51, 570], "var_shap": [51, 570], "fan_out": [51, 570], "fan_in": [51, 570], "rectangular": 51, "firstlayersiren": 51, "siren": 51, "distribt": 51, "glorotuniform": [51, 52, 570], "glorot": 51, "known": [51, 543, 548, 549, 560, 562], "xavier": 51, "neuron": 51, "w_1x_1": 51, "w_2x_2": 51, "w_nx_n": 51, "w_i": 51, "To": [51, 303, 365, 536, 540, 543, 544, 546, 547, 549, 551, 553, 554, 556, 560, 561, 562, 563, 569, 570, 571], "vanish": 51, "too": [51, 178, 363, 539, 540, 541, 543, 549, 553, 554, 574], "explod": [51, 531, 532], "big": [51, 535, 574, 580], "pick": 51, "carefulli": [51, 560, 578, 583], "abstract": [51, 55, 362, 532, 547, 549, 560, 562, 564, 570, 574, 578, 580, 582, 583, 587], "kaimingnorm": 51, "fan_mod": [51, 570], "kaim": 51, "he": 51, "distibut": 51, "center": 51, "negative_slop": 51, "fan": 51, "propog": 51, "fan_sum": [51, 570], "much": [51, 364, 533, 539, 540, 541, 544, 547, 549, 559, 560, 561, 563, 566, 568, 569, 578, 580, 586, 587], "proport": 51, "Ones": 51, "init": [51, 530, 543, 571], "w0": 51, "gain": [51, 541, 543, 565, 570, 580], "wlim": 51, "help": [51, 249, 365, 378, 508, 530, 535, 536, 537, 539, 540, 544, 545, 547, 548, 549, 551, 557, 560, 562, 563, 564, 568, 569, 570, 572, 575, 576, 580, 582, 586], "issu": [51, 534, 535, 538, 539, 540, 543, 545, 548, 549, 551, 553, 560, 562, 563, 566, 570, 574], "intend": [51, 378, 508, 517, 543, 555, 558, 578, 580, 584, 585], "predefin": 51, "initialz": 51, "fan_avg": 51, "input_channel": [52, 530, 566, 570], "output_channel": [52, 530, 570], "filter_s": 52, "weight_initi": [52, 570], "bias_initi": [52, 570], "construct": [52, 54, 55, 56, 370, 446, 566, 570, 571, 578, 580, 587], "conv1dtranspos": 52, "filter_shap": 52, "conv2dtranspos": 52, "conv3dtranspos": 52, "depthwiseconv2d": 52, "num_channel": 52, "depthwis": [52, 367, 392], "randomli": [52, 364, 367, 393, 521], "bernoul": 52, "lstm": [52, 367, 395, 566, 580], "num_lay": 52, "return_sequ": 52, "return_st": 52, "get_initial_st": 52, "explicitli": [52, 53, 368, 404, 405, 516, 543, 544, 545, 547, 549, 552, 553, 556, 557, 558, 559, 561, 562, 566, 574, 580], "with_bia": [52, 530, 570], "dens": [52, 530], "connect": [52, 533, 540, 570, 571, 578], "receiv": [52, 250, 292, 365, 371, 454, 455, 541, 549, 550, 562, 564], "term": [52, 367, 395, 530, 532, 541, 547, 566, 575, 580], "multiheadattent": 52, "query_dim": [52, 367, 396], "head_dim": [52, 367, 396], "dropout_r": 52, "context_dim": 52, "with_to_q_fn": 52, "with_to_kv_fn": 52, "with_to_out_fn": 52, "build_mod": [52, 53], "on_init": [52, 53], "multi": [52, 367, 368, 396, 399, 530, 551, 565, 574, 576, 578, 580, 584], "head": [52, 367, 396, 530, 538, 540, 560], "similar": [52, 228, 363, 367, 396, 532, 539, 540, 547, 549, 550, 553, 556, 557, 558, 560, 561, 562, 563, 569, 574, 576, 577, 578, 579, 586], "measur": [52, 367, 396], "built": [52, 53, 73, 360, 530, 540, 541, 546, 547, 562, 567, 575, 579, 580, 584], "now": [52, 53, 82, 92, 96, 360, 530, 534, 540, 543, 544, 545, 546, 547, 548, 549, 554, 555, 557, 560, 561, 562, 563, 564, 568, 569, 571, 573, 574, 580], "__call__": [52, 53, 516, 530], "compile_on_next_step": [53, 55, 250, 365, 570], "store_var": 53, "arg_stateful_idx": 53, "kwarg_stateful_idx": 53, "fallback_to_non_compil": [53, 55], "with_partial_v": 53, "with_grad": [53, 352, 354, 366], "submod_depth": 53, "submods_to_track": 53, "varibl": 53, "temporarili": [53, 543, 563], "compil": [53, 55, 516, 521, 530, 547, 560, 563, 564, 565, 567, 574, 575, 576, 579, 580, 581, 584, 587], "id": [53, 154, 362, 530, 536, 538, 540, 544, 546, 547, 554, 558], "fall": [53, 55, 539, 541, 549, 565], "from_cal": 53, "denot": [53, 182, 352, 356, 363, 366], "trigger": [53, 539], "successfulli": [53, 540, 544, 554], "built_": 53, "compile_kwarg": 53, "_unified_ivy_graph": 53, "_call": 53, "target": [53, 153, 362, 530, 540, 542, 561, 563, 565, 569, 570, 571, 576, 578, 579, 580, 583, 585, 586], "save_weight": 53, "weights_path": 53, "show_graph": 53, "randomness_factor": 53, "save_to_disk": 53, "with_edge_label": 53, "with_arg_label": 53, "with_output_label": 53, "output_connected_onli": 53, "include_gener": 53, "array_cach": 53, "highlight_subgraph": 53, "fname": [53, 569], "return_graph": 53, "layernorm": 54, "normalized_shap": 54, "elementwise_affin": 54, "mini": [54, 373, 476], "trail": 54, "pytorch": [55, 229, 363, 530, 533, 534, 538, 539, 544, 549, 550, 553, 555, 556, 559, 560, 561, 563, 564, 566, 571, 574, 575, 581, 583, 584, 586, 587], "set_stat": [55, 570], "init_on_first_step": 55, "grad": [55, 343, 366, 530, 558, 569, 570, 571], "ignore_miss": 55, "overridden": [55, 544], "privat": [55, 560, 562], "_step": [55, 570], "miss": [55, 539, 540, 544, 547, 548, 551, 554, 562, 564], "sgd": [55, 580], "stochast": [55, 580], "sub_modul": 56, "custom_object": [58, 60, 357], "identifi": [58, 60, 357, 543, 548, 562, 564], "xxxxxxxxxxxxxx": [58, 60, 357], "custom_fn": [58, 60, 357], "lambda": [58, 60, 258, 345, 346, 348, 355, 357, 365, 366, 367, 372, 396, 464, 465, 539, 553, 556, 557, 558, 561, 564, 566, 569], "24000001": [61, 357], "703": [62, 357], "683": [62, 357], "408": [62, 357], "313": [62, 357], "437": [62, 357], "40337825": [63, 357], "56114835": [63, 357], "20788449": [63, 357], "214": [65, 357], "891": [65, 357], "846": [65, 357], "985": [65, 357], "0768": [66, 193, 357, 363], "231": [66, 357], "body_fn": [68, 69, 70, 71, 359], "orelse_fn": [68, 70, 359], "test_fn": [69, 71, 359, 517, 530], "chosen": [73, 182, 360, 363, 375, 491, 539, 548, 560], "ml_framework": [73, 360], "distanc": [73, 360], "adjac": [73, 360], "obj": [74, 75, 360], "nestedsequ": [74, 75, 360], "typevar": [74, 75, 360], "supportsbufferprotocol": [74, 75, 360], "static_copy_arrai": [79, 360], "intdtyp": [82, 92, 96, 117, 128, 132, 139, 145, 360, 361], "suppos": [82, 259, 360, 365, 562], "numrow": [82, 360], "numcolumn": [82, 360], "anoth": [83, 109, 111, 360, 361, 530, 533, 539, 540, 541, 546, 547, 549, 553, 556, 557, 559, 560, 562, 564, 566, 568, 571, 575, 580, 586], "interchang": [83, 360, 370, 445], "33333337": [86, 345, 360, 366], "66666663": [86, 360], "gpu": [86, 154, 156, 157, 160, 162, 164, 166, 167, 168, 171, 173, 174, 360, 362, 530, 541, 550, 568, 578, 580, 583, 584, 585], "41588834": [87, 360], "7827941": [87, 360], "6227766": [87, 360], "23413252": [87, 360], "n3": [88, 360], "nn": [88, 360, 530, 556, 561, 564, 571, 581], "similarli": [88, 360, 364, 545, 549, 560, 564, 568, 586], "xv": [88, 360], "yv": [88, 360], "x_nativ": [89, 360, 559], "y_nativ": [89, 360], "z_nativ": [89, 360], "locat": [90, 360, 374, 377, 481, 497, 539, 541, 545, 546, 550, 560, 561, 562, 563, 578], "d_type": [91, 360], "__new__": [91, 360], "y1": [92, 96, 360, 364], "y2": [92, 96, 360], "y3": [92, 96, 360], "incompat": [110, 361], "data_type_funct": [111, 361], "uint8": [111, 118, 122, 132, 135, 140, 146, 361, 549, 562], "helper": [112, 361, 514, 515, 516, 517, 519, 520, 530, 539, 546, 549, 553, 569, 575], "closest": [113, 190, 199, 200, 229, 238, 361, 363, 562, 564], "xtype": [113, 361], "ytype": [113, 361], "native_uint16": [113, 361], "complexdtyp": [114, 128, 136, 361], "set_default_complex_dtyp": [114, 142, 361], "complex128": [114, 128, 136, 142, 361], "4294": [114, 116, 361], "967346": [114, 116, 361], "floatdtyp": [116, 138, 361], "set_default_float_dtyp": [116, 125, 136, 144, 361, 549], "int_dtyp": [117, 139, 361], "set_default_int_dtyp": [117, 125, 145, 361, 549], "4294967346": [117, 118, 361], "uint_dtyp": [118, 140, 361], "uint": [118, 132, 140, 146, 361, 549, 561], "uintdtyp": [118, 132, 140, 146, 361], "set_default_uint_dtyp": [118, 125, 146, 361], "native_bool": [120, 361], "followng": [121, 361], "ieee": [121, 178, 198, 212, 228, 233, 358, 361, 363, 533], "754": [121, 178, 198, 212, 228, 233, 358, 361, 363, 533], "smallest_norm": [121, 361], "bfloat16": [122, 361, 549, 560, 562, 563], "unsupport": [123, 158, 264, 265, 361, 362, 365, 514, 517, 540, 554, 560], "encapsul": [124, 361, 548], "314": [124, 361, 364], "9223372036854775808": [124, 361], "9223372036854775807": [124, 361], "65535": [124, 361], "4294967295": [124, 361], "un": [126, 361, 566], "native_uint8": [126, 361], "type1": [133, 361], "type2": [133, 361], "array_api_promot": [133, 134, 361], "unexpect": [134, 361, 549], "default_complex_dtyp": [136, 361], "default_dtype_stack": [137, 143, 361], "unset_default_dtyp": [137, 361], "native_uint64": [137, 361], "default_float_dtyp": [138, 361, 549], "default_int_dtyp": [139, 145, 361, 549], "default_uint_dtyp": [140, 146, 361], "ret1": [141, 361], "ret2": [141, 361], "reset": [142, 143, 144, 145, 146, 173, 318, 319, 320, 321, 322, 323, 361, 362, 365], "default_complex_dtype_stack": [142, 361], "set_default_dtyp": [143, 361, 549, 556], "default_float_dtype_stack": [144, 361], "native_float16": [147, 361], "unmodifi": [152, 362, 545, 549], "tpu": [152, 167, 172, 362, 550, 580, 583], "clear": [153, 362, 530, 532, 533, 534, 539, 541, 545, 549, 550, 551, 560, 564, 566, 568, 580], "cach": [153, 253, 362, 365, 556, 562], "aliv": [159, 163, 165, 268, 294, 295, 362, 365, 550], "139740789224448": [159, 362], "core": [161, 362, 530, 532, 539, 540, 550, 562, 571, 578, 579, 580, 581, 585, 587], "physic": [161, 362], "default_devic": [163, 166, 167, 173, 362, 550, 553], "process_specif": [164, 174, 362], "percentag": [164, 362], "ram": [164, 171, 174, 362], "process": [164, 174, 362, 533, 534, 535, 540, 541, 547, 548, 556, 558, 560, 561, 562, 564, 566, 571, 578, 579, 580, 583, 584, 586, 587], "alon": [164, 174, 362, 530, 536, 562], "036902561555": [164, 362], "7024003467681645": [164, 362], "as_native_dev": [164, 362], "7095597456708771": [164, 362], "attr_onli": [165, 362], "chunk": [167, 168, 169, 362], "codebas": [167, 168, 362, 534, 535, 542, 549, 559, 560, 562, 563, 565], "split_factor": [167, 362, 553], "max_chunk_s": [169, 362], "chunk_siz": [169, 362], "input_ax": [169, 362], "output_ax": [169, 362], "feed": [169, 362, 580, 581], "usag": [169, 362, 533, 549, 562, 566, 574, 583], "fed": [169, 362, 570], "fist": [169, 362], "gb": [171, 174, 362, 540], "66700032": [171, 362], "589934592": [171, 362], "set_default_devic": [173, 362, 550], "219563008": [174, 362], "902400346": [174, 362], "525205504": [174, 362], "magnitud": [175, 178, 363, 368, 419, 420], "particular": [175, 216, 363, 540, 541, 543, 545, 548, 549, 551, 557, 559, 560, 562, 563, 564, 576, 580, 586], "princip": [176, 179, 181, 363, 364], "domain": [176, 177, 179, 180, 181, 182, 191, 192, 197, 198, 210, 211, 213, 231, 232, 233, 236, 237, 363, 364, 552, 578, 580], "codomain": [176, 177, 179, 180, 181, 182, 191, 192, 197, 198, 210, 211, 213, 231, 232, 233, 236, 237, 363, 364, 552], "\u03c0": [176, 179, 181, 182, 358, 363], "x1_i": [178, 182, 184, 186, 187, 188, 189, 194, 195, 200, 202, 203, 208, 209, 214, 215, 217, 218, 221, 223, 225, 228, 235, 363, 543], "neither": [178, 356, 363, 366, 548, 560, 564], "nor": [178, 356, 363, 366, 548, 560, 584], "2019": [178, 198, 212, 363, 580, 583], "overflow": [178, 363, 368, 378, 417, 508, 538, 549], "commut": [178, 363], "809": [180, 363], "199": [180, 363], "569": [180, 363], "733": [180, 363], "notat": [182, 363, 378, 502, 548], "quadrant": [182, 363], "branch": [182, 363, 541, 543, 548, 574, 580], "rai": [182, 363, 533], "3\u03c0": [182, 363], "bitwis": [184, 187, 189, 218, 363], "170": [188, 363], "243": [188, 363], "225": [188, 363], "xor": [189, 218, 363], "77": [189, 363, 368, 378, 414, 502], "654": [191, 363, 548], "368": [192, 363], "670": [192, 363], "202": [192, 363, 543], "548": [192, 363], "1490": [192, 363], "0192": [193, 363], "0384": [193, 363], "0576": [193, 363], "698": [194, 363], "truth": [195, 202, 203, 208, 209, 223, 363, 514, 516, 560, 562], "purpos": [198, 212, 363, 364, 368, 417, 541, 544, 547, 548, 551, 553, 555, 556, 557, 560, 562, 564, 565, 568, 575, 579, 581, 584, 585, 586], "accur": [198, 212, 363, 368, 417], "fdlibm": [198, 212, 363], "compliant": [198, 212, 216, 217, 363, 378, 503, 504, 505, 507], "potenti": [198, 212, 363, 530, 539, 540, 541, 548, 549, 560, 565, 583], "632": [198, 363], "20e": [198, 363], "72e": [198, 363], "greatest": [199, 200, 363, 364], "742": [212, 363], "NOT": [216, 363, 539], "recommend": [216, 217, 228, 363, 378, 504, 507, 540, 541, 545, 546, 558], "unspecifi": [225, 228, 363, 368, 370, 403, 404, 444, 559], "versu": [225, 363], "52095687": [225, 363], "92457771": [225, 363], "49372482": [225, 363], "22738838": [225, 363], "156": [225, 363], "5877228": [225, 363], "189": [226, 363], "252": [226, 363], "315": [226, 363], "378": [226, 363], "1150": [226, 363], "2890": [226, 363], "172": [226, 363], "229": [226, 363], "487": [226, 363, 367, 394], "344": [226, 363], "semant": [228, 363, 532, 566, 571, 581], "That": [228, 363, 540, 541, 544, 562, 568, 569, 570, 581], "primarili": [228, 363, 541, 547, 580], "reason": [228, 363, 533, 539, 541, 543, 544, 547, 548, 549, 551, 556, 559, 560, 563, 564, 566, 568, 586], "decim": [229, 363], "doc": [229, 363, 364, 530, 535, 538, 539, 542, 551, 552, 555, 562, 566, 569, 570], "deliber": [229, 363, 564], "here": [229, 363, 530, 538, 539, 540, 541, 543, 546, 547, 548, 551, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 580, 581], "due": [229, 363, 533, 536, 540, 543, 548, 553, 559, 560, 580], "imprecis": [229, 363], "5654": [229, 363], "034": [229, 363], "433": [229, 346, 348, 355, 363, 366], "932": [231, 363], "746": [231, 363], "443": [231, 363], "657": [231, 255, 363, 365], "indistinguish": [233, 363], "infinit": [233, 363], "32455532": [233, 363], "89897949": [233, 363], "169": [233, 363], "546": [236, 363, 367, 394], "916": [236, 363, 369, 429], "996": [236, 363], "462": [237, 363], "604": [237, 363], "984": [237, 363], "997": [237, 363], "0375": [238, 363], "032": [238, 363], "idx": [249, 365, 530, 550, 568], "inspect": [249, 365], "retriev": [249, 365, 541, 560], "decor": [253, 365, 521, 543, 544, 547, 549, 550, 556, 557, 559, 560, 561], "recalcul": [253, 365], "my_sum": [253, 365], "val1": [253, 365], "val2": [253, 365], "cached_sum": [253, 365], "line_eq": [253, 365], "slp": [253, 365], "itc": [253, 365], "cached_line_eq": [253, 365], "0353": [254, 365], "424": [254, 365], "58": [254, 365], "176": [254, 365], "339": [254, 365], "271": [254, 365], "168": [254, 365], "391": [254, 365], "417": [255, 365], "583": [255, 365], "0667": [255, 365], "267": [255, 365], "131": [255, 365], "394": [255, 365, 374, 486], "526": [255, 365], "788": [255, 365], "expos": [256, 365, 530, 532, 548, 566, 570], "public": [256, 365, 548, 558, 568, 583], "default_str": [258, 365], "46999979": [259, 365], "66000009": [259, 365], "93000001": [259, 365], "29000092": [259, 365], "33999991": [259, 365], "6400001": [259, 365], "96000004": [259, 365], "36000013": [259, 365], "51999998": [259, 365], "67000008": [259, 365], "960": [259, 365], "1280": [259, 365, 530], "3600": [259, 365], "bottom": [259, 365, 540, 548, 586], "h1": [259, 365], "w1": [259, 365], "40499985": [260, 365], "61000061": [260, 365], "1500001": [260, 365], "simpl": [262, 365, 530, 532, 539, 540, 541, 544, 546, 547, 549, 550, 551, 552, 556, 559, 560, 562, 563, 564, 568, 570, 571, 574, 575, 579, 580, 581, 582], "array_mod": [269, 365], "set_array_mod": [269, 318, 365], "exception_trace_mod": [270, 365], "set_exception_trace_mod": [270, 319, 365, 553], "get_exception_trace_mod": [274, 299, 319, 365], "set_nestable_mod": [274, 320, 365], "set_queue_timeout": [276, 321, 365], "max_depth": [277, 365, 372, 469], "seen_set": [277, 365], "local_set": [277, 365], "set_show_func_wrapper_trace_mod": [278, 323, 365, 553], "path": [279, 365, 516, 521, 540, 546, 559, 560, 561, 580], "directori": [279, 306, 362, 365, 536, 537, 539, 540, 541, 548, 560, 562], "temporari": [279, 306, 365, 539, 549], "thrown": [284, 365, 544, 550, 553, 574], "ivyexcept": [284, 311, 356, 365, 366, 527, 553, 560], "doesn": [284, 365, 540, 545, 546, 547, 548, 549, 551, 558, 562, 564, 566, 574, 578], "allow_dupl": [292, 365], "best": [292, 365, 530, 535, 538, 539, 540, 541, 542, 548, 549, 554, 562, 563, 583, 584], "o": [292, 365, 530, 540, 542, 548, 566], "fork": [293, 365, 535, 543, 548], "forkserv": [293, 365], "spawn": [293, 365], "garbag": [295, 365], "collector": [295, 365], "get_all_arrays_in_memori": [295, 365], "consol": [295, 365, 541, 562, 568], "get_array_mod": [298, 318, 365], "rtype": [298, 299, 302, 304, 305, 365], "exept": [299, 365], "get_min_bas": [300, 365], "get_min_denomin": [301, 365], "get_nestable_mod": [302, 320, 365], "get_queue_timeout": [303, 321, 365], "shape_array_mod": [304, 322, 365], "get_show_func_wrapper_trace_mod": [305, 323, 365], "tmp_dr": [306, 365], "get_tmp_dir": [306, 365], "tmp": [306, 365], "my_tmp": [306, 365], "set_shape_array_mod": [308, 322, 365], "49999999999975": [309, 365], "5015015015010504": [309, 365], "000444502911705e": [309, 365], "9999999999995j": [309, 365], "isn": [311, 365, 541, 557, 569, 574, 582], "possibli": [313, 365, 560, 562, 574], "100000023841858": [313, 365], "200000047683716": [313, 365], "299999952316284": [313, 365], "400000095367432": [313, 365], "599999904632568": [313, 365], "execut": [317, 362, 365, 540, 541, 546, 547, 548, 551, 553, 556, 557, 559, 562, 564, 566, 568, 571, 574, 575, 576, 580, 581, 582, 583, 584, 586], "dictionai": [317, 365], "__name__": [317, 365, 530, 553], "hemant": [317, 365], "unset_shape_array_mod": [318, 321, 365], "previous": [319, 365, 540, 545, 556, 558, 562, 566], "451": [324, 365], "in_ax": [325, 365], "out_ax": [325, 365], "thereof": [325, 365], "fun": [325, 365, 372, 468, 548], "appear": [325, 364, 365, 540, 541, 543, 560, 564], "summaris": [325, 365], "0125": [343, 366], "171": [343, 366], "90000075": [344, 366], "90000164": [344, 366], "9000032": [344, 366], "50000012e": [344, 366], "92558754": [344, 366], "92558694": [344, 366], "92558682": [344, 366], "92558861": [344, 366], "60000025e": [344, 366], "01024": [344, 366], "retain_grad": [345, 366], "xs_grad_idx": [345, 366, 516, 530, 558], "ret_grad_idx": [345, 366, 516, 530, 558], "func_ret": [345, 366, 558], "retain": [345, 364, 366, 558, 575], "33333334": [345, 366, 368, 426], "666666": [345, 366], "333332": [345, 366], "66666675": [345, 366], "grad_fn": [346, 355, 366, 569], "933": [346, 348, 355, 366], "jacobian": [348, 366, 574, 580], "jac_fn": [348, 366], "639": [349, 366], "361": [349, 366], "compon": [352, 354, 356, 366, 530, 533, 566, 576, 581, 583], "with_grads_stack": [352, 354, 356, 366], "delet": [354, 366, 541, 548], "set_with_grad": [354, 356, 366], "value_grad": [355, 366], "423332": [355, 366], "enter": [356, 362, 366, 540, 541, 544, 549, 550, 555, 557], "block": [356, 362, 364, 366, 530, 541, 544, 547, 553, 554, 556, 562, 565, 567, 571, 574, 575, 585, 587], "deseri": 357, "718281828459045": 358, "euler": [358, 573], "Not": [358, 364, 545, 561, 569, 570, 574], "newaxi": 358, "alia": [358, 539, 560], "141592653589793": 358, "ifels": 359, "whileloop": 359, "if_els": 359, "while_loop": 359, "protocol": 360, "_t_co": 360, "asarray_handle_nest": 360, "asarray_infer_devic": 360, "asarray_to_native_arrays_and_back": 360, "defaultcomplexdtyp": 361, "defaultdtyp": 361, "defaultfloatdtyp": 361, "defaultintdtyp": 361, "defaultuintdtyp": 361, "as_ivy_dtyp": [361, 560], "as_native_dtyp": 361, "check_float": 361, "closest_valid_dtyp": 361, "default_dtyp": [361, 549, 556], "dtype_bit": 361, "function_supported_dtyp": [361, 549], "function_unsupported_dtyp": [361, 549], "infer_default_dtyp": 361, "invalid_dtyp": [361, 549], "is_native_dtyp": 361, "promote_typ": [361, 549], "promote_types_of_input": [361, 549, 559], "type_promote_arrai": [361, 549], "unset_default_complex_dtyp": 361, "unset_default_float_dtyp": 361, "unset_default_int_dtyp": 361, "unset_default_uint_dtyp": 361, "valid_dtyp": 361, "defaultdevic": 362, "__enter__": 362, "runtim": [362, 542, 556, 562, 564, 580], "relat": [362, 530, 536, 538, 540, 541, 553, 554, 560, 562, 563, 564, 573, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "_dev": 362, "__exit__": 362, "exc_typ": 362, "exc_val": 362, "exc_tb": 362, "exit": 362, "baseexcept": [362, 517], "traceback": [362, 562], "initialis": [362, 543, 560, 562], "profil": 362, "save_dir": 362, "as_ivy_dev": [362, 568], "clear_cached_mem_on_dev": 362, "dev_util": [362, 550], "function_supported_devic": 362, "function_unsupported_devic": 362, "get_all_ivy_arrays_on_dev": [362, 550], "gpu_is_avail": [362, 530], "num_cpu_cor": [362, 550], "num_gpu": [362, 550, 562], "num_ivy_arrays_on_dev": 362, "percent_used_mem_on_dev": 362, "print_all_ivy_arrays_on_dev": 362, "set_split_factor": [362, 553], "split_func_cal": 362, "total_mem_on_dev": [362, 550], "tpu_is_avail": 362, "unset_default_devic": 362, "used_mem_on_dev": 362, "nativesparsearrai": 364, "sparsearrai": 364, "coo_indic": 364, "crow_indic": 364, "col_indic": 364, "ccol_indic": 364, "row_indic": 364, "dense_shap": 364, "to_dense_arrai": 364, "typic": [364, 377, 497, 543, 556, 579, 587], "yj": 364, "whilst": [364, 571, 575, 580], "ary3": 364, "avg": 364, "dimensio": 364, "distrubut": 364, "paramter": 364, "463": 364, "022": 364, "059": 364, "601": 364, "015": 364, "868": 364, "908": 364, "672": 364, "002": 364, "029": 364, "144": 364, "822": 364, "bind_custom_gradient_funct": [364, 558], "custom_grad_func": 364, "bind": [364, 539, 547, 558, 579, 580], "upstream": [364, 540, 541, 543, 558], "arrrai": 364, "355j": 364, "55j": 364, "current_backend": [364, 553, 556, 563, 566], "global_backend": 364, "py": [364, 530, 539, 540, 541, 543, 545, 548, 549, 550, 552, 553, 554, 555, 556, 560, 561, 562, 563, 566, 568, 570, 571], "tranform": 364, "22e": 364, "24e": 364, "91e": 364, "10e": 364, "16e": 364, "81e": 364, "280": 364, "container_n": 364, "container_typ": [364, 365], "container_norm": 364, "superdiagon": [364, 368, 401], "subdiagon": [364, 368, 401], "seen": [364, 532, 533, 548, 551, 553, 560, 562, 566, 568, 569, 586], "multivari": 364, "bayesian": 364, "ed": 364, "rest": [364, 540, 546, 548, 571, 582], "5d": 364, "third": [364, 368, 376, 419, 492, 546, 559, 574, 579, 580, 586], "eigenvali": 364, "necessarili": [364, 544, 547], "72281323e": 364, "37228132e": 364, "88578059e": 364, "10000000e": 364, "76822128": 364, "70710678": 364, "6401844": 364, "tridiagon": 364, "18749806": 364, "81250191": 364, "350609": 364, "56713122": 364, "06563006": 364, "74146169": 364, "74215561": 364, "0636413": 364, "56742489": 364, "35291126": 364, "emb": 364, "everywher": 364, "t1": 364, "frac": 364, "02733949e": 364, "00j": 364, "49660576e": 364, "68178638e": 364, "01j": 364, "98912367e": 364, "21802426e": 364, "04549134e": 364, "82842712e": 364, "86902654e": 364, "25501143e": 364, "32978028e": 364, "52068201e": 364, "71158374e": 364, "position": 364, "inexact": 364, "decompos": [364, 560], "0800": 364, "3979": 364, "9121": 364, "5400": 364, "handle_array_funct": 364, "array_funct": 364, "handle_array_like_without_promot": 364, "handle_except": [364, 527], "handle_nest": [364, 547, 556, 557, 566], "handle_out_argu": [364, 549, 550, 555, 557, 559, 566], "handle_view": 364, "_base": [364, 372, 457, 467, 468], "view_ref": 364, "han": 364, "taper": 364, "horizot": 364, "triangl": 364, "15318303e": 364, "15148591e": 364, "19j": 364, "25000000e": 364, "35378602e": 364, "02j": 364, "65404249e": 364, "17611649e": 364, "24320230e": 364, "79344813e": 364, "22374531e": 364, "45929364e": 364, "14208718e": 364, "07177031e": 364, "infer_devic": [364, 549, 550, 555, 557], "infer_dtyp": [364, 549, 550, 555, 557], "inputs_to_native_arrai": [364, 544, 557], "integer_arrays_to_float": 364, "interp": [364, 564], "xp": [364, 543], "fp": 364, "bicubic_tensorflowbicub": 364, "is_ivy_sparse_arrai": 364, "is_native_sparse_arrai": 364, "999999e": 364, "00713103": 364, "99997455": 364, "kaiser_derived_window": 364, "00726415": 364, "9999736": 364, "2773e": 364, "0172e": 364, "9294e": 364, "4149": 364, "9138": 364, "5529": 364, "composit": [364, 539, 542, 544, 545, 547, 549, 557, 559, 561, 562, 564, 566, 570, 571, 574, 575, 581], "indirect": 364, "primari": [364, 542, 545, 549, 557, 559, 560, 562, 564, 574, 575], "secondari": 364, "20141329": 364, "40318608": 364, "48683619": 364, "46328247": 364, "59813893": 364, "43748799": 364, "3333": 364, "6666": 364, "behaviour": [364, 538, 539, 541, 542, 543, 544, 547, 549, 552, 553, 555, 559, 560, 562, 563, 568], "native_sparse_arrai": 364, "native_sparse_array_to_indices_values_and_shap": 364, "ndenumer": 364, "multidimension": [364, 580], "ndindex": 364, "outputs_to_ivy_arrai": [364, 544, 549, 550, 555, 557], "shortcut": [364, 540], "linear_ramp": 364, "reflect": [364, 536, 541, 544, 562], "suppli": [364, 544], "ramp": 364, "mirror": [364, 539, 580], "padding_func": 364, "iaxis_pad_width": 364, "iaxi": 364, "style": [364, 375, 490, 541, 580], "unalt": 364, "extend": [364, 541, 545, 546, 552, 553, 555, 560, 563, 574, 577, 580, 586], "parametr": [364, 543, 562, 580], "6705687": 364, "52016652": 364, "40560818": 364, "45630932": 364, "217234": 364, "to_native_arrays_and_back": [364, 555, 557, 566], "happen": [364, 530, 534, 540, 541, 562, 569], "col": 364, "downward": 364, "upward": 364, "2xn": 364, "subarrai": 364, "complementari": [364, 578, 586], "38268346": 364, "38268352": 364, "8563191": 364, "14943568": 364, "hurwitz": 364, "arraymod": 365, "manag": [365, 366, 530, 534, 535, 559, 574, 582, 584], "arg_info": 365, "arg_nam": 365, "cache_fn": [365, 556], "current_backend_str": [365, 553, 566, 568], "function_supported_devices_and_dtyp": 365, "function_unsupported_devices_and_dtyp": 365, "get_item": 365, "get_referrers_recurs": 365, "inplace_arrays_support": 365, "inplace_variables_support": 365, "isscalar": 365, "match_kwarg": 365, "num_arrays_in_memori": 365, "print_all_arrays_in_memori": 365, "set_min_bas": 365, "set_min_denomin": 365, "set_tmp_dir": 365, "to_ivy_shap": 365, "to_native_shap": 365, "try_else_non": 365, "unset_array_mod": 365, "unset_exception_trace_mod": 365, "unset_nestable_mod": 365, "unset_queue_timeout": 365, "unset_show_func_wrapper_trace_mod": 365, "vmap": [365, 574, 580], "gradienttrack": 366, "execute_with_gradi": [366, 530, 569, 570, 571, 574], "jac": 366, "unset_with_grad": 366, "value_and_grad": [366, 558], "conv": [367, 564], "channel_last": [367, 383, 390, 391], "feature_group_count": [367, 383, 390, 391], "x_dilat": [367, 383, 390], "channel_first": [367, 383, 390, 391], "group": [367, 372, 383, 390, 391, 459, 543, 547, 556, 560, 561, 576, 579, 585], "258": [367, 385, 387, 389], "dhwio": [367, 388], "conv_general_dil": [367, 560], "conv_general_transpos": 367, "hwi": [367, 392], "overfit": [367, 393], "overal": [367, 393, 547, 549, 550, 552, 571, 576, 578, 579, 580], "1428566": [367, 393], "19999981": [367, 393], "39999962": [367, 393], "4000001": [367, 393], "49000001": [367, 393], "55599999": [367, 393], "21000004": [367, 393], "incom": [367, 394], "666": [367, 368, 394, 410], "4269": [367, 394], "911": [367, 394], "157": [367, 394], "753": [367, 394], "101": [367, 368, 372, 394, 407, 463], "545": [367, 374, 394, 484], "547": [367, 394], "124": [367, 394, 553], "852": [367, 394], "963": [367, 394], "108": [367, 378, 394, 502], "196": [367, 394], "306": [367, 394], "long": [367, 395, 540, 541, 548, 549, 551, 553, 566, 580], "short": [367, 395, 541, 549, 560, 563, 566, 570], "unrol": [367, 395, 566, 569], "cont_feat_dim": [367, 396], "numhead": [367, 396], "out_feat_dim": [367, 396], "5678761": [367, 396], "65441847": [367, 396], "18969631": [367, 396], "40131447": [367, 396], "19991851": [367, 396], "40000153": [367, 396], "68589532": [367, 396], "40129396": [367, 396], "40000817": [367, 396], "31219625": [367, 396], "25698996": [367, 396], "31022024": [367, 396], "16286421": [367, 396], "30296469": [367, 396], "16460133": [367, 396], "59497029": [367, 396], "40046397": [367, 396], "14009905": [367, 396], "81691194": [367, 396], "10732293": [367, 396], "40012637": [367, 396], "73519301": [367, 396], "40021262": [367, 396], "7615059": [367, 396], "40326414": [367, 396], "30141067": [367, 396], "19610119": [367, 396], "32028484": [367, 396], "1708746": [367, 396], "34100914": [367, 396], "14920235": [367, 396], "40000009": [367, 396], "73333335": [367, 396], "axisa": [368, 399], "axisb": [368, 399], "axisc": [368, 399], "293": [368, 400], "46997": [368, 400], "eigendecomposit": [368, 403, 404], "qlq\u1d40": [368, 403, 404], "orthogon": [368, 403, 404], "behav": [368, 403, 539, 543, 553, 559, 560, 561, 568, 581], "futur": [368, 404, 405, 530, 532, 534, 540, 541, 546, 548, 549, 562, 563, 564, 568, 574, 586], "done": [368, 405, 538, 539, 540, 541, 543, 546, 548, 551, 554, 560, 562, 569, 580], "45033181e": [368, 405], "02829754e": [368, 405], "54220343e": [368, 405], "12647155e": [368, 405], "38447177e": [368, 405], "56155300e": [368, 405], "26794919": [368, 405], "7320509": [368, 405], "array_lik": [368, 406, 414], "0012": [368, 407], "00342": [368, 407], "000565": [368, 407], "0104": [368, 407], "000981": [368, 407], "00282": [368, 407], "000766": [368, 407], "0322": [368, 407], "00237": [368, 407], "000151": [368, 407], "00101": [368, 407], "00019": [368, 407], "0214": [368, 407], "00171": [368, 407], "0107": [368, 407], "0167": [368, 407], "0472": [368, 407], "0536": [368, 407], "0177": [368, 407], "000429": [368, 407], "00762": [368, 407], "lu_factor": 368, "pivot": [368, 408], "lu": [368, 408], "convent": [368, 378, 409, 502, 532, 545, 555, 563, 573, 586], "frobeniu": [368, 410], "nuclear": [368, 410], "induc": [368, 410], "47722558": [368, 410], "776": [368, 410], "6000004": [368, 410], "118": [368, 411, 553], "moor": [368, 415], "penros": [368, 415], "underflow": [368, 417, 549], "logsabsdet": [368, 417], "although": [368, 417, 544, 547, 560, 564, 578, 580], "again": [368, 417, 533, 534, 541, 544, 545, 546, 547, 551, 553, 559, 560, 562, 563, 564, 569, 571, 574, 585, 586], "subject": [368, 417], "linalg": [368, 417, 539, 559, 561], "solut": [368, 418, 530, 541, 547, 549, 561, 562, 564, 578, 582], "system": [368, 418, 530, 540, 541, 545, 548, 549, 574, 578, 580, 583, 585, 587], "ordin": [368, 418, 573], "usvh": [368, 419], "et": [368, 419], "cetera": [368, 419], "ss": [368, 420], "615": [368, 420], "866": [368, 420], "864": [368, 420], "0x": [368, 424], "Such": [368, 424, 541, 556, 562], "progress": [368, 424, 540, 541, 571], "alexandr": [368, 424], "theophil": [368, 424], "9000001": [368, 426], "64158917": [368, 426], "skew": [368, 427], "symmetric_matrix": [368, 427], "cross_product": [368, 427], "35667497": [369, 430], "793291": [369, 431], "512926": [369, 431], "outsid": [370, 433, 444, 550, 554, 556, 568, 585], "indexerror": [370, 436, 527, 553], "beyond": [370, 441, 552, 560, 586], "introduc": [370, 376, 441, 492, 532, 547, 549, 561, 562, 564, 569], "squeezabl": [370, 443], "famili": [370, 444], "intxx": [370, 444], "floatxx": [370, 444], "rep": [370, 446], "manipulation_funct": [370, 448], "fomaml_step": 371, "inner_cost_fn": [371, 454, 455], "outer_cost_fn": [371, 454, 455], "inner_grad_step": [371, 454, 455, 456], "inner_learning_r": [371, 454, 455, 456], "inner_optimization_step": [371, 454, 455, 456], "inner_batch_fn": [371, 454, 455], "outer_batch_fn": [371, 454, 455], "average_across_step": [371, 454, 455], "inner_v": [371, 454, 455], "keep_inner_v": [371, 454, 455], "outer_v": [371, 454, 455], "keep_outer_v": [371, 454, 455], "return_inner_v": [371, 454, 455, 456], "num_task": [371, 454, 455, 456], "maml": [371, 454, 455], "task": [371, 454, 455, 456, 530, 535, 541, 560, 561, 573, 580, 586, 587], "0x7f0ddaa0b4c0": [371, 454, 455, 456], "maml_step": 371, "vanilla": [371, 455, 570, 580], "recev": [371, 455], "reptile_step": 371, "cost_fn": [371, 456], "reptil": [371, 456], "receivng": [371, 456], "all_nested_indic": 372, "include_nest": [372, 457], "_index": [372, 457, 468], "extra_nest_typ": [372, 457, 458, 467, 468, 469], "themselv": [372, 457, 547, 549, 550, 552, 556, 560, 570, 577, 586], "far": [372, 457, 468, 550, 551, 567, 585, 586], "manual": [372, 457, 467, 468, 539, 540, 541, 560, 562, 570], "go": [372, 457, 458, 467, 468, 469, 530, 535, 536, 539, 540, 541, 542, 545, 546, 548, 549, 551, 560, 561, 562, 563, 565, 569, 574, 576, 580, 581, 585, 587], "deeper": [372, 457, 458, 467, 468, 469, 532, 541, 542, 562, 565], "copy_nest": 372, "to_mut": [372, 458, 469], "deepli": [372, 458, 574, 580], "mutabl": [372, 458, 464, 465, 469, 474, 475], "copied_nest": [372, 458], "1337": [372, 458], "duplicate_array_index_chain": 372, "index_nest": [372, 556], "insert_into_nest_at_index": 372, "insert_into_nest_at_indic": 372, "onto": [372, 463, 469, 531, 532, 580], "special_squar": [372, 463], "6666666666666667": [372, 463], "special_pow": [372, 463], "linear_model": [372, 463], "map_nest_at_index": 372, "shallow": [372, 464, 465, 469, 474, 475], "_result": [372, 464, 474], "placehold": [372, 464, 469, 474, 541, 544, 546, 554, 555, 575], "hh": [372, 464], "map_nest_at_indic": 372, "ub": [372, 465], "tb": [372, 465], "multi_index_nest": 372, "repeatedli": [372, 466, 548, 562], "nested_ani": 372, "check_nest": [372, 467, 468], "via": [372, 467, 468, 541, 543, 547, 549, 550, 559, 563, 564, 566, 568, 569, 573, 580], "conditon": [372, 467, 468], "nested_argwher": 372, "stop_after_n_found": [372, 468], "nested_indic": [372, 468], "nested_map": [372, 556], "_depth": [372, 469], "_tuple_check_fn": [372, 469], "_list_check_fn": [372, 469], "_dict_check_fn": [372, 469], "wherebi": [372, 469, 539, 577], "directli": [372, 469, 530, 534, 541, 543, 544, 546, 547, 548, 549, 550, 552, 556, 557, 559, 560, 561, 563, 564, 566, 568, 570, 571, 573, 574, 584, 585, 586], "nested_multi_map": 372, "index_chain": [372, 470], "nest0": [372, 470], "ivy_arrai": [372, 470, 544, 560], "unappli": [372, 470], "prune_empti": 372, "prune_nest_at_index": 372, "prune_nest_at_indic": 372, "set_nest_at_index": 372, "set_nest_at_indic": 372, "111": [372, 475], "xyz": [372, 475], "pqr": [372, 475], "217": [373, 476], "uniformli": [374, 482, 484], "22346112": [374, 483], "0922": [374, 483], "49671414": [374, 483], "1382643": [374, 483], "64768857": [374, 483], "5230298": [374, 483], "23415337": [374, 483], "23413695": [374, 483], "9213753": [374, 483], "12818667": [374, 483], "799": [374, 483], "469": [374, 483], "287": [374, 483], "0366": [374, 483], "26431865": [374, 484], "475": [374, 484], "878": [374, 484], "861": [374, 484], "929": [374, 484], "789": [374, 484], "519": [374, 484], "0435": [374, 484], "381": [374, 484], "4608004": [374, 484], "8458502": [374, 484], "67270088": [374, 484], "31128597": [374, 484], "major": [375, 490, 533, 549, 550, 561, 562, 574, 577, 580], "guarante": [376, 492, 494, 534, 544, 574], "aggreg": [376, 492, 548], "fourth": [376, 492], "1141": [376, 492], "8101": [376, 492], "9298": [376, 492], "8460": [376, 492], "2119": [376, 492], "3519": [376, 492], "6252": [376, 492], "4033": [376, 492], "7443": [376, 492], "2577": [376, 492], "3707": [376, 492], "0545": [376, 492], "3238": [376, 492], "5944": [376, 492], "0775": [376, 492], "4327": [376, 492], "62519997": [376, 492], "40329999": [376, 492], "59439999": [376, 492], "74430001": [376, 492], "81010002": [376, 492], "84600002": [376, 492], "92979997": [376, 492], "29999995": [376, 493], "einstein": [378, 502], "summat": [378, 502], "117": [378, 502], "sentinel": [378, 503, 505], "90000004": [378, 504], "statistical_funct": [378, 507], "07472222": [378, 509], "00666667": [378, 509], "08966666": [378, 509], "simplicit": [379, 510, 511], "meta": [454, 455, 456, 544, 563, 580], "nested_arrai": [513, 546], "nestedarrai": 513, "classmethod": 513, "from_row_length": 513, "row_length": 513, "from_row_split": 513, "row_split": 513, "unbind": 513, "ivy_test": [514, 515, 516, 517, 519, 520, 521, 539, 540, 541, 543, 546, 548, 561], "test_ivi": [514, 515, 516, 517, 519, 520, 521, 539, 540, 541, 546, 548, 561, 562], "assert_all_clos": [514, 561], "ret_np": [514, 516, 561], "ret_from_gt_np": [514, 561], "ground_truth_backend": [514, 516, 517, 521, 561], "ground": [514, 516, 532, 560, 562], "mark": [514, 539, 541, 543, 562, 566], "fail": [514, 539, 540, 541, 543, 548, 549, 551, 554, 560, 561], "assert_same_type_and_shap": 514, "this_key_chain": 514, "check_unsupported_devic": 514, "input_devic": 514, "all_as_kwargs_np": [514, 516], "presenc": [514, 547, 559], "check_unsupported_device_and_dtyp": 514, "input_dtyp": [514, 516, 520, 561, 562], "check_unsupported_dtyp": 514, "test_unsupported_funct": 514, "value_test": 514, "ret_np_flat": 514, "ret_np_from_gt_flat": 514, "ret_from_np_gt_flat": 514, "available_framework": 515, "ground_truth": 515, "function_test": 516, "args_to_contain": 516, "array_arg": [516, 556], "args_to_frontend": 516, "frontend_array_fn": 516, "arrays_to_frontend": 516, "as_list": 516, "compiled_if_requir": 516, "test_compil": [516, 520, 521], "convtru": 516, "nativeclass": 516, "counter": [516, 570], "create_args_kwarg": 516, "args_np": 516, "arg_np_val": 516, "args_idx": 516, "kwargs_np": 516, "kwarg_np_val": 516, "kwargs_idx": 516, "test_flag": [516, 561, 562], "on_devic": [516, 520, 561], "empty_func": 516, "flatten_and_to_np": 516, "flatten_frontend": 516, "flatten_frontend_to_np": 516, "flatten_fw_and_to_np": 516, "framework_compar": 516, "get_frontend_ret": 516, "as_ivy_arrai": 516, "get_ret_and_flattened_np_arrai": 516, "gradient_incompatible_funct": 516, "gradient_test": [516, 562], "rtol_": 516, "atol_": [516, 561], "gradient_unsupported_dtyp": 516, "kwargs_to_args_n_kwarg": 516, "num_positional_arg": [516, 520, 521, 561, 562], "port": [516, 534], "make_json_pick": 516, "test_frontend_funct": [516, 561], "fn_tree": [516, 517, 521, 560, 561, 562], "test_valu": [516, 561, 562], "all_alias": [516, 561], "alias": [516, 521, 539, 560, 561], "namespac": [516, 539, 549, 557, 560, 561, 563, 566, 571], "test_frontend_method": [516, 561], "init_input_dtyp": [516, 561], "method_input_dtyp": [516, 561], "init_flag": [516, 561, 562], "method_flag": [516, 520, 561, 562], "init_all_as_kwargs_np": [516, 561], "method_all_as_kwargs_np": [516, 561], "frontend_method_data": [516, 561], "consum": [516, 547, 548, 555, 561, 562], "init_as_variable_flag": [516, 521], "dictat": [516, 544, 551, 555, 559], "init_num_positional_arg": [516, 521], "init_native_array_flag": 516, "with_v": 516, "ret_gt": 516, "test_funct": [516, 540, 541, 548, 561, 562], "fn_name": [516, 517, 521, 545, 561, 562], "return_flat_np_arrai": 516, "functiontestflag": [516, 520], "with_out": [516, 520, 557, 561, 562], "instance_method": [516, 520, 557, 562], "as_vari": [516, 520, 557, 561, 562], "as_variable_flag": [516, 521, 561], "native_array_flag": [516, 521, 561], "container_flag": [516, 520, 521], "test_method": 516, "class_nam": 516, "method_nam": [516, 519, 521, 561], "init_with_v": 516, "method_with_v": 516, "test_gradi": [516, 520, 521, 557], "method_as_variable_flag": [516, 521], "method_num_positional_arg": [516, 521], "method_native_array_flag": 516, "method_container_flag": [516, 521], "tthe": 516, "var_fn": 516, "holder": 517, "interruptedtest": 517, "test_interrup": 517, "testdata": 517, "supported_device_dtyp": 517, "is_method": 517, "remove_all_current_framework": 517, "setup_api_test": 517, "test_data": 517, "setup_frontend_test": 517, "teardown_api_test": 517, "teardown_frontend_test": 517, "frontendmethoddata": 519, "ivy_init_modul": 519, "framework_init_modul": 519, "init_nam": 519, "test_parameter_flag": 520, "frontendfunctiontestflag": 520, "generate_frontend_arrai": [520, 521], "testflag": 520, "apply_flag": 520, "args_to_iter": 520, "frontendmethodtestflag": 520, "initmethodtestflag": 520, "methodtestflag": 520, "as_cont": 520, "build_flag": 520, "frontend_function_flag": 520, "searchstrategi": [520, 521, 562], "frontend_method_flag": 520, "function_flag": 520, "init_method_flag": 520, "testing_help": 521, "handle_frontend_method": [521, 561, 562], "class_tre": [521, 561], "init_tre": [521, 561], "init_native_arrai": 521, "min_siz": [521, 562], "max_siz": [521, 562], "_as_varaible_strategi": 521, "method_native_arrai": 521, "_given_kwarg": 521, "wrapper": [521, 544, 546, 547, 549, 553, 557, 559, 560, 564, 568, 575, 576, 580], "strategi": [521, 539, 557, 561], "handle_frontend_test": [521, 561, 562], "number_positional_arg": [521, 561], "test_with_out": [521, 561], "test_inplac": 521, "handle_method": [521, 562], "method_tre": [521, 561, 562], "_gradient_strategi": 521, "_compile_strategi": 521, "handle_test": [521, 562], "test_instance_method": 521, "ex": [521, 548], "hypothesi": [521, 539, 541, 543, 548, 557], "num_positional_args_method": 521, "check_al": 524, "messag": [524, 527, 529, 533, 540, 541, 548, 551, 553, 554, 560, 566, 568], "check_all_or_any_fn": 524, "check_ani": 524, "check_dimens": 524, "check_elem_in_list": [524, 560], "elem": 524, "check_equ": [524, 560], "check_exist": 524, "check_fals": 524, "check_fill_value_and_dtype_are_compat": 524, "check_gather_input_valid": 524, "check_gather_nd_input_valid": 524, "check_great": 524, "allow_equ": [524, 553], "check_inplace_sizes_valid": 524, "check_isinst": 524, "allowed_typ": 524, "check_kernel_padding_s": 524, "kernel_s": 524, "padding_s": 524, "check_less": [524, 553], "check_one_way_broadcast": 524, "check_same_dtyp": 524, "check_shapes_broadcast": 524, "check_tru": 524, "dynamic_import": 526, "import_modul": [526, 566], "packag": [526, 530, 536, 540, 548, 553, 554, 560, 574, 580, 582], "ivyerror": [527, 530, 553], "attributeerror": [527, 553, 568], "ivynotimplementedexcept": 527, "notimplementederror": [527, 554], "add_array_spec": 528, "fn_array_spec": 528, "cprint": [529, 566], "warn": [530, 541, 546], "publicli": 530, "yet": [530, 539, 540, 574], "readm": [530, 546, 574], "won": [530, 533, 534, 540, 541, 547, 571], "websit": [530, 533, 543], "faq": [530, 546], "ai": [530, 578, 582], "your": [530, 533, 534, 535, 536, 538, 539, 540, 543, 546, 548, 552, 558, 563, 564, 569, 570, 574, 580], "fingertip": 530, "ml": [530, 531, 533, 534, 535, 538, 560, 565, 566, 567, 569, 570, 571, 573, 576, 577, 578, 579, 580, 583, 585, 587], "model": [530, 569, 570, 575, 578, 579, 580, 581, 582, 583, 584, 586, 587], "written": [530, 532, 540, 543, 544, 546, 552, 555, 559, 560, 563, 566, 568, 571, 574, 578, 580, 584, 586, 587], "prefer": [530, 540, 547, 553, 557, 560, 564, 580], "straight": [530, 560, 562, 568], "awai": [530, 578, 580], "dive": [530, 535, 537, 538, 539, 541, 543, 547, 549, 561, 565, 568, 569, 574, 586], "grow": [530, 563, 580], "guid": [530, 535, 539, 540, 541, 554, 560, 586], "look": [530, 532, 536, 540, 541, 545, 546, 547, 549, 550, 551, 553, 555, 556, 560, 561, 562, 563, 564, 566, 568, 570, 571, 576, 580], "own": [530, 533, 534, 540, 543, 548, 549, 552, 553, 560, 563, 566, 574, 575, 576, 579, 580, 585, 586], "line": [530, 534, 540, 543, 544, 548, 551, 553, 554, 557, 562, 564, 567, 568, 569, 570, 572, 583], "under": [530, 539, 540, 541, 542, 543, 546, 547, 551, 552, 556, 560, 561, 562, 564, 565, 566, 569, 571, 574, 580, 583, 587], "hood": [530, 542, 547, 551, 556, 560, 562, 564, 565, 566, 569, 571, 587], "leverag": [530, 559, 578, 580], "link": [530, 536, 539, 540, 541, 546, 548, 549, 560, 562, 576, 578], "wai": [530, 532, 533, 537, 538, 539, 540, 543, 544, 545, 546, 548, 549, 559, 560, 561, 562, 564, 568, 569, 570, 571, 574, 582, 586, 587], "make": [530, 533, 534, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 578, 580, 581, 582, 583, 586, 587], "project": [530, 532, 533, 534, 537, 540, 541, 544, 545, 546, 562, 570, 573, 574, 576, 578, 580, 583, 587], "research": [530, 532, 573, 580, 587], "develop": [530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 546, 548, 563, 573, 574, 575, 578, 579, 580, 581, 582, 585, 586, 587], "deploi": [530, 548, 575, 578, 579, 580, 582, 586], "wanto": 530, "effici": [530, 540, 541, 547, 554, 556, 557, 559, 562, 566, 569, 574, 580, 582, 583], "redund": [530, 541, 549, 553, 560, 564], "eagerli": 530, "lazili": 530, "instantli": 530, "eager_graph": 530, "lazy_graph": 530, "publish": [530, 534, 574], "pipelin": [530, 532, 537, 542, 543, 544, 561, 571, 575, 580, 581, 586], "variou": [530, 541, 543, 549, 552, 553, 555, 557, 558, 560, 561, 562, 573, 575, 576, 578, 579, 580, 583, 586], "tool": [530, 531, 534, 541, 551, 567, 571, 573, 574, 578, 579, 580, 581, 583, 586, 587], "job": [530, 548], "applii": 530, "perk": [530, 544, 547], "essenti": [530, 532, 533, 539, 547, 550, 551, 556, 560, 563, 586], "mainli": [530, 541, 542, 558, 562, 567, 569, 575, 580], "handler": [530, 554, 565, 567, 571, 575], "what": [530, 533, 534, 536, 541, 542, 546, 547, 548, 551, 552, 555, 557, 558, 560, 561, 562, 565, 566, 568, 569, 570, 571, 573, 574, 576, 581, 582, 585], "behind": [530, 541, 542, 555, 562, 565, 567], "scene": [530, 531, 532, 542, 565, 567, 580], "likewis": [530, 541, 547, 549, 552, 555, 556, 560, 564, 569, 586], "facilit": [530, 557], "agnost": [530, 540, 544, 555, 566, 568, 571, 574, 586, 587], "jnp": [530, 549, 550, 553, 555, 559, 563, 566, 571], "tf": [530, 544, 549, 550, 555, 559, 560, 562, 563, 564, 566, 571, 574, 575, 580], "mse_loss": 530, "jax_ms": 530, "tf_mse": 530, "np_mse": 530, "torch_ms": 530, "mymodel": [530, 569], "linear0": [530, 569, 570], "linear1": [530, 569, 570], "_forward": [530, 552, 566, 569, 570], "put": [530, 539, 546, 562, 574, 586], "togheth": 530, "ll": [530, 534, 535, 540, 541, 546, 551, 558, 559, 569], "someth": [530, 541, 563, 569, 570, 574, 586], "easili": [530, 533, 540, 544, 548, 560, 564, 569, 570, 571, 574, 580, 586, 587], "favorit": 530, "x_in": [530, 569, 570, 571], "loss_fn": [530, 569, 570, 571], "finish": [530, 535, 539, 540, 542], "usabl": [530, 555, 563], "cover": [530, 539, 543, 544, 546, 551, 552, 556, 557, 562, 564, 565], "topic": [530, 557, 568, 580], "mechan": [530, 548, 572, 574], "vision": [530, 536, 572, 576, 586], "robot": [530, 572], "reinforc": [530, 573], "gym": 530, "builder": [530, 537, 572, 574, 575], "trainer": [530, 534, 572, 574, 587], "loader": [530, 569, 574], "break": [530, 545, 549, 554, 555, 563, 574], "highli": [530, 564, 580], "flexibl": [530, 547, 555, 558, 563, 564, 580], "everyon": [530, 534, 535, 541, 574], "plan": [530, 573], "interoper": [530, 533, 577, 578, 580, 583], "There": [530, 532, 539, 540, 541, 543, 544, 546, 547, 549, 551, 553, 554, 556, 558, 560, 561, 566, 569, 574, 581, 582, 586, 587], "environ": [530, 535, 536, 541, 573, 580, 582], "easiest": [530, 537, 540], "command": [530, 537, 540, 543, 546, 548, 557], "python3": [530, 536, 540, 541, 553], "pre": [530, 536, 539, 562, 571, 574, 580], "pull": [530, 534, 535, 536, 539, 540, 543, 551, 563, 564, 574], "unifyai": [530, 536, 537, 540, 541, 546], "advantag": [530, 541, 559, 560, 580], "everyth": [530, 534, 539, 541, 542, 548, 551, 560, 561, 562, 563, 567, 574], "sweat_smil": 530, "git": [530, 536, 537, 538, 540, 541, 543, 546, 548, 562], "clone": [530, 536, 537, 541], "github": [530, 532, 536, 537, 538, 539, 541, 543, 548, 549, 551, 552, 562], "com": [530, 536, 537, 540, 543, 546, 548, 549], "cd": [530, 536, 537, 540, 541], "page": [530, 540, 541, 546, 548, 567, 568, 571, 572], "instruct": [530, 539, 540, 543, 553, 561, 562, 578, 581, 584, 586], "video": [530, 535, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 578], "tutori": [530, 541, 560], "quit": [530, 541, 544, 551, 552, 556, 557, 562, 564, 580, 586], "lot": [530, 533, 534, 548, 549, 557, 562, 574, 579], "jax_fn": 530, "jax_x": 530, "torch_x": 530, "torch_fn": 530, "focus": [530, 563, 573, 578, 579, 580, 586, 587], "architectur": [530, 540, 571, 574, 578, 579, 580, 583, 584, 585], "orient": [530, 573], "contributor": [530, 535, 540, 541, 560, 565, 580], "explain": [530, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 576, 583, 586], "nuanc": 530, "background": [530, 540, 546, 580, 582], "contextualis": 530, "problem": [530, 533, 541, 543, 544, 546, 560, 568, 576, 582, 586], "explos": [530, 531, 533], "why": [530, 531, 533, 541, 546, 559, 568], "adher": [530, 532, 533, 543, 549, 552, 555, 564, 566, 571, 576, 577, 586], "lastli": [530, 544], "paint": [530, 532, 566], "pictur": [530, 532, 539, 566], "role": [530, 541, 560, 567, 581, 583, 587], "plai": [530, 544, 560, 562, 571, 580, 583], "wide": [530, 541, 562, 578, 580], "demo": [530, 536, 573], "showcas": [530, 551, 573], "shorter": [530, 568], "ensp": 530, "pretrain": 530, "eff_encod": 530, "efficientnet_v2": 530, "efficientnetv2b0": 530, "include_top": 530, "imagenet": 530, "input_shap": 530, "224": 530, "nois": 530, "torch_eff_encod": 530, "classifi": 530, "num_class": [530, 571], "fc": [530, 570], "customiz": [530, 546], "rand": 530, "script": [530, 536, 540, 541, 548, 551, 566, 574, 580], "deepmind_perceiver_io": 530, "perceiver_backbon": 530, "dummy_input": 530, "rng": [530, 571], "backbon": [530, 566, 569], "params_v": 530, "perceiverioclassifi": 530, "max_pool": 530, "maxpool2d": 530, "1024": 530, "sm_framework": 530, "segmentation_model": 530, "sm": 530, "torch_sm": 530, "metric": [530, 574], "iou_scor": 530, "rax": 530, "torch_rax": 530, "poly1_softmax_loss": 530, "madmom": 530, "madmon": 530, "torch_madmom": 530, "freq": 530, "audio": 530, "hz2midi": 530, "todo": [530, 539, 549, 560, 562], "timm": 530, "mlp_encod": 530, "create_model": 530, "mixer_b16_224": 530, "randn": 530, "output_dens": 530, "maxpooling1d": 530, "pool_siz": 530, "kornia": 530, "pil": 530, "tf_kornia": 530, "url": 530, "cocodataset": 530, "train2017": 530, "000000000034": 530, "jpg": 530, "raw_img": 530, "img": [530, 569], "enhanc": 530, "sharp": 530, "tf_rax": 530, "tf_madmom": 530, "hk": [530, 571], "_forward_classifi": 530, "rng_kei": 530, "prngkei": [530, 571], "forward_classifi": 530, "hk_eff_encod": 530, "dummy_x": 530, "jax_kornia": 530, "jax_sm": 530, "jax_madmom": 530, "np_kornia": 530, "np_sm": 530, "np_rax": 530, "Or": [530, 537, 569], "yourself": [530, 539, 541, 560, 562, 564, 573], "anyon": [530, 533, 535, 541, 548, 574, 586], "classif": [530, 580], "ivynet": 530, "h_w": 530, "extractor": 530, "sequenti": [530, 546, 547, 570], "image_height": 530, "image_width": 530, "favourit": [530, 540], "pure": [530, 552, 555, 560, 564, 568, 571, 574, 580, 586, 587], "generate_batch": 530, "dataset_s": 530, "y_train": 530, "num_correct": 530, "y_pred": 530, "model_nam": 530, "hyperparam": 530, "num_epoch": 530, "epoch": 530, "epoch_loss": 530, "running_loss": 530, "training_accuraci": 530, "train_loss": 530, "train_correct": 530, "train_loop": 530, "tqdm": 530, "xbatch": 530, "ybatch": 530, "ybatch_encod": 530, "loss_prob": 530, "batch_loss": 530, "set_descript": 530, "set_postfix": 530, "accuracy_percentag": 530, "naverag": 530, "6f": 530, "plot": [530, 580], "_train_summari": 530, "csv": 530, "writer": 530, "writerow": 530, "prepar": [530, 548], "folder": [530, 536, 540, 541, 543, 546, 548, 556, 560, 562, 563], "believ": [530, 533, 541], "bug": [530, 541, 546, 560, 562, 563], "feedback": [530, 548], "welcom": [530, 535, 540, 541], "appreci": 530, "info": [530, 552], "amaz": 530, "acceler": [530, 560, 578, 582, 583, 584, 585], "journei": [530, 535], "achiev": [530, 548, 549, 554, 557, 562, 564, 569, 571, 575], "ambiti": 530, "goal": [530, 533, 539, 580, 586], "season": 530, "server": [530, 540, 541, 546, 580], "perfect": [530, 573], "ask": [530, 534, 539, 540, 551, 566, 568, 574], "idea": [530, 534, 536, 560, 563, 567, 573, 579], "fellow": 530, "team": [530, 535, 539, 540, 541, 560, 582], "twitter": 530, "sneak": 530, "peek": 530, "certainli": [530, 533, 586], "great": [530, 533, 534, 541, 562, 566, 568, 586], "stai": [530, 548], "proper": [530, 539, 560], "credit": 530, "accompani": 530, "paper": [530, 534], "continu": [530, 533, 534, 538, 539, 540, 542, 543, 554, 562, 574, 580], "articl": 530, "lenton2021ivi": 530, "titl": [530, 539, 541, 546, 560], "templat": [530, 546, 552, 562], "inter": [530, 561], "author": [530, 539, 541, 578, 582], "lenton": 530, "daniel": 530, "pardo": 530, "fabio": 530, "falck": 530, "fabian": 530, "jame": 530, "stephen": 530, "clark": 530, "ronald": 530, "journal": 530, "arxiv": 530, "preprint": 530, "2102": 530, "02886": 530, "year": [530, 532, 534, 543, 574, 580], "huge": [531, 533, 548, 569, 580, 586], "collabor": [531, 532, 533], "consortium": [531, 533], "grown": 532, "consider": [532, 551, 555, 564, 577, 578], "recent": [532, 533, 540, 541, 562], "especi": [532, 540, 564, 580], "rapidli": 532, "repo": [532, 536, 538, 541, 543, 546, 548, 549, 560, 561, 562, 563], "wonder": [532, 534, 568], "thing": [532, 533, 534, 538, 539, 540, 541, 545, 554, 560, 562, 564, 568, 569, 580], "evolv": [532, 580], "shareabl": 532, "hinder": [532, 555], "outdat": 532, "matter": [532, 551], "month": [532, 540], "rigor": [532, 562], "newest": 532, "softwar": [532, 533, 540, 541, 578, 583, 584, 585], "rapid": [532, 533, 540, 580], "prototyp": [532, 580], "vital": [532, 571], "signific": [532, 533, 574, 580], "bottleneck": 532, "quickli": [532, 534, 540, 541, 548, 569, 570, 580, 587], "obsolet": [532, 534], "constantli": [532, 563, 564], "invent": 532, "wheel": 532, "simultan": [532, 534], "modern": [532, 533, 558, 585], "scalabl": [532, 566, 585, 586], "exactli": [532, 534, 547, 548, 549, 550, 551, 562, 564], "univers": [532, 560], "languag": [532, 534, 560, 564, 566, 575, 578, 581, 583, 584, 585, 586], "front": [532, 560, 565, 566, 569, 578, 580], "runner": 532, "littl": [532, 568, 582], "principl": [532, 578, 580, 583], "almost": [532, 538, 547, 561, 567, 569], "syntax": [532, 533, 549, 554, 580], "unsurprisingli": [532, 551], "fundament": [532, 548, 560, 564, 566, 580], "2006": 532, "cut": [532, 586], "cloth": 532, "central": [533, 539, 564, 586], "forgiven": 533, "eyebrow": 533, "somehow": 533, "strong": [533, 574, 580], "industri": [533, 580, 582], "wors": 533, "funni": 533, "comic": 533, "strip": 533, "easi": [533, 540, 541, 544, 547, 556, 558, 561, 562, 564, 578, 580, 586, 587], "feasibl": [533, 539, 548], "unlik": [533, 543, 547, 548, 551, 559, 585, 587], "charger": 533, "charact": [533, 554, 560], "instant": 533, "mandat": [533, 549, 559, 562, 563], "adopt": [533, 541, 544, 555, 564, 579, 580, 585], "despit": [533, 547, 549, 550, 561, 564, 566, 577, 580], "bring": [533, 543, 562, 566, 567, 575], "benefit": [533, 534, 540, 544, 547, 556, 559, 564, 568, 569, 574, 578, 582, 585], "unrel": [533, 541], "contrari": 533, "bumpi": 533, "road": 533, "allud": [533, 569], "technologi": [533, 578, 582], "success": 533, "thank": [533, 569], "bio": [533, 540], "pcie": 533, "interfac": [533, 568, 571, 574, 575, 576, 577, 578, 579, 580, 584, 587], "motherboard": 533, "raid": 533, "storag": [533, 569], "virtual": [533, 536, 541, 560, 583, 584], "bluetooth": 533, "wireless": 533, "exchang": [533, 538, 576, 578], "btx": 533, "sata": 533, "host": [533, 537, 548, 574, 585], "tcp": 533, "ip": 533, "commun": [533, 535, 539, 540, 541, 574, 579, 580, 582], "smtp": 533, "send": [533, 585], "gmail": [533, 548], "outlook": 533, "pop": [533, 540], "email": [533, 548], "live": [533, 534, 549, 576, 578], "did": [533, 539, 546, 571, 586], "aris": [533, 549, 574], "until": [533, 541, 554, 563, 566, 574, 587], "substanti": [533, 541, 544, 549, 562, 580], "innov": 533, "growth": [533, 583], "necess": 533, "parti": [533, 546, 574, 579, 580, 586], "engag": [533, 535, 541], "regard": [533, 538, 547, 560, 561, 564], "2015": [533, 580], "alongsid": 533, "frame": [533, 573, 580], "matur": [533, 574, 580], "preced": [533, 570], "mention": [533, 539, 540, 541, 544, 551, 555, 556, 559, 560, 562, 564, 580], "aros": 533, "effort": [533, 535, 574, 576, 580, 586], "stage": [533, 535, 541, 542, 546, 554, 562, 580], "mission": [533, 582], "At": [533, 539, 540, 543, 560, 562, 563, 580], "ourselv": [533, 586], "quansight": [533, 586], "compani": [533, 576], "organ": [533, 544, 547, 556, 560, 563, 575], "panda": 533, "scipi": [533, 582, 587], "conda": [533, 540, 582], "apach": [533, 582, 586], "mxnet": [533, 587], "onnx": [533, 578, 586], "scikit": 533, "jupyt": [533, 582], "aw": 533, "cupi": [533, 580, 587], "net": [533, 534, 566, 571], "sympi": 533, "modin": 533, "spyder": 533, "member": [533, 539, 541, 560], "googl": [533, 548], "octoml": [533, 586], "further": [533, 534, 541, 543, 544, 548, 551, 553, 555, 560, 562, 565, 566, 569, 570, 585, 586], "sponsor": 533, "lg": 533, "electron": 533, "microsoft": [533, 580, 585, 587], "shaw": 533, "intel": [533, 578, 585], "promis": 533, "pursuit": 533, "unif": [533, 535, 568, 576, 586], "clearli": [533, 539, 541, 551, 561, 562, 584], "thought": [533, 540, 541, 555, 578], "care": [533, 541, 560, 564, 571], "gone": [533, 565], "simplifi": [533, 553, 560, 566, 567, 570, 576, 578, 579, 580, 583, 586, 587], "excit": [533, 535, 542], "complianc": 533, "hope": [533, 574, 586], "suit": [533, 540, 542, 543, 548, 562, 569, 573, 575, 580, 586], "motiv": [533, 568], "convinc": 533, "celebr": 533, "encourag": [533, 573, 574], "foundat": [533, 583], "perfectli": 534, "happi": [534, 540, 574], "abund": 534, "better": [534, 536, 542, 560, 561, 563, 564, 565, 568, 569, 570, 583], "streamlin": [534, 583], "workflow": [534, 539, 541, 545, 549, 558, 560, 569, 572, 575, 579, 586, 587], "week": [534, 541], "sai": [534, 540, 557, 568], "deepmind": 534, "releas": [534, 539, 540, 541, 549, 560, 563, 564, 574, 580, 586], "awesom": 534, "love": 534, "perceiverio": 534, "slew": 534, "rush": 534, "inevit": [534, 581], "often": [534, 538, 543, 553, 554, 555, 556, 560, 562, 574, 581, 584, 587], "erron": 534, "poor": 534, "repositori": [534, 536, 537, 540, 541, 542, 543, 554], "confus": [534, 546, 549, 553, 559, 564, 575], "hour": [534, 548], "spent": 534, "spin": 534, "discuss": [534, 541, 546, 549, 550, 559, 560, 562, 564, 567, 568, 569, 574, 576, 581], "sake": 534, "few": [534, 538, 539, 541, 547, 549, 550, 555, 556, 558, 559, 562, 564, 566, 567, 568, 569, 570, 572, 580, 582], "automat": [534, 539, 540, 541, 542, 546, 547, 548, 549, 554, 556, 562, 564, 565, 567, 570, 571, 575, 580, 583, 587], "wouldn": 534, "nice": [534, 562, 580], "frantic": 534, "lucid": 534, "honk": 534, "improv": [534, 541, 549, 555, 556, 564, 566, 575, 578, 580, 582, 583], "understand": [534, 536, 538, 539, 540, 541, 542, 543, 546, 551, 552, 555, 561, 564, 565, 576, 586], "hasn": 534, "spend": [534, 580], "torchvis": 534, "sonnet": 534, "said": 534, "statu": [534, 539, 548], "quo": 534, "dopamin": 534, "ignit": 534, "catalyst": 534, "lightn": 534, "fastai": 534, "flax": [534, 571, 574, 580], "trax": [534, 571], "objax": [534, 571], "offer": [534, 560, 570, 580, 586, 587], "strongli": [535, 540, 586, 587], "skill": [535, 582], "veteran": 535, "beginn": [535, 580], "aspect": [535, 558, 569, 580], "board": [535, 546], "basic": [535, 539, 551, 562], "local": [535, 536, 540, 543, 546, 556, 561, 562], "resourc": [535, 539, 548], "contribut": [536, 538, 539, 540, 541, 546, 560, 566, 584], "slightli": [536, 547, 560, 566, 570], "setup": [536, 540, 541, 546, 548], "mech": [536, 537], "grasp": [536, 560], "tree": [536, 549], "dir": [536, 569], "mutual": [536, 547, 556], "venv": [536, 553], "ivy_dev": [536, 540, 541], "bat": [536, 540, 541], "mac": [536, 540, 541], "linux": [536, 540, 541, 583, 585], "instal": [536, 537, 540, 541, 545, 546, 554, 573], "edit": [536, 539, 540, 541], "pip": [536, 540, 573], "immedi": [536, 540, 564], "ivy_robot": [536, 573], "docker": [536, 538], "desktop": [536, 540], "my": [536, 548, 563], "mount": [536, 537, 541], "rm": [536, 537, 541], "pwd": [536, 537], "pycharm": 536, "vscode": [536, 540], "devcontain": [536, 540], "remot": [536, 540, 543], "codespac": 536, "good": [536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 567, 570], "commit": [536, 539, 543, 551, 562], "make_doc": 537, "sh": [537, 540, 541, 543, 548], "ssh": [537, 548], "Then": [537, 539, 540, 541, 546, 548, 557, 563, 574], "make_docs_without_dock": [537, 546], "sphinx": [537, 546], "resours": 538, "climb": 538, "steep": 538, "curv": 538, "realpython": 538, "pyn": 538, "platform": [538, 540, 578, 582, 584], "pilot": 538, "stuck": [538, 539], "spell": 538, "though": [538, 539, 541, 549, 552, 556, 559, 560, 564, 569, 574], "sound": [538, 548, 565], "peopl": [538, 540, 541, 542, 580, 582], "action": [538, 548, 551, 562], "frequent": [539, 541, 580], "outlin": [539, 540, 541, 542, 547, 549, 552, 556, 559, 560, 562], "broad": [539, 582], "individu": [539, 541, 543, 549, 556, 559, 560, 580, 583, 586, 587], "explan": [539, 541, 547, 552, 555, 560, 568], "focu": [539, 558, 578, 579, 582, 587], "pypi": [539, 540, 574], "familiar": [539, 540], "sure": [539, 540, 541, 543, 548, 560, 561, 562, 564], "aforement": 539, "categori": [539, 543, 544, 547, 549, 560, 563, 565], "arraywithelementwis": [539, 544, 568], "containerwithmanipul": 539, "thorough": [539, 552, 555, 562], "comment": [539, 540, 541, 543, 546, 549, 554, 560], "add_reformatting_checklist_": 539, "category_nam": [539, 549, 550, 552, 555, 556], "pr": [539, 541, 543, 560, 561, 562], "autom": [539, 548, 562, 575, 582], "bot": 539, "markdown": [539, 546], "text": [539, 541, 546, 551, 552], "patient": [539, 540], "symbol": [539, 540, 580, 581], "emoji": 539, "legend": 539, "review": [539, 541, 548, 551, 560, 563], "checkbox": [539, 540], "proce": [539, 540], "elabor": 539, "struggl": 539, "assigne": 539, "status": 539, "refrain": 539, "transpil": [539, 553, 560, 565, 566, 567, 575, 580, 586, 587], "subsect": [539, 541, 543, 548], "verifi": [539, 549, 550, 560, 562, 563], "func_nam": [539, 551, 552, 556, 560], "simpler": [539, 541, 560, 581, 587], "suggest": [539, 540, 541, 546, 549, 558, 560, 562, 563], "assess": [539, 564], "merg": [539, 541, 543, 548, 560, 580], "composition": [539, 559], "pend": 539, "helpfulli": [539, 564, 578], "problemat": [539, 540], "unimpl": 539, "issue_link": 539, "alias_nam": 539, "notic": [539, 544, 548, 564], "push": [539, 541, 543, 554, 561, 562, 586], "liner": 539, "meanwhil": [539, 548], "reselect": 539, "placement": 539, "categoris": [539, 543, 560], "faithfulli": 539, "creation_routin": [539, 561], "indexing_routin": 539, "ma": 539, "manipulation_routin": 539, "mathematical_funct": [539, 560], "sorting_searching_count": 539, "ufunc": [539, 560], "matrix_and_vector_product": 539, "matrix_eigenvalu": 539, "norms_and_other_numb": 539, "solving_equations_and_inverting_matric": 539, "seem": [539, 540, 564, 570, 571, 574, 580], "gleam": 539, "uncom": 539, "test_numpy_inn": 539, "test_frontend": [539, 548, 561], "unsur": [539, 562], "explor": [539, 540, 541, 549, 564, 567, 571, 573, 580, 583], "confirm": 539, "backend_nam": [539, 545, 549, 550, 552, 555, 556, 557], "relevant_submodul": 539, "sometim": [539, 540, 541, 543, 549, 556, 560, 562, 563, 564], "recreat": [539, 543], "defer": [539, 544, 547, 549, 550, 556, 557, 559, 560, 562, 586], "clearer": [539, 553, 561, 569], "mind": [539, 544, 547, 562], "realli": [540, 547, 574, 585, 586], "button": [540, 541], "your_usernam": 540, "gh": 540, "your_fold": 540, "sync": [540, 543], "cours": [540, 541, 543, 544, 551, 560, 563, 564, 569, 574, 585, 586], "whatev": [540, 547, 574], "elig": 540, "student": 540, "licenc": 540, "remind": 540, "licens": [540, 583], "expir": 540, "profession": 540, "trial": 540, "jetbrain": 540, "bui": [540, 586], "paid": 540, "pace": 540, "person": [540, 541], "experi": [540, 553, 562, 567, 569, 574], "abil": [540, 564, 567, 574, 580], "perhap": [540, 568, 569, 570, 574, 586], "click": [540, 541, 548, 552, 567], "icon": [540, 541], "panel": 540, "builtin": [540, 568, 570], "cmd": 540, "virtualenv": 540, "tick": [540, 541, 548], "test_array_api": [540, 541, 543, 562], "txt": [540, 543, 546, 563], "visual": [540, 546, 560, 574, 580, 582, 585], "mitig": [540, 586], "conflict": [540, 541, 548, 560, 569], "wsl": 540, "powershel": 540, "admin": 540, "visit": [540, 541, 548], "deploy": [540, 579, 582, 583, 586, 587], "menu": 540, "On": [540, 549, 560, 562, 564, 567, 571], "tag": [540, 541], "introspect": 540, "usr": 540, "debug": [540, 541, 547, 548, 558, 562, 564, 569, 580], "dialog": 540, "caus": [540, 541, 543, 545, 546, 547, 548, 549, 551, 559, 561, 562, 574], "earlier": [540, 541], "virtualis": 540, "dropdown": 540, "dockerfil": 540, "navig": [540, 541, 542], "tab": [540, 548, 569], "m1": 540, "optional_m1_1": 540, "optional_m1_2": 540, "sudo": 540, "apt": 540, "ca": 540, "certif": 540, "curl": 540, "gnupg": 540, "lsb": 540, "mkdir": [540, 548], "keyr": 540, "fssl": 540, "download": [540, 562], "gpg": 540, "dearmor": 540, "echo": [540, 548], "deb": 540, "arch": 540, "dpkg": 540, "lsb_releas": 540, "tee": 540, "null": 540, "ce": 540, "cli": 540, "containerd": 540, "io": [540, 548], "plugin": 540, "systemctl": 540, "permiss": [540, 548], "press": [540, 541, 569], "ok": 540, "successful": 540, "face": [540, 558, 564, 566, 580, 586], "4a": 540, "socket": 540, "chmod": [540, 548], "rwx": 540, "sock": 540, "pid": 540, "coupl": [540, 544, 568, 570, 580], "test_ab": [540, 562], "editor": 540, "pytest": [540, 541, 543, 548, 562], "keyboard": 540, "displai": [540, 546, 547, 553, 562, 569], "screenshot": 540, "ctrl": [540, 541], "test_elementwis": 540, "bar": [540, 546], "shell": [540, 541], "run_tests_cli": [540, 543], "run_ivy_core_test": 540, "run_ivy_nn_test": 540, "run_ivy_stateful_test": 540, "run_test": [540, 548], "test_depend": 540, "test_ivy_cor": 540, "test_ivy_nn": 540, "test_ivy_st": 540, "test_": [540, 561], "test_cor": [540, 541, 561], "wish": [540, 560], "ivy_cor": 540, "ivy_nn": 540, "ivy_st": 540, "simplest": [540, 551, 562, 564], "header": [540, 541], "advanc": [540, 579], "arrow": 540, "test_stat": 540, "test_submodule_nam": 540, "test_function_nam": 540, "debugg": 540, "studio": 540, "afterward": [540, 569], "restart": 540, "overlap": [540, 548, 563, 564, 581], "test_file_path": 540, "test_fn_nam": 540, "engin": [540, 580, 582, 583], "comma": 540, "postcreatecommand": 540, "bash": [540, 541, 543], "post_create_command": 540, "poststartcommand": 540, "safe": [540, 560], "containerworkspacefold": 540, "reopen": 540, "test_fle_path": 540, "slash": 540, "headach": 540, "arm": [540, 541], "vm": [540, 548], "azur": 540, "cloud": [540, 548, 573, 582], "longer": [540, 549, 557, 559, 562, 580], "worri": 540, "usual": [540, 543, 560, 562, 564], "theme": [540, 546], "slow": 540, "ipad": 540, "browser": [540, 546], "cool": [540, 563], "quota": 540, "requisit": 540, "pane": [540, 541, 548], "readi": 540, "master": [540, 541, 543, 548, 563, 580], "box": 540, "upto": [540, 541], "minut": [540, 548], "subsequ": [540, 544, 548, 549, 551, 555, 556, 559, 562, 564, 570, 581], "launch": 540, "approach": [540, 541, 544, 547, 549, 556, 557, 560, 562, 564, 568, 569, 574, 577, 584, 586], "colour": 540, "chanc": 540, "troubleshoot": 540, "ever": 540, "flask": 540, "toolbar": [540, 541], "_array_modul": [540, 543], "array_api_test": [540, 541, 543], "refresh": 540, "conftest": 540, "nutshel": [540, 555], "hook": 540, "lint": 540, "attempt": [540, 554, 574], "succe": 540, "properli": [540, 542, 553, 560, 562], "quick": [541, 542, 561, 570], "tendenc": 541, "land": 541, "world": [541, 582], "come": [541, 544, 548, 560, 563, 564, 570, 572, 575, 580], "fly": [541, 580], "hard": [541, 568, 580], "respons": [541, 548, 549], "internship": 541, "serv": [541, 544, 547, 555, 556, 560, 562, 564, 565, 575, 578], "suspect": 541, "act": [541, 551, 574, 587], "iii": 541, "reformat": [541, 554], "issue_numb": 541, "No": [541, 548, 580], "clean": [541, 563, 564, 566, 567, 569], "soon": [541, 548, 549, 572, 574], "respond": 541, "dai": 541, "freed": 541, "basi": [541, 543, 569], "situat": [541, 548, 571], "upon": [541, 551, 559, 562, 564, 574, 579, 580], "unabl": [541, 564], "obvious": [541, 548], "qualiti": 541, "hypothet": 541, "frustrat": 541, "delai": 541, "busi": 541, "fine": [541, 549, 551, 560, 568, 571, 586], "inact": 541, "me": 541, "unfairli": 541, "investig": 541, "incomplet": 541, "assign": [541, 545, 549, 554, 559, 568], "regist": 541, "wherea": [541, 544, 547, 549, 550, 551, 555, 556, 562, 563, 571, 577], "invit": 541, "roadmap": [541, 548], "ideal": [541, 548, 559, 564, 569], "easier": [541, 543, 544, 549, 560, 561, 563, 575, 580, 582], "forth": 541, "rare": [541, 550, 574, 585], "scenario": [541, 558], "someon": [541, 574], "unfortun": [541, 546], "practic": [541, 548, 560, 583], "separ": [541, 544, 547, 548, 562, 566, 568, 569, 581, 585], "date": [541, 563], "complic": [541, 561, 566], "merge_with_upstream": 541, "name_of_your_branch": 541, "abort": 541, "tediou": [541, 551, 564], "stash": 541, "reinstat": 541, "fetch": [541, 543, 548], "uncommit": 541, "unstag": 541, "untrack": 541, "comprehens": [541, 543], "atlassian": 541, "wrote": 541, "piec": [541, 544, 556, 557, 566, 576, 578], "blame": 541, "revis": 541, "eg": 541, "past": [541, 543, 561, 562, 580], "grep": 541, "commit_id": 541, "handi": 541, "histori": 541, "toggl": 541, "highlight": [541, 548, 551, 560], "whenev": [541, 548, 549, 553, 557, 559, 562, 569], "think": [541, 548, 551, 581], "approv": 541, "hash": [541, 569], "cancel": 541, "speedup": 541, "unavail": 541, "tickbox": 541, "span": [541, 564, 578, 586], "intent": [541, 559], "discourag": 541, "philosophi": 541, "valuabl": 541, "infrequ": 541, "earli": [541, 580], "wast": [541, 548], "spot": [541, 551, 556], "mistak": [541, 554], "propos": [541, 560, 564, 580], "mountain": 541, "advoc": [541, 574], "actual": [541, 542, 548, 556, 559, 560, 561, 562, 564, 565, 570, 574, 581, 586], "aim": [541, 543, 560, 562, 565, 578, 580, 583], "session": [541, 580], "beauti": 541, "particularli": [541, 569, 574, 578], "concern": [541, 542, 547, 551, 559, 564, 565, 586], "undo": 541, "stress": 541, "nifti": 541, "reassur": 541, "isol": [541, 581, 586], "fact": [541, 543, 548, 560, 562, 566, 569], "local_path_to_ivi": 541, "subfold": [541, 561, 562, 563], "dep": 541, "fresh": 541, "arsen": 541, "declar": 541, "exec": 541, "rf": 541, "cp": 541, "ivy_contain": 541, "test_imag": 541, "test_random_crop": 541, "test_creation_funct": 541, "test_arang": 541, "cursor": 541, "alt": 541, "blog": 541, "breakpoint": 541, "gutter": 541, "caret": 541, "f8": 541, "f9": 541, "Into": 541, "f7": 541, "smart": 541, "interest": 541, "fragment": [541, 576, 578, 582], "pychram": 541, "dummi": 541, "wherein": [541, 557, 562], "failur": [541, 548, 561, 562], "who": [542, 553, 565, 574, 580, 582], "weed": [542, 565], "tour": 542, "superset": [542, 560, 574], "goe": [542, 564], "dynam": [542, 549, 550, 559, 560, 566, 580, 584], "borrow": 542, "conjunct": 543, "establish": [543, 582], "2020": [543, 580], "popular": [543, 580], "sens": [543, 551, 560, 568], "unconnect": 543, "decis": [543, 547, 549, 560, 564, 566, 568, 580], "checkout": [543, 562], "everytim": [543, 549], "thoroughli": 543, "ci": [543, 549, 554, 561, 562, 574], "test_linalg": [543, 561], "test_set_funct": 543, "test_signatur": 543, "excess": [543, 545, 551], "array_modul": 543, "vv": 543, "test_manipulation_funct": 543, "test_concat": [543, 562], "nb": 543, "liber": 543, "bodi": [543, 562], "fortun": 543, "falsifi": [543, 562], "______________________": 543, "test_remaind": 543, "_______________________": 543, "test_operators_and_elementwise_funct": 543, "1264": 543, "st": [543, 561, 562], "1277": 543, "binary_param_assert_against_refimpl": 543, "ctx": 543, "mod": 543, "620": 543, "binary_assert_against_refimpl": 543, "324": 543, "scalar_o": 543, "assertionerror": [543, 553, 561, 562], "17304064": 543, "binaryparamcontext": 543, "reproduce_failur": [543, 562], "axic42baaowcnp": 543, "rumwmabaear0": 543, "make_binary_param": 543, "dh": 543, "numeric_dtyp": 543, "left_strat": 543, "left_sym": 543, "right_strat": 543, "right_sym": 543, "right_is_scalar": 543, "binary_param_assert_dtyp": 543, "binary_param_assert_shap": 543, "led": [543, 582], "unexpectedli": 543, "discrep": [543, 561], "varieti": [543, 548, 549, 550, 562, 576, 578, 582, 583, 586, 587], "test_asarray_arrai": 543, "test_floor_divid": 543, "health": 543, "test_iop": 543, "__imod__": 543, "isequ": 543, "test_matrix_norm": 543, "alter": 543, "tweak": 543, "array_api_methods_to_test": 543, "test_trac": 543, "latter": [543, 545, 549, 552, 560], "scheme": [543, 570, 580], "test_special_cas": 543, "__ipow__": 543, "is_integ": 543, "revisit": [543, 555], "_data": [544, 560, 568], "organiz": [544, 547, 560], "inherit": [544, 547, 553, 568, 574, 575], "bear": [544, 547, 549, 560], "underpin": [544, 547, 566], "programmat": [544, 547, 581], "backup": [544, 546, 547], "accident": [544, 547, 560], "readabl": [544, 547, 553, 555, 562, 563, 568, 569], "absent": [544, 547], "auto": [544, 546, 547, 569], "__mul__": [544, 547, 551, 555, 564, 568], "throw": [544, 549, 553, 568, 580], "imposs": 544, "firstli": [544, 549, 551, 552, 553, 556, 557, 559, 564, 569, 576, 586], "anywai": [544, 557, 560], "secondli": [544, 549], "permit": [544, 555, 560, 562, 564], "standalon": [544, 562, 575, 576, 581, 586, 587], "__ivy_array_function__": 544, "inspir": [544, 573], "__torch_function__": 544, "myarrai": 544, "handled_funct": 544, "notimpl": [544, 554], "four": [544, 549, 551, 555, 556, 562, 564, 569], "enough": [544, 548, 562, 568, 569, 570], "ivy_funct": 544, "my_ab": 544, "my_arrai": 544, "Of": [544, 560, 569, 585, 586], "subset": [544, 548, 552, 555, 558, 560, 562, 566, 580], "implicit_backend": [545, 566], "__dict__": [545, 566], "ivy_original_dict": [545, 566], "get_backend": [545, 556], "opt": [545, 549, 559, 562, 563, 564], "previous_backend": 545, "fallback": 545, "unset_backend": 545, "backend_handl": [545, 566], "requires_grad": 545, "memory_format": 545, "preserve_format": 545, "weren": 545, "vast": [545, 549, 580], "minor": [545, 564, 574], "fn_name_v_1p12_and_abov": 545, "fn_name_v_1p01_to_1p1": 545, "heavili": [546, 557, 560, 574], "characterist": 546, "conf": 546, "cleanup": 546, "disabl": 546, "procedur": [546, 548, 551], "segment": [546, 551], "toctre": 546, "maxdepth": 546, "related_work": 546, "deep_div": 546, "glossari": 546, "autosummari": 546, "top_level_toc": 546, "restructuredtext": 546, "render": [546, 552], "inlin": 546, "discov": [546, 549], "ivy_toctree_caption_map": 546, "stub": 546, "inturn": 546, "forc": [546, 548], "demonstr": [546, 549, 551, 553, 568], "underlin": 546, "remove_before_her": 546, "top_level_modul": 546, "fullnam": 546, "endfor": 546, "\u2139": 546, "foo": 546, "candid": 546, "postprocess": 546, "linker": 546, "discussion_channel_map": 546, "1000043690254946374": 546, "1028298816526499912": 546, "1000043749088436315": 546, "1028298847950225519": 546, "seri": [546, 560, 562, 580, 582], "discussion_paragraph": 546, "discord_link": 546, "channel_link": 546, "forum_link": 546, "gg": 546, "zvqdvbznqj": 546, "799879767196958751": 546, "channel_id": 546, "forum_id": 546, "paragraph": 546, "autoskippablemethod": 546, "skippable_method_attribut": 546, "__qualname__": 546, "five": [547, 569], "recap": [547, 551, 570], "arbitrarili": [547, 557, 569], "multi_map": 547, "containerwithelementwis": 547, "__repr__": 547, "__getattr__": 547, "__setattr__": 547, "__contains__": 547, "__getstate__": 547, "__setstate__": 547, "unpickl": 547, "num_dim": [547, 571], "__len__": 547, "restrict": [547, 548, 560, 566, 577], "enforc": [547, 568], "extern": [547, 555, 560, 562, 563], "c1": 547, "lefthand": 547, "righthand": 547, "addition": [547, 559, 560, 586], "counterpart": [547, 557], "absenc": [547, 555, 580], "implicitli": [547, 558, 562, 566], "log_pr": [547, 556, 559], "intuit": [547, 562, 569, 570, 576], "chronolog": 547, "concurr": [547, 548, 556, 580], "had": [547, 548, 559, 566, 580, 581], "But": [547, 548, 552, 557, 559, 564, 571], "flow": [547, 573, 580, 581], "implic": 547, "whatsoev": [547, 556, 575, 586], "implicit": [547, 552, 560, 562, 566, 580], "eager": [547, 574, 580], "children": 547, "shallowest": 547, "deepest": 547, "regularli": 548, "rollback": 548, "incorpor": [548, 569, 580], "fold": 548, "techniqu": 548, "triplet": 548, "test_torch": [548, 561], "test_tensor": [548, 561], "test_torch_instance_arctan_": 548, "7284": 548, "daili": 548, "shoot": 548, "impact": [548, 562, 570, 582], "_reduce_loss": 548, "test_nn": 548, "test_loss": 548, "test_binary_cross_entropy_with_logit": 548, "test_cross_entropi": 548, "test_binary_cross_entropi": 548, "test_sparse_cross_entropi": 548, "test_loss_funct": 548, "test_torch_binary_cross_entropi": 548, "test_torch_cross_entropi": 548, "torch_binary_cross_entropi": 548, "torch_cross_entropi": 548, "underneath": [548, 578], "magic": 548, "statement": [548, 554, 559, 562, 564, 574], "readthedoc": 548, "affect": [548, 560], "pedagog": 548, "f1": 548, "fm": 548, "yeah": 548, "cyclic": 548, "intellig": [548, 562, 564, 582], "tests_fil": 548, "file_nam": [548, 562, 563], "del": 548, "intersect": [548, 562, 573], "tests_lin": 548, "elif": [548, 553, 559, 560, 561], "correspondingli": 548, "tests_to_run": 548, "determine_tests_lin": 548, "mongodb": 548, "databas": [548, 562], "secret": 548, "db": 548, "ssh_deploy_kei": 548, "suffic": [548, 557, 562], "massiv": 548, "constraint": [548, 549, 558], "mb": 548, "yml": 548, "felicit": 548, "clone_map": 548, "home": 548, "deploy_kei": 548, "user_email": 548, "rashul": 548, "chutani": 548, "user_nam": 548, "target_branch": 548, "github_serv": 548, "deploy_key_fil": 548, "ssh_known_hosts_fil": 548, "known_host": 548, "keyscan": 548, "export": [548, 579, 586], "git_ssh_command": 548, "userknownhostsfil": 548, "methodologi": 548, "master1": 548, "restructur": 548, "index_map": 548, "test_map": 548, "routin": [548, 560, 564, 574, 580], "incorrect": 548, "snowbal": 548, "irrelev": [548, 549, 551], "recalibr": 548, "workflow_dispatch": 548, "schedul": [548, 574, 580, 587], "cron": 548, "saturdai": 548, "night": 548, "pm": 548, "gut": 548, "lesser": [548, 553], "lol": 548, "cater": 548, "master2": 548, "master32": 548, "synchron": 548, "runner2": 548, "corrupt": 548, "discard": 548, "decoupl": [548, 570], "150": 548, "cycl": [548, 562], "rashulchutani": 548, "yellow": 548, "queu": 548, "redirect": 548, "book": 548, "ran": 548, "badg": 548, "clickabl": 548, "all_dtyp": 549, "all_numeric_dtyp": 549, "all_int_dtyp": 549, "all_float_dtyp": 549, "replic": [549, 551, 558, 560, 564], "thirdli": 549, "native_float32": 549, "importantli": [549, 568, 571, 573], "conveni": [549, 550, 555, 561, 567, 569, 570, 575, 586], "arguabl": [549, 550, 560], "tabl": [549, 560, 580], "jaxarrai": [549, 550, 555, 559, 563, 566], "_handle_0_dim_output": [549, 559], "experiment": [549, 560, 563, 566, 580], "subtli": [549, 559], "promote_types_frontend_nam": 549, "promote_types_of_frontend_name_input": 549, "frontend_nam": 549, "accuraci": 549, "upcast": 549, "instabl": 549, "nearli": [549, 555, 557, 580], "downcast": 549, "footprint": 549, "concret": 549, "compound": 549, "settabl": [549, 550], "deleg": [549, 587], "shape_to_tupl": 549, "with_supported_dtyp": 549, "with_unsupported_dtyp": 549, "unment": 549, "backend_vers": 549, "_cast_for_unary_op": 549, "target_typ": 549, "unsupported_dtyp": 549, "former": [549, 552, 560], "lack": [549, 559, 580, 587], "patch": [549, 580], "subtl": [549, 563, 586], "offici": [549, 566], "inconsist": [549, 553, 558], "84530": 549, "unwarr": 549, "risk": [549, 586], "needlessli": 549, "bloat": 549, "undergo": [549, 574], "supported_dtyp": [549, 560], "unsupported_devic": 549, "supported_devic": 549, "slight": [549, 562, 570], "downsid": 549, "inflat": 549, "dual": 550, "categor": [550, 556, 560], "eight": [551, 565], "static_func_nam": 551, "op_nam": 551, "__r": 551, "combinatori": 551, "variat": [551, 560, 562], "unus": [551, 554, 559], "okai": [551, 564, 566], "meant": 551, "spec": [551, 552], "my_func": [551, 563], "some_flag": 551, "another_flag": 551, "jointli": 551, "5574077": 551, "1850398": 551, "5463025": 551, "8422884": 551, "91601413": 551, "9647598": 551, "3738229": 551, "1597457": 551, "0963247": 551, "9955841": 551, "3278579": 551, "pars": [551, 574], "asid": [551, 573], "increasingli": 551, "14254655": 551, "1578213": 551, "380515": 551, "trivial": 551, "exlud": 551, "failing_fn_nam": 551, "onlin": [551, 552], "minutest": 551, "suffici": [551, 560, 562], "fault": [551, 580], "contrast": [552, 555, 560, 586], "instanti": 552, "array_api": 552, "preview": 552, "incorrectli": 552, "needless": [552, 561], "renam": [552, 560], "judgment": 552, "operator_nam": 552, "succinct": 552, "contstructor": 552, "docst": 552, "_default": 553, "_delimit": 553, "comfort": 553, "encount": [553, 562], "julia": [553, 583, 586], "new_fn": [553, 560], "new_arg": 553, "new_kwarg": 553, "186": 553, "lib": 553, "site": [553, 581], "_src": 553, "219": 553, "_reduce_al": 553, "_ensure_optional_ax": 553, "213": [553, 562], "_reduct": 553, "lax": [553, 560, 561, 564, 571, 574], "preproc": 553, "_cast_to_bool": 553, "pos_dim": 553, "_reduction_dim": 553, "113": 553, "canon_axi": 553, "_canonicalize_axis_allow_nam": 553, "genexpr": 553, "106": 553, "maybe_named_axi": 553, "_canonicalize_axi": 553, "stdin": 553, "295": 553, "262": 553, "ivy_arg": 553, "ivy_kwarg": 553, "354": 553, "truth_value_test": 553, "121": 553, "switch": [553, 556, 557, 587], "visibl": 553, "unwieldi": 553, "awar": 553, "recov": [553, 560], "squash": 553, "hid": 553, "cleaner": [553, 569], "caught": 553, "functool": [553, 560, 568], "_print_traceback_histori": 553, "error_stack": 553, "axiserror": 553, "got": 553, "polici": [553, 562, 573], "moreov": 553, "met": 553, "flake8": 554, "annot": [554, 555], "star": 554, "byte": [554, 585, 586], "unsuccess": 554, "exceed": 554, "black": 554, "disobei": 554, "inde": [554, 555, 564, 574, 578], "adress": 555, "sole": [555, 563, 579, 580, 581], "strictli": [555, 559], "rational": 555, "__div__": [555, 564], "dicat": 555, "pep": 555, "484": 555, "brittl": 555, "freeli": 555, "technic": [555, 559, 574, 580, 582], "original_typ": 555, "cumbersom": 555, "venn": 556, "diagram": [556, 586], "light": [556, 560, 574, 575, 581, 586], "maximis": 556, "handle_mixed_funct": [556, 557, 564], "condition": 556, "reap": 556, "deal": [556, 558, 560, 574], "modif": [556, 580], "briefli": [556, 562, 569], "get_all_arrays_on_dev": 556, "inputs_to_ivy_arrai": 557, "integer_array_to_float": 557, "handle_cmd_line_arg": 557, "crucial": 558, "inter_func": 558, "custom_grad_fn": 558, "args1": 558, "detach": 558, "disambigu": 558, "eas": [558, 580], "captur": [558, 562, 571, 581], "program": [559, 577, 578, 580, 583, 584, 587], "ration": [559, 564], "speak": 559, "val_n": 559, "_is_vari": 559, "predominantli": [559, 563, 573], "support_native_out": [559, 566], "math": [559, 560, 561, 571, 578], "_wrap_fn": 559, "dim0": 559, "dim1": 559, "res_floor": 559, "mul": [559, 568], "extent": [559, 560], "maxim": [559, 566, 577, 578, 582, 583, 584], "capabl": [559, 562, 564], "input_arrai": 559, "tf_frontend": 560, "wrong": [560, 564], "torch_frontend": [560, 561], "numpy_frontend": 560, "jax_frontend": 560, "to_ivy_arrays_and_back": [560, 561], "fidel": 560, "algebra": [560, 578, 579, 580, 583, 587], "xla": [560, 574, 575, 580], "dynamic": 560, "mimic": 560, "arithmetic_oper": 560, "handle_numpy_out": 560, "handle_numpy_dtyp": 560, "handle_numpy_cast": 560, "from_zero_dim_arrays_to_scalar": 560, "_add": 560, "same_kind": 560, "subok": [560, 561, 564], "promote_types_of_numpy_input": 560, "underscor": 560, "obtain": 560, "unhandl": 560, "subclass": [560, 564], "trigonometric_funct": 560, "_tan": 560, "check_tensorflow_cast": 560, "raw_op": [560, 561], "tackl": 560, "map_raw_ops_alia": 560, "unnecessari": [560, 564], "output_typ": 560, "kwargs_to_upd": 560, "implemnt": 560, "pointwise_op": 560, "preferred_element_typ": 560, "finer": 560, "margin": 560, "meet": 560, "criteria": 560, "reduce_logsumexp": 560, "input_tensor": 560, "logsumexp": 560, "trick": 560, "max_input_tensor": 560, "omiss": 560, "sensibl": 560, "deem": 560, "reserv": 560, "resum": 560, "ahead": [560, 580], "heavi": [560, 561, 564, 581], "logicaland": 560, "np_frontend": 560, "_ivy_arrai": 560, "radd": 560, "_init_data": 560, "isinst": [560, 562, 563, 570, 571], "_process_str_data": 560, "_dtype": [560, 561, 568], "_shape": [560, 568], "govern": 560, "promote_types_of_": 560, "_input": 560, "promote_types_of_torch_input": [560, 561], "saniti": 560, "func_wrapp": 560, "handle_numpy_casting_speci": 560, "equiv": 560, "unsaf": 560, "array_type_test": 560, "_isfinit": 560, "organis": 560, "watch": 560, "youtub": 560, "jump": 561, "knowledg": 561, "lift": [561, 581], "get_dtyp": [561, 562], "dtype_and_valu": [561, 562], "get_shap": [561, 562], "np_frontend_help": 561, "test_jax": 561, "test_jax_lax_oper": 561, "dtype_and_x": [561, 562], "available_dtyp": [561, 562], "test_jax_lax_tan": 561, "test_numpi": 561, "test_mathematical_funct": 561, "test_np_trigonometric_funct": 561, "dtypes_values_cast": 561, "dtypes_values_casting_dtyp": 561, "arr_func": 561, "get_dtypes_kind": 561, "get_num_positional_args_ufunc": 561, "test_numpy_tan": 561, "handle_where_and_array_bool": 561, "test_tensorflow": 561, "test_math": 561, "test_tensorflow_tan": 561, "test_pointwise_op": 561, "test_torch_tan": 561, "_fill_valu": 561, "min_valu": [561, 562], "max_valu": [561, 562], "allow_non": [561, 562], "min_num_dim": [561, 562], "max_num_dim": [561, 562], "min_dim_s": [561, 562], "max_dim_s": 561, "test_jax_lax_ful": 561, "test_from_shape_or_valu": 561, "_input_fill_and_dtyp": 561, "dtype_and_input": 561, "dtype_to_cast": 561, "input_fill_dtyp": 561, "test_numpy_ful": 561, "test_tf_funct": 561, "test_tensorflow_fil": 561, "test_creation_op": 561, "test_torch_ful": 561, "add_nois": 561, "all_clos": 561, "_get_dtype_and_matrix": 561, "test_torch_qr": 561, "frontend_ret": 561, "frontend_q": 561, "frontend_r": 561, "walkthrough": 561, "comparison_op": 561, "test_comparison_op": 561, "num_arrai": [561, 562], "allow_inf": [561, 562], "shared_dtyp": 561, "test_torch_great": 561, "test_ndarrai": 561, "test_numpy_instance_add__": 561, "test_tensorflow_instance_add": 561, "eagertensor": 561, "1e04": 561, "allow_infin": 561, "test_torch_instance_add": 561, "_arrays_idx_n_dtyp": 561, "test_manipul": [561, 562], "surprisingli": 561, "cat": [561, 564, 566, 571], "closest_relevant_group": 561, "strive": [561, 562, 564, 574, 582], "exhaust": [562, 577, 586], "fixtur": 562, "hit": [562, 566], "eleg": [562, 580], "unexplor": 562, "upload": 562, "artifact": 562, "bespok": 562, "_array_or_typ": 562, "test_default_int_dtyp": 562, "clariti": [562, 564, 580], "print_hypothesis_exampl": 562, "custom_strategi": 562, "sampled_from": 562, "randomis": 562, "simplist": 562, "intricaci": 562, "glanc": 562, "stratigi": 562, "one_of": 562, "datum": 562, "pipe": 562, "overload": 562, "shorthand": 562, "scaler": 562, "array_or_scal": 562, "len_of_arrai": 562, "test_add": 562, "keywoard": 562, "test_gpu_is_avail": 562, "requri": 562, "summara": 562, "pretest": 562, "slighlti": 562, "pytet": 562, "snippet": 562, "thankfulli": 562, "mostli": 562, "seamlessli": 562, "criterion": 562, "array_valu": 562, "valid_ax": 562, "craft": 562, "hoc": 562, "44758124e": 562, "11228": 562, "456": 562, "268": 562, "wherev": 562, "dtype_values_axi": 562, "9622": 562, "28136": 562, "6375": 562, "12720": 562, "21354": 562, "900e": 562, "955e": 562, "exclude_min": 562, "large_abs_safety_factor": 562, "safety_factor_scal": 562, "57384": 562, "25687": 562, "248": 562, "array_dtyp": 562, "array_bool": 562, "na": 562, "test_devic": 562, "array_shap": 562, "common_shap": 562, "test_lay": 562, "size_bound": 562, "reshape_shap": 562, "stand": 562, "fashion": 562, "some_sequ": 562, "allow_nan": 562, "allow_subnorm": 562, "get_bound": 562, "arrays_valu": 562, "36418": 562, "21716926": 562, "none_or_list_of_float": 562, "get_prob": 562, "get_mean_std": 562, "103515625e": 562, "099609375": 562, "probabilist": 562, "get_axi": 562, "number_positional_argu": 562, "unreproduc": 562, "report": 562, "ivy_np": 562, "valid_float_dtyp": 562, "test_demo": 562, "failing_test": 562, "shrink": 562, "prescrib": 562, "scratch": 562, "therebi": 562, "test_gelu": 562, "test_fil": 562, "brief": 562, "phase": [562, 574, 580], "notabl": [562, 580], "verbos": [562, 566], "newer": 562, "max_exampl": 562, "deadlin": 562, "weird": 562, "systemat": 562, "safeguard": 562, "inabl": 562, "test_result_typ": 562, "9090909090909091": 562, "judgement": 563, "some_namespac": 563, "some_backend": 563, "another_backend": 563, "refactor": 563, "ongo": 563, "op": [563, 566, 574], "cooler": 563, "something_cool": 563, "_assert_fill_value_and_dtype_are_compat": 563, "_to_devic": 563, "shouldn": 563, "older": 563, "unbound": 563, "battl": 563, "answer": [564, 568, 574], "contradict": 564, "entail": 564, "sacrif": 564, "dimems": 564, "jacfwd": 564, "jacrev": 564, "banner": 564, "ravel": 564, "pointwis": 564, "fuse": 564, "tensorrt": 564, "expens": 564, "incredibli": [564, 569, 574, 583], "six": 564, "price": 564, "pai": 564, "intrus": 564, "x_beta": 564, "equip": 564, "priorit": 564, "simplif": 564, "allevi": 564, "ineffici": [564, 574, 580], "hybrid": 564, "workaround": 564, "bicubic_tensorflow": 564, "fulfil": 565, "fledg": [566, 567], "syntact": [566, 571], "power_seq": 566, "unset": 566, "backend_stack": 566, "_determine_backend_from_arg": 566, "importlib": 566, "_backend_dict": 566, "illustr": [566, 573], "x_shape": 566, "x_flat": 566, "wi": 566, "wi_x": 566, "wii_x": 566, "wif_x": 566, "wig_x": 566, "wio_x": 566, "wh": 566, "ht": 566, "ct": 566, "hts_list": 566, "wii_xt": 566, "wif_xt": 566, "wig_xt": 566, "wio_xt": 566, "zip": 566, "htm1": 566, "ctm1": 566, "wh_htm1": 566, "whi_htm1": 566, "whf_htm1": 566, "whg_htm1": 566, "who_htm1": 566, "ft": 566, "ot": 566, "reliabl": 566, "sacrific": 566, "hear": 566, "virtu": [566, 577], "pure_ivi": 566, "compile_graph": [566, 571], "pure_torch": 566, "_layer": 566, "unclean": 566, "wx": 566, "temp": 566, "ivy_func": 566, "emphas": 566, "torchscript": [566, 575, 587], "example_input": 566, "static_argnum": 566, "static_argnam": 566, "jit": [566, 574, 580], "primit": [567, 574, 578, 580], "upcom": 567, "hierarch": [567, 569, 570, 580], "arraywithactiv": 568, "arraywithcr": 568, "arraywithdatatyp": 568, "arraywithdevic": 568, "arraywithgener": 568, "arraywithgradi": 568, "arraywithimag": 568, "arraywithlay": 568, "arraywithlinearalgebra": 568, "arraywithloss": 568, "arraywithmanipul": 568, "arraywithnorm": 568, "arraywithrandom": 568, "arraywithsearch": 568, "arraywithset": 568, "arraywithsort": 568, "arraywithstatist": 568, "arraywithutil": 568, "_init": 568, "_size": 568, "_devic": 568, "_dev_str": 568, "_pre_repr": 568, "_post_repr": 568, "framework_str": 568, "noinspect": 568, "pypep8nam": 568, "immut": 568, "claim": 568, "truli": 568, "_native_wrapp": 568, "genuin": 568, "some_method": 568, "rewritten": 568, "strang": 568, "compartment": 568, "newshap": 568, "new_shap": 568, "tidi": 568, "crystal": 568, "ton": 569, "ado": [569, 570], "soup": 569, "walk": [569, 570], "cnt": 569, "combo": 569, "3333335": 569, "delimit": 569, "autocomplet": 569, "midwai": 569, "agent": 569, "total_spe": 569, "total_height": 569, "total_width": 569, "ag": 569, "tot": 569, "total_": 569, "total_h": 569, "cnt0": 569, "cnt1": 569, "diff_0": 569, "diff_1": 569, "config0": 569, "config1": 569, "decod": 569, "l0": 569, "decoder__l0": 569, "decoder__l1": 569, "encoder__l0": 569, "encoder__l1": 569, "l0__b": 569, "l0__w": 569, "l1__b": 569, "l1__w": 569, "printabl": 569, "obviou": [569, 580], "foresight": 569, "untidili": 569, "update_ag": 569, "normalize_img": 569, "img_max": 569, "reduce_max": 569, "img_min": 569, "reduce_min": 569, "img_rang": 569, "agent_posit": 569, "agent_veloc": 569, "agent_cam_front_rgb": 569, "agent_cam_front_depth": 569, "agent_cam_rear_rgb": 569, "agent_cam_rear_depth": 569, "agent_cam_lidar": 569, "camera": 569, "front_rgb": 569, "front_depth": 569, "rear_rgb": 569, "rear_depth": 569, "lidar": 569, "rgb": 569, "rear": 569, "veloc": 569, "cam": 569, "cam_max": 569, "cam_min": 569, "cam_rang": 569, "perman": 569, "thread": [569, 580], "pretti": [569, 586], "straightforward": 569, "dataload": [569, 572], "_cnt": 569, "img_": 569, "png": 569, "_dataset_s": 569, "_batch_siz": 569, "_count": [569, 570], "__next__": 569, "filenam": 569, "img_fnam": 569, "loaded_img": 569, "cv2": 569, "imread": 569, "from_numpi": 569, "batch_slic": 569, "reduce_mean": [569, 570, 571], "0145": 569, "addbackward0": 569, "_create_vari": 570, "_input_channel": 570, "_output_channel": 570, "_w_shape": 570, "_b_shape": 570, "_with_bia": 570, "396": 570, "764": 570, "872": 570, "211": 570, "439": 570, "nightmar": 570, "overcom": 570, "v0": 570, "v1": 570, "key0": 570, "linear3": 570, "v2": 570, "_w_init": 570, "_b_init": 570, "misnom": 570, "saw": 570, "_beta1": 570, "_beta2": 570, "_epsilon": 570, "_mw": 570, "_vw": 570, "_first_pass": 570, "_should_compil": 570, "new_v": 570, "_lr": 570, "_inplac": 570, "_stop_gradi": 570, "clip_by_valu": 571, "sparse_funct": 571, "new_axi": 571, "_linear": 571, "jax_graph": 571, "to_backend": 571, "thinli": 571, "to_haiku_modul": 571, "loss_fn_t": 571, "without_apply_rng": 571, "update_rul": 571, "tree_multimap": 571, "differenti": [573, 580], "pose": 573, "quaternion": 573, "ivy_mech": 573, "target_facing_rotation_matrix": 573, "polar_to_cartesian_coord": 573, "warp": 573, "optic": 573, "voxel": 573, "ivy_vis": 573, "coords_to_voxel_grid": 573, "render_pixel_coord": 573, "radianc": 573, "nerf": 573, "trajectori": 573, "motion": 573, "mobil": [573, 580], "sample_spline_path": 573, "rigidmobil": 573, "sample_bodi": 573, "drone": 573, "sample_link": 573, "openai": 573, "swimmer": 573, "reward": 573, "supervis": 573, "door": [573, 574], "cartpol": 573, "mountain_car": 573, "pendulum": 573, "reacher": 573, "learnt": 573, "ture": 573, "ntm": 573, "egospher": 573, "esm": 573, "ivy_memori": 573, "egocentr": 573, "room": 573, "doubt": 574, "grate": 574, "probe": 574, "remark": 574, "surpris": 574, "lock": 574, "gold": 574, "dex": 574, "ye": 574, "scan": 574, "tricki": [574, 575], "predictor": 574, "tight": 574, "driver": 574, "dispatch": [574, 580, 583], "ast": 574, "checkpoint": 574, "autodiff": 574, "shine": 574, "merci": 574, "autograd": 574, "compet": [574, 580], "paradigm": [574, 580], "parallelis": 574, "spmd": 574, "mixtur": 574, "expert": 574, "sophist": 574, "depart": 574, "hundr": 574, "thousand": 574, "broadli": [574, 586], "supplementari": 574, "reusabl": [574, 578, 580], "fanci": [574, 580], "fusion": [574, 584], "lose": 574, "pmap": 574, "overhead": [574, 583], "eventu": 574, "supplement": 574, "backdoor": 574, "callback": 574, "record": [574, 581], "somewhat": [574, 580], "outsourc": 574, "nail": 575, "funtion": 575, "asset": 575, "scientist": 575, "correl": 575, "analyz": 575, "conceptu": [576, 581], "broken": [576, 580], "tracer": 576, "infrastructur": [576, 582, 583], "vendor": [576, 582], "complimentari": [576, 586], "acycl": [576, 581], "insert_numb": 577, "insert_t": 577, "scaffold": [578, 586], "heart": 578, "toolchain": [578, 583], "intermedi": [578, 579, 580, 581, 586], "ir": [578, 581, 586], "assembli": [578, 585, 586], "idl": 578, "middl": 578, "emit": 578, "gnu": [578, 583], "gcc": [578, 585], "broader": 578, "heterogen": 578, "aid": 578, "coprocessor": 578, "programm": [578, 585], "gate": 578, "onednn": 578, "sit": [578, 581, 586], "tandem": 578, "possess": 578, "khrono": [579, 585], "appl": 579, "interact": [579, 580, 585], "coremltool": 579, "albeit": 579, "promin": 580, "abbrevi": 580, "laboratori": 580, "proprietari": [580, 584, 585], "mathwork": 580, "commerci": 580, "1984": 580, "toolbox": 580, "mupad": 580, "simulink": 580, "graphic": [580, 584, 585], "simul": 580, "million": [580, 583], "worldwid": 580, "scienc": [580, 582], "econom": 580, "2001": 580, "scientif": 580, "od": 580, "solver": 580, "cython": 580, "friendli": 580, "2002": 580, "lua": 580, "luajit": 580, "idiap": 580, "epfl": 580, "2005": 580, "numarrai": 580, "cpython": 580, "partli": 580, "2007": 580, "regress": [580, 587], "forest": 580, "boost": 580, "dbscan": 580, "inbuilt": 580, "esqu": 580, "aesara": 580, "2008": 580, "datafram": 580, "critic": [580, 586], "2012": 580, "Its": 580, "polymorph": 580, "parallel": [580, 584, 585], "mpi": 580, "openmp": 580, "glue": 580, "jaot": 580, "nasa": 580, "cern": 580, "climat": 580, "allianc": 580, "influenti": 580, "2014": 580, "analyt": [580, 582, 586], "scala": 580, "ship": 580, "forgiv": 580, "decemb": 580, "announc": 580, "transit": 580, "mainten": 580, "v7": 580, "meaning": 580, "2016": 580, "imper": 580, "amazon": 580, "traction": 580, "cognit": [580, 587], "toolkit": [580, 581, 587], "grade": 580, "realiz": 580, "dnn": 580, "cnn": 580, "rnn": 580, "backpropag": 580, "succumb": 580, "came": 580, "monitor": 580, "practition": [580, 584, 585, 586], "hobbyist": 580, "tremend": 580, "ecosystem": 580, "gear": 580, "batteri": 580, "zygot": 580, "jl": 580, "workload": 580, "daggerflux": 580, "frontier": 580, "hessian": 580, "2018": 580, "lightweight": [580, 587], "shortcom": 580, "barrier": 580, "inexperienc": 580, "underdevelop": 580, "fanat": 580, "ounc": 580, "infanc": 580, "emerg": 580, "nich": 580, "introduct": 580, "lite": 580, "enterpris": 580, "reinvent": [580, 582], "inertia": 580, "haven": 580, "creator": [580, 582], "paszk": 580, "hi": 580, "safeti": 580, "bulk": 580, "haskel": 580, "dataflow": 581, "distil": 581, "essenc": [581, 586], "enclos": 581, "scope": [581, 585], "trace_modul": 581, "scriptfunct": 581, "scriptmodul": 581, "fake": 581, "proxi": 581, "graphmodul": 581, "travi": 582, "oliph": 582, "leader": 582, "cornerston": 582, "numba": 582, "numfocu": 582, "pydata": 582, "confer": 582, "consult": 582, "servic": 582, "expertis": 582, "devop": 582, "mlop": 582, "dashboard": 582, "startup": 582, "mlir": [582, 583, 586], "Their": 582, "held": 582, "privileg": 582, "presum": 582, "llvm": [582, 585], "founder": 582, "tvm": [582, 586], "sustain": 582, "empow": 582, "har": 582, "burden": 582, "benchmark": 582, "convention": 583, "precompil": 583, "executor": 583, "exploit": 583, "fsf": 583, "gpl": 583, "biggest": [583, 586], "nvidia": [584, 585], "conduct": 584, "throughput": 584, "autotun": 584, "consumpt": 584, "gpgpu": 584, "talk": 585, "classic": 585, "sycl": 585, "dpc": 585, "processor": 585, "maco": 585, "x86": 585, "oneapi": 585, "ia": 585, "aka": 585, "xeon": 585, "gen9": 585, "xe": 585, "card": 585, "arria": 585, "gx": 585, "fpga": 585, "tune": [585, 586], "lofti": 586, "ambit": 586, "realm": 586, "bedrock": 586, "flux": 586, "bite": 586, "chew": 586, "eagerpi": 586, "tensorli": 586, "thinc": 586, "neuropod": 586, "exhibit": 586, "emploi": 586, "fx": 586, "retrain": 586, "wider": 586, "closer": 586, "greatli": 586, "challeng": 586, "modular": 586, "anywher": 586, "theano": 587, "plaidml": 587, "partial_svd": 587, "tucker_mode_dot": 587, "excel": 587, "subsystem": 587}, "objects": {"ivy.Array": [[175, 0, 1, "", "abs"], [176, 0, 1, "", "acos"], [177, 0, 1, "", "acosh"], [343, 0, 1, "", "adam_step"], [344, 0, 1, "", "adam_update"], [178, 0, 1, "", "add"], [510, 0, 1, "", "all"], [248, 0, 1, "", "all_equal"], [511, 0, 1, "", "any"], [487, 0, 1, "", "argmax"], [488, 0, 1, "", "argmin"], [496, 0, 1, "", "argsort"], [489, 0, 1, "", "argwhere"], [251, 0, 1, "", "array_equal"], [75, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [252, 0, 1, "", "assert_supports_inplace"], [108, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [429, 0, 1, "", "binary_cross_entropy"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [109, 0, 1, "", "broadcast_arrays"], [110, 0, 1, "", "broadcast_to"], [111, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [398, 0, 1, "", "cholesky"], [433, 0, 1, "", "clip"], [254, 0, 1, "", "clip_matrix_norm"], [255, 0, 1, "", "clip_vector_norm"], [434, 0, 1, "", "concat"], [435, 0, 1, "", "constant_pad"], [384, 0, 1, "", "conv1d"], [385, 0, 1, "", "conv1d_transpose"], [386, 0, 1, "", "conv2d"], [387, 0, 1, "", "conv2d_transpose"], [388, 0, 1, "", "conv3d"], [389, 0, 1, "", "conv3d_transpose"], [79, 0, 1, "", "copy_array"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [399, 0, 1, "", "cross"], [430, 0, 1, "", "cross_entropy"], [500, 0, 1, "", "cumprod"], [501, 0, 1, "", "cumsum"], [258, 0, 1, "", "default"], [193, 0, 1, "", "deg2rad"], [392, 0, 1, "", "depthwise_conv2d"], [400, 0, 1, "", "det"], [155, 0, 1, "", "dev"], [401, 0, 1, "", "diag"], [402, 0, 1, "", "diagonal"], [194, 0, 1, "", "divide"], [393, 0, 1, "", "dropout"], [119, 0, 1, "", "dtype"], [403, 0, 1, "", "eig"], [404, 0, 1, "", "eigh"], [405, 0, 1, "", "eigvalsh"], [259, 0, 1, "", "einops_rearrange"], [260, 0, 1, "", "einops_reduce"], [261, 0, 1, "", "einops_repeat"], [502, 0, 1, "", "einsum"], [81, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [262, 0, 1, "", "exists"], [197, 0, 1, "", "exp"], [436, 0, 1, "", "expand_dims"], [198, 0, 1, "", "expm1"], [121, 0, 1, "", "finfo"], [437, 0, 1, "", "flip"], [199, 0, 1, "", "floor"], [200, 0, 1, "", "floor_divide"], [201, 0, 1, "", "fmod"], [263, 0, 1, "", "fourier_encode"], [83, 0, 1, "", "from_dlpack"], [85, 0, 1, "", "full_like"], [266, 0, 1, "", "gather"], [267, 0, 1, "", "gather_nd"], [59, 0, 1, "", "gelu"], [275, 0, 1, "", "get_num_dims"], [347, 0, 1, "", "gradient_descent_update"], [202, 0, 1, "", "greater"], [203, 0, 1, "", "greater_equal"], [280, 0, 1, "", "has_nans"], [124, 0, 1, "", "iinfo"], [406, 0, 1, "", "inner"], [282, 0, 1, "", "inplace_decrement"], [283, 0, 1, "", "inplace_increment"], [284, 0, 1, "", "inplace_update"], [407, 0, 1, "", "inv"], [286, 0, 1, "", "is_array"], [127, 0, 1, "", "is_bool_dtype"], [129, 0, 1, "", "is_float_dtype"], [130, 0, 1, "", "is_int_dtype"], [287, 0, 1, "", "is_ivy_array"], [288, 0, 1, "", "is_ivy_container"], [289, 0, 1, "", "is_native_array"], [132, 0, 1, "", "is_uint_dtype"], [204, 0, 1, "", "isfinite"], [290, 0, 1, "", "isin"], [205, 0, 1, "", "isinf"], [206, 0, 1, "", "isnan"], [207, 0, 1, "", "isreal"], [349, 0, 1, "", "lamb_update"], [350, 0, 1, "", "lars_update"], [476, 0, 1, "", "layer_norm"], [61, 0, 1, "", "leaky_relu"], [208, 0, 1, "", "less"], [209, 0, 1, "", "less_equal"], [394, 0, 1, "", "linear"], [86, 0, 1, "", "linspace"], [210, 0, 1, "", "log"], [211, 0, 1, "", "log10"], [212, 0, 1, "", "log1p"], [213, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [214, 0, 1, "", "logaddexp"], [215, 0, 1, "", "logical_and"], [216, 0, 1, "", "logical_not"], [217, 0, 1, "", "logical_or"], [218, 0, 1, "", "logical_xor"], [87, 0, 1, "", "logspace"], [395, 0, 1, "", "lstm_update"], [409, 0, 1, "", "matmul"], [410, 0, 1, "", "matrix_norm"], [411, 0, 1, "", "matrix_power"], [412, 0, 1, "", "matrix_rank"], [413, 0, 1, "", "matrix_transpose"], [503, 0, 1, "", "max"], [219, 0, 1, "", "maximum"], [504, 0, 1, "", "mean"], [88, 0, 1, "", "meshgrid"], [505, 0, 1, "", "min"], [220, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [396, 0, 1, "", "multi_head_attention"], [481, 0, 1, "", "multinomial"], [221, 0, 1, "", "multiply"], [89, 0, 1, "", "native_array"], [222, 0, 1, "", "negative"], [490, 0, 1, "", "nonzero"], [223, 0, 1, "", "not_equal"], [90, 0, 1, "", "one_hot"], [92, 0, 1, "", "ones_like"], [351, 0, 1, "", "optimizer_update"], [414, 0, 1, "", "outer"], [438, 0, 1, "", "permute_dims"], [415, 0, 1, "", "pinv"], [224, 0, 1, "", "positive"], [225, 0, 1, "", "pow"], [506, 0, 1, "", "prod"], [416, 0, 1, "", "qr"], [226, 0, 1, "", "rad2deg"], [482, 0, 1, "", "randint"], [483, 0, 1, "", "random_normal"], [484, 0, 1, "", "random_uniform"], [227, 0, 1, "", "reciprocal"], [64, 0, 1, "", "relu"], [228, 0, 1, "", "remainder"], [439, 0, 1, "", "repeat"], [440, 0, 1, "", "reshape"], [135, 0, 1, "", "result_type"], [441, 0, 1, "", "roll"], [229, 0, 1, "", "round"], [397, 0, 1, "", "scaled_dot_product_attention"], [296, 0, 1, "", "scatter_flat"], [297, 0, 1, "", "scatter_nd"], [497, 0, 1, "", "searchsorted"], [307, 0, 1, "", "shape"], [486, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [230, 0, 1, "", "sign"], [231, 0, 1, "", "sin"], [232, 0, 1, "", "sinh"], [417, 0, 1, "", "slogdet"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [418, 0, 1, "", "solve"], [498, 0, 1, "", "sort"], [431, 0, 1, "", "sparse_cross_entropy"], [442, 0, 1, "", "split"], [233, 0, 1, "", "sqrt"], [234, 0, 1, "", "square"], [443, 0, 1, "", "squeeze"], [309, 0, 1, "", "stable_divide"], [310, 0, 1, "", "stable_pow"], [444, 0, 1, "", "stack"], [507, 0, 1, "", "std"], [353, 0, 1, "", "stop_gradient"], [235, 0, 1, "", "subtract"], [508, 0, 1, "", "sum"], [311, 0, 1, "", "supports_inplace_updates"], [419, 0, 1, "", "svd"], [420, 0, 1, "", "svdvals"], [445, 0, 1, "", "swapaxes"], [236, 0, 1, "", "tan"], [237, 0, 1, "", "tanh"], [421, 0, 1, "", "tensordot"], [422, 0, 1, "", "tensorsolve"], [446, 0, 1, "", "tile"], [170, 0, 1, "", "to_device"], [313, 0, 1, "", "to_list"], [315, 0, 1, "", "to_numpy"], [316, 0, 1, "", "to_scalar"], [423, 0, 1, "", "trace"], [93, 0, 1, "", "tril"], [94, 0, 1, "", "triu"], [238, 0, 1, "", "trunc"], [239, 0, 1, "", "trunc_divide"], [492, 0, 1, "", "unique_all"], [493, 0, 1, "", "unique_counts"], [494, 0, 1, "", "unique_inverse"], [495, 0, 1, "", "unique_values"], [447, 0, 1, "", "unstack"], [324, 0, 1, "", "value_is_nan"], [424, 0, 1, "", "vander"], [509, 0, 1, "", "var"], [425, 0, 1, "", "vecdot"], [426, 0, 1, "", "vector_norm"], [427, 0, 1, "", "vector_to_skew_symmetric_matrix"], [491, 0, 1, "", "where"], [448, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"]], "ivy.Container": [[175, 0, 1, "", "abs"], [176, 0, 1, "", "acos"], [177, 0, 1, "", "acosh"], [343, 0, 1, "", "adam_step"], [344, 0, 1, "", "adam_update"], [178, 0, 1, "", "add"], [510, 0, 1, "", "all"], [248, 0, 1, "", "all_equal"], [511, 0, 1, "", "any"], [487, 0, 1, "", "argmax"], [488, 0, 1, "", "argmin"], [496, 0, 1, "", "argsort"], [489, 0, 1, "", "argwhere"], [251, 0, 1, "", "array_equal"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [252, 0, 1, "", "assert_supports_inplace"], [108, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [429, 0, 1, "", "binary_cross_entropy"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [109, 0, 1, "", "broadcast_arrays"], [110, 0, 1, "", "broadcast_to"], [111, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [398, 0, 1, "", "cholesky"], [433, 0, 1, "", "clip"], [254, 0, 1, "", "clip_matrix_norm"], [255, 0, 1, "", "clip_vector_norm"], [434, 0, 1, "", "concat"], [435, 0, 1, "", "constant_pad"], [384, 0, 1, "", "conv1d"], [385, 0, 1, "", "conv1d_transpose"], [386, 0, 1, "", "conv2d"], [387, 0, 1, "", "conv2d_transpose"], [388, 0, 1, "", "conv3d"], [389, 0, 1, "", "conv3d_transpose"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [399, 0, 1, "", "cross"], [430, 0, 1, "", "cross_entropy"], [500, 0, 1, "", "cumprod"], [501, 0, 1, "", "cumsum"], [193, 0, 1, "", "deg2rad"], [392, 0, 1, "", "depthwise_conv2d"], [400, 0, 1, "", "det"], [155, 0, 1, "", "dev"], [401, 0, 1, "", "diag"], [402, 0, 1, "", "diagonal"], [194, 0, 1, "", "divide"], [393, 0, 1, "", "dropout"], [119, 0, 1, "", "dtype"], [403, 0, 1, "", "eig"], [404, 0, 1, "", "eigh"], [405, 0, 1, "", "eigvalsh"], [259, 0, 1, "", "einops_rearrange"], [260, 0, 1, "", "einops_reduce"], [261, 0, 1, "", "einops_repeat"], [502, 0, 1, "", "einsum"], [81, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [197, 0, 1, "", "exp"], [436, 0, 1, "", "expand_dims"], [198, 0, 1, "", "expm1"], [121, 0, 1, "", "finfo"], [437, 0, 1, "", "flip"], [199, 0, 1, "", "floor"], [200, 0, 1, "", "floor_divide"], [201, 0, 1, "", "fmod"], [263, 0, 1, "", "fourier_encode"], [83, 0, 1, "", "from_dlpack"], [85, 0, 1, "", "full_like"], [266, 0, 1, "", "gather"], [267, 0, 1, "", "gather_nd"], [59, 0, 1, "", "gelu"], [60, 0, 1, "", "get"], [275, 0, 1, "", "get_num_dims"], [347, 0, 1, "", "gradient_descent_update"], [202, 0, 1, "", "greater"], [203, 0, 1, "", "greater_equal"], [280, 0, 1, "", "has_nans"], [124, 0, 1, "", "iinfo"], [406, 0, 1, "", "inner"], [282, 0, 1, "", "inplace_decrement"], [283, 0, 1, "", "inplace_increment"], [284, 0, 1, "", "inplace_update"], [407, 0, 1, "", "inv"], [286, 0, 1, "", "is_array"], [127, 0, 1, "", "is_bool_dtype"], [128, 0, 1, "", "is_complex_dtype"], [129, 0, 1, "", "is_float_dtype"], [130, 0, 1, "", "is_int_dtype"], [287, 0, 1, "", "is_ivy_array"], [289, 0, 1, "", "is_native_array"], [132, 0, 1, "", "is_uint_dtype"], [204, 0, 1, "", "isfinite"], [290, 0, 1, "", "isin"], [205, 0, 1, "", "isinf"], [206, 0, 1, "", "isnan"], [207, 0, 1, "", "isreal"], [349, 0, 1, "", "lamb_update"], [350, 0, 1, "", "lars_update"], [476, 0, 1, "", "layer_norm"], [61, 0, 1, "", "leaky_relu"], [208, 0, 1, "", "less"], [209, 0, 1, "", "less_equal"], [394, 0, 1, "", "linear"], [86, 0, 1, "", "linspace"], [210, 0, 1, "", "log"], [211, 0, 1, "", "log10"], [212, 0, 1, "", "log1p"], [213, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [214, 0, 1, "", "logaddexp"], [215, 0, 1, "", "logical_and"], [216, 0, 1, "", "logical_not"], [217, 0, 1, "", "logical_or"], [218, 0, 1, "", "logical_xor"], [87, 0, 1, "", "logspace"], [395, 0, 1, "", "lstm_update"], [409, 0, 1, "", "matmul"], [410, 0, 1, "", "matrix_norm"], [411, 0, 1, "", "matrix_power"], [412, 0, 1, "", "matrix_rank"], [413, 0, 1, "", "matrix_transpose"], [503, 0, 1, "", "max"], [219, 0, 1, "", "maximum"], [504, 0, 1, "", "mean"], [88, 0, 1, "", "meshgrid"], [505, 0, 1, "", "min"], [220, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [396, 0, 1, "", "multi_head_attention"], [481, 0, 1, "", "multinomial"], [221, 0, 1, "", "multiply"], [89, 0, 1, "", "native_array"], [222, 0, 1, "", "negative"], [490, 0, 1, "", "nonzero"], [223, 0, 1, "", "not_equal"], [90, 0, 1, "", "one_hot"], [92, 0, 1, "", "ones_like"], [351, 0, 1, "", "optimizer_update"], [414, 0, 1, "", "outer"], [438, 0, 1, "", "permute_dims"], [415, 0, 1, "", "pinv"], [224, 0, 1, "", "positive"], [225, 0, 1, "", "pow"], [506, 0, 1, "", "prod"], [416, 0, 1, "", "qr"], [226, 0, 1, "", "rad2deg"], [482, 0, 1, "", "randint"], [483, 0, 1, "", "random_normal"], [484, 0, 1, "", "random_uniform"], [227, 0, 1, "", "reciprocal"], [64, 0, 1, "", "relu"], [228, 0, 1, "", "remainder"], [439, 0, 1, "", "repeat"], [440, 0, 1, "", "reshape"], [135, 0, 1, "", "result_type"], [441, 0, 1, "", "roll"], [229, 0, 1, "", "round"], [397, 0, 1, "", "scaled_dot_product_attention"], [296, 0, 1, "", "scatter_flat"], [297, 0, 1, "", "scatter_nd"], [497, 0, 1, "", "searchsorted"], [486, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [230, 0, 1, "", "sign"], [231, 0, 1, "", "sin"], [232, 0, 1, "", "sinh"], [417, 0, 1, "", "slogdet"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [418, 0, 1, "", "solve"], [498, 0, 1, "", "sort"], [431, 0, 1, "", "sparse_cross_entropy"], [442, 0, 1, "", "split"], [233, 0, 1, "", "sqrt"], [234, 0, 1, "", "square"], [443, 0, 1, "", "squeeze"], [309, 0, 1, "", "stable_divide"], [310, 0, 1, "", "stable_pow"], [444, 0, 1, "", "stack"], [507, 0, 1, "", "std"], [353, 0, 1, "", "stop_gradient"], [235, 0, 1, "", "subtract"], [508, 0, 1, "", "sum"], [311, 0, 1, "", "supports_inplace_updates"], [419, 0, 1, "", "svd"], [420, 0, 1, "", "svdvals"], [445, 0, 1, "", "swapaxes"], [236, 0, 1, "", "tan"], [237, 0, 1, "", "tanh"], [421, 0, 1, "", "tensordot"], [422, 0, 1, "", "tensorsolve"], [446, 0, 1, "", "tile"], [170, 0, 1, "", "to_device"], [313, 0, 1, "", "to_list"], [315, 0, 1, "", "to_numpy"], [316, 0, 1, "", "to_scalar"], [423, 0, 1, "", "trace"], [93, 0, 1, "", "tril"], [94, 0, 1, "", "triu"], [238, 0, 1, "", "trunc"], [239, 0, 1, "", "trunc_divide"], [492, 0, 1, "", "unique_all"], [493, 0, 1, "", "unique_counts"], [494, 0, 1, "", "unique_inverse"], [495, 0, 1, "", "unique_values"], [447, 0, 1, "", "unstack"], [324, 0, 1, "", "value_is_nan"], [424, 0, 1, "", "vander"], [509, 0, 1, "", "var"], [425, 0, 1, "", "vecdot"], [426, 0, 1, "", "vector_norm"], [427, 0, 1, "", "vector_to_skew_symmetric_matrix"], [491, 0, 1, "", "where"], [448, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"]], "ivy": [[68, 1, 1, "", "IfElse"], [69, 1, 1, "", "WhileLoop"], [175, 1, 1, "", "abs"], [176, 1, 1, "", "acos"], [177, 1, 1, "", "acosh"], [343, 1, 1, "", "adam_step"], [344, 1, 1, "", "adam_update"], [178, 1, 1, "", "add"], [510, 1, 1, "", "all"], [248, 1, 1, "", "all_equal"], [457, 1, 1, "", "all_nested_indices"], [511, 1, 1, "", "any"], [73, 1, 1, "", "arange"], [249, 1, 1, "", "arg_info"], [250, 1, 1, "", "arg_names"], [487, 1, 1, "", "argmax"], [488, 1, 1, "", "argmin"], [496, 1, 1, "", "argsort"], [489, 1, 1, "", "argwhere"], [74, 1, 1, "", "array"], [251, 1, 1, "", "array_equal"], [151, 1, 1, "", "as_ivy_dev"], [106, 1, 1, "", "as_ivy_dtype"], [152, 1, 1, "", "as_native_dev"], [107, 1, 1, "", "as_native_dtype"], [75, 1, 1, "", "asarray"], [76, 1, 1, "", "asarray_handle_nestable"], [77, 1, 1, "", "asarray_infer_device"], [78, 1, 1, "", "asarray_to_native_arrays_and_back"], [179, 1, 1, "", "asin"], [180, 1, 1, "", "asinh"], [252, 1, 1, "", "assert_supports_inplace"], [108, 1, 1, "", "astype"], [181, 1, 1, "", "atan"], [182, 1, 1, "", "atan2"], [183, 1, 1, "", "atanh"], [429, 1, 1, "", "binary_cross_entropy"], [184, 1, 1, "", "bitwise_and"], [185, 1, 1, "", "bitwise_invert"], [186, 1, 1, "", "bitwise_left_shift"], [187, 1, 1, "", "bitwise_or"], [188, 1, 1, "", "bitwise_right_shift"], [189, 1, 1, "", "bitwise_xor"], [109, 1, 1, "", "broadcast_arrays"], [110, 1, 1, "", "broadcast_to"], [253, 1, 1, "", "cache_fn"], [111, 1, 1, "", "can_cast"], [190, 1, 1, "", "ceil"], [112, 1, 1, "", "check_float"], [398, 1, 1, "", "cholesky"], [153, 1, 1, "", "clear_cached_mem_on_dev"], [433, 1, 1, "", "clip"], [254, 1, 1, "", "clip_matrix_norm"], [255, 1, 1, "", "clip_vector_norm"], [113, 1, 1, "", "closest_valid_dtype"], [434, 1, 1, "", "concat"], [435, 1, 1, "", "constant_pad"], [256, 1, 1, "", "container_types"], [383, 1, 1, "", "conv"], [384, 1, 1, "", "conv1d"], [385, 1, 1, "", "conv1d_transpose"], [386, 1, 1, "", "conv2d"], [387, 1, 1, "", "conv2d_transpose"], [388, 1, 1, "", "conv3d"], [389, 1, 1, "", "conv3d_transpose"], [390, 1, 1, "", "conv_general_dilated"], [391, 1, 1, "", "conv_general_transpose"], [79, 1, 1, "", "copy_array"], [458, 1, 1, "", "copy_nest"], [191, 1, 1, "", "cos"], [192, 1, 1, "", "cosh"], [399, 1, 1, "", "cross"], [430, 1, 1, "", "cross_entropy"], [500, 1, 1, "", "cumprod"], [501, 1, 1, "", "cumsum"], [257, 1, 1, "", "current_backend_str"], [258, 1, 1, "", "default"], [114, 1, 1, "", "default_complex_dtype"], [154, 1, 1, "", "default_device"], [115, 1, 1, "", "default_dtype"], [116, 1, 1, "", "default_float_dtype"], [117, 1, 1, "", "default_int_dtype"], [118, 1, 1, "", "default_uint_dtype"], [193, 1, 1, "", "deg2rad"], [392, 1, 1, "", "depthwise_conv2d"], [58, 1, 1, "", "deserialize"], [400, 1, 1, "", "det"], [155, 1, 1, "", "dev"], [156, 1, 1, "", "dev_util"], [401, 1, 1, "", "diag"], [402, 1, 1, "", "diagonal"], [194, 1, 1, "", "divide"], [393, 1, 1, "", "dropout"], [119, 1, 1, "", "dtype"], [120, 1, 1, "", "dtype_bits"], [459, 1, 1, "", "duplicate_array_index_chains"], [403, 1, 1, "", "eig"], [404, 1, 1, "", "eigh"], [405, 1, 1, "", "eigvalsh"], [259, 1, 1, "", "einops_rearrange"], [260, 1, 1, "", "einops_reduce"], [261, 1, 1, "", "einops_repeat"], [502, 1, 1, "", "einsum"], [80, 1, 1, "", "empty"], [81, 1, 1, "", "empty_like"], [195, 1, 1, "", "equal"], [196, 1, 1, "", "erf"], [345, 1, 1, "", "execute_with_gradients"], [262, 1, 1, "", "exists"], [197, 1, 1, "", "exp"], [436, 1, 1, "", "expand_dims"], [198, 1, 1, "", "expm1"], [82, 1, 1, "", "eye"], [121, 1, 1, "", "finfo"], [437, 1, 1, "", "flip"], [199, 1, 1, "", "floor"], [200, 1, 1, "", "floor_divide"], [201, 1, 1, "", "fmod"], [454, 1, 1, "", "fomaml_step"], [263, 1, 1, "", "fourier_encode"], [83, 1, 1, "", "from_dlpack"], [84, 1, 1, "", "full"], [85, 1, 1, "", "full_like"], [157, 1, 1, "", "function_supported_devices"], [264, 1, 1, "", "function_supported_devices_and_dtypes"], [122, 1, 1, "", "function_supported_dtypes"], [158, 1, 1, "", "function_unsupported_devices"], [265, 1, 1, "", "function_unsupported_devices_and_dtypes"], [123, 1, 1, "", "function_unsupported_dtypes"], [266, 1, 1, "", "gather"], [267, 1, 1, "", "gather_nd"], [59, 1, 1, "", "gelu"], [60, 1, 1, "", "get"], [268, 1, 1, "", "get_all_arrays_in_memory"], [159, 1, 1, "", "get_all_ivy_arrays_on_dev"], [269, 1, 1, "", "get_array_mode"], [270, 1, 1, "", "get_exception_trace_mode"], [271, 1, 1, "", "get_item"], [272, 1, 1, "", "get_min_base"], [273, 1, 1, "", "get_min_denominator"], [274, 1, 1, "", "get_nestable_mode"], [275, 1, 1, "", "get_num_dims"], [276, 1, 1, "", "get_queue_timeout"], [277, 1, 1, "", "get_referrers_recursive"], [278, 1, 1, "", "get_show_func_wrapper_trace_mode"], [279, 1, 1, "", "get_tmp_dir"], [160, 1, 1, "", "gpu_is_available"], [346, 1, 1, "", "grad"], [347, 1, 1, "", "gradient_descent_update"], [202, 1, 1, "", "greater"], [203, 1, 1, "", "greater_equal"], [280, 1, 1, "", "has_nans"], [70, 1, 1, "", "if_else"], [124, 1, 1, "", "iinfo"], [460, 1, 1, "", "index_nest"], [125, 1, 1, "", "infer_default_dtype"], [406, 1, 1, "", "inner"], [281, 1, 1, "", "inplace_arrays_supported"], [282, 1, 1, "", "inplace_decrement"], [283, 1, 1, "", "inplace_increment"], [284, 1, 1, "", "inplace_update"], [285, 1, 1, "", "inplace_variables_supported"], [461, 1, 1, "", "insert_into_nest_at_index"], [462, 1, 1, "", "insert_into_nest_at_indices"], [407, 1, 1, "", "inv"], [126, 1, 1, "", "invalid_dtype"], [286, 1, 1, "", "is_array"], [127, 1, 1, "", "is_bool_dtype"], [128, 1, 1, "", "is_complex_dtype"], [129, 1, 1, "", "is_float_dtype"], [130, 1, 1, "", "is_int_dtype"], [287, 1, 1, "", "is_ivy_array"], [288, 1, 1, "", "is_ivy_container"], [289, 1, 1, "", "is_native_array"], [131, 1, 1, "", "is_native_dtype"], [132, 1, 1, "", "is_uint_dtype"], [204, 1, 1, "", "isfinite"], [290, 1, 1, "", "isin"], [205, 1, 1, "", "isinf"], [206, 1, 1, "", "isnan"], [207, 1, 1, "", "isreal"], [291, 1, 1, "", "isscalar"], [348, 1, 1, "", "jac"], [349, 1, 1, "", "lamb_update"], [350, 1, 1, "", "lars_update"], [476, 1, 1, "", "layer_norm"], [61, 1, 1, "", "leaky_relu"], [208, 1, 1, "", "less"], [209, 1, 1, "", "less_equal"], [394, 1, 1, "", "linear"], [86, 1, 1, "", "linspace"], [210, 1, 1, "", "log"], [211, 1, 1, "", "log10"], [212, 1, 1, "", "log1p"], [213, 1, 1, "", "log2"], [62, 1, 1, "", "log_softmax"], [214, 1, 1, "", "logaddexp"], [215, 1, 1, "", "logical_and"], [216, 1, 1, "", "logical_not"], [217, 1, 1, "", "logical_or"], [218, 1, 1, "", "logical_xor"], [87, 1, 1, "", "logspace"], [395, 1, 1, "", "lstm_update"], [408, 1, 1, "", "lu_factor"], [455, 1, 1, "", "maml_step"], [463, 1, 1, "", "map"], [464, 1, 1, "", "map_nest_at_index"], [465, 1, 1, "", "map_nest_at_indices"], [292, 1, 1, "", "match_kwargs"], [409, 1, 1, "", "matmul"], [410, 1, 1, "", "matrix_norm"], [411, 1, 1, "", "matrix_power"], [412, 1, 1, "", "matrix_rank"], [413, 1, 1, "", "matrix_transpose"], [503, 1, 1, "", "max"], [219, 1, 1, "", "maximum"], [504, 1, 1, "", "mean"], [88, 1, 1, "", "meshgrid"], [505, 1, 1, "", "min"], [220, 1, 1, "", "minimum"], [63, 1, 1, "", "mish"], [396, 1, 1, "", "multi_head_attention"], [466, 1, 1, "", "multi_index_nest"], [481, 1, 1, "", "multinomial"], [221, 1, 1, "", "multiply"], [293, 1, 1, "", "multiprocessing"], [89, 1, 1, "", "native_array"], [222, 1, 1, "", "negative"], [467, 1, 1, "", "nested_any"], [468, 1, 1, "", "nested_argwhere"], [469, 1, 1, "", "nested_map"], [470, 1, 1, "", "nested_multi_map"], [490, 1, 1, "", "nonzero"], [223, 1, 1, "", "not_equal"], [294, 1, 1, "", "num_arrays_in_memory"], [161, 1, 1, "", "num_cpu_cores"], [162, 1, 1, "", "num_gpus"], [163, 1, 1, "", "num_ivy_arrays_on_dev"], [90, 1, 1, "", "one_hot"], [91, 1, 1, "", "ones"], [92, 1, 1, "", "ones_like"], [351, 1, 1, "", "optimizer_update"], [414, 1, 1, "", "outer"], [164, 1, 1, "", "percent_used_mem_on_dev"], [438, 1, 1, "", "permute_dims"], [415, 1, 1, "", "pinv"], [224, 1, 1, "", "positive"], [225, 1, 1, "", "pow"], [295, 1, 1, "", "print_all_arrays_in_memory"], [165, 1, 1, "", "print_all_ivy_arrays_on_dev"], [506, 1, 1, "", "prod"], [133, 1, 1, "", "promote_types"], [134, 1, 1, "", "promote_types_of_inputs"], [471, 1, 1, "", "prune_empty"], [472, 1, 1, "", "prune_nest_at_index"], [473, 1, 1, "", "prune_nest_at_indices"], [416, 1, 1, "", "qr"], [226, 1, 1, "", "rad2deg"], [482, 1, 1, "", "randint"], [483, 1, 1, "", "random_normal"], [484, 1, 1, "", "random_uniform"], [227, 1, 1, "", "reciprocal"], [64, 1, 1, "", "relu"], [228, 1, 1, "", "remainder"], [439, 1, 1, "", "repeat"], [456, 1, 1, "", "reptile_step"], [440, 1, 1, "", "reshape"], [135, 1, 1, "", "result_type"], [441, 1, 1, "", "roll"], [229, 1, 1, "", "round"], [397, 1, 1, "", "scaled_dot_product_attention"], [296, 1, 1, "", "scatter_flat"], [297, 1, 1, "", "scatter_nd"], [497, 1, 1, "", "searchsorted"], [485, 1, 1, "", "seed"], [298, 1, 1, "", "set_array_mode"], [136, 1, 1, "", "set_default_complex_dtype"], [166, 1, 1, "", "set_default_device"], [137, 1, 1, "", "set_default_dtype"], [138, 1, 1, "", "set_default_float_dtype"], [139, 1, 1, "", "set_default_int_dtype"], [140, 1, 1, "", "set_default_uint_dtype"], [299, 1, 1, "", "set_exception_trace_mode"], [300, 1, 1, "", "set_min_base"], [301, 1, 1, "", "set_min_denominator"], [474, 1, 1, "", "set_nest_at_index"], [475, 1, 1, "", "set_nest_at_indices"], [302, 1, 1, "", "set_nestable_mode"], [303, 1, 1, "", "set_queue_timeout"], [304, 1, 1, "", "set_shape_array_mode"], [305, 1, 1, "", "set_show_func_wrapper_trace_mode"], [167, 1, 1, "", "set_split_factor"], [306, 1, 1, "", "set_tmp_dir"], [352, 1, 1, "", "set_with_grads"], [307, 1, 1, "", "shape"], [308, 1, 1, "", "shape_array_mode"], [486, 1, 1, "", "shuffle"], [65, 1, 1, "", "sigmoid"], [230, 1, 1, "", "sign"], [231, 1, 1, "", "sin"], [232, 1, 1, "", "sinh"], [417, 1, 1, "", "slogdet"], [66, 1, 1, "", "softmax"], [67, 1, 1, "", "softplus"], [418, 1, 1, "", "solve"], [498, 1, 1, "", "sort"], [431, 1, 1, "", "sparse_cross_entropy"], [442, 1, 1, "", "split"], [168, 1, 1, "", "split_factor"], [169, 1, 1, "", "split_func_call"], [233, 1, 1, "", "sqrt"], [234, 1, 1, "", "square"], [443, 1, 1, "", "squeeze"], [309, 1, 1, "", "stable_divide"], [310, 1, 1, "", "stable_pow"], [444, 1, 1, "", "stack"], [507, 1, 1, "", "std"], [353, 1, 1, "", "stop_gradient"], [235, 1, 1, "", "subtract"], [508, 1, 1, "", "sum"], [311, 1, 1, "", "supports_inplace_updates"], [419, 1, 1, "", "svd"], [420, 1, 1, "", "svdvals"], [445, 1, 1, "", "swapaxes"], [236, 1, 1, "", "tan"], [237, 1, 1, "", "tanh"], [421, 1, 1, "", "tensordot"], [422, 1, 1, "", "tensorsolve"], [446, 1, 1, "", "tile"], [170, 1, 1, "", "to_device"], [312, 1, 1, "", "to_ivy_shape"], [313, 1, 1, "", "to_list"], [314, 1, 1, "", "to_native_shape"], [315, 1, 1, "", "to_numpy"], [316, 1, 1, "", "to_scalar"], [171, 1, 1, "", "total_mem_on_dev"], [172, 1, 1, "", "tpu_is_available"], [423, 1, 1, "", "trace"], [93, 1, 1, "", "tril"], [94, 1, 1, "", "triu"], [238, 1, 1, "", "trunc"], [239, 1, 1, "", "trunc_divide"], [317, 1, 1, "", "try_else_none"], [141, 1, 1, "", "type_promote_arrays"], [492, 1, 1, "", "unique_all"], [493, 1, 1, "", "unique_counts"], [494, 1, 1, "", "unique_inverse"], [495, 1, 1, "", "unique_values"], [318, 1, 1, "", "unset_array_mode"], [142, 1, 1, "", "unset_default_complex_dtype"], [173, 1, 1, "", "unset_default_device"], [143, 1, 1, "", "unset_default_dtype"], [144, 1, 1, "", "unset_default_float_dtype"], [145, 1, 1, "", "unset_default_int_dtype"], [146, 1, 1, "", "unset_default_uint_dtype"], [319, 1, 1, "", "unset_exception_trace_mode"], [320, 1, 1, "", "unset_nestable_mode"], [321, 1, 1, "", "unset_queue_timeout"], [322, 1, 1, "", "unset_shape_array_mode"], [323, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [354, 1, 1, "", "unset_with_grads"], [447, 1, 1, "", "unstack"], [174, 1, 1, "", "used_mem_on_dev"], [147, 1, 1, "", "valid_dtype"], [355, 1, 1, "", "value_and_grad"], [324, 1, 1, "", "value_is_nan"], [424, 1, 1, "", "vander"], [509, 1, 1, "", "var"], [425, 1, 1, "", "vecdot"], [426, 1, 1, "", "vector_norm"], [427, 1, 1, "", "vector_to_skew_symmetric_matrix"], [325, 1, 1, "", "vmap"], [491, 1, 1, "", "where"], [71, 1, 1, "", "while_loop"], [356, 1, 1, "", "with_grads"], [448, 1, 1, "", "zero_pad"], [95, 1, 1, "", "zeros"], [96, 1, 1, "", "zeros_like"]], "ivy.data_classes.array": [[0, 2, 0, "-", "activations"], [45, 2, 0, "-", "array"], [1, 2, 0, "-", "conversions"], [2, 2, 0, "-", "creation"], [3, 2, 0, "-", "data_type"], [4, 2, 0, "-", "device"], [5, 2, 0, "-", "elementwise"], [6, 2, 0, "-", "experimental"], [7, 2, 0, "-", "general"], [8, 2, 0, "-", "gradients"], [9, 2, 0, "-", "image"], [10, 2, 0, "-", "layers"], [11, 2, 0, "-", "linear_algebra"], [12, 2, 0, "-", "losses"], [13, 2, 0, "-", "manipulation"], [14, 2, 0, "-", "norms"], [15, 2, 0, "-", "random"], [16, 2, 0, "-", "searching"], [17, 2, 0, "-", "set"], [18, 2, 0, "-", "sorting"], [19, 2, 0, "-", "statistical"], [20, 2, 0, "-", "utility"], [21, 2, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[0, 3, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[0, 4, 1, "", "_abc_impl"], [0, 0, 1, "", "gelu"], [0, 0, 1, "", "leaky_relu"], [0, 0, 1, "", "log_softmax"], [0, 0, 1, "", "mish"], [0, 0, 1, "", "relu"], [0, 0, 1, "", "sigmoid"], [0, 0, 1, "", "softmax"], [0, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[45, 3, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[45, 5, 1, "", "T"], [45, 0, 1, "", "__abs__"], [45, 0, 1, "", "__add__"], [45, 0, 1, "", "__eq__"], [45, 0, 1, "", "__ge__"], [45, 0, 1, "", "__gt__"], [45, 0, 1, "", "__init__"], [45, 0, 1, "", "__le__"], [45, 0, 1, "", "__lt__"], [45, 0, 1, "", "__ne__"], [45, 0, 1, "", "__pow__"], [45, 0, 1, "", "__radd__"], [45, 0, 1, "", "__rrshift__"], [45, 0, 1, "", "__rshift__"], [45, 0, 1, "", "__rsub__"], [45, 0, 1, "", "__sub__"], [45, 0, 1, "", "__truediv__"], [45, 0, 1, "", "__xor__"], [45, 5, 1, "", "data"], [45, 5, 1, "", "device"], [45, 5, 1, "", "dtype"], [45, 5, 1, "", "dynamic_backend"], [45, 5, 1, "", "mT"], [45, 5, 1, "", "ndim"], [45, 5, 1, "", "shape"], [45, 5, 1, "", "size"]], "ivy.data_classes.array.conversions": [[1, 1, 1, "", "_to_ivy"], [1, 1, 1, "", "_to_native"], [1, 1, 1, "", "args_to_ivy"], [1, 1, 1, "", "args_to_native"], [1, 1, 1, "", "to_ivy"], [1, 1, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[2, 3, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[2, 4, 1, "", "_abc_impl"], [2, 0, 1, "", "asarray"], [2, 0, 1, "", "copy_array"], [2, 0, 1, "", "empty_like"], [2, 0, 1, "", "from_dlpack"], [2, 0, 1, "", "full_like"], [2, 0, 1, "", "linspace"], [2, 0, 1, "", "logspace"], [2, 0, 1, "", "meshgrid"], [2, 0, 1, "", "native_array"], [2, 0, 1, "", "one_hot"], [2, 0, 1, "", "ones_like"], [2, 0, 1, "", "tril"], [2, 0, 1, "", "triu"], [2, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[3, 3, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "astype"], [3, 0, 1, "", "broadcast_arrays"], [3, 0, 1, "", "broadcast_to"], [3, 0, 1, "", "can_cast"], [3, 0, 1, "", "dtype"], [3, 0, 1, "", "finfo"], [3, 0, 1, "", "iinfo"], [3, 0, 1, "", "is_bool_dtype"], [3, 0, 1, "", "is_float_dtype"], [3, 0, 1, "", "is_int_dtype"], [3, 0, 1, "", "is_uint_dtype"], [3, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[4, 3, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "dev"], [4, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[5, 3, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "abs"], [5, 0, 1, "", "acos"], [5, 0, 1, "", "acosh"], [5, 0, 1, "", "add"], [5, 0, 1, "", "asin"], [5, 0, 1, "", "asinh"], [5, 0, 1, "", "atan"], [5, 0, 1, "", "atan2"], [5, 0, 1, "", "atanh"], [5, 0, 1, "", "bitwise_and"], [5, 0, 1, "", "bitwise_invert"], [5, 0, 1, "", "bitwise_left_shift"], [5, 0, 1, "", "bitwise_or"], [5, 0, 1, "", "bitwise_right_shift"], [5, 0, 1, "", "bitwise_xor"], [5, 0, 1, "", "ceil"], [5, 0, 1, "", "cos"], [5, 0, 1, "", "cosh"], [5, 0, 1, "", "deg2rad"], [5, 0, 1, "", "divide"], [5, 0, 1, "", "equal"], [5, 0, 1, "", "erf"], [5, 0, 1, "", "exp"], [5, 0, 1, "", "expm1"], [5, 0, 1, "", "floor"], [5, 0, 1, "", "floor_divide"], [5, 0, 1, "", "greater"], [5, 0, 1, "", "greater_equal"], [5, 0, 1, "", "isfinite"], [5, 0, 1, "", "isinf"], [5, 0, 1, "", "isnan"], [5, 0, 1, "", "isreal"], [5, 0, 1, "", "less"], [5, 0, 1, "", "less_equal"], [5, 0, 1, "", "log"], [5, 0, 1, "", "log10"], [5, 0, 1, "", "log1p"], [5, 0, 1, "", "log2"], [5, 0, 1, "", "logaddexp"], [5, 0, 1, "", "logical_and"], [5, 0, 1, "", "logical_not"], [5, 0, 1, "", "logical_or"], [5, 0, 1, "", "logical_xor"], [5, 0, 1, "", "maximum"], [5, 0, 1, "", "minimum"], [5, 0, 1, "", "multiply"], [5, 0, 1, "", "negative"], [5, 0, 1, "", "not_equal"], [5, 0, 1, "", "positive"], [5, 0, 1, "", "pow"], [5, 0, 1, "", "rad2deg"], [5, 0, 1, "", "reciprocal"], [5, 0, 1, "", "remainder"], [5, 0, 1, "", "round"], [5, 0, 1, "", "sign"], [5, 0, 1, "", "sin"], [5, 0, 1, "", "sinh"], [5, 0, 1, "", "sqrt"], [5, 0, 1, "", "square"], [5, 0, 1, "", "subtract"], [5, 0, 1, "", "tan"], [5, 0, 1, "", "tanh"], [5, 0, 1, "", "trunc"], [5, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[6, 2, 0, "-", "activations"], [6, 2, 0, "-", "conversions"], [6, 2, 0, "-", "creation"], [6, 2, 0, "-", "data_type"], [6, 2, 0, "-", "device"], [6, 2, 0, "-", "elementwise"], [6, 2, 0, "-", "general"], [6, 2, 0, "-", "gradients"], [6, 2, 0, "-", "image"], [6, 2, 0, "-", "layers"], [6, 2, 0, "-", "linear_algebra"], [6, 2, 0, "-", "losses"], [6, 2, 0, "-", "manipulation"], [6, 2, 0, "-", "norms"], [6, 2, 0, "-", "random"], [6, 2, 0, "-", "searching"], [6, 2, 0, "-", "set"], [6, 2, 0, "-", "sorting"], [6, 2, 0, "-", "statistical"], [6, 2, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[6, 3, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "batch_norm"], [6, 0, 1, "", "logit"], [6, 0, 1, "", "logsigmoid"], [6, 0, 1, "", "prelu"], [6, 0, 1, "", "relu6"], [6, 0, 1, "", "selu"], [6, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[6, 3, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[6, 3, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "eye_like"]], "ivy.data_classes.array.experimental.data_type": [[6, 3, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[6, 3, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[6, 3, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "allclose"], [6, 0, 1, "", "angle"], [6, 0, 1, "", "binarizer"], [6, 0, 1, "", "conj"], [6, 0, 1, "", "copysign"], [6, 0, 1, "", "count_nonzero"], [6, 0, 1, "", "diff"], [6, 0, 1, "", "exp2"], [6, 0, 1, "", "fix"], [6, 0, 1, "", "float_power"], [6, 0, 1, "", "fmax"], [6, 0, 1, "", "fmin"], [6, 0, 1, "", "fmod"], [6, 0, 1, "", "frexp"], [6, 0, 1, "", "gcd"], [6, 0, 1, "", "gradient"], [6, 0, 1, "", "hypot"], [6, 0, 1, "", "imag"], [6, 0, 1, "", "isclose"], [6, 0, 1, "", "lcm"], [6, 0, 1, "", "ldexp"], [6, 0, 1, "", "logaddexp2"], [6, 0, 1, "", "nan_to_num"], [6, 0, 1, "", "nansum"], [6, 0, 1, "", "nextafter"], [6, 0, 1, "", "real"], [6, 0, 1, "", "signbit"], [6, 0, 1, "", "sinc"], [6, 0, 1, "", "trapz"], [6, 0, 1, "", "xlogy"], [6, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[6, 3, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "isin"]], "ivy.data_classes.array.experimental.gradients": [[6, 3, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[6, 3, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[6, 3, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "adaptive_avg_pool1d"], [6, 0, 1, "", "adaptive_avg_pool2d"], [6, 0, 1, "", "avg_pool1d"], [6, 0, 1, "", "avg_pool2d"], [6, 0, 1, "", "avg_pool3d"], [6, 0, 1, "", "dct"], [6, 0, 1, "", "dft"], [6, 0, 1, "", "embedding"], [6, 0, 1, "", "fft"], [6, 0, 1, "", "ifft"], [6, 0, 1, "", "interpolate"], [6, 0, 1, "", "max_pool1d"], [6, 0, 1, "", "max_pool2d"], [6, 0, 1, "", "max_pool3d"]], "ivy.data_classes.array.experimental.linear_algebra": [[6, 3, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "adjoint"], [6, 0, 1, "", "cond"], [6, 0, 1, "", "diagflat"], [6, 0, 1, "", "eig"], [6, 0, 1, "", "eigh_tridiagonal"], [6, 0, 1, "", "eigvals"], [6, 0, 1, "", "kron"], [6, 0, 1, "", "matrix_exp"], [6, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[6, 3, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[6, 3, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "atleast_1d"], [6, 0, 1, "", "atleast_2d"], [6, 0, 1, "", "atleast_3d"], [6, 0, 1, "", "dsplit"], [6, 0, 1, "", "dstack"], [6, 0, 1, "", "expand"], [6, 0, 1, "", "flatten"], [6, 0, 1, "", "fliplr"], [6, 0, 1, "", "flipud"], [6, 0, 1, "", "heaviside"], [6, 0, 1, "", "hsplit"], [6, 0, 1, "", "hstack"], [6, 0, 1, "", "i0"], [6, 0, 1, "", "moveaxis"], [6, 0, 1, "", "pad"], [6, 0, 1, "", "rot90"], [6, 0, 1, "", "take_along_axis"], [6, 0, 1, "", "top_k"], [6, 0, 1, "", "vsplit"], [6, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[6, 3, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "instance_norm"], [6, 0, 1, "", "l2_normalize"], [6, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[6, 3, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "bernoulli"], [6, 0, 1, "", "beta"], [6, 0, 1, "", "dirichlet"], [6, 0, 1, "", "gamma"], [6, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[6, 3, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[6, 3, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[6, 3, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "lexsort"], [6, 0, 1, "", "msort"]], "ivy.data_classes.array.experimental.statistical": [[6, 3, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "bincount"], [6, 0, 1, "", "corrcoef"], [6, 0, 1, "", "median"], [6, 0, 1, "", "nanmean"], [6, 0, 1, "", "nanmedian"], [6, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[6, 3, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[7, 3, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "all_equal"], [7, 0, 1, "", "array_equal"], [7, 0, 1, "", "assert_supports_inplace"], [7, 0, 1, "", "clip_matrix_norm"], [7, 0, 1, "", "clip_vector_norm"], [7, 0, 1, "", "default"], [7, 0, 1, "", "einops_rearrange"], [7, 0, 1, "", "einops_reduce"], [7, 0, 1, "", "einops_repeat"], [7, 0, 1, "", "exists"], [7, 0, 1, "", "fourier_encode"], [7, 0, 1, "", "gather"], [7, 0, 1, "", "gather_nd"], [7, 0, 1, "", "get_num_dims"], [7, 0, 1, "", "has_nans"], [7, 0, 1, "", "inplace_decrement"], [7, 0, 1, "", "inplace_increment"], [7, 0, 1, "", "inplace_update"], [7, 0, 1, "", "is_array"], [7, 0, 1, "", "is_ivy_array"], [7, 0, 1, "", "is_ivy_container"], [7, 0, 1, "", "is_native_array"], [7, 0, 1, "", "scatter_flat"], [7, 0, 1, "", "scatter_nd"], [7, 0, 1, "", "stable_divide"], [7, 0, 1, "", "stable_pow"], [7, 0, 1, "", "supports_inplace_updates"], [7, 0, 1, "", "to_list"], [7, 0, 1, "", "to_numpy"], [7, 0, 1, "", "to_scalar"], [7, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[8, 3, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adam_step"], [8, 0, 1, "", "adam_update"], [8, 0, 1, "", "gradient_descent_update"], [8, 0, 1, "", "lamb_update"], [8, 0, 1, "", "lars_update"], [8, 0, 1, "", "optimizer_update"], [8, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[9, 3, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[10, 3, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "conv1d"], [10, 0, 1, "", "conv1d_transpose"], [10, 0, 1, "", "conv2d"], [10, 0, 1, "", "conv2d_transpose"], [10, 0, 1, "", "conv3d"], [10, 0, 1, "", "conv3d_transpose"], [10, 0, 1, "", "depthwise_conv2d"], [10, 0, 1, "", "dropout"], [10, 0, 1, "", "dropout1d"], [10, 0, 1, "", "dropout3d"], [10, 0, 1, "", "linear"], [10, 0, 1, "", "lstm_update"], [10, 0, 1, "", "multi_head_attention"], [10, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[11, 3, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "cholesky"], [11, 0, 1, "", "cross"], [11, 0, 1, "", "det"], [11, 0, 1, "", "diag"], [11, 0, 1, "", "diagonal"], [11, 0, 1, "", "eig"], [11, 0, 1, "", "eigh"], [11, 0, 1, "", "eigvalsh"], [11, 0, 1, "", "inner"], [11, 0, 1, "", "inv"], [11, 0, 1, "", "matmul"], [11, 0, 1, "", "matrix_norm"], [11, 0, 1, "", "matrix_power"], [11, 0, 1, "", "matrix_rank"], [11, 0, 1, "", "matrix_transpose"], [11, 0, 1, "", "outer"], [11, 0, 1, "", "pinv"], [11, 0, 1, "", "qr"], [11, 0, 1, "", "slogdet"], [11, 0, 1, "", "solve"], [11, 0, 1, "", "svd"], [11, 0, 1, "", "svdvals"], [11, 0, 1, "", "tensordot"], [11, 0, 1, "", "tensorsolve"], [11, 0, 1, "", "trace"], [11, 0, 1, "", "vander"], [11, 0, 1, "", "vecdot"], [11, 0, 1, "", "vector_norm"], [11, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[12, 3, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "binary_cross_entropy"], [12, 0, 1, "", "cross_entropy"], [12, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[13, 3, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "clip"], [13, 0, 1, "", "concat"], [13, 0, 1, "", "constant_pad"], [13, 0, 1, "", "expand_dims"], [13, 0, 1, "", "flip"], [13, 0, 1, "", "permute_dims"], [13, 0, 1, "", "repeat"], [13, 0, 1, "", "reshape"], [13, 0, 1, "", "roll"], [13, 0, 1, "", "split"], [13, 0, 1, "", "squeeze"], [13, 0, 1, "", "stack"], [13, 0, 1, "", "swapaxes"], [13, 0, 1, "", "tile"], [13, 0, 1, "", "unstack"], [13, 0, 1, "", "view"], [13, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[14, 3, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[15, 3, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "multinomial"], [15, 0, 1, "", "randint"], [15, 0, 1, "", "random_normal"], [15, 0, 1, "", "random_uniform"], [15, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[16, 3, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "argmax"], [16, 0, 1, "", "argmin"], [16, 0, 1, "", "argwhere"], [16, 0, 1, "", "nonzero"], [16, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[17, 3, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "unique_all"], [17, 0, 1, "", "unique_counts"], [17, 0, 1, "", "unique_inverse"], [17, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[18, 3, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "argsort"], [18, 0, 1, "", "searchsorted"], [18, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[19, 3, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "cumprod"], [19, 0, 1, "", "cumsum"], [19, 0, 1, "", "einsum"], [19, 0, 1, "", "max"], [19, 0, 1, "", "mean"], [19, 0, 1, "", "min"], [19, 0, 1, "", "prod"], [19, 0, 1, "", "std"], [19, 0, 1, "", "sum"], [19, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[20, 3, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "all"], [20, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[21, 1, 1, "", "_wrap_function"], [21, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[22, 2, 0, "-", "activations"], [23, 2, 0, "-", "base"], [46, 2, 0, "-", "container"], [24, 2, 0, "-", "conversions"], [25, 2, 0, "-", "creation"], [26, 2, 0, "-", "data_type"], [27, 2, 0, "-", "device"], [28, 2, 0, "-", "elementwise"], [29, 2, 0, "-", "experimental"], [30, 2, 0, "-", "general"], [31, 2, 0, "-", "gradients"], [32, 2, 0, "-", "image"], [33, 2, 0, "-", "layers"], [34, 2, 0, "-", "linear_algebra"], [35, 2, 0, "-", "losses"], [36, 2, 0, "-", "manipulation"], [37, 2, 0, "-", "norms"], [38, 2, 0, "-", "random"], [39, 2, 0, "-", "searching"], [40, 2, 0, "-", "set"], [41, 2, 0, "-", "sorting"], [42, 2, 0, "-", "statistical"], [43, 2, 0, "-", "utility"], [44, 2, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[22, 3, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "_static_gelu"], [22, 0, 1, "", "_static_leaky_relu"], [22, 0, 1, "", "_static_log_softmax"], [22, 0, 1, "", "_static_mish"], [22, 0, 1, "", "_static_relu"], [22, 0, 1, "", "_static_sigmoid"], [22, 0, 1, "", "_static_softmax"], [22, 0, 1, "", "_static_softplus"], [22, 0, 1, "", "gelu"], [22, 0, 1, "", "leaky_relu"], [22, 0, 1, "", "log_softmax"], [22, 0, 1, "", "mish"], [22, 0, 1, "", "relu"], [22, 0, 1, "", "sigmoid"], [22, 0, 1, "", "softmax"], [22, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[23, 3, 1, "", "ContainerBase"], [23, 1, 1, "", "_is_jsonable"], [23, 1, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[23, 0, 1, "", "__getitem__"], [23, 0, 1, "", "__init__"], [23, 0, 1, "", "__setitem__"], [23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [23, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [23, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [23, 0, 1, "", "_cont_concat_unify"], [23, 0, 1, "", "_cont_get_dev"], [23, 0, 1, "", "_cont_get_shape"], [23, 0, 1, "", "_cont_get_shapes"], [23, 5, 1, "", "_cont_ivy"], [23, 0, 1, "", "_cont_mean_unify"], [23, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [23, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [23, 0, 1, "", "_cont_slice_keys"], [23, 0, 1, "", "_cont_sum_unify"], [23, 0, 1, "", "_get_queue_item"], [23, 0, 1, "", "cont_all_false"], [23, 0, 1, "", "cont_all_key_chains"], [23, 0, 1, "", "cont_all_true"], [23, 0, 1, "", "cont_as_bools"], [23, 0, 1, "", "cont_assert_contains_sub_container"], [23, 0, 1, "", "cont_assert_contains_sub_structure"], [23, 0, 1, "", "cont_assert_identical"], [23, 0, 1, "", "cont_assert_identical_structure"], [23, 0, 1, "", "cont_at_key_chain"], [23, 0, 1, "", "cont_at_key_chains"], [23, 0, 1, "", "cont_at_keys"], [23, 0, 1, "", "cont_combine"], [23, 0, 1, "", "cont_common_key_chains"], [23, 5, 1, "", "cont_config"], [23, 0, 1, "", "cont_contains_sub_container"], [23, 0, 1, "", "cont_contains_sub_structure"], [23, 0, 1, "", "cont_copy"], [23, 0, 1, "", "cont_create_if_absent"], [23, 0, 1, "", "cont_cutoff_at_depth"], [23, 0, 1, "", "cont_cutoff_at_height"], [23, 0, 1, "", "cont_deep_copy"], [23, 5, 1, "", "cont_dev"], [23, 5, 1, "", "cont_dev_str"], [23, 0, 1, "", "cont_diff"], [23, 0, 1, "", "cont_duplicate_array_keychains"], [23, 0, 1, "", "cont_find_sub_container"], [23, 0, 1, "", "cont_find_sub_structure"], [23, 0, 1, "", "cont_flatten_key_chain"], [23, 0, 1, "", "cont_flatten_key_chains"], [23, 0, 1, "", "cont_format_key_chains"], [23, 0, 1, "", "cont_from_disk_as_hdf5"], [23, 0, 1, "", "cont_from_disk_as_json"], [23, 0, 1, "", "cont_from_disk_as_pickled"], [23, 0, 1, "", "cont_from_flat_list"], [23, 0, 1, "", "cont_handle_inplace"], [23, 0, 1, "", "cont_has_key"], [23, 0, 1, "", "cont_has_key_chain"], [23, 0, 1, "", "cont_identical"], [23, 0, 1, "", "cont_identical_array_shapes"], [23, 0, 1, "", "cont_identical_configs"], [23, 0, 1, "", "cont_identical_structure"], [23, 0, 1, "", "cont_if_exists"], [23, 0, 1, "", "cont_inplace_update"], [23, 5, 1, "", "cont_ivy"], [23, 0, 1, "", "cont_key_chains_containing"], [23, 0, 1, "", "cont_list_join"], [23, 0, 1, "", "cont_list_stack"], [23, 0, 1, "", "cont_map"], [23, 0, 1, "", "cont_map_sub_conts"], [23, 5, 1, "", "cont_max_depth"], [23, 0, 1, "", "cont_multi_map"], [23, 0, 1, "", "cont_multi_map_in_function"], [23, 0, 1, "", "cont_num_arrays"], [23, 0, 1, "", "cont_overwrite_at_key_chain"], [23, 0, 1, "", "cont_overwrite_at_key_chains"], [23, 0, 1, "", "cont_prune_empty"], [23, 0, 1, "", "cont_prune_key_chain"], [23, 0, 1, "", "cont_prune_key_chains"], [23, 0, 1, "", "cont_prune_key_from_key_chains"], [23, 0, 1, "", "cont_prune_keys"], [23, 0, 1, "", "cont_prune_keys_from_key_chains"], [23, 0, 1, "", "cont_reduce"], [23, 0, 1, "", "cont_remove_key_length_limit"], [23, 0, 1, "", "cont_remove_print_limit"], [23, 0, 1, "", "cont_reshape_like"], [23, 0, 1, "", "cont_restructure"], [23, 0, 1, "", "cont_restructure_key_chains"], [23, 0, 1, "", "cont_set_at_key_chain"], [23, 0, 1, "", "cont_set_at_key_chains"], [23, 0, 1, "", "cont_set_at_keys"], [23, 5, 1, "", "cont_shape"], [23, 5, 1, "", "cont_shapes"], [23, 0, 1, "", "cont_show"], [23, 0, 1, "", "cont_show_sub_container"], [23, 0, 1, "", "cont_size_ordered_arrays"], [23, 0, 1, "", "cont_slice_keys"], [23, 0, 1, "", "cont_slice_via_key"], [23, 0, 1, "", "cont_sort_by_key"], [23, 0, 1, "", "cont_structural_diff"], [23, 0, 1, "", "cont_to_dict"], [23, 0, 1, "", "cont_to_disk_as_hdf5"], [23, 0, 1, "", "cont_to_disk_as_json"], [23, 0, 1, "", "cont_to_disk_as_pickled"], [23, 0, 1, "", "cont_to_flat_list"], [23, 0, 1, "", "cont_to_iterator"], [23, 0, 1, "", "cont_to_iterator_keys"], [23, 0, 1, "", "cont_to_iterator_values"], [23, 0, 1, "", "cont_to_jsonable"], [23, 0, 1, "", "cont_to_nested_list"], [23, 0, 1, "", "cont_to_raw"], [23, 0, 1, "", "cont_trim_key"], [23, 0, 1, "", "cont_try_kc"], [23, 0, 1, "", "cont_unify"], [23, 0, 1, "", "cont_unstack_conts"], [23, 0, 1, "", "cont_update_config"], [23, 0, 1, "", "cont_with_default_key_color"], [23, 0, 1, "", "cont_with_entries_as_lists"], [23, 0, 1, "", "cont_with_ivy_backend"], [23, 0, 1, "", "cont_with_key_length_limit"], [23, 0, 1, "", "cont_with_print_indent"], [23, 0, 1, "", "cont_with_print_limit"], [23, 0, 1, "", "cont_with_print_line_spacing"], [23, 5, 1, "", "dynamic_backend"], [23, 0, 1, "", "h5_file_size"], [23, 0, 1, "", "shuffle_h5_file"], [23, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[46, 3, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[46, 0, 1, "", "__abs__"], [46, 0, 1, "", "__add__"], [46, 0, 1, "", "__eq__"], [46, 0, 1, "", "__ge__"], [46, 0, 1, "", "__gt__"], [46, 0, 1, "", "__init__"], [46, 0, 1, "", "__le__"], [46, 0, 1, "", "__lt__"], [46, 0, 1, "", "__ne__"], [46, 0, 1, "", "__pow__"], [46, 0, 1, "", "__radd__"], [46, 0, 1, "", "__rrshift__"], [46, 0, 1, "", "__rshift__"], [46, 0, 1, "", "__rsub__"], [46, 0, 1, "", "__sub__"], [46, 0, 1, "", "__truediv__"], [46, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[24, 3, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "_static_to_ivy"], [24, 0, 1, "", "_static_to_native"], [24, 0, 1, "", "to_ivy"], [24, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[25, 3, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_arange"], [25, 0, 1, "", "_static_asarray"], [25, 0, 1, "", "_static_empty_like"], [25, 0, 1, "", "_static_eye"], [25, 0, 1, "", "_static_from_dlpack"], [25, 0, 1, "", "_static_full_like"], [25, 0, 1, "", "_static_linspace"], [25, 0, 1, "", "_static_logspace"], [25, 0, 1, "", "_static_meshgrid"], [25, 0, 1, "", "_static_native_array"], [25, 0, 1, "", "_static_one_hot"], [25, 0, 1, "", "_static_ones"], [25, 0, 1, "", "_static_ones_like"], [25, 0, 1, "", "_static_tril"], [25, 0, 1, "", "_static_triu"], [25, 0, 1, "", "_static_zeros"], [25, 0, 1, "", "_static_zeros_like"], [25, 0, 1, "", "empty_like"], [25, 0, 1, "", "from_dlpack"], [25, 0, 1, "", "full_like"], [25, 0, 1, "", "linspace"], [25, 0, 1, "", "logspace"], [25, 0, 1, "", "meshgrid"], [25, 0, 1, "", "native_array"], [25, 0, 1, "", "one_hot"], [25, 0, 1, "", "ones_like"], [25, 0, 1, "", "tril"], [25, 0, 1, "", "triu"], [25, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[26, 3, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_static_astype"], [26, 0, 1, "", "_static_broadcast_arrays"], [26, 0, 1, "", "_static_broadcast_to"], [26, 0, 1, "", "_static_can_cast"], [26, 0, 1, "", "_static_default_complex_dtype"], [26, 0, 1, "", "_static_default_float_dtype"], [26, 0, 1, "", "_static_dtype"], [26, 0, 1, "", "_static_finfo"], [26, 0, 1, "", "_static_function_supported_dtypes"], [26, 0, 1, "", "_static_function_unsupported_dtypes"], [26, 0, 1, "", "_static_iinfo"], [26, 0, 1, "", "_static_is_bool_dtype"], [26, 0, 1, "", "_static_is_complex_dtype"], [26, 0, 1, "", "_static_is_float_dtype"], [26, 0, 1, "", "_static_is_int_dtype"], [26, 0, 1, "", "_static_is_uint_dtype"], [26, 0, 1, "", "_static_result_type"], [26, 0, 1, "", "astype"], [26, 0, 1, "", "broadcast_arrays"], [26, 0, 1, "", "broadcast_to"], [26, 0, 1, "", "can_cast"], [26, 0, 1, "", "dtype"], [26, 0, 1, "", "finfo"], [26, 0, 1, "", "iinfo"], [26, 0, 1, "", "is_bool_dtype"], [26, 0, 1, "", "is_complex_dtype"], [26, 0, 1, "", "is_float_dtype"], [26, 0, 1, "", "is_int_dtype"], [26, 0, 1, "", "is_uint_dtype"], [26, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[27, 3, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_dev"], [27, 0, 1, "", "_static_to_device"], [27, 0, 1, "", "dev"], [27, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[28, 3, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_abs"], [28, 0, 1, "", "_static_acos"], [28, 0, 1, "", "_static_acosh"], [28, 0, 1, "", "_static_add"], [28, 0, 1, "", "_static_asin"], [28, 0, 1, "", "_static_asinh"], [28, 0, 1, "", "_static_atan"], [28, 0, 1, "", "_static_atan2"], [28, 0, 1, "", "_static_atanh"], [28, 0, 1, "", "_static_bitwise_and"], [28, 0, 1, "", "_static_bitwise_invert"], [28, 0, 1, "", "_static_bitwise_left_shift"], [28, 0, 1, "", "_static_bitwise_or"], [28, 0, 1, "", "_static_bitwise_right_shift"], [28, 0, 1, "", "_static_bitwise_xor"], [28, 0, 1, "", "_static_ceil"], [28, 0, 1, "", "_static_cos"], [28, 0, 1, "", "_static_cosh"], [28, 0, 1, "", "_static_deg2rad"], [28, 0, 1, "", "_static_divide"], [28, 0, 1, "", "_static_equal"], [28, 0, 1, "", "_static_erf"], [28, 0, 1, "", "_static_exp"], [28, 0, 1, "", "_static_expm1"], [28, 0, 1, "", "_static_floor"], [28, 0, 1, "", "_static_floor_divide"], [28, 0, 1, "", "_static_greater"], [28, 0, 1, "", "_static_greater_equal"], [28, 0, 1, "", "_static_isfinite"], [28, 0, 1, "", "_static_isinf"], [28, 0, 1, "", "_static_isnan"], [28, 0, 1, "", "_static_isreal"], [28, 0, 1, "", "_static_less"], [28, 0, 1, "", "_static_less_equal"], [28, 0, 1, "", "_static_log"], [28, 0, 1, "", "_static_log10"], [28, 0, 1, "", "_static_log1p"], [28, 0, 1, "", "_static_log2"], [28, 0, 1, "", "_static_logaddexp"], [28, 0, 1, "", "_static_logical_and"], [28, 0, 1, "", "_static_logical_not"], [28, 0, 1, "", "_static_logical_or"], [28, 0, 1, "", "_static_logical_xor"], [28, 0, 1, "", "_static_maximum"], [28, 0, 1, "", "_static_minimum"], [28, 0, 1, "", "_static_multiply"], [28, 0, 1, "", "_static_negative"], [28, 0, 1, "", "_static_not_equal"], [28, 0, 1, "", "_static_positive"], [28, 0, 1, "", "_static_pow"], [28, 0, 1, "", "_static_rad2deg"], [28, 0, 1, "", "_static_reciprocal"], [28, 0, 1, "", "_static_remainder"], [28, 0, 1, "", "_static_round"], [28, 0, 1, "", "_static_sign"], [28, 0, 1, "", "_static_sin"], [28, 0, 1, "", "_static_sinh"], [28, 0, 1, "", "_static_sqrt"], [28, 0, 1, "", "_static_square"], [28, 0, 1, "", "_static_subtract"], [28, 0, 1, "", "_static_tan"], [28, 0, 1, "", "_static_tanh"], [28, 0, 1, "", "_static_trapz"], [28, 0, 1, "", "_static_trunc"], [28, 0, 1, "", "_static_trunc_divide"], [28, 0, 1, "", "abs"], [28, 0, 1, "", "acos"], [28, 0, 1, "", "acosh"], [28, 0, 1, "", "add"], [28, 0, 1, "", "asin"], [28, 0, 1, "", "asinh"], [28, 0, 1, "", "atan"], [28, 0, 1, "", "atan2"], [28, 0, 1, "", "atanh"], [28, 0, 1, "", "bitwise_and"], [28, 0, 1, "", "bitwise_invert"], [28, 0, 1, "", "bitwise_left_shift"], [28, 0, 1, "", "bitwise_or"], [28, 0, 1, "", "bitwise_right_shift"], [28, 0, 1, "", "bitwise_xor"], [28, 0, 1, "", "ceil"], [28, 0, 1, "", "cos"], [28, 0, 1, "", "cosh"], [28, 0, 1, "", "deg2rad"], [28, 0, 1, "", "divide"], [28, 0, 1, "", "equal"], [28, 0, 1, "", "erf"], [28, 0, 1, "", "exp"], [28, 0, 1, "", "expm1"], [28, 0, 1, "", "floor"], [28, 0, 1, "", "floor_divide"], [28, 0, 1, "", "greater"], [28, 0, 1, "", "greater_equal"], [28, 0, 1, "", "isfinite"], [28, 0, 1, "", "isinf"], [28, 0, 1, "", "isnan"], [28, 0, 1, "", "isreal"], [28, 0, 1, "", "less"], [28, 0, 1, "", "less_equal"], [28, 0, 1, "", "log"], [28, 0, 1, "", "log10"], [28, 0, 1, "", "log1p"], [28, 0, 1, "", "log2"], [28, 0, 1, "", "logaddexp"], [28, 0, 1, "", "logical_and"], [28, 0, 1, "", "logical_not"], [28, 0, 1, "", "logical_or"], [28, 0, 1, "", "logical_xor"], [28, 0, 1, "", "maximum"], [28, 0, 1, "", "minimum"], [28, 0, 1, "", "multiply"], [28, 0, 1, "", "negative"], [28, 0, 1, "", "not_equal"], [28, 0, 1, "", "positive"], [28, 0, 1, "", "pow"], [28, 0, 1, "", "rad2deg"], [28, 0, 1, "", "reciprocal"], [28, 0, 1, "", "remainder"], [28, 0, 1, "", "round"], [28, 0, 1, "", "sign"], [28, 0, 1, "", "sin"], [28, 0, 1, "", "sinh"], [28, 0, 1, "", "sqrt"], [28, 0, 1, "", "square"], [28, 0, 1, "", "subtract"], [28, 0, 1, "", "tan"], [28, 0, 1, "", "tanh"], [28, 0, 1, "", "trapz"], [28, 0, 1, "", "trunc"], [28, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[29, 2, 0, "-", "activations"], [29, 2, 0, "-", "conversions"], [29, 2, 0, "-", "creation"], [29, 2, 0, "-", "data_type"], [29, 2, 0, "-", "device"], [29, 2, 0, "-", "elementwise"], [29, 2, 0, "-", "general"], [29, 2, 0, "-", "gradients"], [29, 2, 0, "-", "image"], [29, 2, 0, "-", "layers"], [29, 2, 0, "-", "linear_algebra"], [29, 2, 0, "-", "losses"], [29, 2, 0, "-", "manipulation"], [29, 2, 0, "-", "norms"], [29, 2, 0, "-", "random"], [29, 2, 0, "-", "searching"], [29, 2, 0, "-", "set"], [29, 2, 0, "-", "sorting"], [29, 2, 0, "-", "statistical"], [29, 2, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[29, 3, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "batch_norm"], [29, 0, 1, "", "logit"], [29, 0, 1, "", "logsigmoid"], [29, 0, 1, "", "prelu"], [29, 0, 1, "", "relu6"], [29, 0, 1, "", "selu"], [29, 0, 1, "", "static_batch_norm"], [29, 0, 1, "", "static_logit"], [29, 0, 1, "", "static_logsigmoid"], [29, 0, 1, "", "static_prelu"], [29, 0, 1, "", "static_relu6"], [29, 0, 1, "", "static_selu"], [29, 0, 1, "", "static_thresholded_relu"], [29, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[29, 3, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[29, 3, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "eye_like"], [29, 0, 1, "", "hamming_window"], [29, 0, 1, "", "hann_window"], [29, 0, 1, "", "kaiser_bessel_derived_window"], [29, 0, 1, "", "kaiser_window"], [29, 0, 1, "", "static_eye_like"], [29, 0, 1, "", "static_hamming_window"], [29, 0, 1, "", "static_hann_window"], [29, 0, 1, "", "static_kaiser_bessel_derived_window"], [29, 0, 1, "", "static_kaiser_window"], [29, 0, 1, "", "static_tril_indices"], [29, 0, 1, "", "static_triu_indices"], [29, 0, 1, "", "static_vorbis_window"], [29, 0, 1, "", "tril_indices"], [29, 0, 1, "", "triu_indices"], [29, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[29, 3, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[29, 3, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[29, 3, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "allclose"], [29, 0, 1, "", "angle"], [29, 0, 1, "", "binarizer"], [29, 0, 1, "", "conj"], [29, 0, 1, "", "copysign"], [29, 0, 1, "", "count_nonzero"], [29, 0, 1, "", "diff"], [29, 0, 1, "", "exp2"], [29, 0, 1, "", "fix"], [29, 0, 1, "", "float_power"], [29, 0, 1, "", "fmax"], [29, 0, 1, "", "fmin"], [29, 0, 1, "", "fmod"], [29, 0, 1, "", "frexp"], [29, 0, 1, "", "gcd"], [29, 0, 1, "", "gradient"], [29, 0, 1, "", "hypot"], [29, 0, 1, "", "imag"], [29, 0, 1, "", "isclose"], [29, 0, 1, "", "lcm"], [29, 0, 1, "", "ldexp"], [29, 0, 1, "", "logaddexp2"], [29, 0, 1, "", "nan_to_num"], [29, 0, 1, "", "nansum"], [29, 0, 1, "", "nextafter"], [29, 0, 1, "", "real"], [29, 0, 1, "", "signbit"], [29, 0, 1, "", "sinc"], [29, 0, 1, "", "static_allclose"], [29, 0, 1, "", "static_angle"], [29, 0, 1, "", "static_binarizer"], [29, 0, 1, "", "static_conj"], [29, 0, 1, "", "static_copysign"], [29, 0, 1, "", "static_count_nonzero"], [29, 0, 1, "", "static_diff"], [29, 0, 1, "", "static_exp2"], [29, 0, 1, "", "static_fix"], [29, 0, 1, "", "static_float_power"], [29, 0, 1, "", "static_fmax"], [29, 0, 1, "", "static_fmin"], [29, 0, 1, "", "static_fmod"], [29, 0, 1, "", "static_frexp"], [29, 0, 1, "", "static_gcd"], [29, 0, 1, "", "static_gradient"], [29, 0, 1, "", "static_hypot"], [29, 0, 1, "", "static_imag"], [29, 0, 1, "", "static_isclose"], [29, 0, 1, "", "static_lcm"], [29, 0, 1, "", "static_ldexp"], [29, 0, 1, "", "static_logaddexp2"], [29, 0, 1, "", "static_nan_to_num"], [29, 0, 1, "", "static_nansum"], [29, 0, 1, "", "static_nextafter"], [29, 0, 1, "", "static_real"], [29, 0, 1, "", "static_signbit"], [29, 0, 1, "", "static_sinc"], [29, 0, 1, "", "static_xlogy"], [29, 0, 1, "", "static_zeta"], [29, 0, 1, "", "xlogy"], [29, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[29, 3, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "isin"], [29, 0, 1, "", "static_isin"]], "ivy.data_classes.container.experimental.gradients": [[29, 3, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[29, 3, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[29, 3, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "adaptive_avg_pool1d"], [29, 0, 1, "", "adaptive_avg_pool2d"], [29, 0, 1, "", "avg_pool1d"], [29, 0, 1, "", "avg_pool2d"], [29, 0, 1, "", "avg_pool3d"], [29, 0, 1, "", "dct"], [29, 0, 1, "", "dft"], [29, 0, 1, "", "embedding"], [29, 0, 1, "", "fft"], [29, 0, 1, "", "ifft"], [29, 0, 1, "", "interpolate"], [29, 0, 1, "", "max_pool1d"], [29, 0, 1, "", "max_pool2d"], [29, 0, 1, "", "max_pool3d"], [29, 0, 1, "", "static_adaptive_avg_pool1d"], [29, 0, 1, "", "static_adaptive_avg_pool2d"], [29, 0, 1, "", "static_avg_pool1d"], [29, 0, 1, "", "static_avg_pool2d"], [29, 0, 1, "", "static_avg_pool3d"], [29, 0, 1, "", "static_dct"], [29, 0, 1, "", "static_dft"], [29, 0, 1, "", "static_embedding"], [29, 0, 1, "", "static_fft"], [29, 0, 1, "", "static_ifft"], [29, 0, 1, "", "static_interpolate"], [29, 0, 1, "", "static_max_pool1d"], [29, 0, 1, "", "static_max_pool2d"], [29, 0, 1, "", "static_max_pool3d"]], "ivy.data_classes.container.experimental.linear_algebra": [[29, 3, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "adjoint"], [29, 0, 1, "", "cond"], [29, 0, 1, "", "diagflat"], [29, 0, 1, "", "eig"], [29, 0, 1, "", "eigh_tridiagonal"], [29, 0, 1, "", "eigvals"], [29, 0, 1, "", "kron"], [29, 0, 1, "", "matrix_exp"], [29, 0, 1, "", "multi_dot"], [29, 0, 1, "", "static_adjoint"], [29, 0, 1, "", "static_cond"], [29, 0, 1, "", "static_diagflat"], [29, 0, 1, "", "static_eig"], [29, 0, 1, "", "static_eigh_tridiagonal"], [29, 0, 1, "", "static_eigvals"], [29, 0, 1, "", "static_kron"], [29, 0, 1, "", "static_matrix_exp"], [29, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.losses": [[29, 3, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "binary_cross_entropy_with_logits"], [29, 0, 1, "", "static_binary_cross_entropy_with_logits"]], "ivy.data_classes.container.experimental.manipulation": [[29, 3, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "atleast_1d"], [29, 0, 1, "", "atleast_2d"], [29, 0, 1, "", "atleast_3d"], [29, 0, 1, "", "broadcast_shapes"], [29, 0, 1, "", "dsplit"], [29, 0, 1, "", "dstack"], [29, 0, 1, "", "expand"], [29, 0, 1, "", "flatten"], [29, 0, 1, "", "fliplr"], [29, 0, 1, "", "flipud"], [29, 0, 1, "", "heaviside"], [29, 0, 1, "", "hsplit"], [29, 0, 1, "", "hstack"], [29, 0, 1, "", "i0"], [29, 0, 1, "", "moveaxis"], [29, 0, 1, "", "pad"], [29, 0, 1, "", "rot90"], [29, 0, 1, "", "static_atleast_1d"], [29, 0, 1, "", "static_atleast_2d"], [29, 0, 1, "", "static_atleast_3d"], [29, 0, 1, "", "static_broadcast_shapes"], [29, 0, 1, "", "static_dsplit"], [29, 0, 1, "", "static_dstack"], [29, 0, 1, "", "static_expand"], [29, 0, 1, "", "static_flatten"], [29, 0, 1, "", "static_fliplr"], [29, 0, 1, "", "static_flipud"], [29, 0, 1, "", "static_heaviside"], [29, 0, 1, "", "static_hsplit"], [29, 0, 1, "", "static_hstack"], [29, 0, 1, "", "static_i0"], [29, 0, 1, "", "static_moveaxis"], [29, 0, 1, "", "static_pad"], [29, 0, 1, "", "static_rot90"], [29, 0, 1, "", "static_take_along_axis"], [29, 0, 1, "", "static_top_k"], [29, 0, 1, "", "static_vsplit"], [29, 0, 1, "", "static_vstack"], [29, 0, 1, "", "take_along_axis"], [29, 0, 1, "", "top_k"], [29, 0, 1, "", "vsplit"], [29, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[29, 3, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "instance_norm"], [29, 0, 1, "", "l2_normalize"], [29, 0, 1, "", "lp_normalize"], [29, 0, 1, "", "static_instance_norm"], [29, 0, 1, "", "static_l2_normalize"], [29, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[29, 3, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "bernoulli"], [29, 0, 1, "", "beta"], [29, 0, 1, "", "dirichlet"], [29, 0, 1, "", "poisson"], [29, 0, 1, "", "static_bernoulli"], [29, 0, 1, "", "static_beta"], [29, 0, 1, "", "static_dirichlet"], [29, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[29, 3, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "static_unravel_index"], [29, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[29, 3, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[29, 3, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "lexsort"], [29, 0, 1, "", "msort"], [29, 0, 1, "", "static_lexsort"], [29, 0, 1, "", "static_msort"]], "ivy.data_classes.container.experimental.statistical": [[29, 3, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "bincount"], [29, 0, 1, "", "corrcoef"], [29, 0, 1, "", "median"], [29, 0, 1, "", "nanmean"], [29, 0, 1, "", "nanmedian"], [29, 0, 1, "", "quantile"], [29, 0, 1, "", "static_bincount"], [29, 0, 1, "", "static_corrcoef"], [29, 0, 1, "", "static_median"], [29, 0, 1, "", "static_nanmean"], [29, 0, 1, "", "static_nanmedian"], [29, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[29, 3, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[30, 3, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_all_equal"], [30, 0, 1, "", "_static_array_equal"], [30, 0, 1, "", "_static_assert_supports_inplace"], [30, 0, 1, "", "_static_clip_matrix_norm"], [30, 0, 1, "", "_static_clip_vector_norm"], [30, 0, 1, "", "_static_einops_rearrange"], [30, 0, 1, "", "_static_einops_reduce"], [30, 0, 1, "", "_static_einops_repeat"], [30, 0, 1, "", "_static_fourier_encode"], [30, 0, 1, "", "_static_gather"], [30, 0, 1, "", "_static_gather_nd"], [30, 0, 1, "", "_static_get_num_dims"], [30, 0, 1, "", "_static_has_nans"], [30, 0, 1, "", "_static_inplace_decrement"], [30, 0, 1, "", "_static_inplace_increment"], [30, 0, 1, "", "_static_inplace_update"], [30, 0, 1, "", "_static_is_array"], [30, 0, 1, "", "_static_is_ivy_array"], [30, 0, 1, "", "_static_is_native_array"], [30, 0, 1, "", "_static_scatter_flat"], [30, 0, 1, "", "_static_scatter_nd"], [30, 0, 1, "", "_static_stable_divide"], [30, 0, 1, "", "_static_stable_pow"], [30, 0, 1, "", "_static_supports_inplace_updates"], [30, 0, 1, "", "_static_to_list"], [30, 0, 1, "", "_static_to_numpy"], [30, 0, 1, "", "_static_to_scalar"], [30, 0, 1, "", "_static_value_is_nan"], [30, 0, 1, "", "all_equal"], [30, 0, 1, "", "array_equal"], [30, 0, 1, "", "assert_supports_inplace"], [30, 0, 1, "", "clip_matrix_norm"], [30, 0, 1, "", "clip_vector_norm"], [30, 0, 1, "", "einops_rearrange"], [30, 0, 1, "", "einops_reduce"], [30, 0, 1, "", "einops_repeat"], [30, 0, 1, "", "fourier_encode"], [30, 0, 1, "", "gather"], [30, 0, 1, "", "gather_nd"], [30, 0, 1, "", "get_num_dims"], [30, 0, 1, "", "has_nans"], [30, 0, 1, "", "inplace_decrement"], [30, 0, 1, "", "inplace_increment"], [30, 0, 1, "", "inplace_update"], [30, 0, 1, "", "is_array"], [30, 0, 1, "", "is_ivy_array"], [30, 0, 1, "", "is_native_array"], [30, 0, 1, "", "scatter_flat"], [30, 0, 1, "", "scatter_nd"], [30, 0, 1, "", "stable_divide"], [30, 0, 1, "", "stable_pow"], [30, 0, 1, "", "supports_inplace_updates"], [30, 0, 1, "", "to_list"], [30, 0, 1, "", "to_numpy"], [30, 0, 1, "", "to_scalar"], [30, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[31, 3, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_stop_gradient"], [31, 0, 1, "", "adam_step"], [31, 0, 1, "", "adam_update"], [31, 0, 1, "", "gradient_descent_update"], [31, 0, 1, "", "lamb_update"], [31, 0, 1, "", "lars_update"], [31, 0, 1, "", "optimizer_update"], [31, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[32, 3, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[33, 3, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_conv1d"], [33, 0, 1, "", "_static_conv1d_transpose"], [33, 0, 1, "", "_static_conv2d"], [33, 0, 1, "", "_static_conv2d_transpose"], [33, 0, 1, "", "_static_conv3d"], [33, 0, 1, "", "_static_conv3d_transpose"], [33, 0, 1, "", "_static_depthwise_conv2d"], [33, 0, 1, "", "_static_dropout"], [33, 0, 1, "", "_static_dropout1d"], [33, 0, 1, "", "_static_dropout3d"], [33, 0, 1, "", "_static_linear"], [33, 0, 1, "", "_static_lstm_update"], [33, 0, 1, "", "_static_multi_head_attention"], [33, 0, 1, "", "_static_scaled_dot_product_attention"], [33, 0, 1, "", "conv1d"], [33, 0, 1, "", "conv1d_transpose"], [33, 0, 1, "", "conv2d"], [33, 0, 1, "", "conv2d_transpose"], [33, 0, 1, "", "conv3d"], [33, 0, 1, "", "conv3d_transpose"], [33, 0, 1, "", "depthwise_conv2d"], [33, 0, 1, "", "dropout"], [33, 0, 1, "", "dropout1d"], [33, 0, 1, "", "dropout3d"], [33, 0, 1, "", "linear"], [33, 0, 1, "", "lstm_update"], [33, 0, 1, "", "multi_head_attention"], [33, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[34, 3, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_cholesky"], [34, 0, 1, "", "_static_cross"], [34, 0, 1, "", "_static_det"], [34, 0, 1, "", "_static_diag"], [34, 0, 1, "", "_static_diagonal"], [34, 0, 1, "", "_static_eigh"], [34, 0, 1, "", "_static_eigvalsh"], [34, 0, 1, "", "_static_inner"], [34, 0, 1, "", "_static_inv"], [34, 0, 1, "", "_static_matmul"], [34, 0, 1, "", "_static_matrix_norm"], [34, 0, 1, "", "_static_matrix_power"], [34, 0, 1, "", "_static_matrix_rank"], [34, 0, 1, "", "_static_matrix_transpose"], [34, 0, 1, "", "_static_outer"], [34, 0, 1, "", "_static_pinv"], [34, 0, 1, "", "_static_qr"], [34, 0, 1, "", "_static_slogdet"], [34, 0, 1, "", "_static_solve"], [34, 0, 1, "", "_static_svd"], [34, 0, 1, "", "_static_svdvals"], [34, 0, 1, "", "_static_tensordot"], [34, 0, 1, "", "_static_tensorsolve"], [34, 0, 1, "", "_static_trace"], [34, 0, 1, "", "_static_vander"], [34, 0, 1, "", "_static_vecdot"], [34, 0, 1, "", "_static_vector_norm"], [34, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [34, 0, 1, "", "cholesky"], [34, 0, 1, "", "cross"], [34, 0, 1, "", "det"], [34, 0, 1, "", "diag"], [34, 0, 1, "", "diagonal"], [34, 0, 1, "", "eigh"], [34, 0, 1, "", "eigvalsh"], [34, 0, 1, "", "inner"], [34, 0, 1, "", "inv"], [34, 0, 1, "", "matmul"], [34, 0, 1, "", "matrix_norm"], [34, 0, 1, "", "matrix_power"], [34, 0, 1, "", "matrix_rank"], [34, 0, 1, "", "matrix_transpose"], [34, 0, 1, "", "outer"], [34, 0, 1, "", "pinv"], [34, 0, 1, "", "qr"], [34, 0, 1, "", "slogdet"], [34, 0, 1, "", "solve"], [34, 0, 1, "", "svd"], [34, 0, 1, "", "svdvals"], [34, 0, 1, "", "tensordot"], [34, 0, 1, "", "tensorsolve"], [34, 0, 1, "", "trace"], [34, 0, 1, "", "vander"], [34, 0, 1, "", "vecdot"], [34, 0, 1, "", "vector_norm"], [34, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[35, 3, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_binary_cross_entropy"], [35, 0, 1, "", "_static_cross_entropy"], [35, 0, 1, "", "_static_sparse_cross_entropy"], [35, 0, 1, "", "binary_cross_entropy"], [35, 0, 1, "", "cross_entropy"], [35, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[36, 3, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_clip"], [36, 0, 1, "", "_static_concat"], [36, 0, 1, "", "_static_constant_pad"], [36, 0, 1, "", "_static_expand_dims"], [36, 0, 1, "", "_static_flip"], [36, 0, 1, "", "_static_permute_dims"], [36, 0, 1, "", "_static_repeat"], [36, 0, 1, "", "_static_reshape"], [36, 0, 1, "", "_static_roll"], [36, 0, 1, "", "_static_split"], [36, 0, 1, "", "_static_squeeze"], [36, 0, 1, "", "_static_stack"], [36, 0, 1, "", "_static_swapaxes"], [36, 0, 1, "", "_static_tile"], [36, 0, 1, "", "_static_unstack"], [36, 0, 1, "", "_static_zero_pad"], [36, 0, 1, "", "clip"], [36, 0, 1, "", "concat"], [36, 0, 1, "", "constant_pad"], [36, 0, 1, "", "expand_dims"], [36, 0, 1, "", "flip"], [36, 0, 1, "", "permute_dims"], [36, 0, 1, "", "repeat"], [36, 0, 1, "", "reshape"], [36, 0, 1, "", "roll"], [36, 0, 1, "", "split"], [36, 0, 1, "", "squeeze"], [36, 0, 1, "", "stack"], [36, 0, 1, "", "swapaxes"], [36, 0, 1, "", "tile"], [36, 0, 1, "", "unstack"], [36, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[37, 3, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[38, 3, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_multinomial"], [38, 0, 1, "", "_static_randint"], [38, 0, 1, "", "_static_random_normal"], [38, 0, 1, "", "_static_random_uniform"], [38, 0, 1, "", "_static_shuffle"], [38, 0, 1, "", "multinomial"], [38, 0, 1, "", "randint"], [38, 0, 1, "", "random_normal"], [38, 0, 1, "", "random_uniform"], [38, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[39, 3, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_argmax"], [39, 0, 1, "", "_static_argmin"], [39, 0, 1, "", "_static_argwhere"], [39, 0, 1, "", "_static_nonzero"], [39, 0, 1, "", "_static_where"], [39, 0, 1, "", "argmax"], [39, 0, 1, "", "argmin"], [39, 0, 1, "", "argwhere"], [39, 0, 1, "", "nonzero"], [39, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[40, 3, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_unique_all"], [40, 0, 1, "", "_static_unique_counts"], [40, 0, 1, "", "_static_unique_inverse"], [40, 0, 1, "", "_static_unique_values"], [40, 0, 1, "", "unique_all"], [40, 0, 1, "", "unique_counts"], [40, 0, 1, "", "unique_inverse"], [40, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[41, 3, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_argsort"], [41, 0, 1, "", "_static_searchsorted"], [41, 0, 1, "", "_static_sort"], [41, 0, 1, "", "argsort"], [41, 0, 1, "", "searchsorted"], [41, 0, 1, "", "sort"]], "ivy.data_classes.container.statistical": [[42, 3, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_cumprod"], [42, 0, 1, "", "_static_cumsum"], [42, 0, 1, "", "_static_prod"], [42, 0, 1, "", "_static_sum"], [42, 0, 1, "", "_static_var"], [42, 0, 1, "", "cumprod"], [42, 0, 1, "", "cumsum"], [42, 0, 1, "", "einsum"], [42, 0, 1, "", "max"], [42, 0, 1, "", "mean"], [42, 0, 1, "", "min"], [42, 0, 1, "", "prod"], [42, 0, 1, "", "std"], [42, 0, 1, "", "sum"], [42, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[43, 3, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_all"], [43, 0, 1, "", "_static_any"], [43, 0, 1, "", "all"], [43, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[44, 1, 1, "", "_wrap_function"], [44, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.functional.ivy": [[357, 2, 0, "-", "activations"], [358, 2, 0, "-", "constants"], [359, 2, 0, "-", "control_flow_ops"], [360, 2, 0, "-", "creation"], [361, 2, 0, "-", "data_type"], [362, 2, 0, "-", "device"], [363, 2, 0, "-", "elementwise"], [364, 2, 0, "-", "experimental"], [365, 2, 0, "-", "general"], [366, 2, 0, "-", "gradients"], [367, 2, 0, "-", "layers"], [368, 2, 0, "-", "linear_algebra"], [369, 2, 0, "-", "losses"], [370, 2, 0, "-", "manipulation"], [371, 2, 0, "-", "meta"], [372, 2, 0, "-", "nest"], [373, 2, 0, "-", "norms"], [374, 2, 0, "-", "random"], [375, 2, 0, "-", "searching"], [376, 2, 0, "-", "set"], [377, 2, 0, "-", "sorting"], [378, 2, 0, "-", "statistical"], [379, 2, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[357, 1, 1, "", "deserialize"], [357, 1, 1, "", "gelu"], [357, 1, 1, "", "get"], [357, 1, 1, "", "leaky_relu"], [357, 1, 1, "", "log_softmax"], [357, 1, 1, "", "mish"], [357, 1, 1, "", "relu"], [357, 1, 1, "", "sigmoid"], [357, 1, 1, "", "softmax"], [357, 1, 1, "", "softplus"]], "ivy.functional.ivy.constants": [[358, 6, 1, "", "e"], [358, 6, 1, "", "inf"], [358, 6, 1, "", "nan"], [358, 6, 1, "", "newaxis"], [358, 6, 1, "", "pi"]], "ivy.functional.ivy.control_flow_ops": [[359, 1, 1, "", "IfElse"], [359, 1, 1, "", "WhileLoop"], [359, 1, 1, "", "if_else"], [359, 1, 1, "", "while_loop"]], "ivy.functional.ivy.creation": [[360, 3, 1, "", "NestedSequence"], [360, 1, 1, "", "arange"], [360, 1, 1, "", "array"], [360, 1, 1, "", "asarray"], [360, 1, 1, "", "asarray_handle_nestable"], [360, 1, 1, "", "asarray_infer_device"], [360, 1, 1, "", "asarray_to_native_arrays_and_back"], [360, 1, 1, "", "copy_array"], [360, 1, 1, "", "empty"], [360, 1, 1, "", "empty_like"], [360, 1, 1, "", "eye"], [360, 1, 1, "", "from_dlpack"], [360, 1, 1, "", "full"], [360, 1, 1, "", "full_like"], [360, 1, 1, "", "linspace"], [360, 1, 1, "", "logspace"], [360, 1, 1, "", "meshgrid"], [360, 1, 1, "", "native_array"], [360, 1, 1, "", "one_hot"], [360, 1, 1, "", "ones"], [360, 1, 1, "", "ones_like"], [360, 1, 1, "", "tril"], [360, 1, 1, "", "triu"], [360, 1, 1, "", "zeros"], [360, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.creation.NestedSequence": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type": [[361, 3, 1, "", "DefaultComplexDtype"], [361, 3, 1, "", "DefaultDtype"], [361, 3, 1, "", "DefaultFloatDtype"], [361, 3, 1, "", "DefaultIntDtype"], [361, 3, 1, "", "DefaultUintDtype"], [361, 1, 1, "", "as_ivy_dtype"], [361, 1, 1, "", "as_native_dtype"], [361, 1, 1, "", "astype"], [361, 1, 1, "", "broadcast_arrays"], [361, 1, 1, "", "broadcast_to"], [361, 1, 1, "", "can_cast"], [361, 1, 1, "", "check_float"], [361, 1, 1, "", "closest_valid_dtype"], [361, 1, 1, "", "default_complex_dtype"], [361, 1, 1, "", "default_dtype"], [361, 1, 1, "", "default_float_dtype"], [361, 1, 1, "", "default_int_dtype"], [361, 1, 1, "", "default_uint_dtype"], [361, 1, 1, "", "dtype"], [361, 1, 1, "", "dtype_bits"], [361, 1, 1, "", "finfo"], [361, 1, 1, "", "function_supported_dtypes"], [361, 1, 1, "", "function_unsupported_dtypes"], [361, 1, 1, "", "iinfo"], [361, 1, 1, "", "infer_default_dtype"], [361, 1, 1, "", "invalid_dtype"], [361, 1, 1, "", "is_bool_dtype"], [361, 1, 1, "", "is_complex_dtype"], [361, 1, 1, "", "is_float_dtype"], [361, 1, 1, "", "is_int_dtype"], [361, 1, 1, "", "is_native_dtype"], [361, 1, 1, "", "is_uint_dtype"], [361, 1, 1, "", "promote_types"], [361, 1, 1, "", "promote_types_of_inputs"], [361, 1, 1, "", "result_type"], [361, 1, 1, "", "set_default_complex_dtype"], [361, 1, 1, "", "set_default_dtype"], [361, 1, 1, "", "set_default_float_dtype"], [361, 1, 1, "", "set_default_int_dtype"], [361, 1, 1, "", "set_default_uint_dtype"], [361, 1, 1, "", "type_promote_arrays"], [361, 1, 1, "", "unset_default_complex_dtype"], [361, 1, 1, "", "unset_default_dtype"], [361, 1, 1, "", "unset_default_float_dtype"], [361, 1, 1, "", "unset_default_int_dtype"], [361, 1, 1, "", "unset_default_uint_dtype"], [361, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultComplexDtype": [[361, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultDtype": [[361, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[361, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[361, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultUintDtype": [[361, 0, 1, "", "__init__"]], "ivy.functional.ivy.device": [[362, 3, 1, "", "DefaultDevice"], [362, 3, 1, "", "Profiler"], [362, 1, 1, "", "as_ivy_dev"], [362, 1, 1, "", "as_native_dev"], [362, 1, 1, "", "clear_cached_mem_on_dev"], [362, 1, 1, "", "default_device"], [362, 1, 1, "", "dev"], [362, 1, 1, "", "dev_util"], [362, 1, 1, "", "function_supported_devices"], [362, 1, 1, "", "function_unsupported_devices"], [362, 1, 1, "", "get_all_ivy_arrays_on_dev"], [362, 1, 1, "", "gpu_is_available"], [362, 1, 1, "", "num_cpu_cores"], [362, 1, 1, "", "num_gpus"], [362, 1, 1, "", "num_ivy_arrays_on_dev"], [362, 1, 1, "", "percent_used_mem_on_dev"], [362, 1, 1, "", "print_all_ivy_arrays_on_dev"], [362, 1, 1, "", "set_default_device"], [362, 1, 1, "", "set_split_factor"], [362, 1, 1, "", "split_factor"], [362, 1, 1, "", "split_func_call"], [362, 1, 1, "", "to_device"], [362, 1, 1, "", "total_mem_on_dev"], [362, 1, 1, "", "tpu_is_available"], [362, 1, 1, "", "unset_default_device"], [362, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[362, 0, 1, "", "__enter__"], [362, 0, 1, "", "__exit__"], [362, 0, 1, "", "__init__"]], "ivy.functional.ivy.device.Profiler": [[362, 0, 1, "", "__init__"], [362, 0, 1, "", "start"], [362, 0, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[363, 1, 1, "", "abs"], [363, 1, 1, "", "acos"], [363, 1, 1, "", "acosh"], [363, 1, 1, "", "add"], [363, 1, 1, "", "asin"], [363, 1, 1, "", "asinh"], [363, 1, 1, "", "atan"], [363, 1, 1, "", "atan2"], [363, 1, 1, "", "atanh"], [363, 1, 1, "", "bitwise_and"], [363, 1, 1, "", "bitwise_invert"], [363, 1, 1, "", "bitwise_left_shift"], [363, 1, 1, "", "bitwise_or"], [363, 1, 1, "", "bitwise_right_shift"], [363, 1, 1, "", "bitwise_xor"], [363, 1, 1, "", "ceil"], [363, 1, 1, "", "cos"], [363, 1, 1, "", "cosh"], [363, 1, 1, "", "deg2rad"], [363, 1, 1, "", "divide"], [363, 1, 1, "", "equal"], [363, 1, 1, "", "erf"], [363, 1, 1, "", "exp"], [363, 1, 1, "", "expm1"], [363, 1, 1, "", "floor"], [363, 1, 1, "", "floor_divide"], [363, 1, 1, "", "fmod"], [363, 1, 1, "", "greater"], [363, 1, 1, "", "greater_equal"], [363, 1, 1, "", "isfinite"], [363, 1, 1, "", "isinf"], [363, 1, 1, "", "isnan"], [363, 1, 1, "", "isreal"], [363, 1, 1, "", "less"], [363, 1, 1, "", "less_equal"], [363, 1, 1, "", "log"], [363, 1, 1, "", "log10"], [363, 1, 1, "", "log1p"], [363, 1, 1, "", "log2"], [363, 1, 1, "", "logaddexp"], [363, 1, 1, "", "logical_and"], [363, 1, 1, "", "logical_not"], [363, 1, 1, "", "logical_or"], [363, 1, 1, "", "logical_xor"], [363, 1, 1, "", "maximum"], [363, 1, 1, "", "minimum"], [363, 1, 1, "", "multiply"], [363, 1, 1, "", "negative"], [363, 1, 1, "", "not_equal"], [363, 1, 1, "", "positive"], [363, 1, 1, "", "pow"], [363, 1, 1, "", "rad2deg"], [363, 1, 1, "", "reciprocal"], [363, 1, 1, "", "remainder"], [363, 1, 1, "", "round"], [363, 1, 1, "", "sign"], [363, 1, 1, "", "sin"], [363, 1, 1, "", "sinh"], [363, 1, 1, "", "sqrt"], [363, 1, 1, "", "square"], [363, 1, 1, "", "subtract"], [363, 1, 1, "", "tan"], [363, 1, 1, "", "tanh"], [363, 1, 1, "", "trunc"], [363, 1, 1, "", "trunc_divide"]], "ivy.functional.ivy.experimental": [[364, 3, 1, "", "NativeSparseArray"], [364, 3, 1, "", "SparseArray"], [364, 1, 1, "", "adaptive_avg_pool1d"], [364, 1, 1, "", "adaptive_avg_pool2d"], [364, 1, 1, "", "adjoint"], [364, 1, 1, "", "allclose"], [364, 1, 1, "", "angle"], [364, 1, 1, "", "atleast_1d"], [364, 1, 1, "", "atleast_2d"], [364, 1, 1, "", "atleast_3d"], [364, 1, 1, "", "avg_pool1d"], [364, 1, 1, "", "avg_pool2d"], [364, 1, 1, "", "avg_pool3d"], [364, 1, 1, "", "batch_norm"], [364, 1, 1, "", "bernoulli"], [364, 1, 1, "", "beta"], [364, 1, 1, "", "binarizer"], [364, 1, 1, "", "binary_cross_entropy_with_logits"], [364, 1, 1, "", "bincount"], [364, 1, 1, "", "bind_custom_gradient_function"], [364, 1, 1, "", "broadcast_shapes"], [364, 1, 1, "", "cond"], [364, 1, 1, "", "conj"], [364, 1, 1, "", "copysign"], [364, 1, 1, "", "corrcoef"], [364, 1, 1, "", "count_nonzero"], [364, 1, 1, "", "current_backend"], [364, 1, 1, "", "dct"], [364, 1, 1, "", "dft"], [364, 1, 1, "", "diagflat"], [364, 1, 1, "", "diff"], [364, 1, 1, "", "dirichlet"], [364, 1, 1, "", "dropout1d"], [364, 1, 1, "", "dropout3d"], [364, 1, 1, "", "dsplit"], [364, 1, 1, "", "dstack"], [364, 1, 1, "", "eig"], [364, 1, 1, "", "eigh_tridiagonal"], [364, 1, 1, "", "eigvals"], [364, 1, 1, "", "embedding"], [364, 1, 1, "", "exp2"], [364, 1, 1, "", "expand"], [364, 1, 1, "", "eye_like"], [364, 1, 1, "", "fft"], [364, 1, 1, "", "fix"], [364, 1, 1, "", "flatten"], [364, 1, 1, "", "fliplr"], [364, 1, 1, "", "flipud"], [364, 1, 1, "", "float_power"], [364, 1, 1, "", "fmax"], [364, 1, 1, "", "fmin"], [364, 1, 1, "", "frexp"], [364, 1, 1, "", "gamma"], [364, 1, 1, "", "gcd"], [364, 1, 1, "", "gradient"], [364, 1, 1, "", "hamming_window"], [364, 1, 1, "", "handle_array_function"], [364, 1, 1, "", "handle_array_like_without_promotion"], [364, 1, 1, "", "handle_exceptions"], [364, 1, 1, "", "handle_nestable"], [364, 1, 1, "", "handle_out_argument"], [364, 1, 1, "", "handle_view"], [364, 1, 1, "", "hann_window"], [364, 1, 1, "", "heaviside"], [364, 1, 1, "", "hsplit"], [364, 1, 1, "", "hstack"], [364, 1, 1, "", "hypot"], [364, 1, 1, "", "i0"], [364, 1, 1, "", "ifft"], [364, 1, 1, "", "imag"], [364, 1, 1, "", "infer_device"], [364, 1, 1, "", "infer_dtype"], [364, 1, 1, "", "inputs_to_native_arrays"], [364, 1, 1, "", "instance_norm"], [364, 1, 1, "", "integer_arrays_to_float"], [364, 1, 1, "", "interp"], [364, 1, 1, "", "interpolate"], [364, 1, 1, "", "is_ivy_sparse_array"], [364, 1, 1, "", "is_native_sparse_array"], [364, 1, 1, "", "isclose"], [364, 1, 1, "", "kaiser_bessel_derived_window"], [364, 1, 1, "", "kaiser_window"], [364, 1, 1, "", "kron"], [364, 1, 1, "", "l2_normalize"], [364, 1, 1, "", "lcm"], [364, 1, 1, "", "ldexp"], [364, 1, 1, "", "lexsort"], [364, 1, 1, "", "logaddexp2"], [364, 1, 1, "", "logit"], [364, 1, 1, "", "logsigmoid"], [364, 1, 1, "", "lp_normalize"], [364, 1, 1, "", "matrix_exp"], [364, 1, 1, "", "max_pool1d"], [364, 1, 1, "", "max_pool2d"], [364, 1, 1, "", "max_pool3d"], [364, 1, 1, "", "median"], [364, 1, 1, "", "moveaxis"], [364, 1, 1, "", "msort"], [364, 1, 1, "", "multi_dot"], [364, 1, 1, "", "nan_to_num"], [364, 1, 1, "", "nanmean"], [364, 1, 1, "", "nanmedian"], [364, 1, 1, "", "nansum"], [364, 1, 1, "", "native_sparse_array"], [364, 1, 1, "", "native_sparse_array_to_indices_values_and_shape"], [364, 1, 1, "", "ndenumerate"], [364, 1, 1, "", "ndindex"], [364, 1, 1, "", "nextafter"], [364, 1, 1, "", "outputs_to_ivy_arrays"], [364, 1, 1, "", "pad"], [364, 1, 1, "", "poisson"], [364, 1, 1, "", "prelu"], [364, 1, 1, "", "quantile"], [364, 1, 1, "", "real"], [364, 1, 1, "", "relu6"], [364, 1, 1, "", "rot90"], [364, 1, 1, "", "selu"], [364, 1, 1, "", "signbit"], [364, 1, 1, "", "sinc"], [364, 1, 1, "", "take_along_axis"], [364, 1, 1, "", "thresholded_relu"], [364, 1, 1, "", "to_native_arrays_and_back"], [364, 1, 1, "", "top_k"], [364, 1, 1, "", "trapz"], [364, 1, 1, "", "tril_indices"], [364, 1, 1, "", "triu_indices"], [364, 1, 1, "", "unravel_index"], [364, 1, 1, "", "vorbis_window"], [364, 1, 1, "", "vsplit"], [364, 1, 1, "", "vstack"], [364, 1, 1, "", "xlogy"], [364, 1, 1, "", "zeta"]], "ivy.functional.ivy.experimental.SparseArray": [[364, 0, 1, "", "__init__"], [364, 5, 1, "", "ccol_indices"], [364, 5, 1, "", "col_indices"], [364, 5, 1, "", "coo_indices"], [364, 5, 1, "", "crow_indices"], [364, 5, 1, "", "data"], [364, 5, 1, "", "dense_shape"], [364, 5, 1, "", "row_indices"], [364, 0, 1, "", "to_dense_array"], [364, 5, 1, "", "values"]], "ivy.functional.ivy.general": [[365, 3, 1, "", "ArrayMode"], [365, 1, 1, "", "all_equal"], [365, 1, 1, "", "arg_info"], [365, 1, 1, "", "arg_names"], [365, 1, 1, "", "array_equal"], [365, 1, 1, "", "assert_supports_inplace"], [365, 1, 1, "", "cache_fn"], [365, 1, 1, "", "clip_matrix_norm"], [365, 1, 1, "", "clip_vector_norm"], [365, 1, 1, "", "container_types"], [365, 1, 1, "", "current_backend_str"], [365, 1, 1, "", "default"], [365, 1, 1, "", "einops_rearrange"], [365, 1, 1, "", "einops_reduce"], [365, 1, 1, "", "einops_repeat"], [365, 1, 1, "", "exists"], [365, 1, 1, "", "fourier_encode"], [365, 1, 1, "", "function_supported_devices_and_dtypes"], [365, 1, 1, "", "function_unsupported_devices_and_dtypes"], [365, 1, 1, "", "gather"], [365, 1, 1, "", "gather_nd"], [365, 1, 1, "", "get_all_arrays_in_memory"], [365, 1, 1, "", "get_array_mode"], [365, 1, 1, "", "get_exception_trace_mode"], [365, 1, 1, "", "get_item"], [365, 1, 1, "", "get_min_base"], [365, 1, 1, "", "get_min_denominator"], [365, 1, 1, "", "get_nestable_mode"], [365, 1, 1, "", "get_num_dims"], [365, 1, 1, "", "get_queue_timeout"], [365, 1, 1, "", "get_referrers_recursive"], [365, 1, 1, "", "get_show_func_wrapper_trace_mode"], [365, 1, 1, "", "get_tmp_dir"], [365, 1, 1, "", "has_nans"], [365, 1, 1, "", "inplace_arrays_supported"], [365, 1, 1, "", "inplace_decrement"], [365, 1, 1, "", "inplace_increment"], [365, 1, 1, "", "inplace_update"], [365, 1, 1, "", "inplace_variables_supported"], [365, 1, 1, "", "is_array"], [365, 1, 1, "", "is_ivy_array"], [365, 1, 1, "", "is_ivy_container"], [365, 1, 1, "", "is_native_array"], [365, 1, 1, "", "isin"], [365, 1, 1, "", "isscalar"], [365, 1, 1, "", "match_kwargs"], [365, 1, 1, "", "multiprocessing"], [365, 1, 1, "", "num_arrays_in_memory"], [365, 1, 1, "", "print_all_arrays_in_memory"], [365, 1, 1, "", "scatter_flat"], [365, 1, 1, "", "scatter_nd"], [365, 1, 1, "", "set_array_mode"], [365, 1, 1, "", "set_exception_trace_mode"], [365, 1, 1, "", "set_min_base"], [365, 1, 1, "", "set_min_denominator"], [365, 1, 1, "", "set_nestable_mode"], [365, 1, 1, "", "set_queue_timeout"], [365, 1, 1, "", "set_shape_array_mode"], [365, 1, 1, "", "set_show_func_wrapper_trace_mode"], [365, 1, 1, "", "set_tmp_dir"], [365, 1, 1, "", "shape"], [365, 1, 1, "", "shape_array_mode"], [365, 1, 1, "", "stable_divide"], [365, 1, 1, "", "stable_pow"], [365, 1, 1, "", "supports_inplace_updates"], [365, 1, 1, "", "to_ivy_shape"], [365, 1, 1, "", "to_list"], [365, 1, 1, "", "to_native_shape"], [365, 1, 1, "", "to_numpy"], [365, 1, 1, "", "to_scalar"], [365, 1, 1, "", "try_else_none"], [365, 1, 1, "", "unset_array_mode"], [365, 1, 1, "", "unset_exception_trace_mode"], [365, 1, 1, "", "unset_nestable_mode"], [365, 1, 1, "", "unset_queue_timeout"], [365, 1, 1, "", "unset_shape_array_mode"], [365, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [365, 1, 1, "", "value_is_nan"], [365, 1, 1, "", "vmap"]], "ivy.functional.ivy.general.ArrayMode": [[365, 0, 1, "", "__init__"]], "ivy.functional.ivy.gradients": [[366, 3, 1, "", "GradientTracking"], [366, 1, 1, "", "adam_step"], [366, 1, 1, "", "adam_update"], [366, 1, 1, "", "execute_with_gradients"], [366, 1, 1, "", "grad"], [366, 1, 1, "", "gradient_descent_update"], [366, 1, 1, "", "jac"], [366, 1, 1, "", "lamb_update"], [366, 1, 1, "", "lars_update"], [366, 1, 1, "", "optimizer_update"], [366, 1, 1, "", "set_with_grads"], [366, 1, 1, "", "stop_gradient"], [366, 1, 1, "", "unset_with_grads"], [366, 1, 1, "", "value_and_grad"], [366, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[366, 0, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[367, 1, 1, "", "conv"], [367, 1, 1, "", "conv1d"], [367, 1, 1, "", "conv1d_transpose"], [367, 1, 1, "", "conv2d"], [367, 1, 1, "", "conv2d_transpose"], [367, 1, 1, "", "conv3d"], [367, 1, 1, "", "conv3d_transpose"], [367, 1, 1, "", "conv_general_dilated"], [367, 1, 1, "", "conv_general_transpose"], [367, 1, 1, "", "depthwise_conv2d"], [367, 1, 1, "", "dropout"], [367, 1, 1, "", "linear"], [367, 1, 1, "", "lstm_update"], [367, 1, 1, "", "multi_head_attention"], [367, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[368, 1, 1, "", "cholesky"], [368, 1, 1, "", "cross"], [368, 1, 1, "", "det"], [368, 1, 1, "", "diag"], [368, 1, 1, "", "diagonal"], [368, 1, 1, "", "eig"], [368, 1, 1, "", "eigh"], [368, 1, 1, "", "eigvalsh"], [368, 1, 1, "", "inner"], [368, 1, 1, "", "inv"], [368, 1, 1, "", "lu_factor"], [368, 1, 1, "", "matmul"], [368, 1, 1, "", "matrix_norm"], [368, 1, 1, "", "matrix_power"], [368, 1, 1, "", "matrix_rank"], [368, 1, 1, "", "matrix_transpose"], [368, 1, 1, "", "outer"], [368, 1, 1, "", "pinv"], [368, 1, 1, "", "qr"], [368, 1, 1, "", "slogdet"], [368, 1, 1, "", "solve"], [368, 1, 1, "", "svd"], [368, 1, 1, "", "svdvals"], [368, 1, 1, "", "tensordot"], [368, 1, 1, "", "tensorsolve"], [368, 1, 1, "", "trace"], [368, 1, 1, "", "vander"], [368, 1, 1, "", "vecdot"], [368, 1, 1, "", "vector_norm"], [368, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[369, 1, 1, "", "binary_cross_entropy"], [369, 1, 1, "", "cross_entropy"], [369, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[370, 1, 1, "", "clip"], [370, 1, 1, "", "concat"], [370, 1, 1, "", "constant_pad"], [370, 1, 1, "", "expand_dims"], [370, 1, 1, "", "flip"], [370, 1, 1, "", "permute_dims"], [370, 1, 1, "", "repeat"], [370, 1, 1, "", "reshape"], [370, 1, 1, "", "roll"], [370, 1, 1, "", "split"], [370, 1, 1, "", "squeeze"], [370, 1, 1, "", "stack"], [370, 1, 1, "", "swapaxes"], [370, 1, 1, "", "tile"], [370, 1, 1, "", "unstack"], [370, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[371, 1, 1, "", "fomaml_step"], [371, 1, 1, "", "maml_step"], [371, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[372, 1, 1, "", "all_nested_indices"], [372, 1, 1, "", "copy_nest"], [372, 1, 1, "", "duplicate_array_index_chains"], [372, 1, 1, "", "index_nest"], [372, 1, 1, "", "insert_into_nest_at_index"], [372, 1, 1, "", "insert_into_nest_at_indices"], [372, 1, 1, "", "map"], [372, 1, 1, "", "map_nest_at_index"], [372, 1, 1, "", "map_nest_at_indices"], [372, 1, 1, "", "multi_index_nest"], [372, 1, 1, "", "nested_any"], [372, 1, 1, "", "nested_argwhere"], [372, 1, 1, "", "nested_map"], [372, 1, 1, "", "nested_multi_map"], [372, 1, 1, "", "prune_empty"], [372, 1, 1, "", "prune_nest_at_index"], [372, 1, 1, "", "prune_nest_at_indices"], [372, 1, 1, "", "set_nest_at_index"], [372, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[373, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[374, 1, 1, "", "multinomial"], [374, 1, 1, "", "randint"], [374, 1, 1, "", "random_normal"], [374, 1, 1, "", "random_uniform"], [374, 1, 1, "", "seed"], [374, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[375, 1, 1, "", "argmax"], [375, 1, 1, "", "argmin"], [375, 1, 1, "", "argwhere"], [375, 1, 1, "", "nonzero"], [375, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[376, 1, 1, "", "unique_all"], [376, 1, 1, "", "unique_counts"], [376, 1, 1, "", "unique_inverse"], [376, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[377, 1, 1, "", "argsort"], [377, 1, 1, "", "searchsorted"], [377, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[378, 1, 1, "", "cumprod"], [378, 1, 1, "", "cumsum"], [378, 1, 1, "", "einsum"], [378, 1, 1, "", "max"], [378, 1, 1, "", "mean"], [378, 1, 1, "", "min"], [378, 1, 1, "", "prod"], [378, 1, 1, "", "std"], [378, 1, 1, "", "sum"], [378, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[379, 1, 1, "", "all"], [379, 1, 1, "", "any"]], "ivy.nested_array": [[513, 2, 0, "-", "nested_array"]], "ivy.nested_array.nested_array": [[513, 3, 1, "", "NestedArray"]], "ivy.nested_array.nested_array.NestedArray": [[513, 0, 1, "", "__init__"], [513, 5, 1, "", "data"], [513, 5, 1, "", "device"], [513, 5, 1, "", "dtype"], [513, 0, 1, "", "from_row_lengths"], [513, 0, 1, "", "from_row_split"], [513, 5, 1, "", "ndim"], [513, 0, 1, "", "nested_array"], [513, 0, 1, "", "reshape"], [513, 5, 1, "", "shape"], [513, 0, 1, "", "unbind"]], "ivy.stateful": [[48, 2, 0, "-", "activations"], [49, 2, 0, "-", "converters"], [50, 2, 0, "-", "helpers"], [51, 2, 0, "-", "initializers"], [52, 2, 0, "-", "layers"], [53, 2, 0, "-", "module"], [54, 2, 0, "-", "norms"], [55, 2, 0, "-", "optimizers"], [56, 2, 0, "-", "sequential"]], "ivy.stateful.activations": [[48, 3, 1, "", "GEGLU"], [48, 3, 1, "", "GELU"], [48, 3, 1, "", "LeakyReLU"], [48, 3, 1, "", "LogSoftmax"], [48, 3, 1, "", "Mish"], [48, 3, 1, "", "ReLU"], [48, 3, 1, "", "Softmax"], [48, 3, 1, "", "Softplus"]], "ivy.stateful.activations.GEGLU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[48, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[49, 3, 1, "", "ModuleConverters"], [49, 1, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[49, 0, 1, "", "from_haiku_module"], [49, 0, 1, "", "from_keras_module"], [49, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[50, 3, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[50, 0, 1, "", "check_submod_rets"], [50, 0, 1, "", "get_mod_key"], [50, 0, 1, "", "mod_depth"], [50, 0, 1, "", "mod_height"], [50, 0, 1, "", "mod_with_top_mod_key_chain"], [50, 0, 1, "", "show_mod_in_top_mod"], [50, 0, 1, "", "show_structure"], [50, 0, 1, "", "show_v_in_top_v"], [50, 0, 1, "", "sub_mods"], [50, 0, 1, "", "track_submod_call_order"], [50, 0, 1, "", "track_submod_rets"], [50, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[51, 3, 1, "", "Constant"], [51, 3, 1, "", "FirstLayerSiren"], [51, 3, 1, "", "GlorotUniform"], [51, 3, 1, "", "Initializer"], [51, 3, 1, "", "KaimingNormal"], [51, 3, 1, "", "Ones"], [51, 3, 1, "", "Siren"], [51, 3, 1, "", "Uniform"], [51, 3, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[51, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[52, 3, 1, "", "Conv1D"], [52, 3, 1, "", "Conv1DTranspose"], [52, 3, 1, "", "Conv2D"], [52, 3, 1, "", "Conv2DTranspose"], [52, 3, 1, "", "Conv3D"], [52, 3, 1, "", "Conv3DTranspose"], [52, 3, 1, "", "DepthwiseConv2D"], [52, 3, 1, "", "Dropout"], [52, 3, 1, "", "LSTM"], [52, 3, 1, "", "Linear"], [52, 3, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[52, 0, 1, "", "__init__"], [52, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[52, 0, 1, "", "__init__"]], "ivy.stateful.module": [[53, 3, 1, "", "Module"]], "ivy.stateful.module.Module": [[53, 0, 1, "", "__call__"], [53, 0, 1, "", "__init__"], [53, 0, 1, "", "build"], [53, 5, 1, "", "build_mode"], [53, 5, 1, "", "built_"], [53, 0, 1, "", "compile"], [53, 0, 1, "", "save_weights"], [53, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[54, 3, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[54, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[55, 3, 1, "", "Adam"], [55, 3, 1, "", "LAMB"], [55, 3, 1, "", "LARS"], [55, 3, 1, "", "Optimizer"], [55, 3, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.sequential": [[56, 3, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[56, 0, 1, "", "__init__"]], "ivy.utils": [[524, 2, 0, "-", "assertions"], [525, 2, 0, "-", "backend"], [526, 2, 0, "-", "dynamic_import"], [527, 2, 0, "-", "exceptions"], [528, 2, 0, "-", "inspection"], [529, 2, 0, "-", "verbosity"]], "ivy.utils.assertions": [[524, 1, 1, "", "check_all"], [524, 1, 1, "", "check_all_or_any_fn"], [524, 1, 1, "", "check_any"], [524, 1, 1, "", "check_dimensions"], [524, 1, 1, "", "check_elem_in_list"], [524, 1, 1, "", "check_equal"], [524, 1, 1, "", "check_exists"], [524, 1, 1, "", "check_false"], [524, 1, 1, "", "check_fill_value_and_dtype_are_compatible"], [524, 1, 1, "", "check_gather_input_valid"], [524, 1, 1, "", "check_gather_nd_input_valid"], [524, 1, 1, "", "check_greater"], [524, 1, 1, "", "check_inplace_sizes_valid"], [524, 1, 1, "", "check_isinstance"], [524, 1, 1, "", "check_kernel_padding_size"], [524, 1, 1, "", "check_less"], [524, 1, 1, "", "check_one_way_broadcastable"], [524, 1, 1, "", "check_same_dtype"], [524, 1, 1, "", "check_shape"], [524, 1, 1, "", "check_shapes_broadcastable"], [524, 1, 1, "", "check_true"]], "ivy.utils.dynamic_import": [[526, 1, 1, "", "import_module"]], "ivy.utils.exceptions": [[527, 7, 1, "", "IvyBackendException"], [527, 7, 1, "", "IvyError"], [527, 7, 1, "", "IvyException"], [527, 7, 1, "", "IvyNotImplementedException"], [527, 1, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyBackendException": [[527, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[527, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[527, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[527, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[528, 1, 1, "", "add_array_specs"], [528, 1, 1, "", "fn_array_spec"]], "ivy.utils.verbosity": [[529, 1, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[514, 2, 0, "-", "assertions"], [515, 2, 0, "-", "available_frameworks"], [516, 2, 0, "-", "function_testing"], [517, 2, 0, "-", "globals"], [518, 2, 0, "-", "hypothesis_helpers"], [519, 2, 0, "-", "structs"], [520, 2, 0, "-", "test_parameter_flags"], [521, 2, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[514, 1, 1, "", "assert_all_close"], [514, 1, 1, "", "assert_same_type_and_shape"], [514, 1, 1, "", "check_unsupported_device"], [514, 1, 1, "", "check_unsupported_device_and_dtype"], [514, 1, 1, "", "check_unsupported_dtype"], [514, 1, 1, "", "test_unsupported_function"], [514, 1, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[515, 1, 1, "", "available_frameworks"], [515, 1, 1, "", "ground_truth"]], "ivy_tests.test_ivy.helpers.function_testing": [[516, 1, 1, "", "args_to_container"], [516, 1, 1, "", "args_to_frontend"], [516, 1, 1, "", "arrays_to_frontend"], [516, 1, 1, "", "as_lists"], [516, 1, 1, "", "compiled_if_required"], [516, 1, 1, "", "convtrue"], [516, 1, 1, "", "create_args_kwargs"], [516, 1, 1, "", "empty_func"], [516, 1, 1, "", "flatten"], [516, 1, 1, "", "flatten_and_to_np"], [516, 1, 1, "", "flatten_frontend"], [516, 1, 1, "", "flatten_frontend_to_np"], [516, 1, 1, "", "flatten_fw_and_to_np"], [516, 1, 1, "", "framework_comparator"], [516, 1, 1, "", "get_frontend_ret"], [516, 1, 1, "", "get_ret_and_flattened_np_array"], [516, 1, 1, "", "gradient_incompatible_function"], [516, 1, 1, "", "gradient_test"], [516, 1, 1, "", "gradient_unsupported_dtypes"], [516, 1, 1, "", "kwargs_to_args_n_kwargs"], [516, 1, 1, "", "make_json_pickable"], [516, 1, 1, "", "test_frontend_function"], [516, 1, 1, "", "test_frontend_method"], [516, 1, 1, "", "test_function"], [516, 1, 1, "", "test_method"], [516, 1, 1, "", "var_fn"]], "ivy_tests.test_ivy.helpers.globals": [[517, 7, 1, "", "InterruptedTest"], [517, 3, 1, "", "TestData"], [517, 1, 1, "", "remove_all_current_framework"], [517, 1, 1, "", "setup_api_test"], [517, 1, 1, "", "setup_frontend_test"], [517, 1, 1, "", "teardown_api_test"], [517, 1, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[517, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[517, 0, 1, "", "__init__"], [517, 4, 1, "", "fn_name"], [517, 4, 1, "", "fn_tree"], [517, 4, 1, "", "is_method"], [517, 4, 1, "", "supported_device_dtypes"], [517, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.structs": [[519, 3, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[519, 0, 1, "", "__init__"], [519, 4, 1, "", "framework_init_module"], [519, 4, 1, "", "init_name"], [519, 4, 1, "", "ivy_init_module"], [519, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[520, 3, 1, "", "FrontendFunctionTestFlags"], [520, 3, 1, "", "FrontendMethodTestFlags"], [520, 3, 1, "", "FunctionTestFlags"], [520, 3, 1, "", "InitMethodTestFlags"], [520, 3, 1, "", "MethodTestFlags"], [520, 3, 1, "", "TestFlags"], [520, 1, 1, "", "as_cont"], [520, 1, 1, "", "build_flag"], [520, 1, 1, "", "frontend_function_flags"], [520, 1, 1, "", "frontend_method_flags"], [520, 1, 1, "", "function_flags"], [520, 1, 1, "", "init_method_flags"], [520, 1, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[520, 0, 1, "", "__init__"], [520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[520, 0, 1, "", "__init__"], [520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[520, 0, 1, "", "__init__"], [520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[520, 0, 1, "", "__init__"], [520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[520, 0, 1, "", "__init__"], [520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[520, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[521, 1, 1, "", "handle_frontend_method"], [521, 1, 1, "", "handle_frontend_test"], [521, 1, 1, "", "handle_method"], [521, 1, 1, "", "handle_test"], [521, 1, 1, "", "num_positional_args"], [521, 1, 1, "", "num_positional_args_method"], [521, 1, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:function", "2": "py:module", "3": "py:class", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "function", "Python function"], "2": ["py", "module", "Python module"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"activ": [0, 22, 48, 357], "convers": [1, 24], "creation": [2, 25, 360], "data": [3, 26, 361, 376, 492, 493, 494, 495, 549, 560, 562, 569, 574], "type": [3, 26, 361, 549, 556, 560, 574], "devic": [4, 27, 362, 550, 555, 560], "elementwis": [5, 28, 363], "experiment": [6, 29, 364, 539, 541], "gener": [7, 30, 365, 558, 562, 564], "gradient": [8, 31, 366, 558], "imag": [9, 32, 537, 546], "layer": [10, 33, 52, 367], "linear": [11, 34, 368, 394], "algebra": [11, 34, 368], "loss": [12, 35, 369], "manipul": [13, 36, 370], "norm": [14, 37, 54, 373], "random": [15, 38, 374], "search": [16, 39, 375], "set": [17, 40, 376, 530, 540, 545], "sort": [18, 41, 377, 498], "statist": [19, 42, 378], "util": [20, 43, 379, 523], "wrap": [21, 44, 557], "base": 23, "arrai": [45, 74, 513, 533, 543, 544, 548, 555, 568, 577], "contain": [46, 541, 547, 569], "state": [47, 570, 574], "convert": [49, 571], "helper": [50, 518, 521, 522, 561, 562, 563], "initi": [51, 570], "modul": [53, 549, 550, 570], "optim": [55, 570], "sequenti": 56, "ivi": [57, 530, 536, 539, 541, 544, 546, 548, 551, 553, 558, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 573, 586], "deseri": 58, "gelu": 59, "get": [60, 541], "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "ifels": 68, "whileloop": 69, "if_els": 70, "while_loop": 71, "_ivy_to_n": 72, "arang": 73, "asarrai": 75, "asarray_handle_nest": 76, "asarray_infer_devic": 77, "asarray_to_native_arrays_and_back": 78, "copy_arrai": 79, "empti": 80, "empty_lik": 81, "ey": 82, "from_dlpack": 83, "note": [83, 360], "full": [84, 561], "full_lik": 85, "linspac": 86, "logspac": 87, "meshgrid": 88, "native_arrai": 89, "one_hot": 90, "ones": 91, "ones_lik": 92, "tril": 93, "triu": 94, "zero": 95, "zeros_lik": 96, "_check_complex128": 97, "_check_float64": 98, "_get_dtyp": 99, "_get_function_list": 100, "_get_functions_from_str": 101, "_handle_nestable_dtype_info": 102, "_is_valid_dtypes_attribut": 103, "_lstrip_lin": 104, "_nested_get": 105, "as_ivy_dtyp": 106, "as_native_dtyp": 107, "astyp": 108, "broadcast_arrai": 109, "broadcast_to": 110, "can_cast": 111, "check_float": 112, "closest_valid_dtyp": 113, "default_complex_dtyp": 114, "default_dtyp": 115, "default_float_dtyp": 116, "default_int_dtyp": 117, "default_uint_dtyp": 118, "dtype": [119, 555], "dtype_bit": 120, "finfo": 121, "function_supported_dtyp": 122, "function_unsupported_dtyp": 123, "iinfo": 124, "infer_default_dtyp": 125, "invalid_dtyp": 126, "is_bool_dtyp": 127, "is_complex_dtyp": 128, "is_float_dtyp": 129, "is_int_dtyp": 130, "is_native_dtyp": 131, "is_uint_dtyp": 132, "promote_typ": 133, "promote_types_of_input": 134, "result_typ": 135, "set_default_complex_dtyp": 136, "set_default_dtyp": 137, "set_default_float_dtyp": 138, "set_default_int_dtyp": 139, "set_default_uint_dtyp": 140, "type_promote_arrai": 141, "unset_default_complex_dtyp": 142, "unset_default_dtyp": 143, "unset_default_float_dtyp": 144, "unset_default_int_dtyp": 145, "unset_default_uint_dtyp": 146, "valid_dtyp": 147, "_get_devic": 148, "_get_nvml_gpu_handl": 149, "_is_valid_devices_attribut": 150, "as_ivy_dev": 151, "as_native_dev": 152, "clear_cached_mem_on_dev": 153, "default_devic": 154, "dev": 155, "dev_util": 156, "function_supported_devic": 157, "function_unsupported_devic": 158, "get_all_ivy_arrays_on_dev": 159, "gpu_is_avail": 160, "num_cpu_cor": 161, "num_gpu": 162, "num_ivy_arrays_on_dev": 163, "percent_used_mem_on_dev": 164, "print_all_ivy_arrays_on_dev": 165, "set_default_devic": 166, "set_split_factor": 167, "split_factor": 168, "split_func_cal": 169, "to_devic": 170, "total_mem_on_dev": 171, "tpu_is_avail": 172, "unset_default_devic": 173, "used_mem_on_dev": 174, "ab": 175, "aco": 176, "acosh": 177, "add": [178, 551, 561, 586], "asin": 179, "asinh": 180, "atan": 181, "atan2": 182, "atanh": 183, "bitwise_and": 184, "bitwise_invert": 185, "bitwise_left_shift": 186, "bitwise_or": 187, "bitwise_right_shift": 188, "bitwise_xor": 189, "ceil": 190, "co": 191, "cosh": 192, "deg2rad": 193, "divid": 194, "equal": 195, "erf": 196, "exp": 197, "expm1": 198, "floor": 199, "floor_divid": 200, "fmod": 201, "greater": 202, "greater_equ": 203, "isfinit": 204, "isinf": 205, "isnan": 206, "isreal": 207, "less": 208, "less_equ": 209, "log": [210, 540], "log10": 211, "log1p": 212, "log2": 213, "logaddexp": 214, "logical_and": 215, "logical_not": 216, "logical_or": 217, "logical_xor": 218, "maximum": 219, "minimum": 220, "multipli": 221, "neg": 222, "not_equ": 223, "posit": [224, 555], "pow": 225, "rad2deg": 226, "reciproc": 227, "remaind": 228, "round": 229, "sign": 230, "sin": 231, "sinh": 232, "sqrt": 233, "squar": 234, "subtract": 235, "tan": [236, 551, 561], "tanh": 237, "trunc": 238, "trunc_divid": 239, "_all_dnd_combin": 240, "_dnd_dict_differ": 241, "_dnd_dict_intersect": 242, "_dnd_dict_union": 243, "_get_devices_and_dtyp": 244, "_is_valid_device_and_dtypes_attribut": 245, "_parse_ellipsi": 246, "_valid_attrib_combin": 247, "all_equ": 248, "arg_info": 249, "arg_nam": 250, "array_equ": 251, "assert_supports_inplac": 252, "cache_fn": 253, "clip_matrix_norm": 254, "clip_vector_norm": 255, "container_typ": 256, "current_backend_str": 257, "default": 258, "einops_rearrang": 259, "einops_reduc": 260, "einops_repeat": 261, "exist": [262, 537], "fourier_encod": 263, "function_supported_devices_and_dtyp": 264, "function_unsupported_devices_and_dtyp": 265, "gather": 266, "gather_nd": 267, "get_all_arrays_in_memori": 268, "get_array_mod": 269, "get_exception_trace_mod": 270, "get_item": 271, "get_min_bas": 272, "get_min_denomin": 273, "get_nestable_mod": 274, "get_num_dim": 275, "get_queue_timeout": 276, "get_referrers_recurs": 277, "get_show_func_wrapper_trace_mod": 278, "get_tmp_dir": 279, "has_nan": 280, "inplace_arrays_support": 281, "inplace_decr": 282, "inplace_incr": 283, "inplace_upd": 284, "inplace_variables_support": 285, "is_arrai": 286, "is_ivy_arrai": 287, "is_ivy_contain": 288, "is_native_arrai": 289, "isin": 290, "isscalar": 291, "match_kwarg": 292, "multiprocess": 293, "num_arrays_in_memori": 294, "print_all_arrays_in_memori": 295, "scatter_flat": 296, "scatter_nd": 297, "set_array_mod": 298, "paramet": [298, 299, 302, 304, 305, 365, 520], "set_exception_trace_mod": 299, "set_min_bas": 300, "set_min_denomin": 301, "set_nestable_mod": 302, "set_queue_timeout": 303, "set_shape_array_mod": 304, "set_show_func_wrapper_trace_mod": 305, "set_tmp_dir": 306, "shape": [307, 376, 492, 493, 494, 495, 574], "shape_array_mod": 308, "stable_divid": 309, "stable_pow": 310, "supports_inplace_upd": 311, "to_ivy_shap": 312, "to_list": 313, "to_native_shap": 314, "to_numpi": 315, "to_scalar": 316, "try_else_non": 317, "unset_array_mod": 318, "unset_exception_trace_mod": 319, "unset_nestable_mod": 320, "unset_queue_timeout": 321, "unset_shape_array_mod": 322, "unset_show_func_wrapper_trace_mod": 323, "value_is_nan": 324, "vmap": 325, "_arrays_to_float_vari": 326, "_check_if_empti": 327, "_get_duplicate_index_chain": 328, "_get_native_variables_and_indic": 329, "_get_native_i": 330, "_get_required_float_vari": 331, "_get_required_native_vari": 332, "_get_y_and_ret_idx": 333, "_idxs_to_str": 334, "_is_vari": 335, "_non_finite_to_zero": 336, "_process_func_ret_and_grad": 337, "_set_dupl": 338, "_stop_grad_and_index": 339, "_to_ivi": 340, "_variabl": 341, "_variable_data": 342, "adam_step": 343, "adam_upd": 344, "execute_with_gradi": [345, 558], "grad": 346, "gradient_descent_upd": 347, "jac": 348, "lamb_upd": 349, "lars_upd": 350, "optimizer_upd": 351, "set_with_grad": 352, "stop_gradi": 353, "unset_with_grad": 354, "value_and_grad": 355, "with_grad": 356, "constant": 358, "control": [359, 574], "flow": [359, 574], "op": 359, "meta": 371, "nest": [372, 513], "depend": [376, 492, 493, 494, 495], "output": [376, 492, 493, 494, 495], "_deconv_length": 380, "_get_x_data_format": 381, "_handle_pad": 382, "conv": 383, "conv1d": 384, "conv1d_transpos": 385, "conv2d": 386, "conv2d_transpos": 387, "conv3d": 388, "conv3d_transpos": 389, "conv_general_dil": 390, "conv_general_transpos": 391, "depthwise_conv2d": 392, "dropout": 393, "lstm_updat": 395, "multi_head_attent": 396, "scaled_dot_product_attent": 397, "choleski": 398, "cross": 399, "det": 400, "diag": 401, "diagon": 402, "eig": 403, "eigh": 404, "eigvalsh": 405, "inner": 406, "inv": 407, "lu_factor": 408, "matmul": 409, "matrix_norm": 410, "matrix_pow": 411, "matrix_rank": 412, "matrix_transpos": 413, "outer": 414, "pinv": 415, "qr": 416, "slogdet": 417, "solv": 418, "svd": 419, "svdval": 420, "tensordot": 421, "tensorsolv": 422, "trace": [423, 553], "vander": 424, "vecdot": 425, "vector_norm": 426, "vector_to_skew_symmetric_matrix": 427, "_reduce_loss": 428, "binary_cross_entropi": 429, "cross_entropi": 430, "sparse_cross_entropi": 431, "_calculate_out_shap": 432, "clip": 433, "concat": 434, "constant_pad": 435, "expand_dim": 436, "flip": 437, "permute_dim": 438, "repeat": 439, "reshap": 440, "roll": [441, 551], "split": 442, "squeez": 443, "stack": [444, 553], "swapax": 445, "tile": 446, "unstack": 447, "zero_pad": 448, "_compute_cost_and_update_grad": 449, "_train_task": [450, 451], "_train_tasks_batch": 452, "_train_tasks_with_for_loop": 453, "fomaml_step": 454, "maml_step": 455, "reptile_step": 456, "all_nested_indic": 457, "copy_nest": 458, "duplicate_array_index_chain": 459, "index_nest": 460, "insert_into_nest_at_index": 461, "insert_into_nest_at_indic": 462, "map": [463, 548], "map_nest_at_index": 464, "map_nest_at_indic": 465, "multi_index_nest": 466, "nested_ani": 467, "nested_argwher": 468, "nested_map": 469, "nested_multi_map": 470, "prune_empti": 471, "prune_nest_at_index": 472, "prune_nest_at_indic": 473, "set_nest_at_index": 474, "set_nest_at_indic": 475, "layer_norm": 476, "_check_bounds_and_get_shap": 477, "_check_shapes_broadcast": 478, "_check_valid_scal": 479, "_randint_check_dtype_and_bound": 480, "multinomi": 481, "randint": 482, "random_norm": 483, "random_uniform": 484, "seed": 485, "shuffl": 486, "argmax": 487, "argmin": 488, "argwher": 489, "nonzero": 490, "where": [491, 539], "unique_al": 492, "unique_count": 493, "unique_invers": 494, "unique_valu": 495, "argsort": 496, "searchsort": 497, "_get_promoted_type_of_operand": 499, "cumprod": 500, "cumsum": 501, "einsum": 502, "max": 503, "mean": 504, "min": 505, "prod": 506, "std": 507, "sum": 508, "var": 509, "all": 510, "ani": 511, "nested_arrai": 512, "assert": [514, 524, 553], "avail": 515, "framework": [515, 530, 558, 567, 580, 583, 586, 587], "function": [516, 539, 547, 549, 550, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 571, 574], "test": [516, 520, 521, 540, 541, 543, 548, 561, 562], "global": 517, "hypothesi": [518, 540, 561, 562], "struct": 519, "flag": 520, "backend": [525, 545, 549, 558, 563, 566, 574], "dynam": [526, 574], "import": 526, "except": [527, 553], "inspect": 528, "verbos": 529, "content": 530, "transpil": [530, 571], "when": [530, 564], "should": 530, "i": [530, 546, 564], "us": [530, 537, 540, 543, 558, 561, 569], "up": [530, 540], "instal": 530, "pip": 530, "docker": [530, 537, 540, 541, 546], "from": 530, "sourc": 530, "document": 530, "exampl": [530, 536, 551, 555, 558, 561, 564], "contribut": [530, 535], "commun": 530, "citat": 530, "background": 531, "ml": [532, 582, 586], "explos": 532, "standard": [533, 564, 577, 586], "skeptic": 533, "complimentari": 533, "v": [533, 574], "competit": 533, "do": [533, 562], "work": [533, 576], "The": [533, 541, 546, 558, 560, 568, 574], "api": [533, 539, 541, 543, 547, 548, 558, 563, 566, 568, 570, 571, 577, 584, 586], "why": [534, 562], "unifi": [534, 568, 582, 586], "No": [534, 540], "more": [534, 540, 564], "re": [534, 562], "implement": [534, 548, 558], "infinit": 534, "shelf": 534, "life": 534, "appli": [536, 573], "librari": [536, 573], "introduct": [536, 560, 561], "robot": [536, 573], "build": [537, 546, 566], "doc": [537, 546], "conveni": [537, 546, 556], "script": [537, 546], "hub": 537, "local": [537, 541], "without": [537, 561], "help": [538, 541], "resourc": 538, "open": 539, "task": 539, "format": [539, 554, 579, 586], "checklist": 539, "frontend": [539, 545, 560, 561, 571], "place": 539, "fork": [540, 541], "clone": [540, 548], "repo": 540, "pycharm": [540, 541], "virtual": 540, "environ": 540, "miniconda": 540, "venv": 540, "interpret": 540, "window": 540, "maco": 540, "ubuntu": 540, "detail": 540, "free": 540, "github": 540, "codespac": 540, "pre": [540, 554], "commit": [540, 541, 548, 554], "basic": [541, 560], "todo": 541, "list": 541, "issu": 541, "manag": 541, "your": [541, 562], "who": 541, "To": 541, "ask": 541, "With": 541, "command": 541, "line": 541, "browser": 541, "pull": [541, 548], "request": [541, 548], "small": 541, "often": 541, "interact": 541, "run": [541, 543, 546, 562], "most": 541, "out": [541, 555, 559], "id": [541, 543], "deep": 542, "dive": 542, "termin": 543, "regener": 543, "failur": 543, "skip": 543, "nativ": [544, 564], "handl": [544, 553, 574], "integr": [544, 548, 562], "custom": [544, 546, 558, 569, 574], "class": [544, 553, 560, 568], "version": [545, 563, 574], "support": [545, 549, 560, 574], "pipelin": [546, 548, 562, 574], "how": [546, 562], "builder": 546, "being": 546, "option": 546, "": 546, "structur": [546, 558, 574], "index": 546, "rst": 546, "partial_conf": 546, "py": 546, "prebuild": 546, "sh": 546, "extens": [546, 572], "custom_autosummari": 546, "hide": 546, "tabl": 546, "includ": 546, "fix": 546, "directori": 546, "substitut": 546, "caption": 546, "custom_build": 546, "discussion_link": 546, "skippable_funct": 546, "instanc": [547, 560, 561, 568], "method": [547, 560, 561, 568, 569], "static": 547, "special": [547, 560], "nestabl": [547, 555, 556], "continu": 548, "push": 548, "pr": 548, "trigger": 548, "A": [548, 564], "top": 548, "down": 548, "view": 548, "store": 548, "retriev": 548, "repositori": 548, "nitti": 548, "gritti": 548, "storag": 548, "space": 548, "unifyai": 548, "determin": 548, "coverag": 548, "workflow": 548, "multipl": 548, "runner": 548, "race": 548, "condit": 548, "period": 548, "manual": 548, "dispatch": 548, "ci": 548, "dashboard": 548, "promot": [549, 560], "argument": [549, 550, 555, 559, 560], "other": [549, 550], "unsupport": 549, "bug": 549, "superset": [549, 564], "docstr": [551, 552], "configur": [553, 569], "mode": 553, "func_wrapp": 553, "prune": 553, "handle_except": 553, "decor": [553, 562], "lint": 554, "check": [554, 574], "hook": 554, "keyword": 555, "input": 555, "number": 555, "oper": [555, 568, 574], "integ": 555, "sequenc": 555, "primari": 556, "composit": [556, 560], "mix": 556, "standalon": 556, "overview": 558, "usag": [558, 564], "signatur": 558, "an": 558, "design": [558, 563, 565], "our": 558, "polici": [558, 560], "specif": [558, 584, 585, 586], "consider": 558, "inplac": 559, "updat": 559, "copi": 559, "unus": 560, "miss": 560, "temporari": 560, "rule": 560, "numpi": [560, 580], "cast": 560, "duplic": [560, 564], "valu": 561, "alia": 561, "write": 562, "own": 562, "strategi": 562, "we": 562, "need": 562, "effect": 562, "bonu": 562, "extend": [562, 564], "featur": 562, "self": 562, "consist": 562, "explicit": 562, "test_array_funct": 562, "fail": 562, "navig": 563, "code": 563, "categor": 563, "submodul": 563, "pin": 563, "behaviour": 564, "what": [564, 586], "non": 564, "too": 564, "much": 564, "balanc": 564, "effici": 564, "maxim": 564, "block": 566, "handler": 566, "graph": [566, 571, 581, 586], "compil": [566, 571, 578, 583, 585, 586], "monkei": 568, "patch": 568, "construct": 569, "represent": 569, "recurs": 569, "built": 569, "ins": 569, "access": 569, "save": 569, "load": 569, "comparison": 569, "case": 569, "compartment": 569, "network": [569, 571], "weight": 569, "role": 571, "model": [571, 574], "mechan": 573, "vision": 573, "gym": 573, "memori": 573, "faq": 574, "maintain": 574, "size": 574, "gpu": 574, "deploy": 574, "auto": 574, "differenti": 574, "replica": 574, "parallel": 574, "altern": 574, "glossari": 575, "relat": 576, "infrastructur": [578, 586], "llvm": 578, "mlir": 578, "oneapi": 578, "exchang": [579, 586], "onnx": 579, "nnef": 579, "coreml": 579, "matlab": 580, "scipi": 580, "torch": [580, 581], "scikit": 580, "learn": 580, "theano": 580, "panda": 580, "julia": 580, "apach": [580, 583], "spark": 580, "mllib": 580, "caff": 580, "chainer": 580, "tensorflow": 580, "1": 580, "mxnet": 580, "cntk": 580, "pytorch": 580, "flux": 580, "jax": 580, "2": 580, "dex": 580, "languag": 580, "tracer": [581, 586], "tf": 581, "jaxpr": 581, "jit": 581, "fx": 581, "compani": [582, 586], "quansight": 582, "modular": 582, "octoml": 582, "multi": [583, 586], "vendor": [583, 584, 585, 586], "tvm": 583, "xla": 583, "gcc": 583, "tensorrt": 584, "cuda": 584, "icc": 585, "icx": 585, "nvcc": 585, "doe": 586, "wrapper": [586, 587], "eagerpi": 587, "kera": 587, "thinc": 587, "tensorli": 587, "neuropod": 587}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Activations": [[0, "module-ivy.data_classes.array.activations"], [22, "module-ivy.data_classes.container.activations"], [48, "module-ivy.stateful.activations"], [357, "activations"]], "Conversions": [[1, "module-ivy.data_classes.array.conversions"], [24, "module-ivy.data_classes.container.conversions"]], "Creation": [[2, "module-ivy.data_classes.array.creation"], [25, "module-ivy.data_classes.container.creation"], [360, "creation"]], "Data type": [[3, "module-ivy.data_classes.array.data_type"], [26, "module-ivy.data_classes.container.data_type"], [361, "data-type"]], "Device": [[4, "module-ivy.data_classes.array.device"], [27, "module-ivy.data_classes.container.device"], [362, "device"]], "Elementwise": [[5, "module-ivy.data_classes.array.elementwise"], [28, "module-ivy.data_classes.container.elementwise"], [363, "elementwise"]], "Experimental": [[6, "module-ivy.data_classes.array.experimental"], [29, "module-ivy.data_classes.container.experimental"], [364, "experimental"]], "General": [[7, "module-ivy.data_classes.array.general"], [30, "module-ivy.data_classes.container.general"], [365, "general"]], "Gradients": [[8, "module-ivy.data_classes.array.gradients"], [31, "module-ivy.data_classes.container.gradients"], [366, "gradients"], [558, "gradients"]], "Image": [[9, "module-ivy.data_classes.array.image"], [32, "module-ivy.data_classes.container.image"]], "Layers": [[10, "module-ivy.data_classes.array.layers"], [33, "module-ivy.data_classes.container.layers"], [52, "module-ivy.stateful.layers"], [367, "layers"]], "Linear algebra": [[11, "module-ivy.data_classes.array.linear_algebra"], [34, "module-ivy.data_classes.container.linear_algebra"], [368, "linear-algebra"]], "Losses": [[12, "module-ivy.data_classes.array.losses"], [35, "module-ivy.data_classes.container.losses"], [369, "losses"]], "Manipulation": [[13, "module-ivy.data_classes.array.manipulation"], [36, "module-ivy.data_classes.container.manipulation"], [370, "manipulation"]], "Norms": [[14, "module-ivy.data_classes.array.norms"], [37, "module-ivy.data_classes.container.norms"], [54, "module-ivy.stateful.norms"], [373, "norms"]], "Random": [[15, "module-ivy.data_classes.array.random"], [38, "module-ivy.data_classes.container.random"], [374, "random"]], "Searching": [[16, "module-ivy.data_classes.array.searching"], [39, "module-ivy.data_classes.container.searching"], [375, "searching"]], "Set": [[17, "module-ivy.data_classes.array.set"], [40, "module-ivy.data_classes.container.set"], [376, "set"]], "Sorting": [[18, "module-ivy.data_classes.array.sorting"], [41, "module-ivy.data_classes.container.sorting"], [377, "sorting"]], "Statistical": [[19, "module-ivy.data_classes.array.statistical"], [42, "module-ivy.data_classes.container.statistical"], [378, "statistical"]], "Utility": [[20, "module-ivy.data_classes.array.utility"], [43, "module-ivy.data_classes.container.utility"], [379, "utility"]], "Wrapping": [[21, "module-ivy.data_classes.array.wrapping"], [44, "module-ivy.data_classes.container.wrapping"]], "Base": [[23, "module-ivy.data_classes.container.base"]], "Array": [[45, "array"]], "Container": [[46, "container"]], "stateful": [[47, "stateful"]], "Converters": [[49, "module-ivy.stateful.converters"]], "Helpers": [[50, "module-ivy.stateful.helpers"]], "Initializers": [[51, "module-ivy.stateful.initializers"], [570, "initializers"]], "Module": [[53, "module-ivy.stateful.module"]], "Optimizers": [[55, "module-ivy.stateful.optimizers"], [570, "optimizers"]], "Sequential": [[56, "module-ivy.stateful.sequential"]], "ivy": [[57, "ivy"]], "deserialize": [[58, "deserialize"]], "gelu": [[59, "gelu"]], "get": [[60, "get"]], "leaky_relu": [[61, "leaky-relu"]], "log_softmax": [[62, "log-softmax"]], "mish": [[63, "mish"]], "relu": [[64, "relu"]], "sigmoid": [[65, "sigmoid"]], "softmax": [[66, "softmax"]], "softplus": [[67, "softplus"]], "IfElse": [[68, "ifelse"]], "WhileLoop": [[69, "whileloop"]], "if_else": [[70, "if-else"]], "while_loop": [[71, "while-loop"]], "_ivy_to_native": [[72, "ivy-to-native"]], "arange": [[73, "arange"]], "array": [[74, "array"]], "asarray": [[75, "asarray"]], "asarray_handle_nestable": [[76, "asarray-handle-nestable"]], "asarray_infer_device": [[77, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[78, "asarray-to-native-arrays-and-back"]], "copy_array": [[79, "copy-array"]], "empty": [[80, "empty"]], "empty_like": [[81, "empty-like"]], "eye": [[82, "eye"]], "from_dlpack": [[83, "from-dlpack"]], "Note": [[83, null], [360, null]], "full": [[84, "full"]], "full_like": [[85, "full-like"]], "linspace": [[86, "linspace"]], "logspace": [[87, "logspace"]], "meshgrid": [[88, "meshgrid"]], "native_array": [[89, "native-array"]], "one_hot": [[90, "one-hot"]], "ones": [[91, "ones"]], "ones_like": [[92, "ones-like"]], "tril": [[93, "tril"]], "triu": [[94, "triu"]], "zeros": [[95, "zeros"]], "zeros_like": [[96, "zeros-like"]], "_check_complex128": [[97, "check-complex128"]], "_check_float64": [[98, "check-float64"]], "_get_dtypes": [[99, "get-dtypes"]], "_get_function_list": [[100, "get-function-list"]], "_get_functions_from_string": [[101, "get-functions-from-string"]], "_handle_nestable_dtype_info": [[102, "handle-nestable-dtype-info"]], "_is_valid_dtypes_attributes": [[103, "is-valid-dtypes-attributes"]], "_lstrip_lines": [[104, "lstrip-lines"]], "_nested_get": [[105, "nested-get"]], "as_ivy_dtype": [[106, "as-ivy-dtype"]], "as_native_dtype": [[107, "as-native-dtype"]], "astype": [[108, "astype"]], "broadcast_arrays": [[109, "broadcast-arrays"]], "broadcast_to": [[110, "broadcast-to"]], "can_cast": [[111, "can-cast"]], "check_float": [[112, "check-float"]], "closest_valid_dtype": [[113, "closest-valid-dtype"]], "default_complex_dtype": [[114, "default-complex-dtype"]], "default_dtype": [[115, "default-dtype"]], "default_float_dtype": [[116, "default-float-dtype"]], "default_int_dtype": [[117, "default-int-dtype"]], "default_uint_dtype": [[118, "default-uint-dtype"]], "dtype": [[119, "dtype"]], "dtype_bits": [[120, "dtype-bits"]], "finfo": [[121, "finfo"]], "function_supported_dtypes": [[122, "function-supported-dtypes"]], "function_unsupported_dtypes": [[123, "function-unsupported-dtypes"]], "iinfo": [[124, "iinfo"]], "infer_default_dtype": [[125, "infer-default-dtype"]], "invalid_dtype": [[126, "invalid-dtype"]], "is_bool_dtype": [[127, "is-bool-dtype"]], "is_complex_dtype": [[128, "is-complex-dtype"]], "is_float_dtype": [[129, "is-float-dtype"]], "is_int_dtype": [[130, "is-int-dtype"]], "is_native_dtype": [[131, "is-native-dtype"]], "is_uint_dtype": [[132, "is-uint-dtype"]], "promote_types": [[133, "promote-types"]], "promote_types_of_inputs": [[134, "promote-types-of-inputs"]], "result_type": [[135, "result-type"]], "set_default_complex_dtype": [[136, "set-default-complex-dtype"]], "set_default_dtype": [[137, "set-default-dtype"]], "set_default_float_dtype": [[138, "set-default-float-dtype"]], "set_default_int_dtype": [[139, "set-default-int-dtype"]], "set_default_uint_dtype": [[140, "set-default-uint-dtype"]], "type_promote_arrays": [[141, "type-promote-arrays"]], "unset_default_complex_dtype": [[142, "unset-default-complex-dtype"]], "unset_default_dtype": [[143, "unset-default-dtype"]], "unset_default_float_dtype": [[144, "unset-default-float-dtype"]], "unset_default_int_dtype": [[145, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[146, "unset-default-uint-dtype"]], "valid_dtype": [[147, "valid-dtype"]], "_get_devices": [[148, "get-devices"]], "_get_nvml_gpu_handle": [[149, "get-nvml-gpu-handle"]], "_is_valid_devices_attributes": [[150, "is-valid-devices-attributes"]], "as_ivy_dev": [[151, "as-ivy-dev"]], "as_native_dev": [[152, "as-native-dev"]], "clear_cached_mem_on_dev": [[153, "clear-cached-mem-on-dev"]], "default_device": [[154, "default-device"]], "dev": [[155, "dev"]], "dev_util": [[156, "dev-util"]], "function_supported_devices": [[157, "function-supported-devices"]], "function_unsupported_devices": [[158, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[159, "get-all-ivy-arrays-on-dev"]], "gpu_is_available": [[160, "gpu-is-available"]], "num_cpu_cores": [[161, "num-cpu-cores"]], "num_gpus": [[162, "num-gpus"]], "num_ivy_arrays_on_dev": [[163, "num-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[164, "percent-used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[165, "print-all-ivy-arrays-on-dev"]], "set_default_device": [[166, "set-default-device"]], "set_split_factor": [[167, "set-split-factor"]], "split_factor": [[168, "split-factor"]], "split_func_call": [[169, "split-func-call"]], "to_device": [[170, "to-device"]], "total_mem_on_dev": [[171, "total-mem-on-dev"]], "tpu_is_available": [[172, "tpu-is-available"]], "unset_default_device": [[173, "unset-default-device"]], "used_mem_on_dev": [[174, "used-mem-on-dev"]], "abs": [[175, "abs"]], "acos": [[176, "acos"]], "acosh": [[177, "acosh"]], "add": [[178, "add"]], "asin": [[179, "asin"]], "asinh": [[180, "asinh"]], "atan": [[181, "atan"]], "atan2": [[182, "atan2"]], "atanh": [[183, "atanh"]], "bitwise_and": [[184, "bitwise-and"]], "bitwise_invert": [[185, "bitwise-invert"]], "bitwise_left_shift": [[186, "bitwise-left-shift"]], "bitwise_or": [[187, "bitwise-or"]], "bitwise_right_shift": [[188, "bitwise-right-shift"]], "bitwise_xor": [[189, "bitwise-xor"]], "ceil": [[190, "ceil"]], "cos": [[191, "cos"]], "cosh": [[192, "cosh"]], "deg2rad": [[193, "deg2rad"]], "divide": [[194, "divide"]], "equal": [[195, "equal"]], "erf": [[196, "erf"]], "exp": [[197, "exp"]], "expm1": [[198, "expm1"]], "floor": [[199, "floor"]], "floor_divide": [[200, "floor-divide"]], "fmod": [[201, "fmod"]], "greater": [[202, "greater"]], "greater_equal": [[203, "greater-equal"]], "isfinite": [[204, "isfinite"]], "isinf": [[205, "isinf"]], "isnan": [[206, "isnan"]], "isreal": [[207, "isreal"]], "less": [[208, "less"]], "less_equal": [[209, "less-equal"]], "log": [[210, "log"]], "log10": [[211, "log10"]], "log1p": [[212, "log1p"]], "log2": [[213, "log2"]], "logaddexp": [[214, "logaddexp"]], "logical_and": [[215, "logical-and"]], "logical_not": [[216, "logical-not"]], "logical_or": [[217, "logical-or"]], "logical_xor": [[218, "logical-xor"]], "maximum": [[219, "maximum"]], "minimum": [[220, "minimum"]], "multiply": [[221, "multiply"]], "negative": [[222, "negative"]], "not_equal": [[223, "not-equal"]], "positive": [[224, "positive"]], "pow": [[225, "pow"]], "rad2deg": [[226, "rad2deg"]], "reciprocal": [[227, "reciprocal"]], "remainder": [[228, "remainder"]], "round": [[229, "round"]], "sign": [[230, "sign"]], "sin": [[231, "sin"]], "sinh": [[232, "sinh"]], "sqrt": [[233, "sqrt"]], "square": [[234, "square"]], "subtract": [[235, "subtract"]], "tan": [[236, "tan"]], "tanh": [[237, "tanh"]], "trunc": [[238, "trunc"]], "trunc_divide": [[239, "trunc-divide"]], "_all_dnd_combinations": [[240, "all-dnd-combinations"]], "_dnd_dict_difference": [[241, "dnd-dict-difference"]], "_dnd_dict_intersection": [[242, "dnd-dict-intersection"]], "_dnd_dict_union": [[243, "dnd-dict-union"]], "_get_devices_and_dtypes": [[244, "get-devices-and-dtypes"]], "_is_valid_device_and_dtypes_attributes": [[245, "is-valid-device-and-dtypes-attributes"]], "_parse_ellipsis": [[246, "parse-ellipsis"]], "_valid_attrib_combinations": [[247, "valid-attrib-combinations"]], "all_equal": [[248, "all-equal"]], "arg_info": [[249, "arg-info"]], "arg_names": [[250, "arg-names"]], "array_equal": [[251, "array-equal"]], "assert_supports_inplace": [[252, "assert-supports-inplace"]], "cache_fn": [[253, "cache-fn"]], "clip_matrix_norm": [[254, "clip-matrix-norm"]], "clip_vector_norm": [[255, "clip-vector-norm"]], "container_types": [[256, "container-types"]], "current_backend_str": [[257, "current-backend-str"]], "default": [[258, "default"]], "einops_rearrange": [[259, "einops-rearrange"]], "einops_reduce": [[260, "einops-reduce"]], "einops_repeat": [[261, "einops-repeat"]], "exists": [[262, "exists"]], "fourier_encode": [[263, "fourier-encode"]], "function_supported_devices_and_dtypes": [[264, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[265, "function-unsupported-devices-and-dtypes"]], "gather": [[266, "gather"]], "gather_nd": [[267, "gather-nd"]], "get_all_arrays_in_memory": [[268, "get-all-arrays-in-memory"]], "get_array_mode": [[269, "get-array-mode"]], "get_exception_trace_mode": [[270, "get-exception-trace-mode"]], "get_item": [[271, "get-item"]], "get_min_base": [[272, "get-min-base"]], "get_min_denominator": [[273, "get-min-denominator"]], "get_nestable_mode": [[274, "get-nestable-mode"]], "get_num_dims": [[275, "get-num-dims"]], "get_queue_timeout": [[276, "get-queue-timeout"]], "get_referrers_recursive": [[277, "get-referrers-recursive"]], "get_show_func_wrapper_trace_mode": [[278, "get-show-func-wrapper-trace-mode"]], "get_tmp_dir": [[279, "get-tmp-dir"]], "has_nans": [[280, "has-nans"]], "inplace_arrays_supported": [[281, "inplace-arrays-supported"]], "inplace_decrement": [[282, "inplace-decrement"]], "inplace_increment": [[283, "inplace-increment"]], "inplace_update": [[284, "inplace-update"]], "inplace_variables_supported": [[285, "inplace-variables-supported"]], "is_array": [[286, "is-array"]], "is_ivy_array": [[287, "is-ivy-array"]], "is_ivy_container": [[288, "is-ivy-container"]], "is_native_array": [[289, "is-native-array"]], "isin": [[290, "isin"]], "isscalar": [[291, "isscalar"]], "match_kwargs": [[292, "match-kwargs"]], "multiprocessing": [[293, "multiprocessing"]], "num_arrays_in_memory": [[294, "num-arrays-in-memory"]], "print_all_arrays_in_memory": [[295, "print-all-arrays-in-memory"]], "scatter_flat": [[296, "scatter-flat"]], "scatter_nd": [[297, "scatter-nd"]], "set_array_mode": [[298, "set-array-mode"]], "Parameter": [[298, "parameter"], [299, "parameter"], [302, "parameter"], [304, "parameter"], [305, "parameter"], [365, "parameter"], [365, "id1"], [365, "id2"], [365, "id3"], [365, "id4"]], "set_exception_trace_mode": [[299, "set-exception-trace-mode"]], "set_min_base": [[300, "set-min-base"]], "set_min_denominator": [[301, "set-min-denominator"]], "set_nestable_mode": [[302, "set-nestable-mode"]], "set_queue_timeout": [[303, "set-queue-timeout"]], "set_shape_array_mode": [[304, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[305, "set-show-func-wrapper-trace-mode"]], "set_tmp_dir": [[306, "set-tmp-dir"]], "shape": [[307, "shape"]], "shape_array_mode": [[308, "shape-array-mode"]], "stable_divide": [[309, "stable-divide"]], "stable_pow": [[310, "stable-pow"]], "supports_inplace_updates": [[311, "supports-inplace-updates"]], "to_ivy_shape": [[312, "to-ivy-shape"]], "to_list": [[313, "to-list"]], "to_native_shape": [[314, "to-native-shape"]], "to_numpy": [[315, "to-numpy"]], "to_scalar": [[316, "to-scalar"]], "try_else_none": [[317, "try-else-none"]], "unset_array_mode": [[318, "unset-array-mode"]], "unset_exception_trace_mode": [[319, "unset-exception-trace-mode"]], "unset_nestable_mode": [[320, "unset-nestable-mode"]], "unset_queue_timeout": [[321, "unset-queue-timeout"]], "unset_shape_array_mode": [[322, "unset-shape-array-mode"]], "unset_show_func_wrapper_trace_mode": [[323, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[324, "value-is-nan"]], "vmap": [[325, "vmap"]], "_arrays_to_float_variables": [[326, "arrays-to-float-variables"]], "_check_if_empty": [[327, "check-if-empty"]], "_get_duplicate_index_chains": [[328, "get-duplicate-index-chains"]], "_get_native_variables_and_indices": [[329, "get-native-variables-and-indices"]], "_get_native_y": [[330, "get-native-y"]], "_get_required_float_variables": [[331, "get-required-float-variables"]], "_get_required_native_variables": [[332, "get-required-native-variables"]], "_get_y_and_ret_idxs": [[333, "get-y-and-ret-idxs"]], "_idxs_to_str": [[334, "idxs-to-str"]], "_is_variable": [[335, "is-variable"]], "_non_finite_to_zero": [[336, "non-finite-to-zero"]], "_process_func_ret_and_grads": [[337, "process-func-ret-and-grads"]], "_set_duplicates": [[338, "set-duplicates"]], "_stop_grad_and_index": [[339, "stop-grad-and-index"]], "_to_ivy": [[340, "to-ivy"]], "_variable": [[341, "variable"]], "_variable_data": [[342, "variable-data"]], "adam_step": [[343, "adam-step"]], "adam_update": [[344, "adam-update"]], "execute_with_gradients": [[345, "execute-with-gradients"]], "grad": [[346, "grad"]], "gradient_descent_update": [[347, "gradient-descent-update"]], "jac": [[348, "jac"]], "lamb_update": [[349, "lamb-update"]], "lars_update": [[350, "lars-update"]], "optimizer_update": [[351, "optimizer-update"]], "set_with_grads": [[352, "set-with-grads"]], "stop_gradient": [[353, "stop-gradient"]], "unset_with_grads": [[354, "unset-with-grads"]], "value_and_grad": [[355, "value-and-grad"]], "with_grads": [[356, "with-grads"]], "Constants": [[358, "constants"]], "Control flow ops": [[359, "control-flow-ops"]], "Meta": [[371, "meta"]], "Nest": [[372, "nest"]], "Data-dependent output shape": [[376, null], [376, null], [376, null], [376, null], [492, null], [493, null], [494, null], [495, null]], "_deconv_length": [[380, "deconv-length"]], "_get_x_data_format": [[381, "get-x-data-format"]], "_handle_padding": [[382, "handle-padding"]], "conv": [[383, "conv"]], "conv1d": [[384, "conv1d"]], "conv1d_transpose": [[385, "conv1d-transpose"]], "conv2d": [[386, "conv2d"]], "conv2d_transpose": [[387, "conv2d-transpose"]], "conv3d": [[388, "conv3d"]], "conv3d_transpose": [[389, "conv3d-transpose"]], "conv_general_dilated": [[390, "conv-general-dilated"]], "conv_general_transpose": [[391, "conv-general-transpose"]], "depthwise_conv2d": [[392, "depthwise-conv2d"]], "dropout": [[393, "dropout"]], "linear": [[394, "linear"]], "lstm_update": [[395, "lstm-update"]], "multi_head_attention": [[396, "multi-head-attention"]], "scaled_dot_product_attention": [[397, "scaled-dot-product-attention"]], "cholesky": [[398, "cholesky"]], "cross": [[399, "cross"]], "det": [[400, "det"]], "diag": [[401, "diag"]], "diagonal": [[402, "diagonal"]], "eig": [[403, "eig"]], "eigh": [[404, "eigh"]], "eigvalsh": [[405, "eigvalsh"]], "inner": [[406, "inner"]], "inv": [[407, "inv"]], "lu_factor": [[408, "lu-factor"]], "matmul": [[409, "matmul"]], "matrix_norm": [[410, "matrix-norm"]], "matrix_power": [[411, "matrix-power"]], "matrix_rank": [[412, "matrix-rank"]], "matrix_transpose": [[413, "matrix-transpose"]], "outer": [[414, "outer"]], "pinv": [[415, "pinv"]], "qr": [[416, "qr"]], "slogdet": [[417, "slogdet"]], "solve": [[418, "solve"]], "svd": [[419, "svd"]], "svdvals": [[420, "svdvals"]], "tensordot": [[421, "tensordot"]], "tensorsolve": [[422, "tensorsolve"]], "trace": [[423, "trace"]], "vander": [[424, "vander"]], "vecdot": [[425, "vecdot"]], "vector_norm": [[426, "vector-norm"]], "vector_to_skew_symmetric_matrix": [[427, "vector-to-skew-symmetric-matrix"]], "_reduce_loss": [[428, "reduce-loss"]], "binary_cross_entropy": [[429, "binary-cross-entropy"]], "cross_entropy": [[430, "cross-entropy"]], "sparse_cross_entropy": [[431, "sparse-cross-entropy"]], "_calculate_out_shape": [[432, "calculate-out-shape"]], "clip": [[433, "clip"]], "concat": [[434, "concat"]], "constant_pad": [[435, "constant-pad"]], "expand_dims": [[436, "expand-dims"]], "flip": [[437, "flip"]], "permute_dims": [[438, "permute-dims"]], "repeat": [[439, "repeat"]], "reshape": [[440, "reshape"]], "roll": [[441, "roll"]], "split": [[442, "split"]], "squeeze": [[443, "squeeze"]], "stack": [[444, "stack"]], "swapaxes": [[445, "swapaxes"]], "tile": [[446, "tile"]], "unstack": [[447, "unstack"]], "zero_pad": [[448, "zero-pad"]], "_compute_cost_and_update_grads": [[449, "compute-cost-and-update-grads"]], "_train_task": [[450, "train-task"]], "_train_tasks": [[451, "train-tasks"]], "_train_tasks_batched": [[452, "train-tasks-batched"]], "_train_tasks_with_for_loop": [[453, "train-tasks-with-for-loop"]], "fomaml_step": [[454, "fomaml-step"]], "maml_step": [[455, "maml-step"]], "reptile_step": [[456, "reptile-step"]], "all_nested_indices": [[457, "all-nested-indices"]], "copy_nest": [[458, "copy-nest"]], "duplicate_array_index_chains": [[459, "duplicate-array-index-chains"]], "index_nest": [[460, "index-nest"]], "insert_into_nest_at_index": [[461, "insert-into-nest-at-index"]], "insert_into_nest_at_indices": [[462, "insert-into-nest-at-indices"]], "map": [[463, "map"]], "map_nest_at_index": [[464, "map-nest-at-index"]], "map_nest_at_indices": [[465, "map-nest-at-indices"]], "multi_index_nest": [[466, "multi-index-nest"]], "nested_any": [[467, "nested-any"]], "nested_argwhere": [[468, "nested-argwhere"]], "nested_map": [[469, "nested-map"]], "nested_multi_map": [[470, "nested-multi-map"]], "prune_empty": [[471, "prune-empty"]], "prune_nest_at_index": [[472, "prune-nest-at-index"]], "prune_nest_at_indices": [[473, "prune-nest-at-indices"]], "set_nest_at_index": [[474, "set-nest-at-index"]], "set_nest_at_indices": [[475, "set-nest-at-indices"]], "layer_norm": [[476, "layer-norm"]], "_check_bounds_and_get_shape": [[477, "check-bounds-and-get-shape"]], "_check_shapes_broadcastable": [[478, "check-shapes-broadcastable"]], "_check_valid_scale": [[479, "check-valid-scale"]], "_randint_check_dtype_and_bound": [[480, "randint-check-dtype-and-bound"]], "multinomial": [[481, "multinomial"]], "randint": [[482, "randint"]], "random_normal": [[483, "random-normal"]], "random_uniform": [[484, "random-uniform"]], "seed": [[485, "seed"]], "shuffle": [[486, "shuffle"]], "argmax": [[487, "argmax"]], "argmin": [[488, "argmin"]], "argwhere": [[489, "argwhere"]], "nonzero": [[490, "nonzero"]], "where": [[491, "where"]], "unique_all": [[492, "unique-all"]], "unique_counts": [[493, "unique-counts"]], "unique_inverse": [[494, "unique-inverse"]], "unique_values": [[495, "unique-values"]], "argsort": [[496, "argsort"]], "searchsorted": [[497, "searchsorted"]], "sort": [[498, "sort"]], "_get_promoted_type_of_operands": [[499, "get-promoted-type-of-operands"]], "cumprod": [[500, "cumprod"]], "cumsum": [[501, "cumsum"]], "einsum": [[502, "einsum"]], "max": [[503, "max"]], "mean": [[504, "mean"]], "min": [[505, "min"]], "prod": [[506, "prod"]], "std": [[507, "std"]], "sum": [[508, "sum"]], "var": [[509, "var"]], "all": [[510, "all"]], "any": [[511, "any"]], "nested_array": [[512, "nested-array"]], "Nested array": [[513, "module-ivy.nested_array.nested_array"]], "Assertions": [[514, "module-ivy_tests.test_ivy.helpers.assertions"], [524, "module-ivy.utils.assertions"]], "Available frameworks": [[515, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Function testing": [[516, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[517, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[518, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "Structs": [[519, "module-ivy_tests.test_ivy.helpers.structs"]], "Test parameter flags": [[520, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Testing helpers": [[521, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "helpers": [[522, "helpers"]], "utils": [[523, "utils"]], "Backend": [[525, "module-ivy.utils.backend"]], "Dynamic import": [[526, "module-ivy.utils.dynamic_import"]], "Exceptions": [[527, "module-ivy.utils.exceptions"]], "Inspection": [[528, "module-ivy.utils.inspection"]], "Verbosity": [[529, "module-ivy.utils.verbosity"]], "Contents": [[530, "contents"]], "Ivy as a transpiler": [[530, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[530, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[530, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[530, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[530, "setting-up-ivy"]], "Installing using pip": [[530, "installing-using-pip"]], "Docker": [[530, "docker"]], "Installing from source": [[530, "installing-from-source"]], "Using Ivy": [[530, "using-ivy"]], "Documentation": [[530, "documentation"]], "Examples": [[530, "examples"], [555, "examples"]], "Contributing": [[530, "contributing"], [535, "contributing"]], "Community": [[530, "community"]], "Citation": [[530, "citation"]], "Background": [[531, "background"]], "ML Explosion": [[532, "ml-explosion"]], "Standardization": [[533, "standardization"]], "Skepticism": [[533, "skepticism"]], "Complimentary vs Competitive": [[533, "complimentary-vs-competitive"]], "Do Standards Work?": [[533, "do-standards-work"]], "The Array API Standard": [[533, "the-array-api-standard"]], "Why Unify?": [[534, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[534, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[534, "infinite-shelf-life"]], "Applied Libraries": [[536, "applied-libraries"], [573, "applied-libraries"]], "Introduction": [[536, "introduction"], [560, "introduction"], [561, "introduction"]], "Example - Ivy Robot": [[536, "example-ivy-robot"]], "Building the Docs": [[537, "building-the-docs"]], "Building the Docs using Docker": [[537, "building-the-docs-using-docker"]], "Using convenience script": [[537, "using-convenience-script"]], "Using existing image on Docker Hub": [[537, "using-existing-image-on-docker-hub"]], "Building the image locally": [[537, "building-the-image-locally"]], "Building the Docs without Docker": [[537, "building-the-docs-without-docker"]], "Helpful Resources": [[538, "helpful-resources"]], "Open Tasks": [[539, "open-tasks"]], "Function Formatting": [[539, "function-formatting"]], "Formatting checklist": [[539, "formatting-checklist"]], "Frontend APIs": [[539, "frontend-apis"]], "Where to place a frontend function": [[539, "where-to-place-a-frontend-function"]], "Ivy Experimental API": [[539, "ivy-experimental-api"], [541, "ivy-experimental-api"]], "Setting Up": [[540, "setting-up"]], "Forking and cloning the repo": [[540, "forking-and-cloning-the-repo"]], "PyCharm": [[540, "pycharm"]], "Virtual environments - No Docker": [[540, "virtual-environments-no-docker"]], "Using miniconda": [[540, "using-miniconda"]], "Using venv": [[540, "using-venv"]], "Docker Interpreter with PyCharm": [[540, "docker-interpreter-with-pycharm"]], "Windows": [[540, "windows"], [540, "id6"]], "MacOS": [[540, "macos"]], "Ubuntu": [[540, "ubuntu"], [540, "id8"]], "Setting Up Testing": [[540, "setting-up-testing"]], "More Detailed Hypothesis Logs": [[540, "more-detailed-hypothesis-logs"]], "Setting up for Free": [[540, "setting-up-for-free"]], "GitHub Codespaces": [[540, "github-codespaces"]], "Pre-Commit": [[540, "pre-commit"]], "The Basics": [[541, "the-basics"]], "Getting Help": [[541, "getting-help"]], "ToDo List Issues": [[541, "todo-list-issues"]], "Managing Your Fork": [[541, "managing-your-fork"]], "Who To Ask": [[541, "who-to-ask"]], "With Command Line:": [[541, "with-command-line"]], "With Browser:": [[541, "with-browser"]], "Pull Requests": [[541, "pull-requests"]], "Small Commits Often": [[541, "small-commits-often"]], "Interactive Ivy Docker Container": [[541, "interactive-ivy-docker-container"]], "Running Tests Locally": [[541, "running-tests-locally"]], "With Docker": [[541, "with-docker"]], "Getting the most out of IDE": [[541, "getting-the-most-out-of-ide"]], "with PyCharm": [[541, "with-pycharm"]], "Deep Dive": [[542, "deep-dive"]], "Array API Tests": [[543, "array-api-tests"], [548, "array-api-tests"]], "Running the Tests": [[543, "running-the-tests"]], "Using Terminal": [[543, "using-terminal"]], "Using the IDE": [[543, "using-the-ide"]], "Regenerating Test Failures": [[543, "regenerating-test-failures"]], "Test Skipping": [[543, "test-skipping"]], "Arrays": [[544, "arrays"]], "Native Array": [[544, "native-array"]], "Ivy Array": [[544, "ivy-array"], [568, "ivy-array"]], "Array Handling": [[544, "array-handling"]], "Integrating custom classes with Ivy": [[544, "integrating-custom-classes-with-ivy"]], "Backend Setting": [[545, "backend-setting"]], "Backend and Frontend Version Support": [[545, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[546, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[546, "how-the-doc-builder-is-being-run"]], "The convenience script": [[546, "the-convenience-script"]], "Options": [[546, "options"]], "The Docker image": [[546, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[546, "how-ivy-s-docs-is-structured"]], "index.rst": [[546, "index-rst"]], "partial_conf.py": [[546, "partial-conf-py"]], "prebuild.sh": [[546, "prebuild-sh"]], "Custom Extensions": [[546, "custom-extensions"]], "custom_autosummary": [[546, "custom-autosummary"]], ":hide-table:": [[546, "hide-table"]], ":include:": [[546, "include"]], ":fix-directory:": [[546, "fix-directory"]], ":substitute-caption:": [[546, "substitute-caption"]], "custom_builder": [[546, "custom-builder"]], "discussion_linker": [[546, "discussion-linker"]], "skippable_function": [[546, "skippable-function"]], "Containers": [[547, "containers"]], "Container Instance Methods": [[547, "container-instance-methods"]], "Container Static Methods": [[547, "container-static-methods"]], "API Static Methods": [[547, "api-static-methods"]], "API Instance Methods": [[547, "api-instance-methods"]], "API Special Methods": [[547, "api-special-methods"]], "Nestable Functions": [[547, "nestable-functions"], [555, "nestable-functions"], [556, "nestable-functions"]], "Continuous Integration": [[548, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[548, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[548, "ivy-tests"], [562, "ivy-tests"]], "Implementation": [[548, "implementation"]], "A Top-Down View": [[548, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[548, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[548, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[548, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[548, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[548, "determine-test-coverage-workflow"]], "Multiple Runners": [[548, "multiple-runners"]], "Race Condition": [[548, "race-condition"]], "Periodic Testing": [[548, "periodic-testing"]], "Manually Dispatched Workflows": [[548, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[548, "ci-pipeline"]], "Push": [[548, "push"]], "Pull Request": [[548, "pull-request"]], "Dashboard": [[548, "dashboard"]], "Data Types": [[549, "data-types"]], "Data Type Module": [[549, "data-type-module"]], "Data Type Promotion": [[549, "data-type-promotion"]], "Arguments in other Functions": [[549, "arguments-in-other-functions"], [550, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[549, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[549, "backend-data-type-bugs"]], "Superset Data Type Support": [[549, "superset-data-type-support"]], "Devices": [[550, "devices"]], "Device Module": [[550, "device-module"]], "Docstring Examples": [[551, "docstring-examples"]], "ivy.tan": [[551, "ivy-tan"]], "ivy.roll": [[551, "ivy-roll"]], "ivy.add": [[551, "ivy-add"]], "Docstrings": [[552, "docstrings"]], "Exception Handling": [[553, "exception-handling"]], "Ivy Exception Class": [[553, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[553, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[553, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[553, "handle-exceptions-decorator"]], "Assertion Function": [[553, "assertion-function"]], "Formatting": [[554, "formatting"]], "Lint Checks": [[554, "lint-checks"]], "Pre-Commit Hook": [[554, "pre-commit-hook"]], "Function Arguments": [[555, "function-arguments"]], "Positional and Keyword Arguments": [[555, "positional-and-keyword-arguments"]], "Input Arrays": [[555, "input-arrays"]], "out Argument": [[555, "out-argument"]], "dtype and device arguments": [[555, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[555, "numbers-in-operator-functions"]], "Integer Sequences": [[555, "integer-sequences"]], "Function Types": [[556, "function-types"]], "Primary Functions": [[556, "primary-functions"]], "Compositional Functions": [[556, "compositional-functions"]], "Mixed Functions": [[556, "mixed-functions"]], "Standalone Functions": [[556, "standalone-functions"]], "Convenience Functions": [[556, "convenience-functions"]], "Function Wrapping": [[557, "function-wrapping"]], "Overview": [[558, "overview"]], "Example Usage of the Gradient API": [[558, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[558, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[558, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[558, "custom-gradient-functions"]], "Design of the Gradient API": [[558, "design-of-the-gradient-api"]], "Our policy on gradients": [[558, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[558, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[558, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[558, "framework-specific-considerations"]], "Inplace Updates": [[559, "inplace-updates"]], "out argument": [[559, "out-argument"]], "copy argument": [[559, "copy-argument"]], "Ivy Frontends": [[560, "ivy-frontends"]], "The Frontend Basics": [[560, "the-frontend-basics"]], "Unused Arguments": [[560, "unused-arguments"]], "Compositions": [[560, "compositions"]], "Missing Ivy Functions": [[560, "missing-ivy-functions"]], "Temporary Compositions": [[560, "temporary-compositions"]], "Supported Data Types and Devices": [[560, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[560, "id6"]], "Frontend Data Type Promotion Rules": [[560, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[560, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[560, "frontends-duplicate-policy"]], "Ivy Frontend Tests": [[561, "ivy-frontend-tests"]], "Frontend Test Examples": [[561, "frontend-test-examples"]], "ivy.tan()": [[561, "ivy-tan"]], "ivy.full()": [[561, "ivy-full"]], "Testing Without Using Tests Values": [[561, "testing-without-using-tests-values"]], "Alias functions": [[561, "alias-functions"]], "Frontend Instance Method Tests": [[561, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[561, "frontend-instance-method-test-examples"]], "ivy.add()": [[561, "ivy-add"]], "Hypothesis Helpers": [[561, "hypothesis-helpers"]], "Testing Pipeline": [[562, "testing-pipeline"]], "Hypothesis": [[562, "id2"]], "Data Generation": [[562, "id3"]], "Writing your own strategy": [[562, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[562, "writing-hypothesis-test"]], "Ivy Test Decorators": [[562, "ivy-test-decorators"]], "Writing Ivy Tests": [[562, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[562, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[562, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[562, "how-to-write-hypothesis-tests-effectively"]], "Bonus: Hypothesis\u2019 Extended Features": [[562, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[562, "self-consistent-and-explicit-testing"]], "test_array_function": [[562, "id6"]], "Running Ivy Tests": [[562, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[562, "re-running-failed-ivy-tests"]], "Navigating the Code": [[563, "navigating-the-code"]], "Categorization": [[563, "categorization"]], "Submodule Design": [[563, "submodule-design"]], "Ivy API": [[563, "ivy-api"]], "Backend API": [[563, "backend-api"]], "Submodule Helper Functions": [[563, "submodule-helper-functions"]], "Version Pinning": [[563, "version-pinning"]], "Superset Behaviour": [[564, "superset-behaviour"]], "Extending the Standard": [[564, "extending-the-standard"]], "What is the Superset?": [[564, "what-is-the-superset"]], "A Non-Duplicate Superset": [[564, "a-non-duplicate-superset"]], "What is not the Superset?": [[564, "what-is-not-the-superset"]], "When the Superset is Too Much": [[564, "when-the-superset-is-too-much"]], "Balancing Generalization with Efficiency": [[564, "balancing-generalization-with-efficiency"]], "More Examples": [[564, "more-examples"]], "Maximizing Usage of Native Functionality": [[564, "maximizing-usage-of-native-functionality"]], "Design": [[565, "design"]], "Building Blocks": [[566, "building-blocks"]], "Backend Functional APIs \u2705": [[566, "backend-functional-apis"]], "Ivy Functional API \u2705": [[566, "ivy-functional-api"]], "Backend Handler \u2705": [[566, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[566, "graph-compiler"]], "Ivy as a Framework": [[567, "ivy-as-a-framework"]], "The Array Class": [[568, "the-array-class"]], "Unifying Operators": [[568, "unifying-operators"]], "API Monkey Patching": [[568, "api-monkey-patching"]], "Instance Methods": [[568, "instance-methods"]], "Ivy Container": [[569, "ivy-container"]], "Construction": [[569, "construction"]], "Representation": [[569, "representation"]], "Recursive Methods": [[569, "recursive-methods"]], "Built-ins": [[569, "built-ins"]], "Access": [[569, "access"]], "Saving and Loading": [[569, "saving-and-loading"]], "Comparisons": [[569, "comparisons"]], "Customized Representations": [[569, "customized-representations"]], "Use Cases": [[569, "use-cases"]], "Compartmentalization": [[569, "compartmentalization"]], "Configuration": [[569, "configuration"]], "Data loading": [[569, "data-loading"]], "Network weights": [[569, "network-weights"]], "Ivy Stateful API": [[570, "ivy-stateful-api"]], "Modules": [[570, "modules"]], "Ivy as a Transpiler": [[571, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[571, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[571, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[571, "converting-network-models"]], "Extensions": [[572, "extensions"]], "Ivy Mechanics": [[573, "ivy-mechanics"]], "Ivy Vision": [[573, "ivy-vision"]], "Ivy Robot": [[573, "ivy-robot"]], "Ivy Gym": [[573, "ivy-gym"]], "Ivy Memory": [[573, "ivy-memory"]], "FAQ": [[574, "faq"]], "Maintaining Backend Versions": [[574, "maintaining-backend-versions"]], "Dynamic Sizes": [[574, "dynamic-sizes"]], "Type and Shape Checking": [[574, "type-and-shape-checking"]], "GPU handling": [[574, "gpu-handling"]], "Model Deployment": [[574, "model-deployment"]], "Dynamic Control Flow": [[574, "dynamic-control-flow"]], "Auto-Differentiation": [[574, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[574, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[574, "support-for-functions"]], "Alternative Data Structures": [[574, "alternative-data-structures"]], "Custom Operations": [[574, "custom-operations"]], "The Pipeline": [[574, "the-pipeline"]], "State": [[574, "state"]], "Glossary": [[575, "glossary"]], "Related Work": [[576, "related-work"]], "API Standards": [[577, "api-standards"], [586, "api-standards"]], "Array API Standard": [[577, "id1"]], "Compiler Infrastructure": [[578, "compiler-infrastructure"], [586, "compiler-infrastructure"]], "LLVM": [[578, "id1"]], "MLIR": [[578, "id2"]], "OneAPI": [[578, "id3"]], "Exchange Formats": [[579, "exchange-formats"], [586, "exchange-formats"]], "ONNX onnx": [[579, "onnx-onnx"]], "NNEF nnef": [[579, "nnef-nnef"]], "CoreML coreml": [[579, "coreml-coreml"]], "Frameworks": [[580, "frameworks"], [586, "frameworks"]], "MATLAB matlab": [[580, "matlab-matlab"]], "SciPy scipy": [[580, "scipy-scipy"]], "Torch torch": [[580, "torch-torch"]], "NumPy numpy": [[580, "numpy-numpy"]], "SciKit Learn scikit-learn": [[580, "scikit-learn-scikit-learn"]], "Theano theano": [[580, "theano-theano"]], "Pandas pandas": [[580, "pandas-pandas"]], "Julia julia": [[580, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[580, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[580, "caffe-caffe"]], "Chainer chainer": [[580, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[580, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[580, "mxnet-mxnet"]], "CNTK cntk": [[580, "cntk-cntk"]], "PyTorch pytorch": [[580, "pytorch-pytorch"]], "Flux flux": [[580, "flux-flux"]], "JAX jax": [[580, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[580, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[580, "dex-language-dex-language"]], "Graph Tracers": [[581, "graph-tracers"], [586, "graph-tracers"]], "tf.Graph": [[581, "tf-graph"]], "Jaxpr": [[581, "jaxpr"]], "torch.jit": [[581, "torch-jit"]], "torch.fx": [[581, "torch-fx"]], "ML-Unifying Companies": [[582, "ml-unifying-companies"], [586, "ml-unifying-companies"]], "Quansight": [[582, "id1"]], "Modular": [[582, "id2"]], "OctoML": [[582, "id3"]], "Multi-Vendor Compiler Frameworks": [[583, "multi-vendor-compiler-frameworks"], [586, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[583, "apache-tvm"]], "XLA": [[583, "xla"]], "GCC": [[583, "gcc"]], "Vendor-Specific APIs": [[584, "vendor-specific-apis"], [586, "vendor-specific-apis"]], "TensorRT tensorrt": [[584, "tensorrt-tensorrt"]], "CUDA cuda": [[584, "cuda-cuda"]], "Vendor-Specific Compilers": [[585, "vendor-specific-compilers"], [586, "vendor-specific-compilers"]], "ICC": [[585, "id1"]], "ICX": [[585, "icx"]], "NVCC": [[585, "nvcc"]], "What does Ivy Add?": [[586, "what-does-ivy-add"]], "Wrapper Frameworks": [[586, "wrapper-frameworks"], [587, "wrapper-frameworks"]], "EagerPy eagerpy": [[587, "eagerpy-eagerpy"]], "Keras keras": [[587, "keras-keras"]], "Thinc thinc": [[587, "thinc-thinc"]], "TensorLy tensorly": [[587, "tensorly-tensorly"]], "NeuroPod": [[587, "id1"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "ivy.data_classes.array.activations": [[0, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[0, "module-ivy.data_classes.array.activations"], [1, "module-ivy.data_classes.array.conversions"], [2, "module-ivy.data_classes.array.creation"], [3, "module-ivy.data_classes.array.data_type"], [4, "module-ivy.data_classes.array.device"], [5, "module-ivy.data_classes.array.elementwise"], [6, "module-ivy.data_classes.array.experimental"], [6, "module-ivy.data_classes.array.experimental.activations"], [6, "module-ivy.data_classes.array.experimental.conversions"], [6, "module-ivy.data_classes.array.experimental.creation"], [6, "module-ivy.data_classes.array.experimental.data_type"], [6, "module-ivy.data_classes.array.experimental.device"], [6, "module-ivy.data_classes.array.experimental.elementwise"], [6, "module-ivy.data_classes.array.experimental.general"], [6, "module-ivy.data_classes.array.experimental.gradients"], [6, "module-ivy.data_classes.array.experimental.image"], [6, "module-ivy.data_classes.array.experimental.layers"], [6, "module-ivy.data_classes.array.experimental.linear_algebra"], [6, "module-ivy.data_classes.array.experimental.losses"], [6, "module-ivy.data_classes.array.experimental.manipulation"], [6, "module-ivy.data_classes.array.experimental.norms"], [6, "module-ivy.data_classes.array.experimental.random"], [6, "module-ivy.data_classes.array.experimental.searching"], [6, "module-ivy.data_classes.array.experimental.set"], [6, "module-ivy.data_classes.array.experimental.sorting"], [6, "module-ivy.data_classes.array.experimental.statistical"], [6, "module-ivy.data_classes.array.experimental.utility"], [7, "module-ivy.data_classes.array.general"], [8, "module-ivy.data_classes.array.gradients"], [9, "module-ivy.data_classes.array.image"], [10, "module-ivy.data_classes.array.layers"], [11, "module-ivy.data_classes.array.linear_algebra"], [12, "module-ivy.data_classes.array.losses"], [13, "module-ivy.data_classes.array.manipulation"], [14, "module-ivy.data_classes.array.norms"], [15, "module-ivy.data_classes.array.random"], [16, "module-ivy.data_classes.array.searching"], [17, "module-ivy.data_classes.array.set"], [18, "module-ivy.data_classes.array.sorting"], [19, "module-ivy.data_classes.array.statistical"], [20, "module-ivy.data_classes.array.utility"], [21, "module-ivy.data_classes.array.wrapping"], [22, "module-ivy.data_classes.container.activations"], [23, "module-ivy.data_classes.container.base"], [24, "module-ivy.data_classes.container.conversions"], [25, "module-ivy.data_classes.container.creation"], [26, "module-ivy.data_classes.container.data_type"], [27, "module-ivy.data_classes.container.device"], [28, "module-ivy.data_classes.container.elementwise"], [29, "module-ivy.data_classes.container.experimental"], [29, "module-ivy.data_classes.container.experimental.activations"], [29, "module-ivy.data_classes.container.experimental.conversions"], [29, "module-ivy.data_classes.container.experimental.creation"], [29, "module-ivy.data_classes.container.experimental.data_type"], [29, "module-ivy.data_classes.container.experimental.device"], [29, "module-ivy.data_classes.container.experimental.elementwise"], [29, "module-ivy.data_classes.container.experimental.general"], [29, "module-ivy.data_classes.container.experimental.gradients"], [29, "module-ivy.data_classes.container.experimental.image"], [29, "module-ivy.data_classes.container.experimental.layers"], [29, "module-ivy.data_classes.container.experimental.linear_algebra"], [29, "module-ivy.data_classes.container.experimental.losses"], [29, "module-ivy.data_classes.container.experimental.manipulation"], [29, "module-ivy.data_classes.container.experimental.norms"], [29, "module-ivy.data_classes.container.experimental.random"], [29, "module-ivy.data_classes.container.experimental.searching"], [29, "module-ivy.data_classes.container.experimental.set"], [29, "module-ivy.data_classes.container.experimental.sorting"], [29, "module-ivy.data_classes.container.experimental.statistical"], [29, "module-ivy.data_classes.container.experimental.utility"], [30, "module-ivy.data_classes.container.general"], [31, "module-ivy.data_classes.container.gradients"], [32, "module-ivy.data_classes.container.image"], [33, "module-ivy.data_classes.container.layers"], [34, "module-ivy.data_classes.container.linear_algebra"], [35, "module-ivy.data_classes.container.losses"], [36, "module-ivy.data_classes.container.manipulation"], [37, "module-ivy.data_classes.container.norms"], [38, "module-ivy.data_classes.container.random"], [39, "module-ivy.data_classes.container.searching"], [40, "module-ivy.data_classes.container.set"], [41, "module-ivy.data_classes.container.sorting"], [42, "module-ivy.data_classes.container.statistical"], [43, "module-ivy.data_classes.container.utility"], [44, "module-ivy.data_classes.container.wrapping"], [45, "module-ivy.data_classes.array.array"], [46, "module-ivy.data_classes.container.container"], [48, "module-ivy.stateful.activations"], [49, "module-ivy.stateful.converters"], [50, "module-ivy.stateful.helpers"], [51, "module-ivy.stateful.initializers"], [52, "module-ivy.stateful.layers"], [53, "module-ivy.stateful.module"], [54, "module-ivy.stateful.norms"], [55, "module-ivy.stateful.optimizers"], [56, "module-ivy.stateful.sequential"], [357, "module-ivy.functional.ivy.activations"], [358, "module-ivy.functional.ivy.constants"], [359, "module-ivy.functional.ivy.control_flow_ops"], [360, "module-ivy.functional.ivy.creation"], [361, "module-ivy.functional.ivy.data_type"], [362, "module-ivy.functional.ivy.device"], [363, "module-ivy.functional.ivy.elementwise"], [364, "module-ivy.functional.ivy.experimental"], [365, "module-ivy.functional.ivy.general"], [366, "module-ivy.functional.ivy.gradients"], [367, "module-ivy.functional.ivy.layers"], [368, "module-ivy.functional.ivy.linear_algebra"], [369, "module-ivy.functional.ivy.losses"], [370, "module-ivy.functional.ivy.manipulation"], [371, "module-ivy.functional.ivy.meta"], [372, "module-ivy.functional.ivy.nest"], [373, "module-ivy.functional.ivy.norms"], [374, "module-ivy.functional.ivy.random"], [375, "module-ivy.functional.ivy.searching"], [376, "module-ivy.functional.ivy.set"], [377, "module-ivy.functional.ivy.sorting"], [378, "module-ivy.functional.ivy.statistical"], [379, "module-ivy.functional.ivy.utility"], [513, "module-ivy.nested_array.nested_array"], [514, "module-ivy_tests.test_ivy.helpers.assertions"], [515, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [516, "module-ivy_tests.test_ivy.helpers.function_testing"], [517, "module-ivy_tests.test_ivy.helpers.globals"], [518, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [519, "module-ivy_tests.test_ivy.helpers.structs"], [520, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [521, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [524, "module-ivy.utils.assertions"], [525, "module-ivy.utils.backend"], [526, "module-ivy.utils.dynamic_import"], [527, "module-ivy.utils.exceptions"], [528, "module-ivy.utils.inspection"], [529, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[1, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[2, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[3, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[4, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[4, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[4, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[4, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[4, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[5, "module-ivy.data_classes.array.elementwise"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[6, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[6, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[6, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[6, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[6, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[6, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[6, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[6, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[6, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[6, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[6, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[6, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[6, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[6, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gcd() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.isin"]], "ivy.data_classes.array.experimental": [[6, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[6, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[6, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[6, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[6, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[6, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[6, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[6, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[6, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[6, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[6, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[6, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[6, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[6, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[6, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[6, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[6, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[6, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[6, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[6, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[6, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trapz() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.trapz"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "ivy.data_classes.array.general": [[7, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[8, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[9, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[9, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[9, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[10, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[11, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[12, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[13, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[14, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[15, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[15, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[15, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[16, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[17, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[17, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[17, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[18, "module-ivy.data_classes.array.sorting"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[19, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[20, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[21, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[21, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[21, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "ivy.data_classes.container.activations": [[22, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[23, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[23, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[24, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[25, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[26, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[27, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[27, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[28, "module-ivy.data_classes.container.elementwise"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[29, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[29, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[29, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[29, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[29, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[29, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[29, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[29, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[29, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[29, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[29, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[29, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[29, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[29, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.binary_cross_entropy_with_logits"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.isin"]], "ivy.data_classes.container.experimental": [[29, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[29, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[29, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[29, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[29, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[29, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[29, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[29, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[29, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[29, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[29, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[29, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[29, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[29, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[29, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[29, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[29, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[29, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[29, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[29, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[29, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_angle"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.static_binary_cross_entropy_with_logits"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_exp2"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_fft"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmin"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gcd"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_imag"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.static_isin"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lcm"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_logaddexp2"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_msort"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nan_to_num"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_real"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_triu_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.triu_indices"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "ivy.data_classes.container.general": [[30, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[31, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[32, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[32, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[32, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[33, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[34, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[35, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[36, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[37, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[38, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[38, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[39, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[40, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[40, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[40, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[41, "module-ivy.data_classes.container.sorting"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[42, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[43, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[44, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[44, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[44, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[45, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__xor__"]], "data (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.dynamic_backend"]], "ivy.data_classes.array.array": [[45, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.size"]], "container (class in ivy.data_classes.container.container)": [[46, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[46, "module-ivy.data_classes.container.container"]], "geglu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.GELU"]], "leakyrelu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.LeakyReLU"]], "logsoftmax (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.LogSoftmax"]], "mish (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.Mish"]], "relu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.ReLU"]], "softmax (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.Softplus"]], "__init__() (ivy.stateful.activations.geglu method)": [[48, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[48, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[48, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[48, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[48, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[48, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[48, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[48, "ivy.stateful.activations.Softplus.__init__"]], "ivy.stateful.activations": [[48, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[49, "ivy.stateful.converters.ModuleConverters"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[49, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[49, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[50, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[50, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Ones"]], "siren (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[51, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[51, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[51, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[51, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[51, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[51, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[51, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[51, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[51, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[51, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[51, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[51, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[51, "module-ivy.stateful.initializers"]], "conv1d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv3DTranspose"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Dropout"]], "lstm (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Linear"]], "multiheadattention (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.conv1d method)": [[52, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[52, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[52, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[52, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[52, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[52, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[52, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[52, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[52, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[52, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[52, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[52, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[52, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[53, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[53, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[53, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[53, "module-ivy.stateful.module"]], "save_weights() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.show_graph"]], "layernorm (class in ivy.stateful.norms)": [[54, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.layernorm method)": [[54, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[54, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[55, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[55, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[55, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[55, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[55, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[55, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[55, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[55, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[55, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[55, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[55, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[55, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[55, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[56, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[56, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[56, "module-ivy.stateful.sequential"]], "deserialize() (in module ivy)": [[58, "ivy.deserialize"]], "gelu() (in module ivy)": [[59, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "get() (in module ivy)": [[60, "ivy.get"]], "get() (ivy.container method)": [[60, "ivy.Container.get"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "ifelse() (in module ivy)": [[68, "ivy.IfElse"]], "whileloop() (in module ivy)": [[69, "ivy.WhileLoop"]], "if_else() (in module ivy)": [[70, "ivy.if_else"]], "while_loop() (in module ivy)": [[71, "ivy.while_loop"]], "arange() (in module ivy)": [[73, "ivy.arange"]], "array() (in module ivy)": [[74, "ivy.array"]], "asarray() (in module ivy)": [[75, "ivy.asarray"]], "asarray() (ivy.array method)": [[75, "ivy.Array.asarray"]], "asarray_handle_nestable() (in module ivy)": [[76, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[77, "ivy.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[78, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[79, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[79, "ivy.Array.copy_array"]], "empty() (in module ivy)": [[80, "ivy.empty"]], "empty_like() (in module ivy)": [[81, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[81, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[81, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[82, "ivy.eye"]], "from_dlpack() (in module ivy)": [[83, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[83, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[83, "ivy.Container.from_dlpack"]], "full() (in module ivy)": [[84, "ivy.full"]], "full_like() (in module ivy)": [[85, "ivy.full_like"]], "full_like() (ivy.array method)": [[85, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[85, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[86, "ivy.linspace"]], "linspace() (ivy.array method)": [[86, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[86, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[87, "ivy.logspace"]], "logspace() (ivy.array method)": [[87, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[87, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[88, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[88, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[88, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[89, "ivy.native_array"]], "native_array() (ivy.array method)": [[89, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[89, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[90, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[90, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[90, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[91, "ivy.ones"]], "ones_like() (in module ivy)": [[92, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[92, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[92, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[93, "ivy.tril"]], "tril() (ivy.array method)": [[93, "ivy.Array.tril"]], "tril() (ivy.container method)": [[93, "ivy.Container.tril"]], "triu() (in module ivy)": [[94, "ivy.triu"]], "triu() (ivy.array method)": [[94, "ivy.Array.triu"]], "triu() (ivy.container method)": [[94, "ivy.Container.triu"]], "zeros() (in module ivy)": [[95, "ivy.zeros"]], "zeros_like() (in module ivy)": [[96, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[96, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[96, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[106, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[107, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[108, "ivy.astype"]], "astype() (ivy.array method)": [[108, "ivy.Array.astype"]], "astype() (ivy.container method)": [[108, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[109, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[109, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[109, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[110, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[110, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[110, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[111, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[111, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[111, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[112, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[113, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[114, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[115, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[116, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[117, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[118, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[119, "ivy.dtype"]], "dtype() (ivy.array method)": [[119, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[119, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[120, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[121, "ivy.finfo"]], "finfo() (ivy.array method)": [[121, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[121, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[122, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[123, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[124, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[124, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[124, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[125, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[126, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[127, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[127, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[127, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[128, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[128, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[129, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[129, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[129, "ivy.Container.is_float_dtype"]], "is_int_dtype() (in module ivy)": [[130, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[130, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[130, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[131, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[132, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[132, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[132, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[133, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[134, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[135, "ivy.result_type"]], "result_type() (ivy.array method)": [[135, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[135, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[136, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[137, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[138, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[139, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[140, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[141, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[142, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[143, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[144, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[145, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[146, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[147, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[151, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[152, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[153, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[154, "ivy.default_device"]], "dev() (in module ivy)": [[155, "ivy.dev"]], "dev() (ivy.array method)": [[155, "ivy.Array.dev"]], "dev() (ivy.container method)": [[155, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[156, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[157, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[158, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[159, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[160, "ivy.gpu_is_available"]], "num_cpu_cores() (in module ivy)": [[161, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[162, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[163, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[164, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[165, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[166, "ivy.set_default_device"]], "set_split_factor() (in module ivy)": [[167, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[168, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[169, "ivy.split_func_call"]], "to_device() (in module ivy)": [[170, "ivy.to_device"]], "to_device() (ivy.array method)": [[170, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[170, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[171, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[172, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[173, "ivy.unset_default_device"]], "used_mem_on_dev() (in module ivy)": [[174, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[175, "ivy.abs"]], "abs() (ivy.array method)": [[175, "ivy.Array.abs"]], "abs() (ivy.container method)": [[175, "ivy.Container.abs"]], "acos() (in module ivy)": [[176, "ivy.acos"]], "acos() (ivy.array method)": [[176, "ivy.Array.acos"]], "acos() (ivy.container method)": [[176, "ivy.Container.acos"]], "acosh() (in module ivy)": [[177, "ivy.acosh"]], "acosh() (ivy.array method)": [[177, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[177, "ivy.Container.acosh"]], "add() (in module ivy)": [[178, "ivy.add"]], "add() (ivy.array method)": [[178, "ivy.Array.add"]], "add() (ivy.container method)": [[178, "ivy.Container.add"]], "asin() (in module ivy)": [[179, "ivy.asin"]], "asin() (ivy.array method)": [[179, "ivy.Array.asin"]], "asin() (ivy.container method)": [[179, "ivy.Container.asin"]], "asinh() (in module ivy)": [[180, "ivy.asinh"]], "asinh() (ivy.array method)": [[180, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[180, "ivy.Container.asinh"]], "atan() (in module ivy)": [[181, "ivy.atan"]], "atan() (ivy.array method)": [[181, "ivy.Array.atan"]], "atan() (ivy.container method)": [[181, "ivy.Container.atan"]], "atan2() (in module ivy)": [[182, "ivy.atan2"]], "atan2() (ivy.array method)": [[182, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[182, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[183, "ivy.atanh"]], "atanh() (ivy.array method)": [[183, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[183, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[184, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[184, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[184, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[185, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[185, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[185, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[186, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[186, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[186, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[187, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[187, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[187, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[188, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[188, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[188, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[189, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[189, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[189, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[190, "ivy.ceil"]], "ceil() (ivy.array method)": [[190, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[190, "ivy.Container.ceil"]], "cos() (in module ivy)": [[191, "ivy.cos"]], "cos() (ivy.array method)": [[191, "ivy.Array.cos"]], "cos() (ivy.container method)": [[191, "ivy.Container.cos"]], "cosh() (in module ivy)": [[192, "ivy.cosh"]], "cosh() (ivy.array method)": [[192, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[192, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[193, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[193, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[193, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[194, "ivy.divide"]], "divide() (ivy.array method)": [[194, "ivy.Array.divide"]], "divide() (ivy.container method)": [[194, "ivy.Container.divide"]], "equal() (in module ivy)": [[195, "ivy.equal"]], "equal() (ivy.array method)": [[195, "ivy.Array.equal"]], "equal() (ivy.container method)": [[195, "ivy.Container.equal"]], "erf() (in module ivy)": [[196, "ivy.erf"]], "erf() (ivy.array method)": [[196, "ivy.Array.erf"]], "erf() (ivy.container method)": [[196, "ivy.Container.erf"]], "exp() (in module ivy)": [[197, "ivy.exp"]], "exp() (ivy.array method)": [[197, "ivy.Array.exp"]], "exp() (ivy.container method)": [[197, "ivy.Container.exp"]], "expm1() (in module ivy)": [[198, "ivy.expm1"]], "expm1() (ivy.array method)": [[198, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[198, "ivy.Container.expm1"]], "floor() (in module ivy)": [[199, "ivy.floor"]], "floor() (ivy.array method)": [[199, "ivy.Array.floor"]], "floor() (ivy.container method)": [[199, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[200, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[200, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[200, "ivy.Container.floor_divide"]], "fmod() (in module ivy)": [[201, "ivy.fmod"]], "fmod() (ivy.array method)": [[201, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[201, "ivy.Container.fmod"]], "greater() (in module ivy)": [[202, "ivy.greater"]], "greater() (ivy.array method)": [[202, "ivy.Array.greater"]], "greater() (ivy.container method)": [[202, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[203, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[203, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[203, "ivy.Container.greater_equal"]], "isfinite() (in module ivy)": [[204, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[204, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[204, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[205, "ivy.isinf"]], "isinf() (ivy.array method)": [[205, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[205, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[206, "ivy.isnan"]], "isnan() (ivy.array method)": [[206, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[206, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[207, "ivy.isreal"]], "isreal() (ivy.array method)": [[207, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[207, "ivy.Container.isreal"]], "less() (in module ivy)": [[208, "ivy.less"]], "less() (ivy.array method)": [[208, "ivy.Array.less"]], "less() (ivy.container method)": [[208, "ivy.Container.less"]], "less_equal() (in module ivy)": [[209, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[209, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[209, "ivy.Container.less_equal"]], "log() (in module ivy)": [[210, "ivy.log"]], "log() (ivy.array method)": [[210, "ivy.Array.log"]], "log() (ivy.container method)": [[210, "ivy.Container.log"]], "log10() (in module ivy)": [[211, "ivy.log10"]], "log10() (ivy.array method)": [[211, "ivy.Array.log10"]], "log10() (ivy.container method)": [[211, "ivy.Container.log10"]], "log1p() (in module ivy)": [[212, "ivy.log1p"]], "log1p() (ivy.array method)": [[212, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[212, "ivy.Container.log1p"]], "log2() (in module ivy)": [[213, "ivy.log2"]], "log2() (ivy.array method)": [[213, "ivy.Array.log2"]], "log2() (ivy.container method)": [[213, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[214, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[214, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[214, "ivy.Container.logaddexp"]], "logical_and() (in module ivy)": [[215, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[215, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[215, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[216, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[216, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[216, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[217, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[217, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[217, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[218, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[218, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[218, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[219, "ivy.maximum"]], "maximum() (ivy.array method)": [[219, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[219, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[220, "ivy.minimum"]], "minimum() (ivy.array method)": [[220, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[220, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[221, "ivy.multiply"]], "multiply() (ivy.array method)": [[221, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[221, "ivy.Container.multiply"]], "negative() (in module ivy)": [[222, "ivy.negative"]], "negative() (ivy.array method)": [[222, "ivy.Array.negative"]], "negative() (ivy.container method)": [[222, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[223, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[223, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[223, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[224, "ivy.positive"]], "positive() (ivy.array method)": [[224, "ivy.Array.positive"]], "positive() (ivy.container method)": [[224, "ivy.Container.positive"]], "pow() (in module ivy)": [[225, "ivy.pow"]], "pow() (ivy.array method)": [[225, "ivy.Array.pow"]], "pow() (ivy.container method)": [[225, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[226, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[226, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[226, "ivy.Container.rad2deg"]], "reciprocal() (in module ivy)": [[227, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[227, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[227, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[228, "ivy.remainder"]], "remainder() (ivy.array method)": [[228, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[228, "ivy.Container.remainder"]], "round() (in module ivy)": [[229, "ivy.round"]], "round() (ivy.array method)": [[229, "ivy.Array.round"]], "round() (ivy.container method)": [[229, "ivy.Container.round"]], "sign() (in module ivy)": [[230, "ivy.sign"]], "sign() (ivy.array method)": [[230, "ivy.Array.sign"]], "sign() (ivy.container method)": [[230, "ivy.Container.sign"]], "sin() (in module ivy)": [[231, "ivy.sin"]], "sin() (ivy.array method)": [[231, "ivy.Array.sin"]], "sin() (ivy.container method)": [[231, "ivy.Container.sin"]], "sinh() (in module ivy)": [[232, "ivy.sinh"]], "sinh() (ivy.array method)": [[232, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[232, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[233, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[233, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[233, "ivy.Container.sqrt"]], "square() (in module ivy)": [[234, "ivy.square"]], "square() (ivy.array method)": [[234, "ivy.Array.square"]], "square() (ivy.container method)": [[234, "ivy.Container.square"]], "subtract() (in module ivy)": [[235, "ivy.subtract"]], "subtract() (ivy.array method)": [[235, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[235, "ivy.Container.subtract"]], "tan() (in module ivy)": [[236, "ivy.tan"]], "tan() (ivy.array method)": [[236, "ivy.Array.tan"]], "tan() (ivy.container method)": [[236, "ivy.Container.tan"]], "tanh() (in module ivy)": [[237, "ivy.tanh"]], "tanh() (ivy.array method)": [[237, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[237, "ivy.Container.tanh"]], "trunc() (in module ivy)": [[238, "ivy.trunc"]], "trunc() (ivy.array method)": [[238, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[238, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[239, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[239, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[239, "ivy.Container.trunc_divide"]], "all_equal() (in module ivy)": [[248, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[248, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[248, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[249, "ivy.arg_info"]], "arg_names() (in module ivy)": [[250, "ivy.arg_names"]], "array_equal() (in module ivy)": [[251, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[251, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[251, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[252, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[252, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[252, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[253, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[254, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[254, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[254, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[255, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[255, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[255, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[256, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[257, "ivy.current_backend_str"]], "default() (in module ivy)": [[258, "ivy.default"]], "default() (ivy.array method)": [[258, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[259, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[259, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[259, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[260, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[260, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[260, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[261, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[261, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[261, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[262, "ivy.exists"]], "exists() (ivy.array method)": [[262, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[263, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[263, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[263, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[264, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[265, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[266, "ivy.gather"]], "gather() (ivy.array method)": [[266, "ivy.Array.gather"]], "gather() (ivy.container method)": [[266, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[267, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[267, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[267, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[268, "ivy.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy)": [[269, "ivy.get_array_mode"]], "get_exception_trace_mode() (in module ivy)": [[270, "ivy.get_exception_trace_mode"]], "get_item() (in module ivy)": [[271, "ivy.get_item"]], "get_min_base() (in module ivy)": [[272, "ivy.get_min_base"]], "get_min_denominator() (in module ivy)": [[273, "ivy.get_min_denominator"]], "get_nestable_mode() (in module ivy)": [[274, "ivy.get_nestable_mode"]], "get_num_dims() (in module ivy)": [[275, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[275, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[275, "ivy.Container.get_num_dims"]], "get_queue_timeout() (in module ivy)": [[276, "ivy.get_queue_timeout"]], "get_referrers_recursive() (in module ivy)": [[277, "ivy.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy)": [[278, "ivy.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy)": [[279, "ivy.get_tmp_dir"]], "has_nans() (in module ivy)": [[280, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[280, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[280, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[281, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[282, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[282, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[282, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[283, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[283, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[283, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[284, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[284, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[284, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[285, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[286, "ivy.is_array"]], "is_array() (ivy.array method)": [[286, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[286, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[287, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[287, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[287, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[288, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[288, "ivy.Array.is_ivy_container"]], "is_native_array() (in module ivy)": [[289, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[289, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[289, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[290, "ivy.isin"]], "isin() (ivy.array method)": [[290, "ivy.Array.isin"]], "isin() (ivy.container method)": [[290, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[291, "ivy.isscalar"]], "match_kwargs() (in module ivy)": [[292, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[293, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[294, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[295, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[296, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[296, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[296, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[297, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[297, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[297, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[298, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[299, "ivy.set_exception_trace_mode"]], "set_min_base() (in module ivy)": [[300, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[301, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[302, "ivy.set_nestable_mode"]], "set_queue_timeout() (in module ivy)": [[303, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[304, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[305, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[306, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[307, "ivy.shape"]], "shape() (ivy.array method)": [[307, "ivy.Array.shape"]], "shape_array_mode() (in module ivy)": [[308, "ivy.shape_array_mode"]], "stable_divide() (in module ivy)": [[309, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[309, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[309, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[310, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[310, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[310, "ivy.Container.stable_pow"]], "supports_inplace_updates() (in module ivy)": [[311, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[311, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[311, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[312, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[313, "ivy.to_list"]], "to_list() (ivy.array method)": [[313, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[313, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[314, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[315, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[315, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[315, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[316, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[316, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[316, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[317, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[318, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[319, "ivy.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy)": [[320, "ivy.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy)": [[321, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[322, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[323, "ivy.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy)": [[324, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[324, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[324, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[325, "ivy.vmap"]], "adam_step() (in module ivy)": [[343, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[343, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[343, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[344, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[344, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[344, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[345, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[346, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[347, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[347, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[347, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[348, "ivy.jac"]], "lamb_update() (in module ivy)": [[349, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[349, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[349, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[350, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[350, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[350, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[351, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[351, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[351, "ivy.Container.optimizer_update"]], "set_with_grads() (in module ivy)": [[352, "ivy.set_with_grads"]], "stop_gradient() (in module ivy)": [[353, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[353, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[353, "ivy.Container.stop_gradient"]], "unset_with_grads() (in module ivy)": [[354, "ivy.unset_with_grads"]], "value_and_grad() (in module ivy)": [[355, "ivy.value_and_grad"]], "with_grads() (in module ivy)": [[356, "ivy.with_grads"]], "deserialize() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.deserialize"]], "gelu() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.gelu"]], "get() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.get"]], "ivy.functional.ivy.activations": [[357, "module-ivy.functional.ivy.activations"]], "leaky_relu() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.leaky_relu"]], "log_softmax() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.log_softmax"]], "mish() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.mish"]], "relu() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.relu"]], "sigmoid() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.sigmoid"]], "softmax() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.softmax"]], "softplus() (in module ivy.functional.ivy.activations)": [[357, "ivy.functional.ivy.activations.softplus"]], "e (in module ivy.functional.ivy.constants)": [[358, "ivy.functional.ivy.constants.e"]], "inf (in module ivy.functional.ivy.constants)": [[358, "ivy.functional.ivy.constants.inf"]], "ivy.functional.ivy.constants": [[358, "module-ivy.functional.ivy.constants"]], "nan (in module ivy.functional.ivy.constants)": [[358, "ivy.functional.ivy.constants.nan"]], "newaxis (in module ivy.functional.ivy.constants)": [[358, "ivy.functional.ivy.constants.newaxis"]], "pi (in module ivy.functional.ivy.constants)": [[358, "ivy.functional.ivy.constants.pi"]], "ifelse() (in module ivy.functional.ivy.control_flow_ops)": [[359, "ivy.functional.ivy.control_flow_ops.IfElse"]], "whileloop() (in module ivy.functional.ivy.control_flow_ops)": [[359, "ivy.functional.ivy.control_flow_ops.WhileLoop"]], "if_else() (in module ivy.functional.ivy.control_flow_ops)": [[359, "ivy.functional.ivy.control_flow_ops.if_else"]], "ivy.functional.ivy.control_flow_ops": [[359, "module-ivy.functional.ivy.control_flow_ops"]], "while_loop() (in module ivy.functional.ivy.control_flow_ops)": [[359, "ivy.functional.ivy.control_flow_ops.while_loop"]], "nestedsequence (class in ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.NestedSequence"]], "__init__() (ivy.functional.ivy.creation.nestedsequence method)": [[360, "ivy.functional.ivy.creation.NestedSequence.__init__"]], "arange() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.arange"]], "array() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.array"]], "asarray() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.asarray"]], "asarray_handle_nestable() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.copy_array"]], "empty() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.empty"]], "empty_like() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.empty_like"]], "eye() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.eye"]], "from_dlpack() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.from_dlpack"]], "full() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.full"]], "full_like() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.full_like"]], "ivy.functional.ivy.creation": [[360, "module-ivy.functional.ivy.creation"]], "linspace() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.linspace"]], "logspace() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.logspace"]], "meshgrid() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.meshgrid"]], "native_array() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.native_array"]], "one_hot() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.one_hot"]], "ones() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.ones"]], "ones_like() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.ones_like"]], "tril() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.tril"]], "triu() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.triu"]], "zeros() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.zeros"]], "zeros_like() (in module ivy.functional.ivy.creation)": [[360, "ivy.functional.ivy.creation.zeros_like"]], "defaultcomplexdtype (class in ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.DefaultComplexDtype"]], "defaultdtype (class in ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.DefaultDtype"]], "defaultfloatdtype (class in ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.DefaultFloatDtype"]], "defaultintdtype (class in ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.DefaultIntDtype"]], "defaultuintdtype (class in ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.DefaultUintDtype"]], "__init__() (ivy.functional.ivy.data_type.defaultcomplexdtype method)": [[361, "ivy.functional.ivy.data_type.DefaultComplexDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultdtype method)": [[361, "ivy.functional.ivy.data_type.DefaultDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultfloatdtype method)": [[361, "ivy.functional.ivy.data_type.DefaultFloatDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultintdtype method)": [[361, "ivy.functional.ivy.data_type.DefaultIntDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultuintdtype method)": [[361, "ivy.functional.ivy.data_type.DefaultUintDtype.__init__"]], "as_ivy_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.as_ivy_dtype"]], "as_native_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.as_native_dtype"]], "astype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.astype"]], "broadcast_arrays() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.broadcast_arrays"]], "broadcast_to() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.broadcast_to"]], "can_cast() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.can_cast"]], "check_float() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.check_float"]], "closest_valid_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.closest_valid_dtype"]], "default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.default_complex_dtype"]], "default_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.default_dtype"]], "default_float_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.default_float_dtype"]], "default_int_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.default_int_dtype"]], "default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.default_uint_dtype"]], "dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.dtype"]], "dtype_bits() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.dtype_bits"]], "finfo() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.finfo"]], "function_supported_dtypes() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.function_unsupported_dtypes"]], "iinfo() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.iinfo"]], "infer_default_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.infer_default_dtype"]], "invalid_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.invalid_dtype"]], "is_bool_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_bool_dtype"]], "is_complex_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_complex_dtype"]], "is_float_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_float_dtype"]], "is_int_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_int_dtype"]], "is_native_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_native_dtype"]], "is_uint_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.is_uint_dtype"]], "ivy.functional.ivy.data_type": [[361, "module-ivy.functional.ivy.data_type"]], "promote_types() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.promote_types"]], "promote_types_of_inputs() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.promote_types_of_inputs"]], "result_type() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.result_type"]], "set_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.set_default_complex_dtype"]], "set_default_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.set_default_dtype"]], "set_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.unset_default_uint_dtype"]], "valid_dtype() (in module ivy.functional.ivy.data_type)": [[361, "ivy.functional.ivy.data_type.valid_dtype"]], "defaultdevice (class in ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.DefaultDevice"]], "profiler (class in ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.Profiler"]], "__enter__() (ivy.functional.ivy.device.defaultdevice method)": [[362, "ivy.functional.ivy.device.DefaultDevice.__enter__"]], "__exit__() (ivy.functional.ivy.device.defaultdevice method)": [[362, "ivy.functional.ivy.device.DefaultDevice.__exit__"]], "__init__() (ivy.functional.ivy.device.defaultdevice method)": [[362, "ivy.functional.ivy.device.DefaultDevice.__init__"]], "__init__() (ivy.functional.ivy.device.profiler method)": [[362, "ivy.functional.ivy.device.Profiler.__init__"]], "as_ivy_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.as_ivy_dev"]], "as_native_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.clear_cached_mem_on_dev"]], "default_device() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.default_device"]], "dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.dev"]], "dev_util() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.dev_util"]], "function_supported_devices() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.function_supported_devices"]], "function_unsupported_devices() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.gpu_is_available"]], "ivy.functional.ivy.device": [[362, "module-ivy.functional.ivy.device"]], "num_cpu_cores() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.num_cpu_cores"]], "num_gpus() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.set_default_device"]], "set_split_factor() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.set_split_factor"]], "split_factor() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.split_factor"]], "split_func_call() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.split_func_call"]], "start() (ivy.functional.ivy.device.profiler method)": [[362, "ivy.functional.ivy.device.Profiler.start"]], "stop() (ivy.functional.ivy.device.profiler method)": [[362, "ivy.functional.ivy.device.Profiler.stop"]], "to_device() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.to_device"]], "total_mem_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.total_mem_on_dev"]], "tpu_is_available() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.tpu_is_available"]], "unset_default_device() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.unset_default_device"]], "used_mem_on_dev() (in module ivy.functional.ivy.device)": [[362, "ivy.functional.ivy.device.used_mem_on_dev"]], "abs() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.abs"]], "acos() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.acos"]], "acosh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.acosh"]], "add() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.add"]], "asin() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.asin"]], "asinh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.asinh"]], "atan() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.atan"]], "atan2() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.atan2"]], "atanh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.atanh"]], "bitwise_and() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_and"]], "bitwise_invert() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_invert"]], "bitwise_left_shift() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_left_shift"]], "bitwise_or() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_or"]], "bitwise_right_shift() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_right_shift"]], "bitwise_xor() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.bitwise_xor"]], "ceil() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.ceil"]], "cos() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.cos"]], "cosh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.cosh"]], "deg2rad() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.deg2rad"]], "divide() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.divide"]], "equal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.equal"]], "erf() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.erf"]], "exp() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.exp"]], "expm1() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.expm1"]], "floor() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.floor"]], "floor_divide() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.floor_divide"]], "fmod() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.fmod"]], "greater() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.greater"]], "greater_equal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.greater_equal"]], "isfinite() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.isfinite"]], "isinf() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.isinf"]], "isnan() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.isnan"]], "isreal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.isreal"]], "ivy.functional.ivy.elementwise": [[363, "module-ivy.functional.ivy.elementwise"]], "less() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.less"]], "less_equal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.less_equal"]], "log() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.log"]], "log10() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.log10"]], "log1p() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.log1p"]], "log2() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.log2"]], "logaddexp() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.logaddexp"]], "logical_and() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.logical_and"]], "logical_not() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.logical_not"]], "logical_or() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.logical_or"]], "logical_xor() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.logical_xor"]], "maximum() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.maximum"]], "minimum() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.minimum"]], "multiply() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.multiply"]], "negative() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.negative"]], "not_equal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.not_equal"]], "positive() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.positive"]], "pow() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.pow"]], "rad2deg() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.rad2deg"]], "reciprocal() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.reciprocal"]], "remainder() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.remainder"]], "round() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.round"]], "sign() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.sign"]], "sin() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.sin"]], "sinh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.sinh"]], "sqrt() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.sqrt"]], "square() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.square"]], "subtract() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.subtract"]], "tan() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.tan"]], "tanh() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.tanh"]], "trunc() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.trunc"]], "trunc_divide() (in module ivy.functional.ivy.elementwise)": [[363, "ivy.functional.ivy.elementwise.trunc_divide"]], "nativesparsearray (class in ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.NativeSparseArray"]], "sparsearray (class in ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.SparseArray"]], "__init__() (ivy.functional.ivy.experimental.sparsearray method)": [[364, "ivy.functional.ivy.experimental.SparseArray.__init__"]], "adaptive_avg_pool1d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.adaptive_avg_pool2d"]], "adjoint() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.adjoint"]], "allclose() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.allclose"]], "angle() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.angle"]], "atleast_1d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.atleast_1d"]], "atleast_2d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.atleast_2d"]], "atleast_3d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.atleast_3d"]], "avg_pool1d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.avg_pool1d"]], "avg_pool2d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.avg_pool2d"]], "avg_pool3d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.avg_pool3d"]], "batch_norm() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.batch_norm"]], "bernoulli() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.bernoulli"]], "beta() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.beta"]], "binarizer() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.binarizer"]], "binary_cross_entropy_with_logits() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.binary_cross_entropy_with_logits"]], "bincount() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.bincount"]], "bind_custom_gradient_function() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.bind_custom_gradient_function"]], "broadcast_shapes() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.broadcast_shapes"]], "ccol_indices (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.ccol_indices"]], "col_indices (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.col_indices"]], "cond() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.cond"]], "conj() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.conj"]], "coo_indices (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.coo_indices"]], "copysign() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.copysign"]], "corrcoef() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.corrcoef"]], "count_nonzero() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.count_nonzero"]], "crow_indices (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.crow_indices"]], "current_backend() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.current_backend"]], "data (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.data"]], "dct() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dct"]], "dense_shape (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.dense_shape"]], "dft() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dft"]], "diagflat() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.diagflat"]], "diff() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.diff"]], "dirichlet() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dirichlet"]], "dropout1d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dropout1d"]], "dropout3d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dropout3d"]], "dsplit() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dsplit"]], "dstack() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.dstack"]], "eig() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.eig"]], "eigh_tridiagonal() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.eigh_tridiagonal"]], "eigvals() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.eigvals"]], "embedding() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.embedding"]], "exp2() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.exp2"]], "expand() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.expand"]], "eye_like() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.eye_like"]], "fft() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.fft"]], "fix() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.fix"]], "flatten() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.flatten"]], "fliplr() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.fliplr"]], "flipud() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.flipud"]], "float_power() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.float_power"]], "fmax() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.fmax"]], "fmin() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.fmin"]], "frexp() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.frexp"]], "gamma() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.gamma"]], "gcd() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.gcd"]], "gradient() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.gradient"]], "hamming_window() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.hamming_window"]], "handle_array_function() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_array_function"]], "handle_array_like_without_promotion() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_array_like_without_promotion"]], "handle_exceptions() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_exceptions"]], "handle_nestable() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_nestable"]], "handle_out_argument() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_out_argument"]], "handle_view() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.handle_view"]], "hann_window() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.hann_window"]], "heaviside() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.heaviside"]], "hsplit() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.hsplit"]], "hstack() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.hstack"]], "hypot() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.hypot"]], "i0() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.i0"]], "ifft() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.ifft"]], "imag() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.imag"]], "infer_device() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.infer_device"]], "infer_dtype() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.infer_dtype"]], "inputs_to_native_arrays() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.inputs_to_native_arrays"]], "instance_norm() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.instance_norm"]], "integer_arrays_to_float() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.integer_arrays_to_float"]], "interp() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.interp"]], "interpolate() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.interpolate"]], "is_ivy_sparse_array() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.is_native_sparse_array"]], "isclose() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.isclose"]], "ivy.functional.ivy.experimental": [[364, "module-ivy.functional.ivy.experimental"]], "kaiser_bessel_derived_window() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.kaiser_window"]], "kron() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.kron"]], "l2_normalize() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.l2_normalize"]], "lcm() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.lcm"]], "ldexp() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.ldexp"]], "lexsort() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.lexsort"]], "logaddexp2() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.logaddexp2"]], "logit() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.logit"]], "logsigmoid() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.logsigmoid"]], "lp_normalize() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.lp_normalize"]], "matrix_exp() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.matrix_exp"]], "max_pool1d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.max_pool1d"]], "max_pool2d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.max_pool2d"]], "max_pool3d() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.max_pool3d"]], "median() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.median"]], "moveaxis() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.moveaxis"]], "msort() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.msort"]], "multi_dot() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.multi_dot"]], "nan_to_num() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.nan_to_num"]], "nanmean() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.nanmean"]], "nanmedian() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.nanmedian"]], "nansum() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.nansum"]], "native_sparse_array() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.native_sparse_array_to_indices_values_and_shape"]], "ndenumerate() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.ndenumerate"]], "ndindex() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.ndindex"]], "nextafter() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.nextafter"]], "outputs_to_ivy_arrays() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.outputs_to_ivy_arrays"]], "pad() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.pad"]], "poisson() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.poisson"]], "prelu() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.prelu"]], "quantile() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.quantile"]], "real() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.real"]], "relu6() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.relu6"]], "rot90() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.rot90"]], "row_indices (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.row_indices"]], "selu() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.selu"]], "signbit() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.signbit"]], "sinc() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.sinc"]], "take_along_axis() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.take_along_axis"]], "thresholded_relu() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.thresholded_relu"]], "to_dense_array() (ivy.functional.ivy.experimental.sparsearray method)": [[364, "ivy.functional.ivy.experimental.SparseArray.to_dense_array"]], "to_native_arrays_and_back() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.to_native_arrays_and_back"]], "top_k() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.top_k"]], "trapz() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.trapz"]], "tril_indices() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.tril_indices"]], "triu_indices() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.triu_indices"]], "unravel_index() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.unravel_index"]], "values (ivy.functional.ivy.experimental.sparsearray property)": [[364, "ivy.functional.ivy.experimental.SparseArray.values"]], "vorbis_window() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.vorbis_window"]], "vsplit() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.vsplit"]], "vstack() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.vstack"]], "xlogy() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.xlogy"]], "zeta() (in module ivy.functional.ivy.experimental)": [[364, "ivy.functional.ivy.experimental.zeta"]], "arraymode (class in ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.ArrayMode"]], "__init__() (ivy.functional.ivy.general.arraymode method)": [[365, "ivy.functional.ivy.general.ArrayMode.__init__"]], "all_equal() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.all_equal"]], "arg_info() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.arg_info"]], "arg_names() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.arg_names"]], "array_equal() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.array_equal"]], "assert_supports_inplace() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.assert_supports_inplace"]], "cache_fn() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.cache_fn"]], "clip_matrix_norm() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.clip_matrix_norm"]], "clip_vector_norm() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.clip_vector_norm"]], "container_types() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.container_types"]], "current_backend_str() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.current_backend_str"]], "default() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.default"]], "einops_rearrange() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.einops_rearrange"]], "einops_reduce() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.einops_reduce"]], "einops_repeat() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.einops_repeat"]], "exists() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.exists"]], "fourier_encode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.gather"]], "gather_nd() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.gather_nd"]], "get_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_array_mode"]], "get_exception_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_exception_trace_mode"]], "get_item() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_item"]], "get_min_base() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_min_base"]], "get_min_denominator() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_min_denominator"]], "get_nestable_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_nestable_mode"]], "get_num_dims() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_num_dims"]], "get_queue_timeout() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_queue_timeout"]], "get_referrers_recursive() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.get_tmp_dir"]], "has_nans() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.has_nans"]], "inplace_arrays_supported() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.inplace_arrays_supported"]], "inplace_decrement() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.inplace_decrement"]], "inplace_increment() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.inplace_increment"]], "inplace_update() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.inplace_update"]], "inplace_variables_supported() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.inplace_variables_supported"]], "is_array() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.is_array"]], "is_ivy_array() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.is_ivy_array"]], "is_ivy_container() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.is_ivy_container"]], "is_native_array() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.is_native_array"]], "isin() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.isin"]], "isscalar() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.isscalar"]], "ivy.functional.ivy.general": [[365, "module-ivy.functional.ivy.general"]], "match_kwargs() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.match_kwargs"]], "multiprocessing() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.multiprocessing"]], "num_arrays_in_memory() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.scatter_flat"]], "scatter_nd() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.scatter_nd"]], "set_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_array_mode"]], "set_exception_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_exception_trace_mode"]], "set_min_base() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_min_base"]], "set_min_denominator() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_min_denominator"]], "set_nestable_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_nestable_mode"]], "set_queue_timeout() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_queue_timeout"]], "set_shape_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.set_tmp_dir"]], "shape() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.shape"]], "shape_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.shape_array_mode"]], "stable_divide() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.stable_divide"]], "stable_pow() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.stable_pow"]], "supports_inplace_updates() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.supports_inplace_updates"]], "to_ivy_shape() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.to_ivy_shape"]], "to_list() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.to_list"]], "to_native_shape() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.to_native_shape"]], "to_numpy() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.to_numpy"]], "to_scalar() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.to_scalar"]], "try_else_none() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.try_else_none"]], "unset_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.value_is_nan"]], "vmap() (in module ivy.functional.ivy.general)": [[365, "ivy.functional.ivy.general.vmap"]], "gradienttracking (class in ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.GradientTracking"]], "__init__() (ivy.functional.ivy.gradients.gradienttracking method)": [[366, "ivy.functional.ivy.gradients.GradientTracking.__init__"]], "adam_step() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.adam_step"]], "adam_update() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.adam_update"]], "execute_with_gradients() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.execute_with_gradients"]], "grad() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.grad"]], "gradient_descent_update() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.gradient_descent_update"]], "ivy.functional.ivy.gradients": [[366, "module-ivy.functional.ivy.gradients"]], "jac() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.jac"]], "lamb_update() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.lamb_update"]], "lars_update() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.lars_update"]], "optimizer_update() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.optimizer_update"]], "set_with_grads() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.set_with_grads"]], "stop_gradient() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.stop_gradient"]], "unset_with_grads() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.unset_with_grads"]], "value_and_grad() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.value_and_grad"]], "with_grads() (in module ivy.functional.ivy.gradients)": [[366, "ivy.functional.ivy.gradients.with_grads"]], "conv() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv"]], "conv1d() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv1d"]], "conv1d_transpose() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv1d_transpose"]], "conv2d() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv2d"]], "conv2d_transpose() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv2d_transpose"]], "conv3d() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv3d"]], "conv3d_transpose() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv3d_transpose"]], "conv_general_dilated() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv_general_dilated"]], "conv_general_transpose() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.conv_general_transpose"]], "depthwise_conv2d() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.depthwise_conv2d"]], "dropout() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.dropout"]], "ivy.functional.ivy.layers": [[367, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.linear"]], "lstm_update() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.lstm_update"]], "multi_head_attention() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy.functional.ivy.layers)": [[367, "ivy.functional.ivy.layers.scaled_dot_product_attention"]], "cholesky() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.cholesky"]], "cross() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.cross"]], "det() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.det"]], "diag() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.diag"]], "diagonal() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.diagonal"]], "eig() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.eig"]], "eigh() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.eigh"]], "eigvalsh() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.eigvalsh"]], "inner() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.inner"]], "inv() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.inv"]], "ivy.functional.ivy.linear_algebra": [[368, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.lu_factor"]], "matmul() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.matmul"]], "matrix_norm() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.matrix_norm"]], "matrix_power() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.matrix_power"]], "matrix_rank() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.matrix_rank"]], "matrix_transpose() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.matrix_transpose"]], "outer() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.outer"]], "pinv() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.pinv"]], "qr() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.qr"]], "slogdet() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.slogdet"]], "solve() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.solve"]], "svd() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.svd"]], "svdvals() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.svdvals"]], "tensordot() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.tensordot"]], "tensorsolve() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.tensorsolve"]], "trace() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.trace"]], "vander() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.vander"]], "vecdot() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.vecdot"]], "vector_norm() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy.functional.ivy.linear_algebra)": [[368, "ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy.functional.ivy.losses)": [[369, "ivy.functional.ivy.losses.binary_cross_entropy"]], "cross_entropy() (in module ivy.functional.ivy.losses)": [[369, "ivy.functional.ivy.losses.cross_entropy"]], "ivy.functional.ivy.losses": [[369, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy.functional.ivy.losses)": [[369, "ivy.functional.ivy.losses.sparse_cross_entropy"]], "clip() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.clip"]], "concat() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.concat"]], "constant_pad() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.constant_pad"]], "expand_dims() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.expand_dims"]], "flip() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.flip"]], "ivy.functional.ivy.manipulation": [[370, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.permute_dims"]], "repeat() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.repeat"]], "reshape() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.reshape"]], "roll() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.roll"]], "split() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.split"]], "squeeze() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.squeeze"]], "stack() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.stack"]], "swapaxes() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.swapaxes"]], "tile() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.tile"]], "unstack() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.unstack"]], "zero_pad() (in module ivy.functional.ivy.manipulation)": [[370, "ivy.functional.ivy.manipulation.zero_pad"]], "fomaml_step() (in module ivy.functional.ivy.meta)": [[371, "ivy.functional.ivy.meta.fomaml_step"]], "ivy.functional.ivy.meta": [[371, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy.functional.ivy.meta)": [[371, "ivy.functional.ivy.meta.maml_step"]], "reptile_step() (in module ivy.functional.ivy.meta)": [[371, "ivy.functional.ivy.meta.reptile_step"]], "all_nested_indices() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.all_nested_indices"]], "copy_nest() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.copy_nest"]], "duplicate_array_index_chains() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.duplicate_array_index_chains"]], "index_nest() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.index_nest"]], "insert_into_nest_at_index() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[372, "module-ivy.functional.ivy.nest"]], "map() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.map"]], "map_nest_at_index() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.map_nest_at_index"]], "map_nest_at_indices() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.map_nest_at_indices"]], "multi_index_nest() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.multi_index_nest"]], "nested_any() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.nested_any"]], "nested_argwhere() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.nested_argwhere"]], "nested_map() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.nested_map"]], "nested_multi_map() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.nested_multi_map"]], "prune_empty() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.prune_empty"]], "prune_nest_at_index() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.set_nest_at_index"]], "set_nest_at_indices() (in module ivy.functional.ivy.nest)": [[372, "ivy.functional.ivy.nest.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[373, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy.functional.ivy.norms)": [[373, "ivy.functional.ivy.norms.layer_norm"]], "ivy.functional.ivy.random": [[374, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.multinomial"]], "randint() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.randint"]], "random_normal() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.random_normal"]], "random_uniform() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.random_uniform"]], "seed() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.seed"]], "shuffle() (in module ivy.functional.ivy.random)": [[374, "ivy.functional.ivy.random.shuffle"]], "argmax() (in module ivy.functional.ivy.searching)": [[375, "ivy.functional.ivy.searching.argmax"]], "argmin() (in module ivy.functional.ivy.searching)": [[375, "ivy.functional.ivy.searching.argmin"]], "argwhere() (in module ivy.functional.ivy.searching)": [[375, "ivy.functional.ivy.searching.argwhere"]], "ivy.functional.ivy.searching": [[375, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy.functional.ivy.searching)": [[375, "ivy.functional.ivy.searching.nonzero"]], "where() (in module ivy.functional.ivy.searching)": [[375, "ivy.functional.ivy.searching.where"]], "ivy.functional.ivy.set": [[376, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy.functional.ivy.set)": [[376, "ivy.functional.ivy.set.unique_all"]], "unique_counts() (in module ivy.functional.ivy.set)": [[376, "ivy.functional.ivy.set.unique_counts"]], "unique_inverse() (in module ivy.functional.ivy.set)": [[376, "ivy.functional.ivy.set.unique_inverse"]], "unique_values() (in module ivy.functional.ivy.set)": [[376, "ivy.functional.ivy.set.unique_values"]], "argsort() (in module ivy.functional.ivy.sorting)": [[377, "ivy.functional.ivy.sorting.argsort"]], "ivy.functional.ivy.sorting": [[377, "module-ivy.functional.ivy.sorting"]], "searchsorted() (in module ivy.functional.ivy.sorting)": [[377, "ivy.functional.ivy.sorting.searchsorted"]], "sort() (in module ivy.functional.ivy.sorting)": [[377, "ivy.functional.ivy.sorting.sort"]], "cumprod() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.cumprod"]], "cumsum() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.cumsum"]], "einsum() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.einsum"]], "ivy.functional.ivy.statistical": [[378, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.max"]], "mean() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.mean"]], "min() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.min"]], "prod() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.prod"]], "std() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.std"]], "sum() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.sum"]], "var() (in module ivy.functional.ivy.statistical)": [[378, "ivy.functional.ivy.statistical.var"]], "all() (in module ivy.functional.ivy.utility)": [[379, "ivy.functional.ivy.utility.all"]], "any() (in module ivy.functional.ivy.utility)": [[379, "ivy.functional.ivy.utility.any"]], "ivy.functional.ivy.utility": [[379, "module-ivy.functional.ivy.utility"]], "conv() (in module ivy)": [[383, "ivy.conv"]], "conv1d() (in module ivy)": [[384, "ivy.conv1d"]], "conv1d() (ivy.array method)": [[384, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[384, "ivy.Container.conv1d"]], "conv1d_transpose() (in module ivy)": [[385, "ivy.conv1d_transpose"]], "conv1d_transpose() (ivy.array method)": [[385, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[385, "ivy.Container.conv1d_transpose"]], "conv2d() (in module ivy)": [[386, "ivy.conv2d"]], "conv2d() (ivy.array method)": [[386, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[386, "ivy.Container.conv2d"]], "conv2d_transpose() (in module ivy)": [[387, "ivy.conv2d_transpose"]], "conv2d_transpose() (ivy.array method)": [[387, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[387, "ivy.Container.conv2d_transpose"]], "conv3d() (in module ivy)": [[388, "ivy.conv3d"]], "conv3d() (ivy.array method)": [[388, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[388, "ivy.Container.conv3d"]], "conv3d_transpose() (in module ivy)": [[389, "ivy.conv3d_transpose"]], "conv3d_transpose() (ivy.array method)": [[389, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[389, "ivy.Container.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[390, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[391, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[392, "ivy.depthwise_conv2d"]], "depthwise_conv2d() (ivy.array method)": [[392, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[392, "ivy.Container.depthwise_conv2d"]], "dropout() (in module ivy)": [[393, "ivy.dropout"]], "dropout() (ivy.array method)": [[393, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[393, "ivy.Container.dropout"]], "linear() (in module ivy)": [[394, "ivy.linear"]], "linear() (ivy.array method)": [[394, "ivy.Array.linear"]], "linear() (ivy.container method)": [[394, "ivy.Container.linear"]], "lstm_update() (in module ivy)": [[395, "ivy.lstm_update"]], "lstm_update() (ivy.array method)": [[395, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[395, "ivy.Container.lstm_update"]], "multi_head_attention() (in module ivy)": [[396, "ivy.multi_head_attention"]], "multi_head_attention() (ivy.array method)": [[396, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[396, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[397, "ivy.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[397, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[397, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[398, "ivy.cholesky"]], "cholesky() (ivy.array method)": [[398, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[398, "ivy.Container.cholesky"]], "cross() (in module ivy)": [[399, "ivy.cross"]], "cross() (ivy.array method)": [[399, "ivy.Array.cross"]], "cross() (ivy.container method)": [[399, "ivy.Container.cross"]], "det() (in module ivy)": [[400, "ivy.det"]], "det() (ivy.array method)": [[400, "ivy.Array.det"]], "det() (ivy.container method)": [[400, "ivy.Container.det"]], "diag() (in module ivy)": [[401, "ivy.diag"]], "diag() (ivy.array method)": [[401, "ivy.Array.diag"]], "diag() (ivy.container method)": [[401, "ivy.Container.diag"]], "diagonal() (in module ivy)": [[402, "ivy.diagonal"]], "diagonal() (ivy.array method)": [[402, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[402, "ivy.Container.diagonal"]], "eig() (in module ivy)": [[403, "ivy.eig"]], "eig() (ivy.array method)": [[403, "ivy.Array.eig"]], "eig() (ivy.container method)": [[403, "ivy.Container.eig"]], "eigh() (in module ivy)": [[404, "ivy.eigh"]], "eigh() (ivy.array method)": [[404, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[404, "ivy.Container.eigh"]], "eigvalsh() (in module ivy)": [[405, "ivy.eigvalsh"]], "eigvalsh() (ivy.array method)": [[405, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[405, "ivy.Container.eigvalsh"]], "inner() (in module ivy)": [[406, "ivy.inner"]], "inner() (ivy.array method)": [[406, "ivy.Array.inner"]], "inner() (ivy.container method)": [[406, "ivy.Container.inner"]], "inv() (in module ivy)": [[407, "ivy.inv"]], "inv() (ivy.array method)": [[407, "ivy.Array.inv"]], "inv() (ivy.container method)": [[407, "ivy.Container.inv"]], "lu_factor() (in module ivy)": [[408, "ivy.lu_factor"]], "matmul() (in module ivy)": [[409, "ivy.matmul"]], "matmul() (ivy.array method)": [[409, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[409, "ivy.Container.matmul"]], "matrix_norm() (in module ivy)": [[410, "ivy.matrix_norm"]], "matrix_norm() (ivy.array method)": [[410, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[410, "ivy.Container.matrix_norm"]], "matrix_power() (in module ivy)": [[411, "ivy.matrix_power"]], "matrix_power() (ivy.array method)": [[411, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[411, "ivy.Container.matrix_power"]], "matrix_rank() (in module ivy)": [[412, "ivy.matrix_rank"]], "matrix_rank() (ivy.array method)": [[412, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[412, "ivy.Container.matrix_rank"]], "matrix_transpose() (in module ivy)": [[413, "ivy.matrix_transpose"]], "matrix_transpose() (ivy.array method)": [[413, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[413, "ivy.Container.matrix_transpose"]], "outer() (in module ivy)": [[414, "ivy.outer"]], "outer() (ivy.array method)": [[414, "ivy.Array.outer"]], "outer() (ivy.container method)": [[414, "ivy.Container.outer"]], "pinv() (in module ivy)": [[415, "ivy.pinv"]], "pinv() (ivy.array method)": [[415, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[415, "ivy.Container.pinv"]], "qr() (in module ivy)": [[416, "ivy.qr"]], "qr() (ivy.array method)": [[416, "ivy.Array.qr"]], "qr() (ivy.container method)": [[416, "ivy.Container.qr"]], "slogdet() (in module ivy)": [[417, "ivy.slogdet"]], "slogdet() (ivy.array method)": [[417, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[417, "ivy.Container.slogdet"]], "solve() (in module ivy)": [[418, "ivy.solve"]], "solve() (ivy.array method)": [[418, "ivy.Array.solve"]], "solve() (ivy.container method)": [[418, "ivy.Container.solve"]], "svd() (in module ivy)": [[419, "ivy.svd"]], "svd() (ivy.array method)": [[419, "ivy.Array.svd"]], "svd() (ivy.container method)": [[419, "ivy.Container.svd"]], "svdvals() (in module ivy)": [[420, "ivy.svdvals"]], "svdvals() (ivy.array method)": [[420, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[420, "ivy.Container.svdvals"]], "tensordot() (in module ivy)": [[421, "ivy.tensordot"]], "tensordot() (ivy.array method)": [[421, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[421, "ivy.Container.tensordot"]], "tensorsolve() (in module ivy)": [[422, "ivy.tensorsolve"]], "tensorsolve() (ivy.array method)": [[422, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[422, "ivy.Container.tensorsolve"]], "trace() (in module ivy)": [[423, "ivy.trace"]], "trace() (ivy.array method)": [[423, "ivy.Array.trace"]], "trace() (ivy.container method)": [[423, "ivy.Container.trace"]], "vander() (in module ivy)": [[424, "ivy.vander"]], "vander() (ivy.array method)": [[424, "ivy.Array.vander"]], "vander() (ivy.container method)": [[424, "ivy.Container.vander"]], "vecdot() (in module ivy)": [[425, "ivy.vecdot"]], "vecdot() (ivy.array method)": [[425, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[425, "ivy.Container.vecdot"]], "vector_norm() (in module ivy)": [[426, "ivy.vector_norm"]], "vector_norm() (ivy.array method)": [[426, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[426, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[427, "ivy.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[427, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[427, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[429, "ivy.binary_cross_entropy"]], "binary_cross_entropy() (ivy.array method)": [[429, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[429, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[430, "ivy.cross_entropy"]], "cross_entropy() (ivy.array method)": [[430, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[430, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (in module ivy)": [[431, "ivy.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[431, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[431, "ivy.Container.sparse_cross_entropy"]], "clip() (in module ivy)": [[433, "ivy.clip"]], "clip() (ivy.array method)": [[433, "ivy.Array.clip"]], "clip() (ivy.container method)": [[433, "ivy.Container.clip"]], "concat() (in module ivy)": [[434, "ivy.concat"]], "concat() (ivy.array method)": [[434, "ivy.Array.concat"]], "concat() (ivy.container method)": [[434, "ivy.Container.concat"]], "constant_pad() (in module ivy)": [[435, "ivy.constant_pad"]], "constant_pad() (ivy.array method)": [[435, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[435, "ivy.Container.constant_pad"]], "expand_dims() (in module ivy)": [[436, "ivy.expand_dims"]], "expand_dims() (ivy.array method)": [[436, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[436, "ivy.Container.expand_dims"]], "flip() (in module ivy)": [[437, "ivy.flip"]], "flip() (ivy.array method)": [[437, "ivy.Array.flip"]], "flip() (ivy.container method)": [[437, "ivy.Container.flip"]], "permute_dims() (in module ivy)": [[438, "ivy.permute_dims"]], "permute_dims() (ivy.array method)": [[438, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[438, "ivy.Container.permute_dims"]], "repeat() (in module ivy)": [[439, "ivy.repeat"]], "repeat() (ivy.array method)": [[439, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[439, "ivy.Container.repeat"]], "reshape() (in module ivy)": [[440, "ivy.reshape"]], "reshape() (ivy.array method)": [[440, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[440, "ivy.Container.reshape"]], "roll() (in module ivy)": [[441, "ivy.roll"]], "roll() (ivy.array method)": [[441, "ivy.Array.roll"]], "roll() (ivy.container method)": [[441, "ivy.Container.roll"]], "split() (in module ivy)": [[442, "ivy.split"]], "split() (ivy.array method)": [[442, "ivy.Array.split"]], "split() (ivy.container method)": [[442, "ivy.Container.split"]], "squeeze() (in module ivy)": [[443, "ivy.squeeze"]], "squeeze() (ivy.array method)": [[443, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[443, "ivy.Container.squeeze"]], "stack() (in module ivy)": [[444, "ivy.stack"]], "stack() (ivy.array method)": [[444, "ivy.Array.stack"]], "stack() (ivy.container method)": [[444, "ivy.Container.stack"]], "swapaxes() (in module ivy)": [[445, "ivy.swapaxes"]], "swapaxes() (ivy.array method)": [[445, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[445, "ivy.Container.swapaxes"]], "tile() (in module ivy)": [[446, "ivy.tile"]], "tile() (ivy.array method)": [[446, "ivy.Array.tile"]], "tile() (ivy.container method)": [[446, "ivy.Container.tile"]], "unstack() (in module ivy)": [[447, "ivy.unstack"]], "unstack() (ivy.array method)": [[447, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[447, "ivy.Container.unstack"]], "zero_pad() (in module ivy)": [[448, "ivy.zero_pad"]], "zero_pad() (ivy.array method)": [[448, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[448, "ivy.Container.zero_pad"]], "fomaml_step() (in module ivy)": [[454, "ivy.fomaml_step"]], "maml_step() (in module ivy)": [[455, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[456, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[457, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[458, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[459, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[460, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[461, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[462, "ivy.insert_into_nest_at_indices"]], "map() (in module ivy)": [[463, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[464, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[465, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[466, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[467, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[468, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[469, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[470, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[471, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[472, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[473, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[474, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[475, "ivy.set_nest_at_indices"]], "layer_norm() (in module ivy)": [[476, "ivy.layer_norm"]], "layer_norm() (ivy.array method)": [[476, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[476, "ivy.Container.layer_norm"]], "multinomial() (in module ivy)": [[481, "ivy.multinomial"]], "multinomial() (ivy.array method)": [[481, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[481, "ivy.Container.multinomial"]], "randint() (in module ivy)": [[482, "ivy.randint"]], "randint() (ivy.array method)": [[482, "ivy.Array.randint"]], "randint() (ivy.container method)": [[482, "ivy.Container.randint"]], "random_normal() (in module ivy)": [[483, "ivy.random_normal"]], "random_normal() (ivy.array method)": [[483, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[483, "ivy.Container.random_normal"]], "random_uniform() (in module ivy)": [[484, "ivy.random_uniform"]], "random_uniform() (ivy.array method)": [[484, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[484, "ivy.Container.random_uniform"]], "seed() (in module ivy)": [[485, "ivy.seed"]], "shuffle() (in module ivy)": [[486, "ivy.shuffle"]], "shuffle() (ivy.array method)": [[486, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[486, "ivy.Container.shuffle"]], "argmax() (in module ivy)": [[487, "ivy.argmax"]], "argmax() (ivy.array method)": [[487, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[487, "ivy.Container.argmax"]], "argmin() (in module ivy)": [[488, "ivy.argmin"]], "argmin() (ivy.array method)": [[488, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[488, "ivy.Container.argmin"]], "argwhere() (in module ivy)": [[489, "ivy.argwhere"]], "argwhere() (ivy.array method)": [[489, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[489, "ivy.Container.argwhere"]], "nonzero() (in module ivy)": [[490, "ivy.nonzero"]], "nonzero() (ivy.array method)": [[490, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[490, "ivy.Container.nonzero"]], "where() (in module ivy)": [[491, "ivy.where"]], "where() (ivy.array method)": [[491, "ivy.Array.where"]], "where() (ivy.container method)": [[491, "ivy.Container.where"]], "unique_all() (in module ivy)": [[492, "ivy.unique_all"]], "unique_all() (ivy.array method)": [[492, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[492, "ivy.Container.unique_all"]], "unique_counts() (in module ivy)": [[493, "ivy.unique_counts"]], "unique_counts() (ivy.array method)": [[493, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[493, "ivy.Container.unique_counts"]], "unique_inverse() (in module ivy)": [[494, "ivy.unique_inverse"]], "unique_inverse() (ivy.array method)": [[494, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[494, "ivy.Container.unique_inverse"]], "unique_values() (in module ivy)": [[495, "ivy.unique_values"]], "unique_values() (ivy.array method)": [[495, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[495, "ivy.Container.unique_values"]], "argsort() (in module ivy)": [[496, "ivy.argsort"]], "argsort() (ivy.array method)": [[496, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[496, "ivy.Container.argsort"]], "searchsorted() (in module ivy)": [[497, "ivy.searchsorted"]], "searchsorted() (ivy.array method)": [[497, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[497, "ivy.Container.searchsorted"]], "sort() (in module ivy)": [[498, "ivy.sort"]], "sort() (ivy.array method)": [[498, "ivy.Array.sort"]], "sort() (ivy.container method)": [[498, "ivy.Container.sort"]], "cumprod() (in module ivy)": [[500, "ivy.cumprod"]], "cumprod() (ivy.array method)": [[500, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[500, "ivy.Container.cumprod"]], "cumsum() (in module ivy)": [[501, "ivy.cumsum"]], "cumsum() (ivy.array method)": [[501, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[501, "ivy.Container.cumsum"]], "einsum() (in module ivy)": [[502, "ivy.einsum"]], "einsum() (ivy.array method)": [[502, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[502, "ivy.Container.einsum"]], "max() (in module ivy)": [[503, "ivy.max"]], "max() (ivy.array method)": [[503, "ivy.Array.max"]], "max() (ivy.container method)": [[503, "ivy.Container.max"]], "mean() (in module ivy)": [[504, "ivy.mean"]], "mean() (ivy.array method)": [[504, "ivy.Array.mean"]], "mean() (ivy.container method)": [[504, "ivy.Container.mean"]], "min() (in module ivy)": [[505, "ivy.min"]], "min() (ivy.array method)": [[505, "ivy.Array.min"]], "min() (ivy.container method)": [[505, "ivy.Container.min"]], "prod() (in module ivy)": [[506, "ivy.prod"]], "prod() (ivy.array method)": [[506, "ivy.Array.prod"]], "prod() (ivy.container method)": [[506, "ivy.Container.prod"]], "std() (in module ivy)": [[507, "ivy.std"]], "std() (ivy.array method)": [[507, "ivy.Array.std"]], "std() (ivy.container method)": [[507, "ivy.Container.std"]], "sum() (in module ivy)": [[508, "ivy.sum"]], "sum() (ivy.array method)": [[508, "ivy.Array.sum"]], "sum() (ivy.container method)": [[508, "ivy.Container.sum"]], "var() (in module ivy)": [[509, "ivy.var"]], "var() (ivy.array method)": [[509, "ivy.Array.var"]], "var() (ivy.container method)": [[509, "ivy.Container.var"]], "all() (in module ivy)": [[510, "ivy.all"]], "all() (ivy.array method)": [[510, "ivy.Array.all"]], "all() (ivy.container method)": [[510, "ivy.Container.all"]], "any() (in module ivy)": [[511, "ivy.any"]], "any() (ivy.array method)": [[511, "ivy.Array.any"]], "any() (ivy.container method)": [[511, "ivy.Container.any"]], "nestedarray (class in ivy.nested_array.nested_array)": [[513, "ivy.nested_array.nested_array.NestedArray"]], "__init__() (ivy.nested_array.nested_array.nestedarray method)": [[513, "ivy.nested_array.nested_array.NestedArray.__init__"]], "data (ivy.nested_array.nested_array.nestedarray property)": [[513, "ivy.nested_array.nested_array.NestedArray.data"]], "device (ivy.nested_array.nested_array.nestedarray property)": [[513, "ivy.nested_array.nested_array.NestedArray.device"]], "dtype (ivy.nested_array.nested_array.nestedarray property)": [[513, "ivy.nested_array.nested_array.NestedArray.dtype"]], "from_row_lengths() (ivy.nested_array.nested_array.nestedarray class method)": [[513, "ivy.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_split() (ivy.nested_array.nested_array.nestedarray class method)": [[513, "ivy.nested_array.nested_array.NestedArray.from_row_split"]], "ivy.nested_array.nested_array": [[513, "module-ivy.nested_array.nested_array"]], "ndim (ivy.nested_array.nested_array.nestedarray property)": [[513, "ivy.nested_array.nested_array.NestedArray.ndim"]], "nested_array() (ivy.nested_array.nested_array.nestedarray class method)": [[513, "ivy.nested_array.nested_array.NestedArray.nested_array"]], "reshape() (ivy.nested_array.nested_array.nestedarray method)": [[513, "ivy.nested_array.nested_array.NestedArray.reshape"]], "shape (ivy.nested_array.nested_array.nestedarray property)": [[513, "ivy.nested_array.nested_array.NestedArray.shape"]], "unbind() (ivy.nested_array.nested_array.nestedarray method)": [[513, "ivy.nested_array.nested_array.NestedArray.unbind"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[514, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[514, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "available_frameworks() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[515, "ivy_tests.test_ivy.helpers.available_frameworks.available_frameworks"]], "ground_truth() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[515, "ivy_tests.test_ivy.helpers.available_frameworks.ground_truth"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[515, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "empty_func() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.empty_func"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "flatten_fw_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.flatten_fw_and_to_np"]], "framework_comparator() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.framework_comparator"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[516, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.make_json_pickable"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "var_fn() (in module ivy_tests.test_ivy.helpers.function_testing)": [[516, "ivy_tests.test_ivy.helpers.function_testing.var_fn"]], "interruptedtest": [[517, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[517, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[517, "module-ivy_tests.test_ivy.helpers.globals"]], "remove_all_current_framework() (in module ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.remove_all_current_framework"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[517, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[517, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[518, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[519, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[519, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "as_cont() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.as_cont"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[520, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[520, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[521, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[521, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "check_all() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_any"]], "check_dimensions() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[524, "ivy.utils.assertions.check_true"]], "ivy.utils.assertions": [[524, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[525, "module-ivy.utils.backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[526, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[526, "module-ivy.utils.dynamic_import"]], "ivybackendexception": [[527, "ivy.utils.exceptions.IvyBackendException"]], "ivyerror": [[527, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[527, "ivy.utils.exceptions.IvyException"]], "ivynotimplementedexception": [[527, "ivy.utils.exceptions.IvyNotImplementedException"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[527, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[527, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[527, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[527, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[527, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[527, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[528, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[528, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[528, "module-ivy.utils.inspection"]], "cprint() (in module ivy.utils.verbosity)": [[529, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[529, "module-ivy.utils.verbosity"]], "applied libraries": [[575, "term-Applied-Libraries"]], "automatic code conversions": [[575, "term-Automatic-Code-Conversions"]], "backend handler": [[575, "term-Backend-Handler"]], "compositional functions": [[575, "term-Compositional-Functions"]], "convenience functions": [[575, "term-Convenience-Functions"]], "framework": [[575, "term-Framework"]], "framework handler": [[575, "term-Framework-Handler"]], "graph compiler": [[575, "term-Graph-Compiler"]], "ivy array": [[575, "term-Ivy-Array"]], "ivy backends": [[575, "term-Ivy-Backends"]], "ivy builder": [[575, "term-Ivy-Builder"]], "ivy compiler": [[575, "term-Ivy-Compiler"]], "ivy container": [[575, "term-Ivy-Container"]], "ivy frontends": [[575, "term-Ivy-Frontends"]], "ivy functional api": [[575, "term-Ivy-Functional-API"]], "ivy graph compiler": [[575, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[575, "term-Ivy-Transpiler"]], "mixed functions": [[575, "term-Mixed-Functions"]], "native array": [[575, "term-Native-Array"]], "nestable functions": [[575, "term-Nestable-Functions"]], "pipeline": [[575, "term-Pipeline"]], "primary functions": [[575, "term-Primary-Functions"]], "standalone functions": [[575, "term-Standalone-Functions"]], "submodule helper functions": [[575, "term-Submodule-Helper-Functions"]]}})