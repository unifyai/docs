Search.setIndex({"docnames": ["compiler/compiler", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.nested_array", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/nested_array/ivy.nested_array.nested_array", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.nested_array.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/nested_array/ivy.nested_array.nested_array.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "Data classes", "Functions", "deserialize", "gelu", "get", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "IfElse", "WhileLoop", "if_else", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "fmod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "isreal", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "rad2deg", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "trunc_divide", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_show_func_wrapper_trace_mode", "get_tmp_dir", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "with_grads", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Structs", "Test parameter flags", "Testing helpers", "Nested array", "Framework classes", "Utils", "Testing", "Nested array", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Exceptions", "Inspection", "Profiler", "Verbosity", "Contents", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 1, 489, 500, 505], "The": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 75, 77, 79, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 111, 112, 115, 116, 118, 119, 121, 122, 123, 124, 130, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 245, 247, 248, 251, 252, 254, 255, 256, 258, 259, 260, 261, 264, 266, 269, 270, 273, 274, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 461, 464, 469, 471, 472, 473, 474, 475, 476, 477, 482, 489, 490, 491, 493, 494, 495, 496, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 528, 529, 530, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "transpil": [0, 498, 512, 519, 524, 525, 526, 534, 539, 545, 546], "ar": [0, 1, 3, 4, 7, 8, 9, 13, 15, 17, 18, 19, 25, 27, 30, 31, 32, 36, 38, 40, 41, 42, 47, 48, 65, 77, 79, 82, 139, 143, 145, 149, 171, 173, 196, 197, 206, 209, 211, 216, 220, 223, 224, 225, 240, 246, 250, 253, 257, 267, 268, 275, 284, 293, 301, 312, 316, 318, 319, 321, 322, 323, 324, 326, 328, 330, 331, 332, 346, 347, 352, 356, 357, 358, 362, 363, 365, 368, 372, 373, 377, 378, 379, 384, 385, 388, 392, 394, 404, 409, 414, 415, 416, 424, 425, 426, 429, 430, 431, 432, 434, 436, 453, 455, 458, 459, 460, 461, 464, 472, 473, 475, 478, 479, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546], "publicli": [0, 1, 489], "avail": [0, 1, 9, 32, 134, 140, 141, 142, 152, 232, 318, 321, 459, 489, 491, 499, 500, 505, 506, 507, 509, 511, 512, 519, 521, 523, 533, 544, 545], "yet": [0, 1, 489, 498, 499, 533], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 323, 328, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 368, 369, 370, 372, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 414, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 489, 491, 492, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 539, 540, 541, 543], "certain": [0, 1, 25, 65, 78, 79, 316, 489, 499, 500, 502, 508, 515, 521, 523, 533, 543], "part": [0, 1, 4, 8, 31, 85, 86, 187, 316, 319, 324, 358, 455, 475, 489, 495, 500, 502, 505, 515, 519, 521, 522, 523, 525, 526, 530, 532, 533, 537, 539, 544, 545, 546], "thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 104, 107, 110, 111, 112, 113, 117, 118, 132, 135, 144, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 248, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 276, 282, 283, 284, 286, 288, 289, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 405, 409, 410, 415, 416, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 461, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "doc": [0, 1, 209, 319, 489, 494, 497, 498, 501, 510, 511, 514, 521, 525, 528, 529], "won": [0, 1, 489, 492, 493, 499, 500, 506, 530], "t": [0, 1, 8, 12, 23, 31, 35, 46, 47, 256, 284, 301, 321, 322, 323, 328, 347, 348, 411, 489, 492, 493, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 516, 517, 518, 519, 521, 522, 523, 525, 527, 528, 529, 530, 533, 537, 539, 541], "work": [0, 1, 8, 31, 328, 410, 411, 415, 420, 421, 489, 493, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 518, 519, 520, 521, 522, 524, 525, 527, 529, 530, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "expect": [0, 1, 8, 13, 117, 222, 317, 321, 367, 472, 473, 475, 489, 493, 500, 502, 508, 512, 518, 520, 521, 523, 533], "now": [0, 1, 74, 84, 88, 316, 474, 475, 489, 493, 499, 502, 503, 504, 505, 506, 507, 508, 513, 514, 516, 519, 520, 521, 522, 523, 527, 528, 530, 532, 533, 539], "when": [0, 1, 4, 5, 8, 13, 14, 17, 18, 21, 25, 27, 28, 30, 31, 36, 37, 40, 41, 44, 48, 82, 91, 158, 178, 192, 205, 256, 276, 283, 316, 317, 319, 321, 323, 324, 325, 328, 330, 331, 334, 336, 365, 370, 381, 382, 383, 403, 404, 413, 414, 415, 424, 425, 426, 429, 430, 432, 433, 444, 446, 448, 450, 458, 461, 472, 473, 475, 482, 491, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 525, 527, 528, 530, 533, 537, 539, 542, 543, 544, 545], "we": [0, 1, 8, 23, 31, 46, 231, 284, 301, 302, 304, 311, 321, 322, 472, 475, 482, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 539, 540, 544, 545], "call": [0, 1, 8, 23, 28, 31, 46, 48, 111, 112, 149, 248, 276, 290, 301, 302, 304, 318, 321, 322, 324, 328, 370, 403, 409, 413, 414, 455, 472, 474, 475, 477, 482, 489, 492, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 533, 539, 540, 543], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 104, 107, 110, 113, 117, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 226, 227, 235, 238, 247, 252, 254, 255, 256, 258, 259, 260, 261, 264, 270, 280, 284, 288, 289, 290, 298, 301, 309, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 409, 422, 424, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 461, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 489, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 545, 546], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 492, 493, 494, 496, 497, 499, 501, 502, 504, 506, 508, 509, 511, 513, 514, 515, 516, 518, 523, 524, 531, 533, 534, 535, 546], "function": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 95, 104, 105, 106, 107, 110, 111, 112, 113, 117, 118, 135, 137, 138, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 246, 247, 248, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 268, 269, 270, 275, 276, 278, 282, 283, 284, 286, 288, 289, 290, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 409, 410, 411, 413, 414, 415, 416, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 460, 461, 464, 470, 473, 475, 482, 486, 489, 491, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 513, 518, 524, 526, 527, 528, 529, 531, 532, 534, 536, 537, 538, 539, 540, 545, 546], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 130, 132, 134, 135, 137, 138, 140, 141, 144, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 269, 270, 276, 280, 282, 283, 284, 286, 288, 289, 290, 297, 298, 300, 303, 305, 306, 307, 309, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 464, 471, 472, 473, 474, 475, 476, 477, 479, 482, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "alwai": [0, 5, 15, 28, 38, 91, 158, 256, 317, 319, 321, 326, 391, 460, 489, 498, 500, 503, 504, 506, 508, 511, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 533], "small": [0, 1, 8, 13, 16, 31, 36, 39, 324, 329, 365, 368, 370, 422, 473, 476, 489, 499, 507, 510, 515, 520, 523, 525, 529, 533, 540], "perform": [0, 1, 4, 8, 12, 13, 21, 22, 27, 31, 32, 35, 36, 44, 45, 55, 59, 78, 79, 219, 231, 232, 233, 254, 255, 256, 271, 278, 313, 316, 319, 321, 323, 324, 327, 328, 334, 335, 346, 348, 372, 379, 400, 401, 402, 410, 411, 441, 442, 451, 452, 453, 493, 502, 503, 504, 506, 508, 509, 510, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 528, 533, 536, 539, 540, 541, 542, 543, 544, 546], "hit": [0, 521, 525], "due": [0, 1, 209, 319, 492, 495, 499, 502, 507, 512, 518, 519, 539], "ad": [0, 8, 15, 31, 38, 46, 282, 283, 321, 324, 326, 357, 358, 387, 478, 489, 492, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 529, 533, 538, 539], "python": [0, 8, 17, 31, 40, 65, 144, 154, 208, 298, 316, 318, 319, 321, 330, 423, 424, 425, 426, 428, 482, 490, 491, 492, 497, 499, 500, 502, 503, 505, 506, 507, 512, 513, 519, 521, 523, 525, 527, 528, 533, 534, 536, 539, 540, 541, 545, 546], "wrap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 278, 282, 283, 284, 286, 288, 289, 296, 297, 299, 300, 303, 305, 306, 307, 309, 321, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 368, 369, 370, 372, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 469, 489, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 518, 519, 521, 525, 527, 530, 533, 534, 535, 539, 540, 545, 546], "overhead": [0, 533, 542], "becom": [0, 8, 31, 326, 384, 482, 491, 493, 500, 505, 506, 510, 512, 518, 519, 533], "increasingli": [0, 510], "notic": [0, 498, 503, 507, 523], "larg": [0, 8, 31, 158, 319, 324, 370, 499, 500, 507, 528, 539], "model": [0, 1, 489, 528, 529, 534, 537, 538, 539, 540, 541, 542, 543, 545, 546], "multipl": [0, 8, 13, 16, 21, 22, 25, 30, 31, 32, 33, 36, 38, 39, 44, 45, 168, 194, 199, 200, 220, 265, 299, 300, 303, 305, 307, 309, 319, 321, 322, 323, 324, 326, 329, 331, 334, 335, 338, 339, 340, 341, 351, 360, 362, 363, 384, 387, 392, 393, 422, 429, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 474, 489, 493, 500, 503, 504, 505, 506, 510, 512, 515, 518, 519, 520, 521, 523, 525, 533, 537, 538, 539, 546], "improv": [0, 493, 500, 508, 514, 515, 523, 525, 534, 537, 539, 541, 542], "remov": [0, 1, 13, 25, 36, 310, 322, 324, 326, 327, 328, 355, 362, 376, 394, 400, 401, 417, 489, 498, 504, 505, 507, 508, 511, 515, 521, 523, 530, 539], "extra": [0, 1, 25, 48, 298, 321, 503, 508, 510, 516, 518, 519, 520, 523, 525, 536, 541], "around": [0, 25, 48, 500, 503, 505, 514, 515, 519, 522, 527, 533, 534, 537, 539, 546], "each": [0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 25, 28, 30, 31, 32, 33, 35, 36, 38, 41, 42, 44, 47, 48, 56, 57, 58, 60, 80, 92, 104, 107, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 223, 231, 238, 239, 262, 298, 300, 301, 303, 305, 306, 307, 313, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 352, 353, 356, 357, 358, 362, 364, 365, 366, 368, 370, 371, 372, 377, 386, 390, 392, 393, 395, 397, 399, 409, 416, 423, 432, 434, 435, 437, 442, 443, 450, 458, 460, 474, 476, 477, 478, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 532, 533, 535, 536, 540, 542, 545], "take": [0, 1, 8, 13, 15, 21, 31, 38, 82, 169, 316, 319, 324, 326, 362, 366, 391, 441, 458, 464, 473, 489, 493, 494, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 518, 519, 520, 521, 523, 525, 527, 529, 530, 533, 536, 537, 545], "ani": [0, 1, 3, 4, 6, 7, 8, 9, 13, 22, 23, 27, 29, 30, 31, 32, 45, 46, 47, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 95, 110, 113, 117, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 230, 231, 232, 233, 234, 238, 247, 252, 254, 258, 260, 283, 289, 290, 298, 309, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 409, 410, 412, 413, 420, 422, 426, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 460, 470, 471, 473, 474, 475, 476, 477, 478, 482, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "framework": [0, 1, 3, 9, 109, 130, 140, 142, 152, 229, 253, 257, 284, 287, 317, 318, 321, 328, 405, 453, 455, 456, 459, 464, 471, 477, 482, 491, 492, 493, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 530, 532, 533, 534, 535, 536, 537, 538, 540, 543], "specif": [0, 1, 6, 9, 29, 32, 42, 118, 147, 150, 196, 197, 231, 232, 233, 266, 317, 318, 319, 321, 324, 326, 327, 330, 333, 334, 357, 358, 374, 395, 400, 401, 402, 423, 437, 439, 444, 445, 446, 448, 455, 475, 482, 486, 489, 491, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 512, 514, 515, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 532, 533, 534, 535, 537, 538, 540, 541, 542, 546], "backend": [0, 1, 3, 4, 8, 9, 13, 25, 31, 32, 36, 71, 105, 106, 109, 130, 137, 138, 140, 142, 152, 224, 236, 237, 253, 256, 257, 266, 284, 287, 316, 317, 318, 321, 324, 372, 453, 455, 456, 459, 471, 475, 477, 481, 482, 489, 491, 497, 498, 499, 500, 501, 502, 503, 507, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 523, 524, 526, 527, 530, 534, 539, 542, 545, 546], "composit": [0, 498, 501, 503, 504, 506, 508, 516, 518, 520, 521, 523, 525, 529, 530, 533, 534, 540], "both": [0, 1, 4, 7, 8, 9, 13, 27, 30, 31, 32, 36, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 94, 110, 113, 116, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 262, 289, 309, 311, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 489, 500, 504, 506, 507, 508, 509, 510, 511, 514, 515, 518, 519, 521, 523, 525, 527, 528, 529, 530, 532, 533, 539, 542, 544, 545, 546], "produc": [0, 8, 12, 31, 35, 323, 350, 458, 498, 508, 520, 521, 522, 540, 542], "simplifi": [0, 492, 512, 519, 525, 526, 529, 535, 537, 538, 539, 542, 545, 546], "execut": [0, 290, 318, 321, 499, 500, 505, 506, 507, 510, 512, 515, 516, 518, 521, 523, 525, 527, 530, 533, 534, 535, 539, 540, 541, 542, 543, 545], "comput": [0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 19, 21, 24, 25, 30, 31, 32, 33, 35, 36, 37, 44, 55, 59, 149, 158, 164, 167, 169, 175, 176, 181, 182, 183, 188, 189, 195, 196, 197, 198, 200, 203, 207, 208, 225, 226, 227, 299, 301, 302, 304, 308, 309, 311, 312, 318, 319, 321, 322, 323, 324, 325, 326, 328, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 356, 357, 358, 361, 362, 363, 367, 369, 371, 372, 378, 379, 381, 382, 383, 387, 409, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 460, 489, 492, 493, 499, 506, 507, 508, 515, 517, 519, 521, 523, 525, 528, 533, 534, 535, 537, 539, 540, 542, 543, 545], "compos": [0, 8, 31, 472, 499, 506, 519, 521, 533, 539, 546], "from": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 40, 41, 44, 45, 46, 48, 65, 67, 73, 75, 76, 77, 80, 81, 84, 88, 94, 112, 117, 118, 134, 139, 143, 148, 149, 173, 206, 213, 225, 230, 238, 239, 243, 268, 276, 286, 298, 300, 305, 310, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 334, 335, 337, 345, 346, 349, 355, 372, 376, 377, 378, 385, 388, 391, 394, 400, 401, 402, 404, 415, 416, 417, 423, 424, 425, 426, 430, 433, 434, 436, 441, 442, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 464, 471, 472, 473, 474, 475, 477, 482, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546], "onli": [0, 1, 4, 8, 13, 15, 17, 25, 27, 31, 36, 38, 40, 47, 79, 116, 117, 145, 154, 196, 197, 225, 316, 317, 318, 319, 321, 324, 326, 328, 330, 331, 333, 334, 362, 369, 372, 388, 391, 403, 404, 410, 411, 413, 414, 415, 420, 421, 424, 425, 426, 429, 430, 439, 445, 448, 456, 458, 460, 461, 475, 477, 489, 491, 494, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 533, 538, 539, 540, 545, 546], "which": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 92, 94, 96, 102, 104, 107, 109, 112, 118, 130, 135, 139, 143, 145, 147, 148, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 230, 231, 232, 233, 235, 238, 239, 240, 243, 247, 252, 254, 255, 256, 258, 259, 261, 262, 267, 268, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 346, 347, 349, 350, 351, 352, 354, 355, 358, 360, 362, 363, 365, 366, 367, 369, 370, 371, 372, 376, 378, 379, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 398, 399, 408, 409, 410, 411, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 460, 471, 472, 473, 474, 475, 476, 477, 478, 482, 486, 489, 491, 492, 493, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546], "result": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 117, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 262, 269, 270, 299, 300, 301, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 406, 409, 410, 412, 416, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 460, 464, 479, 487, 489, 500, 502, 503, 505, 506, 507, 508, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 525, 528, 533, 540, 542], "code": [0, 1, 6, 7, 25, 29, 30, 48, 150, 189, 224, 232, 233, 256, 269, 284, 312, 318, 321, 322, 323, 324, 326, 345, 364, 365, 366, 395, 487, 489, 491, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546], "all": [0, 1, 3, 4, 8, 9, 12, 13, 15, 17, 22, 23, 25, 26, 30, 31, 32, 35, 36, 38, 40, 45, 46, 65, 82, 85, 86, 139, 145, 200, 220, 223, 240, 267, 268, 282, 288, 289, 298, 301, 316, 318, 321, 322, 323, 324, 326, 327, 328, 330, 331, 335, 346, 348, 365, 370, 371, 374, 379, 388, 392, 394, 400, 401, 402, 403, 404, 405, 414, 415, 416, 417, 423, 426, 431, 453, 455, 458, 459, 460, 461, 463, 472, 473, 479, 482, 486, 489, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546], "don": [0, 23, 46, 489, 493, 498, 499, 500, 505, 507, 508, 517, 521, 523, 529, 533], "contribut": [0, 495, 497, 498, 499, 500, 505, 519, 525, 543], "output": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 93, 117, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 226, 227, 231, 232, 233, 235, 239, 256, 262, 269, 270, 271, 291, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 416, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 473, 474, 489, 496, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 529, 530, 533, 534, 540], "print": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 102, 103, 104, 105, 106, 109, 111, 112, 113, 118, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 243, 244, 245, 247, 248, 252, 254, 255, 256, 258, 259, 260, 261, 265, 268, 269, 270, 273, 274, 276, 279, 280, 282, 284, 286, 288, 289, 290, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 349, 350, 351, 352, 353, 355, 358, 360, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 376, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 472, 482, 487, 489, 499, 500, 506, 510, 520, 521, 525, 527, 528, 529], "statement": [0, 1, 507, 513, 518, 521, 523, 533], "logger": 0, "etc": [0, 4, 8, 17, 19, 23, 27, 31, 40, 46, 71, 78, 79, 82, 316, 330, 332, 423, 424, 425, 426, 434, 435, 436, 437, 458, 461, 473, 474, 475, 476, 477, 478, 493, 498, 499, 500, 502, 503, 505, 506, 508, 510, 512, 514, 519, 520, 521, 522, 525, 527, 528, 533, 534, 537, 539, 545], "ha": [0, 4, 8, 13, 15, 19, 21, 25, 28, 31, 32, 36, 38, 42, 44, 80, 134, 155, 187, 205, 209, 252, 312, 316, 318, 319, 322, 324, 326, 332, 334, 362, 371, 372, 376, 387, 394, 435, 436, 437, 441, 442, 445, 447, 448, 449, 450, 458, 461, 472, 482, 491, 492, 493, 498, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 532, 533, 535, 538, 539, 541, 542, 545], "": [0, 1, 4, 8, 9, 10, 13, 21, 31, 33, 36, 44, 80, 85, 86, 105, 106, 134, 137, 138, 148, 208, 236, 237, 264, 284, 300, 302, 303, 304, 305, 307, 314, 316, 317, 318, 319, 321, 322, 323, 324, 328, 334, 338, 340, 342, 344, 354, 365, 372, 373, 379, 415, 448, 450, 455, 459, 472, 473, 474, 475, 476, 477, 478, 482, 489, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545], "likewis": [0, 1, 489, 500, 506, 508, 511, 514, 515, 519, 523, 528, 545], "redund": [0, 489, 500, 508, 512, 519, 523], "oper": [0, 4, 5, 8, 9, 12, 25, 27, 28, 31, 32, 35, 48, 78, 79, 118, 158, 168, 208, 224, 231, 232, 233, 284, 316, 317, 319, 321, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 458, 461, 489, 491, 498, 499, 502, 503, 506, 508, 509, 510, 511, 512, 515, 518, 519, 521, 523, 525, 528, 529, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546], "origin": [0, 1, 8, 13, 15, 21, 25, 31, 36, 38, 44, 47, 48, 162, 319, 324, 326, 334, 363, 391, 392, 442, 455, 460, 482, 489, 493, 498, 499, 500, 504, 505, 507, 508, 516, 518, 519, 520, 525, 539, 540], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 107, 110, 111, 112, 113, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 316, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 414, 415, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 473, 474, 482, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546], "increas": [0, 13, 15, 36, 38, 324, 326, 328, 377, 386, 399, 415, 460, 491, 508, 512, 519, 522, 523, 539], "its": [0, 3, 5, 8, 15, 25, 28, 32, 38, 92, 97, 98, 99, 100, 101, 149, 235, 287, 317, 318, 321, 324, 326, 328, 362, 387, 391, 392, 396, 409, 455, 463, 472, 489, 498, 499, 500, 503, 505, 507, 508, 511, 516, 517, 518, 519, 520, 521, 522, 523, 525, 530, 533, 534, 538, 539, 545], "overal": [0, 323, 346, 506, 508, 509, 511, 530, 535, 537, 538, 539], "obj": [0, 1, 66, 67, 316], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 109, 110, 111, 112, 113, 115, 118, 128, 130, 133, 134, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 243, 247, 249, 252, 254, 255, 256, 258, 259, 261, 266, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 489, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530], "arg_stateful_idx": [0, 475], "kwarg_stateful_idx": [0, 475], "include_gener": [0, 475], "true": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 118, 130, 134, 135, 137, 138, 141, 144, 145, 146, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 247, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 269, 270, 271, 275, 277, 278, 280, 281, 282, 283, 284, 286, 288, 289, 291, 293, 295, 296, 297, 300, 301, 303, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 472, 474, 475, 476, 477, 479, 482, 487, 489, 506, 507, 508, 510, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 525, 528, 529, 530], "array_cach": [0, 475], "return_backend_compiled_fn": 0, "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 135, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 241, 243, 246, 247, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 265, 269, 270, 271, 275, 277, 278, 280, 281, 282, 283, 284, 286, 288, 289, 291, 293, 295, 296, 297, 300, 301, 303, 307, 308, 309, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 413, 414, 415, 416, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 469, 470, 471, 472, 475, 477, 479, 482, 487, 489, 502, 504, 508, 510, 512, 518, 519, 520, 521, 523, 525, 528, 529, 530], "static_argnum": [0, 525], "static_argnam": [0, 525], "arg": [0, 1, 3, 25, 149, 290, 316, 318, 321, 453, 455, 471, 475, 479, 482, 487, 489, 503, 512, 517, 518, 519, 523, 525, 529], "kwarg": [0, 1, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 265, 290, 316, 321, 453, 455, 471, 475, 482, 487, 489, 503, 512, 518, 519, 523, 525, 529], "callabl": [0, 1, 9, 23, 32, 46, 51, 53, 68, 69, 70, 105, 106, 137, 138, 149, 221, 225, 230, 232, 236, 237, 265, 290, 298, 302, 304, 311, 313, 316, 317, 318, 321, 322, 323, 327, 328, 349, 400, 401, 402, 409, 410, 411, 413, 414, 415, 416, 453, 456, 464, 477, 485, 506, 512, 517, 519, 525], "set": [0, 1, 3, 8, 9, 12, 13, 18, 20, 21, 25, 31, 32, 35, 36, 41, 43, 44, 119, 120, 121, 122, 123, 134, 146, 147, 148, 149, 162, 220, 224, 231, 256, 271, 272, 273, 274, 275, 276, 277, 278, 279, 284, 292, 317, 318, 319, 321, 323, 324, 328, 330, 331, 333, 334, 346, 352, 363, 365, 368, 371, 372, 403, 410, 413, 414, 415, 420, 421, 427, 429, 430, 434, 436, 437, 438, 440, 448, 450, 455, 458, 459, 460, 461, 464, 472, 473, 474, 477, 482, 491, 494, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 537, 538, 539, 540, 541, 543, 546], "them": [0, 1, 42, 225, 268, 321, 437, 458, 489, 490, 491, 492, 493, 496, 498, 500, 502, 503, 504, 505, 506, 507, 512, 516, 518, 519, 520, 521, 525, 527, 528, 529, 533, 534, 536, 537, 539, 541, 545], "If": [0, 1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 118, 134, 148, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 262, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 301, 303, 309, 312, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 346, 347, 350, 351, 352, 354, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 415, 416, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 460, 472, 473, 475, 482, 489, 491, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "specifi": [0, 1, 4, 5, 8, 9, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 28, 31, 32, 36, 37, 38, 40, 41, 44, 45, 54, 65, 72, 76, 78, 83, 85, 86, 87, 91, 93, 139, 143, 145, 148, 149, 150, 208, 221, 238, 239, 243, 252, 264, 298, 316, 317, 318, 319, 321, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 349, 354, 355, 358, 363, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 392, 394, 395, 398, 399, 408, 410, 411, 418, 419, 420, 421, 424, 425, 426, 429, 430, 432, 435, 436, 437, 438, 441, 442, 443, 447, 449, 451, 452, 461, 472, 500, 501, 505, 508, 509, 514, 515, 516, 518, 519, 520, 521, 523, 525, 528, 529, 545], "eagerli": [0, 1, 489], "otherwis": [0, 1, 3, 4, 5, 7, 8, 9, 12, 13, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 77, 78, 79, 82, 84, 88, 91, 92, 94, 95, 97, 98, 99, 100, 101, 110, 113, 117, 118, 134, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 262, 269, 270, 282, 283, 284, 286, 288, 289, 290, 297, 303, 309, 316, 317, 318, 319, 321, 323, 324, 326, 327, 328, 331, 333, 334, 335, 337, 338, 339, 340, 346, 347, 350, 351, 352, 353, 358, 360, 362, 363, 365, 367, 369, 370, 372, 376, 378, 379, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 416, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 475, 482, 489, 500, 503, 506, 508, 509, 510, 515, 516, 518, 521, 525], "happen": [0, 1, 489, 493, 499, 500, 518, 521, 528], "lazili": [0, 1, 489], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 247, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 269, 270, 273, 274, 276, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 464, 471, 472, 473, 474, 475, 476, 477, 478, 482, 486, 489, 498, 503, 511, 512, 514, 515, 516, 519, 520, 521, 522, 525, 527, 528, 532, 540], "creat": [0, 1, 4, 8, 17, 25, 27, 31, 36, 40, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 286, 298, 311, 316, 321, 322, 330, 367, 423, 424, 425, 426, 428, 455, 464, 471, 473, 474, 475, 476, 477, 478, 492, 494, 495, 498, 499, 500, 503, 505, 507, 508, 509, 512, 516, 518, 519, 520, 521, 523, 525, 526, 529, 531, 532, 534, 539, 540, 545], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 107, 109, 118, 130, 134, 145, 147, 148, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 264, 266, 269, 270, 282, 283, 284, 286, 288, 289, 290, 297, 299, 300, 301, 303, 305, 306, 307, 309, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 413, 414, 415, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 459, 464, 471, 473, 475, 477, 478, 487, 498, 499, 500, 506, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 530, 533, 539, 545], "list": [0, 3, 4, 5, 8, 9, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 72, 77, 80, 81, 82, 83, 84, 87, 88, 92, 94, 107, 111, 112, 118, 134, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 240, 247, 252, 254, 255, 256, 258, 259, 261, 265, 269, 270, 282, 283, 284, 286, 288, 289, 290, 297, 298, 303, 308, 309, 310, 312, 313, 316, 317, 318, 321, 322, 324, 326, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 374, 376, 381, 382, 383, 384, 385, 388, 391, 392, 393, 394, 395, 398, 399, 403, 404, 405, 406, 409, 410, 411, 412, 414, 415, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 445, 447, 448, 450, 451, 452, 453, 455, 458, 459, 460, 461, 464, 469, 471, 472, 474, 479, 497, 498, 499, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 518, 519, 520, 521, 522, 525, 528, 529, 530, 533, 539, 540, 545], "instanc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 104, 107, 110, 111, 112, 113, 118, 135, 146, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 277, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 471, 495, 498, 499, 500, 502, 503, 508, 510, 511, 514, 515, 516, 517, 518, 521, 528, 529, 530, 534, 540], "consid": [0, 8, 13, 19, 31, 36, 196, 197, 319, 324, 332, 354, 365, 434, 435, 436, 437, 460, 473, 491, 492, 503, 507, 508, 515, 517, 522, 523, 526, 527, 528, 536, 540, 544, 546], "dure": [0, 6, 10, 21, 25, 29, 33, 44, 150, 290, 299, 300, 305, 318, 321, 322, 323, 324, 327, 334, 346, 362, 400, 401, 402, 448, 450, 472, 475, 477, 499, 506, 508, 509, 512, 515, 516, 518, 519, 520, 521, 523, 533, 539, 540, 545], "posit": [0, 3, 7, 8, 9, 13, 15, 30, 31, 32, 36, 38, 74, 104, 155, 184, 185, 207, 208, 225, 235, 298, 314, 316, 317, 319, 321, 324, 326, 330, 331, 335, 351, 354, 376, 387, 392, 427, 432, 451, 452, 455, 458, 464, 471, 489, 498, 500, 502, 506, 516, 519, 521, 522, 528, 532, 541], "argument": [0, 1, 3, 4, 7, 8, 9, 13, 25, 26, 30, 31, 32, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 224, 225, 230, 232, 233, 238, 247, 252, 254, 256, 265, 269, 270, 284, 289, 290, 298, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 409, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 464, 471, 475, 482, 486, 489, 491, 498, 501, 502, 503, 504, 505, 506, 510, 511, 513, 515, 516, 520, 521, 522, 523, 525, 527, 528, 534, 539], "keyword": [0, 1, 3, 4, 8, 25, 31, 48, 80, 222, 225, 265, 290, 316, 321, 328, 334, 409, 449, 453, 455, 475, 498, 503, 506, 508, 509, 516, 518, 519, 520, 521, 522, 523, 528], "str": [0, 1, 3, 4, 8, 9, 12, 13, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 80, 82, 84, 88, 89, 92, 94, 96, 97, 98, 99, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 122, 123, 130, 131, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 231, 232, 233, 235, 238, 239, 242, 247, 252, 254, 255, 256, 258, 259, 261, 266, 269, 270, 272, 279, 282, 283, 284, 286, 288, 289, 297, 301, 309, 313, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 409, 410, 420, 423, 424, 425, 426, 428, 431, 434, 435, 436, 438, 441, 442, 443, 445, 447, 448, 450, 451, 452, 455, 456, 459, 462, 464, 508, 509, 512, 513, 519, 522, 525, 530], "current": [0, 9, 25, 48, 105, 106, 109, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 143, 145, 154, 236, 237, 240, 241, 242, 246, 250, 253, 257, 267, 268, 281, 284, 312, 317, 318, 321, 322, 324, 328, 356, 403, 413, 414, 455, 459, 472, 475, 482, 489, 493, 496, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 512, 515, 516, 518, 519, 520, 521, 523, 525, 530, 532, 533, 539, 545, 546], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 76, 77, 78, 79, 80, 82, 84, 88, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 126, 130, 134, 135, 137, 138, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 269, 270, 280, 281, 282, 283, 284, 286, 288, 289, 297, 300, 301, 303, 305, 306, 307, 308, 309, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 361, 362, 363, 365, 366, 367, 369, 370, 372, 376, 377, 379, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 413, 414, 415, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 476, 477, 487, 508, 510, 512, 518, 519, 521, 522, 523, 525, 530], "includ": [0, 1, 4, 8, 9, 13, 18, 21, 22, 25, 27, 30, 31, 32, 36, 41, 44, 45, 65, 66, 67, 78, 79, 81, 181, 252, 297, 316, 321, 324, 328, 330, 331, 334, 335, 356, 377, 379, 403, 426, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 461, 473, 474, 476, 486, 489, 492, 498, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 532, 533, 536, 537, 539, 541, 544, 545, 546], "creation": [0, 8, 25, 31, 48, 505, 508, 509, 512, 514, 516, 519, 520, 521, 522, 525, 539, 541, 545], "constant": [0, 8, 15, 16, 31, 38, 39, 326, 328, 329, 386, 409, 422, 473, 475, 476, 489, 515, 520, 522, 529, 530, 533], "appear": [0, 298, 321, 499, 500, 502, 519, 523], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 77, 82, 84, 88, 91, 92, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 130, 134, 135, 137, 138, 140, 141, 144, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 269, 270, 271, 272, 275, 277, 278, 280, 282, 283, 284, 286, 288, 289, 293, 296, 297, 300, 301, 303, 305, 306, 307, 308, 309, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 334, 335, 337, 338, 339, 340, 346, 347, 350, 351, 352, 357, 358, 360, 361, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 453, 455, 460, 471, 474, 475, 476, 477, 489, 494, 498, 499, 503, 506, 508, 510, 514, 515, 518, 519, 521, 522, 523], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 313, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 365, 367, 368, 369, 370, 372, 376, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 409, 412, 415, 416, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 460, 461, 470, 476, 489, 494, 496, 498, 499, 500, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 527, 528, 529, 530, 531, 533, 534, 540], "nativ": [0, 1, 3, 4, 6, 9, 26, 29, 32, 47, 81, 89, 90, 96, 97, 98, 99, 100, 101, 114, 117, 132, 133, 134, 135, 144, 151, 154, 256, 258, 261, 268, 287, 316, 317, 318, 321, 455, 464, 469, 471, 482, 489, 508, 512, 516, 518, 519, 520, 521, 525, 527, 528, 534, 537, 546], "e": [0, 4, 8, 13, 17, 19, 20, 21, 23, 31, 36, 40, 43, 44, 46, 47, 71, 79, 80, 90, 118, 131, 155, 162, 166, 168, 170, 177, 179, 180, 184, 190, 192, 199, 200, 205, 208, 314, 316, 317, 318, 319, 324, 326, 328, 330, 332, 333, 334, 352, 362, 363, 365, 368, 371, 372, 379, 387, 395, 406, 410, 411, 412, 420, 421, 424, 425, 426, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 489, 492, 493, 494, 495, 498, 499, 500, 501, 502, 506, 512, 517, 519, 521, 525, 528, 533, 534, 535], "tf": [0, 1, 489, 503, 508, 509, 514, 518, 519, 521, 522, 523, 525, 530, 533, 534, 539], "after": [0, 1, 8, 9, 10, 12, 16, 25, 31, 32, 33, 35, 39, 124, 213, 256, 300, 303, 305, 306, 307, 317, 319, 321, 322, 323, 328, 329, 336, 337, 338, 339, 341, 343, 345, 346, 414, 422, 477, 482, 489, 495, 498, 499, 500, 502, 505, 507, 508, 510, 512, 514, 517, 519, 521, 524, 539], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 240, 243, 247, 252, 254, 255, 256, 258, 259, 261, 262, 264, 265, 269, 270, 280, 282, 283, 284, 285, 286, 287, 288, 289, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 473, 477, 478, 503, 506, 508, 509, 510, 512, 513, 514, 515, 518, 522, 523, 525, 530], "int": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 55, 59, 60, 66, 67, 72, 74, 76, 77, 78, 79, 82, 83, 85, 86, 87, 93, 100, 103, 104, 107, 113, 128, 141, 142, 143, 149, 150, 158, 164, 165, 166, 167, 168, 169, 209, 215, 221, 231, 232, 233, 235, 238, 239, 247, 264, 267, 269, 282, 298, 299, 300, 301, 305, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 352, 354, 355, 363, 364, 374, 376, 377, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 410, 412, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 469, 473, 506, 508, 509, 510, 512, 513, 514, 515, 518, 520, 521, 522, 523, 525, 530], "iter": [0, 3, 9, 15, 23, 25, 32, 38, 46, 48, 149, 220, 265, 318, 321, 326, 328, 386, 390, 397, 399, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 418, 419, 421, 493, 506, 525, 528], "For": [0, 4, 8, 13, 19, 31, 36, 65, 80, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 211, 212, 213, 216, 217, 218, 316, 319, 324, 326, 332, 334, 370, 372, 376, 384, 395, 434, 435, 436, 437, 444, 446, 449, 459, 471, 491, 492, 493, 495, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 536, 537, 540, 545, 546], "jax": [0, 1, 8, 9, 19, 32, 224, 256, 284, 298, 321, 332, 434, 435, 436, 437, 482, 489, 492, 493, 497, 498, 499, 500, 502, 504, 508, 509, 512, 514, 517, 518, 519, 520, 521, 522, 523, 525, 527, 530, 533, 540, 542, 545, 546], "jit": [0, 525, 533, 539], "tupl": [0, 1, 3, 4, 5, 8, 9, 12, 13, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 72, 77, 81, 82, 83, 84, 87, 88, 92, 93, 94, 105, 106, 107, 111, 112, 117, 118, 124, 134, 137, 138, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 243, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 299, 300, 301, 303, 305, 309, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 374, 375, 376, 379, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 428, 431, 432, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 473, 475, 503, 508, 512, 513, 514, 518, 520, 521, 525, 528, 529, 533], "dict": [0, 1, 3, 9, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 134, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 231, 232, 233, 235, 236, 237, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 265, 269, 270, 282, 283, 284, 286, 288, 289, 297, 309, 313, 318, 321, 328, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 415, 416, 420, 421, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 455, 456, 471, 475, 482, 503, 506, 513, 528, 529, 534], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 273, 274, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 463, 464, 469, 471, 472, 473, 474, 475, 477, 482, 485, 486, 489, 499, 500, 503, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 533, 540], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 463, 464, 469, 470, 473, 474, 475, 479, 482, 485, 487, 489, 495, 498, 499, 500, 501, 502, 503, 506, 509, 510, 511, 513, 514, 516, 518, 520, 521, 522, 523, 525, 527, 528, 539, 540, 543], "lazygraph": [0, 1], "modul": [0, 23, 25, 46, 48, 266, 321, 455, 470, 471, 472, 474, 476, 478, 481, 482, 489, 493, 496, 499, 503, 504, 505, 512, 513, 515, 518, 519, 521, 525, 526, 528, 530, 532, 533, 539, 540, 542], "moduletyp": [0, 1], "A": [0, 1, 4, 5, 8, 9, 15, 17, 21, 22, 25, 28, 30, 31, 32, 36, 38, 40, 42, 45, 48, 74, 81, 92, 132, 149, 202, 204, 207, 223, 254, 255, 282, 283, 286, 311, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 330, 334, 335, 346, 355, 360, 361, 366, 367, 371, 372, 384, 387, 389, 393, 395, 403, 406, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 423, 424, 425, 426, 428, 434, 443, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 472, 473, 478, 487, 490, 491, 492, 493, 497, 498, 499, 501, 506, 508, 509, 512, 514, 515, 519, 520, 521, 525, 528, 533, 534, 539, 540], "non": [0, 1, 5, 8, 13, 17, 18, 21, 22, 28, 31, 36, 40, 41, 44, 45, 91, 109, 117, 196, 197, 317, 319, 324, 328, 330, 331, 334, 335, 353, 363, 365, 372, 374, 378, 379, 416, 425, 429, 430, 431, 432, 444, 445, 446, 447, 448, 450, 451, 452, 473, 475, 477, 503, 506, 508, 510, 516, 525, 539], "initi": [0, 1, 12, 25, 35, 48, 323, 348, 471, 472, 474, 475, 477, 489, 492, 500, 504, 508, 509, 520, 521, 525, 539, 545, 546], "object": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 53, 71, 75, 83, 95, 104, 107, 114, 117, 150, 200, 313, 316, 317, 318, 328, 330, 406, 408, 410, 411, 412, 418, 419, 420, 421, 428, 455, 456, 462, 463, 469, 471, 474, 475, 482, 489, 503, 506, 507, 516, 519, 520, 521, 523, 527, 530, 539, 545], "forward": [0, 8, 31, 471, 473, 475, 477, 489, 499, 504, 511, 517, 521, 522, 523, 530, 532, 533, 539, 540], "pass": [0, 1, 8, 23, 25, 31, 46, 48, 96, 117, 132, 149, 162, 256, 317, 318, 319, 321, 327, 400, 401, 453, 455, 464, 471, 475, 477, 478, 482, 487, 489, 498, 500, 502, 503, 504, 506, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 533, 537], "same": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 25, 27, 28, 30, 31, 32, 33, 35, 36, 38, 40, 42, 44, 47, 58, 65, 73, 77, 79, 80, 82, 84, 85, 86, 88, 91, 92, 93, 104, 107, 149, 155, 156, 157, 158, 159, 161, 165, 167, 170, 179, 202, 204, 208, 209, 210, 218, 262, 309, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 364, 366, 367, 368, 369, 371, 372, 376, 378, 385, 388, 389, 391, 392, 394, 395, 400, 401, 416, 426, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 458, 459, 460, 474, 489, 491, 493, 495, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530, 533, 536, 538, 545, 546], "copi": [0, 1, 4, 5, 6, 8, 9, 15, 25, 27, 28, 29, 31, 32, 38, 66, 67, 71, 75, 91, 150, 243, 282, 288, 289, 316, 317, 318, 321, 326, 328, 333, 387, 388, 389, 391, 393, 394, 396, 398, 404, 440, 499, 500, 502, 504, 507, 508, 511, 519, 520, 525, 532, 533], "everi": [0, 1, 4, 8, 9, 31, 32, 76, 77, 220, 316, 321, 495, 498, 500, 502, 504, 505, 506, 507, 508, 510, 514, 515, 516, 518, 519, 520, 521, 522, 525, 527, 529, 539], "method": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 312, 316, 317, 319, 321, 322, 324, 325, 328, 331, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 414, 415, 416, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 464, 472, 473, 474, 475, 498, 500, 502, 503, 507, 508, 510, 511, 513, 514, 515, 516, 521, 522, 525, 526, 529, 530, 533, 540, 546], "To": [0, 1, 276, 321, 473, 495, 499, 502, 503, 505, 506, 508, 510, 512, 513, 515, 519, 520, 521, 522, 528, 529, 530], "you": [0, 1, 8, 9, 31, 32, 47, 48, 238, 239, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "need": [0, 1, 8, 9, 15, 31, 32, 38, 226, 227, 256, 321, 324, 326, 328, 356, 384, 387, 414, 459, 489, 493, 495, 496, 498, 499, 500, 502, 503, 505, 506, 507, 508, 510, 511, 512, 515, 517, 518, 519, 520, 522, 523, 525, 527, 528, 532, 533, 535, 539, 540, 541, 545], "correspond": [0, 1, 5, 7, 8, 9, 12, 15, 18, 19, 21, 25, 28, 30, 31, 35, 38, 44, 48, 51, 53, 92, 104, 107, 162, 205, 282, 298, 313, 317, 319, 321, 323, 324, 326, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 356, 357, 363, 370, 371, 392, 423, 429, 430, 434, 435, 436, 437, 441, 442, 447, 448, 449, 450, 455, 458, 489, 498, 500, 503, 504, 506, 507, 508, 510, 511, 514, 515, 516, 517, 519, 521, 523, 525, 539], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 132, 134, 135, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 246, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 271, 275, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 410, 411, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 459, 464, 473, 474, 475, 476, 502, 503, 504, 506, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 533, 540, 543], "let": [0, 1, 9, 21, 32, 238, 239, 321, 334, 445, 448, 449, 450, 489, 493, 495, 503, 505, 506, 508, 509, 510, 511, 512, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 546], "start": [0, 1, 4, 8, 25, 27, 31, 65, 78, 79, 316, 460, 472, 489, 494, 495, 498, 499, 500, 501, 507, 508, 510, 511, 514, 519, 521, 523, 524, 525, 527, 528, 529, 532, 533, 539, 545], "simpl": [0, 1, 8, 31, 234, 321, 460, 489, 491, 498, 499, 500, 503, 505, 506, 508, 509, 510, 511, 515, 518, 519, 521, 522, 523, 527, 529, 530, 533, 534, 538, 539, 540, 541], "import": [0, 1, 8, 19, 23, 27, 31, 46, 132, 133, 137, 138, 146, 147, 318, 332, 437, 464, 482, 489, 492, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 517, 518, 519, 520, 521, 522, 525, 527, 528, 530, 533, 535, 537, 539, 542, 543, 545], "set_backend": [0, 1, 8, 23, 31, 106, 114, 132, 133, 146, 147, 317, 318, 482, 489, 502, 504, 508, 515, 516, 517, 525, 527, 530], "torch": [0, 1, 4, 9, 13, 23, 32, 36, 71, 106, 132, 133, 146, 147, 209, 256, 284, 316, 317, 318, 319, 321, 324, 372, 455, 471, 482, 489, 499, 500, 502, 503, 504, 505, 507, 508, 509, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 533, 534, 545], "def": [0, 1, 8, 31, 225, 321, 328, 409, 489, 498, 499, 502, 503, 506, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530], "fn": [0, 25, 28, 68, 69, 70, 105, 106, 137, 138, 221, 236, 237, 290, 316, 317, 318, 321, 328, 409, 410, 411, 413, 414, 415, 453, 455, 479, 482, 485, 486, 487, 512, 518, 519, 525], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 118, 134, 135, 139, 143, 144, 145, 148, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 244, 245, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 276, 279, 280, 282, 284, 286, 288, 289, 290, 297, 298, 300, 301, 302, 304, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 406, 409, 410, 411, 412, 413, 414, 415, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 460, 463, 474, 479, 482, 487, 489, 503, 504, 506, 508, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530], "y": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 71, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 102, 104, 107, 118, 131, 135, 139, 143, 144, 145, 148, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 226, 227, 230, 231, 233, 234, 235, 238, 239, 240, 248, 252, 254, 255, 256, 258, 259, 261, 262, 267, 273, 274, 276, 279, 280, 282, 284, 286, 288, 289, 290, 294, 297, 298, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 342, 345, 346, 347, 351, 352, 353, 358, 360, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 376, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 406, 409, 410, 412, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 487, 489, 504, 506, 510, 517, 519, 520, 521, 522, 523, 525, 527], "z": [0, 4, 7, 8, 9, 13, 14, 17, 19, 21, 27, 30, 31, 32, 36, 37, 38, 40, 44, 47, 48, 78, 79, 81, 82, 139, 158, 162, 164, 167, 169, 174, 182, 183, 185, 186, 187, 188, 189, 194, 195, 197, 198, 199, 200, 215, 223, 235, 238, 239, 254, 255, 270, 280, 282, 290, 298, 316, 318, 319, 321, 324, 325, 326, 328, 330, 331, 332, 334, 352, 362, 367, 368, 372, 379, 381, 382, 383, 384, 406, 410, 412, 420, 424, 425, 426, 429, 434, 443, 444, 446, 447, 448, 473, 489, 504, 506, 510, 525, 527], "k": [0, 4, 8, 12, 13, 17, 27, 30, 31, 35, 36, 40, 74, 85, 86, 195, 223, 316, 321, 323, 324, 328, 330, 331, 350, 354, 362, 363, 369, 371, 372, 373, 376, 411, 424, 425, 426, 432, 489, 501, 502, 519, 520, 525, 535, 539], "j": [0, 4, 8, 13, 21, 27, 30, 31, 36, 82, 195, 223, 316, 321, 324, 334, 356, 376, 443, 500, 501, 535], "concat": [0, 9, 15, 25, 38, 149, 235, 318, 321, 326, 399, 520, 523, 525], "sum_j": 0, "sum": [0, 1, 7, 8, 9, 12, 13, 14, 21, 25, 30, 31, 32, 35, 36, 37, 44, 47, 48, 149, 158, 194, 215, 232, 269, 270, 318, 319, 321, 323, 324, 325, 334, 346, 350, 363, 372, 376, 379, 382, 383, 442, 443, 473, 489, 506, 508, 515, 517, 518, 519, 525], "1": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 102, 103, 104, 107, 112, 113, 118, 134, 135, 139, 142, 143, 145, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 267, 269, 270, 280, 282, 283, 284, 286, 288, 289, 290, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 460, 461, 464, 472, 473, 474, 475, 476, 477, 478, 482, 489, 492, 493, 499, 500, 502, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533], "2": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 102, 104, 112, 113, 118, 134, 135, 136, 139, 141, 143, 145, 147, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 267, 269, 270, 280, 282, 284, 286, 290, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 461, 470, 473, 482, 489, 499, 500, 502, 504, 505, 506, 507, 508, 510, 512, 514, 515, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 533, 545, 546], "3": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 74, 77, 78, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 102, 104, 112, 113, 118, 132, 134, 135, 145, 147, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 269, 270, 280, 282, 286, 289, 290, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 461, 489, 499, 502, 503, 504, 506, 508, 510, 512, 517, 520, 521, 523, 525, 527, 528, 529, 530, 546], "4": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 77, 78, 79, 80, 81, 82, 84, 88, 92, 93, 94, 102, 104, 107, 112, 113, 118, 135, 136, 143, 147, 150, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 230, 231, 232, 233, 235, 238, 239, 243, 252, 254, 255, 256, 262, 269, 270, 282, 284, 286, 290, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 461, 473, 477, 489, 493, 498, 499, 504, 505, 506, 507, 510, 517, 520, 521, 523, 525, 527, 528, 529, 530, 539, 545, 546], "compiled_fn": 0, "In": [0, 1, 6, 9, 15, 29, 32, 38, 144, 150, 151, 154, 158, 208, 221, 256, 318, 319, 321, 324, 326, 330, 370, 391, 426, 489, 491, 493, 495, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 527, 528, 529, 530, 532, 533, 535, 537, 539, 540, 542, 545], "case": [0, 1, 3, 4, 8, 9, 15, 21, 25, 32, 38, 48, 80, 132, 144, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 210, 211, 212, 213, 216, 217, 218, 256, 269, 270, 316, 318, 319, 321, 324, 326, 328, 334, 370, 391, 406, 412, 444, 445, 446, 448, 449, 450, 458, 474, 475, 477, 489, 492, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530, 533, 538, 542], "would": [0, 6, 8, 15, 29, 31, 38, 55, 59, 150, 313, 318, 326, 391, 460, 489, 492, 494, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 513, 514, 516, 518, 519, 520, 521, 523, 524, 525, 527, 529, 530, 533, 539, 545], "can": [0, 1, 4, 5, 8, 9, 13, 15, 17, 19, 27, 28, 31, 32, 36, 38, 40, 42, 66, 67, 79, 81, 94, 132, 147, 148, 149, 262, 298, 301, 316, 317, 318, 321, 322, 324, 326, 330, 355, 362, 372, 376, 391, 395, 424, 425, 426, 434, 455, 458, 459, 460, 461, 464, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 545, 546], "observ": [0, 8, 31, 500, 512, 525, 541], "As": [0, 1, 19, 23, 46, 332, 434, 435, 436, 437, 489, 491, 500, 503, 505, 506, 507, 508, 509, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 527, 528, 529, 533, 539, 544], "variabl": [0, 8, 9, 10, 16, 25, 31, 32, 33, 39, 224, 256, 257, 258, 259, 261, 284, 300, 301, 303, 305, 306, 307, 321, 322, 323, 324, 327, 329, 349, 371, 400, 401, 402, 422, 455, 464, 471, 472, 473, 474, 475, 476, 477, 478, 500, 504, 508, 511, 513, 514, 517, 518, 521, 522, 525, 528, 529, 530, 533, 540], "calcul": [0, 7, 8, 9, 14, 21, 25, 30, 31, 32, 36, 37, 44, 48, 155, 156, 157, 158, 159, 160, 161, 162, 171, 172, 174, 177, 178, 190, 191, 192, 193, 194, 199, 200, 201, 205, 211, 212, 213, 215, 216, 217, 262, 319, 321, 324, 325, 334, 358, 367, 370, 381, 382, 383, 444, 445, 446, 447, 448, 449, 450, 458, 460, 473, 492, 498, 511, 525], "valu": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 53, 60, 65, 74, 76, 77, 78, 79, 82, 91, 108, 112, 117, 148, 149, 155, 156, 157, 158, 159, 161, 162, 170, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 217, 218, 219, 224, 225, 226, 227, 228, 230, 235, 238, 239, 243, 245, 248, 249, 254, 255, 256, 262, 269, 270, 273, 274, 276, 284, 289, 294, 297, 298, 299, 300, 301, 305, 308, 310, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 354, 363, 364, 365, 368, 369, 370, 371, 372, 373, 379, 384, 385, 386, 390, 391, 399, 400, 401, 405, 407, 408, 409, 410, 411, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 453, 455, 458, 459, 460, 461, 463, 469, 472, 473, 474, 475, 476, 477, 499, 500, 502, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 521, 523, 525, 527, 533, 539, 540], "wa": [0, 1, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 290, 297, 303, 309, 321, 328, 334, 335, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 482, 489, 492, 500, 502, 507, 510, 517, 519, 525, 527, 538, 539, 541], "like": [0, 1, 4, 8, 15, 27, 31, 38, 79, 95, 117, 316, 317, 324, 326, 330, 356, 391, 426, 489, 492, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 539, 544], "were": [0, 25, 28, 107, 111, 112, 500, 508, 512, 513, 517, 518, 520, 521, 522, 523, 525, 539, 540, 545], "exclud": [0, 21, 44, 65, 316, 330, 426, 441, 458, 461, 482, 510, 525], "process": [0, 144, 154, 318, 492, 493, 494, 499, 500, 506, 507, 515, 517, 519, 520, 521, 523, 525, 530, 537, 538, 539, 542, 543, 545, 546], "tensor": [0, 1, 4, 7, 8, 9, 12, 15, 17, 25, 27, 30, 31, 32, 35, 36, 38, 40, 71, 78, 79, 82, 102, 117, 199, 200, 269, 270, 316, 317, 319, 321, 323, 324, 326, 330, 346, 348, 361, 374, 393, 423, 474, 482, 489, 491, 503, 504, 508, 509, 514, 515, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 533, 534, 536, 537, 540, 542, 543, 546], "shape": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 145, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 235, 238, 239, 247, 256, 262, 269, 270, 277, 285, 287, 295, 298, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 438, 440, 441, 442, 443, 445, 447, 448, 450, 451, 452, 455, 458, 460, 469, 473, 474, 476, 489, 500, 506, 508, 509, 510, 511, 514, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530], "indic": [0, 4, 8, 9, 12, 13, 15, 16, 18, 19, 20, 25, 27, 28, 31, 32, 35, 36, 38, 39, 41, 42, 43, 66, 67, 82, 107, 111, 112, 210, 223, 238, 239, 243, 269, 270, 298, 301, 316, 319, 321, 322, 324, 326, 328, 329, 330, 331, 332, 333, 337, 339, 340, 341, 342, 345, 379, 391, 392, 403, 406, 408, 410, 411, 412, 414, 418, 419, 420, 421, 422, 423, 429, 430, 431, 432, 434, 436, 438, 439, 440, 455, 456, 458, 472, 474, 475, 479, 486, 507, 513, 514, 517, 519, 530], "trace": [0, 1, 9, 13, 25, 32, 36, 250, 258, 259, 261, 272, 278, 292, 296, 321, 324, 489, 502, 508, 525, 533, 534, 540, 545], "doesn": [0, 256, 321, 499, 504, 505, 506, 507, 508, 510, 517, 521, 523, 525, 533, 537], "impos": 0, "addit": [0, 6, 8, 9, 16, 29, 31, 32, 39, 150, 158, 209, 231, 232, 233, 298, 318, 319, 321, 329, 422, 474, 498, 499, 500, 504, 506, 508, 510, 511, 517, 518, 519, 521, 522, 523, 527, 528, 530, 539, 540, 541, 545], "restrict": [0, 506, 507, 519, 525, 536], "datatyp": [0, 4, 25, 27, 67, 77, 81, 96, 116, 120, 316, 317, 453, 522], "out": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 102, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 226, 227, 231, 232, 233, 235, 238, 239, 256, 265, 269, 270, 299, 300, 303, 305, 306, 307, 309, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 464, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "differ": [0, 1, 7, 8, 9, 21, 25, 31, 32, 44, 47, 48, 104, 158, 215, 238, 239, 317, 319, 321, 323, 324, 326, 334, 346, 347, 370, 385, 395, 441, 442, 447, 449, 450, 475, 489, 491, 492, 493, 497, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 533, 536, 537, 538, 539, 542, 545, 546], "b": [0, 7, 8, 9, 12, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 66, 67, 71, 74, 76, 77, 79, 82, 84, 88, 91, 92, 93, 94, 102, 112, 113, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 262, 269, 270, 282, 284, 288, 289, 297, 299, 300, 301, 303, 305, 307, 309, 313, 316, 317, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 406, 409, 410, 411, 412, 414, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 490, 493, 494, 500, 501, 502, 504, 506, 507, 510, 515, 517, 520, 524, 525, 526, 528, 529, 530, 531, 535], "new": [0, 8, 9, 10, 15, 16, 25, 27, 31, 32, 33, 36, 38, 39, 42, 72, 75, 76, 77, 82, 83, 84, 87, 88, 124, 163, 202, 204, 207, 231, 232, 233, 235, 238, 239, 243, 269, 270, 273, 279, 282, 283, 288, 300, 303, 305, 306, 307, 316, 317, 319, 321, 322, 326, 328, 329, 367, 387, 391, 395, 408, 420, 421, 422, 437, 471, 474, 476, 477, 482, 489, 491, 492, 493, 494, 498, 499, 500, 501, 503, 504, 506, 507, 508, 510, 511, 513, 516, 518, 519, 520, 521, 522, 523, 524, 527, 530, 532, 534, 537, 541, 545, 546], "run": [0, 1, 8, 10, 31, 33, 299, 300, 305, 322, 327, 400, 401, 402, 455, 456, 474, 475, 489, 495, 496, 498, 499, 501, 503, 504, 507, 510, 512, 513, 514, 515, 516, 519, 520, 525, 526, 527, 528, 529, 530, 532, 533, 537, 539, 540, 541, 542, 544, 545, 546], "under": [0, 1, 489, 498, 499, 500, 501, 502, 505, 506, 510, 511, 515, 519, 520, 521, 523, 524, 525, 528, 530, 533, 539, 542, 546], "hood": [0, 1, 489, 501, 506, 510, 515, 519, 521, 523, 524, 525, 528, 530, 546], "track": [0, 322, 328, 415, 472, 475, 499, 500, 502, 517, 518, 539], "befor": [0, 1, 8, 12, 13, 15, 19, 21, 25, 31, 35, 36, 149, 318, 323, 324, 326, 327, 328, 332, 334, 336, 337, 338, 339, 341, 343, 345, 349, 350, 362, 379, 385, 400, 401, 415, 434, 435, 436, 437, 441, 442, 447, 449, 472, 482, 498, 499, 500, 502, 503, 505, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 525, 528, 533, 539], "instead": [0, 1, 7, 8, 30, 31, 132, 208, 318, 319, 498, 499, 500, 502, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 523, 525, 527, 528, 533, 537, 539, 545, 546], "allow": [0, 1, 8, 31, 78, 265, 316, 321, 333, 439, 458, 459, 460, 461, 472, 475, 487, 489, 492, 495, 498, 500, 503, 507, 508, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 525, 527, 533, 534, 537, 539, 543, 544], "dynam": [0, 482, 501, 508, 509, 518, 519, 525, 539, 543], "done": [0, 1, 324, 358, 497, 498, 499, 500, 502, 505, 507, 510, 513, 518, 519, 521, 528, 539], "first": [0, 1, 4, 7, 8, 13, 15, 17, 18, 19, 21, 27, 30, 31, 32, 36, 38, 40, 42, 44, 47, 48, 78, 79, 116, 124, 134, 158, 162, 164, 166, 167, 168, 169, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 215, 223, 316, 317, 318, 319, 321, 324, 326, 327, 328, 330, 331, 332, 333, 334, 352, 355, 356, 357, 359, 362, 367, 369, 370, 372, 374, 378, 391, 392, 395, 396, 400, 401, 402, 403, 404, 413, 414, 416, 428, 429, 430, 434, 435, 436, 439, 441, 442, 455, 473, 474, 475, 477, 482, 489, 491, 492, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 510, 514, 515, 516, 518, 519, 521, 523, 525, 527, 528, 530, 537, 539, 540, 544], "invok": [0, 1, 8, 489], "onc": [0, 13, 17, 36, 40, 149, 318, 324, 330, 356, 357, 358, 372, 423, 493, 498, 499, 500, 506, 507, 508, 509, 510, 518, 519, 521, 523, 525, 528, 533], "been": [0, 9, 17, 32, 40, 134, 209, 231, 232, 233, 318, 319, 321, 330, 423, 498, 500, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 518, 521, 525, 527, 532, 533, 534, 539, 546], "directli": [0, 1, 328, 415, 489, 493, 500, 502, 503, 505, 506, 507, 508, 509, 511, 515, 516, 518, 519, 520, 522, 523, 525, 527, 529, 530, 532, 533, 543, 544, 545], "here": [0, 1, 209, 319, 489, 497, 498, 499, 500, 502, 505, 506, 507, 510, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 532, 533, 539, 540], "eager_graph": [0, 1, 489], "doe": [0, 8, 9, 15, 25, 31, 38, 169, 256, 319, 321, 324, 326, 356, 393, 453, 492, 498, 500, 501, 504, 507, 508, 510, 511, 514, 515, 518, 519, 520, 521, 522, 523, 525, 527, 528, 533, 534, 535, 539, 540, 546], "lazy_graph": [0, 1, 489], "up": [0, 8, 9, 31, 32, 262, 321, 323, 346, 472, 491, 492, 493, 494, 495, 498, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "enabl": [0, 8, 25, 48, 312, 322, 489, 492, 499, 500, 503, 506, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 528, 530, 533, 534, 537, 538, 539, 540, 541, 542, 545, 546], "delai": [0, 500], "until": [0, 492, 500, 513, 518, 522, 525, 533, 546], "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 104, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 269, 270, 299, 300, 303, 305, 306, 307, 309, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 470, 471, 472, 473, 474, 475, 476, 477, 478, 489, 490, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "necessari": [0, 1, 8, 15, 31, 38, 326, 391, 489, 499, 500, 503, 504, 506, 510, 516, 518, 519, 521, 523], "particularli": [0, 500, 528, 533, 537], "librari": [0, 6, 19, 29, 150, 178, 192, 196, 197, 318, 319, 324, 332, 334, 357, 358, 434, 435, 436, 437, 444, 445, 446, 448, 489, 491, 492, 493, 494, 496, 498, 499, 502, 523, 530, 531, 533, 534, 535, 536, 537, 539, 543, 546], "where": [0, 4, 7, 8, 9, 13, 15, 17, 18, 21, 22, 25, 27, 30, 31, 32, 36, 38, 40, 41, 44, 45, 76, 77, 80, 82, 162, 177, 187, 192, 199, 200, 205, 256, 269, 298, 312, 316, 319, 321, 322, 324, 326, 328, 330, 331, 334, 335, 356, 357, 361, 363, 365, 367, 368, 369, 372, 373, 376, 378, 384, 386, 387, 389, 395, 399, 414, 423, 424, 425, 426, 431, 432, 448, 450, 451, 452, 473, 489, 491, 492, 493, 494, 499, 500, 502, 503, 504, 506, 508, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 533, 537, 546], "feasibl": [0, 492, 498, 507], "provid": [0, 1, 4, 8, 9, 13, 15, 18, 21, 22, 25, 27, 31, 32, 36, 38, 41, 44, 45, 51, 53, 80, 82, 97, 98, 99, 100, 101, 109, 118, 130, 134, 225, 230, 269, 270, 313, 316, 317, 318, 321, 324, 326, 331, 334, 335, 364, 367, 378, 387, 388, 395, 429, 448, 450, 451, 452, 474, 477, 482, 489, 491, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 521, 523, 527, 529, 532, 533, 537, 538, 539, 540, 541, 542, 543, 546], "valid": [0, 8, 12, 22, 31, 35, 45, 96, 259, 317, 321, 323, 326, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 387, 395, 451, 452, 458, 459, 474, 499, 504, 508, 510, 517, 520, 521, 540], "look": [0, 489, 491, 495, 499, 500, 504, 505, 506, 508, 509, 510, 512, 514, 515, 519, 520, 521, 522, 523, 525, 527, 529, 530, 535, 539], "find": [0, 19, 25, 328, 332, 405, 434, 435, 436, 437, 489, 491, 494, 497, 498, 499, 500, 502, 505, 507, 517, 521, 523, 525, 528, 534], "abl": [0, 25, 499, 500, 502, 508, 515, 518, 519, 523, 525, 530, 542, 545], "through": [0, 8, 31, 162, 319, 328, 406, 412, 475, 489, 494, 497, 498, 500, 501, 504, 505, 506, 507, 510, 512, 515, 516, 518, 519, 520, 521, 523, 524, 525, 528, 529, 530, 532, 537, 539, 540, 541], "flag": [0, 1, 25, 134, 318, 455, 464, 500, 508, 516, 518, 519, 520, 521], "reduc": [0, 8, 9, 13, 18, 21, 22, 25, 31, 32, 36, 41, 44, 45, 149, 232, 318, 321, 324, 331, 334, 335, 369, 429, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 507, 512, 519, 523, 525, 527, 537, 541, 542, 543], "time": [0, 1, 8, 10, 13, 19, 31, 33, 42, 300, 305, 322, 323, 324, 326, 327, 331, 332, 346, 348, 362, 397, 400, 401, 402, 429, 430, 434, 435, 474, 475, 491, 492, 493, 498, 499, 500, 504, 506, 507, 508, 510, 514, 515, 516, 518, 519, 521, 522, 525, 528, 530, 533, 537, 539, 540, 543, 544, 545], "comp_func": 0, "default": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 137, 138, 141, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 231, 232, 233, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 265, 266, 269, 270, 276, 280, 282, 283, 284, 286, 288, 289, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 411, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 461, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 498, 499, 500, 504, 505, 508, 509, 510, 511, 512, 514, 515, 516, 519, 521, 523, 525, 529, 534, 539], "follow": [0, 8, 9, 10, 12, 13, 19, 25, 31, 32, 33, 35, 36, 107, 149, 208, 254, 255, 256, 282, 283, 300, 303, 305, 306, 307, 317, 318, 319, 321, 322, 323, 324, 328, 332, 349, 350, 363, 369, 379, 409, 415, 434, 435, 436, 437, 474, 477, 489, 491, 492, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 536, 539, 542], "show": [0, 250, 272, 278, 296, 321, 472, 489, 498, 499, 500, 507, 510, 518, 519, 521, 532, 533, 539], "simpler": [0, 498, 500, 519, 540, 546], "obtain": [0, 519], "howev": [0, 13, 36, 324, 370, 372, 482, 492, 498, 499, 500, 502, 503, 504, 506, 508, 509, 510, 511, 512, 514, 515, 518, 519, 520, 521, 523, 525, 527, 528, 529, 530, 533, 538, 539, 545], "desir": [0, 5, 6, 8, 18, 25, 28, 29, 31, 41, 91, 93, 94, 150, 317, 318, 331, 431, 473, 474, 491, 500, 504, 507, 508, 519, 525, 539], "below": [0, 1, 4, 13, 36, 44, 85, 86, 187, 316, 319, 324, 355, 376, 450, 489, 494, 498, 499, 501, 502, 506, 507, 508, 509, 510, 512, 513, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 537, 542, 544], "ultim": 0, "trade": 0, "off": [0, 12, 13, 35, 36, 323, 324, 346, 355, 376, 473, 493, 499, 524, 545], "between": [0, 1, 8, 12, 13, 14, 15, 19, 25, 30, 31, 35, 37, 38, 48, 65, 104, 162, 205, 316, 317, 319, 323, 325, 326, 328, 330, 332, 346, 367, 381, 382, 383, 387, 395, 409, 424, 435, 436, 437, 459, 477, 491, 503, 504, 506, 510, 514, 515, 516, 518, 519, 520, 521, 523, 524, 526, 527, 528, 530, 532, 535, 536, 538, 539, 540, 545], "memori": [0, 4, 8, 15, 31, 38, 80, 133, 144, 149, 151, 154, 316, 318, 323, 326, 348, 391, 489, 507, 508, 509, 518, 519, 523, 525, 531, 533, 539, 541, 542, 543], "store": [0, 5, 9, 13, 15, 25, 28, 32, 36, 38, 42, 74, 84, 88, 93, 235, 316, 321, 324, 326, 376, 393, 437, 455, 456, 475, 496, 500, 503, 504, 506, 511, 516, 518, 519, 525, 527, 528, 529, 534], "thei": [0, 8, 13, 17, 25, 36, 40, 116, 317, 324, 327, 330, 377, 400, 401, 423, 453, 478, 489, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 515, 516, 518, 519, 521, 522, 523, 525, 527, 528, 529, 530, 533, 536, 539, 541, 542, 545, 546], "By": [0, 8, 15, 21, 22, 31, 38, 44, 45, 324, 326, 334, 335, 378, 390, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 508, 510, 512, 515, 517, 518, 519, 525, 529, 530], "choos": [0, 6, 18, 19, 29, 150, 196, 197, 318, 319, 331, 332, 334, 433, 434, 435, 436, 437, 444, 445, 446, 448, 498, 499, 500, 521, 526, 530], "node": [0, 1, 25, 32, 224, 284, 328, 413, 414, 473, 481, 492, 505, 506, 519, 540], "bake": 0, "randint": [0, 12, 17, 19, 35, 40, 330, 332, 345, 348, 434, 508], "0": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 102, 104, 107, 108, 112, 113, 118, 131, 134, 136, 139, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 230, 231, 232, 234, 235, 238, 239, 240, 243, 247, 248, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 265, 267, 269, 270, 276, 280, 282, 284, 286, 288, 289, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 460, 461, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 489, 500, 502, 504, 506, 507, 508, 510, 511, 512, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 533], "100": [0, 4, 8, 27, 30, 31, 32, 79, 168, 213, 239, 255, 270, 316, 319, 321, 324, 328, 360, 409, 489, 492, 493, 507, 521, 528, 529, 530, 533], "size": [0, 8, 9, 12, 13, 15, 17, 18, 25, 27, 31, 32, 35, 36, 38, 40, 41, 47, 48, 72, 78, 83, 87, 147, 148, 149, 264, 269, 316, 318, 321, 323, 324, 326, 330, 331, 335, 350, 355, 359, 363, 367, 369, 372, 378, 387, 392, 393, 394, 423, 429, 432, 451, 452, 458, 460, 461, 474, 489, 518, 520, 521, 523, 528], "rand": [0, 489], "And": [0, 28, 489, 505, 521], "final": [0, 1, 4, 9, 32, 78, 79, 235, 316, 321, 474, 498, 500, 502, 503, 505, 507, 508, 510, 511, 513, 515, 517, 518, 519, 523, 524, 528, 535, 545], "__setattr__": [0, 506], "__getattr__": [0, 506], "arbitrari": [0, 1, 4, 5, 8, 25, 28, 80, 92, 118, 301, 316, 317, 322, 506, 514, 515, 517, 518, 519, 521, 529, 533, 540, 545], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 84, 88, 104, 107, 119, 121, 122, 222, 224, 231, 256, 265, 284, 316, 317, 318, 321, 322, 323, 328, 329, 331, 332, 348, 350, 356, 367, 403, 404, 415, 422, 432, 436, 437, 447, 448, 455, 456, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 487, 489, 498, 505, 506, 508, 509, 510, 511, 514, 517, 520, 521, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 546], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 135, 137, 138, 139, 143, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 231, 232, 233, 234, 235, 238, 239, 246, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 275, 276, 282, 283, 284, 286, 288, 289, 293, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 410, 411, 412, 416, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 463, 464, 472, 474, 475, 477, 478, 482, 489, 491, 495, 496, 498, 499, 501, 502, 503, 505, 507, 508, 510, 511, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 529, 533, 534, 539, 540, 545], "cont_deep_copi": [0, 25, 528], "some": [0, 1, 25, 33, 178, 192, 299, 300, 303, 305, 306, 307, 318, 319, 322, 328, 414, 474, 489, 492, 493, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 529, 532, 533, 534, 535, 536, 538, 539, 540, 545, 546], "still": [0, 1, 13, 25, 36, 324, 372, 492, 498, 500, 503, 508, 511, 512, 518, 519, 521, 523, 529, 533, 536, 539, 545], "develop": [0, 1, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 505, 507, 522, 532, 533, 534, 537, 538, 539, 540, 541, 544, 545, 546], "account": [0, 8, 15, 31, 38, 326, 391, 473, 499, 507, 511, 519], "point": [0, 5, 7, 8, 13, 17, 19, 21, 28, 30, 31, 36, 40, 44, 65, 66, 67, 72, 74, 76, 83, 87, 91, 104, 108, 112, 118, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 177, 178, 179, 190, 191, 192, 193, 194, 205, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 314, 316, 317, 319, 324, 330, 332, 333, 334, 351, 353, 356, 357, 358, 360, 363, 364, 365, 368, 369, 370, 371, 372, 376, 379, 425, 426, 434, 435, 436, 437, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 482, 493, 498, 499, 500, 502, 503, 505, 507, 510, 511, 514, 518, 519, 521, 522, 523, 525, 527, 528, 532, 545], "wip": 0, "ll": [0, 1, 489, 493, 494, 499, 500, 505, 510, 517, 518, 528], "soon": [0, 500, 507, 508, 531, 533], "control": [0, 8, 31, 324, 354, 472, 506, 508, 517, 518, 519, 520, 523, 527, 528, 532, 534, 539, 545], "flow": [0, 506, 532, 539, 540], "built": [0, 65, 316, 474, 475, 489, 499, 500, 505, 506, 521, 526, 534, 538, 539, 543], "moment": [0, 1, 10, 33, 299, 300, 305, 322, 477, 498, 504, 533], "condit": [0, 18, 31, 41, 328, 331, 413, 414, 433, 460, 502, 508, 510, 512, 515, 516, 518, 532], "branch": [0, 162, 319, 500, 502, 507, 533, 539], "loop": [0, 23, 46, 327, 400, 401, 402, 489, 504, 513, 533], "regist": [0, 500], "correctli": [0, 1, 8, 13, 18, 31, 36, 41, 324, 331, 363, 429, 498, 499, 500, 503, 506, 508, 510, 512, 513, 514, 518, 520, 521, 523, 529, 533], "while": [0, 8, 12, 25, 31, 35, 48, 82, 117, 196, 197, 316, 317, 319, 323, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 434, 445, 448, 456, 491, 492, 498, 499, 500, 503, 504, 505, 507, 508, 510, 513, 514, 515, 517, 518, 519, 520, 521, 523, 527, 529, 530, 533, 539, 545, 546], "your": [0, 1, 489, 492, 493, 494, 495, 497, 498, 499, 502, 505, 507, 511, 517, 522, 523, 528, 529, 533, 539], "depend": [0, 4, 5, 9, 13, 19, 20, 28, 36, 43, 44, 71, 91, 155, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 211, 212, 216, 217, 284, 316, 317, 319, 321, 324, 331, 333, 356, 357, 369, 370, 371, 372, 433, 438, 440, 450, 489, 492, 495, 496, 498, 499, 500, 505, 508, 511, 516, 518, 519, 520, 521, 523, 525, 533, 537, 539, 540], "chang": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 326, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 368, 369, 370, 372, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 415, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 489, 493, 495, 498, 499, 500, 502, 504, 505, 506, 507, 508, 510, 511, 519, 520, 521, 522, 523, 525, 529, 533, 542, 545], "number": [0, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 22, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 45, 47, 48, 65, 74, 77, 78, 79, 80, 81, 82, 92, 97, 98, 99, 100, 101, 103, 104, 107, 110, 111, 112, 113, 115, 118, 141, 142, 143, 158, 162, 170, 174, 179, 180, 187, 199, 200, 205, 208, 209, 210, 218, 235, 244, 247, 267, 282, 283, 289, 297, 298, 314, 316, 317, 318, 319, 321, 323, 324, 326, 327, 330, 331, 332, 334, 335, 336, 343, 344, 346, 349, 356, 357, 358, 365, 370, 372, 377, 378, 384, 386, 387, 389, 390, 392, 393, 395, 397, 399, 400, 401, 402, 423, 427, 432, 434, 435, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 460, 464, 469, 472, 473, 474, 489, 490, 491, 499, 500, 506, 507, 508, 509, 510, 517, 518, 521, 523, 525, 528], "underli": [0, 8, 15, 31, 38, 164, 167, 169, 198, 319, 324, 326, 370, 391, 506, 523, 539], "piec": [0, 500, 503, 515, 516, 525, 535, 537], "insid": [0, 48, 456, 499, 500, 503, 506, 508, 516, 521, 522, 545], "said": [0, 460, 493], "other": [0, 1, 5, 8, 9, 15, 21, 25, 28, 30, 31, 32, 38, 44, 47, 48, 65, 82, 92, 117, 178, 192, 200, 220, 221, 316, 317, 319, 321, 330, 334, 385, 395, 426, 448, 450, 489, 492, 495, 498, 499, 500, 502, 503, 506, 507, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 545, 546], "numpi": [0, 1, 8, 9, 21, 31, 32, 114, 132, 224, 256, 282, 284, 288, 317, 318, 321, 334, 443, 453, 455, 482, 489, 491, 492, 497, 498, 499, 500, 502, 503, 504, 507, 508, 509, 512, 514, 518, 520, 521, 522, 523, 525, 527, 530, 534, 541, 546], "len": [0, 4, 8, 13, 31, 36, 80, 316, 324, 377, 489, 506, 507, 518, 519, 521, 527, 530], "incorrectli": [0, 511], "There": [0, 460, 489, 491, 498, 499, 500, 502, 503, 505, 506, 508, 510, 512, 513, 515, 517, 519, 520, 525, 528, 533, 540, 541, 545, 546], "succe": [0, 499], "hide": 0, "shouldn": [0, 522], "realli": [0, 499, 506, 533, 544, 545], "check": [0, 3, 5, 9, 25, 28, 32, 95, 96, 105, 106, 109, 111, 112, 115, 130, 137, 138, 144, 154, 224, 234, 236, 237, 246, 252, 258, 259, 260, 261, 275, 284, 293, 297, 317, 318, 321, 324, 328, 357, 358, 403, 404, 413, 414, 415, 453, 472, 489, 496, 497, 498, 499, 500, 502, 506, 507, 510, 512, 515, 516, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529], "recommend": [0, 196, 197, 208, 319, 334, 445, 448, 499, 500, 504, 505, 517], "nois": [0, 1, 489], "anoth": [0, 1, 75, 92, 94, 316, 317, 489, 492, 498, 499, 500, 505, 506, 508, 512, 515, 516, 518, 519, 521, 523, 525, 527, 530, 534, 539, 545], "right": [0, 13, 25, 36, 48, 166, 168, 231, 319, 321, 324, 333, 372, 377, 439, 494, 499, 500, 501, 502, 510, 523, 528], "feel": [0, 47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "free": [0, 47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 495, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "open": [0, 1, 17, 40, 65, 316, 330, 424, 426, 489, 491, 492, 493, 494, 499, 500, 505, 508, 511, 519, 520, 523, 532, 537, 538, 539, 541, 542], "issu": [0, 473, 493, 494, 497, 498, 499, 502, 504, 507, 508, 510, 512, 519, 521, 522, 525, 529, 533], "minim": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 368, 369, 370, 372, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 511, 518, 520, 523, 525, 537, 545], "resnet50": 0, "hug": 0, "face": [0, 499, 517, 523, 525, 539, 545], "classifi": [0, 1, 489], "breed": 0, "cat": [0, 1, 520, 523, 525, 530], "transform": [0, 1, 8, 12, 31, 35, 323, 347, 458, 461, 489, 521, 530, 532, 534, 537, 539, 540, 541], "autoimageprocessor": [0, 1], "resnetforimageclassif": [0, 1], "dataset": [0, 1, 25, 489, 528, 531], "load_dataset": [0, 1], "download": [0, 1, 499, 521], "imag": [0, 1, 8, 12, 31, 35, 231, 321, 323, 336, 337, 338, 339, 340, 343, 344, 345, 489, 495, 499, 522, 523, 525, 526, 528, 530, 532, 539], "huggingfac": [0, 1], "test": [0, 1, 7, 8, 9, 22, 30, 31, 32, 45, 110, 113, 184, 185, 186, 187, 262, 317, 319, 321, 335, 451, 452, 453, 456, 459, 489, 493, 497, 498, 501, 505, 508, 510, 512, 513, 516, 519, 522, 533, 539], "image_processor": [0, 1], "from_pretrain": [0, 1], "microsoft": [0, 1, 492, 539, 544, 546], "resnet": [0, 1], "50": [0, 1, 8, 21, 30, 31, 32, 173, 206, 233, 239, 254, 255, 270, 282, 319, 321, 324, 328, 331, 334, 360, 367, 404, 406, 432, 443, 458, 461, 517, 527], "preprocess": 0, "return_tensor": [0, 1], "pt": 0, "normal": [0, 8, 16, 17, 31, 39, 40, 326, 329, 330, 385, 395, 422, 423, 425, 473, 476, 489, 498, 518, 519, 523, 528, 537], "feed": [0, 149, 318, 539, 540], "itself": [0, 8, 221, 290, 321, 328, 415, 491, 499, 500, 502, 505, 506, 507, 512, 518, 519, 529, 532, 533, 538, 539, 540, 545], "without": [0, 19, 25, 248, 276, 290, 321, 326, 328, 332, 391, 404, 434, 435, 436, 437, 458, 461, 500, 503, 506, 507, 508, 509, 510, 512, 513, 514, 515, 519, 521, 522, 523, 527, 528, 529, 532, 533, 536, 539, 540, 541, 545], "pytorch": [0, 1, 209, 319, 477, 489, 492, 493, 497, 498, 503, 508, 509, 512, 514, 515, 518, 519, 520, 522, 523, 525, 530, 533, 534, 540, 542, 543, 545, 546], "no_grad": 0, "logit": [0, 8, 14, 31, 37, 325, 383, 489], "With": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 91, 92, 93, 94, 96, 102, 103, 104, 107, 113, 118, 119, 120, 121, 122, 132, 135, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 230, 231, 232, 233, 234, 238, 239, 247, 252, 254, 255, 256, 269, 270, 282, 284, 286, 288, 289, 297, 298, 299, 300, 301, 303, 304, 305, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 358, 360, 362, 363, 364, 365, 366, 370, 372, 373, 374, 376, 377, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 492, 493, 499, 510, 516, 519, 521, 523, 525, 539, 542], "compiled_graph": 0, "our": [0, 23, 46, 47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 460, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 512, 513, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 544, 545], "predicted_label": 0, "argmax": [0, 18, 41, 331, 489, 519], "item": [0, 3, 9, 23, 25, 31, 32, 98, 134, 228, 238, 239, 249, 282, 283, 310, 317, 318, 321, 322, 328, 408, 409, 410, 411, 415, 420, 421, 475, 489, 498, 506, 508, 525, 527, 528, 530], "config": [0, 25, 328, 416, 495, 499, 502, 505, 507, 528, 540], "id2label": 0, "compil": [1, 455, 464, 475, 477, 489, 506, 519, 522, 523, 524, 526, 533, 534, 535, 538, 539, 540, 543, 546], "convert": [1, 3, 4, 7, 26, 27, 30, 66, 67, 81, 89, 90, 131, 132, 133, 134, 144, 151, 154, 173, 206, 271, 285, 287, 288, 289, 291, 316, 317, 318, 319, 321, 324, 328, 380, 404, 415, 416, 455, 482, 489, 493, 498, 503, 516, 517, 519, 521, 525, 533, 534, 537, 538, 545], "written": [1, 489, 491, 499, 502, 503, 505, 511, 514, 518, 519, 522, 525, 527, 530, 533, 537, 539, 543, 545, 546], "choic": [1, 21, 44, 334, 448, 450, 489, 493, 499, 518, 519, 528, 539, 546], "preserv": [1, 8, 9, 10, 25, 31, 32, 33, 48, 256, 309, 321, 322, 326, 388, 458, 521, 530, 533], "logic": [1, 22, 45, 141, 195, 196, 197, 318, 319, 335, 451, 452, 498, 503, 507, 508, 509, 512, 516, 517, 518, 519, 521, 523, 527], "target": [1, 133, 318, 475, 481, 489, 499, 501, 520, 522, 524, 528, 529, 530, 535, 537, 538, 539, 542, 544, 545], "optim": [1, 10, 33, 222, 307, 321, 322, 327, 400, 401, 402, 473, 489, 493, 518, 526, 528, 530, 532, 537, 538, 539, 540, 541, 542, 543, 546], "tool": [1, 489, 490, 493, 500, 510, 526, 530, 532, 533, 537, 538, 539, 540, 542, 545, 546], "make": [1, 482, 489, 492, 493, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 537, 539, 540, 541, 542, 545, 546], "ml": [1, 489, 490, 492, 493, 494, 497, 519, 524, 525, 526, 528, 529, 530, 532, 535, 536, 537, 538, 539, 542, 544, 546], "relat": [1, 489, 495, 497, 499, 500, 512, 513, 519, 521, 522, 523, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "project": [1, 489, 491, 492, 493, 496, 499, 500, 503, 504, 505, 521, 529, 532, 533, 535, 537, 539, 542, 546], "independ": [1, 8, 17, 31, 40, 324, 330, 352, 371, 423, 489, 502, 508, 510, 516, 525, 530, 537], "want": [1, 8, 23, 46, 472, 475, 489, 492, 494, 496, 498, 499, 500, 505, 507, 512, 515, 516, 517, 518, 521, 523, 528, 529, 530, 533], "research": [1, 489, 491, 532, 539, 546], "deploi": [1, 489, 507, 534, 537, 538, 539, 541, 545], "system": [1, 324, 371, 489, 499, 500, 504, 507, 508, 533, 537, 539, 542, 544, 546], "build": [1, 19, 332, 434, 435, 436, 437, 474, 475, 489, 492, 494, 495, 499, 501, 507, 508, 515, 517, 524, 526, 529, 530, 533, 534, 537, 539, 541, 544, 545, 546], "block": [1, 312, 322, 489, 500, 503, 506, 512, 513, 515, 521, 524, 526, 530, 533, 534, 544, 546], "neural": [1, 323, 470, 474, 489, 532, 535, 537, 538, 539, 543, 545, 546], "network": [1, 323, 347, 470, 472, 473, 474, 475, 489, 492, 506, 515, 525, 529, 532, 535, 537, 538, 539, 543, 545, 546], "layer": [1, 8, 16, 31, 39, 329, 348, 349, 422, 472, 473, 475, 476, 477, 478, 489, 491, 505, 511, 519, 522, 523, 525, 526, 529, 537, 539, 543, 546], "activ": [1, 8, 9, 23, 31, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 284, 473, 489, 495, 499, 500, 522, 529, 539, 542], "train": [1, 8, 10, 12, 31, 33, 35, 299, 300, 305, 322, 323, 346, 473, 489, 493, 506, 509, 515, 528, 529, 530, 531, 532, 533, 534, 537, 538, 543, 545, 546], "pipelin": [1, 489, 491, 496, 501, 502, 503, 520, 530, 534, 539, 540, 545], "publish": [1, 489, 493, 533], "ex": [1, 458, 459, 460, 461, 464, 507], "haiku": [1, 471, 489, 493, 530, 539], "get": [1, 6, 13, 25, 29, 36, 42, 102, 103, 104, 107, 134, 135, 136, 139, 144, 148, 151, 154, 222, 240, 241, 242, 244, 245, 246, 248, 250, 251, 268, 281, 313, 317, 318, 321, 324, 328, 379, 405, 437, 472, 473, 474, 489, 493, 494, 497, 498, 499, 501, 505, 507, 508, 509, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 534, 539, 545], "access": [1, 25, 498, 499, 500, 507, 508, 518, 519, 539, 541, 543], "latest": [1, 7, 30, 94, 184, 197, 209, 317, 319, 324, 326, 334, 370, 399, 448, 474, 489, 498, 499, 500, 504, 507, 508, 511, 522, 533, 544], "integr": [1, 5, 8, 28, 30, 91, 317, 489, 497, 499, 501, 537, 539, 541, 542, 543], "kornia": [1, 489], "advantag": [1, 489, 500, 518, 519, 539], "featur": [1, 8, 31, 473, 489, 499, 500, 503, 514, 519, 522, 523, 528, 533, 539, 540, 541, 545], "tensorflow": [1, 8, 9, 31, 132, 284, 318, 321, 453, 464, 482, 489, 492, 493, 497, 498, 499, 500, 502, 507, 508, 509, 514, 518, 519, 520, 521, 522, 523, 525, 530, 533, 534, 537, 540, 542, 543, 545, 546], "deploy": [1, 499, 538, 541, 542, 545, 546], "definit": [1, 8, 13, 30, 36, 324, 351, 489, 500, 503, 508, 515, 527], "job": [1, 489, 507], "graph": [1, 19, 332, 434, 435, 436, 437, 464, 475, 489, 493, 506, 515, 519, 523, 526, 533, 534, 535, 539, 542], "leverag": [1, 489, 518, 537, 539], "frontend": [1, 3, 272, 321, 455, 456, 459, 464, 489, 497, 500, 501, 507, 508, 512, 517, 521, 522, 523, 524, 526, 534, 539], "link": [1, 489, 495, 498, 499, 500, 505, 507, 508, 519, 521, 535, 537], "one": [1, 4, 8, 9, 12, 13, 15, 18, 19, 21, 25, 27, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 65, 71, 80, 82, 92, 94, 149, 168, 194, 199, 200, 220, 265, 269, 270, 272, 286, 288, 289, 297, 299, 300, 303, 305, 307, 309, 316, 317, 318, 319, 321, 322, 323, 324, 326, 329, 331, 332, 334, 337, 338, 339, 340, 341, 342, 345, 359, 362, 363, 367, 369, 378, 379, 387, 388, 389, 392, 394, 398, 422, 429, 432, 434, 435, 436, 437, 441, 443, 458, 460, 479, 482, 489, 492, 493, 498, 499, 500, 502, 503, 504, 505, 506, 508, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 527, 528, 530, 533, 539, 540, 542, 545], "swap": [1, 15, 38, 326, 396, 482], "equival": [1, 13, 36, 65, 168, 196, 197, 208, 316, 319, 324, 365, 368, 371, 379, 482, 518, 519, 523, 528, 530], "replac": [1, 8, 9, 15, 17, 25, 31, 32, 38, 40, 74, 269, 270, 316, 321, 326, 330, 384, 423, 458, 492, 500, 505, 506, 508, 509, 510, 516, 519, 521, 527, 530, 533, 546], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 507, 519, 538, 539, 540, 541, 542], "debug_mod": 1, "params_v": [1, 489], "must": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 269, 270, 298, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 473, 477, 479, 491, 493, 495, 497, 498, 499, 500, 502, 503, 507, 508, 509, 510, 511, 512, 514, 515, 518, 519, 521, 522, 523, 525, 529, 530, 540, 546], "unless": [1, 4, 8, 13, 27, 31, 82, 316, 324, 365, 504, 509, 518, 533], "explicitli": [1, 324, 357, 358, 455, 474, 475, 502, 503, 504, 506, 508, 511, 512, 515, 516, 517, 518, 520, 521, 525, 533, 539], "nn": [1, 80, 316, 489, 515, 520, 523, 530, 540], "kera": [1, 471, 489, 493, 545], "hk": [1, 489, 530], "trainabl": [1, 471, 475, 478, 489, 511, 526, 528, 529], "transpile_kwarg": 1, "It": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 269, 270, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 365, 366, 367, 368, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 437, 438, 440, 441, 442, 445, 447, 448, 450, 451, 452, 473, 489, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 537, 539, 540, 542, 543, 544, 545, 546], "alia": [1, 314, 498, 519], "similar": [1, 208, 319, 323, 349, 474, 491, 498, 499, 506, 508, 509, 512, 515, 516, 517, 519, 520, 521, 522, 528, 533, 535, 536, 537, 538, 545], "instantli": [1, 489], "proper": [1, 489, 498, 519], "arrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 124, 134, 135, 139, 143, 145, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 247, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 277, 278, 280, 282, 283, 284, 286, 288, 289, 290, 291, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 415, 416, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 460, 464, 473, 474, 478, 482, 486, 489, 498, 499, 500, 501, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 534, 537, 538, 539, 541, 545, 546], "either": [1, 7, 8, 9, 12, 21, 25, 30, 31, 32, 35, 36, 75, 158, 162, 185, 190, 191, 193, 194, 208, 210, 211, 216, 230, 258, 265, 266, 290, 316, 319, 321, 323, 324, 327, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 362, 367, 370, 400, 401, 402, 441, 442, 447, 449, 460, 472, 474, 475, 482, 498, 499, 500, 504, 506, 508, 509, 510, 511, 512, 515, 518, 519, 520, 521, 523, 525, 528, 533, 539], "snippet": [1, 521], "test_fn": [1, 62, 64, 315, 456, 489], "x1": [1, 5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 43, 47, 48, 74, 84, 88, 92, 102, 117, 124, 143, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 215, 219, 220, 223, 316, 317, 318, 319, 321, 324, 331, 333, 352, 359, 362, 367, 371, 374, 375, 378, 433, 439, 455, 479, 489, 502, 508, 510, 512, 514, 518, 519], "effici": [1, 489, 499, 500, 506, 513, 515, 516, 518, 521, 525, 528, 533, 539, 541, 542], "ret": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 280, 282, 283, 284, 285, 286, 287, 288, 289, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 459, 461, 471, 472, 475, 477, 482, 486, 489, 511, 512, 517, 518, 519, 520, 522, 525, 530], "entir": [1, 21, 22, 25, 32, 44, 45, 149, 252, 318, 334, 335, 444, 445, 446, 447, 448, 449, 450, 451, 452, 474, 492, 493, 498, 499, 500, 502, 503, 506, 508, 510, 512, 518, 519, 520, 521, 523, 525, 528, 529, 530, 533, 539, 545, 546], "just": [1, 21, 334, 443, 464, 474, 489, 492, 493, 499, 500, 502, 504, 507, 508, 510, 511, 515, 516, 518, 519, 520, 521, 525, 527, 528, 533, 539, 540, 545], "line": [1, 489, 493, 499, 502, 503, 507, 510, 512, 513, 516, 519, 521, 523, 526, 527, 528, 529, 531, 542], "request": [1, 8, 141, 318, 489, 493, 494, 498, 510, 522, 523], "jnp": [1, 489, 508, 509, 512, 514, 518, 522, 525, 530], "pil": [1, 489], "jax_kornia": [1, 489], "url": [1, 489], "http": [1, 7, 30, 33, 94, 184, 197, 201, 209, 299, 300, 317, 319, 322, 324, 326, 334, 370, 380, 399, 448, 489, 495, 496, 499, 502, 505, 507, 508, 511], "cocodataset": [1, 489], "org": [1, 7, 30, 33, 94, 184, 197, 209, 299, 300, 317, 319, 322, 324, 326, 334, 370, 380, 399, 448, 489, 511], "train2017": [1, 489], "000000000034": [1, 489], "jpg": [1, 489], "raw_img": [1, 489], "stream": [1, 6, 29, 150, 318, 489, 543], "raw": [1, 25, 489, 511, 540], "format": [1, 6, 21, 24, 25, 26, 29, 60, 102, 135, 231, 313, 317, 318, 321, 323, 334, 336, 343, 344, 443, 453, 489, 501, 508, 509, 510, 511, 512, 519, 525, 527, 528, 535, 537, 539, 540], "img": [1, 489, 528], "transpos": [1, 8, 12, 13, 25, 31, 35, 36, 47, 323, 324, 336, 338, 340, 342, 343, 344, 362, 366, 368, 460, 474, 489, 518, 527, 530], "expand_dim": [1, 15, 38, 323, 326, 345, 489, 519, 525, 528], "255": [1, 12, 31, 35, 168, 319, 345, 489], "version": [1, 2, 8, 31, 52, 298, 321, 324, 357, 358, 455, 482, 489, 491, 492, 493, 499, 500, 505, 507, 508, 511, 518, 520, 525, 545, 546], "enhanc": [1, 489], "5": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 92, 93, 94, 102, 104, 112, 113, 118, 135, 143, 147, 150, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 230, 231, 232, 233, 235, 238, 239, 243, 252, 254, 255, 256, 269, 270, 282, 284, 286, 290, 298, 299, 300, 302, 303, 304, 305, 307, 309, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 366, 367, 368, 370, 372, 373, 374, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 461, 474, 489, 499, 500, 502, 504, 506, 510, 514, 517, 520, 521, 527, 528, 529], "last": [1, 4, 8, 12, 13, 14, 15, 18, 20, 21, 22, 25, 27, 31, 35, 36, 37, 38, 43, 44, 45, 47, 78, 79, 82, 134, 310, 312, 316, 318, 322, 323, 324, 325, 326, 331, 333, 334, 335, 348, 352, 355, 367, 376, 378, 382, 383, 385, 388, 391, 392, 393, 395, 429, 430, 438, 439, 440, 441, 442, 451, 452, 474, 482, 489, 493, 500, 502, 504, 505, 508, 510, 513, 518, 520, 521, 523, 525, 533, 539], "least": [1, 8, 13, 31, 324, 362, 489, 500, 503, 507, 508, 510, 515, 518, 521], "support": [1, 6, 8, 9, 13, 29, 31, 32, 36, 105, 109, 130, 137, 150, 154, 158, 196, 197, 209, 224, 236, 253, 256, 257, 284, 317, 318, 319, 321, 323, 324, 347, 356, 357, 358, 361, 363, 372, 379, 453, 459, 477, 482, 489, 491, 492, 493, 495, 499, 500, 502, 503, 506, 509, 510, 511, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 527, 528, 530, 534, 536, 538, 539, 542, 544, 545, 546], "timm": [1, 489], "pretrain": [1, 489], "mlp_encod": [1, 489], "create_model": [1, 489], "mixer_b16_224": [1, 489], "num_class": [1, 489, 530], "randn": [1, 489], "224": [1, 489], "encod": [1, 9, 32, 235, 321, 489, 492, 528], "__init__": [1, 25, 47, 48, 456, 462, 463, 469, 470, 473, 474, 475, 476, 477, 478, 481, 482, 485, 487, 489, 498, 503, 504, 508, 512, 519, 522, 525, 527, 528, 529, 530], "self": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469, 477, 489, 500, 503, 506, 512, 519, 520, 525, 527, 528, 529, 530], "1000": [1, 4, 27, 79, 316, 489, 528], "super": [1, 8, 31, 489, 512, 515, 525, 528, 529, 530], "fc": [1, 489, 529], "linear": [1, 8, 9, 12, 24, 31, 32, 35, 52, 53, 54, 56, 57, 60, 235, 265, 313, 321, 323, 328, 371, 410, 458, 460, 461, 473, 474, 489, 506, 511, 515, 519, 521, 523, 525, 528, 529, 530, 537, 538, 539, 542], "output_s": [1, 8, 31, 489], "with_bia": [1, 474, 489, 529], "__call__": [1, 455, 474, 475, 489], "_forward_classifi": [1, 489], "standard": [1, 7, 13, 16, 17, 21, 30, 39, 40, 44, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 298, 316, 317, 319, 321, 324, 326, 329, 330, 331, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 385, 387, 388, 389, 391, 392, 394, 395, 399, 422, 425, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 473, 476, 489, 490, 501, 502, 503, 506, 508, 511, 514, 518, 521, 522, 533, 535, 537, 538, 541, 542, 544], "rng_kei": [1, 489], "random": [1, 8, 12, 25, 31, 35, 323, 346, 423, 424, 425, 426, 427, 428, 458, 460, 489, 498, 509, 520, 521, 522, 530, 532, 539], "prngkei": [1, 489, 530], "42": [1, 2, 17, 24, 33, 39, 40, 60, 168, 299, 303, 313, 319, 322, 324, 329, 330, 334, 363, 367, 422, 423, 424, 425, 426, 427, 441, 443, 489, 525, 530], "uniform": [1, 17, 40, 330, 423, 424, 426, 473, 489, 529, 546], "kei": [1, 3, 8, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 321, 323, 327, 328, 337, 338, 339, 340, 346, 347, 349, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 406, 412, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 458, 459, 463, 471, 472, 474, 477, 489, 505, 506, 507, 513, 519, 520, 521, 528, 539, 542, 546], "dtype": [1, 4, 5, 8, 9, 12, 13, 17, 18, 21, 27, 28, 31, 32, 35, 36, 40, 41, 44, 47, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 145, 235, 236, 237, 239, 256, 264, 288, 316, 317, 318, 321, 323, 324, 328, 330, 331, 333, 334, 335, 339, 346, 363, 379, 403, 424, 425, 426, 429, 430, 431, 439, 440, 441, 442, 447, 449, 451, 452, 453, 455, 458, 460, 461, 469, 473, 474, 475, 476, 478, 479, 489, 502, 504, 508, 509, 510, 513, 515, 516, 518, 519, 520, 521, 522, 525, 527], "float32": [1, 4, 5, 9, 12, 27, 28, 32, 35, 44, 79, 82, 84, 88, 89, 90, 94, 99, 102, 103, 104, 105, 108, 111, 112, 113, 118, 121, 127, 256, 288, 316, 317, 321, 323, 324, 339, 341, 345, 379, 455, 458, 489, 508, 510, 520, 521], "forward_classifi": [1, 489], "param": [1, 8, 25, 31, 32, 48, 201, 221, 238, 239, 319, 321, 470, 479, 489, 530], "init": [1, 473, 489, 502, 530], "rng": [1, 489, 530], "mention": [1, 492, 498, 499, 500, 503, 510, 514, 515, 518, 519, 521, 523, 539], "abov": [1, 4, 7, 8, 13, 17, 24, 30, 31, 36, 40, 60, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 256, 289, 309, 313, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 424, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 499, 500, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 525, 527, 528, 529, 530, 539, 544], "exactli": [1, 491, 493, 506, 507, 508, 509, 510, 521, 523], "wai": [1, 489, 491, 492, 496, 497, 498, 499, 502, 503, 504, 505, 507, 508, 518, 519, 520, 521, 523, 527, 528, 529, 530, 533, 541, 545, 546], "transpiled_func": 1, "unified_func": 1, "fashion": [1, 460, 521], "rough": 1, "edg": [1, 8, 15, 31, 38, 326, 384, 386, 399, 461, 502, 521, 539, 541, 545], "These": [1, 8, 31, 324, 356, 357, 489, 491, 492, 493, 495, 497, 498, 499, 500, 502, 506, 508, 510, 511, 513, 514, 515, 518, 519, 521, 522, 525, 526, 528, 529, 530, 533, 534, 539, 543, 545, 546], "subclass": [1, 519, 523], "within": [1, 3, 8, 31, 65, 316, 330, 426, 489, 498, 500, 503, 505, 507, 519, 520, 521, 529, 533, 535, 536, 540], "sequenti": [1, 489, 505, 506, 529], "more": [1, 8, 13, 15, 19, 31, 36, 38, 42, 65, 92, 178, 192, 316, 317, 319, 324, 326, 332, 355, 361, 362, 368, 370, 372, 379, 388, 395, 434, 435, 436, 437, 460, 489, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 537, 538, 539, 540, 541, 542, 545, 546], "complex": [1, 8, 13, 28, 31, 36, 97, 111, 119, 125, 187, 282, 317, 319, 321, 324, 356, 357, 358, 372, 459, 495, 498, 505, 508, 510, 519, 521, 523, 528, 529, 530, 533, 534, 535, 537, 539, 541, 545, 546], "should": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 55, 59, 80, 82, 85, 86, 93, 117, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 256, 298, 300, 303, 305, 306, 307, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 344, 350, 351, 352, 353, 355, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 391, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 449, 450, 455, 456, 460, 470, 471, 472, 473, 474, 475, 476, 477, 478, 490, 492, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 535, 536, 539, 541, 546], "util": [1, 8, 31, 136, 318, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 505, 509, 512, 518, 522, 537, 545, 546], "requir": [1, 8, 25, 31, 213, 319, 324, 326, 356, 357, 358, 395, 458, 464, 471, 495, 496, 498, 499, 503, 505, 507, 508, 509, 510, 511, 512, 514, 516, 519, 520, 521, 522, 523, 525, 527, 533, 539, 545], "state": [1, 12, 35, 125, 126, 127, 128, 129, 241, 242, 250, 281, 291, 293, 294, 295, 317, 321, 323, 348, 456, 470, 471, 472, 473, 474, 475, 476, 477, 478, 489, 492, 499, 505, 508, 511, 512, 514, 519, 521, 524, 525, 526, 528, 532, 545, 546], "mean": [1, 8, 9, 12, 15, 17, 21, 23, 25, 31, 32, 35, 38, 40, 44, 46, 149, 232, 301, 302, 304, 311, 318, 321, 322, 323, 324, 326, 327, 328, 330, 334, 338, 340, 341, 342, 345, 346, 354, 391, 400, 401, 402, 409, 424, 425, 458, 460, 461, 473, 489, 499, 500, 501, 502, 504, 506, 508, 509, 510, 515, 517, 518, 519, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 536, 539], "transformed_with_st": 1, "map": [1, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 303, 309, 321, 328, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 410, 411, 415, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 474, 503, 506, 508, 514, 515, 519, 521, 522, 528, 532, 533, 534, 540], "convolut": [1, 8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474, 537, 539], "n": [1, 4, 8, 12, 13, 15, 17, 18, 21, 22, 30, 31, 35, 36, 38, 40, 41, 44, 45, 47, 80, 85, 86, 316, 323, 324, 326, 328, 330, 331, 334, 335, 336, 337, 338, 339, 341, 343, 345, 349, 355, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 376, 377, 378, 379, 386, 387, 389, 395, 399, 411, 424, 425, 426, 432, 445, 448, 449, 450, 451, 452, 489, 501, 521], "c": [1, 4, 8, 9, 10, 12, 15, 21, 27, 28, 30, 31, 32, 33, 35, 36, 38, 42, 44, 66, 67, 79, 82, 104, 107, 168, 190, 191, 203, 210, 223, 231, 232, 233, 247, 254, 255, 289, 299, 300, 303, 305, 306, 307, 316, 317, 319, 321, 322, 323, 324, 326, 328, 331, 332, 334, 337, 338, 339, 340, 341, 342, 356, 358, 360, 391, 395, 403, 406, 410, 411, 412, 414, 420, 421, 432, 437, 442, 443, 448, 450, 490, 492, 493, 494, 499, 501, 506, 510, 515, 517, 523, 524, 525, 526, 528, 533, 534, 535, 539, 543, 544, 546], "h": [1, 8, 9, 12, 31, 32, 35, 231, 233, 321, 323, 328, 336, 339, 340, 341, 342, 343, 344, 345, 406, 410, 412, 420, 501, 506, 507, 535], "w": [1, 8, 9, 10, 12, 25, 30, 31, 32, 33, 35, 195, 231, 233, 282, 299, 300, 301, 303, 305, 306, 307, 321, 322, 323, 328, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 409, 489, 517, 525, 528, 529], "bigger": 1, "permut": [1, 15, 38, 47, 326, 389, 396], "infer": [1, 4, 8, 9, 12, 15, 27, 31, 32, 35, 38, 65, 67, 73, 76, 77, 81, 84, 88, 97, 98, 99, 100, 101, 247, 280, 316, 317, 321, 323, 326, 346, 391, 482, 501, 504, 505, 508, 509, 516, 521, 525, 530, 537, 538, 541, 543], "correct": [1, 21, 44, 124, 317, 326, 334, 384, 448, 450, 455, 489, 498, 500, 501, 505, 506, 507, 508, 509, 513, 514, 515, 518, 520, 521], "keep": [1, 15, 25, 38, 326, 398, 497, 498, 499, 500, 502, 505, 506, 507, 512, 518, 519, 521, 522, 523, 528, 530], "mind": [1, 498, 503, 506, 521], "well": [1, 32, 252, 321, 324, 371, 460, 489, 496, 500, 505, 507, 508, 512, 518, 519, 520, 521, 529, 530, 532, 538, 539, 540, 544], "hf": 1, "tf_model": 1, "tf_input": 1, "data_class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "_arraywithactiv": [2, 47], "base": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 79, 117, 177, 190, 191, 192, 193, 205, 244, 273, 283, 316, 317, 319, 321, 326, 332, 334, 387, 434, 435, 436, 437, 443, 456, 459, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 485, 487, 489, 500, 502, 506, 507, 508, 512, 514, 516, 517, 518, 520, 521, 522, 523, 525, 532, 539, 544, 546], "abc": [2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 234, 321, 328, 421, 469, 472, 473, 477, 527], "_abc_impl": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "_abc_data": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "gelu": [2, 24, 313, 470, 489], "approxim": [2, 8, 13, 24, 30, 31, 36, 52, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 211, 212, 216, 217, 313, 319, 324, 365, 368, 470, 511, 519], "variant": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 365, 368, 369, 370, 372, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 503, 510, 511, 523], "simpli": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 73, 75, 77, 79, 80, 81, 82, 84, 85, 86, 88, 92, 93, 94, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 299, 300, 303, 305, 306, 307, 309, 319, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 360, 362, 363, 368, 369, 370, 372, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 489, 498, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 518, 519, 520, 521, 523, 525, 529, 530, 533, 534, 540, 545], "docstr": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 104, 107, 111, 112, 118, 135, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 299, 300, 303, 305, 306, 307, 309, 316, 317, 319, 321, 324, 326, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 497, 498, 501, 505, 513, 514, 515, 519, 522], "us": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 46, 48, 52, 79, 82, 91, 103, 105, 106, 116, 117, 137, 138, 140, 144, 147, 148, 149, 150, 152, 154, 159, 167, 190, 191, 194, 195, 196, 197, 199, 200, 209, 213, 225, 236, 237, 244, 245, 254, 255, 265, 273, 274, 282, 283, 299, 300, 305, 306, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 347, 349, 350, 355, 373, 379, 381, 390, 391, 392, 396, 400, 401, 402, 403, 405, 406, 412, 413, 414, 416, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 436, 443, 456, 458, 459, 460, 461, 464, 471, 472, 473, 474, 475, 476, 477, 482, 487, 493, 494, 495, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "write": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 269, 270, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 489, 493, 497, 498, 500, 501, 502, 504, 505, 507, 508, 510, 511, 512, 515, 518, 520, 522, 525, 527, 530, 539, 546], "broadcast": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 231, 232, 233, 238, 239, 256, 269, 270, 299, 300, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 403, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 506, 508, 510, 511, 521, 522, 525], "element": [2, 4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 65, 71, 76, 77, 85, 86, 102, 104, 107, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 226, 227, 238, 239, 262, 264, 282, 283, 284, 288, 289, 312, 313, 316, 319, 321, 322, 323, 324, 326, 328, 330, 331, 332, 333, 334, 335, 346, 352, 354, 356, 357, 362, 367, 369, 370, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 403, 406, 412, 423, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 469, 474, 511, 520, 521, 523, 525, 543], "wise": [2, 7, 8, 13, 24, 30, 31, 36, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 215, 219, 313, 319, 326, 352, 384, 477, 523], "exampl": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 409, 410, 411, 412, 414, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 464, 482, 487, 493, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 515, 516, 518, 519, 521, 522, 525, 527, 528, 529, 530, 532, 533, 536, 537, 540, 542, 545, 546], "6": [2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 54, 58, 59, 66, 67, 76, 77, 80, 81, 84, 88, 92, 93, 102, 104, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 224, 226, 227, 230, 231, 232, 238, 239, 254, 255, 256, 270, 282, 284, 286, 290, 299, 300, 301, 302, 303, 304, 305, 307, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 362, 363, 364, 367, 370, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 414, 421, 422, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 473, 489, 502, 504, 506, 507, 510, 517, 521, 523, 525, 527, 528, 529], "138": [2, 52, 313], "165": [2, 52, 313, 323, 347], "leaky_relu": [2, 24, 313], "alpha": [2, 7, 8, 24, 30, 31, 54, 158, 215, 313, 319, 470, 519, 520], "float": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21, 24, 27, 28, 30, 31, 32, 33, 35, 36, 37, 39, 40, 44, 47, 54, 60, 65, 66, 67, 72, 74, 76, 77, 78, 79, 83, 87, 91, 95, 97, 99, 104, 108, 112, 117, 118, 121, 127, 136, 144, 147, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 226, 227, 235, 244, 245, 248, 252, 273, 274, 276, 282, 283, 297, 299, 300, 303, 305, 306, 307, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 334, 346, 349, 350, 351, 353, 356, 357, 358, 360, 363, 364, 365, 368, 369, 370, 371, 372, 376, 379, 381, 382, 383, 400, 401, 402, 409, 422, 425, 426, 434, 435, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 455, 458, 459, 460, 461, 470, 473, 476, 477, 502, 506, 508, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 525, 527, 529], "slope": [2, 8, 24, 31, 54, 313, 470], "neg": [2, 7, 8, 13, 15, 17, 22, 24, 30, 31, 36, 38, 40, 45, 54, 65, 74, 184, 185, 205, 208, 313, 316, 319, 324, 326, 330, 335, 354, 372, 376, 378, 379, 385, 387, 388, 392, 425, 451, 452, 458, 460, 470, 506, 515, 518], "section": [2, 8, 19, 31, 54, 332, 434, 435, 436, 437, 489, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 528, 529, 535, 542, 545], "leaki": [2, 24, 54, 313, 470], "relu": [2, 8, 23, 24, 31, 54, 313, 470, 489, 520, 528, 529], "39": [2, 7, 8, 17, 24, 30, 31, 33, 40, 54, 160, 177, 190, 192, 194, 299, 313, 319, 322, 324, 334, 367, 425, 443], "85": [2, 17, 24, 30, 33, 35, 40, 48, 54, 159, 168, 169, 206, 282, 303, 313, 319, 321, 322, 323, 330, 347, 424, 425, 426], "17": [2, 8, 24, 30, 31, 32, 33, 35, 40, 48, 54, 55, 79, 158, 174, 194, 201, 232, 255, 299, 301, 313, 316, 319, 321, 322, 323, 324, 328, 330, 337, 346, 347, 355, 373, 411, 424, 425, 426, 428, 506, 510], "log_softmax": [2, 24, 313], "axi": [2, 4, 8, 9, 13, 14, 15, 18, 19, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 41, 42, 43, 44, 45, 55, 59, 78, 79, 82, 149, 231, 238, 298, 313, 316, 318, 321, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 345, 349, 352, 355, 363, 378, 379, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 428, 429, 430, 434, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 479, 506, 508, 510, 512, 514, 515, 518, 519, 521, 523, 525, 527, 530, 532], "ax": [2, 8, 13, 15, 18, 21, 22, 24, 31, 36, 38, 41, 44, 45, 47, 55, 59, 149, 231, 298, 318, 321, 324, 326, 331, 334, 335, 363, 371, 374, 375, 379, 386, 388, 389, 392, 394, 396, 399, 429, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 469, 508, 510, 521, 522, 525, 527], "along": [2, 4, 8, 9, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 55, 59, 78, 79, 149, 231, 238, 316, 318, 321, 324, 325, 326, 327, 330, 331, 333, 334, 335, 367, 376, 378, 379, 382, 383, 385, 388, 389, 390, 392, 393, 395, 397, 398, 400, 401, 402, 428, 429, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 489, 498, 510, 518, 522, 523, 525, 539], "98": [2, 10, 17, 24, 30, 33, 40, 55, 169, 172, 212, 303, 313, 319, 322, 324, 328, 331, 334, 367, 404, 424, 426, 433, 443], "37": [2, 7, 8, 24, 30, 31, 47, 55, 160, 168, 209, 212, 216, 319, 323, 324, 328, 330, 347, 364, 411, 425], "35": [2, 12, 24, 30, 31, 35, 36, 40, 55, 162, 213, 319, 323, 324, 331, 334, 347, 350, 352, 425, 433, 443], "0719": [2, 24, 55], "62": [2, 24, 31, 39, 40, 55, 212, 319, 329, 330, 422, 424, 426], "221": [2, 55], "7": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 54, 55, 56, 57, 58, 65, 66, 67, 78, 81, 82, 104, 107, 136, 155, 158, 160, 164, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 182, 183, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 213, 216, 217, 218, 219, 224, 226, 227, 231, 232, 254, 255, 256, 262, 269, 270, 282, 284, 299, 300, 302, 303, 304, 305, 307, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 342, 345, 346, 347, 349, 350, 352, 353, 354, 355, 358, 362, 364, 367, 370, 372, 373, 374, 376, 377, 381, 382, 383, 384, 387, 388, 393, 395, 396, 398, 403, 404, 411, 422, 423, 424, 425, 426, 428, 433, 434, 436, 438, 440, 441, 442, 443, 445, 447, 449, 450, 458, 500, 506, 507, 510, 515, 517, 518, 521], "82": [2, 7, 33, 40, 55, 160, 299, 322, 425, 426, 512], "mish": [2, 24, 313, 470], "30340147": [2, 56, 313], "86509842": [2, 24, 56, 313], "sigmoid": [2, 8, 24, 31, 51, 53, 313, 489, 525, 528, 529], "269": [2, 58, 313], "731": [2, 58, 313], "881": [2, 7, 30, 58, 160, 173, 206, 313, 319], "softmax": [2, 12, 23, 24, 35, 313, 323, 349, 350, 470, 489], "422": [2, 59, 313], "155": [2, 35, 59, 313, 323, 347], "softplu": [2, 24, 313, 470, 523], "beta": [2, 8, 16, 24, 31, 39, 60, 313, 329, 422, 523], "threshold": [2, 7, 8, 24, 30, 31, 60, 199, 200, 313, 319, 523], "3461": [2, 24, 60, 313], "6491": [2, 24, 60, 313], "535": [2, 24, 60, 313], "22": [2, 7, 8, 9, 17, 21, 24, 31, 32, 35, 40, 55, 60, 169, 232, 270, 297, 313, 319, 323, 324, 328, 331, 334, 346, 347, 355, 360, 367, 411, 421, 424, 425, 426, 433, 442, 443, 506], "09": [2, 7, 33, 40, 60, 205, 214, 299, 313, 319, 322, 323, 350, 425], "31": [2, 7, 8, 30, 31, 32, 35, 40, 55, 60, 79, 168, 194, 201, 226, 313, 316, 319, 321, 324, 347, 373, 425, 426, 528], "55": [2, 40, 60, 168, 218, 254, 319, 321, 324, 330, 334, 360, 367, 373, 425, 426, 443, 502], "13": [2, 7, 8, 12, 17, 21, 30, 31, 32, 33, 35, 38, 40, 44, 47, 60, 107, 136, 158, 169, 172, 180, 205, 213, 226, 227, 231, 232, 255, 274, 282, 299, 313, 317, 318, 319, 321, 322, 323, 324, 326, 331, 332, 334, 337, 338, 346, 347, 350, 355, 367, 373, 398, 424, 425, 426, 433, 434, 441, 442, 443, 506, 510], "collect": [3, 25, 26, 313, 318, 321, 322, 323, 325, 328, 329, 330, 416, 470, 474, 476, 477, 507, 512, 517, 520, 521, 532, 537, 539, 542], "accept": [3, 4, 7, 13, 26, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 232, 233, 238, 247, 252, 254, 256, 269, 284, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 499, 500, 503, 506, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 534, 537], "_to_ivi": 3, "_to_n": 3, "inplac": [3, 9, 25, 32, 222, 224, 253, 256, 257, 321, 328, 410, 411, 415, 420, 421, 463, 464, 471, 477, 501, 503, 510, 514, 516, 519, 523, 527, 529], "args_to_ivi": 3, "include_deriv": [3, 26, 328, 404, 415, 455], "form": [3, 4, 13, 25, 27, 36, 66, 67, 81, 85, 86, 221, 285, 287, 316, 321, 323, 324, 328, 351, 353, 355, 356, 357, 358, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 404, 415, 473, 492, 494, 515, 521, 523, 529, 530, 539, 540, 545], "nest": [3, 25, 26, 48, 286, 298, 301, 312, 321, 322, 327, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 472, 475, 477, 503, 505, 506, 515, 517, 522, 528, 529, 533, 534, 539], "unchang": [3, 8, 323, 346], "recurs": [3, 25, 26, 105, 106, 137, 138, 236, 237, 317, 318, 321, 328, 403, 404, 413, 414, 415, 499, 502, 505, 506, 515, 518, 529, 533], "deriv": [3, 4, 8, 10, 26, 27, 31, 33, 73, 77, 84, 88, 299, 300, 303, 304, 305, 306, 307, 316, 322, 328, 404, 415, 475, 477, 478, 508, 509, 527, 529], "word": [3, 65, 316, 330, 426, 471, 506, 519, 534], "args_to_n": [3, 518], "cont_inplac": 3, "updat": [3, 9, 10, 25, 32, 33, 256, 269, 270, 299, 300, 303, 305, 306, 307, 321, 322, 323, 327, 328, 346, 348, 400, 401, 410, 411, 415, 420, 421, 464, 471, 477, 482, 489, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 514, 516, 517, 519, 520, 521, 523, 525, 527, 528, 530, 533], "place": [3, 4, 7, 8, 9, 13, 15, 25, 27, 29, 30, 31, 32, 38, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 110, 113, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 232, 233, 238, 247, 252, 254, 255, 256, 269, 284, 289, 309, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 477, 489, 495, 497, 500, 501, 502, 505, 506, 507, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 530, 534, 541], "to_ivi": [3, 26, 328, 416, 518], "leaf": [3, 25, 44, 328, 413, 414, 416, 442, 506, 515, 528], "nativearrai": [3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 71, 73, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 107, 110, 111, 112, 113, 115, 117, 118, 124, 134, 135, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 240, 243, 247, 252, 254, 255, 256, 259, 261, 262, 264, 269, 270, 271, 280, 282, 283, 284, 286, 288, 289, 291, 297, 299, 300, 301, 303, 305, 306, 307, 309, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 410, 411, 412, 415, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469, 478, 503, 506, 510, 512, 513, 514, 515, 516, 518, 519, 522, 525, 527, 534], "manner": [3, 26, 328, 415, 491, 499, 509, 511, 519, 522, 528, 532, 533, 535, 537, 545, 546], "travers": [3, 26, 328, 415, 506, 508, 512, 525], "lowest": [3, 17, 26, 40, 328, 330, 415, 424, 515, 533, 534, 536, 540, 544], "leav": [3, 26, 28, 30, 31, 32, 35, 36, 38, 44, 48, 104, 107, 174, 235, 286, 326, 328, 342, 350, 355, 372, 386, 390, 395, 397, 398, 403, 404, 413, 414, 415, 416, 441, 442, 463, 489, 498, 506, 508, 510, 511, 514, 515, 518, 519, 521, 528, 529], "search": [3, 8, 26, 31, 429, 430, 464, 491, 497, 499, 505, 506, 510, 521, 522], "to_n": [3, 26, 525], "mayb": [3, 489, 499, 507, 525, 527], "_arraywithcr": [4, 47], "asarrai": [4, 8, 9, 27, 31, 32, 66, 231, 247, 254, 255, 282, 316, 321, 323, 332, 337, 435, 516, 519, 520], "devic": [4, 8, 17, 25, 27, 31, 40, 47, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 222, 236, 237, 316, 321, 330, 423, 424, 425, 426, 453, 455, 456, 469, 471, 473, 474, 475, 476, 477, 478, 482, 489, 492, 500, 501, 504, 508, 512, 515, 516, 520, 521, 522, 523, 525, 530, 533, 534, 538, 539, 541, 542, 543, 544], "data": [4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 130, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 235, 256, 258, 259, 261, 284, 316, 318, 319, 321, 323, 324, 326, 330, 331, 333, 334, 335, 336, 343, 344, 346, 347, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 385, 388, 389, 391, 392, 394, 395, 399, 424, 425, 426, 428, 429, 430, 432, 433, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 469, 473, 474, 475, 479, 489, 490, 492, 499, 501, 502, 503, 506, 509, 511, 514, 515, 516, 518, 520, 522, 523, 525, 527, 534, 539, 540, 541, 543, 544, 545], "ndarrai": [4, 8, 9, 27, 31, 66, 67, 81, 288, 316, 321, 482, 498, 503, 508, 509, 514, 518, 519, 520, 522, 523, 525, 527, 530, 534], "boolean": [4, 5, 7, 9, 15, 18, 21, 25, 27, 28, 30, 32, 38, 41, 44, 47, 48, 66, 67, 71, 76, 91, 107, 109, 111, 112, 114, 130, 140, 152, 164, 165, 166, 167, 168, 169, 195, 196, 197, 198, 220, 223, 243, 252, 253, 257, 258, 259, 260, 261, 262, 271, 275, 277, 278, 297, 308, 312, 316, 317, 318, 319, 321, 322, 326, 327, 328, 334, 391, 400, 401, 413, 431, 433, 444, 446, 458, 460, 464, 506, 519, 521, 523], "nativedtyp": [4, 5, 8, 12, 13, 17, 18, 21, 27, 31, 36, 40, 41, 44, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 114, 116, 120, 130, 316, 317, 323, 324, 330, 331, 333, 334, 346, 379, 424, 425, 426, 429, 430, 439, 441, 442, 447, 449, 473, 508, 509, 514, 522, 525], "nativedevic": [4, 6, 8, 17, 27, 29, 31, 40, 65, 66, 67, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 132, 133, 134, 135, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 316, 318, 330, 423, 424, 425, 426, 473, 477, 478, 508, 509, 512, 514, 522], "interpret": [4, 8, 27, 31, 66, 67, 81, 316, 507, 540], "9": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 24, 28, 30, 31, 32, 33, 35, 36, 38, 40, 42, 43, 44, 47, 48, 52, 65, 66, 67, 81, 97, 99, 100, 101, 104, 107, 156, 158, 159, 160, 163, 164, 165, 168, 174, 175, 180, 184, 189, 190, 191, 196, 197, 199, 200, 201, 203, 205, 206, 209, 210, 213, 214, 215, 219, 227, 231, 232, 233, 235, 238, 254, 255, 258, 259, 261, 269, 270, 282, 299, 300, 301, 305, 313, 316, 317, 319, 321, 322, 323, 324, 326, 328, 330, 331, 332, 333, 334, 337, 338, 339, 342, 345, 346, 347, 349, 352, 353, 355, 358, 362, 363, 364, 367, 370, 372, 373, 374, 376, 377, 384, 388, 392, 393, 395, 396, 398, 403, 404, 409, 411, 414, 423, 424, 425, 426, 428, 433, 434, 436, 438, 440, 442, 443, 445, 447, 449, 450, 458, 477, 506, 510, 512, 517, 519, 521, 528, 529, 535], "39999998": [4, 66, 67, 316, 332, 435], "5999999": [4, 66, 67, 316, 323, 346], "0999999": [4, 21, 66, 67, 316, 445], "10000038": [4, 66, 67, 316], "np": [4, 8, 30, 31, 32, 66, 67, 71, 81, 114, 187, 282, 316, 317, 319, 321, 328, 409, 455, 482, 489, 498, 503, 508, 509, 512, 514, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 534], "order": [4, 8, 12, 13, 15, 19, 20, 25, 31, 35, 36, 38, 43, 47, 48, 66, 67, 80, 162, 316, 319, 323, 324, 326, 327, 331, 332, 333, 337, 338, 339, 340, 341, 342, 345, 356, 357, 363, 372, 373, 377, 379, 388, 391, 400, 401, 432, 434, 435, 436, 437, 438, 439, 440, 455, 472, 475, 478, 489, 491, 498, 499, 500, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 518, 519, 520, 521, 522, 523, 528, 530, 533, 535, 538, 539, 540, 542, 545], "90786433e": [4, 66, 67, 316], "310": [4, 66, 67, 316], "copy_arrai": [4, 316], "to_ivy_arrai": [4, 71, 316], "empty_lik": [4, 27, 316, 523], "deafult": [4, 18, 41, 73, 316, 331, 429], "uniniti": [4, 72, 73, 316], "from_dlpack": [4, 27, 316], "full_lik": [4, 27, 316, 522], "fill_valu": [4, 18, 27, 41, 76, 77, 183, 189, 316, 319, 331, 432, 479, 508, 520, 522], "scalar": [4, 7, 8, 9, 13, 24, 27, 30, 31, 32, 36, 54, 77, 82, 158, 215, 289, 297, 316, 319, 321, 324, 379, 508, 517, 519, 533, 539], "fill": [4, 8, 17, 18, 25, 27, 31, 40, 41, 72, 76, 77, 79, 82, 83, 84, 87, 88, 316, 330, 331, 424, 432, 473, 520], "equal": [4, 5, 7, 8, 9, 13, 15, 17, 19, 20, 21, 25, 28, 30, 31, 32, 36, 38, 40, 43, 47, 48, 74, 76, 77, 91, 166, 168, 184, 185, 205, 209, 220, 223, 298, 316, 317, 319, 321, 324, 326, 330, 332, 333, 334, 355, 364, 365, 368, 370, 384, 386, 393, 399, 426, 434, 435, 436, 437, 438, 440, 445, 448, 449, 450, 464, 473, 505, 506, 508, 510, 512, 515, 520, 521], "000123": [4, 77, 316], "ones": [4, 8, 10, 12, 17, 25, 27, 31, 35, 40, 74, 77, 82, 84, 88, 137, 138, 170, 299, 316, 318, 319, 322, 323, 341, 424, 425, 426, 489, 503, 507, 510, 514, 521, 527, 528, 539], "linspac": [4, 27, 65, 316, 514, 523, 525, 546], "stop": [4, 10, 27, 33, 65, 78, 79, 149, 300, 303, 305, 306, 307, 309, 316, 318, 322, 327, 328, 400, 401, 402, 414, 477, 514, 517, 523, 525, 533, 539], "num": [4, 27, 78, 79, 316, 458, 500, 514, 525], "endpoint": [4, 27, 78, 79, 316, 473, 514], "logspac": [4, 27, 316, 525], "10": [4, 7, 8, 9, 10, 12, 13, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 65, 77, 78, 79, 157, 164, 165, 168, 172, 178, 183, 189, 191, 201, 206, 212, 213, 225, 231, 232, 233, 235, 238, 239, 243, 248, 254, 255, 262, 270, 276, 282, 294, 305, 316, 319, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 346, 353, 355, 360, 362, 363, 364, 367, 372, 373, 374, 388, 393, 394, 395, 396, 398, 409, 411, 414, 422, 423, 424, 425, 426, 432, 434, 439, 441, 442, 443, 444, 446, 447, 449, 450, 458, 460, 477, 489, 492, 499, 502, 506, 507, 508, 510, 517, 520, 521, 525, 527, 528, 544], "rang": [4, 8, 21, 27, 31, 65, 78, 79, 231, 298, 316, 321, 332, 334, 434, 441, 442, 447, 449, 458, 460, 461, 473, 489, 508, 512, 521, 525, 528, 529, 530, 539, 545], "log": [4, 7, 8, 13, 27, 30, 31, 36, 79, 192, 194, 316, 319, 370, 458, 461, 470, 500, 506, 507, 510, 515, 518, 519, 521, 523, 525, 528], "space": [4, 8, 9, 27, 30, 31, 32, 65, 78, 79, 231, 235, 312, 316, 321, 322, 492, 523], "sequenc": [4, 8, 12, 13, 15, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 52, 54, 55, 56, 57, 58, 59, 60, 72, 74, 77, 79, 82, 83, 84, 87, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 265, 269, 270, 282, 283, 284, 286, 288, 289, 297, 298, 301, 303, 309, 316, 321, 322, 323, 324, 326, 328, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 379, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 398, 399, 403, 410, 420, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 474, 476, 478, 500, 507, 508, 509, 510, 512, 521, 522, 523, 525, 530, 532, 542], "gener": [4, 7, 8, 12, 17, 23, 27, 30, 31, 35, 40, 46, 65, 78, 79, 94, 184, 197, 208, 209, 316, 317, 319, 323, 324, 326, 330, 334, 346, 370, 377, 399, 423, 424, 426, 427, 448, 458, 461, 464, 477, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 522, 524, 525, 527, 529, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545], "relev": [4, 27, 79, 316, 477, 489, 492, 498, 499, 500, 503, 506, 507, 508, 510, 517, 520, 521, 528, 537, 544, 545], "sampl": [4, 8, 17, 21, 27, 30, 31, 40, 44, 78, 79, 316, 330, 334, 423, 424, 425, 426, 448, 450, 474, 516, 520, 521], "on_valu": [4, 27, 79, 82, 316], "off_valu": [4, 27, 79, 82, 316], "cuda": [4, 8, 17, 27, 31, 40, 78, 79, 82, 131, 132, 133, 146, 147, 316, 318, 330, 423, 424, 425, 426, 473, 474, 475, 476, 477, 478, 489, 525, 533, 534, 544], "cpu": [4, 6, 8, 17, 27, 29, 31, 40, 65, 74, 76, 78, 79, 82, 83, 84, 88, 132, 134, 135, 136, 137, 141, 144, 146, 147, 150, 151, 153, 154, 316, 318, 324, 330, 361, 423, 424, 425, 426, 455, 473, 474, 475, 476, 477, 478, 489, 500, 509, 519, 521, 533, 537, 539, 542, 544], "evenli": [4, 8, 12, 15, 25, 27, 30, 35, 38, 65, 78, 79, 316, 323, 326, 336, 337, 338, 339, 341, 343, 345, 393], "descript": [4, 7, 13, 30, 36, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 498, 511, 517, 518], "hint": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 498, 503, 511, 514, 515, 518, 519, 522], "assum": [4, 7, 8, 9, 13, 30, 32, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 262, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 502, 504, 505, 507, 508, 511, 520, 521, 523, 527, 528, 533], "simplic": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 238, 247, 252, 254, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 511, 523, 529, 532], "nestabl": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 232, 233, 238, 247, 252, 254, 256, 269, 284, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 501, 510, 511, 518, 521, 534], "therefor": [4, 7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 94, 110, 113, 117, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 224, 232, 233, 238, 247, 252, 254, 256, 269, 284, 289, 309, 316, 317, 319, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 491, 495, 498, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 515, 518, 519, 520, 521, 522, 523, 525, 527, 529, 533, 536, 539, 545], "01": [4, 8, 9, 10, 31, 32, 33, 36, 40, 79, 194, 209, 210, 235, 282, 299, 300, 305, 316, 319, 321, 322, 324, 330, 358, 373, 425, 426, 458, 504, 530], "02": [4, 10, 16, 17, 30, 33, 40, 79, 159, 160, 194, 282, 299, 300, 305, 316, 319, 321, 322, 329, 330, 422, 425, 426, 520], "03": [4, 7, 10, 30, 33, 40, 79, 172, 192, 282, 300, 305, 316, 319, 321, 322, 323, 324, 350, 360, 425], "04": [4, 10, 24, 28, 33, 54, 55, 79, 104, 178, 273, 299, 300, 305, 313, 316, 317, 319, 321, 322, 323, 350, 458, 521], "05": [4, 7, 8, 10, 16, 30, 31, 33, 39, 79, 194, 244, 254, 273, 299, 300, 305, 316, 319, 321, 322, 324, 329, 363, 422, 453, 458, 476, 520, 521], "464": [4, 7, 40, 79, 161, 162, 316, 319], "15888336": [4, 79, 316], "2154": [4, 79, 316], "43469003": [4, 79, 316], "10000": [4, 27, 79, 316], "meshgrid": [4, 27, 316], "spars": [4, 14, 27, 37, 80, 316, 325, 383], "index": [4, 8, 9, 15, 18, 19, 20, 25, 27, 31, 32, 38, 41, 42, 43, 74, 80, 146, 221, 239, 243, 269, 270, 314, 316, 318, 321, 326, 328, 331, 332, 333, 391, 395, 405, 406, 407, 410, 411, 412, 418, 420, 429, 430, 432, 434, 435, 436, 438, 439, 459, 486, 506, 507, 515, 517, 518, 520, 521, 527, 539], "xy": [4, 27, 80, 316], "dimension": [4, 8, 13, 15, 18, 21, 22, 25, 30, 31, 36, 38, 44, 45, 47, 65, 74, 80, 316, 324, 326, 331, 334, 335, 352, 353, 359, 362, 365, 367, 368, 378, 379, 393, 429, 430, 432, 444, 445, 446, 447, 448, 449, 450, 451, 452, 517, 523, 525, 536, 539, 546], "repres": [4, 7, 8, 12, 13, 30, 31, 35, 36, 72, 80, 82, 83, 87, 103, 157, 158, 160, 163, 172, 212, 217, 312, 316, 317, 319, 322, 323, 324, 346, 347, 367, 370, 371, 460, 473, 503, 523, 527, 536, 537, 540], "grid": [4, 80, 316, 510, 521, 532], "coordin": [4, 7, 18, 30, 31, 41, 80, 162, 316, 319, 331, 432], "numer": [4, 5, 7, 8, 9, 13, 17, 18, 21, 28, 30, 31, 32, 36, 40, 41, 43, 47, 48, 80, 91, 155, 158, 170, 174, 178, 179, 180, 184, 185, 186, 188, 196, 197, 201, 202, 203, 204, 205, 208, 209, 210, 214, 215, 218, 219, 244, 245, 273, 274, 282, 283, 316, 317, 319, 321, 324, 330, 331, 334, 352, 359, 362, 367, 370, 372, 374, 376, 378, 424, 425, 426, 428, 429, 430, 432, 433, 438, 444, 447, 449, 458, 459, 460, 473, 508, 516, 517, 519, 520, 521, 522, 523, 525, 529, 536, 539, 545], "conserv": [4, 80, 316], "cartesian": [4, 80, 316], "matrix": [4, 8, 9, 12, 13, 31, 32, 35, 36, 47, 80, 85, 86, 220, 226, 316, 321, 323, 324, 347, 351, 353, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 380, 460, 473, 474, 498, 508, 515, 519, 537, 539], "ij": [4, 21, 80, 316, 334, 443], "zero": [4, 5, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 27, 28, 30, 31, 33, 35, 36, 40, 41, 44, 45, 54, 56, 57, 71, 72, 74, 80, 82, 84, 85, 86, 88, 91, 92, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 171, 172, 173, 178, 179, 184, 185, 186, 187, 192, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 227, 231, 265, 299, 300, 305, 306, 307, 309, 313, 316, 317, 319, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 347, 350, 351, 353, 358, 360, 361, 362, 363, 364, 365, 366, 368, 370, 378, 379, 386, 387, 388, 389, 392, 399, 422, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 473, 474, 477, 493, 503, 506, 508, 509, 510, 514, 516, 517, 520, 525, 528, 529, 538], "vector": [4, 8, 9, 12, 13, 31, 32, 35, 36, 80, 227, 231, 256, 298, 316, 321, 323, 324, 347, 352, 356, 357, 359, 362, 367, 372, 373, 377, 378, 379, 380, 474, 532, 539], "respect": [4, 7, 8, 10, 13, 30, 31, 33, 36, 80, 155, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 208, 215, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 316, 319, 322, 323, 324, 327, 336, 343, 344, 369, 372, 400, 401, 402, 455, 458, 473, 497, 498, 499, 500, 503, 506, 507, 508, 510, 514, 517, 518, 519, 521, 522, 535, 545], "effect": [4, 8, 10, 21, 31, 33, 44, 80, 299, 307, 316, 322, 334, 448, 450, 458, 461, 492, 498, 503, 506, 507, 511, 514, 518, 523, 533], "ignor": [4, 8, 25, 31, 80, 316, 324, 328, 361, 414, 415, 477, 505, 507, 510, 521, 533, 545], "rank": [4, 8, 13, 15, 22, 31, 36, 38, 45, 80, 316, 324, 326, 331, 335, 352, 354, 365, 369, 371, 376, 378, 379, 386, 387, 395, 398, 399, 432, 451, 452, 512], "length": [4, 8, 15, 25, 31, 38, 48, 65, 80, 298, 316, 321, 324, 326, 332, 372, 373, 391, 434, 458, 472, 513, 521, 528], "ni": [4, 80, 316], "xi": [4, 80, 316], "native_arrai": [4, 5, 7, 9, 27, 29, 30, 32, 43, 52, 55, 77, 80, 82, 84, 88, 91, 92, 93, 94, 102, 107, 113, 135, 143, 150, 164, 168, 169, 173, 174, 175, 180, 182, 183, 188, 189, 196, 201, 203, 206, 208, 213, 220, 258, 259, 261, 288, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 330, 331, 334, 335, 337, 338, 345, 349, 350, 353, 358, 364, 365, 373, 374, 376, 379, 381, 383, 384, 391, 423, 432, 440, 446, 449, 451, 455, 463, 482, 516, 520, 521], "one_hot": [4, 27, 316, 489, 530], "depth": [4, 8, 12, 27, 31, 35, 82, 231, 249, 316, 321, 323, 328, 341, 342, 415, 472, 475, 500, 507, 528, 529, 530, 532], "scatter": [4, 9, 27, 32, 82, 269, 270, 316, 321, 505, 518, 523, 546], "defin": [4, 8, 9, 13, 27, 31, 32, 36, 82, 208, 254, 255, 316, 319, 321, 324, 334, 352, 357, 358, 371, 444, 445, 446, 448, 489, 498, 499, 503, 507, 508, 511, 514, 517, 519, 520, 521, 522, 527, 529, 533, 534, 536, 537, 538, 539, 540, 543, 545, 546], "hot": [4, 27, 82, 316, 489], "dimens": [4, 8, 9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 25, 27, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 55, 59, 82, 85, 86, 231, 232, 233, 235, 247, 280, 298, 313, 316, 321, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 379, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 400, 401, 402, 428, 429, 430, 432, 434, 435, 436, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 469, 474, 510, 512, 515, 517, 519, 520, 521, 523, 525, 528], "overrid": [4, 8, 27, 31, 82, 316, 503, 505], "ones_lik": [4, 27, 316, 504, 530], "tril": [4, 27, 316], "m": [4, 8, 13, 17, 30, 31, 36, 40, 47, 80, 85, 86, 195, 316, 324, 328, 330, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 411, 424, 425, 426, 489, 495, 499, 500, 501, 507, 525], "whose": [4, 7, 8, 9, 13, 15, 19, 21, 27, 30, 31, 32, 36, 38, 42, 44, 47, 77, 85, 86, 157, 160, 163, 171, 172, 173, 205, 206, 211, 212, 216, 217, 225, 284, 316, 319, 321, 324, 326, 332, 334, 351, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 388, 392, 434, 435, 436, 442, 443, 460, 511, 521], "innermost": [4, 13, 36, 85, 86, 316, 324, 351, 353, 355, 356, 357, 358, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376], "two": [4, 8, 13, 19, 31, 32, 36, 47, 48, 65, 74, 80, 85, 86, 116, 124, 168, 181, 209, 223, 316, 317, 319, 321, 324, 326, 332, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 378, 396, 434, 435, 436, 437, 458, 460, 493, 498, 499, 502, 503, 508, 510, 511, 519, 520, 521, 523, 524, 528, 530, 536, 544], "mxn": [4, 13, 36, 85, 86, 316, 324, 355, 363, 365, 366, 368, 369, 373, 376], "matric": [4, 13, 31, 36, 47, 80, 85, 86, 316, 323, 324, 347, 351, 353, 355, 356, 357, 358, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 460, 515, 532, 539], "diagon": [4, 8, 13, 31, 36, 74, 85, 86, 316, 324, 354, 376], "main": [4, 8, 13, 31, 36, 74, 85, 86, 316, 324, 354, 355, 376, 499, 502, 505, 506, 513, 516, 518, 519, 537, 539, 540, 545], "lower": [4, 7, 8, 13, 17, 30, 31, 36, 40, 74, 85, 199, 316, 319, 324, 330, 351, 358, 426, 460, 472, 473, 489, 500, 510, 519, 521, 523, 525, 533, 534, 535, 536, 537, 539, 540, 545, 546], "triangular": [4, 13, 36, 85, 86, 316, 324, 351, 358, 369], "alloc": [4, 5, 28, 85, 86, 91, 316, 317, 498, 500, 533], "triu": [4, 27, 316], "upper": [4, 8, 13, 17, 31, 36, 40, 74, 86, 316, 324, 330, 351, 358, 369, 426, 472, 518, 521], "zeros_lik": [4, 27, 36, 91, 197, 299, 300, 303, 305, 307, 316, 317, 319, 322, 323, 326, 338, 340, 345, 368, 384, 519, 523], "data_typ": [5, 8, 28, 31, 120, 317, 505, 508, 521, 522], "_arraywithdatatyp": [5, 47], "astyp": [5, 12, 28, 35, 317, 323, 339, 341, 345, 489, 508, 518, 519, 523], "irrespect": [5, 13, 28, 36, 91, 317, 324, 372, 506, 518, 527, 546], "promot": [5, 7, 8, 13, 28, 30, 31, 36, 43, 47, 48, 91, 94, 116, 117, 118, 124, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 177, 178, 180, 190, 191, 192, 193, 194, 198, 201, 205, 208, 211, 212, 213, 214, 215, 216, 217, 219, 317, 319, 324, 326, 334, 351, 352, 359, 360, 362, 364, 365, 367, 368, 370, 371, 378, 379, 385, 395, 438, 445, 448, 458, 459, 502, 511, 512, 515], "rule": [5, 8, 13, 28, 30, 31, 36, 91, 94, 116, 117, 118, 163, 174, 201, 208, 219, 317, 319, 324, 326, 351, 352, 359, 364, 367, 371, 385, 460, 502, 503, 506, 507, 508, 510, 513, 514, 515, 517, 521, 523, 540], "cast": [5, 8, 13, 21, 28, 31, 36, 91, 94, 118, 317, 324, 334, 379, 441, 442, 447, 449, 459, 508, 515, 520, 525], "nan": [5, 7, 8, 9, 19, 21, 28, 30, 31, 32, 91, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 177, 178, 179, 181, 184, 186, 190, 191, 192, 193, 194, 196, 205, 206, 208, 209, 211, 212, 213, 216, 217, 218, 252, 297, 314, 317, 319, 321, 332, 334, 335, 434, 435, 436, 437, 444, 445, 446, 448, 449, 450, 451, 452, 458, 461, 502, 508, 511, 517, 522], "infin": [5, 7, 8, 9, 13, 28, 30, 31, 36, 91, 155, 157, 158, 160, 161, 162, 170, 171, 172, 177, 178, 179, 180, 184, 185, 190, 191, 192, 193, 194, 196, 205, 208, 209, 211, 212, 213, 216, 217, 218, 252, 314, 317, 319, 321, 324, 334, 335, 370, 379, 444, 446, 451, 452, 502, 511], "implement": [5, 6, 8, 19, 20, 28, 29, 31, 36, 43, 91, 118, 150, 155, 156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 192, 193, 205, 208, 211, 212, 216, 217, 317, 318, 319, 324, 332, 333, 334, 356, 357, 358, 367, 434, 435, 436, 437, 438, 440, 444, 445, 446, 448, 482, 489, 498, 501, 502, 503, 504, 506, 508, 509, 511, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 542, 545, 546], "match": [5, 8, 25, 28, 31, 91, 208, 265, 317, 319, 321, 453, 498, 503, 505, 506, 510, 519, 520, 540, 545], "newli": [5, 28, 91, 225, 317, 321, 500, 507, 518, 521], "float64": [5, 8, 17, 21, 28, 31, 32, 40, 44, 65, 76, 91, 94, 99, 104, 105, 108, 109, 113, 114, 118, 120, 121, 127, 130, 264, 316, 317, 321, 330, 425, 426, 442, 455, 458, 508, 520, 521], "broadcast_arrai": [5, 28, 317], "against": [5, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 92, 200, 262, 317, 321, 324, 331, 362, 363, 365, 368, 429, 491, 521, 525, 533, 539], "x2": [5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 47, 48, 84, 88, 92, 117, 124, 143, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 199, 200, 201, 203, 205, 208, 215, 219, 220, 316, 317, 318, 319, 321, 324, 331, 352, 359, 362, 367, 371, 374, 375, 378, 433, 455, 479, 502, 508, 510, 512, 514, 518, 519], "x3": [5, 9, 84, 88, 92, 220, 316, 317, 321], "mix": [5, 7, 28, 30, 32, 37, 40, 47, 48, 92, 118, 164, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 198, 201, 203, 208, 234, 238, 239, 256, 286, 289, 317, 319, 321, 323, 324, 325, 326, 329, 331, 334, 337, 339, 342, 345, 347, 349, 350, 351, 374, 381, 383, 384, 422, 433, 443, 445, 448, 501, 510, 516, 518, 521, 523, 525, 534, 539, 543, 545], "broadcast_to": [5, 28, 317, 508], "can_cast": [5, 28, 317, 508, 515, 519], "occur": [5, 8, 19, 28, 31, 42, 94, 317, 331, 332, 429, 430, 434, 435, 436, 437, 502, 507, 512], "accord": [5, 9, 15, 21, 28, 38, 44, 94, 104, 158, 168, 238, 243, 269, 270, 317, 319, 321, 324, 326, 334, 378, 386, 399, 448, 450, 460, 479, 498, 499, 502, 508, 515, 519, 521], "as_n": [5, 6, 25, 28, 29, 97, 98, 99, 100, 101, 102, 108, 134, 135, 146, 317, 318, 508], "int32": [5, 9, 17, 18, 21, 28, 32, 40, 41, 74, 84, 88, 91, 94, 96, 100, 102, 105, 107, 108, 112, 113, 114, 118, 122, 126, 128, 145, 239, 256, 288, 316, 317, 318, 321, 330, 331, 334, 424, 425, 426, 430, 441, 442, 447, 449, 458, 508, 519, 521, 525], "finfo": [5, 28, 317, 521], "inform": [5, 10, 28, 33, 104, 107, 221, 309, 317, 321, 322, 489, 497, 498, 499, 500, 502, 506, 507, 512, 518, 521, 542], "about": [5, 28, 104, 107, 317, 489, 493, 496, 497, 498, 499, 500, 501, 502, 505, 507, 508, 514, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 540, 541, 544], "8": [5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 52, 58, 76, 77, 81, 84, 88, 97, 99, 100, 101, 104, 136, 151, 158, 159, 160, 164, 165, 168, 170, 172, 180, 182, 183, 188, 189, 194, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 213, 214, 217, 218, 224, 225, 227, 231, 232, 235, 238, 247, 254, 255, 256, 258, 259, 261, 264, 269, 270, 282, 284, 299, 302, 304, 307, 311, 313, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 341, 342, 345, 346, 347, 349, 353, 354, 355, 358, 362, 363, 364, 367, 370, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 388, 395, 396, 398, 404, 411, 423, 424, 425, 426, 428, 433, 434, 436, 438, 440, 442, 443, 445, 447, 449, 450, 458, 461, 474, 499, 506, 507, 510, 517, 521, 524, 528], "14": [5, 7, 8, 12, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 91, 104, 107, 156, 160, 162, 169, 173, 194, 197, 201, 206, 212, 219, 282, 299, 317, 319, 321, 322, 323, 324, 326, 332, 334, 337, 338, 340, 342, 346, 350, 355, 367, 376, 398, 424, 425, 426, 434, 442, 443, 506, 510, 521], "resolut": [5, 28, 104, 317, 500], "1e": [5, 8, 10, 13, 14, 16, 28, 31, 33, 36, 37, 39, 104, 244, 245, 273, 274, 282, 299, 300, 305, 307, 317, 321, 322, 324, 325, 329, 372, 381, 382, 383, 422, 453, 455, 476, 477, 489, 506, 515, 518, 520, 529, 530], "06": [5, 17, 30, 33, 52, 104, 157, 172, 305, 313, 317, 322, 426, 453, 455, 521, 528], "min": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 104, 107, 200, 232, 269, 270, 282, 317, 319, 321, 324, 334, 363, 369, 372, 373, 379, 489], "4028235e": [5, 104, 317], "38": [5, 8, 30, 31, 40, 104, 216, 317, 319, 324, 364, 458, 510], "max": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 104, 107, 199, 226, 227, 232, 256, 269, 270, 317, 319, 321, 324, 334, 363, 365, 368, 458, 477, 507, 519, 521], "iinfo": [5, 28, 317, 513], "integ": [5, 7, 8, 12, 13, 15, 17, 21, 22, 25, 30, 31, 32, 35, 36, 38, 40, 44, 45, 47, 48, 65, 72, 76, 83, 87, 107, 108, 113, 117, 118, 122, 155, 164, 165, 166, 167, 168, 169, 170, 179, 180, 198, 205, 208, 209, 218, 219, 243, 264, 298, 316, 317, 319, 321, 323, 324, 326, 330, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 354, 364, 378, 379, 393, 423, 424, 425, 426, 427, 428, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 464, 500, 506, 508, 516, 517, 520, 521, 525, 527], "119": [5, 107], "122": [5, 107, 172, 319], "int8": [5, 17, 28, 31, 40, 100, 105, 107, 108, 112, 317, 424, 458, 508, 521], "128": [5, 8, 12, 28, 31, 35, 48, 107, 231, 243, 317, 321, 323, 324, 338, 340, 345, 367], "127": [5, 8, 28, 31, 107, 317], "12": [5, 7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 39, 40, 44, 47, 48, 107, 158, 159, 164, 168, 169, 172, 174, 175, 176, 189, 201, 203, 209, 212, 218, 219, 227, 231, 232, 245, 269, 270, 274, 282, 319, 321, 323, 324, 326, 329, 330, 331, 332, 334, 337, 341, 346, 347, 355, 363, 367, 374, 376, 388, 392, 394, 396, 398, 422, 424, 425, 426, 433, 434, 441, 442, 443, 447, 449, 458, 499, 504, 506, 508, 510, 517, 522], "54": [5, 7, 12, 30, 31, 35, 40, 107, 171, 172, 177, 213, 218, 319, 323, 324, 334, 347, 350, 364, 367, 424, 425, 426, 443, 510], "1220": [5, 107], "int16": [5, 17, 21, 28, 40, 94, 100, 105, 107, 113, 128, 317, 334, 424, 441, 442, 447, 449, 458, 508, 519, 521, 525], "32768": [5, 28, 107], "32767": [5, 28, 107], "is_bool_dtyp": [5, 28, 317], "is_float_dtyp": [5, 28, 317, 522], "see": [5, 7, 13, 18, 19, 21, 22, 30, 31, 36, 41, 44, 45, 47, 48, 65, 75, 78, 93, 112, 118, 158, 162, 164, 166, 167, 168, 169, 174, 175, 178, 180, 182, 183, 188, 189, 192, 194, 195, 197, 198, 201, 203, 205, 208, 215, 219, 316, 317, 319, 324, 331, 332, 334, 335, 352, 365, 368, 371, 378, 379, 430, 434, 435, 436, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 491, 494, 498, 499, 500, 502, 503, 505, 506, 507, 509, 510, 514, 515, 519, 520, 521, 522, 523, 525, 527, 528, 532, 533, 535], "is_int_dtyp": [5, 28, 317, 520, 522], "is_uint_dtyp": [5, 28, 317, 520, 522], "result_typ": [5, 28, 317, 508], "arrays_and_dtyp": [5, 28, 118, 317], "involv": [5, 28, 118, 158, 317, 319, 492, 494, 501, 507, 508, 510, 523, 530, 539, 545], "_arraywithdevic": [6, 47], "dev": [6, 25, 29, 83, 139, 145, 316, 318, 499, 509, 515, 527, 529], "handl": [6, 8, 25, 29, 31, 48, 131, 132, 133, 134, 135, 139, 143, 144, 151, 154, 318, 477, 501, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 523, 529, 536, 546], "to_devic": [6, 29, 134, 318, 489], "move": [6, 8, 29, 31, 150, 318, 489, 500, 522], "__dlpack__": [6, 29, 75, 150, 316, 318], "mai": [6, 7, 8, 13, 19, 20, 29, 30, 36, 43, 47, 48, 65, 75, 150, 175, 183, 189, 196, 197, 203, 230, 316, 318, 319, 321, 324, 332, 333, 334, 370, 379, 434, 435, 436, 437, 438, 440, 444, 445, 446, 448, 458, 493, 497, 498, 499, 500, 502, 506, 507, 508, 512, 515, 517, 518, 519, 520, 521, 523, 526, 527, 529, 546], "caveat": [6, 29, 150, 318], "portabl": [6, 29, 150, 318, 489, 537], "_arraywithelementwis": [7, 47], "ab": [7, 13, 23, 30, 46, 47, 48, 205, 319, 324, 328, 363, 373, 379, 411, 414, 455, 503, 508, 516, 519, 521], "absolut": [7, 8, 13, 23, 25, 30, 31, 36, 47, 155, 319, 324, 363, 364, 365, 370, 453, 455, 458, 460, 494, 499, 523], "aco": [7, 30, 319], "real": [7, 8, 21, 30, 31, 44, 156, 157, 159, 161, 162, 174, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 201, 205, 208, 213, 214, 215, 217, 218, 219, 319, 324, 334, 356, 370, 444, 446, 448, 506, 541], "invers": [7, 8, 13, 30, 31, 36, 156, 157, 159, 160, 161, 162, 163, 319, 324, 360, 364, 368, 479, 508, 532], "cosin": [7, 30, 156, 157, 171, 172, 319], "57": [7, 30, 136, 156, 157, 159, 160, 162, 172, 173, 206, 318, 319], "69": [7, 33, 40, 156, 192, 303, 319, 322, 324, 363, 364, 425, 521, 528], "acosh": [7, 30, 105, 106, 317, 319], "area": [7, 8, 30, 31, 157, 160, 163, 319, 492, 518, 523, 531, 535], "hyperbol": [7, 30, 157, 160, 163, 172, 212, 217, 319], "sector": [7, 30, 157, 160, 163, 319, 492], "32": [7, 8, 17, 30, 31, 36, 40, 47, 48, 54, 103, 157, 168, 169, 209, 210, 231, 255, 313, 317, 319, 321, 323, 324, 330, 331, 334, 338, 340, 341, 342, 345, 347, 362, 367, 424, 425, 426, 433, 443, 458, 461, 489, 507, 517, 528, 544], "99": [7, 10, 28, 30, 40, 76, 157, 171, 282, 303, 316, 319, 321, 322, 334, 425, 443], "add": [7, 16, 23, 25, 30, 39, 46, 47, 48, 265, 290, 308, 312, 319, 321, 322, 329, 422, 455, 464, 476, 489, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 514, 515, 518, 519, 521, 522, 523, 525, 527, 533, 535, 537, 539], "second": [7, 8, 10, 13, 15, 19, 30, 31, 32, 33, 36, 38, 42, 47, 48, 116, 124, 158, 162, 164, 166, 167, 168, 169, 175, 180, 181, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 215, 223, 248, 276, 294, 299, 300, 305, 317, 319, 321, 322, 324, 326, 327, 328, 332, 352, 355, 356, 357, 359, 362, 367, 369, 370, 372, 374, 378, 395, 396, 401, 404, 434, 435, 436, 477, 493, 499, 502, 505, 508, 510, 518, 519, 521, 527, 544], "compat": [7, 13, 15, 18, 21, 22, 30, 36, 38, 41, 44, 45, 47, 48, 93, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 219, 317, 319, 324, 326, 331, 334, 335, 352, 365, 368, 371, 374, 378, 379, 391, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 492, 504, 514, 519, 520, 522, 525, 533], "multipli": [7, 8, 12, 21, 30, 31, 35, 158, 215, 319, 323, 334, 346, 441, 500, 503, 504, 506, 510], "determin": [7, 8, 13, 15, 19, 22, 25, 30, 31, 32, 36, 43, 45, 47, 48, 74, 94, 96, 103, 109, 110, 111, 112, 113, 114, 115, 130, 140, 141, 142, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 177, 178, 180, 184, 185, 186, 187, 190, 191, 192, 193, 194, 198, 201, 205, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 252, 253, 257, 258, 259, 260, 261, 284, 297, 316, 317, 318, 319, 321, 323, 324, 326, 327, 332, 335, 349, 351, 352, 353, 355, 359, 360, 362, 364, 365, 367, 368, 370, 371, 376, 378, 379, 385, 400, 401, 402, 434, 435, 436, 437, 438, 451, 452, 460, 464, 473, 491, 506, 508, 509, 511, 515, 519, 523], "15": [7, 8, 9, 13, 17, 21, 27, 28, 30, 31, 32, 35, 36, 38, 40, 44, 48, 77, 104, 158, 164, 168, 174, 182, 188, 194, 201, 208, 209, 210, 227, 231, 232, 235, 248, 254, 255, 276, 282, 294, 316, 317, 319, 321, 323, 324, 326, 328, 330, 331, 332, 334, 337, 347, 355, 358, 360, 367, 373, 374, 392, 398, 403, 424, 425, 432, 434, 441, 442, 443, 455, 499, 510, 517, 542], "asin": [7, 30, 319], "sine": [7, 30, 159, 160, 211, 212, 319], "927": [7, 30, 159], "asinh": [7, 30, 319], "atan": [7, 30, 319], "tangent": [7, 30, 161, 162, 163, 216, 217, 319, 511], "785": [7, 30, 161, 162, 319], "atan2": [7, 30, 319], "quotient": [7, 30, 162, 319], "245": [7, 35, 162, 323, 346, 347], "68": [7, 40, 55, 76, 162, 313, 316, 319, 329, 422, 425, 426], "588": [7, 162, 319], "inf": [7, 8, 9, 13, 30, 31, 32, 36, 162, 178, 184, 185, 186, 187, 190, 191, 252, 297, 314, 319, 321, 324, 363, 379, 458, 461, 508, 517], "36": [7, 8, 12, 21, 31, 32, 36, 162, 209, 210, 231, 232, 319, 321, 324, 328, 334, 347, 364, 367, 373, 377, 414, 443], "75": [7, 8, 30, 31, 32, 35, 40, 78, 160, 162, 174, 233, 254, 282, 316, 319, 321, 324, 328, 330, 337, 360, 367, 411, 426], "52": [7, 30, 32, 33, 40, 162, 172, 174, 231, 232, 255, 299, 319, 321, 322, 323, 324, 334, 347, 367, 426, 443], "719": [7, 162, 319], "197": [7, 162, 319], "atanh": [7, 30, 319], "549": [7, 30, 35, 163, 319, 323, 347], "47": [7, 8, 17, 30, 31, 32, 33, 40, 163, 213, 231, 232, 303, 319, 321, 322, 323, 330, 347, 425, 426], "bitwise_and": [7, 30, 319, 512], "11": [7, 8, 9, 12, 13, 17, 21, 30, 31, 32, 35, 36, 38, 40, 44, 48, 158, 161, 164, 178, 208, 209, 215, 225, 231, 232, 238, 255, 270, 319, 321, 323, 324, 325, 326, 328, 330, 331, 332, 334, 337, 338, 346, 347, 355, 358, 360, 362, 363, 367, 372, 373, 383, 388, 393, 394, 396, 398, 409, 411, 421, 424, 425, 426, 433, 434, 441, 442, 443, 450, 506, 507, 508, 510, 517, 522], "bitwise_invert": [7, 30, 319], "bitiwse_invert": [7, 165], "bitwise_left_shift": [7, 30, 319], "bitwise_or": [7, 30, 319], "bitwise_right_shift": [7, 30, 47, 319], "64": [7, 8, 12, 30, 31, 32, 35, 36, 40, 44, 48, 103, 168, 205, 213, 214, 231, 232, 305, 317, 319, 321, 322, 323, 324, 334, 338, 340, 342, 345, 364, 367, 373, 377, 425, 443, 447, 474, 489, 499, 528, 529, 544], "16": [7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 47, 48, 107, 168, 192, 209, 216, 232, 235, 264, 282, 311, 317, 319, 321, 322, 323, 324, 326, 328, 330, 331, 334, 345, 347, 351, 355, 358, 367, 373, 398, 411, 424, 425, 426, 433, 442, 443, 458, 461, 489, 500, 510, 528], "bitwise_xor": [7, 30, 47, 319], "89": [7, 17, 28, 30, 31, 40, 48, 107, 169, 317, 319, 324, 334, 374, 425, 426, 449], "51": [7, 8, 30, 31, 32, 40, 169, 201, 212, 319, 426, 458], "18": [7, 8, 17, 30, 31, 35, 36, 40, 44, 55, 169, 174, 208, 212, 313, 319, 324, 330, 334, 341, 355, 362, 367, 424, 425, 426, 442, 443, 447, 506, 510, 512], "19": [7, 8, 17, 30, 31, 36, 40, 160, 169, 192, 201, 216, 319, 324, 328, 330, 333, 355, 363, 376, 414, 424, 425, 426, 440, 510], "26": [7, 8, 16, 17, 31, 32, 33, 40, 169, 174, 212, 254, 299, 319, 321, 322, 323, 324, 328, 329, 334, 345, 355, 367, 374, 404, 422, 424, 425, 443], "27": [7, 8, 13, 17, 30, 31, 35, 36, 40, 44, 168, 169, 172, 205, 212, 213, 255, 319, 321, 323, 324, 328, 334, 350, 362, 367, 377, 404, 411, 425, 443, 447, 458], "23": [7, 8, 12, 17, 27, 30, 31, 32, 40, 77, 169, 172, 185, 186, 187, 208, 209, 210, 212, 218, 316, 319, 323, 324, 328, 331, 342, 350, 355, 363, 373, 404, 411, 424, 425, 426, 433, 489, 521, 525], "20": [7, 8, 12, 17, 21, 30, 31, 32, 35, 36, 40, 44, 169, 173, 177, 206, 209, 213, 231, 239, 243, 270, 282, 319, 321, 324, 330, 331, 334, 337, 338, 348, 355, 360, 363, 367, 374, 424, 432, 433, 441, 442, 443, 447, 449, 489, 507, 512, 523, 527], "74": [7, 40, 169, 194, 319, 324, 364], "41": [7, 8, 30, 31, 32, 36, 55, 161, 169, 201, 213, 226, 227, 313, 319, 321, 324, 334, 351, 449], "59": [7, 169], "24": [7, 8, 13, 21, 31, 32, 35, 36, 40, 47, 169, 189, 201, 209, 210, 213, 231, 232, 319, 321, 324, 328, 334, 337, 355, 363, 367, 404, 424, 425, 426, 441, 443, 455, 528], "ceil": [7, 8, 30, 31, 65, 316, 319, 518], "round": [7, 8, 30, 31, 158, 170, 179, 180, 213, 218, 219, 319, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "co": [7, 9, 30, 235, 319, 321, 492, 497, 508, 525, 532], "express": [7, 8, 30, 31, 156, 159, 161, 162, 171, 173, 206, 211, 216, 319, 479, 511, 513, 519, 525, 530, 539, 540], "radian": [7, 8, 30, 31, 156, 159, 161, 162, 171, 173, 206, 211, 216, 319, 511], "416": [7, 171, 319], "540": [7, 171], "990": [7, 171], "cosh": [7, 30, 319], "angl": [7, 8, 30, 31, 162, 172, 212, 217, 319, 532], "76": [7, 21, 28, 30, 40, 107, 157, 172, 212, 317, 319, 324, 328, 334, 374, 411, 425, 443], "81": [7, 28, 30, 36, 40, 107, 172, 192, 214, 317, 319, 324, 328, 330, 334, 364, 377, 411, 426, 443, 521], "deg2rad": [7, 30, 319], "degre": [7, 8, 21, 30, 31, 44, 173, 206, 319, 334, 448, 450, 538], "convers": [7, 8, 31, 173, 206, 271, 278, 321, 493, 498, 516, 524, 526, 530, 532, 533, 534, 538, 545], "90": [7, 8, 30, 31, 169, 173, 206, 209, 319, 324, 334, 367, 443, 492], "180": [7, 30, 173, 206, 319], "270": [7, 30, 173, 206, 319], "360": [7, 30, 173, 206, 319, 507], "71": [7, 30, 173, 206, 319], "28": [7, 12, 16, 30, 31, 32, 35, 36, 40, 44, 173, 192, 206, 254, 299, 319, 321, 322, 323, 324, 329, 334, 338, 340, 342, 345, 347, 367, 422, 424, 425, 426, 443, 447, 489], "divid": [7, 8, 9, 15, 25, 30, 31, 38, 47, 48, 180, 282, 319, 321, 326, 393, 503, 506, 510, 521], "dividend": [7, 30, 174, 180, 208, 219, 319], "divisor": [7, 8, 10, 21, 30, 31, 33, 44, 174, 180, 182, 208, 219, 299, 300, 305, 319, 322, 334, 448, 450, 477], "375": [7, 175, 203], "erf": [7, 30, 319], "exponenti": [7, 8, 30, 31, 176, 177, 194, 205, 319], "gauss": [7, 30, 176, 319], "error": [7, 8, 25, 30, 31, 52, 176, 313, 319, 324, 334, 370, 373, 444, 446, 460, 475, 477, 493, 497, 499, 500, 502, 503, 504, 507, 508, 509, 510, 512, 513, 514, 519, 521, 522, 527, 533, 539], "328": [7, 176, 216, 319], "677": [7, 176, 319], "842": [7, 176, 216, 319], "exp": [7, 8, 30, 31, 178, 194, 319, 324, 370, 517, 519], "evalu": [7, 25, 30, 31, 177, 178, 190, 191, 192, 193, 196, 202, 204, 210, 214, 311, 319, 322, 328, 335, 413, 414, 451, 452, 500, 506, 508, 515, 516, 523, 539], "71828198": [7, 30, 177], "38905573": [7, 30, 177], "08553696": [7, 30, 177], "expm1": [7, 30, 319, 508], "244": [7, 178, 489], "918": [7, 178], "48": [7, 8, 30, 31, 32, 33, 40, 54, 157, 178, 213, 254, 299, 303, 313, 319, 321, 322, 324, 328, 334, 367, 404, 425, 443], "_": [7, 25, 30, 33, 94, 178, 184, 197, 209, 231, 299, 300, 317, 319, 321, 322, 324, 326, 328, 334, 370, 373, 380, 399, 410, 448, 495, 506, 511, 513, 518, 521, 528], "147": [7, 178, 319], "floor": [7, 8, 30, 31, 168, 319, 518], "floor_divid": [7, 30, 319, 464], "greater": [7, 8, 17, 30, 31, 40, 47, 48, 156, 159, 162, 166, 168, 179, 180, 205, 208, 210, 218, 319, 324, 326, 330, 352, 364, 394, 426, 460, 500, 520], "greater_equ": [7, 30, 47, 48, 194, 319], "isfinit": [7, 30, 319, 519], "out_i": [7, 30, 31, 184, 185, 186, 187, 319], "self_i": [7, 30, 31, 184, 185, 186, 187], "finit": [7, 8, 30, 31, 158, 162, 184, 205, 208, 319], "isinf": [7, 30, 319], "detect_posit": [7, 30, 185, 319], "detect_neg": [7, 30, 185, 319], "detect": [7, 25, 30, 185, 319, 328, 403, 414, 498, 499, 504, 506, 507, 513, 521, 528, 529], "isnan": [7, 30, 319], "isreal": [7, 30, 319], "1j": [7, 8, 30, 31, 187, 282, 321], "5j": [7, 30, 31, 187, 319], "6j": [7, 8, 31, 187, 319], "less": [7, 8, 13, 17, 21, 30, 31, 36, 40, 47, 48, 156, 157, 159, 162, 170, 190, 191, 192, 193, 205, 208, 210, 213, 319, 324, 330, 334, 364, 365, 368, 379, 426, 448, 450, 492, 500, 506, 508, 510, 512, 514, 518, 519, 521, 523, 524, 525, 539, 541], "less_equ": [7, 30, 47, 48, 319, 512], "61": [7, 8, 30, 31, 33, 37, 40, 160, 190, 192, 214, 299, 319, 322, 323, 325, 345, 381, 383, 426], "log10": [7, 30, 319], "logarithm": [7, 30, 177, 190, 191, 192, 193, 194, 319, 324, 370], "602": [7, 191, 319], "699": [7, 191, 319], "log1p": [7, 30, 319, 517], "693": [7, 30, 59, 160, 192, 313, 319, 325, 383], "001": [7, 8, 16, 28, 31, 33, 58, 104, 192, 300, 313, 317, 322, 329, 422, 528, 529], "0953": [7, 30, 190, 192, 319], "log2": [7, 30, 319], "logaddexp": [7, 30, 319], "logical_and": [7, 30, 319, 519, 523, 546], "logical_not": [7, 30, 319, 508], "logical_or": [7, 30, 319, 546], "conform": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 316, 317, 319, 324, 326, 331, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 385, 387, 388, 389, 391, 392, 394, 395, 399, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 511], "api": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 116, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 316, 317, 319, 324, 326, 331, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 385, 387, 388, 389, 391, 392, 394, 395, 399, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 490, 491, 499, 501, 503, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 523, 524, 526, 528, 533, 534, 535, 537, 539, 541, 544, 546], "extens": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 316, 317, 319, 324, 326, 331, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 385, 387, 388, 389, 391, 392, 394, 395, 399, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 489, 495, 497, 499, 500, 511, 521, 536, 539, 546], "api_specif": [7, 30, 94, 184, 197, 209, 317, 319, 326, 334, 399, 448, 511], "signatur": [7, 30, 94, 184, 197, 209, 317, 319, 324, 326, 334, 370, 399, 448, 492, 508, 509, 510, 511, 514, 518, 521, 522, 523, 536, 545], "elementwise_funct": [7, 30, 184, 197, 209, 319, 511], "html": [7, 30, 94, 184, 197, 209, 317, 319, 324, 326, 334, 370, 399, 448, 492, 505, 511], "noqa": [7, 13, 30, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 94, 104, 107, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 182, 183, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 298, 316, 317, 319, 321, 324, 326, 331, 332, 333, 334, 335, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 385, 387, 388, 389, 391, 392, 394, 395, 399, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 444, 446, 447, 448, 449, 450, 451, 452, 482, 520], "logical_xor": [7, 30, 319], "maximum": [7, 8, 9, 10, 15, 18, 21, 25, 30, 31, 32, 33, 38, 41, 44, 48, 149, 226, 227, 235, 305, 318, 319, 321, 322, 324, 326, 328, 331, 334, 363, 384, 415, 429, 444, 446, 458, 460, 461, 464, 500, 510, 518, 528, 546], "use_wher": [7, 30, 199, 200, 319], "formula": [7, 8, 30, 199, 200, 319], "clip": [7, 8, 15, 30, 31, 32, 38, 199, 200, 226, 227, 319, 321, 326, 506, 515, 517, 518, 528, 530], "than": [7, 8, 9, 13, 15, 17, 18, 19, 21, 25, 30, 31, 32, 36, 38, 40, 41, 42, 44, 47, 48, 65, 104, 149, 156, 157, 159, 162, 166, 168, 170, 179, 180, 190, 191, 192, 193, 199, 205, 208, 210, 213, 218, 258, 259, 261, 316, 317, 318, 319, 321, 324, 326, 330, 331, 332, 334, 352, 362, 364, 365, 368, 379, 384, 388, 394, 426, 432, 435, 436, 437, 441, 442, 447, 448, 449, 450, 492, 495, 500, 502, 506, 507, 508, 510, 512, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 533, 536, 537, 538, 539, 545, 546], "minimum": [7, 8, 9, 15, 18, 21, 30, 31, 32, 38, 41, 44, 155, 244, 245, 273, 274, 282, 283, 319, 321, 326, 331, 334, 384, 430, 444, 446, 458, 460, 461, 464, 536, 542, 546], "exce": [7, 8, 31, 200, 319], "product": [7, 12, 13, 21, 30, 31, 35, 36, 44, 201, 319, 323, 324, 334, 349, 350, 352, 359, 362, 367, 378, 441, 442, 443, 447, 448, 474, 498, 525, 539, 541], "30": [7, 8, 31, 32, 40, 44, 48, 201, 231, 233, 239, 254, 255, 270, 276, 282, 319, 321, 324, 328, 334, 360, 367, 412, 424, 425, 442, 443, 447, 460, 473, 507], "56": [7, 8, 12, 17, 30, 31, 35, 79, 201, 213, 216, 218, 299, 316, 319, 322, 323, 324, 328, 334, 338, 340, 342, 347, 367, 373, 403, 425, 443, 510], "21": [7, 8, 9, 17, 27, 30, 31, 36, 40, 44, 47, 79, 107, 158, 160, 162, 168, 169, 201, 270, 316, 317, 319, 324, 325, 328, 334, 355, 367, 383, 409, 424, 425, 441, 442, 443, 517], "not_equ": [7, 30, 47, 48, 319], "pow": [7, 30, 47, 48, 319, 502], "expon": [7, 8, 9, 31, 32, 205, 283, 319, 321, 324, 364], "25": [7, 9, 13, 14, 17, 21, 24, 30, 31, 32, 35, 36, 39, 40, 44, 47, 48, 60, 78, 158, 168, 174, 176, 201, 205, 207, 209, 212, 213, 214, 218, 254, 255, 270, 282, 316, 319, 321, 324, 325, 328, 329, 334, 337, 351, 355, 360, 377, 379, 382, 404, 422, 424, 425, 426, 442, 443, 445, 450, 506, 517], "rad2deg": [7, 30, 319], "286": [7, 31, 206], "458": [7, 206], "573": [7, 206, 319], "reciproc": [7, 30, 319], "333": [7, 30, 174, 207, 227, 319, 321, 323, 345], "remaind": [7, 8, 15, 25, 30, 31, 38, 181, 319, 326, 393, 502, 518], "modulu": [7, 30, 208, 319, 518], "sign": [7, 8, 13, 19, 21, 30, 31, 36, 65, 155, 158, 162, 168, 208, 316, 319, 324, 332, 334, 370, 434, 435, 436, 437, 441, 442, 447, 449, 492, 499, 525, 530], "x2_i": [7, 30, 158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 319, 502], "decim": [7, 30, 209, 319], "94": [7, 10, 17, 30, 33, 40, 144, 209, 210, 303, 318, 322, 426], "256": [7, 209, 210, 323, 338, 340, 342, 458], "0001": [7, 209, 210, 458, 461, 477], "67": [7, 9, 30, 32, 40, 47, 169, 172, 209, 210, 212, 218, 231, 232, 282, 302, 304, 311, 319, 321, 322, 426], "45": [7, 8, 21, 30, 31, 33, 40, 48, 162, 174, 209, 210, 299, 305, 319, 322, 324, 326, 334, 367, 393, 425, 426, 443, 458], "678": [7, 209, 210], "33": [7, 17, 21, 30, 32, 33, 35, 160, 161, 168, 209, 227, 282, 303, 319, 321, 322, 323, 324, 328, 334, 346, 347, 367, 421, 424, 443, 450, 458, 461], "sin": [7, 9, 30, 235, 319, 321, 503, 525], "841": [7, 24, 30, 52, 211, 313, 319], "909": [7, 30, 32, 211, 319], "141": [7, 30, 91, 211, 317, 319], "sinh": [7, 30, 319], "63": [7, 24, 30, 36, 60, 206, 212, 213, 319, 324, 328, 334, 351, 367, 404, 443], "232": [7, 30, 212, 319], "sqrt": [7, 8, 30, 31, 319, 473], "squar": [7, 8, 13, 30, 31, 36, 213, 301, 302, 304, 311, 319, 322, 324, 328, 351, 353, 354, 356, 357, 358, 360, 364, 370, 371, 372, 377, 409], "root": [7, 30, 213, 319, 472, 496, 499, 500, 505, 519, 528], "73": [7, 36, 213, 324, 330, 351, 425, 521], "44": [7, 8, 17, 30, 31, 40, 160, 201, 209, 213, 214, 225, 319, 321, 323, 324, 328, 331, 334, 346, 367, 411, 424, 425, 433, 443], "subtract": [7, 30, 47, 48, 319, 503, 506, 510], "tan": [7, 30, 222, 319, 321, 506, 511, 514, 515, 518, 519, 525], "tanh": [7, 30, 319, 525], "762": [7, 30, 217, 319], "964": [7, 30, 217, 319], "trunc": [7, 30, 319], "025": [7, 218, 319], "trunc_divid": [7, 30, 319], "_arraywithactivationsexperiment": [8, 47], "ep": [8, 13, 16, 31, 36, 39, 104, 317, 324, 329, 365, 368, 422, 476], "outpu": [8, 31], "clamp": [8, 31, 530], "elementwis": [8, 16, 31, 39, 219, 324, 329, 377, 422, 515, 522, 525], "19722438": [8, 31], "38629448": [8, 31], "38629436": [8, 31], "logsigmoid": [8, 31], "31326175": [8, 24], "126928": [8, 31], "01814993": 8, "00004578": 8, "57888985": 8, "31326169": [8, 31], "69314718": [8, 24, 31], "01104775": 8, "prelu": [8, 31], "f": [8, 15, 31, 38, 326, 328, 391, 406, 410, 411, 412, 420, 421, 489, 493, 494, 500, 501, 506, 507, 513, 525, 528, 535], "unidirect": 8, "smaller": [8, 15, 21, 31, 38, 231, 321, 326, 334, 384, 392, 441, 442, 447, 449, 489, 500, 525], "relu6": [8, 31], "rectifi": [8, 24, 31, 54, 56, 57, 313], "unit": [8, 24, 31, 52, 54, 55, 56, 57, 58, 59, 60, 313, 489, 499, 502, 508, 519, 520, 521, 533, 540, 543], "selu": [8, 31], "scale": [8, 12, 16, 31, 33, 35, 39, 147, 148, 306, 318, 322, 323, 329, 346, 349, 350, 422, 458, 460, 461, 473, 474, 477, 539, 541], "11133075": 8, "05070102": [8, 31], "10140204": 8, "15210295": 8, "20280409": 8, "25350523": 8, "30420589": 8, "35490704": 8, "thresholded_relu": [8, 31], "custom": [8, 31, 492, 496, 507, 512, 520, 521, 523, 529, 539, 543, 544, 545], "_arraywithconversionsexperiment": [8, 47], "_arraywithcreationexperiment": [8, 47], "eye_lik": [8, 31], "refer": [8, 15, 21, 22, 31, 33, 38, 44, 45, 74, 178, 192, 299, 300, 316, 319, 322, 324, 326, 334, 335, 354, 378, 391, 448, 450, 451, 452, 474, 489, 497, 498, 499, 500, 502, 503, 507, 508, 514, 515, 516, 517, 518, 519, 520, 521, 533, 534, 539], "elsewher": [8, 31, 74, 316, 331, 433, 499], "_arraywithdata_typeexperiment": [8, 47], "_arraywithdeviceexperiment": [8, 47], "_arraywithelementwiseexperiment": [8, 47], "allclos": [8, 31], "rtol": [8, 13, 31, 36, 324, 365, 368, 453, 455, 520], "atol": [8, 13, 31, 36, 324, 365, 453, 455, 520], "08": [8, 21, 31, 40, 160, 319, 323, 350, 425, 426, 450, 453, 458], "equal_nan": [8, 31], "rel": [8, 10, 13, 15, 20, 27, 31, 33, 36, 38, 43, 47, 77, 300, 303, 305, 306, 307, 322, 324, 326, 333, 355, 365, 368, 376, 388, 392, 438, 440, 453, 455, 500, 505, 507, 520, 523, 539, 541], "toler": [8, 13, 31, 36, 324, 365, 368, 453, 455, 502, 520, 539], "compar": [8, 9, 19, 20, 25, 31, 32, 43, 220, 223, 321, 332, 333, 434, 435, 436, 437, 438, 440, 455, 489, 504, 510, 512, 513, 520, 521, 523, 528, 535, 537, 539, 545, 546], "altern": [8, 31, 489, 498, 499, 505, 518, 519, 528, 542], "given": [8, 9, 14, 15, 17, 25, 31, 32, 33, 37, 38, 40, 47, 48, 51, 53, 65, 72, 78, 79, 97, 98, 99, 100, 101, 117, 136, 144, 146, 147, 148, 149, 151, 154, 239, 269, 270, 277, 299, 300, 303, 305, 306, 307, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 397, 398, 410, 411, 420, 421, 424, 425, 426, 428, 439, 440, 441, 442, 453, 455, 458, 459, 460, 461, 464, 470, 471, 473, 474, 475, 476, 477, 478, 479, 492, 493, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 532, 536, 541, 542, 545, 546], "1e10": 8, "00001e10": 8, "00001e": 8, "005": 8, "deg": [8, 31], "2j": [8, 31], "3j": [8, 30, 31, 187, 319], "35619449": 8, "78539816": 8, "135": [8, 226, 321], "binar": [8, 31], "outcom": [8, 31], "comparison": [8, 31, 324, 373, 512], "conj": [8, 31], "conjug": [8, 13, 31, 36, 324, 362, 366], "copysign": [8, 31], "unsign": [8, 21, 31, 334, 441, 442, 447, 449, 459, 508, 525], "count_nonzero": [8, 31], "keepdim": [8, 13, 15, 18, 21, 22, 25, 31, 36, 38, 41, 44, 45, 324, 326, 331, 334, 335, 363, 379, 398, 429, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 512, 519, 525], "count": [8, 15, 19, 22, 31, 38, 42, 45, 143, 318, 324, 326, 332, 335, 378, 385, 388, 434, 435, 451, 452, 506, 510, 528], "flatten": [8, 9, 13, 15, 18, 19, 31, 32, 36, 38, 41, 42, 231, 235, 321, 324, 326, 331, 332, 359, 367, 379, 385, 390, 392, 429, 430, 434, 435, 436, 437, 453, 455, 472, 489, 518, 523], "left": [8, 13, 18, 20, 31, 36, 41, 43, 166, 231, 319, 321, 324, 331, 333, 356, 357, 363, 372, 377, 429, 439, 499, 500, 502, 505, 507, 508, 510], "total": [8, 21, 25, 31, 44, 48, 151, 318, 331, 334, 432, 448, 450, 489, 493, 494, 500, 508, 509, 510, 521, 523, 528, 529, 533], "diff": [8, 25, 31, 510, 518], "prepend": [8, 31, 324, 326, 362, 387], "append": [8, 13, 25, 31, 166, 319, 324, 326, 355, 362, 387, 489, 507, 512, 521, 525, 528], "differenc": [8, 31], "taken": [8, 13, 31, 36, 324, 355, 507, 513, 519, 522, 530, 540], "prior": [8, 31, 512, 522], "expand": [8, 9, 15, 31, 32, 235, 321, 326, 387, 505, 506], "direct": [8, 31, 333, 440, 498, 503, 505, 519, 523, 529, 530, 532, 535, 539, 540, 543], "except": [8, 9, 15, 17, 22, 25, 31, 32, 36, 40, 45, 93, 230, 256, 272, 284, 290, 317, 321, 324, 326, 330, 331, 335, 368, 385, 387, 395, 424, 425, 426, 432, 451, 452, 453, 456, 475, 489, 500, 501, 502, 503, 507, 508, 511, 513, 514, 518, 519, 523, 527, 533], "th": [8, 31], "discret": [8, 31, 325, 382], "exp2": [8, 31], "power": [8, 9, 13, 31, 32, 36, 47, 48, 168, 177, 205, 244, 273, 283, 319, 321, 324, 328, 364, 377, 409, 473, 527, 528, 529, 539, 541, 545], "fix": [8, 31, 489, 499, 500, 502, 508, 521, 522], "nearest": [8, 31, 158, 209, 319, 523], "toward": [8, 15, 38, 219, 319, 326, 392, 489, 495, 499, 522, 525, 535, 539], "float_pow": [8, 31], "rais": [8, 9, 15, 17, 19, 22, 25, 31, 32, 38, 40, 42, 45, 93, 177, 205, 224, 244, 256, 273, 283, 284, 290, 312, 317, 319, 321, 322, 324, 326, 330, 331, 332, 334, 335, 362, 364, 378, 387, 391, 395, 424, 425, 426, 432, 437, 444, 446, 451, 452, 453, 460, 475, 477, 489, 492, 500, 502, 504, 512, 513, 518, 519, 525, 527], "common": [8, 25, 31, 117, 317, 491, 498, 499, 505, 506, 508, 509, 510, 513, 515, 516, 519, 522, 523, 533, 536, 539, 546], "125": [8, 13, 36, 168, 319, 324, 377], "fmax": [8, 31], "fmin": [8, 31], "fmod": [8, 31, 319], "divis": [8, 9, 10, 31, 32, 33, 168, 174, 180, 181, 208, 219, 245, 274, 282, 299, 300, 305, 319, 321, 322, 323, 336, 343, 344, 477, 515], "frexp": [8, 31], "next": [8, 31, 104, 317, 473, 475, 477, 493, 495, 498, 499, 500, 504, 510, 511, 516, 519, 522, 526, 527, 528, 539, 541], "represent": [8, 9, 25, 31, 32, 48, 89, 90, 104, 107, 131, 132, 155, 158, 164, 167, 169, 198, 221, 286, 314, 317, 318, 319, 321, 458, 460, 461, 532, 537, 538, 540, 544, 545], "gcd": [8, 31], "gradient": [8, 31, 149, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 318, 327, 400, 401, 402, 455, 464, 475, 477, 501, 522, 528, 529, 532, 533, 539], "edge_ord": [8, 31], "r": [8, 13, 25, 31, 36, 301, 322, 324, 326, 369, 398, 499, 500, 501, 517, 520], "estim": [8, 31], "boundari": [8, 17, 31, 40, 330, 426, 539], "note": [8, 13, 15, 19, 31, 36, 38, 117, 192, 208, 209, 225, 317, 319, 321, 324, 326, 332, 334, 356, 357, 370, 372, 391, 395, 435, 437, 445, 495, 498, 499, 500, 503, 505, 508, 510, 511, 518, 519, 520, 521, 522], "over": [8, 13, 21, 22, 23, 28, 31, 36, 44, 45, 46, 298, 321, 324, 329, 330, 334, 335, 363, 374, 378, 379, 422, 426, 444, 445, 446, 447, 448, 449, 450, 451, 452, 476, 482, 489, 491, 493, 499, 500, 504, 510, 511, 517, 518, 520, 525, 527, 533, 537, 539], "partial": [8, 25, 31, 304, 322, 324, 361, 475, 500, 505, 523], "diment": 8, "40": [8, 9, 31, 32, 40, 44, 48, 168, 172, 213, 231, 233, 239, 270, 282, 298, 301, 319, 321, 322, 324, 328, 334, 360, 367, 412, 425, 443, 447, 507], "80": [8, 31, 324, 328, 334, 367, 414, 443, 492, 512], "72": [8, 17, 31, 33, 177, 178, 303, 319, 322, 324, 334, 367, 425, 443], "33333333": [8, 31, 207, 319], "hypot": [8, 31], "hypotenus": 8, "4031": 8, "8102": 8, "imaginari": [8, 31, 510], "4j": [8, 31], "isclos": [8, 31, 502], "hold": [8, 9, 13, 21, 31, 36, 44, 269, 270, 321, 324, 334, 363, 442, 456, 489, 528, 540], "lcm": [8, 31], "60": [8, 21, 31, 32, 40, 44, 239, 255, 270, 282, 298, 321, 324, 328, 334, 367, 406, 424, 441, 443, 447, 507], "ldexp": [8, 31], "lerp": [8, 31], "end": [8, 31, 65, 162, 316, 319, 472, 489, 499, 500, 504, 507, 518, 522, 523, 524, 532, 533, 537, 542], "weight": [8, 10, 12, 31, 33, 35, 299, 300, 303, 305, 306, 307, 322, 323, 347, 348, 350, 473, 474, 475, 477, 489, 506, 515, 525, 529, 530, 538], "interpol": [8, 31, 523, 539], "logaddexp2": [8, 31], "169925": [8, 31], "nan_to_num": [8, 31], "posinf": [8, 31], "neginf": [8, 31], "veri": [8, 31, 324, 370, 460, 491, 492, 497, 498, 499, 500, 505, 506, 508, 509, 510, 512, 514, 515, 518, 519, 520, 521, 522, 523, 526, 528, 529, 530, 533, 535, 536, 537, 539, 540, 541, 544, 545, 546], "5e": [8, 10, 31, 305, 322], "nansum": [8, 31], "accumul": [8, 31], "nextaft": [8, 31], "0e": [8, 10, 31, 33, 305, 322], "4013e": [8, 31], "4028e": [8, 31], "hand": [8, 489, 502, 505, 508, 515, 521, 533], "signbit": [8, 31], "sinc": [8, 31, 489, 492, 499, 500, 502, 503, 506, 507, 512, 518, 519, 533, 539, 545], "637": [8, 31], "212": [8, 12, 31, 347], "0909": [8, 31], "trapz": [8, 30], "dx": [8, 30], "apart": [8, 30], "singl": [8, 17, 25, 30, 40, 289, 297, 301, 321, 322, 330, 332, 424, 425, 426, 434, 458, 493, 498, 499, 500, 502, 505, 506, 507, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 533], "trapezoid": [8, 30], "xlogi": [8, 31], "0986": [8, 31], "3863": [8, 31], "0000": [8, 31], "zeta": [8, 31], "q": [8, 12, 13, 31, 35, 36, 323, 324, 328, 350, 356, 357, 369, 411, 499, 500, 501, 520, 533], "0369": [8, 31], "2021": [8, 31, 489], "_arraywithgeneralexperiment": [8, 47], "_arraywithgradientsexperiment": [8, 47], "_arraywithimageexperiment": [8, 47], "_arraywithlayersexperiment": [8, 47], "adaptive_avg_pool1d": [8, 31], "1d": [8, 31, 474], "adapt": [8, 31, 33, 306, 322, 477, 492], "averag": [8, 10, 31, 33, 299, 300, 305, 322, 327, 400, 401, 473], "pool": [8, 31], "signal": [8, 31, 538, 539], "sever": [8, 31, 499, 500, 522, 533, 537, 543], "plane": [8, 31], "l_in": [8, 31], "batch": [8, 9, 13, 25, 31, 32, 36, 147, 148, 235, 238, 239, 298, 318, 321, 323, 324, 327, 329, 347, 361, 379, 400, 401, 402, 422, 476, 489, 506, 515, 528, 537], "spatial": [8, 12, 31, 35, 323, 336, 337, 338, 339, 341, 343, 345, 532], "Will": [8, 31, 472, 482, 533], "l_out": [8, 31], "adaptive_avg_pool2d": [8, 31], "2d": [8, 31, 474, 489, 515, 519, 523], "h_in": [8, 31], "w_in": [8, 31], "s_0": [8, 31], "s_1": [8, 31], "avg_pool1d": [8, 31], "kernel": [8, 12, 31, 35, 323, 348, 523, 525, 533, 539, 542, 543], "stride": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474, 518, 539], "pad": [8, 12, 15, 31, 35, 38, 235, 321, 323, 326, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 386, 399, 474, 489], "data_format": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474, 489], "nwc": [8, 12, 31, 35, 323, 336, 337, 338, 343, 344, 474], "count_include_pad": [8, 31], "ceil_mod": [8, 31], "batch_siz": [8, 12, 17, 31, 35, 40, 323, 330, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 423, 489, 528], "d_in": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "window": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474, 495, 500, 544], "slide": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474], "algorithm": [8, 12, 24, 31, 35, 52, 324, 337, 339, 340, 341, 342, 345, 370, 474, 508, 519, 523, 533, 539, 541, 543], "per": [8, 12, 31, 35, 337, 339, 340, 341, 342, 345, 474, 500, 507, 519, 528], "ncw": [8, 12, 31, 35, 323, 336, 337, 338, 343, 344, 474], "arang": [8, 13, 21, 31, 36, 78, 265, 298, 316, 321, 324, 334, 363, 379, 443, 489, 508, 518, 546], "reshap": [8, 12, 13, 15, 25, 31, 35, 36, 38, 298, 321, 323, 324, 326, 339, 341, 345, 363, 379, 469, 518, 519, 521, 523, 525, 527, 530], "avg_pool2d": [8, 31], "nhwc": [8, 12, 31, 35, 323, 336, 339, 340, 343, 344, 345, 474], "nchw": [8, 12, 31, 35, 323, 336, 339, 340, 343, 344, 345, 474, 489], "max_pool2d": [8, 31], "46": [8, 17, 31, 35, 40, 79, 192, 210, 316, 319, 328, 347, 404, 424, 425], "avg_pool3d": [8, 31], "ndhwc": [8, 12, 31, 35, 323, 336, 341, 342, 343, 344, 474], "d": [8, 12, 13, 27, 31, 32, 35, 36, 79, 118, 223, 317, 323, 324, 328, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 354, 355, 363, 367, 377, 406, 410, 411, 412, 420, 421, 489, 492, 493, 494, 499, 501, 506, 517, 521, 523, 528, 535], "volum": [8, 12, 31, 35, 323, 341, 342, 495], "filter": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474, 489], "ncdhw": [8, 12, 31, 35, 323, 336, 341, 342, 343, 344, 474], "43": [8, 40, 48, 168, 319, 330, 331, 425, 426, 433], "dct": [8, 31, 528], "norm": [8, 9, 13, 31, 32, 36, 226, 227, 256, 321, 324, 363, 379, 422, 477, 522], "liter": [8, 13, 31, 36, 324, 333, 363, 379, 439, 513, 523], "lenght": [8, 31], "truncat": [8, 31, 272, 321, 472, 512, 528], "larger": [8, 15, 21, 31, 38, 44, 104, 317, 326, 334, 384, 392, 448, 450, 521, 523, 546], "ortho": [8, 31], "102": [8, 31, 40, 424], "406": [8, 31, 226, 321], "dft": [8, 31], "onesid": [8, 31], "dft_length": [8, 31], "backward": [8, 22, 31, 45, 208, 319, 324, 335, 378, 451, 452, 533], "fourier": [8, 235, 321], "fft": [8, 31, 498, 539], "n_fft": 8, "becaus": [8, 499, 500, 503, 504, 505, 506, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 529, 530, 533, 539, 542, 545], "satisfi": [8, 510], "symmetri": 8, "possibl": [8, 15, 38, 265, 310, 321, 322, 323, 326, 334, 346, 391, 444, 446, 489, 492, 494, 498, 499, 500, 502, 506, 508, 510, 511, 515, 517, 518, 519, 520, 521, 523, 525, 528, 532, 533, 537, 539, 545], "fast": [8, 539], "rfft": 8, "batch_idx": 8, "signal_dim1": 8, "signal_dim2": 8, "signal_dimn": 8, "signal_dim": 8, "embed": [8, 31, 539], "max_norm": [8, 9, 31, 32, 226, 227, 321], "dim": [8, 25, 27, 31, 82, 316, 323, 336, 343, 344, 460, 474, 489, 508, 512, 519, 520, 523], "ifft": [8, 31], "pi": [8, 31, 314], "44509285e": [8, 31], "14423775e": [8, 31], "17j": [8, 31], "00000000e": [8, 31, 32, 235], "00": [8, 9, 31, 32, 36, 178, 235, 319, 321, 324, 358, 458, 521], "11483250e": [8, 31], "16j": [8, 31], "33486982e": [8, 31], "22464680e": [8, 31], "95799250e": [8, 31], "66951701e": [8, 31], "30636606e": [8, 31], "43029718e": [8, 31], "18j": [8, 31], "53080850e": [8, 31], "58689626e": [8, 31], "24474906e": [8, 31], "91858728e": [8, 31], "01435406e": [8, 31], "mode": [8, 13, 25, 31, 36, 149, 158, 246, 271, 272, 275, 277, 278, 291, 292, 293, 295, 296, 318, 319, 321, 324, 369, 495, 499, 500, 506, 510, 523, 533, 539, 542], "scale_factor": [8, 31, 523], "recompute_scale_factor": [8, 31, 523], "align_corn": [8, 31, 523], "antialia": [8, 31, 523], "down": [8, 31, 472, 499, 521, 534, 539, 545], "channel": [8, 9, 12, 31, 32, 35, 47, 48, 231, 235, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 470, 471, 473, 474, 475, 476, 477, 478, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "height": [8, 9, 12, 31, 32, 35, 231, 321, 323, 339, 340, 341, 342, 345, 472, 528], "width": [8, 9, 12, 31, 32, 35, 231, 321, 323, 337, 338, 339, 340, 341, 342, 345], "bilinear": [8, 31, 523], "trilinear": [8, 31, 523], "nearest_exact": [8, 31, 523], "tf_area": [8, 31, 523], "bicub": [8, 31, 523], "mitchellcub": [8, 31, 523], "lanczos3": [8, 31, 523], "lanczos5": [8, 31, 523], "gaussian": [8, 31, 52, 313, 523], "overwrit": [8, 25, 31, 149, 318, 500, 518, 519, 525], "corner": [8, 31, 499, 500, 519], "pixel": [8, 31], "align": [8, 25, 31, 499, 500, 519, 525, 527, 534, 545], "thu": [8, 31, 168, 205, 208, 319, 324, 356, 357, 495, 498, 507, 512, 519], "antialias": [8, 31], "downsampl": [8, 31], "resiz": [8, 31, 523], "max_pool1d": [8, 31], "dilat": [8, 12, 31, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 474], "max_pool3d": [8, 31], "linear_algebra": [8, 13, 31, 36, 324, 522], "_arraywithlinearalgebraexperiment": [8, 47], "adjoint": [8, 13, 31, 36, 324, 360, 371, 372], "cond": [8, 31, 61, 63, 315, 533], "p": [8, 9, 13, 31, 32, 36, 80, 226, 227, 316, 321, 324, 328, 363, 379, 411, 474, 499, 500, 501], "933034373659268": 8, "cov": [8, 31], "rowvar": [8, 31], "bia": [8, 12, 31, 35, 39, 265, 321, 323, 329, 336, 343, 344, 347, 348, 422, 474, 525, 529], "ddof": [8, 31], "fweight": [8, 31], "aweight": [8, 31], "row": [8, 31, 74, 316, 324, 330, 331, 363, 371, 372, 377, 423, 432, 473], "column": [8, 13, 31, 36, 74, 316, 324, 356, 357, 363, 369, 371, 372, 377, 473], "overridden": [8, 31, 477, 503], "unbias": [8, 21, 31, 44, 334, 450], "even": [8, 31, 205, 209, 319, 492, 493, 499, 500, 502, 507, 508, 509, 511, 514, 515, 518, 519, 520, 523, 527, 528, 529, 530, 533, 545], "frequenc": [8, 9, 31, 32, 235, 321, 500], "repeat": [8, 9, 15, 31, 32, 38, 233, 321, 326, 397, 495, 500, 503, 504, 510, 511, 513, 518, 521], "typic": [8, 31, 333, 439, 502, 515, 538, 546], "assign": [8, 31, 500, 504, 508, 513, 518, 527], "probabl": [8, 12, 17, 31, 35, 40, 323, 330, 346, 423, 460, 473, 474, 489, 493, 505, 521], "precis": [8, 13, 31, 36, 104, 213, 317, 319, 324, 370, 379, 507, 508, 519, 523, 543], "covari": [8, 31], "diagflat": [8, 31], "offset": [8, 13, 16, 31, 36, 39, 324, 329, 355, 376, 422, 463], "padding_valu": [8, 31], "right_left": [8, 31], "num_row": [8, 31], "num_col": [8, 31], "eig": [8, 13, 31, 324, 357, 358], "37228132": [8, 31, 356], "82456484": [8, 356], "41597356": [8, 356], "56576746": [8, 356], "90937671": [8, 356], "eigh_tridiagon": [8, 31], "eigvals_onli": [8, 31], "select": [8, 21, 31, 44, 334, 441, 442, 498, 499, 500, 507, 518, 521, 525, 527, 530, 533, 539, 542, 543], "select_rang": [8, 31], "tol": [8, 31], "eigenvalu": [8, 13, 31, 36, 324, 356, 357, 358], "eigenvector": [8, 31, 324, 356, 357], "string": [8, 12, 25, 31, 35, 51, 53, 89, 90, 102, 109, 130, 131, 132, 133, 134, 136, 144, 150, 151, 154, 229, 313, 317, 318, 321, 323, 324, 336, 337, 338, 339, 341, 343, 345, 358, 455, 459, 472, 504, 505, 507, 508, 509, 512, 513, 519, 525, 528], "v": [8, 12, 20, 27, 31, 35, 43, 79, 323, 333, 349, 350, 439, 455, 472, 474, 475, 476, 477, 478, 489, 495, 496, 499, 500, 501, 505, 525, 528, 529, 530], "interv": [8, 17, 22, 31, 40, 45, 65, 78, 79, 316, 324, 326, 330, 335, 378, 384, 387, 395, 424, 426, 451, 452, 500], "togeth": [8, 25, 31, 478, 489, 492, 503, 506, 513, 518, 519, 522, 523, 529, 530, 533, 537, 539, 540, 545], "cluster": [8, 31, 533, 539], "converg": [8, 31, 493], "li": [8, 31, 491], "_2": [8, 31], "machin": [8, 13, 31, 36, 104, 107, 317, 324, 365, 368, 492, 499, 502, 515, 532, 534, 537, 539, 541, 542, 543, 544, 545], "eig_val": [8, 31], "decreas": [8, 31, 460], "eig_vector": [8, 31], "38196": 8, "61803": 8, "eigval": [8, 31], "kron": [8, 31, 546], "matrix_exp": [8, 31], "7183": [8, 31], "3891": [8, 31], "multi_dot": [8, 31], "49": [8, 17, 31, 36, 213, 319, 334, 377, 425, 443], "148": [8, 30, 31, 177], "loss": [8, 31, 381, 382, 383, 489, 507, 508, 515, 519, 522, 528, 529, 530, 539, 546], "_arraywithlossesexperiment": [8, 47], "manipul": [8, 31, 491, 518, 519, 522, 523, 525, 530, 532, 539], "_arraywithmanipulationexperiment": [8, 47], "as_strid": [8, 31], "nativeshap": [8, 12, 15, 17, 31, 38, 40, 72, 76, 83, 87, 270, 280, 285, 287, 316, 321, 323, 326, 330, 336, 338, 340, 342, 344, 391, 424, 425, 426], "byte": [8, 31, 32, 47, 264, 321, 513, 544, 545], "atleast_1d": [8, 31], "ari": [8, 31], "cannot": [8, 500, 502, 504, 508, 519, 525, 530, 545], "ndim": [8, 13, 18, 36, 41, 47, 298, 321, 324, 331, 369, 372, 432, 469, 506, 512], "made": [8, 15, 31, 395, 492, 495, 498, 500, 502, 503, 506, 507, 512, 517, 518, 519, 522, 523, 525, 527, 539], "a1": [8, 32, 74, 223, 316], "a2": 8, "atleast_2d": [8, 31], "atleast_3d": [8, 31], "view": [8, 15, 31, 47, 75, 316, 499, 500, 512, 539], "three": [8, 80, 316, 499, 500, 506, 507, 510, 519, 521, 523, 524, 525, 540, 545], "concat_from_sequ": [8, 31], "input_sequ": [8, 31], "new_axi": [8, 31, 530], "insert": [8, 18, 31, 41, 326, 328, 331, 333, 387, 408, 429, 439, 507], "concaten": [8, 9, 15, 31, 36, 231, 235, 321, 326, 367, 385, 520, 523, 525, 528], "do": [8, 9, 25, 31, 32, 208, 256, 319, 321, 328, 403, 410, 413, 414, 415, 420, 489, 493, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 527, 528, 529, 530, 533, 534, 540, 545, 546], "stack": [8, 13, 15, 25, 31, 36, 38, 47, 85, 86, 250, 272, 278, 296, 316, 321, 324, 326, 328, 353, 355, 356, 357, 358, 360, 362, 364, 365, 366, 368, 369, 370, 372, 373, 376, 403, 413, 414, 474, 489, 497, 502, 518, 525, 535, 537, 544, 545], "dsplit": [8, 31], "indices_or_sect": [8, 31], "split": [8, 15, 25, 31, 38, 147, 148, 149, 231, 265, 318, 321, 323, 326, 336, 343, 344, 349, 396, 455, 489, 494, 500, 507, 524, 525, 533, 546], "3rd": [8, 31], "dstack": [8, 31], "start_dim": [8, 31, 489], "end_dim": [8, 31, 489], "read": [8, 15, 25, 31, 38, 326, 391, 498, 499, 505, 507, 521, 523, 539], "fastest": [8, 15, 31, 38, 326, 391], "back": [8, 15, 31, 38, 271, 291, 321, 326, 391, 473, 475, 477, 492, 499, 500, 503, 508, 512, 516, 517, 524, 533, 537, 541], "slowest": [8, 15, 31, 38, 326, 391], "fortran": [8, 15, 31, 38, 326, 391, 539, 543], "layout": [8, 15, 31, 38, 326, 391, 504, 519, 523], "fliplr": [8, 31, 518], "flip": [8, 15, 31, 38, 165, 319, 326, 518, 527, 528, 530], "revers": [8, 9, 13, 21, 31, 36, 44, 47, 48, 230, 321, 324, 326, 334, 377, 388, 441, 442, 498, 506, 507, 508, 510, 511, 518, 519, 523, 530, 533], "diag": [8, 13, 31, 36, 324, 525], "flipud": [8, 31, 518], "heavisid": [8, 31], "step": [8, 10, 27, 31, 33, 65, 78, 299, 300, 303, 305, 306, 307, 316, 322, 327, 400, 401, 402, 472, 477, 489, 493, 495, 498, 499, 500, 503, 504, 506, 507, 508, 509, 510, 517, 519, 521, 525, 528, 529, 530, 532, 539], "5000": [8, 324, 360], "hsplit": [8, 31], "horizont": [8, 31, 231, 321], "hstack": [8, 31], "vstack": [8, 31], "i0": [8, 31], "modifi": [8, 25, 31, 498, 499, 500, 502, 504, 505, 508, 509, 511, 513, 515, 518, 520, 521, 522, 525], "bessel": [8, 21, 31, 44, 334, 448, 450], "kind": [8, 21, 31, 104, 107, 108, 205, 317, 319, 334, 441, 442, 447, 449, 458, 459, 497, 519, 521, 523, 525, 533], "26606588": [8, 31], "2795853": [8, 31], "88079259": [8, 31], "moveaxi": [8, 31], "destin": [8, 31], "unstack": [8, 15, 25, 38, 326, 506, 525, 528, 546], "reorder": [8, 15, 31, 38, 231, 321, 326, 388], "uniqu": [8, 9, 19, 31, 32, 42, 262, 321, 327, 328, 332, 400, 401, 402, 405, 409, 434, 435, 436, 437, 460, 489, 491, 502, 506, 515, 519, 520, 523, 533, 542], "pad_width": [8, 15, 31, 38, 326, 386, 399], "stat_length": [8, 31], "constant_valu": [8, 31], "end_valu": [8, 31], "reflect_typ": [8, 31], "rot90": [8, 31, 518], "rotat": [8, 31, 532], "take_along_axi": [8, 31], "extract": [8, 31, 519, 522, 535, 539, 540, 545], "One": [8, 9, 15, 17, 31, 32, 38, 40, 232, 321, 326, 330, 391, 424, 503, 506, 508, 510, 515, 520, 521, 525, 527, 528], "drop": [8, 31, 473, 499, 533], "how": [8, 31, 472, 473, 474, 475, 489, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 535, 539], "bound": [8, 31, 458, 512, 519, 521, 525, 545], "arr": [8, 9, 28, 31, 112, 270, 317, 508, 509], "top_k": [8, 31], "largest": [8, 25, 31, 104, 107, 317, 324, 363, 372, 532], "top": [8, 15, 31, 231, 321, 385, 472, 489, 499, 500, 508, 519, 521, 523, 528, 529, 539, 543], "retun": [8, 31], "smallest": [8, 25, 31, 104, 107, 170, 317, 319, 324, 363, 458, 460], "name": [8, 13, 19, 23, 36, 42, 46, 51, 53, 221, 222, 313, 321, 324, 332, 356, 357, 361, 369, 370, 372, 377, 434, 435, 436, 455, 464, 482, 484, 498, 499, 500, 504, 505, 506, 507, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 525, 528, 530, 539], "vsplit": [8, 31], "vertic": [8, 31, 231, 321, 500], "_arraywithnormsexperiment": [8, 47], "batch_norm": [8, 31], "varianc": [8, 21, 31, 44, 334, 450, 473], "momentum": [8, 31, 492], "broadcastbl": [8, 31], "present": [8, 25, 31, 491, 498, 500, 506, 508, 509, 514, 518, 525, 536, 537, 546], "avoid": [8, 31, 178, 192, 225, 319, 321, 460, 461, 499, 500, 504, 505, 506, 507, 508, 512, 513, 516, 519, 521, 522, 523, 539], "running_mean": [8, 31], "running_var": [8, 31], "instance_norm": [8, 31], "l2_normal": [8, 31], "l2": [8, 13, 36, 324, 379, 506], "whole": [8, 500, 505], "4472": 8, "8944": 8, "lp_normal": [8, 31], "lp": 8, "_arraywithrandomexperiment": [8, 47], "bernoulli": [8, 31], "seed": [8, 12, 17, 19, 25, 31, 35, 40, 323, 330, 332, 346, 423, 424, 425, 426, 428, 434, 464, 471, 520, 521], "event": [8, 31, 521], "entri": [8, 15, 25, 31, 38, 42, 78, 316, 326, 328, 393, 416, 434, 499, 507, 521, 539], "parameter": [8, 17, 31, 40, 330, 423, 425, 426], "distribut": [8, 14, 17, 31, 37, 40, 325, 330, 381, 382, 383, 423, 424, 425, 426, 428, 473, 474, 475, 498, 507, 509, 533, 539, 542], "prob": [8, 12, 31, 35, 40, 323, 330, 346, 423, 474, 489], "odd": [8, 31, 205, 319, 497, 502], "g": [8, 17, 19, 21, 23, 31, 40, 46, 90, 118, 131, 317, 318, 328, 330, 332, 334, 406, 410, 412, 420, 424, 425, 426, 434, 435, 436, 437, 441, 442, 444, 446, 447, 449, 473, 493, 494, 498, 499, 501, 502, 506, 517, 519, 521, 525, 533, 534, 535], "drawn": [8, 17, 31, 40, 330, 423, 424, 425, 426, 458, 459, 460, 473, 521], "dirichlet": [8, 31], "shuffl": [8, 17, 25, 31, 40, 330], "10598304": 8, "21537054": 8, "67864642": 8, "48006698": 8, "07472073": 8, "44521229": 8, "55479872": 8, "05426367": 8, "39093761": 8, "19531053": 8, "51675832": 8, "28793114": 8, "12315625": 8, "29823365": 8, "5786101": 8, "15564976": 8, "50542368": 8, "33892656": 8, "1325352": 8, "44439589": 8, "42306891": 8, "gamma": [8, 16, 39, 329, 422], "poisson": [8, 31], "rate": [8, 10, 31, 33, 300, 303, 305, 306, 307, 322, 327, 400, 401, 402, 474, 477, 507], "paramt": [8, 328, 410, 420], "lam": [8, 31], "_arraywithsearchingexperiment": [8, 47], "unravel_index": [8, 31], "unravel": [8, 31], "_arraywithsetexperiment": [8, 47], "sort": [8, 25, 31, 48, 324, 356, 357, 372, 373, 438, 439, 460, 489, 497, 507, 522], "_arraywithsortingexperiment": [8, 47], "lexsort": [8, 31], "indirectli": [8, 31], "msort": [8, 31], "statist": [8, 31, 46, 487, 498, 508, 521, 522, 539], "_arraywithstatisticalexperiment": [8, 47], "bincount": [8, 31], "minlength": [8, 31], "alreadi": [8, 25, 31, 170, 179, 209, 218, 319, 324, 359, 367, 489, 498, 499, 500, 504, 506, 508, 514, 518, 519, 523, 533, 539, 541, 546], "bin": [8, 31, 495, 499, 500, 502, 506], "corrcoef": [8, 31], "relationship": [8, 31, 473], "median": [8, 31, 519], "nanmean": [8, 31], "anyth": [8, 31, 500, 521, 522, 539, 540], "sub": [8, 13, 15, 25, 26, 30, 31, 32, 36, 38, 48, 200, 324, 326, 327, 355, 393, 400, 401, 402, 472, 498, 500, 501, 506, 512, 519, 520, 521, 527, 528, 529, 535], "6666666666666665": [8, 31], "nanmedian": [8, 31], "overwrite_input": [8, 31], "save": [8, 25, 31, 251, 279, 318, 321, 475, 493, 495, 507, 513, 521, 533, 538], "content": [8, 25, 31, 498, 505, 518, 525, 528], "treat": [8, 25, 31, 455, 517, 521, 526, 530], "undefin": [8, 31, 513, 517], "fulli": [8, 31, 474, 489, 493, 503, 508, 514, 517, 518, 523, 525, 526, 527, 528, 529, 530, 533, 537, 538, 539, 545, 546], "quantil": [8, 31], "inclus": [8, 31, 65, 316, 330, 424, 494, 504, 518, 523], "higher": [8, 31, 473, 524, 525, 530, 533, 536, 539, 540, 543, 545, 546], "midpoint": [8, 31], "fraction": [8, 31, 323, 346], "surround": [8, 31, 523], "whichev": [8, 31], "_arraywithutilityexperiment": [8, 47], "_arraywithgener": [9, 47], "all_equ": [9, 32, 321], "equality_matrix": [9, 32, 220, 321], "array_equ": [9, 32, 321], "assert_supports_inplac": [9, 32, 321], "ivybackendexcept": [9, 32, 224, 256, 321, 485, 503, 512], "jaxlib": [9, 32, 224, 321, 482, 499, 503, 508, 509, 514, 522, 525, 527], "xla_extens": [9, 32, 224, 321, 482, 503, 508, 509, 514, 522, 525, 527], "devicearrai": [9, 32, 224, 321, 482, 503, 519, 525, 527], "clip_matrix_norm": [9, 32, 321], "downscal": [9, 32, 226, 227, 256, 321], "894": [9, 32, 226, 227, 321, 329, 422], "79": [9, 32, 40, 47, 169, 174, 226, 227, 319, 321, 426], "clip_vector_norm": [9, 32, 321], "default_v": [9, 230, 321], "catch_except": [9, 230, 321], "rev": [9, 230, 321], "with_cal": [9, 230, 321], "catch": [9, 230, 321, 521], "might": [9, 117, 230, 317, 321, 498, 499, 500, 507, 508, 510, 513, 516, 518, 519, 521, 522, 523, 525, 527, 528, 534], "exist": [9, 15, 25, 38, 230, 321, 326, 385, 391, 477, 479, 489, 491, 492, 498, 499, 502, 504, 505, 510, 511, 515, 516, 518, 519, 521, 523, 525, 533, 534, 537, 539, 542, 545], "els": [9, 17, 31, 40, 53, 97, 98, 99, 100, 101, 224, 230, 234, 317, 321, 328, 330, 413, 416, 424, 425, 426, 453, 489, 498, 500, 502, 504, 508, 512, 515, 518, 519, 520, 521, 522, 523, 525, 527, 529, 530, 533, 540], "einops_rearrang": [9, 32, 321], "pattern": [9, 32, 231, 232, 233, 321, 493, 508, 511], "axes_length": [9, 32, 231, 232, 233, 321], "re": [9, 18, 41, 149, 225, 231, 318, 321, 324, 326, 331, 374, 392, 431, 433, 490, 491, 492, 494, 498, 499, 500, 501, 502, 508, 517, 518, 519, 522, 523, 527, 530, 533, 539], "arrang": [9, 231, 321], "rearrang": [9, 32, 231, 233, 321], "einop": [9, 32, 231, 232, 233, 321, 492], "einops_reduc": [9, 32, 321], "reduct": [9, 14, 22, 25, 31, 32, 37, 45, 232, 269, 270, 321, 325, 335, 381, 382, 383, 451, 452, 508, 512, 521, 527], "prod": [9, 21, 32, 44, 232, 321, 334, 458, 508, 510, 525], "einops_repeat": [9, 32, 321], "fourier_encod": [9, 32, 321], "max_freq": [9, 32, 235, 321], "num_band": [9, 32, 235, 321], "band": [9, 32, 235, 321], "linearli": [9, 32, 235, 321, 324, 371], "oppos": [9, 32, 235, 321, 508], "geometr": [9, 32, 235, 321, 324, 377], "seper": [9, 235, 321, 510, 520, 521], "0000000e": [9, 32, 235, 321], "2246468e": [9, 32, 235, 321], "4492936e": [9, 235, 321], "6739404e": [9, 32, 235, 321], "gather": [9, 32, 239, 243, 321, 546], "batch_dim": [9, 32, 238, 239, 321, 479], "gather_nd": [9, 32, 321], "get_num_dim": [9, 32, 321], "as_arrai": [9, 32, 247, 280, 321], "has_nan": [9, 32, 321], "include_inf": [9, 32, 252, 297, 321], "inplace_decr": [9, 32, 321], "val": [9, 25, 31, 32, 254, 255, 256, 273, 274, 321, 518, 527], "decrement": [9, 32, 254, 321], "inplace_incr": [9, 32, 321], "increment": [9, 32, 255, 321, 500, 522, 539], "inplace_upd": [9, 32, 321, 471, 518], "ensure_in_backend": [9, 32, 256, 321, 518], "keep_input_dtyp": [9, 32, 256, 321, 518], "ensur": [9, 32, 256, 321, 453, 489, 498, 499, 500, 503, 508, 510, 512, 513, 514, 516, 518, 519, 520, 521, 522, 539], "is_arrai": [9, 32, 321, 518, 519], "exclus": [9, 21, 25, 32, 44, 65, 258, 259, 261, 316, 321, 330, 334, 424, 441, 442, 506, 508, 515, 522, 530, 543, 545], "rather": [9, 25, 32, 65, 149, 258, 259, 261, 316, 318, 321, 492, 500, 502, 506, 508, 511, 518, 519, 520, 521, 522, 530, 533, 535, 538, 539], "is_ivy_arrai": [9, 32, 321, 518, 527], "is_ivy_contain": [9, 321], "is_native_arrai": [9, 32, 114, 259, 317, 321, 527], "isin": [9, 32, 264, 321], "test_el": [9, 32, 262, 321], "assume_uniqu": [9, 32, 262, 321], "invert": [9, 32, 165, 262, 319, 321, 324, 364], "speed": [9, 32, 262, 321, 491, 515, 521, 542], "scatter_flat": [9, 32, 321], "occupi": [9, 104, 107, 269, 270, 317, 321], "scatter_nd": [9, 32, 321, 523, 527], "empti": [9, 25, 32, 65, 226, 270, 312, 316, 321, 322, 324, 328, 334, 335, 379, 417, 449, 451, 452, 498, 499, 503, 505, 508, 509, 518], "stable_divid": [9, 32, 321, 515], "denomin": [9, 16, 32, 39, 245, 274, 282, 321, 329, 422, 476, 515, 533, 536], "min_denomin": [9, 32, 282, 321], "global": [9, 25, 32, 48, 97, 98, 99, 100, 101, 147, 148, 149, 244, 245, 248, 273, 274, 276, 282, 283, 294, 308, 310, 312, 317, 318, 321, 322, 464, 476, 482, 499, 503, 504, 507, 508, 509, 512, 515, 519, 525, 539], "_min_denomin": [9, 32, 282, 321], "stable_pow": [9, 32, 321], "min_bas": [9, 32, 283, 321], "_min_bas": [9, 32, 283, 321, 476], "stabl": [9, 20, 32, 43, 209, 244, 245, 273, 274, 282, 283, 319, 321, 333, 438, 440, 460, 499, 504, 508, 519, 525, 533], "supports_inplace_upd": [9, 32, 321], "to_list": [9, 32, 321], "to_numpi": [9, 32, 321, 489, 520, 528], "address": [9, 288, 321, 493, 498, 500, 502, 503, 525, 535, 537, 539, 545], "to_scalar": [9, 32, 321], "value_is_nan": [9, 32, 321], "92": [9, 40, 297, 307, 322, 324, 353, 425, 426], "_arraywithgradi": [10, 47], "adam_step": [10, 33, 322], "mw": [10, 33, 299, 300, 322, 529], "vw": [10, 33, 299, 300, 322, 529], "beta1": [10, 33, 222, 299, 300, 305, 321, 322, 477, 529], "beta2": [10, 33, 222, 299, 300, 305, 321, 322, 477, 529], "999": [10, 30, 33, 217, 299, 300, 305, 307, 319, 322, 477, 529], "epsilon": [10, 13, 14, 31, 33, 36, 37, 222, 299, 300, 305, 321, 322, 324, 325, 365, 368, 381, 382, 383, 476, 477, 506, 515, 518, 529], "07": [10, 14, 30, 31, 33, 37, 40, 162, 190, 194, 210, 299, 300, 302, 303, 304, 305, 311, 319, 322, 325, 381, 382, 383, 425, 477, 529], "cost": [10, 33, 299, 300, 303, 305, 306, 307, 322, 327, 400, 401, 402, 523, 537], "dc": [10, 33, 299, 300, 303, 305, 306, 307, 322], "dw": [10, 33, 299, 300, 303, 305, 306, 307, 322], "forget": [10, 33, 299, 300, 305, 322, 477, 489, 508], "factor": [10, 12, 13, 31, 33, 35, 36, 147, 148, 149, 299, 300, 305, 306, 318, 322, 323, 324, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 458, 460, 461, 473, 474, 477, 492, 512], "adam": [10, 33, 222, 299, 300, 305, 321, 322, 477, 489, 528, 529, 530, 539], "prevent": [10, 33, 225, 299, 300, 305, 321, 322, 323, 334, 346, 449, 473, 477, 498, 500, 507, 508, 512, 513, 518, 519, 522, 523], "delta": [10, 33, 299, 322], "dcdw": [10, 33, 299, 300, 303, 305, 306, 322], "adam_step_delta": [10, 33, 299, 322], "2020105": [10, 299, 322], "22187898": [10, 299, 322], "24144873": [10, 299, 322], "10000002": [10, 44, 299, 322, 445], "20000005": [10, 299, 322], "00300002": [10, 299, 322], "00800002": [10, 299, 322], "adam_upd": [10, 33, 322, 529], "lr": [10, 33, 222, 300, 303, 305, 306, 307, 321, 322, 477, 528, 529], "mw_tm1": [10, 33, 300, 305, 322], "vw_tm1": [10, 33, 300, 305, 322], "stop_gradi": [10, 33, 149, 222, 300, 303, 305, 306, 307, 318, 321, 322, 327, 400, 401, 402, 477, 529], "learn": [10, 33, 231, 300, 303, 305, 306, 307, 321, 322, 327, 400, 401, 402, 477, 489, 491, 492, 494, 497, 498, 499, 501, 502, 515, 517, 524, 532, 534, 537, 541, 542, 543, 544, 545, 546], "previou": [10, 33, 125, 126, 127, 128, 129, 291, 293, 294, 295, 300, 305, 317, 321, 322, 473, 500, 502, 504, 507, 514, 519, 521, 523, 530, 533, 542], "ws_new": [10, 33, 300, 305, 306, 307, 322], "updated_weight": [10, 33, 300, 322], "92558753": [10, 300], "92558873": [10, 300, 322], "92558718": [10, 300, 322], "00000063e": [10, 33, 300, 322], "00000016e": [10, 33, 300, 322], "00000086e": [10, 33, 300, 322], "gradient_descent_upd": [10, 33, 322, 327, 400, 401, 402], "descent": [10, 33, 303, 322, 477, 529, 539], "new_weight": [10, 33, 303, 305, 322, 528], "95": [10, 17, 24, 33, 40, 52, 299, 303, 307, 313, 322, 330, 425, 426], "97": [10, 30, 33, 40, 160, 303, 319, 322, 425], "96": [10, 30, 31, 32, 40, 171, 216, 231, 232, 303, 319, 321, 322, 324, 334, 367, 426, 443], "lamb_upd": [10, 33, 322], "max_trust_ratio": [10, 33, 305, 322, 477], "decay_lambda": [10, 33, 305, 306, 322, 477], "trust": [10, 33, 305, 322, 477], "ratio": [10, 33, 305, 322, 477], "decai": [10, 33, 305, 306, 322, 477], "lamb": [10, 33, 305, 322, 477, 529], "784": [10, 305, 322], "78": [10, 169, 210, 305, 319, 322, 324, 330, 334, 367, 425, 443], "lars_upd": [10, 33, 322], "lar": [10, 33, 306, 322, 477, 529], "optimizer_upd": [10, 33, 322], "effective_grad": [10, 33, 307, 322], "3e": [10, 33, 307, 322], "preserve_typ": [10, 33, 309, 322], "_arraywithimag": [11, 47], "_arraywithlay": [12, 47], "conv1d": [12, 35, 323, 474], "fw": [12, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 455, 521], "d_out": [12, 35, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344], "wio": [12, 323, 337, 338], "conv1d_transpos": [12, 35, 323], "output_shap": [12, 35, 323, 336, 338, 340, 342, 344, 474], "low": [12, 17, 35, 40, 323, 330, 336, 337, 338, 339, 341, 343, 345, 424, 426, 460, 506, 519, 523, 525, 535, 537, 539, 540, 541, 543, 545], "high": [12, 17, 35, 40, 323, 330, 336, 337, 338, 339, 341, 343, 345, 424, 426, 460, 493, 498, 517, 519, 523, 528, 534, 535, 536, 537, 538, 539, 543, 545, 546], "pair": [12, 35, 162, 319, 323, 324, 336, 337, 338, 339, 341, 343, 345, 350, 352, 507], "give": [12, 35, 117, 317, 323, 326, 336, 337, 338, 339, 341, 343, 345, 391, 472, 473, 489, 493, 495, 499, 500, 501, 504, 505, 507, 510, 511, 514, 521, 539, 543], "conv2d": [12, 35, 323, 340, 474, 489], "fh": [12, 35, 323, 336, 339, 340, 341, 342, 343, 344, 345], "hwio": [12, 323, 339], "conv2d_transpos": [12, 35, 323], "random_norm": [12, 13, 17, 35, 36, 40, 231, 321, 323, 324, 330, 338, 340, 341, 342, 345, 348, 372], "std": [12, 17, 21, 35, 40, 44, 323, 330, 334, 338, 340, 341, 342, 345, 424, 425, 510], "conv3d": [12, 35, 323, 474], "fd": [12, 35, 323, 336, 341, 342, 343, 344], "conv3d_transpos": [12, 35, 323], "depthwise_conv2d": [12, 35, 323], "dropout": [12, 35, 323, 474, 528], "noise_shap": [12, 35, 323, 346], "droput": [12, 346], "turn": [12, 35, 323, 346, 493, 499, 506, 510, 519, 521], "reproduc": [12, 35, 323, 346, 458, 459, 460, 461, 464, 502], "binari": [12, 14, 31, 35, 37, 164, 167, 169, 198, 319, 323, 325, 346, 381], "mask": [12, 35, 243, 321, 323, 346, 349, 350, 523], "42857146": [12, 323, 346], "85714293": [12, 323, 346], "28571415": [12, 35, 323, 346], "71428585": [12, 35, 323, 346], "14285755": [12, 35, 323, 346], "5714283": [12, 323, 346], "4285717": [12, 35, 323, 346], "8571434": [12, 35, 323, 346], "2857151": [12, 323, 346], "dropout1d": [12, 35], "droput1d": 12, "dropout3d": [12, 35], "droput3d": 12, "outer_batch_shap": [12, 35, 323, 347], "inner_batch_shap": [12, 35, 323, 347], "in_featur": [12, 35, 323, 347], "out_featur": [12, 35, 323, 347], "84": [12, 21, 30, 39, 40, 107, 136, 192, 317, 318, 324, 329, 334, 347, 367, 422, 425, 426, 443], "133": [12, 227, 321, 347], "134": [12, 324, 347, 364], "lstm_updat": [12, 35, 323, 525], "init_h": [12, 35, 323, 348, 525], "init_c": [12, 35, 323, 348, 525], "recurrent_kernel": [12, 35, 323, 348, 525], "recurrent_bia": [12, 35, 323, 348, 525], "cell": [12, 35, 323, 348, 474, 507, 525], "batch_shap": [12, 17, 27, 35, 40, 74, 82, 316, 323, 324, 330, 348, 349, 350, 380, 423, 474, 523, 525, 527], "hidden": [12, 35, 323, 348, 474, 505, 512, 525, 529], "recurr": [12, 35, 323, 348, 525, 539, 543], "timestep": [12, 35, 323, 348, 474, 525], "h_i": [12, 35, 348], "c_i": [12, 35, 348], "rc": [12, 35, 348], "multi_head_attent": [12, 35, 323, 518], "num_head": [12, 35, 323, 349, 474], "context": [12, 35, 266, 321, 322, 323, 349, 474, 499, 500, 510], "to_q_fn": [12, 35, 323, 349], "to_kv_fn": [12, 35, 323, 349], "to_out_fn": [12, 35, 323, 349, 518], "to_q_v": [12, 35, 323, 349], "to_kv_v": [12, 35, 323, 349], "to_out_v": [12, 35, 323, 349], "scaled_dot_product_attent": [12, 35, 323], "queri": [12, 25, 35, 136, 148, 243, 318, 321, 323, 349, 350, 474, 506, 508, 527, 539], "num_queri": [12, 35, 323, 349, 350], "feat_dim": [12, 35, 323, 350], "num_kei": [12, 35, 323, 349, 350], "applic": [12, 35, 323, 328, 349, 350, 409, 410, 411, 415, 416, 489, 499, 508, 509, 516, 529, 536, 537, 539, 541, 543, 545], "dot": [12, 31, 35, 323, 324, 349, 350, 378, 474, 489, 507], "attent": [12, 35, 323, 349, 350, 474, 492, 500, 503], "score": [12, 35, 323, 350, 489], "_arraywithlinearalgebra": [13, 47], "choleski": [13, 36, 324, 518], "symmetr": [13, 31, 36, 324, 351, 356, 357, 358, 380, 506], "u": [13, 27, 36, 79, 324, 328, 351, 358, 372, 411, 489, 492, 494, 499, 500, 501, 505, 506, 507, 515, 516, 518, 519, 520, 521, 522, 523, 529, 533], "l": [13, 30, 36, 195, 324, 351, 356, 357, 358, 362, 376, 500, 501], "625": [13, 31, 324, 351], "cross": [13, 14, 31, 36, 37, 324, 325, 381, 382, 383, 489, 507], "vif": [13, 36, 324, 352], "det": [13, 36, 324, 370, 507], "axis1": [13, 15, 36, 38, 324, 326, 355, 376, 396], "axis2": [13, 36, 324, 355, 376], "eigh": [13, 36, 324, 356], "uplo": [13, 36, 324, 357, 358], "eigvalsh": [13, 36, 324], "inner": [13, 27, 36, 82, 316, 324, 327, 356, 357, 362, 400, 401, 402, 498, 518], "inv": [13, 36, 324], "matmul": [13, 36, 298, 321, 324, 372, 504, 521, 522, 525], "transpose_a": [13, 36, 324, 362], "transpose_b": [13, 36, 324, 362], "adjoint_a": [13, 36, 324, 362], "adjoint_b": [13, 36, 324, 362], "detail": [13, 15, 19, 31, 36, 38, 42, 75, 316, 332, 355, 362, 368, 372, 395, 434, 435, 436, 437, 489, 498, 500, 502, 504, 505, 506, 507, 514, 515, 516, 519, 520, 521, 522, 525, 527, 528, 529, 541, 545], "found": [13, 15, 19, 25, 31, 36, 38, 42, 48, 139, 318, 328, 355, 362, 395, 414, 434, 472, 495, 498, 499, 500, 503, 504, 505, 506, 508, 511, 513, 516, 518, 519, 523, 541], "matrix_norm": [13, 36, 324], "ord": [13, 36, 324, 363, 379], "fro": [13, 36, 324, 363], "nuc": [13, 36, 324, 363], "matrix_pow": [13, 36, 324], "matrix_rank": [13, 36, 324], "singular": [13, 36, 324, 363, 365, 368, 372, 373, 460, 508], "largest_singular_valu": [13, 36, 324, 365, 368], "associ": [13, 36, 158, 319, 324, 365, 368, 380, 455, 500, 508, 515, 516, 519, 520, 521, 533], "full": [13, 35, 36, 104, 183, 189, 242, 250, 272, 278, 292, 296, 316, 317, 319, 321, 323, 324, 338, 340, 341, 342, 365, 369, 371, 372, 455, 459, 464, 489, 492, 493, 500, 508, 511, 512, 514, 519, 521, 523, 525, 533, 537, 539, 545], "defici": [13, 324, 365], "matrix_transpos": [13, 36, 324, 527], "outer": [13, 36, 324, 327, 400, 401, 402, 498], "pinv": [13, 36, 324], "pseudo": [13, 36, 324, 368, 517], "0426": [13, 36, 368], "0964": [13, 36, 368], "0605": [13, 36, 368], "1368": [13, 36, 368], "qr": [13, 36, 324, 520], "decomposit": [13, 36, 324, 351, 361, 369, 372, 498, 546], "orthonorm": [13, 36, 324, 369, 372], "lead": [13, 25, 36, 48, 324, 369, 372, 460, 492, 493, 507, 510, 522, 533], "complet": [13, 25, 36, 324, 369, 459, 492, 498, 499, 500, 502, 503, 506, 507, 510, 512, 519, 520, 521, 523, 527, 528, 537], "namedtupl": [13, 19, 36, 42, 324, 332, 356, 357, 369, 370, 372, 434, 435, 436], "field": [13, 19, 36, 42, 324, 332, 356, 357, 369, 370, 372, 434, 435, 436, 489, 507, 532, 537, 545], "those": [13, 15, 25, 31, 36, 38, 65, 117, 298, 316, 317, 321, 324, 326, 328, 369, 372, 384, 405, 491, 498, 499, 500, 503, 506, 507, 508, 516, 518, 519, 520, 521, 523, 536], "slogdet": [13, 36, 324], "logabsdet": [13, 36, 324, 370], "natur": [13, 36, 177, 190, 192, 209, 319, 324, 370, 492, 503, 505, 510, 512, 520, 532], "6931472": [13, 36, 324, 370], "098611": [13, 324, 370], "solv": [13, 36, 324, 489, 499, 502, 519, 526, 532, 541], "svd": [13, 36, 324, 373], "compute_uv": [13, 36, 324, 372], "full_matric": [13, 36, 324, 372], "svf": [13, 372], "vh": [13, 36, 324, 372], "significantli": [13, 36, 324, 372, 491, 507, 537], "faster": [13, 36, 324, 372, 497, 534, 541, 544], "hermitian": [13, 36, 324, 356, 357, 358, 372], "reconstruct": [13, 19, 42, 324, 332, 372, 434, 436, 520], "close": [13, 178, 192, 209, 319, 324, 326, 372, 387, 498, 499, 500, 511, 519, 523, 539], "reconstructed_x": [13, 324, 372], "svdval": [13, 36, 324], "tensordot": [13, 36, 324, 508], "tensorsolv": [13, 36, 324], "vander": [13, 36, 324], "vandermond": [13, 36, 324, 377], "vecdot": [13, 36, 324], "vector_norm": [13, 36, 324], "singleton": [13, 18, 21, 22, 36, 41, 44, 45, 324, 326, 331, 334, 335, 379, 387, 394, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 525], "accordingli": [13, 18, 19, 21, 22, 36, 41, 44, 45, 80, 178, 192, 316, 319, 324, 331, 332, 334, 335, 379, 430, 434, 435, 436, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 513, 519, 525], "mathemat": [13, 36, 158, 162, 178, 192, 314, 319, 324, 363, 379, 508, 519, 523, 539, 545], "l1": [13, 36, 324, 379, 506, 528], "manhattan": [13, 36, 324, 379], "euclidean": [13, 36, 324, 379], "7416575": [13, 36, 324, 379], "vector_to_skew_symmetric_matrix": [13, 36, 324], "_arraywithloss": [14, 47], "binary_cross_entropi": [14, 37, 325, 507], "pred": [14, 31, 37, 325, 381, 382, 383, 489, 506, 515, 518], "label": [14, 31, 37, 325, 381, 382, 383, 489, 498, 500, 502, 507, 519, 524, 525, 526, 530, 539], "predict": [14, 31, 37, 325, 381, 382, 383, 489], "amount": [14, 31, 37, 151, 318, 325, 381, 382, 383, 499, 507, 509, 520], "smooth": [14, 31, 37, 325, 381, 382, 383, 517], "entropi": [14, 31, 37, 325, 381, 382, 383, 489], "357": [14, 37, 325, 381, 383], "223": [14, 37, 325, 381, 383], "cross_entropi": [14, 37, 325, 383, 489, 506, 515, 518], "3862944": [14, 325, 382], "sparse_cross_entropi": [14, 37, 325], "_arraywithmanipul": [15, 47], "x_min": [15, 38, 326, 384, 530], "x_max": [15, 38, 326, 384, 530], "join": [15, 25, 31, 38, 326, 385, 395, 489, 512], "constant_pad": [15, 38, 326], "before_1": [15, 38, 326, 386, 399], "after_1": [15, 38, 326, 386, 399], "before_n": [15, 38, 326, 386, 399], "after_n": [15, 38, 326, 386, 399], "permute_dim": [15, 38, 326], "repetit": [15, 38, 326, 390, 397, 512, 523], "fit": [15, 38, 326, 390, 519, 525, 535, 536, 539], "flat": [15, 25, 38, 269, 321, 326, 390, 472], "allowzero": [15, 38, 326, 391], "remain": [15, 18, 38, 41, 158, 208, 319, 326, 328, 331, 391, 409, 432, 500, 507, 510, 512, 522, 523, 533], "never": [15, 38, 326, 391, 500, 508, 518, 519, 521, 523], "valueerror": [15, 38, 42, 326, 391, 394, 437, 485, 512], "reus": [15, 38, 326, 391, 512, 521, 544], "buffer": [15, 31, 38, 326, 391, 518, 533], "roll": [15, 38, 326, 506, 514], "shift": [15, 27, 38, 48, 77, 166, 168, 319, 326, 392, 499, 500, 510, 514], "restor": [15, 38, 326, 392], "num_or_size_split": [15, 25, 38, 323, 326, 349, 393, 525], "with_remaind": [15, 25, 38, 326, 393], "mani": [15, 25, 38, 326, 393, 472, 489, 491, 492, 493, 498, 499, 500, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 523, 525, 527, 528, 533, 535, 539, 542, 545, 546], "squeez": [15, 38, 326, 539], "document": [15, 298, 321, 395, 494, 496, 497, 500, 505, 507, 508, 510, 512, 518, 519, 520, 521, 528, 530], "swapax": [15, 38, 326], "axis0": [15, 38, 326, 396], "swap_ax": [15, 396], "tile": [15, 32, 38, 233, 326], "unpack": [15, 38, 326, 398, 513, 520, 521], "zero_pad": [15, 38, 326], "_arraywithnorm": [16, 47], "layer_norm": [16, 39, 329], "normalized_idx": [16, 39, 329, 422], "new_std": [16, 39, 329, 422, 476], "learnabl": [16, 39, 329, 422, 476, 530], "post": [16, 39, 329, 422, 499, 517, 530], "deviat": [16, 17, 21, 39, 40, 44, 329, 330, 334, 422, 425, 448, 460, 473, 476, 493, 502], "0976": [16, 329, 422], "3452": [16, 329, 422], "2740": [16, 329, 422], "1047": [16, 329, 422], "5886": [16, 329, 422], "2732": [16, 329, 422], "7696": [16, 329, 422, 458], "7024": [16, 329, 422], "2518": [16, 329, 422], "826": [16, 329, 422], "178": [16, 329, 422], "981": [16, 329, 422], "831": [16, 329, 422], "421": [16, 329, 422], "_arraywithrandom": [17, 47], "multinomi": [17, 40, 330], "population_s": [17, 40, 330, 423], "num_sampl": [17, 40, 330, 423], "unnorm": [17, 40, 330, 423, 521], "popul": [17, 21, 25, 40, 44, 330, 334, 423, 448, 450, 508, 509, 518, 521, 525, 545], "draw": [17, 40, 330, 423, 425, 426, 458, 459, 460, 461, 464, 473, 498, 502, 520, 521], "ve": [17, 40, 330, 423, 498, 499, 500, 521, 523, 524, 527, 534], "highest": [17, 40, 330, 424], "half": [17, 40, 65, 316, 330, 424, 426, 523], "int64": [17, 18, 20, 21, 28, 40, 41, 43, 44, 83, 94, 100, 103, 105, 107, 111, 112, 115, 122, 316, 317, 331, 333, 334, 424, 429, 430, 431, 439, 441, 442, 447, 449, 458, 508, 519, 521, 525], "235": [17, 425], "float16": [17, 28, 40, 96, 99, 104, 106, 317, 324, 379, 425, 426, 458, 508, 519, 521], "807": [17, 425], "random_uniform": [17, 40, 330, 509, 521, 525, 529], "86": [17, 40, 299, 322, 425, 426], "53": [17, 30, 151, 178, 302, 304, 311, 318, 322, 329, 422, 426], "_arraywithsearch": [18, 47], "select_last_index": [18, 41, 331, 429, 430], "occurr": [18, 331, 332, 429, 430, 434], "appropri": [18, 23, 41, 46, 158, 319, 331, 429, 498, 500, 516, 521], "argmin": [18, 41, 331], "output_dtyp": [18, 41, 331, 430], "across": [18, 25, 32, 41, 147, 148, 223, 252, 318, 321, 323, 328, 331, 346, 409, 429, 430, 498, 502, 506, 508, 510, 512, 514, 515, 517, 519, 521, 523, 537, 539, 544], "argwher": [18, 41, 331, 513], "nonzero": [18, 41, 158, 319, 331], "as_tupl": [18, 41, 331, 432], "fewer": [18, 41, 331, 432], "yield": [18, 331, 433, 489, 507, 513], "_arraywithset": [19, 47], "unique_al": [19, 42, 332], "inverse_indic": [19, 42, 332, 434, 436], "unique_count": [19, 42, 332], "unique_invers": [19, 42, 332], "unique_valu": [19, 42, 332], "admonit": [19, 437], "henc": [19, 326, 332, 387, 434, 435, 436, 437, 482, 499, 506, 507, 518, 521], "dask": [19, 332, 434, 435, 436, 437, 492], "difficult": [19, 332, 434, 435, 436, 437, 500, 502, 508, 521, 533], "know": [19, 332, 434, 435, 436, 437, 493, 496, 500, 505, 520, 521, 522, 540], "omit": [19, 209, 319, 332, 434, 435, 436, 437, 514, 518, 519], "x_i": [19, 21, 30, 31, 155, 156, 157, 159, 160, 161, 165, 170, 171, 172, 177, 178, 179, 184, 185, 186, 187, 190, 191, 192, 193, 196, 209, 210, 211, 212, 213, 214, 216, 217, 218, 319, 332, 334, 434, 435, 436, 437, 444, 445, 446, 448, 449, 450, 473, 511], "x_j": [19, 332, 434, 435, 436, 437], "impli": [19, 332, 434, 435, 436, 437, 521], "behavior": [19, 205, 208, 319, 332, 434, 435, 436, 437, 505, 506, 507, 508, 515, 518, 519, 520, 521, 523, 525, 533, 536], "distinct": [19, 332, 434, 435, 436, 437, 492, 499, 506, 511, 517, 518, 519, 524, 539], "could": [19, 332, 434, 435, 436, 437, 492, 493, 498, 499, 500, 502, 505, 507, 508, 510, 516, 518, 519, 520, 521, 525, 527, 528, 529, 539, 544, 545], "vari": [19, 231, 321, 332, 435, 436, 437, 506, 510, 519, 521, 527], "typeerror": [19, 42, 332, 437, 527], "_arraywithsort": [20, 47], "argsort": [20, 43, 333, 439, 519], "descend": [20, 43, 324, 333, 372, 373, 438, 440], "ascend": [20, 43, 333, 438, 439], "stabil": [20, 43, 282, 283, 321, 333, 438, 440, 508, 517, 523], "maintain": [20, 43, 333, 438, 440, 491, 500, 502, 507, 518, 519, 520, 521, 538], "searchsort": [20, 43, 333], "side": [20, 43, 333, 439, 499, 500, 505], "sorter": [20, 43, 333, 439], "ret_dtyp": [20, 43, 333, 439], "_arraywithstatist": [21, 47], "cumprod": [21, 44, 334, 519, 530], "cumul": [21, 44, 334, 441, 442, 532], "uint64": [21, 101, 106, 108, 109, 118, 120, 123, 317, 334, 441, 442, 447, 449, 458, 508, 521, 525], "uint16": [21, 96, 101, 106, 107, 115, 317, 334, 441, 442, 447, 449, 458, 508, 519, 521, 525], "bit": [21, 103, 104, 107, 165, 166, 168, 317, 319, 334, 441, 442, 447, 449, 497, 498, 499, 506, 507, 508, 510, 515, 525, 527, 545], "uint32": [21, 101, 106, 107, 108, 129, 317, 334, 441, 442, 447, 449, 458, 508, 521, 525], "resolv": [21, 326, 334, 387, 441, 442, 447, 449, 500, 505, 508, 525], "120": [21, 44, 48, 324, 367, 441, 489], "cumsum": [21, 44, 334, 508], "einsum": [21, 44, 334], "equat": [21, 31, 44, 324, 334, 371, 443, 539], "operand": [21, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 205, 208, 209, 211, 212, 213, 216, 217, 218, 319, 334, 443, 444, 446, 449, 503, 506, 511, 519], "describ": [21, 31, 334, 443, 447, 449, 496, 498, 500, 507, 518, 519, 521, 525, 530, 539], "contract": [21, 324, 334, 374, 443], "seq": [21, 334, 443, 458], "consist": [21, 25, 324, 334, 356, 357, 443, 475, 491, 502, 503, 507, 508, 512, 518, 525, 540], "ii": [21, 44, 334, 443, 500], "jk": [21, 334, 443], "ik": [21, 334, 443], "66": [21, 32, 33, 169, 231, 232, 303, 319, 321, 322, 324, 334, 367, 443], "104": [21, 324, 334, 367, 443], "126": [21, 52, 206, 313, 319, 324, 334, 364, 443], "510": [21, 334, 443], "special": [21, 36, 47, 48, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 196, 205, 208, 209, 210, 211, 212, 213, 216, 217, 218, 319, 334, 444, 445, 446, 448, 449, 450, 458, 459, 460, 461, 464, 473, 498, 502, 503, 507, 510, 511, 512, 514, 518, 520, 522, 523, 539, 540, 541], "arithmet": [21, 44, 168, 319, 334, 445, 519], "propag": [21, 168, 319, 334, 444, 445, 446, 448, 449, 450, 517], "04999995": [21, 445], "freedom": [21, 44, 334, 448, 450, 504], "adjust": [21, 44, 334, 448, 450, 482], "constitut": [21, 44, 334, 448, 450, 515, 525, 540], "commonli": [21, 44, 334, 448, 450, 512, 515, 517], "8164966": [21, 334, 448], "var": [21, 44, 46, 61, 62, 63, 64, 315, 327, 334, 400, 401, 479, 499, 510, 525], "6666665": [21, 450, 528], "667": [21, 32, 174, 227, 282, 319, 321, 450], "_arraywithutil": [22, 47], "AND": [22, 45, 164, 195, 319, 335, 451], "invalid": [22, 45, 324, 326, 335, 378, 387, 451, 452, 458, 499, 505, 508, 513], "OR": [22, 45, 167, 197, 319, 335, 452, 499, 500, 517], "_wrap_funct": [23, 46, 505, 515, 516], "function_nam": [23, 46, 498], "new_funct": [23, 46, 505], "add_ivy_array_instance_method": 23, "cl": [23, 46], "to_ignor": [23, 46, 328, 414, 415], "shown": [23, 25, 46, 187, 250, 319, 321, 498, 500, 502, 505, 507, 508, 510, 512, 513, 514, 519, 520, 521, 522, 525, 527, 533], "toi": [23, 46], "arrayexampl": 23, "hasattr": [23, 46], "_containerwithactiv": [24, 48], "dict_in": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 248, 276, 294, 321, 528], "queue_load_s": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "container_combine_method": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "list_join": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue_timeout": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "key_length_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_ind": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_line_spac": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "ivyh": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "default_key_color": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "green": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 488, 499, 500], "keyword_color_dict": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "rebuild_child_contain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "types_to_iteratively_nest": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "alphabetical_kei": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "dynamic_backend": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 475], "containerbas": [24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 506], "static": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 71, 284, 316, 367, 471, 498, 510, 511, 515, 516, 519, 533, 538, 539, 540], "_static_gelu": 24, "key_chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "to_appli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "prune_unappli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 328, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "map_sequ": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 102, 104, 107, 110, 111, 112, 113, 115, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "exact": [24, 25, 52, 332, 434, 436, 460, 499, 500, 502, 510, 525], "formul": [24, 52], "chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 327, 328, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 400, 401, 405, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 472, 478, 503, 506, 517, 519, 529, 530, 533, 539], "skip": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 328, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 416, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 459, 505, 516, 521], "prune": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 54, 55, 56, 57, 58, 59, 60, 77, 82, 84, 88, 92, 94, 107, 111, 112, 118, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 227, 231, 232, 233, 235, 238, 239, 247, 252, 254, 255, 256, 258, 259, 261, 269, 270, 282, 283, 284, 286, 288, 289, 297, 303, 309, 328, 337, 338, 339, 340, 346, 347, 350, 351, 352, 358, 360, 362, 363, 365, 367, 369, 370, 376, 381, 382, 383, 384, 388, 391, 392, 393, 394, 395, 398, 399, 416, 417, 418, 419, 423, 424, 425, 426, 428, 431, 434, 435, 436, 437, 438, 441, 442, 445, 447, 448, 450, 451, 452, 456, 507], "static_gelu": 24, "185": 24, "046": 24, "_static_leaky_relu": 24, "static_leaky_relu": 24, "38999999": [24, 54], "_static_log_softmax": 24, "static_log_softmax": 24, "371": [24, 55], "_static_mish": 24, "static_mish": 24, "30883577": [24, 56, 313], "28903052": [24, 56, 313], "10714479": [24, 56, 313], "_static_relu": 24, "static_relu": 24, "40000001": [24, 47, 48, 54, 57, 313, 332, 435], "_static_sigmoid": 24, "static_sigmoid": 24, "2689414": [24, 58, 59], "7310586": [24, 58, 59], "88079703": [24, 58], "62245935": [24, 58], "4750208": [24, 58], "_static_softmax": 24, "static_softmax": 24, "72844321": [24, 59], "19852395": [24, 59], "07303288": [24, 59], "_static_softplu": 24, "revert": [24, 60, 313], "static_softplu": 24, "53499615": 24, "42036411": 24, "948": [24, 60], "166": [24, 52, 313], "159": [24, 52, 313, 323, 347], "__getitem__": [25, 506], "slice": [25, 32, 238, 239, 243, 321, 328, 412, 539], "dictionari": [25, 42, 48, 51, 53, 148, 301, 313, 318, 322, 437, 455, 503, 507, 508, 519, 528, 533], "multiprocess": [25, 48, 321, 528, 533], "asynchron": [25, 48, 539], "wait": [25, 48, 276, 321, 489, 498, 500, 507, 519], "combin": [25, 48, 236, 237, 321, 324, 352, 362, 500, 503, 506, 508, 510, 512, 515, 521, 523, 530, 539], "arriv": [25, 48, 276, 321, 523], "cont_list_join": [25, 48], "timeout": [25, 48, 248, 276, 294, 321], "limit": [25, 48, 104, 107, 226, 227, 317, 321, 326, 384, 458, 460, 461, 473, 479, 489, 499, 500, 505, 507, 510, 512, 513, 519, 521, 523, 528, 533, 538, 539, 540], "whitespac": [25, 48], "indent": [25, 48, 528], "newlin": [25, 48, 511], "color": [25, 48, 488], "termin": [25, 48, 499, 500, 506, 525, 528], "termcolor": [25, 48], "rebuild": [25, 48, 495], "constructor": [25, 48, 222, 321, 455, 471, 478, 508, 509, 527], "kept": [25, 48, 327, 400, 401, 500, 518, 522], "structur": [25, 28, 48, 104, 107, 228, 321, 328, 416, 472, 489, 500, 503, 506, 515, 520, 521, 522, 528, 529, 538, 539], "alphabet": [25, 48], "__setitem__": [25, 503, 506, 527], "_cont_at_key_chains_input_as_dict": 25, "current_chain": 25, "ignore_key_error": 25, "_cont_at_key_chains_input_as_seq": 25, "_cont_call_static_method_with_flexible_arg": 25, "static_method": 25, "kw": 25, "self_idx": 25, "_cont_concat_unifi": 25, "_cont_get_dev": 25, "_cont_get_shap": 25, "properti": [25, 47, 469, 475, 477, 502, 506, 510, 515, 520, 521, 527, 528, 529, 545], "_cont_ivi": 25, "_cont_mean_unifi": 25, "_1": 25, "_cont_prune_key_chains_input_as_dict": 25, "return_cont": 25, "_cont_prune_key_chains_input_as_seq": 25, "_cont_slice_kei": 25, "key_slic": 25, "_cont_sum_unifi": 25, "_get_queue_item": 25, "cont_all_fals": 25, "assert_is_bool": 25, "assert": [25, 224, 321, 464, 501, 502, 513, 518, 519, 520, 521, 522, 527, 528], "cont_all_key_chain": 25, "include_empti": 25, "cont_all_tru": [25, 506, 528], "cont_as_bool": 25, "cont_assert_contains_sub_contain": 25, "sub_cont": 25, "screen": [25, 499, 528], "cont_assert_contains_sub_structur": 25, "check_shap": [25, 479], "cont_assert_ident": 25, "check_typ": 25, "same_arrai": [25, 528], "arrays_equ": 25, "ident": [25, 74, 139, 243, 316, 318, 321, 324, 328, 364, 416, 491, 493, 506, 515, 516, 519, 520, 522, 523, 527, 528, 533, 534], "cont_assert_identical_structur": 25, "cont_at_key_chain": 25, "ignore_non": 25, "cont_at_kei": 25, "substr": 25, "try": [25, 290, 321, 473, 482, 489, 490, 492, 493, 498, 499, 500, 502, 503, 506, 507, 508, 512, 513, 518, 519, 520, 525, 527, 533], "cont_combin": 25, "prioriti": [25, 482, 500, 518], "most": [25, 27, 82, 316, 324, 356, 357, 489, 492, 497, 498, 499, 503, 506, 507, 508, 509, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 533, 539, 540, 542, 543, 545, 546], "duplic": [25, 328, 405, 504, 511, 513, 516, 517, 520, 529, 545], "configur": [25, 148, 318, 328, 416, 495, 499, 500, 505, 507, 508, 516], "container_rightmost": 25, "cont_common_key_chain": [25, 506], "cont_config": 25, "cont_contains_sub_contain": 25, "cont_contains_sub_structur": 25, "cont_copi": [25, 528], "cont_create_if_abs": 25, "noth": [25, 523, 545], "cont_cutoff_at_depth": 25, "depth_cutoff": 25, "summari": [25, 108, 228, 249, 317, 321, 499, 500, 521], "cont_cutoff_at_height": 25, "height_cutoff": 25, "deep": [25, 231, 321, 489, 491, 494, 496, 497, 498, 500, 502, 505, 506, 508, 517, 520, 524, 527, 528, 537, 539, 542, 543, 545, 546], "intern": [25, 328, 403, 413, 414, 469, 473, 474, 475, 476, 478, 503, 506, 509, 511, 518, 520, 521], "cont_dev": 25, "belong": [25, 498, 502, 529], "cont_dev_str": 25, "cont_diff": [25, 506, 528], "diff_kei": 25, "detect_key_diff": 25, "detect_value_diff": 25, "detect_shape_diff": 25, "share": [25, 124, 317, 458, 459, 489, 492, 504, 506, 510, 515, 517, 519, 520, 521, 523, 525, 537, 538, 545], "among": [25, 493, 507, 521, 523, 539], "container0": 25, "cont_duplicate_array_keychain": 25, "cont_find_sub_contain": 25, "sub_cont_to_find": 25, "exsit": 25, "cont_find_sub_structur": 25, "sub_struc_to_find": 25, "cont_flatten_key_chain": [25, 528], "__": [25, 510, 528], "above_height": [25, 528], "below_depth": [25, 528], "cont_format_key_chain": 25, "format_fn": 25, "cont_from_disk_as_hdf5": [25, 528], "h5_obj_or_filepath": 25, "slice_obj": 25, "load": [25, 489, 521, 533, 538, 545], "disk": [25, 528, 538], "h5py": 25, "file": [25, 251, 279, 321, 475, 498, 499, 500, 502, 503, 504, 505, 506, 507, 511, 512, 513, 515, 519, 520, 521, 522, 525, 528, 535, 538, 539, 540], "hdf5": [25, 475, 528], "filepath": [25, 500, 502], "h5": 25, "cont_from_disk_as_json": [25, 528], "json_filepath": 25, "json": [25, 495, 499, 528], "cont_from_disk_as_pickl": [25, 528], "pickle_filepath": 25, "pickl": [25, 506, 528], "cont_from_flat_list": 25, "flat_list": 25, "hierarchi": [25, 498, 528, 535, 545], "cont_handle_inplac": 25, "prime": 25, "being": [25, 46, 47, 65, 225, 248, 276, 316, 321, 324, 358, 455, 461, 469, 472, 473, 489, 492, 493, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 513, 514, 516, 518, 519, 520, 521, 523, 525, 528, 532, 533, 535, 537, 538, 539, 540, 545, 546], "overwritten": [25, 503, 504], "cont_has_kei": 25, "query_kei": 25, "somewher": [25, 507], "cont_has_key_chain": 25, "cont_ident": [25, 528], "cont_identical_array_shap": 25, "regardless": [25, 493, 494, 508, 527, 530], "cont_identical_config": 25, "cont_identical_structur": 25, "cont_if_exist": 25, "cont_inplace_upd": 25, "cont_ivi": 25, "cont_key_chains_contain": 25, "sub_str": 25, "cont_list_stack": [25, 528], "cont_map": [25, 506, 528], "func": [25, 149, 225, 298, 301, 302, 304, 311, 318, 321, 322, 328, 416, 455, 498, 502, 503, 510, 512, 517, 518], "cont_map_sub_cont": 25, "include_self": 25, "possibi": 25, "cont_max_depth": 25, "cont_multi_map": [25, 506], "map_nest": 25, "assert_ident": 25, "leftmost": [25, 328, 416], "cont_multi_map_in_funct": [25, 506], "cont_num_arrai": 25, "cont_overwrite_at_key_chain": 25, "target_dict": 25, "return_dict": 25, "cont_prune_empti": 25, "keep_non": 25, "cont_prune_key_chain": 25, "key1": [25, 489, 529], "key2": [25, 489], "key3": 25, "cont_prune_key_from_key_chain": 25, "decid": [25, 328, 403, 404, 413, 414, 415, 489, 498, 499, 508, 523], "cont_prune_kei": 25, "cont_prune_keys_from_key_chain": 25, "cont_reduc": 25, "cont_remove_key_length_limit": 25, "cont_remove_print_limit": 25, "cont_reshape_lik": 25, "leading_shap": 25, "cont_restructur": 25, "keep_orig": 25, "old": [25, 499, 504, 518], "cont_restructure_key_chain": 25, "keychain_map": 25, "cont_set_at_key_chain": 25, "cont_set_at_kei": 25, "cont_shap": [25, 323, 341], "attribut": [25, 104, 105, 106, 107, 137, 138, 145, 236, 237, 317, 318, 321, 456, 505, 506, 508, 511, 516, 518, 519, 526, 527, 528, 529], "cont_show": 25, "cont_show_sub_contain": 25, "sub_cont_or_keychain": 25, "cont_size_ordered_arrai": 25, "keychain": [25, 31], "cont_slice_kei": 25, "all_depth": 25, "cont_slice_via_kei": 25, "slice_kei": 25, "cont_sort_by_kei": 25, "cont_structural_diff": 25, "cont_to_dict": 25, "cont_to_disk_as_hdf5": [25, 528], "starting_index": 25, "max_batch_s": 25, "later": [25, 225, 321, 498, 518, 521, 539], "cont_to_disk_as_json": [25, 528], "cont_to_disk_as_pickl": [25, 528], "cont_to_flat_list": 25, "cont_to_iter": [25, 506], "leaf_keys_onli": 25, "cont_to_iterator_kei": 25, "cont_to_iterator_valu": 25, "cont_to_json": 25, "cont_to_nested_list": 25, "cont_to_raw": 25, "cont_trim_kei": 25, "max_length": 25, "trim": 25, "cont_try_kc": 25, "tri": [25, 456], "cont_unifi": 25, "unifi": [25, 149, 318, 489, 490, 492, 501, 502, 503, 508, 512, 517, 519, 523, 525, 533, 535, 536, 537, 539, 543, 546], "concatten": [25, 149, 318], "cont_unstack_cont": 25, "dim_siz": 25, "cont_update_config": 25, "cont_with_default_key_color": 25, "cont_with_entries_as_list": 25, "cont_with_ivy_backend": 25, "ivy_backend": 25, "cont_with_key_length_limit": [25, 528], "cont_with_print_ind": [25, 528], "cont_with_print_limit": [25, 528], "cont_with_print_line_spac": 25, "h5_file_s": 25, "shuffle_h5_fil": 25, "seed_valu": [25, 330, 427], "split_cont": 25, "constitu": [25, 530], "_is_json": 25, "_repr": 25, "_containerwithconvers": [26, 48], "_static_to_ivi": 26, "_static_to_n": 26, "_containerwithcr": [27, 48], "_static_arang": 27, "_static_asarrai": 27, "_static_empti": 27, "_static_empty_lik": 27, "_static_ey": 27, "n_row": [27, 31, 74, 316], "n_col": [27, 31, 74, 316], "_static_from_dlpack": 27, "_static_full_lik": 27, "static_full_lik": 27, "2324": [27, 77, 316], "234": [27, 30, 77, 176, 218, 316, 319, 323, 347, 458], "123": [27, 28, 77, 107, 234, 316, 321, 521], "_static_linspac": 27, "_static_logspac": 27, "static_logspac": 27, "15443469": [27, 79], "64158883": [27, 79], "_static_meshgrid": 27, "_static_native_arrai": 27, "_static_one_hot": 27, "static_one_hot": 27, "_static_on": 27, "_static_ones_lik": 27, "_static_tril": 27, "_static_triu": 27, "_static_zero": 27, "_static_zeros_lik": 27, "5443469": [27, 79, 316], "_containerwithdatatyp": [28, 48], "_static_astyp": 28, "718": [28, 30, 91, 197, 317], "618": [28, 30, 91, 197, 317], "static_astyp": 28, "_static_broadcast_arrai": 28, "static_broadcast_arrai": 28, "_static_broadcast_to": 28, "static_broadcast_to": 28, "_static_can_cast": 28, "from_": [28, 94, 317], "static_can_cast": 28, "_static_default_complex_dtyp": 28, "complex_dtyp": [28, 97, 119, 317], "_static_default_float_dtyp": 28, "float_dtyp": [28, 99, 121, 317], "_static_dtyp": 28, "_static_finfo": 28, "inquir": [28, 104, 107], "static_finfo": 28, "55040e": [28, 104, 317], "7976931348623157e": [28, 104, 317], "308": [28, 104, 317, 458, 521], "_static_function_supported_dtyp": 28, "_static_function_unsupported_dtyp": 28, "_static_iinfo": 28, "1800": [28, 107, 317], "1084": 28, "40000": 28, "static_iinfo": 28, "2147483648": [28, 107, 317], "2147483647": [28, 107, 317], "_static_is_bool_dtyp": 28, "dtype_in": [28, 89, 90, 103, 109, 110, 111, 112, 113, 114, 115, 130, 317], "_static_is_complex_dtyp": 28, "is_complex_dtyp": [28, 317], "roughli": [28, 499, 502, 542], "static_is_complex_dtyp": 28, "complex64": [28, 97, 111, 119, 125, 317, 508], "_static_is_float_dtyp": 28, "static_is_float_dtyp": 28, "_static_is_int_dtyp": 28, "_static_is_uint_dtyp": 28, "_static_result_typ": 28, "static_result_typ": 28, "broadcats": [28, 92], "_containerwithdevic": [29, 48], "_static_dev": 29, "static_dev": 29, "_static_to_devic": 29, "static_to_devic": 29, "contaion": [29, 135], "_containerwithelementwis": [30, 48], "_static_ab": 30, "static_ab": 30, "_static_aco": 30, "static_aco": 30, "_static_acosh": 30, "static_acosh": 30, "_static_add": 30, "static_add": [30, 506, 510, 511], "_static_asin": 30, "static_asin": 30, "524": [30, 159, 319], "412": [30, 35, 159, 319], "201": [30, 31, 159, 319], "_static_asinh": 30, "static_asinh": 30, "_static_atan": 30, "static_atan": 30, "_static_atan2": 30, "static_atan2": 30, "915": [30, 162, 319], "29": [30, 32, 33, 40, 162, 231, 232, 301, 305, 319, 321, 322, 424, 425, 426], "983": [30, 162, 319], "978": [30, 58, 162, 313, 319], "696": [30, 40, 162, 319, 425], "993": [30, 162, 319], "_static_atanh": 30, "static_atanh": 30, "203": [30, 39, 163, 329, 422], "_static_bitwise_and": 30, "static_bitwise_and": 30, "_static_bitwise_invert": 30, "static_bitwise_invert": 30, "_static_bitwise_left_shift": 30, "_static_bitwise_or": 30, "static_bitwise_or": 30, "_static_bitwise_right_shift": 30, "static_bitwise_right_shift": 30, "_static_bitwise_xor": 30, "static_bitwise_xor": 30, "_static_ceil": 30, "static_ceil": 30, "_static_co": 30, "static_co": 30, "_static_cosh": 30, "static_cosh": 30, "34": [30, 31, 32, 40, 107, 169, 172, 194, 212, 225, 231, 232, 317, 319, 321, 324, 330, 364, 425, 426], "_static_deg2rad": 30, "static_deg2rad": 30, "0262": [30, 173, 206, 319], "873": [30, 173, 206, 319], "_static_divid": 30, "static_divid": 30, "_static_equ": 30, "static_equ": 30, "_static_erf": 30, "static_erf": 30, "27632612": [30, 176], "934008": [30, 176], "99999928": [30, 176], "91903949": [30, 176], "_static_exp": 30, "static_exp": 30, "59814835": [30, 177], "4131622": [30, 177], "_static_expm1": 30, "thefunct": [30, 176], "areal": 30, "static_expm1": 30, "71828175": 30, "38905621": 30, "59815216": 30, "_static_floor": 30, "static_floor": 30, "_static_floor_divid": 30, "static_floor_divid": 30, "_static_great": 30, "static_great": 30, "_static_greater_equ": 30, "static_greater_equ": 30, "_static_isfinit": 30, "999999999999": [30, 184, 319], "static_isfinit": 30, "_static_isinf": 30, "static_isinf": 30, "_static_isnan": 30, "static_isnan": 30, "_static_isr": 30, "0j": [30, 31, 187, 319], "23j": [30, 31], "9j": [30, 31], "static_isr": 30, "_static_less": 30, "static_less": 30, "_static_less_equ": 30, "static_less_equ": 30, "_static_log": 30, "static_log": 30, "_static_log10": 30, "static_log10": 30, "898": [30, 191, 319], "0414": [30, 191, 319], "_static_log1p": 30, "static_log1p": 30, "_static_log2": 30, "_static_logaddexp": 30, "static_logaddexp": 30, "_static_logical_and": 30, "static_logical_and": 30, "_static_logical_not": 30, "static_logical_not": 30, "_static_logical_or": 30, "static_logical_or": 30, "_static_logical_xor": 30, "static_logical_xor": 30, "_static_maximum": 30, "static_maximum": 30, "_static_minimum": 30, "static_minimum": 30, "_static_multipli": 30, "static_multipli": 30, "_static_neg": 30, "static_neg": 30, "_static_not_equ": 30, "static_not_equ": 30, "_static_posit": 30, "static_posit": 30, "_static_pow": 30, "static_pow": 30, "_static_rad2deg": 30, "static_rad2deg": 30, "5160": 30, "10300": [30, 206, 319], "15500": 30, "20600": 30, "2860": [30, 206], "_static_reciproc": 30, "recirpoc": [30, 207], "static_reciproc": 30, "_static_remaind": 30, "static_remaind": 30, "_static_round": 30, "thevfunct": 30, "300": [30, 32, 209, 239, 270, 319, 321, 324, 360, 521], "527": [30, 209, 319], "static_round": 30, "301": [30, 209, 319], "_static_sign": 30, "static_sign": 30, "_static_sin": 30, "static_sin": 30, "757": [30, 211, 319], "959": [30, 178, 211, 319], "279": [30, 211, 226, 319, 321], "_static_sinh": 30, "static_sinh": 30, "835": [30, 212], "347": [30, 212, 512], "721": [30, 212], "_static_sqrt": 30, "93": [30, 32, 40, 136, 213, 231, 232, 318, 321, 425, 426], "static_sqrt": 30, "_static_squar": 30, "static_squar": 30, "_static_subtract": 30, "static_subtract": 30, "_static_tan": 30, "static_tan": [30, 506, 510], "143": [30, 48, 216, 319, 510], "_static_tanh": 30, "static_tanh": 30, "995": [30, 217, 319], "9999": 30, "_static_trapz": 30, "static_trapz": 30, "_static_trunc": 30, "static_trunc": 30, "_static_trunc_divid": 30, "644": [30, 159, 319, 529], "305": [30, 31, 35, 159, 319, 347], "351": [30, 173, 206, 319], "00613": [30, 173], "0154": [30, 173], "403": [30, 177], "428772": [30, 177], "649": [30, 178], "220": [30, 178], "865": [30, 178], "metho": [30, 183, 193], "7j": [30, 31, 187, 319], "956": [30, 192], "nuner": [30, 201], "65": [30, 33, 40, 168, 201, 254, 299, 319, 321, 322, 324, 334, 367, 425, 426, 443], "413": [30, 206, 512], "_containerwithactivationexperiment": [31, 48], "contan": 31, "19722462": 31, "84729779": 31, "31326163": 31, "46328258": 31, "51301527": 31, "79813886": 31, "22856998": 31, "42028043": 31, "31868932": 31, "static_logit": 31, "static_logsigmoid": 31, "34115386": 31, "64439666": 31, "24115384": 31, "55435526": 31, "07888974": 31, "00741899": 31, "26328245": 31, "00012302": 31, "static_prelu": 31, "static_relu6": 31, "static_selu": 31, "static_thresholded_relu": 31, "_containerwithconversionexperiment": [31, 48], "_containerwithcreationexperiment": [31, 48], "frombuff": 31, "expos": [31, 228, 321, 489, 491, 507, 525, 529], "interfac": [31, 492, 527, 530, 533, 534, 535, 536, 537, 538, 539, 543, 546], "\u00f0": 31, "static_frombuff": 31, "hamming_window": 31, "period": [31, 500, 522], "coeffici": [31, 324, 371], "ham": 31, "8000": 31, "2000": 31, "4180": 31, "8180": 31, "hann_window": 31, "hann": 31, "7500": 31, "3455": 31, "9045": 31, "kaiser_bessel_derived_window": 31, "suitabl": [31, 333, 439, 460, 499, 500, 506, 522, 539], "spectral": 31, "analysi": [31, 539, 540], "design": [31, 489, 491, 492, 501, 505, 507, 508, 518, 519, 520, 523, 525, 527, 533, 535, 537, 539, 542, 543, 544], "kaiser": 31, "70710677": 31, "18493208": 31, "9827513": 31, "kaiser_window": 31, "static_kaiser_window": 31, "2049": 31, "8712": 31, "0367": 31, "7753": 31, "static_eye_lik": 31, "static_hamming_window": 31, "static_hann_window": 31, "window_length": 31, "static_hann": 31, "static_kaiser_bessel_derived_window": 31, "static_tril_indic": 31, "static_triu_indic": 31, "static_vorbis_window": 31, "vorbis_window": 31, "vorbi": 31, "38268343": 31, "92387953": 31, "14943586": 31, "51644717": 31, "85631905": 31, "98877142": 31, "tril_indic": 31, "triu_indic": 31, "_containerwithdata_typeexperiment": [31, 48], "_containerwithdeviceexperiment": [31, 48], "_containerwithelementwiseexperiment": [31, 48], "0003": [31, 324, 360, 458, 461], "0006": 31, "75j": 31, "01317055": 31, "05634501": 31, "115": [31, 173, 206, 319], "3461759": 31, "524111": 31, "335": 31, "345j": 31, "2345j": 31, "mantissa": 31, "frist": 31, "coord": 31, "6055": 31, "1080": 31, "1550": 31, "130": 31, "160": 31, "10240": 31, "60000038": 31, "08746284": 31, "32192809": 31, "000": [31, 458], "took": 31, "0707": 31, "0579": 31, "static_allclos": 31, "static_angl": 31, "static_binar": 31, "static_conj": 31, "static_copysign": 31, "static_count_nonzero": 31, "static_diff": 31, "static_exp2": 31, "static_fix": 31, "static_float_pow": 31, "static_fmax": 31, "static_fmin": 31, "static_fmod": 31, "static_frexp": 31, "static_gcd": 31, "static_gradi": 31, "static_hypot": 31, "static_imag": 31, "static_isclos": 31, "static_lcm": 31, "static_ldexp": 31, "static_lerp": 31, "90000057": 31, "80000019": 31, "70000076": 31, "55000019": 31, "05000019": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_nansum": 31, "static_nextaft": 31, "static_r": 31, "static_signbit": 31, "static_sinc": 31, "636": 31, "090": 31, "070": 31, "057": 31, "static_xlogi": 31, "static_zeta": 31, "0244": 31, "_containerwithgeneralexperiment": [31, 48], "_containerwithgradientsexperiment": [31, 48], "_containerwithimageexperiment": [31, 48], "_containerwithlayersexperiment": [31, 48], "673": 31, "0507": 31, "static_adaptive_avg_pool1d": 31, "static_adaptive_avg_pool2d": 31, "static_avg_pool1d": 31, "static_avg_pool2d": 31, "static_avg_pool3d": 31, "static_dct": 31, "132": 31, "182": 31, "242": 31, "253": [31, 212, 319], "515": [31, 330, 425], "467": 31, "static_dft": 31, "static_embed": 31, "static_fft": 31, "static_ifft": 31, "static_interpol": 31, "static_max_pool1d": 31, "static_max_pool2d": 31, "max_pool2dd": 31, "static_max_pool3d": 31, "_containerwithlinearalgebraexperiment": [31, 48], "933034": 31, "eigenvealu": [31, 356], "xx": [31, 356], "37228107": [31, 356], "3722816": [31, 356], "8245648": [31, 356], "41597357": [31, 356], "56576747": [31, 356], "9093767": [31, 356], "56155": 31, "82842": 31, "450": 31, "static_adjoint": 31, "static_cond": 31, "static_cov": 31, "static_diagflat": 31, "static_eig": 31, "static_eigh_tridiagon": 31, "static_eigv": 31, "static_kron": 31, "kroneck": 31, "static_matrix_exp": 31, "static_multi_dot": 31, "regular": [31, 324, 361, 499, 500, 519, 539], "_containerwithlossesexperiment": [31, 48], "binary_cross_entropy_with_logit": [31, 507], "pos_weight": 31, "027": 31, "263": [31, 227, 321], "953": 31, "static_binary_cross_entropy_with_logit": 31, "_containerwithmanipulationexperiment": [31, 48], "atleast": 31, "ary1": 31, "ary2": 31, "3d": [31, 474, 515, 523, 532], "broadcast_shap": [31, 458], "static_concat_from_sequ": 31, "30192195": 31, "static_as_strid": 31, "static_atleast_1d": 31, "static_atleast_2d": 31, "static_atleast_3d": 31, "static_broadcast_shap": 31, "static_dsplit": 31, "static_dstack": 31, "static_expand": 31, "static_flatten": 31, "static_fliplr": 31, "static_flipud": 31, "static_heavisid": 31, "static_hsplit": 31, "static_hstack": 31, "static_i0": 31, "static_moveaxi": 31, "static_pad": 31, "static_rot90": 31, "static_take_along_axi": 31, "static_top_k": 31, "static_vsplit": 31, "static_vstack": 31, "_containerwithnormsexperiment": [31, 48], "static_l2_norm": 31, "16903085": 31, "50709254": 31, "84515423": 31, "44183609": 31, "56807494": 31, "69431382": 31, "89442718": 31, "44721359": 31, "static_lp_norm": 31, "static_batch_norm": 31, "static_instance_norm": 31, "12500000": 31, "37500000": 31, "62500000": 31, "27500000": 31, "35000000": 31, "42500000": 31, "0000000": 31, "5000000": 31, "2500000": 31, "_containerwithrandomexperiment": [31, 48], "43643127": 31, "32325703": 31, "24031169": 31, "34251311": 31, "31692529": 31, "3405616": 31, "5319725": 31, "22458365": 31, "24344385": 31, "26588406": 31, "61075421": 31, "12336174": 31, "51142915": 31, "25041268": 31, "23815817": 31, "64042903": 31, "25763214": 31, "10193883": 31, "31624692": 31, "46567987": 31, "21807321": 31, "37677699": 31, "39914594": 31, "22407707": 31, "static_bernoulli": 31, "static_beta": 31, "static_dirichlet": 31, "static_poisson": 31, "_containerwithsearchingexperiment": [31, 48], "static_unravel_index": 31, "_containerwithsetexperiment": [31, 48], "_containerwithsortingexperiment": [31, 48], "static_lexsort": 31, "static_msort": 31, "_containerwithstatisticalexperiment": [31, 48], "static_bincount": 31, "static_corrcoef": 31, "static_median": 31, "static_nanmean": 31, "static_nanmedian": 31, "static_quantil": 31, "_containerwithutilityexperiment": [31, 48], "_containerwithgener": [32, 48], "_static_all_equ": 32, "static_all_equ": 32, "_static_array_equ": 32, "x0": [32, 223, 321, 510], "level": [32, 223, 472, 489, 493, 494, 498, 500, 506, 512, 515, 517, 519, 523, 524, 525, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546], "a0": [32, 223], "static_array_equ": 32, "_static_assert_supports_inplac": 32, "_static_clip_matrix_norm": 32, "static_clip_matrix_norm": 32, "849": [32, 226, 227, 321], "_static_clip_vector_norm": 32, "static_clip_vector_norm": 32, "_static_einops_rearrang": 32, "static_einops_rearrang": 32, "_static_einops_reduc": 32, "static_einops_reduc": 32, "29333329": [32, 232, 321], "53000069": [32, 232, 321], "39666676": [32, 232, 321], "20666695": [32, 232, 321], "_static_einops_repeat": 32, "static_einops_repeat": 32, "_static_fourier_encod": 32, "static_fourier_encod": 32, "classivi": [32, 38, 235, 326, 332, 393, 397, 435], "89858720e": [32, 235], "79717439e": [32, 235], "_static_gath": 32, "static_gath": 32, "_static_gather_nd": 32, "200": [32, 168, 239, 270, 319, 321, 528], "400": [32, 239, 270, 321, 324, 360, 507], "500": [32, 239, 321], "static_gather_nd": 32, "_static_get_num_dim": 32, "static_get_num_dim": 32, "_static_has_nan": 32, "leafwis": 32, "static_has_nan": 32, "_static_inplace_decr": 32, "_static_inplace_incr": 32, "_static_inplace_upd": 32, "_static_is_arrai": 32, "static_is_arrai": 32, "_static_is_ivy_arrai": 32, "static_is_ivy_arrai": 32, "_static_is_native_arrai": 32, "static_is_native_arrai": 32, "_static_scatter_flat": 32, "ref": [32, 36, 188, 201, 203, 208, 215, 319, 326, 395, 511, 518], "_static_scatter_nd": 32, "70": [32, 239, 270, 324, 334, 367, 443, 492], "static_scatter_nd": 32, "_static_stable_divid": 32, "22222222": 32, "11111111": 32, "857": [32, 282, 321], "444": 32, "_static_stable_pow": 32, "_static_supports_inplace_upd": 32, "_static_to_list": 32, "static_to_list": 32, "_static_to_numpi": 32, "static_to_numpi": 32, "_static_to_scalar": 32, "static_to_scalar": 32, "_static_value_is_nan": 32, "452": 32, "static_value_is_nan": 32, "833": [32, 227], "600": [32, 239, 507], "700": [32, 239], "items": [32, 47, 321], "static_isin": 32, "static_items": 32, "complex128": [32, 97, 111, 119, 125, 264, 317, 321, 458, 508], "425": [32, 297], "_containerwithgradi": [33, 48], "_static_stop_gradi": 33, "static_stop_gradi": 33, "87": [33, 168, 192, 299, 319, 322], "976": [33, 217, 299, 319, 322], "49e": [33, 299, 322], "74e": [33, 299, 322], "95e": [33, 299, 322], "024": [33, 299, 322], "096": [33, 173, 299, 319, 322], "216": [33, 36, 299, 322, 377], "384": [33, 299, 322], "626": [33, 299, 322], "en": [33, 299, 300, 322, 324, 380, 507], "wikipedia": [33, 299, 300, 322, 324, 380], "wiki": [33, 299, 300, 322, 324, 380], "stochastic_gradient_desc": [33, 299, 300, 322], "01099": [33, 300], "01003": [33, 300, 322], "01015": [33, 300, 322], "99936122": [33, 300, 322], "99936116": [33, 300, 322], "99936128": [33, 300, 322], "99936104": [33, 300, 322], "w_new": [33, 303, 322], "88": [33, 40, 54, 169, 303, 313, 319, 322, 324, 330, 334, 367, 373, 426, 443], "708": [33, 305, 322], "445": [33, 305, 322], "6e": [33, 305, 322], "00036": [33, 305, 322], "00016": [33, 305, 322], "00049": [33, 305, 322], "layerwis": [33, 306, 322], "_containerwithimag": [34, 48], "_containerwithlay": [35, 48], "_static_conv1d": 35, "static_conv1d": 35, "_static_conv1d_transpos": 35, "static_conv1d_transpos": 35, "112": [35, 324, 334, 338, 367, 443], "_static_conv2d": 35, "ey": [35, 316, 323, 339, 345, 523, 530], "static_conv2d": 35, "_static_conv2d_transpos": 35, "static_conv2d_transpos": 35, "_static_conv3d": 35, "fdfh": [35, 341], "static_conv3d": 35, "_static_conv3d_transpos": 35, "static_conv3d_transpos": 35, "_static_depthwise_conv2d": 35, "inp": [35, 323, 345], "static_depthwise_conv2d": 35, "_static_dropout": 35, "static_dropout": 35, "_static_dropout1d": 35, "static_dropout1d": 35, "_static_dropout3d": 35, "_static_linear": 35, "278": [35, 323, 346, 347], "105": [35, 323, 324, 325, 346, 347, 367, 381], "static_linear": 35, "352": [35, 323, 347], "195": [35, 347], "_static_lstm_upd": 35, "_static_multi_head_attent": 35, "_static_scaled_dot_product_attent": 35, "static_scaled_dot_product_attent": 35, "_containerwithlinearalgebra": [36, 48], "_static_choleski": 36, "static_choleski": 36, "577": [36, 324, 351], "707": [36, 324, 351], "static_rol": [36, 38, 506, 510], "_static_cross": 36, "static_cross": 36, "_static_det": 36, "_static_diag": 36, "_static_diagon": 36, "static_diagon": 36, "_static_eigh": 36, "_static_eigvalsh": 36, "static_eigvalsh": 36, "51572949": [36, 324, 358], "17091519": [36, 324, 358], "3448143": [36, 324, 358], "88178420e": [36, 324, 358], "35898387e": [36, 324, 358], "46410179e": [36, 324, 358], "_static_inn": 36, "_static_inv": 36, "static_inv": [36, 324, 360], "_static_matmul": 36, "matul": 36, "static_matmul": 36, "_static_matrix_norm": 36, "deimens": 36, "static_matrix_norm": 36, "_static_matrix_pow": 36, "_static_matrix_rank": 36, "static_matrix_rank": 36, "_static_matrix_transpos": 36, "static_matrix_transpos": 36, "_static_out": 36, "n1": [36, 80, 316], "n2": [36, 80, 316], "static_out": [36, 367], "_static_pinv": 36, "static_pinv": 36, "_static_qr": 36, "_static_slogdet": 36, "static_slogdet": 36, "0986123": [36, 324, 370], "_static_solv": 36, "_static_svd": 36, "static_svd": 36, "au": [36, 372], "aS": [36, 372], "avh": [36, 372], "bu": [36, 372, 492], "bvh": [36, 372], "_static_svdv": 36, "_static_tensordot": 36, "_static_tensorsolv": 36, "_static_trac": 36, "static_trac": 36, "_static_vand": 36, "static_vand": 36, "343": [36, 209, 319, 377], "512": [36, 323, 338, 377, 489], "729": [36, 377, 529], "_static_vecdot": 36, "_static_vector_norm": 36, "static_vector_norm": 36, "77359247": [36, 379], "_static_vector_to_skew_symmetric_matrix": 36, "99999988": [36, 368], "_containerwithloss": [37, 48], "_static_binary_cross_entropi": 37, "static_binary_cross_entropi": 37, "511": [37, 325, 381, 383], "_static_cross_entropi": 37, "static_cross_entropi": 37, "20397282": 37, "83258148": 37, "60943794": 37, "_static_sparse_cross_entropi": 37, "static_sparse_cross_entropi": 37, "5108256": [37, 382], "609438": [37, 324, 370, 382], "_containerwithmanipul": [38, 48], "_static_clip": 38, "static_clip": 38, "_static_concat": 38, "_static_constant_pad": 38, "static_constant_pad": 38, "_static_expand_dim": 38, "static_expand_dim": 38, "container_axi": [38, 326, 387], "_static_flip": 38, "static_flip": 38, "_static_permute_dim": 38, "static_permute_dim": 38, "_static_repeat": 38, "static_repeat": 38, "_static_reshap": 38, "static_reshap": 38, "_static_rol": 38, "positivclip": 38, "_static_split": 38, "static_split": 38, "_static_squeez": 38, "static_squeez": 38, "_static_stack": 38, "leavv": 38, "static_stack": 38, "_static_swapax": 38, "_static_til": 38, "static_til": 38, "_static_unstack": 38, "static_unstack": 38, "_static_zero_pad": 38, "repreat": [38, 390], "_containerwithnorm": [39, 48], "342": [39, 329, 422], "0427": [39, 329, 422], "299": [39, 329, 422], "241": [39, 422], "_containerwithrandom": [40, 48], "_static_multinomi": 40, "_static_randint": 40, "static_randint": 40, "_static_random_norm": 40, "static_random_norm": 40, "651": 40, "_static_random_uniform": 40, "static_random_uniform": 40, "481": 40, "0999": 40, "_static_shuffl": 40, "static_shuffl": 40, "431": [40, 425], "83": [40, 213, 319, 323, 347, 425], "274": [40, 425], "91": [40, 169, 319, 323, 324, 330, 334, 347, 367, 425, 443], "_containerwithsearch": [41, 48], "_static_argmax": 41, "static_argmax": 41, "_static_argmin": 41, "static_argmin": 41, "_static_argwher": 41, "static_argwher": 41, "_static_nonzero": 41, "_static_wher": 41, "static_wher": 41, "_containerwithset": [42, 48], "_static_unique_al": 42, "static_unique_al": [42, 434], "_static_unique_count": 42, "static_unique_count": 42, "_static_unique_invers": 42, "static_unique_invers": 42, "_static_unique_valu": 42, "_containerwithsort": [43, 48], "_static_argsort": 43, "static_argsort": 43, "_static_searchsort": 43, "_static_sort": 43, "static_sort": 43, "_containerwithstatist": [44, 48], "_static_cumprod": 44, "static_cumprod": 44, "_static_cumsum": 44, "static_cumsum": 44, "_static_prod": 44, "static_prod": 44, "11000001": [44, 447], "23100001": [44, 447], "30800003": [44, 334, 447], "_static_sum": 44, "_static_var": 44, "static_var": 44, "12666667": [44, 334, 450], "11555555": [44, 334, 450], "60000002": [44, 48, 445], "respectv": [44, 448], "81649649": [44, 448], "94280904": [44, 448], "509902": [44, 334, 448], "2472192": [44, 448], "44948983": [44, 448], "41421354": [44, 448], "contian": [44, 450], "6666667": [44, 450], "_containerwithutil": [45, 48], "_static_al": 45, "static_al": 45, "_static_ani": 45, "static_ani": 45, "add_ivy_container_instance_method": 46, "containerexampl": 46, "__abs__": [47, 48], "__add__": [47, 48, 503, 506, 510, 511, 514, 519, 520, 527], "__eq__": [47, 48], "__ge__": [47, 48], "__gt__": [47, 48, 523], "__le__": [47, 48], "__lt__": [47, 48], "__ne__": [47, 48], "__pow__": [47, 48, 527], "69678056": 47, "59876156": 47, "82660675": 47, "__radd__": [47, 48, 510, 511, 519], "__rrshift__": [47, 48], "__rshift__": [47, 48], "__rsub__": [47, 48], "__sub__": [47, 48, 503, 506, 510, 514, 527], "__truediv__": [47, 48, 503, 506, 510], "__xor__": [47, 48], "referenc": [47, 518], "hardwar": [47, 469, 492, 499, 523, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545], "resid": [47, 326, 387, 469, 505, 519, 525, 529], "mt": [47, 527], "hopefulli": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532], "overview": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 505, 507, 521, 524, 532], "submodul": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 472, 473, 474, 475, 476, 477, 478, 498, 499, 500, 502, 505, 507, 509, 515, 516, 521, 524, 525, 529, 534], "question": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "pleas": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "reach": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 415, 470, 471, 473, 474, 475, 476, 477, 478, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "discord": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 489, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "forum": [47, 48, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 470, 471, 473, 474, 475, 476, 477, 478, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "eq": 48, "ge": 48, "gt": [48, 520, 525], "le": 48, "lt": 48, "ne": 48, "75979435": 48, "52153397": 48, "13532257": 48, "rshift": 48, "truediv": 48, "66666669": [48, 301, 322], "custom_object": [51, 53, 313], "identifi": [51, 53, 313, 502, 507, 521, 523], "user": [51, 53, 313, 472, 474, 475, 489, 491, 492, 495, 499, 500, 501, 503, 504, 506, 507, 508, 512, 516, 517, 518, 519, 521, 523, 524, 525, 533, 537, 539, 545, 546], "xxxxxxxxxxxxxx": [51, 53, 313], "custom_fn": [51, 53, 313], "lambda": [51, 53, 230, 301, 302, 304, 311, 313, 321, 322, 323, 328, 349, 410, 411, 498, 512, 515, 516, 517, 520, 523, 525, 528], "24000001": [54, 313], "703": [55, 313], "683": [55, 313], "408": [55, 313], "313": [55, 313], "437": [55, 313], "40337825": [56, 313], "56114835": [56, 313], "20788449": [56, 313], "214": [58, 313], "891": [58, 313], "846": [58, 313], "985": [58, 313], "0768": [59, 173, 313, 319], "231": [59, 313], "body_fn": [61, 62, 63, 64, 315], "orelse_fn": [61, 63, 315], "chosen": [65, 162, 316, 319, 331, 433, 498, 507, 519], "ml_framework": [65, 316], "distanc": [65, 316], "adjac": [65, 316], "nestedsequ": [66, 67, 316], "typevar": [66, 67, 316], "supportsbufferprotocol": [66, 67, 316], "static_copy_arrai": [71, 316], "intdtyp": [74, 84, 88, 100, 111, 115, 122, 128, 316, 317], "suppos": [74, 231, 316, 321, 521], "numrow": [74, 316], "numcolumn": [74, 316], "interchang": [75, 316, 326, 396], "33333337": [78, 301, 316, 322], "66666663": [78, 316], "gpu": [78, 134, 136, 137, 140, 142, 144, 146, 147, 148, 151, 153, 154, 316, 318, 489, 500, 509, 527, 537, 539, 542, 543, 544], "41588834": [79, 316], "7827941": [79, 316], "6227766": [79, 316], "23413252": [79, 316], "n3": [80, 316], "similarli": [80, 316, 504, 508, 519, 523, 527, 545], "xv": [80, 316], "yv": [80, 316], "x_nativ": [81, 316, 518], "y_nativ": [81, 316], "z_nativ": [81, 316], "locat": [82, 316, 330, 333, 423, 439, 498, 500, 504, 505, 509, 519, 520, 521, 522, 537], "d_type": [83, 316], "__new__": [83, 316], "y1": [84, 88, 316], "y2": [84, 88, 316], "y3": [84, 88, 316], "incompat": [93, 317], "data_type_funct": [94, 317], "uint8": [94, 101, 105, 115, 118, 123, 129, 317, 458, 508, 521], "helper": [95, 317, 453, 454, 455, 456, 462, 463, 489, 498, 505, 508, 512, 528, 534], "closest": [96, 170, 179, 180, 209, 218, 317, 319, 521, 523], "xtype": [96, 317], "ytype": [96, 317], "native_uint16": [96, 317], "complexdtyp": [97, 111, 119, 317], "set_default_complex_dtyp": [97, 125, 317], "4294": [97, 99, 317], "967346": [97, 99, 317], "floatdtyp": [99, 121, 317], "set_default_float_dtyp": [99, 108, 119, 127, 317, 508], "int_dtyp": [100, 122, 317], "set_default_int_dtyp": [100, 108, 128, 317, 508], "4294967346": [100, 101, 317], "uint_dtyp": [101, 123, 317], "uint": [101, 115, 123, 129, 317, 508, 520], "uintdtyp": [101, 115, 123, 129, 317], "set_default_uint_dtyp": [101, 108, 129, 317], "native_bool": [103, 317], "followng": [104, 317], "ieee": [104, 158, 178, 192, 208, 213, 314, 317, 319, 492], "754": [104, 158, 178, 192, 208, 213, 314, 317, 319, 492], "smallest_norm": [104, 317], "bfloat16": [105, 317, 458, 508, 519, 521, 522], "unsupport": [106, 138, 236, 237, 317, 318, 321, 453, 456, 499, 513, 519], "encapsul": [107, 317, 507], "314": [107, 317], "9223372036854775808": [107, 317], "9223372036854775807": [107, 317], "65535": [107, 317], "4294967295": [107, 317], "un": [109, 317, 525], "native_uint8": [109, 317], "type1": [116, 317], "type2": [116, 317], "array_api_promot": [116, 117, 317, 458, 459], "unexpect": [117, 317, 508], "default_complex_dtyp": [119, 317], "default_dtype_stack": [120, 126, 317], "unset_default_dtyp": [120, 317], "native_uint64": [120, 317], "default_float_dtyp": [121, 317, 508], "default_int_dtyp": [122, 128, 317, 508], "default_uint_dtyp": [123, 129, 317], "ret1": [124, 317], "ret2": [124, 317], "reset": [125, 126, 127, 128, 129, 153, 291, 292, 293, 294, 295, 296, 317, 318, 321], "default_complex_dtype_stack": [125, 317], "set_default_dtyp": [126, 317, 508, 515], "default_float_dtype_stack": [127, 317], "native_float16": [130, 317], "unmodifi": [132, 318, 504, 508], "tpu": [132, 147, 152, 318, 509, 539, 542], "clear": [133, 318, 489, 491, 492, 493, 498, 500, 504, 508, 509, 510, 519, 523, 525, 527, 539], "cach": [133, 225, 318, 321, 482, 515, 518, 521], "id": [134, 318, 475, 489, 495, 497, 499, 503, 505, 506, 513, 517], "aliv": [139, 143, 145, 240, 267, 268, 318, 321, 509], "139740789224448": [139, 318], "core": [141, 318, 489, 491, 498, 499, 509, 521, 530, 537, 538, 539, 540, 544, 546], "physic": [141, 318], "default_devic": [143, 146, 147, 153, 318, 509, 512], "process_specif": [144, 154, 318], "percentag": [144, 318], "ram": [144, 151, 154, 318], "alon": [144, 154, 318, 489, 495, 521], "036902561555": [144, 318], "7024003467681645": [144, 318], "as_native_dev": [144, 318], "7095597456708771": [144, 318], "attr_onli": [145, 318], "chunk": [147, 148, 149, 318], "codebas": [147, 148, 318, 493, 494, 501, 508, 518, 519, 521, 522, 524], "split_factor": [147, 318, 512], "max_chunk_s": [149, 318], "chunk_siz": [149, 318], "input_ax": [149, 318], "output_ax": [149, 318], "usag": [149, 318, 492, 508, 518, 521, 525, 533, 542], "fed": [149, 318, 529], "fist": [149, 318], "gb": [151, 154, 318, 499], "66700032": [151, 318], "589934592": [151, 318], "set_default_devic": [153, 318, 509], "219563008": [154, 318], "902400346": [154, 318], "525205504": [154, 318], "magnitud": [155, 158, 319, 324, 372, 373], "particular": [155, 196, 319, 459, 499, 500, 502, 504, 507, 508, 510, 516, 518, 519, 521, 522, 523, 535, 539, 545], "princip": [156, 159, 161, 319], "domain": [156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 193, 211, 212, 213, 216, 217, 319, 511, 537, 539], "codomain": [156, 157, 159, 160, 161, 162, 171, 172, 177, 178, 190, 191, 193, 211, 212, 213, 216, 217, 319, 511], "\u03c0": [156, 159, 161, 162, 314, 319], "x1_i": [158, 162, 164, 166, 167, 168, 169, 174, 175, 180, 182, 183, 188, 189, 194, 195, 197, 198, 201, 203, 205, 208, 215, 319, 502], "neither": [158, 312, 319, 322, 507, 519, 523], "nor": [158, 312, 319, 322, 507, 519, 543], "2019": [158, 178, 192, 319, 539, 542], "too": [158, 319, 473, 498, 499, 500, 502, 508, 512, 513, 533], "overflow": [158, 319, 324, 334, 370, 449, 497, 508], "commut": [158, 319], "809": [160, 319], "199": [160, 319], "569": [160, 319], "733": [160, 319], "notat": [162, 319, 334, 443, 507], "denot": [162, 308, 312, 319, 322, 475], "quadrant": [162, 319], "rai": [162, 319, 492], "3\u03c0": [162, 319], "bitwis": [164, 167, 169, 198, 319], "170": [168, 319], "243": [168, 319], "225": [168, 319], "xor": [169, 198, 319], "77": [169, 319, 324, 334, 367, 443], "654": [171, 319, 507], "368": [172, 319], "670": [172, 319], "202": [172, 319, 502], "548": [172, 319], "1490": [172, 319], "0192": [173, 319], "0384": [173, 319], "0576": [173, 319], "698": [174, 319], "truth": [175, 182, 183, 188, 189, 203, 319, 453, 455, 519, 521], "purpos": [178, 192, 319, 324, 370, 500, 503, 506, 507, 510, 512, 514, 515, 516, 519, 521, 523, 524, 527, 534, 538, 540, 543, 544, 545], "accur": [178, 192, 319, 324, 370], "fdlibm": [178, 192, 319], "compliant": [178, 192, 196, 197, 319, 334, 444, 445, 446, 448], "potenti": [178, 192, 319, 489, 498, 499, 500, 507, 508, 519, 524, 542], "632": [178, 319], "20e": [178, 319], "72e": [178, 319], "greatest": [179, 180, 319], "742": [192, 319], "NOT": [196, 319, 498], "unspecifi": [205, 208, 319, 324, 326, 356, 357, 395, 518], "versu": [205, 319], "52095687": [205, 319], "92457771": [205, 319], "49372482": [205, 319], "22738838": [205, 319], "156": [205, 319, 458], "5877228": [205, 319], "189": [206, 319], "252": [206, 319], "315": [206, 319], "378": [206, 319], "1150": [206, 319], "2890": [206, 319], "172": [206, 319], "229": [206, 319], "487": [206, 319, 323, 347], "344": [206, 319], "semant": [208, 319, 491, 525, 530, 540], "That": [208, 319, 499, 500, 503, 521, 527, 528, 529, 540], "primarili": [208, 319, 500, 506, 539], "reason": [208, 319, 492, 498, 500, 502, 503, 506, 507, 508, 510, 515, 518, 519, 522, 523, 525, 527, 545], "deliber": [209, 319, 523], "imprecis": [209, 319], "5654": [209, 319], "034": [209, 319], "433": [209, 302, 304, 311, 319, 322], "932": [211, 319], "746": [211, 319], "443": [211, 319], "657": [211, 227, 319, 321], "indistinguish": [213, 319], "infinit": [213, 319], "32455532": [213, 319], "89897949": [213, 319], "169": [213, 319], "546": [216, 319, 323, 347], "916": [216, 319, 325, 381], "996": [216, 319], "462": [217, 319], "604": [217, 319], "984": [217, 319], "997": [217, 319], "0375": [218, 319], "032": [218, 319], "idx": [221, 321, 489, 509, 527], "inspect": [221, 321], "retriev": [221, 321, 500, 519], "help": [221, 321, 334, 449, 473, 489, 494, 495, 496, 498, 499, 503, 504, 506, 507, 508, 510, 516, 518, 519, 521, 522, 523, 527, 528, 529, 531, 534, 535, 539, 541, 545], "receiv": [222, 265, 321, 327, 400, 401, 474, 500, 508, 509, 521, 523], "compile_on_next_step": [222, 321, 475, 477, 529], "decor": [225, 321, 458, 460, 464, 502, 503, 506, 508, 509, 515, 516, 518, 519, 520], "recalcul": [225, 321], "my_sum": [225, 321], "val1": [225, 321], "val2": [225, 321], "cached_sum": [225, 321], "line_eq": [225, 321], "slp": [225, 321], "itc": [225, 321], "cached_line_eq": [225, 321], "0353": [226, 321], "424": [226, 321], "58": [226, 321], "176": [226, 321], "339": [226, 321], "271": [226, 321], "168": [226, 321], "391": [226, 321], "417": [227, 321], "583": [227, 321], "0667": [227, 321], "267": [227, 321], "131": [227, 321], "394": [227, 321, 330, 428], "526": [227, 321], "788": [227, 321], "public": [228, 321, 507, 517, 527, 542], "default_str": [230, 321], "46999979": [231, 321], "66000009": [231, 321], "93000001": [231, 321], "29000092": [231, 321], "33999991": [231, 321], "6400001": [231, 321], "96000004": [231, 321], "36000013": [231, 321], "51999998": [231, 321], "67000008": [231, 321], "30000001": [231, 321, 332, 435], "960": [231, 321], "1280": [231, 321, 489], "3600": [231, 321], "bottom": [231, 321, 499, 507, 545], "h1": [231, 321], "w1": [231, 321], "40499985": [232, 321], "61000061": [232, 321], "1500001": [232, 321], "array_mod": [241, 321], "set_array_mod": [241, 291, 321], "exception_trace_mod": [242, 321], "set_exception_trace_mod": [242, 292, 321, 512], "get_exception_trace_mod": [246, 272, 292, 321], "set_nestable_mod": [246, 293, 321], "set_queue_timeout": [248, 294, 321], "max_depth": [249, 321, 328, 415], "seen_set": [249, 321], "local_set": [249, 321], "set_show_func_wrapper_trace_mod": [250, 296, 321, 512], "path": [251, 321, 455, 464, 481, 499, 505, 518, 519, 520, 539], "directori": [251, 279, 318, 321, 495, 496, 498, 499, 500, 507, 519, 521], "temporari": [251, 279, 321, 498, 508], "thrown": [256, 321, 503, 509, 512, 533], "ivyexcept": [256, 284, 312, 321, 322, 485, 512, 518, 519], "allow_dupl": [265, 321], "best": [265, 321, 489, 494, 497, 498, 499, 500, 501, 507, 508, 513, 521, 522, 542, 543], "o": [265, 321, 489, 499, 501, 507, 525], "fork": [266, 321, 494, 502, 507], "forkserv": [266, 321], "spawn": [266, 321], "garbag": [268, 321], "collector": [268, 321], "get_all_arrays_in_memori": [268, 321], "consol": [268, 321, 500, 521, 527], "get_array_mod": [271, 291, 321], "rtype": [271, 272, 275, 277, 278, 321], "exept": [272, 321], "get_min_bas": [273, 321], "get_min_denomin": [274, 321], "get_nestable_mod": [275, 293, 321], "get_queue_timeout": [276, 294, 321], "shape_array_mod": [277, 295, 321], "get_show_func_wrapper_trace_mod": [278, 296, 321], "tmp_dr": [279, 321], "get_tmp_dir": [279, 321], "tmp": [279, 321], "my_tmp": [279, 321], "set_shape_array_mod": [281, 295, 321], "49999999999975": [282, 321], "5015015015010504": [282, 321], "000444502911705e": [282, 321], "9999999999995j": [282, 321], "isn": [284, 321, 500, 516, 528, 533, 541], "possibli": [286, 321, 519, 521, 533], "100000023841858": [286, 321], "200000047683716": [286, 321], "299999952316284": [286, 321], "400000095367432": [286, 321], "599999904632568": [286, 321], "dictionai": [290, 321], "__name__": [290, 321, 489, 512], "hemant": [290, 321], "unset_shape_array_mod": [291, 294, 321], "previous": [292, 321, 482, 499, 504, 515, 517, 521, 525], "451": [297, 321], "in_ax": [298, 321], "out_ax": [298, 321], "thereof": [298, 321], "fun": [298, 321, 328, 414, 507], "summaris": [298, 321], "grad": [299, 322, 477, 489, 517, 528, 529, 530], "0125": [299, 322], "171": [299, 322, 458], "90000075": [300, 322], "90000164": [300, 322], "9000032": [300, 322], "50000012e": [300, 322], "92558754": [300, 322], "92558694": [300, 322], "92558682": [300, 322], "92558861": [300, 322], "60000025e": [300, 322], "01024": [300, 322], "retain_grad": [301, 322], "xs_grad_idx": [301, 322, 455, 489, 517], "ret_grad_idx": [301, 322, 455, 489, 517], "func_ret": [301, 322, 517], "retain": [301, 322, 517, 534], "33333334": [301, 322, 324, 379], "666666": [301, 322], "333332": [301, 322], "66666675": [301, 322], "grad_fn": [302, 311, 322, 528], "933": [302, 304, 311, 322], "jacobian": [304, 322, 533, 539], "jac_fn": [304, 322], "639": [305, 322], "361": [305, 322], "with_grad": [308, 310, 322, 475], "compon": [308, 310, 312, 322, 489, 492, 525, 535, 540, 542], "with_grads_stack": [308, 310, 312, 322], "delet": [310, 322, 500, 507], "set_with_grad": [310, 312, 322], "value_grad": [311, 322], "423332": [311, 322], "enter": [312, 322, 499, 500, 503, 508, 509, 514, 516], "parent": [312, 322, 472, 498, 507, 527], "deseri": 313, "718281828459045": 314, "euler": [314, 532], "141592653589793": 314, "Not": [314, 504, 520, 528, 529, 533], "newaxi": 314, "ifels": 315, "whileloop": 315, "if_els": 315, "while_loop": 315, "asarray_handle_nest": 316, "asarray_infer_devic": 316, "asarray_to_native_arrays_and_back": 316, "as_ivy_dtyp": [317, 519], "as_native_dtyp": 317, "check_float": 317, "closest_valid_dtyp": 317, "default_dtyp": [317, 508, 515], "dtype_bit": 317, "function_supported_dtyp": [317, 508], "function_unsupported_dtyp": [317, 508], "infer_default_dtyp": 317, "invalid_dtyp": [317, 508], "is_native_dtyp": 317, "promote_typ": [317, 508], "promote_types_of_input": [317, 508, 518], "type_promote_arrai": [317, 508], "unset_default_complex_dtyp": 317, "unset_default_float_dtyp": 317, "unset_default_int_dtyp": 317, "unset_default_uint_dtyp": 317, "valid_dtyp": 317, "defaultcomplexdtyp": 317, "defaultdtyp": 317, "defaultfloatdtyp": 317, "defaultintdtyp": 317, "defaultuintdtyp": 317, "as_ivy_dev": [318, 527], "clear_cached_mem_on_dev": 318, "dev_util": [318, 509], "function_supported_devic": 318, "function_unsupported_devic": 318, "get_all_ivy_arrays_on_dev": [318, 509], "gpu_is_avail": [318, 489], "num_cpu_cor": [318, 509], "num_gpu": [318, 509, 521], "num_ivy_arrays_on_dev": 318, "percent_used_mem_on_dev": 318, "print_all_ivy_arrays_on_dev": 318, "set_split_factor": [318, 512], "split_func_cal": 318, "total_mem_on_dev": [318, 509], "tpu_is_avail": 318, "unset_default_devic": 318, "used_mem_on_dev": 318, "defaultdevic": 318, "profil": 318, "save_dir": 318, "arg_info": 321, "arg_nam": 321, "cache_fn": [321, 515], "container_typ": 321, "current_backend_str": [321, 512, 525, 527], "function_supported_devices_and_dtyp": 321, "function_unsupported_devices_and_dtyp": 321, "get_item": [321, 518], "get_referrers_recurs": 321, "inplace_arrays_support": 321, "inplace_variables_support": 321, "isscalar": 321, "match_kwarg": 321, "num_arrays_in_memori": 321, "print_all_arrays_in_memori": 321, "set_min_bas": 321, "set_min_denomin": 321, "set_tmp_dir": 321, "to_ivy_shap": 321, "to_native_shap": 321, "try_else_non": 321, "unset_array_mod": 321, "unset_exception_trace_mod": 321, "unset_nestable_mod": 321, "unset_queue_timeout": 321, "unset_show_func_wrapper_trace_mod": 321, "vmap": [321, 533, 539], "arraymod": 321, "manag": [321, 322, 489, 493, 494, 518, 533, 541, 543], "execute_with_gradi": [322, 489, 528, 529, 530, 533], "jac": 322, "unset_with_grad": 322, "value_and_grad": [322, 517], "gradienttrack": 322, "conv": [323, 523], "channel_last": [323, 336, 343, 344], "feature_group_count": [323, 336, 343, 344], "x_dilat": [323, 336, 343], "channel_first": [323, 336, 343, 344], "group": [323, 328, 336, 343, 344, 405, 502, 506, 515, 519, 520, 535, 538, 544], "258": [323, 338, 340, 342], "dhwio": [323, 341], "conv_general_dil": [323, 519], "conv_general_transpos": 323, "depthwis": [323, 345, 460, 474], "hwi": [323, 345], "randomli": [323, 346, 458, 459, 460, 461, 464, 474], "overfit": [323, 346], "1428566": [323, 346], "19999981": [323, 346], "39999962": [323, 346], "4000001": [323, 346], "49000001": [323, 346], "55599999": [323, 346], "21000004": [323, 346], "incom": [323, 347], "666": [323, 324, 347, 363], "4269": [323, 347], "911": [323, 347], "157": [323, 347], "753": [323, 347], "101": [323, 324, 328, 347, 360, 409], "545": [323, 330, 347, 426], "547": [323, 347], "124": [323, 347, 512], "852": [323, 347], "963": [323, 347], "108": [323, 334, 347, 443], "196": [323, 347], "306": [323, 347], "long": [323, 348, 499, 500, 507, 508, 510, 512, 519, 525, 539], "short": [323, 348, 500, 508, 519, 522, 525, 529], "term": [323, 348, 474, 489, 491, 500, 506, 525, 534, 539], "unrol": [323, 348, 525, 528], "lstm": [323, 348, 474, 525, 539], "multi": [323, 324, 349, 352, 474, 489, 510, 524, 533, 535, 537, 539, 543], "head": [323, 349, 474, 489, 497, 499, 519], "query_dim": [323, 349, 474], "measur": [323, 349, 474], "cont_feat_dim": [323, 349], "numhead": [323, 349], "head_dim": [323, 349, 474], "out_feat_dim": [323, 349], "5678761": [323, 349], "65441847": [323, 349], "18969631": [323, 349], "40131447": [323, 349], "19991851": [323, 349], "40000153": [323, 349], "68589532": [323, 349], "40129396": [323, 349], "40000817": [323, 349], "31219625": [323, 349], "25698996": [323, 349], "31022024": [323, 349], "16286421": [323, 349], "30296469": [323, 349], "16460133": [323, 349], "59497029": [323, 349], "40046397": [323, 349], "14009905": [323, 349], "81691194": [323, 349], "10732293": [323, 349], "40012637": [323, 349], "73519301": [323, 349], "40021262": [323, 349], "7615059": [323, 349], "40326414": [323, 349], "30141067": [323, 349], "19610119": [323, 349], "32028484": [323, 349], "1708746": [323, 349], "34100914": [323, 349], "14920235": [323, 349], "40000009": [323, 349], "73333335": [323, 349], "axisa": [324, 352], "axisb": [324, 352], "axisc": [324, 352], "293": [324, 353], "46997": [324, 353], "superdiagon": [324, 354], "subdiagon": [324, 354], "eigendecomposit": [324, 356, 357], "qlq\u1d40": [324, 356, 357], "orthogon": [324, 356, 357], "behav": [324, 356, 498, 502, 512, 518, 519, 520, 527, 540], "futur": [324, 357, 358, 489, 491, 493, 499, 500, 505, 507, 508, 521, 522, 523, 527, 533, 545], "45033181e": [324, 358], "02829754e": [324, 358], "54220343e": [324, 358], "12647155e": [324, 358], "38447177e": [324, 358], "56155300e": [324, 358], "26794919": [324, 358], "7320509": [324, 358], "array_lik": [324, 359, 367], "0012": [324, 360], "00342": [324, 360], "000565": [324, 360], "0104": [324, 360], "000981": [324, 360], "00282": [324, 360], "000766": [324, 360], "0322": [324, 360], "00237": [324, 360], "000151": [324, 360], "00101": [324, 360], "00019": [324, 360], "0214": [324, 360], "00171": [324, 360], "0107": [324, 360], "0167": [324, 360], "0472": [324, 360], "0536": [324, 360], "0177": [324, 360], "000429": [324, 360], "00762": [324, 360], "lu_factor": 324, "pivot": [324, 361], "lu": [324, 361], "convent": [324, 334, 362, 443, 491, 504, 514, 522, 532, 545], "frobeniu": [324, 363], "nuclear": [324, 363], "induc": [324, 363], "47722558": [324, 363], "776": [324, 363], "6000004": [324, 363], "118": [324, 364, 512], "moor": [324, 368], "penros": [324, 368], "underflow": [324, 370, 508], "logsabsdet": [324, 370], "although": [324, 370, 503, 506, 519, 523, 537, 539], "again": [324, 370, 492, 493, 500, 503, 504, 505, 506, 510, 512, 518, 519, 521, 522, 523, 528, 530, 533, 544, 545], "subject": [324, 370], "linalg": [324, 370, 498, 518, 520], "solut": [324, 371, 489, 500, 506, 508, 520, 521, 523, 537, 541], "ordin": [324, 371, 532], "usvh": [324, 372], "et": [324, 372], "cetera": [324, 372], "third": [324, 332, 372, 434, 505, 518, 533, 538, 539, 545], "ss": [324, 373], "615": [324, 373], "866": [324, 373], "864": [324, 373], "0x": [324, 377], "Such": [324, 377, 500, 515, 521], "progress": [324, 377, 499, 500, 530], "alexandr": [324, 377], "theophil": [324, 377], "9000001": [324, 379], "64158917": [324, 379], "skew": [324, 380], "symmetric_matrix": [324, 380], "cross_product": [324, 380], "35667497": [325, 382], "793291": [325, 383], "512926": [325, 383], "outsid": [326, 384, 395, 509, 513, 515, 527, 544], "indexerror": [326, 387, 485, 512], "beyond": [326, 392, 511, 519, 545], "introduc": [326, 332, 392, 434, 491, 506, 508, 520, 521, 523, 528], "squeezabl": [326, 394], "famili": [326, 395], "intxx": [326, 395], "floatxx": [326, 395], "construct": [326, 397, 474, 476, 477, 478, 525, 529, 530, 537, 539, 546], "rep": [326, 397], "manipulation_funct": [326, 399], "fomaml_step": 327, "inner_cost_fn": [327, 400, 401], "outer_cost_fn": [327, 400, 401], "inner_grad_step": [327, 400, 401, 402], "inner_learning_r": [327, 400, 401, 402], "inner_optimization_step": [327, 400, 401, 402], "inner_batch_fn": [327, 400, 401], "outer_batch_fn": [327, 400, 401], "average_across_step": [327, 400, 401], "inner_v": [327, 400, 401], "keep_inner_v": [327, 400, 401], "outer_v": [327, 400, 401], "keep_outer_v": [327, 400, 401], "return_inner_v": [327, 400, 401, 402], "num_task": [327, 400, 401, 402], "maml": [327, 400, 401], "task": [327, 400, 401, 402, 489, 494, 500, 519, 520, 532, 539, 545, 546], "0x7f0f9fe91e50": [327, 400, 401, 402], "maml_step": 327, "vanilla": [327, 401, 529, 539], "recev": [327, 401], "reptile_step": 327, "cost_fn": [327, 402], "reptil": [327, 402], "receivng": [327, 402], "all_nested_indic": 328, "include_nest": [328, 403], "_index": [328, 403, 414], "_base": [328, 403, 413, 414, 518], "extra_nest_typ": [328, 403, 404, 413, 414, 415], "themselv": [328, 403, 506, 508, 509, 511, 515, 519, 529, 536, 545], "far": [328, 403, 414, 509, 510, 526, 544, 545], "begin": [328, 403, 414, 472, 499, 502, 520], "manual": [328, 403, 413, 414, 498, 499, 500, 519, 521, 529], "go": [328, 403, 404, 413, 414, 415, 489, 494, 495, 498, 499, 500, 501, 504, 505, 507, 508, 510, 519, 520, 521, 522, 524, 528, 533, 535, 539, 540, 544, 546], "deeper": [328, 403, 404, 413, 414, 415, 491, 500, 501, 521, 524], "copy_nest": 328, "to_mut": [328, 404, 415], "deepli": [328, 404, 533, 539], "mutabl": [328, 404, 410, 411, 415, 420, 421], "copied_nest": [328, 404], "1337": [328, 404], "duplicate_array_index_chain": 328, "index_nest": [328, 515], "insert_into_nest_at_index": 328, "insert_into_nest_at_indic": 328, "onto": [328, 409, 415, 490, 491, 539], "special_squar": [328, 409], "6666666666666667": [328, 409], "special_pow": [328, 409], "linear_model": [328, 409], "map_nest_at_index": 328, "shallow": [328, 410, 411, 415, 420, 421], "_result": [328, 410, 420], "placehold": [328, 410, 415, 420, 500, 503, 505, 513, 514, 534], "hh": [328, 410], "map_nest_at_indic": 328, "ub": [328, 411], "tb": [328, 411], "multi_index_nest": 328, "repeatedli": [328, 412, 507, 521], "nested_ani": 328, "check_nest": [328, 413, 414], "via": [328, 413, 414, 500, 502, 506, 508, 509, 518, 522, 523, 525, 527, 528, 532, 539], "conditon": [328, 413, 414], "nested_argwher": 328, "stop_after_n_found": [328, 414], "nested_indic": [328, 414], "nested_map": [328, 515], "_depth": [328, 415], "_tuple_check_fn": [328, 415], "_list_check_fn": [328, 415], "_dict_check_fn": [328, 415], "wherebi": [328, 415, 498, 536], "nested_multi_map": 328, "index_chain": [328, 416], "nest0": [328, 416], "ivy_arrai": [328, 416, 503, 519], "unappli": [328, 416], "prune_empti": 328, "prune_nest_at_index": 328, "prune_nest_at_indic": 328, "set_nest_at_index": 328, "set_nest_at_indic": 328, "111": [328, 421], "xyz": [328, 421], "pqr": [328, 421], "mini": [329, 422, 476], "217": [329, 422], "uniformli": [330, 424, 426], "22346112": [330, 425], "0922": [330, 425], "49671414": [330, 425], "1382643": [330, 425], "64768857": [330, 425], "5230298": [330, 425], "23415337": [330, 425], "23413695": [330, 425], "9213753": [330, 425], "12818667": [330, 425], "799": [330, 425], "469": [330, 425], "287": [330, 425], "0366": [330, 425], "26431865": [330, 426], "475": [330, 426], "878": [330, 426], "861": [330, 426], "929": [330, 426], "789": [330, 426], "519": [330, 426], "0435": [330, 426], "381": [330, 426], "4608004": [330, 426], "8458502": [330, 426], "67270088": [330, 426], "31128597": [330, 426], "major": [331, 432, 492, 508, 509, 520, 521, 533, 536, 539], "style": [331, 432, 500, 539], "guarante": [332, 434, 436, 493, 503, 533], "aggreg": [332, 434, 507], "fourth": [332, 434], "1141": [332, 434], "8101": [332, 434], "9298": [332, 434], "8460": [332, 434], "2119": [332, 434], "3519": [332, 434], "6252": [332, 434], "4033": [332, 434], "7443": [332, 434], "2577": [332, 434], "3707": [332, 434], "0545": [332, 434], "3238": [332, 434], "5944": [332, 434], "0775": [332, 434], "4327": [332, 434], "62519997": [332, 434], "40329999": [332, 434], "59439999": [332, 434], "74430001": [332, 434], "81010002": [332, 434], "84600002": [332, 434], "92979997": [332, 434], "29999995": [332, 435], "einstein": [334, 443], "summat": [334, 443], "117": [334, 443], "sentinel": [334, 444, 446], "90000004": [334, 445], "statistical_funct": [334, 448], "intend": [334, 449, 456, 473, 502, 514, 517, 537, 539, 543, 544], "07472222": [334, 450], "00666667": [334, 450], "08966666": [334, 450], "simplicit": [335, 451, 452], "meta": [400, 401, 402, 503, 522, 539], "ivy_test": [453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 498, 499, 500, 502, 505, 507, 520], "test_ivi": [453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 498, 499, 500, 505, 507, 520, 521], "assert_all_clos": [453, 520], "ret_np": [453, 455, 520], "ret_from_gt_np": [453, 520], "ground_truth_backend": [453, 455, 456, 464, 520], "ground": [453, 455, 491, 519, 521], "mark": [453, 498, 500, 502, 521, 525], "fail": [453, 498, 499, 500, 502, 507, 508, 510, 513, 518, 519, 520], "assert_same_type_and_shap": 453, "this_key_chain": 453, "check_unsupported_devic": 453, "input_devic": 453, "all_as_kwargs_np": [453, 455], "presenc": [453, 506, 518], "check_unsupported_device_and_dtyp": 453, "input_dtyp": [453, 455, 463, 520, 521], "check_unsupported_dtyp": 453, "test_unsupported_funct": 453, "value_test": 453, "ret_np_flat": 453, "ret_np_from_gt_flat": 453, "ret_from_np_gt_flat": 453, "available_framework": 454, "ground_truth": 454, "function_test": 455, "args_to_contain": 455, "array_arg": [455, 515], "args_to_frontend": 455, "frontend_array_fn": 455, "arrays_to_frontend": 455, "as_list": 455, "compiled_if_requir": 455, "test_compil": [455, 463, 464], "convtru": 455, "nativeclass": 455, "counter": [455, 529], "create_args_kwarg": 455, "args_np": 455, "arg_np_val": 455, "args_idx": 455, "kwargs_np": 455, "kwarg_np_val": 455, "kwargs_idx": 455, "test_flag": [455, 520, 521], "on_devic": [455, 463, 520], "empty_func": 455, "flatten_and_to_np": 455, "flatten_frontend": 455, "flatten_frontend_to_np": 455, "flatten_fw_and_to_np": 455, "framework_compar": 455, "get_frontend_ret": 455, "as_ivy_arrai": 455, "get_ret_and_flattened_np_arrai": 455, "gradient_incompatible_funct": 455, "gradient_test": [455, 521], "rtol_": 455, "atol_": [455, 520], "gradient_unsupported_dtyp": 455, "kwargs_to_args_n_kwarg": 455, "num_positional_arg": [455, 463, 464, 520, 521], "port": [455, 493], "make_json_pick": [455, 459], "test_frontend_funct": [455, 520], "fn_tree": [455, 456, 464, 519, 520, 521], "test_valu": [455, 520, 521], "all_alias": [455, 520], "alias": [455, 464, 498, 519, 520], "namespac": [455, 498, 508, 516, 519, 520, 522, 525, 530], "test_frontend_method": [455, 520], "init_input_dtyp": [455, 520], "method_input_dtyp": [455, 520], "init_flag": [455, 520, 521], "method_flag": [455, 463, 520, 521], "init_all_as_kwargs_np": [455, 520], "method_all_as_kwargs_np": [455, 520], "frontend_method_data": [455, 520], "consum": [455, 506, 507, 514, 520, 521], "init_as_variable_flag": [455, 464], "dictat": [455, 503, 510, 514, 518], "init_num_positional_arg": [455, 464], "init_native_array_flag": 455, "with_v": 455, "ret_gt": 455, "test_funct": [455, 499, 500, 507, 520, 521], "fn_name": [455, 456, 464, 504, 520, 521], "return_flat_np_arrai": 455, "functiontestflag": [455, 463], "with_out": [455, 463, 516, 520, 521], "instance_method": [455, 463, 516, 521], "as_vari": [455, 463, 516, 520, 521], "as_variable_flag": [455, 464, 520], "native_array_flag": [455, 464, 520], "container_flag": [455, 463, 464], "test_method": 455, "class_nam": 455, "method_nam": [455, 462, 464, 520], "init_with_v": 455, "method_with_v": 455, "test_gradi": [455, 463, 464, 516], "method_as_variable_flag": [455, 464], "method_num_positional_arg": [455, 464], "method_native_array_flag": 455, "method_container_flag": [455, 464], "tthe": 455, "var_fn": 455, "holder": 456, "interruptedtest": 456, "test_interrup": 456, "baseexcept": 456, "testdata": 456, "supported_device_dtyp": 456, "is_method": 456, "remove_all_current_framework": 456, "setup_api_test": 456, "test_data": 456, "setup_frontend_test": 456, "teardown_api_test": 456, "teardown_frontend_test": 456, "hypothesis_help": [458, 459, 460, 461], "array_help": 458, "array_and_broadcastable_shap": 458, "searchstrategi": [458, 459, 460, 461, 463, 464, 521], "array_bool": [458, 521], "min_valu": [458, 459, 460, 461, 520, 521], "max_valu": [458, 459, 460, 461, 520, 521], "strategi": [458, 459, 460, 464, 498, 516, 520], "array_indices_axi": 458, "array_dtyp": [458, 459, 521], "indices_dtyp": 458, "get_dtyp": [458, 459, 520, 521], "disable_random_axi": 458, "axis_zero": 458, "allow_inf": [458, 461, 520, 521], "min_num_dim": [458, 460, 520, 521], "max_num_dim": [458, 460, 520, 521], "min_dim_s": [458, 460, 520, 521], "max_dim_s": [458, 460, 520], "first_dimension_onli": 458, "indices_same_dim": 458, "valid_bound": 458, "hypothesi": [458, 460, 464, 498, 500, 502, 507, 516], "65536": 458, "44758124e": [458, 521], "array_valu": [458, 521], "abs_smallest_v": [458, 460, 461], "allow_nan": [458, 461, 521], "allow_subnorm": [458, 461, 521], "exclude_min": [458, 461, 521], "exclude_max": [458, 461], "large_abs_safety_factor": [458, 460, 461, 521], "small_abs_safety_factor": [458, 460, 461], "safety_factor_scal": [458, 460, 461, 521], "subnorm": [458, 461], "safeti": [458, 460, 461, 539], "scaler": [458, 461, 521], "0002": [458, 461], "arrays_and_ax": 458, "available_dtyp": [458, 459, 520, 521], "allow_non": [458, 460, 520, 521], "return_dtyp": 458, "force_int_axi": 458, "arrays_for_pool": 458, "min_dim": 458, "max_dim": 458, "min_sid": 458, "max_sid": 458, "allow_explicit_pad": 458, "return_dil": 458, "dtype_and_valu": [458, 520, 521], "num_arrai": [458, 459, 520, 521], "shared_dtyp": [458, 459, 520], "ret_shap": 458, "array_api_dtyp": [458, 459], "tabl": [458, 459, 508, 519, 539], "37915": 458, "6322": 458, "26765": 458, "12413": 458, "26986": 458, "34665": 458, "000e": 458, "711e": 458, "100e": 458, "955e": [458, 521], "40817": 458, "56193": 458, "29200": 458, "5851": 458, "9746": 458, "9604645e": 458, "192": 458, "103": 458, "41795": 458, "1170789994": 458, "44251": 458, "44209": 458, "433075925": 458, "24791": 458, "24691": 458, "24892": 458, "16711": 458, "972": 458, "15357": 458, "72057594037927936": 458, "dtype_values_axi": [458, 521], "min_axi": 458, "max_axi": 458, "valid_axi": 458, "allow_neg_ax": 458, "min_axes_s": 458, "max_axes_s": 458, "force_tuple_axi": 458, "29788": 458, "62222885e": 458, "68281172e": 458, "257j": 458, "40129846e": 458, "90000000e": 458, "63426649e": 458, "50000000e": 458, "91931887e": 458, "29488e": 458, "14361019e": 458, "96046448e": 458, "12445": 458, "list_of_s": 458, "st": [458, 502, 520, 521], "sampled_from": [458, 521], "min_siz": [458, 460, 464, 521], "max_siz": [458, 460, 464, 521], "size_bound": [458, 521], "00001": 458, "999999999999999": 458, "9394938006792373": 458, "mutually_broadcastable_shap": 458, "num_shap": 458, "base_shap": 458, "dtype_help": 459, "univers": [459, 491, 519], "get_castable_dtyp": 459, "castabl": 459, "prune_funct": 459, "intersect": [459, 507, 521, 532], "signed_integ": 459, "real_and_complex": 459, "float_and_complex": 459, "incas": 459, "general_help": 460, "apply_safety_factor": 460, "embedding_help": 460, "get_axi": [460, 521], "allow_neg": 460, "force_tupl": 460, "force_int": 460, "assertionerror": [460, 502, 512, 520, 521], "get_bound": [460, 521], "get_mean_std": [460, 521], "get_shap": [460, 520, 521], "matrix_is_st": 460, "cond_limit": 460, "instabl": [460, 508], "further": [460, 492, 493, 500, 502, 503, 507, 510, 512, 514, 518, 519, 521, 524, 525, 528, 529, 544, 545], "computation": 460, "heavi": [460, 519, 520, 523, 540], "condition_index": 460, "ill": 460, "prone": 460, "thumb": 460, "what": [460, 489, 492, 493, 495, 500, 501, 505, 506, 507, 510, 511, 514, 516, 517, 518, 519, 520, 521, 524, 525, 527, 528, 529, 530, 532, 533, 535, 540, 541, 544], "But": [460, 506, 507, 511, 516, 518, 523, 530], "perfectli": [460, 493], "gradual": 460, "strong": [460, 492, 533, 539], "multicollinear": 460, "tell": 460, "reshape_shap": [460, 521], "subset": [460, 503, 507, 511, 514, 517, 519, 521, 525, 539], "x_and_filt": 460, "number_help": 461, "arbitrarili": [461, 506, 516, 528], "safety_factor": 461, "frontendmethoddata": 462, "ivy_init_modul": 462, "framework_init_modul": 462, "init_nam": 462, "test_parameter_flag": 463, "frontendfunctiontestflag": 463, "generate_frontend_arrai": [463, 464], "testflag": 463, "apply_flag": 463, "args_to_iter": 463, "frontendmethodtestflag": 463, "initmethodtestflag": 463, "methodtestflag": 463, "as_cont": 463, "build_flag": 463, "frontend_function_flag": 463, "frontend_method_flag": 463, "function_flag": 463, "init_method_flag": 463, "testing_help": 464, "handle_frontend_method": [464, 520, 521], "class_tre": [464, 520], "init_tre": [464, 520], "init_native_arrai": 464, "_as_varaible_strategi": 464, "method_native_arrai": 464, "_given_kwarg": 464, "wrapper": [464, 503, 505, 506, 508, 512, 516, 518, 519, 523, 527, 534, 535, 539], "handle_frontend_test": [464, 520, 521], "number_positional_arg": [464, 520], "test_with_out": [464, 520], "test_inplac": 464, "handle_method": [464, 521], "method_tre": [464, 520, 521], "_gradient_strategi": 464, "_compile_strategi": 464, "handle_test": [464, 521], "test_instance_method": 464, "num_positional_args_method": 464, "nested_arrai": [469, 505], "nestedarrai": 469, "classmethod": 469, "from_row_length": 469, "row_length": 469, "from_row_split": 469, "row_split": 469, "unbind": 469, "geglu": 470, "leakyrelu": 470, "logsoftmax": 470, "moduleconvert": [471, 475], "from_flax_modul": 471, "native_modul": 471, "params_fx": 471, "rng_seed": 471, "constructor_arg": 471, "constructor_kwarg": 471, "instance_arg": 471, "instance_kwarg": 471, "flax": [471, 493, 530, 533, 539], "from_haiku_modul": 471, "params_hk": 471, "from_keras_modul": 471, "from_torch_modul": 471, "dedic": [471, 514, 527, 529], "to_ivy_modul": [471, 530], "native_module_class": 471, "modulehelp": [472, 475], "check_submod_ret": 472, "expected_submod_ret": [472, 475], "get_mod_kei": 472, "top_mod": 472, "explicit": [472, 499, 506, 508, 517, 518, 519, 520, 525, 533, 539], "mod_depth": 472, "mod_height": 472, "mod_with_top_mod_key_chain": 472, "flatten_key_chain": 472, "iimedi": 472, "show_mod_in_top_mod": 472, "upper_depth": 472, "lower_depth": 472, "coverag": [472, 508, 521], "prompt": [472, 500], "show_structur": 472, "this_repr": 472, "show_v_in_top_v": 472, "perspect": 472, "top_v": 472, "sub_mod": 472, "show_v": 472, "comopos": 472, "enumer": [472, 489], "track_submod_call_ord": [472, 475], "track_submod_ret": [472, 475], "v_with_top_v_key_chain": 472, "create_vari": [473, 529], "var_shap": [473, 529], "fan_out": [473, 529], "fan_in": [473, 529], "rectangular": 473, "firstlayersiren": 473, "siren": 473, "distribt": 473, "glorotuniform": [473, 474, 529], "glorot": 473, "known": [473, 502, 507, 508, 519, 521], "xavier": 473, "neuron": 473, "w_1x_1": 473, "w_2x_2": 473, "w_nx_n": 473, "w_i": 473, "vanish": 473, "explod": [473, 490, 491], "big": [473, 494, 533, 539], "pick": 473, "carefulli": [473, 519, 537, 542], "abstract": [473, 477, 491, 506, 508, 519, 521, 523, 529, 533, 537, 539, 541, 542, 546], "kaimingnorm": 473, "fan_mod": [473, 529], "kaim": 473, "he": 473, "distibut": 473, "center": 473, "negative_slop": 473, "fan": 473, "propog": 473, "fan_sum": [473, 529], "much": [473, 492, 498, 499, 500, 503, 506, 508, 518, 519, 520, 522, 525, 527, 528, 537, 539, 545, 546], "proport": 473, "Ones": 473, "w0": 473, "gain": [473, 500, 502, 524, 529, 539], "wlim": 473, "predefin": 473, "initialz": 473, "fan_avg": 473, "input_channel": [474, 489, 525, 529], "output_channel": [474, 489, 529], "filter_s": 474, "weight_initi": [474, 529], "bias_initi": [474, 529], "conv1dtranspos": 474, "filter_shap": 474, "conv2dtranspos": 474, "conv3dtranspos": 474, "depthwiseconv2d": 474, "num_channel": 474, "bernoul": 474, "num_lay": 474, "return_sequ": 474, "return_st": 474, "get_initial_st": 474, "dens": [474, 489], "connect": [474, 492, 499, 529, 530, 537], "multiheadattent": 474, "dropout_r": 474, "context_dim": 474, "with_to_q_fn": 474, "with_to_kv_fn": 474, "with_to_out_fn": 474, "build_mod": [474, 475], "on_init": [474, 475], "store_var": 475, "fallback_to_non_compil": [475, 477], "with_partial_v": 475, "submod_depth": 475, "submods_to_track": 475, "varibl": 475, "temporarili": [475, 502, 522], "fall": [475, 477, 498, 500, 508, 524], "from_cal": 475, "trigger": [475, 498], "successfulli": [475, 499, 503, 513], "built_": 475, "compile_kwarg": 475, "_unified_ivy_graph": 475, "_call": 475, "save_weight": 475, "weights_path": 475, "show_graph": 475, "randomness_factor": 475, "save_to_disk": 475, "with_edge_label": 475, "with_arg_label": 475, "with_output_label": 475, "output_connected_onli": 475, "highlight_subgraph": 475, "fname": [475, 528], "return_graph": 475, "layernorm": 476, "normalized_shap": 476, "elementwise_affin": 476, "trail": 476, "affin": 476, "set_stat": [477, 529], "init_on_first_step": 477, "ignore_miss": 477, "privat": [477, 519, 521], "_step": [477, 529], "miss": [477, 498, 499, 503, 506, 507, 510, 513, 521, 523], "sgd": [477, 539], "stochast": [477, 539], "sub_modul": 478, "check_al": 479, "messag": [479, 485, 488, 492, 499, 500, 507, 510, 512, 513, 519, 525, 527], "check_all_or_any_fn": 479, "check_ani": 479, "check_dimens": 479, "check_elem_in_list": [479, 519], "elem": 479, "check_equ": [479, 519], "check_exist": 479, "check_fals": 479, "check_fill_value_and_dtype_are_compat": 479, "check_gather_input_valid": 479, "check_gather_nd_input_valid": 479, "check_great": 479, "allow_equ": [479, 512], "check_inplace_sizes_valid": [479, 518], "check_isinst": 479, "allowed_typ": 479, "check_kernel_padding_s": 479, "kernel_s": 479, "padding_s": 479, "check_less": [479, 512], "check_one_way_broadcast": 479, "check_same_dtyp": 479, "check_shapes_broadcast": 479, "check_tru": 479, "ast_help": 481, "importtransform": 481, "nodetransform": 481, "impersonate_import": 481, "tree": [481, 495, 508], "visit_import": 481, "visit_importfrom": 481, "ivyload": 481, "filenam": [481, 528], "loader": [481, 489, 528, 533], "exec_modul": 481, "ivypathfind": 481, "metapathfind": 481, "find_spec": 481, "fullnam": [481, 505], "contextmanag": 482, "choose_random_backend": 482, "convert_from_numpy_to_target_backend": 482, "variable_id": 482, "numpy_obj": 482, "convert_from_source_backend_to_numpi": 482, "current_backend": [482, 512, 515, 522, 525], "global_backend": 482, "py": [482, 489, 498, 499, 500, 502, 504, 507, 508, 509, 511, 512, 513, 514, 515, 519, 520, 521, 522, 525, 527, 529, 530], "fn_name_from_version_specific_fn_nam": 482, "prevent_access_loc": 482, "previous_backend": [482, 504], "unset": [482, 525], "seen": [482, 491, 492, 507, 510, 512, 519, 521, 525, 527, 528, 545], "op": [482, 522, 525, 533], "eagertensor": [482, 520], "subsequ": [482, 499, 503, 507, 508, 510, 514, 515, 518, 521, 523, 529, 540], "Or": [482, 489, 496, 499, 518, 528], "set_backend_to_specific_vers": 482, "set_jax_backend": 482, "set_numpy_backend": 482, "set_tensorflow_backend": 482, "set_torch_backend": 482, "unset_backend": [482, 504], "with_backend": 482, "sub_backend_handl": 483, "available_sub_backend": 483, "clear_sub_backend": 483, "find_available_sub_backend": 483, "sub_backends_loc": 483, "set_sub_backend": 483, "sub_backend_str": 483, "unset_sub_backend": 483, "dynamic_import": 484, "import_modul": [484, 525], "packag": [484, 489, 495, 499, 507, 512, 513, 519, 533, 539, 541], "ivyerror": [485, 489, 512], "attributeerror": [485, 512, 527], "ivynotimplementedexcept": 485, "notimplementederror": [485, 513], "handle_except": 485, "add_array_spec": 486, "fn_array_spec": 486, "print_stat": 487, "viz": 487, "visual": [487, 499, 505, 519, 533, 539, 541, 544], "snakeviz": 487, "bonu": 487, "cprofil": 487, "cprint": [488, 525], "readm": [489, 505, 533], "websit": [489, 492, 502], "faq": [489, 505], "ai": [489, 537, 541], "fingertip": 489, "prefer": [489, 499, 506, 512, 516, 519, 523, 539], "straight": [489, 519, 521, 527], "awai": [489, 537, 539], "dive": [489, 494, 496, 497, 498, 500, 502, 506, 508, 520, 524, 527, 528, 533, 545], "grow": [489, 522, 539], "guid": [489, 494, 498, 499, 500, 513, 519, 545], "own": [489, 492, 493, 499, 502, 507, 508, 511, 512, 518, 519, 522, 525, 533, 534, 535, 538, 539, 544, 545], "variou": [489, 500, 502, 508, 511, 512, 514, 516, 517, 519, 520, 521, 532, 534, 535, 537, 538, 539, 542, 545], "perk": [489, 503, 506], "essenti": [489, 491, 492, 498, 506, 509, 510, 515, 518, 519, 522, 545], "mainli": [489, 500, 501, 517, 521, 526, 528, 534, 539], "handler": [489, 513, 524, 526, 530, 534], "behind": [489, 500, 501, 514, 521, 524, 526], "scene": [489, 490, 491, 501, 524, 526, 539], "facilit": [489, 516], "agnost": [489, 499, 503, 514, 525, 527, 530, 533, 545, 546], "mse_loss": 489, "jax_ms": 489, "tf_mse": 489, "np_mse": 489, "torch_ms": 489, "mymodel": [489, 528], "linear0": [489, 528, 529], "linear1": [489, 528, 529], "_forward": [489, 511, 525, 528, 529], "put": [489, 498, 505, 521, 533, 545], "someth": [489, 500, 522, 528, 529, 533, 545], "easili": [489, 492, 499, 503, 507, 519, 523, 528, 529, 530, 533, 539, 545, 546], "favorit": 489, "x_in": [489, 528, 529, 530], "loss_fn": [489, 528, 529, 530], "finish": [489, 494, 498, 499, 501], "usabl": [489, 514, 522], "cover": [489, 498, 502, 503, 505, 510, 511, 515, 516, 521, 523, 524], "topic": [489, 516, 527, 539], "mechan": [489, 507, 531, 533], "vision": [489, 495, 531, 535, 545], "robot": [489, 531], "reinforc": [489, 532], "gym": 489, "builder": [489, 496, 531, 533, 534], "trainer": [489, 493, 531, 533, 546], "break": [489, 504, 508, 513, 514, 522, 533], "highli": [489, 523, 539], "flexibl": [489, 506, 514, 517, 522, 523, 539], "everyon": [489, 493, 494, 500, 533], "plan": [489, 532], "interoper": [489, 492, 536, 537, 539, 542], "environ": [489, 494, 495, 500, 532, 539, 541], "easiest": [489, 496, 499], "command": [489, 496, 499, 502, 505, 507, 516], "python3": [489, 495, 499, 500, 512], "pre": [489, 495, 498, 521, 530, 533, 539], "pull": [489, 493, 494, 495, 498, 499, 502, 510, 522, 523, 533], "unifyai": [489, 495, 496, 499, 500, 505], "everyth": [489, 493, 498, 500, 501, 507, 510, 518, 519, 520, 521, 522, 526, 533], "sweat_smil": 489, "git": [489, 495, 496, 497, 499, 500, 502, 505, 507, 521], "clone": [489, 495, 496, 500], "github": [489, 491, 495, 496, 497, 498, 500, 502, 507, 508, 510, 511, 521], "com": [489, 495, 496, 499, 502, 505, 507, 508], "cd": [489, 495, 496, 499, 500], "page": [489, 499, 500, 505, 507, 526, 527, 530, 531], "instruct": [489, 498, 499, 502, 512, 520, 521, 537, 540, 543, 545], "video": [489, 494, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 537], "tutori": [489, 500, 519], "quit": [489, 500, 503, 510, 511, 515, 516, 521, 523, 539, 545], "lot": [489, 492, 493, 507, 508, 516, 521, 533, 538], "jax_fn": 489, "jax_x": 489, "torch_x": 489, "torch_fn": 489, "focus": [489, 522, 532, 537, 538, 539, 545, 546], "architectur": [489, 499, 530, 533, 537, 538, 539, 542, 543, 544], "orient": [489, 532], "contributor": [489, 494, 499, 500, 519, 524, 539], "explain": [489, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 529, 530, 535, 542, 545], "nuanc": [489, 519], "background": [489, 499, 505, 539, 541], "contextualis": 489, "problem": [489, 492, 500, 502, 503, 505, 519, 527, 535, 541, 545], "explos": [489, 490, 492], "why": [489, 490, 492, 500, 505, 518, 527], "adher": [489, 491, 492, 502, 508, 511, 514, 523, 525, 530, 535, 536, 545], "lastli": [489, 503], "paint": [489, 491, 525], "pictur": [489, 491, 498, 525], "role": [489, 500, 519, 526, 540, 542, 546], "plai": [489, 503, 519, 521, 530, 539, 542], "wide": [489, 500, 521, 537, 539], "demo": [489, 495, 532], "showcas": [489, 510, 532], "shorter": [489, 527], "ensp": 489, "eff_encod": 489, "efficientnet_v2": 489, "efficientnetv2b0": 489, "include_top": 489, "imagenet": 489, "input_shap": 489, "torch_eff_encod": 489, "customiz": [489, 505], "script": [489, 495, 499, 500, 507, 510, 525, 533, 539], "deepmind_perceiver_io": 489, "perceiver_backbon": 489, "dummy_input": 489, "backbon": [489, 525, 528], "perceiverioclassifi": 489, "max_pool": 489, "maxpool2d": 489, "1024": 489, "sm_framework": 489, "segmentation_model": 489, "sm": 489, "torch_sm": 489, "metric": [489, 533], "iou_scor": 489, "rax": 489, "torch_rax": 489, "poly1_softmax_loss": 489, "madmom": 489, "madmon": 489, "torch_madmom": 489, "freq": 489, "audio": 489, "hz2midi": 489, "todo": [489, 498, 508, 519, 521], "output_dens": 489, "maxpooling1d": 489, "pool_siz": 489, "tf_kornia": 489, "sharp": 489, "tf_rax": 489, "tf_madmom": 489, "hk_eff_encod": 489, "dummy_x": 489, "jax_sm": 489, "jax_madmom": 489, "np_kornia": 489, "np_sm": 489, "np_rax": 489, "yourself": [489, 498, 500, 519, 521, 523, 532], "anyon": [489, 492, 494, 500, 507, 533, 545], "classif": [489, 539], "ivynet": 489, "h_w": 489, "extractor": 489, "image_height": 489, "image_width": 489, "favourit": [489, 499], "pure": [489, 511, 514, 519, 523, 527, 530, 533, 539, 545, 546], "generate_batch": 489, "dataset_s": 489, "y_train": 489, "num_correct": 489, "y_pred": 489, "model_nam": 489, "hyperparam": 489, "num_epoch": 489, "epoch": 489, "epoch_loss": 489, "running_loss": 489, "training_accuraci": 489, "train_loss": 489, "train_correct": 489, "train_loop": 489, "tqdm": 489, "xbatch": 489, "ybatch": 489, "ybatch_encod": 489, "loss_prob": 489, "batch_loss": 489, "set_descript": 489, "set_postfix": 489, "accuracy_percentag": 489, "naverag": 489, "6f": 489, "plot": [489, 539], "_train_summari": 489, "csv": 489, "writer": 489, "writerow": 489, "prepar": [489, 507], "folder": [489, 495, 499, 500, 502, 505, 507, 515, 519, 521, 522], "believ": [489, 492, 500], "bug": [489, 500, 505, 519, 521, 522], "feedback": [489, 507], "welcom": [489, 494, 499, 500], "appreci": 489, "info": [489, 511], "amaz": 489, "acceler": [489, 519, 537, 541, 542, 543, 544], "journei": [489, 494], "achiev": [489, 507, 508, 513, 516, 521, 523, 528, 530, 534], "ambiti": 489, "goal": [489, 492, 498, 539, 545], "season": 489, "server": [489, 499, 500, 505, 539], "perfect": [489, 532], "ask": [489, 493, 498, 499, 510, 525, 527, 533], "idea": [489, 493, 495, 519, 522, 526, 532, 538], "fellow": 489, "team": [489, 494, 498, 499, 500, 519, 541], "twitter": 489, "sneak": 489, "peek": 489, "certainli": [489, 492, 545], "great": [489, 492, 493, 500, 521, 525, 527, 545], "stai": [489, 507], "credit": 489, "accompani": 489, "paper": [489, 493], "continu": [489, 492, 493, 497, 498, 499, 501, 502, 513, 518, 521, 533, 539], "articl": 489, "lenton2021ivi": 489, "titl": [489, 498, 500, 505, 519], "templat": [489, 505, 511, 521], "inter": [489, 520], "author": [489, 498, 500, 537, 541], "lenton": 489, "daniel": 489, "pardo": 489, "fabio": 489, "falck": 489, "fabian": 489, "jame": 489, "stephen": 489, "clark": 489, "ronald": 489, "journal": 489, "arxiv": 489, "preprint": 489, "2102": 489, "02886": 489, "year": [489, 491, 493, 502, 533, 539], "huge": [490, 492, 507, 528, 539, 545], "collabor": [490, 491, 492], "consortium": [490, 492], "grown": 491, "consider": [491, 510, 514, 523, 536, 537], "recent": [491, 492, 499, 500, 521], "especi": [491, 499, 523, 539], "rapidli": 491, "repo": [491, 495, 497, 500, 502, 505, 507, 508, 519, 520, 521, 522], "wonder": [491, 493, 527], "thing": [491, 492, 493, 497, 498, 499, 500, 504, 513, 519, 521, 523, 527, 528, 539], "evolv": [491, 539], "shareabl": 491, "hinder": [491, 514], "outdat": 491, "matter": [491, 510], "month": [491, 499], "rigor": [491, 521], "newest": 491, "softwar": [491, 492, 499, 500, 537, 542, 543, 544], "rapid": [491, 492, 499, 539], "prototyp": [491, 539], "vital": [491, 530], "signific": [491, 492, 533, 539], "bottleneck": 491, "quickli": [491, 493, 499, 500, 507, 528, 529, 539, 546], "obsolet": [491, 493], "constantli": [491, 522, 523], "invent": 491, "wheel": 491, "simultan": [491, 493], "modern": [491, 492, 517, 544], "scalabl": [491, 525, 544, 545], "languag": [491, 493, 519, 523, 525, 534, 537, 540, 542, 543, 544, 545], "front": [491, 519, 524, 525, 528, 537, 539], "runner": 491, "littl": [491, 527, 541], "principl": [491, 537, 539, 542], "almost": [491, 497, 506, 520, 526, 528], "syntax": [491, 492, 508, 513, 539], "unsurprisingli": [491, 510], "fundament": [491, 507, 519, 523, 525, 539], "2006": 491, "cut": [491, 545], "cloth": 491, "central": [492, 498, 523, 545], "forgiven": 492, "eyebrow": 492, "somehow": 492, "industri": [492, 539, 541], "wors": 492, "funni": 492, "comic": 492, "strip": 492, "easi": [492, 499, 500, 503, 506, 515, 517, 520, 521, 523, 537, 539, 545, 546], "unlik": [492, 502, 506, 507, 510, 518, 544, 546], "charger": 492, "charact": [492, 513, 519], "instant": 492, "mandat": [492, 508, 518, 521, 522], "adopt": [492, 500, 503, 514, 523, 538, 539, 544], "despit": [492, 506, 508, 509, 520, 523, 525, 536, 539], "bring": [492, 502, 521, 525, 526, 534], "benefit": [492, 493, 499, 503, 506, 515, 518, 523, 527, 528, 533, 537, 541, 544], "unrel": [492, 500], "contrari": 492, "bumpi": 492, "road": 492, "allud": [492, 528], "technologi": [492, 537, 541], "success": 492, "thank": [492, 528], "bio": [492, 499], "pcie": 492, "motherboard": 492, "raid": 492, "storag": [492, 528], "virtual": [492, 495, 500, 519, 542, 543], "bluetooth": 492, "wireless": 492, "exchang": [492, 497, 535, 537], "btx": 492, "sata": 492, "host": [492, 496, 507, 533, 544], "tcp": 492, "ip": 492, "commun": [492, 494, 498, 499, 500, 533, 538, 539, 541], "smtp": 492, "send": [492, 544], "gmail": [492, 507], "outlook": 492, "pop": [492, 499], "email": [492, 507], "live": [492, 493, 508, 535, 537], "did": [492, 498, 505, 530, 545], "aris": [492, 508, 533], "substanti": [492, 500, 503, 508, 521, 539], "innov": 492, "growth": [492, 542], "necess": 492, "parti": [492, 505, 533, 538, 539, 545], "engag": [492, 494, 500], "regard": [492, 497, 506, 519, 520, 523], "2015": [492, 539], "alongsid": 492, "frame": [492, 532, 539], "matur": [492, 533, 539], "preced": [492, 529], "aros": 492, "effort": [492, 494, 533, 535, 539, 545], "stage": [492, 494, 500, 501, 505, 513, 521, 539], "mission": [492, 541], "At": [492, 498, 499, 502, 519, 521, 522, 539], "ourselv": [492, 545], "quansight": [492, 545], "compani": [492, 535], "organ": [492, 503, 506, 515, 519, 522, 534], "panda": 492, "scipi": [492, 541, 546], "conda": [492, 499, 541], "apach": [492, 541, 545], "mxnet": [492, 546], "onnx": [492, 537, 545], "scikit": 492, "jupyt": [492, 541], "aw": 492, "cupi": [492, 539, 546], "net": [492, 493, 525, 530], "sympi": 492, "modin": 492, "spyder": 492, "member": [492, 498, 500, 519], "googl": [492, 507], "octoml": [492, 545], "sponsor": 492, "lg": 492, "electron": 492, "shaw": 492, "intel": [492, 537, 544], "promis": 492, "pursuit": 492, "unif": [492, 494, 527, 535, 545], "clearli": [492, 498, 500, 510, 520, 521, 543], "thought": [492, 499, 500, 514, 537], "care": [492, 500, 519, 523, 530], "gone": [492, 524], "excit": [492, 494, 501], "complianc": 492, "hope": [492, 533, 545], "suit": [492, 499, 501, 502, 507, 521, 528, 532, 534, 539, 545], "motiv": [492, 527], "convinc": 492, "celebr": 492, "encourag": [492, 532, 533], "foundat": [492, 542], "happi": [493, 499, 533], "abund": 493, "better": [493, 495, 501, 519, 520, 522, 523, 524, 527, 528, 529, 542], "streamlin": [493, 542], "workflow": [493, 498, 500, 504, 508, 517, 519, 528, 531, 534, 538, 545, 546], "week": [493, 500], "sai": [493, 499, 516, 527], "deepmind": 493, "releas": [493, 498, 499, 500, 508, 519, 522, 523, 533, 539, 545], "awesom": 493, "love": 493, "perceiverio": 493, "slew": 493, "rush": 493, "inevit": [493, 540], "often": [493, 497, 502, 512, 513, 514, 515, 519, 521, 533, 540, 543, 546], "erron": 493, "poor": 493, "repositori": [493, 495, 496, 499, 500, 501, 502, 513], "confus": [493, 505, 508, 512, 518, 523, 534], "hour": [493, 507], "spent": 493, "spin": 493, "discuss": [493, 500, 505, 508, 509, 518, 519, 521, 523, 526, 527, 528, 533, 535, 540], "sake": 493, "few": [493, 497, 498, 500, 506, 508, 509, 514, 515, 517, 518, 521, 523, 525, 526, 527, 528, 529, 531, 539, 541], "automat": [493, 498, 499, 500, 501, 505, 506, 507, 508, 513, 515, 518, 521, 523, 524, 526, 529, 530, 534, 539, 542, 546], "wouldn": [493, 519], "nice": [493, 521, 539], "frantic": 493, "lucid": 493, "honk": 493, "understand": [493, 495, 497, 498, 499, 500, 501, 502, 505, 510, 511, 514, 520, 523, 524, 535, 545], "hasn": 493, "spend": [493, 539], "torchvis": 493, "sonnet": 493, "statu": [493, 498, 507], "quo": 493, "dopamin": 493, "ignit": 493, "catalyst": 493, "lightn": 493, "fastai": 493, "trax": [493, 530], "objax": [493, 530], "offer": [493, 519, 529, 539, 545, 546], "strongli": [494, 499, 519, 545, 546], "skill": [494, 541], "veteran": 494, "beginn": [494, 539], "aspect": [494, 517, 528, 539], "board": [494, 505], "basic": [494, 498, 510, 521], "local": [494, 495, 499, 502, 505, 515, 520, 521], "resourc": [494, 498, 507], "slightli": [495, 506, 519, 525, 529], "setup": [495, 499, 500, 505, 507], "mech": [495, 496], "grasp": [495, 519], "dir": [495, 528], "mutual": [495, 506, 515], "venv": [495, 512], "ivy_dev": [495, 499, 500], "bat": [495, 499, 500], "mac": [495, 499, 500], "linux": [495, 499, 500, 542, 544], "instal": [495, 496, 499, 500, 504, 505, 513, 532], "edit": [495, 498, 499, 500], "pip": [495, 499, 532], "reflect": [495, 500, 503, 521], "immedi": [495, 499, 523], "ivy_robot": [495, 532], "docker": [495, 497], "desktop": [495, 499], "my": [495, 507, 522], "mount": [495, 496, 500], "rm": [495, 496, 500], "pwd": [495, 496], "pycharm": 495, "vscode": [495, 499], "devcontain": [495, 499], "remot": [495, 499, 502], "codespac": 495, "good": [495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 525, 526, 529], "commit": [495, 498, 502, 510, 521], "make_doc": 496, "sh": [496, 499, 500, 502, 507], "ssh": [496, 507], "Then": [496, 498, 499, 500, 505, 507, 516, 518, 522, 533], "make_docs_without_dock": [496, 505], "sphinx": [496, 505], "resours": 497, "climb": 497, "steep": 497, "curv": 497, "behaviour": [497, 498, 500, 501, 502, 503, 506, 508, 511, 512, 514, 518, 519, 521, 522, 527], "realpython": 497, "pyn": 497, "platform": [497, 499, 537, 541, 543], "pilot": 497, "stuck": [497, 498], "spell": 497, "though": [497, 498, 500, 508, 511, 515, 518, 519, 523, 528, 533], "sound": [497, 507, 524], "peopl": [497, 499, 500, 501, 539, 541], "action": [497, 507, 510, 521], "frequent": [498, 500, 539], "outlin": [498, 499, 500, 501, 506, 508, 511, 515, 518, 519, 521], "broad": [498, 541], "individu": [498, 500, 502, 508, 515, 518, 519, 539, 542, 545, 546], "explan": [498, 500, 506, 511, 514, 519, 527], "focu": [498, 517, 537, 538, 541, 546], "pypi": [498, 499, 533], "familiar": [498, 499], "bind": [498, 506, 517, 538, 539], "sure": [498, 499, 500, 502, 507, 519, 520, 521, 523], "aforement": 498, "categori": [498, 502, 503, 506, 508, 519, 522, 524], "arraywithelementwis": [498, 503, 527], "containerwithmanipul": 498, "thorough": [498, 511, 514, 521], "comment": [498, 499, 500, 502, 505, 508, 513, 519], "add_reformatting_checklist_": 498, "category_nam": [498, 508, 509, 511, 514, 515], "pr": [498, 500, 502, 519, 520, 521], "autom": [498, 507, 521, 534, 541], "bot": 498, "markdown": [498, 505], "text": [498, 500, 505, 510, 511], "patient": [498, 499], "symbol": [498, 499, 539, 540], "emoji": 498, "legend": 498, "review": [498, 500, 507, 510, 519, 522], "checkbox": [498, 499], "proce": [498, 499], "elabor": 498, "struggl": 498, "assigne": 498, "status": 498, "refrain": 498, "subsect": [498, 500, 502, 507], "verifi": [498, 508, 509, 519, 521, 522], "func_nam": [498, 510, 511, 515, 519], "suggest": [498, 499, 500, 505, 508, 517, 519, 521, 522], "assess": [498, 523], "merg": [498, 500, 502, 507, 519, 539], "composition": [498, 518], "pend": 498, "helpfulli": [498, 523, 537], "problemat": [498, 499], "unimpl": 498, "issue_link": 498, "alias_nam": 498, "push": [498, 500, 502, 513, 520, 521, 545], "liner": 498, "meanwhil": [498, 507], "reselect": 498, "placement": 498, "categoris": [498, 502, 519], "faithfulli": 498, "creation_routin": [498, 520], "indexing_routin": 498, "ma": 498, "manipulation_routin": 498, "mathematical_funct": [498, 519], "sorting_searching_count": 498, "ufunc": [498, 519], "matrix_and_vector_product": 498, "matrix_eigenvalu": 498, "norms_and_other_numb": 498, "solving_equations_and_inverting_matric": 498, "seem": [498, 499, 523, 529, 530, 533, 539], "gleam": 498, "uncom": 498, "test_numpy_inn": 498, "mirror": [498, 539], "test_frontend": [498, 507, 520], "unsur": [498, 521], "explor": [498, 499, 500, 508, 523, 526, 530, 532, 539, 542], "confirm": 498, "backend_nam": [498, 504, 508, 509, 511, 514, 515, 516], "relevant_submodul": 498, "sometim": [498, 499, 500, 502, 508, 515, 519, 521, 522, 523], "recreat": [498, 502], "defer": [498, 503, 506, 508, 509, 515, 516, 518, 519, 521, 545], "clearer": [498, 512, 520, 528], "button": [499, 500], "your_usernam": 499, "gh": 499, "your_fold": 499, "upstream": [499, 500, 502, 517], "sync": [499, 502], "cours": [499, 500, 502, 503, 510, 518, 519, 522, 523, 528, 533, 544, 545], "whatev": [499, 506, 533], "elig": 499, "student": 499, "licenc": 499, "remind": 499, "licens": [499, 542], "expir": 499, "profession": 499, "trial": 499, "jetbrain": 499, "bui": [499, 545], "paid": 499, "pace": 499, "person": [499, 500], "experi": [499, 512, 521, 526, 528, 533], "abil": [499, 523, 526, 533, 539], "perhap": [499, 527, 528, 529, 533, 545], "click": [499, 500, 507, 511, 526], "icon": [499, 500], "panel": 499, "palett": 499, "ctrl": [499, 500], "On": [499, 508, 519, 521, 523, 526, 530], "optional_ubuntu": 499, "txt": [499, 502, 505, 522], "m1": 499, "optional_m1_1": 499, "optional_m1_2": 499, "builtin": [499, 527, 529], "cmd": 499, "virtualenv": 499, "tick": [499, 500, 507], "array_api_test": [499, 500, 502], "test_array_api": [499, 500, 502, 521], "mitig": [499, 545], "conflict": [499, 500, 507, 519, 528], "wsl": 499, "powershel": 499, "admin": 499, "visit": [499, 500, 507], "menu": 499, "tag": [499, 500], "introspect": 499, "usr": 499, "debug": [499, 500, 506, 507, 517, 521, 523, 528, 539], "dialog": 499, "caus": [499, 500, 502, 504, 505, 506, 507, 508, 510, 518, 520, 521, 533], "earlier": [499, 500], "virtualis": 499, "dropdown": 499, "dockerfil": 499, "navig": [499, 500, 501], "tab": [499, 507, 528], "sudo": 499, "apt": 499, "ca": 499, "certif": 499, "curl": 499, "gnupg": 499, "lsb": 499, "mkdir": [499, 507], "keyr": 499, "fssl": 499, "gpg": 499, "dearmor": 499, "echo": [499, 507], "deb": 499, "arch": 499, "dpkg": 499, "lsb_releas": 499, "tee": 499, "null": 499, "ce": 499, "cli": 499, "containerd": 499, "io": [499, 507], "plugin": 499, "systemctl": 499, "permiss": [499, 507], "press": [499, 500, 528], "ok": 499, "successful": 499, "4a": 499, "socket": 499, "chmod": [499, 507], "rwx": 499, "sock": 499, "pid": 499, "coupl": [499, 503, 527, 529, 539], "test_ab": [499, 521], "editor": 499, "pytest": [499, 500, 502, 507, 521], "keyboard": 499, "shortcut": 499, "rest": [499, 505, 507, 530, 541], "displai": [499, 505, 506, 512, 521, 528], "screenshot": 499, "test_elementwis": 499, "bar": [499, 505], "shell": [499, 500], "run_tests_cli": [499, 502], "run_ivy_core_test": 499, "run_ivy_nn_test": 499, "run_ivy_stateful_test": 499, "run_test": [499, 507], "test_depend": 499, "test_ivy_cor": 499, "test_ivy_nn": 499, "test_ivy_st": 499, "test_": [499, 520], "test_cor": [499, 500, 520], "wish": [499, 519], "ivy_cor": 499, "ivy_nn": 499, "ivy_st": 499, "simplest": [499, 510, 521, 523], "header": [499, 500], "advanc": [499, 538], "arrow": 499, "test_stat": 499, "test_submodule_nam": 499, "test_function_nam": 499, "debugg": 499, "studio": 499, "afterward": [499, 528], "restart": 499, "overlap": [499, 507, 522, 523, 540], "test_file_path": 499, "test_fn_nam": 499, "engin": [499, 539, 541, 542], "comma": 499, "postcreatecommand": 499, "bash": [499, 500, 502], "post_create_command": 499, "poststartcommand": 499, "safe": [499, 519], "containerworkspacefold": 499, "reopen": 499, "test_fle_path": 499, "slash": 499, "headach": 499, "arm": [499, 500], "vm": [499, 507], "azur": 499, "cloud": [499, 507, 532, 541], "longer": [499, 508, 516, 518, 521, 539], "worri": 499, "usual": [499, 502, 519, 521, 523], "theme": [499, 505], "slow": 499, "ipad": 499, "browser": [499, 505], "cool": [499, 522], "quota": 499, "requisit": 499, "pane": [499, 500, 507], "readi": 499, "master": [499, 500, 502, 507, 522, 539], "box": 499, "upto": [499, 500], "minut": [499, 507], "launch": 499, "approach": [499, 500, 503, 506, 508, 515, 516, 519, 521, 523, 527, 528, 533, 536, 543, 545], "colour": 499, "chanc": 499, "troubleshoot": 499, "ever": [499, 518], "flask": 499, "toolbar": [499, 500], "_array_modul": [499, 502], "refresh": 499, "conftest": 499, "nutshel": [499, 514], "hook": 499, "lint": 499, "attempt": [499, 513, 533], "properli": [499, 501, 512, 519, 521], "quick": [500, 501, 520, 529], "tendenc": 500, "land": 500, "world": [500, 541], "come": [500, 503, 507, 519, 522, 523, 529, 531, 534, 539], "fly": [500, 539], "hard": [500, 527, 539], "respons": [500, 507, 508], "internship": 500, "serv": [500, 503, 506, 514, 515, 519, 521, 523, 524, 534, 537], "suspect": 500, "act": [500, 510, 533, 546], "iii": 500, "reformat": [500, 513], "issue_numb": 500, "No": [500, 507, 539], "clean": [500, 522, 523, 525, 526, 528], "rememb": 500, "respond": 500, "dai": 500, "freed": 500, "basi": [500, 502, 528], "situat": [500, 507, 530], "upon": [500, 510, 518, 521, 523, 533, 538, 539], "unabl": [500, 523], "obvious": [500, 507], "qualiti": 500, "hypothet": 500, "frustrat": 500, "busi": 500, "fine": [500, 508, 510, 519, 527, 530, 545], "inact": 500, "me": 500, "unfairli": 500, "investig": 500, "incomplet": 500, "wherea": [500, 503, 506, 508, 509, 510, 514, 515, 521, 522, 530, 536], "invit": 500, "roadmap": [500, 507], "extend": [500, 504, 505, 511, 512, 514, 519, 522, 533, 536, 539, 545], "ideal": [500, 507, 518, 519, 523, 528], "easier": [500, 502, 503, 508, 519, 520, 522, 534, 539, 541], "forth": 500, "rare": [500, 509, 533, 544], "scenario": [500, 517], "someon": [500, 533], "unfortun": [500, 505], "practic": [500, 507, 519, 542], "separ": [500, 503, 506, 507, 521, 525, 527, 528, 540, 544], "checkout": [500, 502, 521], "name_of_your_branch": 500, "date": [500, 522], "complic": [500, 520, 525], "merge_with_upstream": 500, "abort": 500, "tediou": [500, 510, 523], "stash": 500, "reinstat": 500, "fetch": [500, 502, 507], "uncommit": 500, "unstag": 500, "untrack": 500, "comprehens": [500, 502], "atlassian": 500, "wrote": 500, "blame": 500, "revis": 500, "eg": 500, "past": [500, 502, 520, 521, 539], "grep": 500, "commit_id": 500, "handi": 500, "histori": 500, "toggl": 500, "highlight": [500, 507, 510, 519], "whenev": [500, 507, 508, 512, 516, 518, 521, 528], "think": [500, 507, 510, 540], "approv": 500, "hash": [500, 528], "cancel": 500, "speedup": 500, "unavail": 500, "tickbox": 500, "span": [500, 523, 537, 545], "intent": [500, 518], "discourag": 500, "philosophi": 500, "valuabl": 500, "infrequ": 500, "earli": [500, 539], "wast": [500, 507], "spot": [500, 510, 515], "mistak": [500, 513], "propos": [500, 519, 523, 539], "mountain": 500, "advoc": [500, 533], "actual": [500, 501, 507, 515, 518, 519, 520, 521, 523, 524, 529, 533, 540, 545], "aim": [500, 502, 519, 521, 524, 537, 539, 542], "session": [500, 539], "beauti": 500, "concern": [500, 501, 506, 510, 518, 523, 524, 545], "undo": 500, "stress": 500, "nifti": 500, "reassur": 500, "isol": [500, 540, 545], "fact": [500, 502, 507, 519, 521, 525, 528], "local_path_to_ivi": 500, "subfold": [500, 520, 521, 522], "dep": 500, "fresh": 500, "arsen": 500, "declar": 500, "exec": 500, "rf": 500, "cp": 500, "ivy_contain": 500, "test_imag": 500, "test_random_crop": 500, "test_creation_funct": 500, "test_arang": 500, "cursor": 500, "alt": 500, "blog": 500, "breakpoint": 500, "gutter": 500, "caret": 500, "f8": 500, "f9": 500, "Into": 500, "f7": 500, "smart": 500, "interest": 500, "fragment": [500, 535, 537, 541], "pychram": 500, "dummi": 500, "wherein": [500, 516, 521], "failur": [500, 507, 520, 521], "who": [501, 512, 524, 533, 539, 541], "weed": [501, 524], "tour": 501, "primari": [501, 504, 508, 516, 518, 519, 521, 523, 533, 534], "superset": [501, 518, 519, 533], "goe": [501, 518, 523], "runtim": [501, 515, 521, 523, 539], "borrow": 501, "conjunct": 502, "establish": [502, 541], "2020": [502, 539], "popular": [502, 539], "sens": [502, 510, 519, 527], "unconnect": 502, "decis": [502, 506, 508, 519, 523, 525, 527, 539], "initialis": [502, 519, 521], "everytim": [502, 508], "thoroughli": 502, "ci": [502, 508, 513, 520, 521, 533], "test_linalg": [502, 520], "test_set_funct": 502, "test_signatur": 502, "excess": [502, 504, 510], "array_modul": 502, "vv": 502, "test_manipulation_funct": 502, "test_concat": [502, 521], "nb": 502, "liber": 502, "bodi": [502, 521], "fortun": 502, "falsifi": [502, 521], "______________________": 502, "test_remaind": 502, "_______________________": 502, "test_operators_and_elementwise_funct": 502, "1264": 502, "1277": 502, "binary_param_assert_against_refimpl": 502, "ctx": 502, "mod": 502, "620": 502, "binary_assert_against_refimpl": 502, "324": 502, "scalar_o": 502, "17304064": 502, "binaryparamcontext": 502, "reproduce_failur": [502, 521], "axic42baaowcnp": 502, "rumwmabaear0": 502, "parametr": [502, 521, 539], "make_binary_param": 502, "dh": 502, "numeric_dtyp": 502, "left_strat": 502, "left_sym": 502, "right_strat": 502, "right_sym": 502, "right_is_scalar": 502, "xp": 502, "binary_param_assert_dtyp": 502, "binary_param_assert_shap": 502, "led": [502, 541], "unexpectedli": 502, "discrep": [502, 520], "varieti": [502, 507, 508, 509, 521, 535, 537, 541, 542, 545, 546], "test_asarray_arrai": 502, "test_floor_divid": 502, "health": 502, "test_iop": 502, "__imod__": 502, "isequ": 502, "test_matrix_norm": 502, "alter": 502, "tweak": 502, "array_api_methods_to_test": 502, "test_trac": 502, "latter": [502, 504, 508, 511, 519], "scheme": [502, 529, 539], "test_special_cas": 502, "__ipow__": 502, "is_integ": 502, "revisit": [502, 514], "_data": [503, 518, 519, 527], "organiz": [503, 506, 519], "inherit": [503, 506, 512, 527, 533, 534], "bear": [503, 506, 508, 519], "necessarili": [503, 506], "underpin": [503, 506, 525], "programmat": [503, 506, 540], "backup": [503, 505, 506], "accident": [503, 506, 519], "readabl": [503, 506, 512, 514, 521, 522, 527, 528], "absent": [503, 506], "auto": [503, 505, 506, 528], "__mul__": [503, 506, 510, 514, 523, 527], "throw": [503, 508, 512, 527, 539], "imposs": 503, "inputs_to_native_arrai": [503, 516], "outputs_to_ivy_arrai": [503, 508, 509, 514, 516], "firstli": [503, 508, 510, 511, 512, 515, 516, 518, 523, 528, 535, 545], "anywai": [503, 516, 519], "secondli": [503, 508], "permit": [503, 514, 519, 521, 523], "standalon": [503, 521, 534, 535, 540, 545, 546], "__ivy_array_function__": 503, "inspir": [503, 532], "__torch_function__": 503, "myarrai": 503, "handled_funct": 503, "notimpl": [503, 513], "four": [503, 508, 510, 514, 515, 521, 523, 528], "suppli": 503, "enough": [503, 507, 521, 527, 528, 529], "ivy_funct": 503, "my_ab": 503, "my_arrai": 503, "Of": [503, 518, 519, 528, 544, 545], "implicit_backend": [504, 525], "__dict__": [504, 518, 525], "ivy_original_dict": [504, 525], "get_backend": [504, 515], "opt": [504, 508, 518, 521, 522, 523], "fallback": 504, "backend_handl": [504, 525], "requires_grad": 504, "memory_format": 504, "preserve_format": 504, "weren": 504, "vast": [504, 508, 539], "minor": [504, 523, 533], "fn_name_v_1p12_and_abov": 504, "fn_name_v_1p01_to_1p1": 504, "heavili": [505, 516, 519, 533], "characterist": 505, "conf": 505, "cleanup": 505, "disabl": 505, "procedur": [505, 507, 510], "segment": [505, 510], "toctre": 505, "maxdepth": 505, "related_work": 505, "deep_div": 505, "glossari": 505, "autosummari": 505, "top_level_toc": 505, "restructuredtext": 505, "render": [505, 511], "inlin": 505, "discov": [505, 508], "ivy_toctree_caption_map": 505, "stub": 505, "inturn": 505, "forc": [505, 507], "demonstr": [505, 508, 510, 512, 527], "underlin": 505, "remove_before_her": 505, "top_level_modul": 505, "endfor": 505, "\u2139": 505, "foo": 505, "candid": 505, "postprocess": 505, "linker": 505, "discussion_channel_map": 505, "1000043690254946374": 505, "1028298816526499912": 505, "1000043749088436315": 505, "1028298847950225519": 505, "seri": [505, 519, 521, 539, 541], "discussion_paragraph": 505, "discord_link": 505, "channel_link": 505, "forum_link": 505, "gg": 505, "zvqdvbznqj": 505, "799879767196958751": 505, "channel_id": 505, "forum_id": 505, "paragraph": 505, "autoskippablemethod": 505, "skippable_method_attribut": 505, "__qualname__": 505, "five": [506, 528], "recap": [506, 510, 529], "multi_map": 506, "containerwithelementwis": 506, "__repr__": 506, "__contains__": 506, "__getstate__": 506, "__setstate__": 506, "unpickl": 506, "num_dim": [506, 530], "__len__": 506, "enforc": [506, 527], "extern": [506, 514, 519, 521, 522], "c1": 506, "lefthand": 506, "righthand": 506, "handle_nest": [506, 515, 516, 525], "addition": [506, 518, 519, 545], "counterpart": [506, 516], "absenc": [506, 514, 539], "implicitli": [506, 517, 521, 525], "log_pr": [506, 515, 518], "intuit": [506, 521, 528, 529, 535], "chronolog": 506, "concurr": [506, 507, 515, 539], "had": [506, 507, 518, 525, 539, 540], "implic": 506, "whatsoev": [506, 515, 534, 545], "implicit": [506, 511, 519, 521, 525, 539], "eager": [506, 533, 539], "children": 506, "shallowest": 506, "deepest": 506, "regularli": 507, "rollback": 507, "incorpor": [507, 528, 539], "fold": 507, "techniqu": 507, "triplet": 507, "test_torch": [507, 520], "test_tensor": [507, 520], "test_torch_instance_arctan_": 507, "7284": 507, "daili": 507, "shoot": 507, "impact": [507, 521, 529, 541], "_reduce_loss": 507, "test_nn": 507, "test_loss": 507, "test_binary_cross_entropy_with_logit": 507, "test_cross_entropi": 507, "test_binary_cross_entropi": 507, "test_sparse_cross_entropi": 507, "test_loss_funct": 507, "test_torch_binary_cross_entropi": 507, "test_torch_cross_entropi": 507, "torch_binary_cross_entropi": 507, "torch_cross_entropi": 507, "underneath": [507, 537], "magic": 507, "readthedoc": 507, "affect": [507, 519], "pedagog": 507, "f1": 507, "fm": 507, "yeah": 507, "cyclic": 507, "intellig": [507, 521, 523, 541], "tests_fil": 507, "file_nam": [507, 521, 522], "del": 507, "tests_lin": 507, "elif": [507, 512, 518, 519, 520], "correspondingli": 507, "tests_to_run": 507, "determine_tests_lin": 507, "mongodb": 507, "databas": [507, 521], "secret": 507, "db": 507, "ssh_deploy_kei": 507, "suffic": [507, 516, 521], "massiv": 507, "constraint": [507, 508, 517], "mb": 507, "yml": 507, "felicit": 507, "clone_map": 507, "home": 507, "deploy_kei": 507, "user_email": 507, "rashul": 507, "chutani": 507, "user_nam": 507, "target_branch": 507, "github_serv": 507, "deploy_key_fil": 507, "ssh_known_hosts_fil": 507, "known_host": 507, "keyscan": 507, "export": [507, 538, 545], "git_ssh_command": 507, "userknownhostsfil": 507, "methodologi": 507, "master1": 507, "restructur": 507, "index_map": 507, "test_map": 507, "routin": [507, 518, 519, 523, 533, 539], "incorrect": 507, "snowbal": 507, "irrelev": [507, 508, 510], "recalibr": 507, "workflow_dispatch": 507, "schedul": [507, 533, 539, 546], "cron": 507, "saturdai": 507, "night": 507, "pm": 507, "gut": 507, "lesser": [507, 512], "lol": 507, "cater": 507, "master2": 507, "master32": 507, "synchron": 507, "runner2": 507, "corrupt": 507, "discard": 507, "decoupl": [507, 529], "150": 507, "cycl": [507, 521], "rashulchutani": 507, "yellow": 507, "queu": 507, "redirect": 507, "book": 507, "ran": 507, "badg": 507, "clickabl": 507, "all_dtyp": 508, "all_numeric_dtyp": 508, "all_int_dtyp": 508, "all_float_dtyp": 508, "replic": [508, 510, 517, 518, 519, 523], "thirdli": 508, "native_float32": 508, "importantli": [508, 527, 530, 532], "conveni": [508, 509, 514, 520, 526, 528, 529, 534, 545], "arguabl": [508, 509, 519], "jaxarrai": [508, 509, 514, 518, 522, 525], "_handle_0_dim_output": [508, 518], "experiment": [508, 519, 522, 525, 539], "subtli": [508, 518], "promote_types_frontend_nam": 508, "promote_types_of_frontend_name_input": 508, "frontend_nam": 508, "accuraci": 508, "upcast": 508, "nearli": [508, 514, 516, 539], "downcast": 508, "footprint": 508, "concret": 508, "compound": 508, "infer_dtyp": [508, 509, 514, 516], "settabl": [508, 509], "handle_out_argu": [508, 509, 514, 516, 518, 525], "infer_devic": [508, 509, 514, 516], "deleg": [508, 546], "shape_to_tupl": 508, "with_supported_dtyp": 508, "with_unsupported_dtyp": [508, 519], "unment": 508, "backend_vers": 508, "_cast_for_unary_op": 508, "target_typ": 508, "unsupported_dtyp": 508, "former": [508, 511, 519], "lack": [508, 518, 539, 546], "patch": [508, 539], "subtl": [508, 522, 545], "offici": [508, 525], "inconsist": [508, 512, 517], "84530": 508, "unwarr": 508, "risk": [508, 545], "needlessli": 508, "bloat": 508, "undergo": [508, 533], "supported_dtyp": 508, "unsupported_devic": 508, "supported_devic": 508, "slight": [508, 521, 529], "downsid": 508, "inflat": 508, "dual": 509, "categor": [509, 515, 519], "eight": [510, 524], "static_func_nam": 510, "op_nam": 510, "__r": 510, "combinatori": 510, "variat": [510, 519, 521], "unus": [510, 513, 518], "okai": [510, 523, 525], "meant": [510, 518], "spec": [510, 511], "my_func": [510, 522], "some_flag": 510, "another_flag": 510, "jointli": 510, "5574077": 510, "1850398": 510, "5463025": 510, "8422884": 510, "91601413": 510, "9647598": 510, "3738229": 510, "1597457": 510, "0963247": 510, "9955841": 510, "3278579": 510, "pars": [510, 533], "asid": [510, 532], "14254655": 510, "1578213": 510, "380515": 510, "trivial": [510, 518], "exlud": 510, "failing_fn_nam": 510, "onlin": [510, 511], "minutest": 510, "suffici": [510, 519, 521], "fault": [510, 539], "contrast": [511, 514, 519, 545], "instanti": 511, "array_api": 511, "preview": 511, "needless": [511, 520], "renam": [511, 519], "judgment": 511, "operator_nam": 511, "succinct": 511, "contstructor": 511, "docst": 511, "_default": 512, "_delimit": 512, "comfort": 512, "encount": [512, 521], "julia": [512, 542, 545], "new_fn": [512, 519], "new_arg": 512, "new_kwarg": 512, "186": 512, "lib": 512, "site": [512, 540], "_src": 512, "219": 512, "_reduce_al": 512, "_ensure_optional_ax": 512, "213": [512, 521], "_reduct": 512, "lax": [512, 519, 520, 523, 530, 533], "preproc": 512, "_cast_to_bool": 512, "pos_dim": 512, "_reduction_dim": 512, "113": 512, "canon_axi": 512, "_canonicalize_axis_allow_nam": 512, "genexpr": 512, "106": 512, "maybe_named_axi": 512, "_canonicalize_axi": 512, "stdin": 512, "295": 512, "262": 512, "ivy_arg": 512, "ivy_kwarg": 512, "354": 512, "truth_value_test": 512, "121": 512, "switch": [512, 515, 516, 546], "visibl": 512, "unwieldi": 512, "awar": 512, "recov": [512, 519], "squash": 512, "hid": 512, "cleaner": [512, 528], "caught": 512, "functool": [512, 519, 527], "_print_traceback_histori": 512, "error_stack": 512, "axiserror": 512, "got": 512, "polici": [512, 521, 532], "moreov": 512, "met": 512, "flake8": 513, "annot": [513, 514], "star": 513, "unsuccess": 513, "exceed": 513, "black": 513, "disobei": 513, "inde": [513, 514, 523, 533, 537], "adress": 514, "to_native_arrays_and_back": [514, 516, 525], "sole": [514, 522, 538, 539, 540], "strictli": [514, 518, 519], "rational": 514, "__div__": [514, 523], "dicat": 514, "pep": 514, "484": 514, "brittl": 514, "freeli": 514, "technic": [514, 518, 533, 539, 541], "original_typ": 514, "cumbersom": 514, "venn": 515, "diagram": [515, 545], "light": [515, 519, 533, 534, 540, 545], "maximis": 515, "handle_mixed_funct": [515, 516, 523], "condition": 515, "reap": 515, "deal": [515, 517, 519, 533], "modif": [515, 539], "briefli": [515, 521, 528], "get_all_arrays_on_dev": 515, "inputs_to_ivy_arrai": 516, "integer_array_to_float": 516, "handle_cmd_line_arg": 516, "crucial": 517, "bind_custom_gradient_funct": 517, "inter_func": 517, "custom_grad_fn": 517, "args1": 517, "detach": 517, "disambigu": 517, "eas": [517, 539], "captur": [517, 521, 530, 540], "program": [518, 536, 537, 539, 542, 543, 546], "ration": [518, 523], "speak": 518, "val_n": 518, "base_idx": 518, "_manipulation_stack": 518, "base_flat": 518, "_view_ref": 518, "_update_view": 518, "contigu": 518, "c_contigu": 518, "ascontiguousarrai": 518, "copyto": 518, "_is_vari": 518, "tensor_scatter_nd_upd": 518, "is_vari": 518, "_update_torch_view": 518, "predominantli": [518, 522, 532], "support_native_out": [518, 525], "math": [518, 519, 520, 530, 537], "_wrap_fn": 518, "dim0": 518, "dim1": 518, "res_floor": 518, "mul": [518, 527], "extent": [518, 519], "maxim": [518, 525, 536, 537, 541, 542, 543], "capabl": [518, 521, 523], "mostli": [518, 521], "metadata": 518, "paradigm": [518, 533, 539], "expans": 518, "handle_view": 518, "handle_view_index": 518, "brief": [518, 521], "stem": 518, "weak": 518, "_torch_bas": 518, "_torch_view_ref": 518, "_torch_manipul": 518, "weakli": 518, "adequ": 518, "exhaust": [518, 521, 536, 545], "input_arrai": 518, "tf_frontend": 519, "wrong": [519, 523], "torch_frontend": [519, 520], "numpy_frontend": 519, "jax_frontend": 519, "to_ivy_arrays_and_back": [519, 520], "fidel": 519, "advis": 519, "slower": 519, "reli": 519, "algebra": [519, 537, 538, 539, 542, 546], "xla": [519, 533, 534, 539], "decompos": 519, "dynamic": 519, "mimic": 519, "arithmetic_oper": 519, "handle_numpy_out": 519, "handle_numpy_dtyp": 519, "handle_numpy_cast": 519, "from_zero_dim_arrays_to_scalar": 519, "_add": 519, "same_kind": 519, "subok": [519, 520, 523], "promote_types_of_numpy_input": 519, "underscor": 519, "unhandl": 519, "trigonometric_funct": 519, "_tan": 519, "check_tensorflow_cast": 519, "raw_op": [519, 520], "tackl": 519, "map_raw_ops_alia": 519, "unnecessari": [519, 523], "output_typ": 519, "kwargs_to_upd": 519, "implemnt": 519, "pointwise_op": 519, "preferred_element_typ": 519, "finer": 519, "margin": 519, "meet": 519, "criteria": 519, "reduce_logsumexp": 519, "input_tensor": 519, "logsumexp": 519, "trick": 519, "max_input_tensor": 519, "omiss": 519, "sensibl": 519, "deem": 519, "reserv": 519, "resum": 519, "ahead": [519, 539], "logicaland": 519, "np_frontend": 519, "_ivy_arrai": 519, "radd": 519, "_init_data": 519, "isinst": [519, 521, 522, 529, 530], "_process_str_data": 519, "_dtype": [519, 520, 527], "_shape": [519, 527], "govern": 519, "promote_types_of_": 519, "_input": 519, "promote_types_of_torch_input": [519, 520], "saniti": 519, "func_wrapp": 519, "handle_numpy_casting_speci": 519, "equiv": 519, "unsaf": 519, "array_type_test": 519, "_isfinit": 519, "organis": 519, "watch": 519, "youtub": 519, "jump": 520, "knowledg": 520, "lift": [520, 540], "np_frontend_help": 520, "test_jax": 520, "test_jax_lax_oper": 520, "dtype_and_x": [520, 521], "test_jax_lax_tan": 520, "test_numpi": 520, "test_mathematical_funct": 520, "test_np_trigonometric_funct": 520, "dtypes_values_cast": 520, "dtypes_values_casting_dtyp": 520, "arr_func": 520, "get_dtypes_kind": 520, "get_num_positional_args_ufunc": 520, "test_numpy_tan": 520, "handle_where_and_array_bool": 520, "test_tensorflow": 520, "test_math": 520, "test_tensorflow_tan": 520, "test_pointwise_op": 520, "test_torch_tan": 520, "_fill_valu": 520, "test_jax_lax_ful": 520, "test_from_shape_or_valu": 520, "_input_fill_and_dtyp": 520, "dtype_and_input": 520, "dtype_to_cast": 520, "input_fill_dtyp": 520, "test_numpy_ful": 520, "test_tf_funct": 520, "test_tensorflow_fil": 520, "test_creation_op": 520, "test_torch_ful": 520, "add_nois": 520, "all_clos": 520, "_get_dtype_and_matrix": 520, "test_torch_qr": 520, "frontend_ret": 520, "frontend_q": 520, "frontend_r": 520, "walkthrough": 520, "comparison_op": 520, "test_comparison_op": 520, "test_torch_great": 520, "test_ndarrai": 520, "test_numpy_instance_add__": 520, "test_tensorflow_instance_add": 520, "1e04": 520, "allow_infin": 520, "test_torch_instance_add": 520, "_arrays_idx_n_dtyp": 520, "test_manipul": [520, 521], "surprisingli": 520, "closest_relevant_group": 520, "strive": [520, 521, 523, 533, 541], "fixtur": 521, "eleg": [521, 539], "unexplor": 521, "upload": 521, "artifact": 521, "bespok": 521, "_array_or_typ": 521, "test_default_int_dtyp": 521, "clariti": [521, 523, 539], "print_hypothesis_exampl": 521, "custom_strategi": 521, "randomis": 521, "simplist": 521, "intricaci": 521, "glanc": 521, "stratigi": 521, "one_of": 521, "datum": 521, "pipe": 521, "overload": 521, "shorthand": 521, "array_or_scal": 521, "len_of_arrai": 521, "test_add": 521, "keywoard": 521, "test_gpu_is_avail": 521, "requri": 521, "summara": 521, "pretest": 521, "slighlti": 521, "pytet": 521, "thankfulli": 521, "seamlessli": 521, "criterion": 521, "valid_ax": 521, "craft": 521, "hoc": 521, "11228": 521, "456": 521, "268": 521, "wherev": 521, "9622": 521, "28136": 521, "6375": 521, "12720": 521, "21354": 521, "900e": 521, "57384": 521, "25687": 521, "248": 521, "na": 521, "test_devic": 521, "array_shap": 521, "common_shap": 521, "test_lay": 521, "stand": 521, "some_sequ": 521, "arrays_valu": 521, "36418": 521, "21716926": 521, "none_or_list_of_float": 521, "get_prob": 521, "103515625e": 521, "099609375": 521, "probabilist": 521, "number_positional_argu": 521, "unreproduc": 521, "report": 521, "ivy_np": 521, "valid_float_dtyp": 521, "test_demo": 521, "failing_test": 521, "traceback": 521, "shrink": 521, "prescrib": 521, "scratch": 521, "therebi": 521, "test_gelu": 521, "test_fil": 521, "phase": [521, 533, 539], "notabl": [521, 539], "verbos": [521, 525], "newer": 521, "max_exampl": 521, "deadlin": 521, "weird": 521, "systemat": 521, "safeguard": 521, "inabl": 521, "test_result_typ": 521, "9090909090909091": 521, "judgement": 522, "some_namespac": 522, "some_backend": 522, "another_backend": 522, "refactor": 522, "ongo": 522, "cooler": 522, "something_cool": 522, "_assert_fill_value_and_dtype_are_compat": 522, "_to_devic": 522, "older": 522, "unbound": 522, "battl": 522, "answer": [523, 527, 533], "contradict": 523, "entail": 523, "sacrif": 523, "dimems": 523, "jacfwd": 523, "jacrev": 523, "banner": 523, "ravel": 523, "pointwis": 523, "fuse": 523, "tensorrt": 523, "expens": 523, "incredibli": [523, 528, 533, 542], "six": 523, "price": 523, "pai": 523, "intrus": 523, "x_beta": 523, "equip": 523, "priorit": 523, "simplif": 523, "allevi": 523, "ineffici": [523, 533, 539], "hybrid": 523, "interp": 523, "workaround": 523, "bicubic_tensorflow": 523, "fulfil": 524, "fledg": [525, 526], "syntact": [525, 530], "power_seq": 525, "backend_stack": 525, "_determine_backend_from_arg": 525, "importlib": 525, "_backend_dict": 525, "illustr": [525, 532], "x_shape": 525, "x_flat": 525, "wi": 525, "wi_x": 525, "wii_x": 525, "wif_x": 525, "wig_x": 525, "wio_x": 525, "wh": 525, "ht": 525, "ct": 525, "hts_list": 525, "wii_xt": 525, "wif_xt": 525, "wig_xt": 525, "wio_xt": 525, "zip": 525, "htm1": 525, "ctm1": 525, "wh_htm1": 525, "whi_htm1": 525, "whf_htm1": 525, "whg_htm1": 525, "who_htm1": 525, "ft": 525, "ot": 525, "reliabl": 525, "sacrific": 525, "hear": 525, "virtu": [525, 536], "pure_ivi": 525, "compile_graph": [525, 530], "pure_torch": 525, "_layer": 525, "unclean": 525, "wx": 525, "temp": 525, "ivy_func": 525, "emphas": 525, "torchscript": [525, 534, 546], "example_input": 525, "primit": [526, 533, 537, 539], "upcom": 526, "hierarch": [526, 528, 529, 539], "arraywithactiv": 527, "arraywithcr": 527, "arraywithdatatyp": 527, "arraywithdevic": 527, "arraywithgener": 527, "arraywithgradi": 527, "arraywithimag": 527, "arraywithlay": 527, "arraywithlinearalgebra": 527, "arraywithloss": 527, "arraywithmanipul": 527, "arraywithnorm": 527, "arraywithrandom": 527, "arraywithsearch": 527, "arraywithset": 527, "arraywithsort": 527, "arraywithstatist": 527, "arraywithutil": 527, "_init": 527, "_size": 527, "_devic": 527, "_dev_str": 527, "_pre_repr": 527, "_post_repr": 527, "framework_str": 527, "noinspect": 527, "pypep8nam": 527, "immut": 527, "claim": 527, "truli": 527, "_native_wrapp": 527, "genuin": 527, "some_method": 527, "rewritten": 527, "strang": 527, "compartment": 527, "newshap": 527, "new_shap": 527, "tidi": 527, "crystal": 527, "ton": 528, "ado": [528, 529], "soup": 528, "walk": [528, 529], "cnt": 528, "combo": 528, "3333335": 528, "delimit": 528, "autocomplet": 528, "midwai": 528, "agent": 528, "total_spe": 528, "total_height": 528, "total_width": 528, "ag": 528, "tot": 528, "total_": 528, "total_h": 528, "cnt0": 528, "cnt1": 528, "diff_0": 528, "diff_1": 528, "config0": 528, "config1": 528, "decod": 528, "l0": 528, "decoder__l0": 528, "decoder__l1": 528, "encoder__l0": 528, "encoder__l1": 528, "l0__b": 528, "l0__w": 528, "l1__b": 528, "l1__w": 528, "printabl": 528, "obviou": [528, 539], "foresight": 528, "untidili": 528, "update_ag": 528, "normalize_img": 528, "img_max": 528, "reduce_max": 528, "img_min": 528, "reduce_min": 528, "img_rang": 528, "agent_posit": 528, "agent_veloc": 528, "agent_cam_front_rgb": 528, "agent_cam_front_depth": 528, "agent_cam_rear_rgb": 528, "agent_cam_rear_depth": 528, "agent_cam_lidar": 528, "camera": 528, "front_rgb": 528, "front_depth": 528, "rear_rgb": 528, "rear_depth": 528, "lidar": 528, "rgb": 528, "rear": 528, "veloc": 528, "cam": 528, "cam_max": 528, "cam_min": 528, "cam_rang": 528, "perman": 528, "thread": [528, 539], "pretti": [528, 545], "straightforward": 528, "dataload": [528, 531], "_cnt": 528, "img_": 528, "png": 528, "_dataset_s": 528, "_batch_siz": 528, "_count": [528, 529], "__next__": 528, "img_fnam": 528, "loaded_img": 528, "cv2": 528, "imread": 528, "from_numpi": 528, "batch_slic": 528, "reduce_mean": [528, 529, 530], "0145": 528, "addbackward0": 528, "_create_vari": 529, "_input_channel": 529, "_output_channel": 529, "_w_shape": 529, "_b_shape": 529, "_with_bia": 529, "396": 529, "764": 529, "872": 529, "211": 529, "439": 529, "nightmar": 529, "overcom": 529, "v0": 529, "v1": 529, "key0": 529, "linear3": 529, "v2": 529, "_w_init": 529, "_b_init": 529, "misnom": 529, "saw": 529, "_beta1": 529, "_beta2": 529, "_epsilon": 529, "_mw": 529, "_vw": 529, "_first_pass": 529, "_should_compil": 529, "new_v": 529, "_lr": 529, "_inplac": 529, "_stop_gradi": 529, "clip_by_valu": 530, "sparse_funct": 530, "_linear": 530, "jax_graph": 530, "to_backend": 530, "thinli": 530, "whilst": [530, 534, 539], "to_haiku_modul": 530, "loss_fn_t": 530, "without_apply_rng": 530, "update_rul": 530, "tree_multimap": 530, "differenti": [532, 539], "pose": 532, "quaternion": 532, "ivy_mech": 532, "target_facing_rotation_matrix": 532, "polar_to_cartesian_coord": 532, "warp": 532, "optic": 532, "voxel": 532, "ivy_vis": 532, "coords_to_voxel_grid": 532, "render_pixel_coord": 532, "radianc": 532, "nerf": 532, "trajectori": 532, "motion": 532, "mobil": [532, 539], "sample_spline_path": 532, "rigidmobil": 532, "sample_bodi": 532, "drone": 532, "sample_link": 532, "openai": 532, "swimmer": 532, "reward": 532, "supervis": 532, "door": [532, 533], "cartpol": 532, "mountain_car": 532, "pendulum": 532, "reacher": 532, "learnt": 532, "ture": 532, "ntm": 532, "egospher": 532, "esm": 532, "ivy_memori": 532, "egocentr": 532, "room": 532, "doubt": 533, "grate": 533, "probe": 533, "remark": 533, "surpris": 533, "lock": 533, "gold": 533, "dex": 533, "ye": 533, "scan": 533, "tricki": [533, 534], "predictor": 533, "tight": 533, "driver": 533, "dispatch": [533, 539, 542], "ast": 533, "checkpoint": 533, "autodiff": 533, "shine": 533, "merci": 533, "autograd": 533, "compet": [533, 539], "parallelis": 533, "spmd": 533, "mixtur": 533, "expert": 533, "sophist": 533, "depart": 533, "hundr": 533, "thousand": 533, "broadli": [533, 545], "supplementari": 533, "reusabl": [533, 537, 539], "fanci": [533, 539], "fusion": [533, 543], "lose": 533, "pmap": 533, "eventu": 533, "supplement": 533, "backdoor": 533, "callback": 533, "record": [533, 540], "somewhat": [533, 539], "outsourc": 533, "nail": 534, "funtion": 534, "asset": 534, "scientist": 534, "correl": 534, "analyz": 534, "conceptu": [535, 540], "broken": [535, 539], "tracer": 535, "infrastructur": [535, 541, 542], "vendor": [535, 541], "complimentari": [535, 545], "acycl": [535, 540], "insert_numb": 536, "insert_t": 536, "scaffold": [537, 545], "heart": 537, "toolchain": [537, 542], "intermedi": [537, 538, 539, 540, 545], "ir": [537, 540, 545], "assembli": [537, 544, 545], "idl": 537, "middl": 537, "emit": 537, "gnu": [537, 542], "gcc": [537, 544], "broader": 537, "heterogen": 537, "aid": 537, "coprocessor": 537, "programm": [537, 544], "gate": 537, "onednn": 537, "complementari": [537, 545], "sit": [537, 540, 545], "tandem": 537, "possess": 537, "khrono": [538, 544], "appl": 538, "interact": [538, 539, 544], "coremltool": 538, "albeit": 538, "promin": 539, "abbrevi": 539, "laboratori": 539, "proprietari": [539, 543, 544], "mathwork": 539, "commerci": 539, "1984": 539, "toolbox": 539, "mupad": 539, "simulink": 539, "graphic": [539, 543, 544], "simul": 539, "million": [539, 542], "worldwid": 539, "scienc": [539, 541], "econom": 539, "2001": 539, "scientif": 539, "od": 539, "solver": 539, "cython": 539, "friendli": 539, "2002": 539, "lua": 539, "luajit": 539, "idiap": 539, "epfl": 539, "2005": 539, "numarrai": 539, "cpython": 539, "partli": 539, "multidimension": 539, "2007": 539, "regress": [539, 546], "forest": 539, "boost": 539, "dbscan": 539, "inbuilt": 539, "esqu": 539, "aesara": 539, "2008": 539, "datafram": 539, "critic": [539, 545], "2012": 539, "Its": 539, "polymorph": 539, "parallel": [539, 543, 544], "mpi": 539, "openmp": 539, "glue": 539, "jaot": 539, "nasa": 539, "cern": 539, "climat": 539, "allianc": 539, "influenti": 539, "2014": 539, "analyt": [539, 541, 545], "scala": 539, "ship": 539, "forgiv": 539, "decemb": 539, "announc": 539, "transit": 539, "mainten": 539, "v7": 539, "meaning": 539, "2016": 539, "imper": 539, "amazon": 539, "traction": 539, "cognit": [539, 546], "toolkit": [539, 540, 546], "grade": 539, "realiz": 539, "dnn": 539, "cnn": 539, "rnn": 539, "backpropag": 539, "succumb": 539, "came": 539, "monitor": 539, "practition": [539, 543, 544, 545], "hobbyist": 539, "tremend": 539, "ecosystem": 539, "gear": 539, "batteri": 539, "zygot": 539, "jl": 539, "workload": 539, "daggerflux": 539, "frontier": 539, "hessian": 539, "2018": 539, "lightweight": [539, 546], "shortcom": 539, "barrier": 539, "inexperienc": 539, "underdevelop": 539, "fanat": 539, "ounc": 539, "infanc": 539, "emerg": 539, "nich": 539, "introduct": 539, "lite": 539, "enterpris": 539, "reinvent": [539, 541], "inertia": 539, "haven": 539, "creator": [539, 541], "paszk": 539, "hi": 539, "bulk": 539, "haskel": 539, "dataflow": 540, "distil": 540, "essenc": [540, 545], "enclos": 540, "scope": [540, 544], "trace_modul": 540, "scriptfunct": 540, "scriptmodul": 540, "fake": 540, "proxi": 540, "graphmodul": 540, "travi": 541, "oliph": 541, "leader": 541, "cornerston": 541, "numba": 541, "numfocu": 541, "pydata": 541, "confer": 541, "consult": 541, "servic": 541, "expertis": 541, "devop": 541, "mlop": 541, "dashboard": 541, "startup": 541, "mlir": [541, 542, 545], "Their": 541, "held": 541, "privileg": 541, "presum": 541, "llvm": [541, 544], "founder": 541, "tvm": [541, 545], "sustain": 541, "empow": 541, "har": 541, "burden": 541, "benchmark": 541, "convention": 542, "precompil": 542, "executor": 542, "exploit": 542, "fsf": 542, "gpl": 542, "biggest": [542, 545], "nvidia": [543, 544], "conduct": 543, "throughput": 543, "autotun": 543, "consumpt": 543, "gpgpu": 543, "talk": 544, "classic": 544, "sycl": 544, "dpc": 544, "processor": 544, "maco": 544, "x86": 544, "oneapi": 544, "ia": 544, "aka": 544, "xeon": 544, "gen9": 544, "xe": 544, "card": 544, "arria": 544, "gx": 544, "fpga": 544, "tune": [544, 545], "lofti": 545, "ambit": 545, "realm": 545, "bedrock": 545, "flux": 545, "bite": 545, "chew": 545, "eagerpi": 545, "tensorli": 545, "thinc": 545, "neuropod": 545, "exhibit": 545, "emploi": 545, "fx": 545, "retrain": 545, "wider": 545, "closer": 545, "greatli": 545, "challeng": 545, "modular": 545, "anywher": 545, "theano": 546, "plaidml": 546, "partial_svd": 546, "tucker_mode_dot": 546, "excel": 546, "subsystem": 546}, "objects": {"ivy.Array": [[155, 0, 1, "", "abs"], [156, 0, 1, "", "acos"], [157, 0, 1, "", "acosh"], [299, 0, 1, "", "adam_step"], [300, 0, 1, "", "adam_update"], [158, 0, 1, "", "add"], [451, 0, 1, "", "all"], [220, 0, 1, "", "all_equal"], [452, 0, 1, "", "any"], [429, 0, 1, "", "argmax"], [430, 0, 1, "", "argmin"], [438, 0, 1, "", "argsort"], [431, 0, 1, "", "argwhere"], [223, 0, 1, "", "array_equal"], [67, 0, 1, "", "asarray"], [159, 0, 1, "", "asin"], [160, 0, 1, "", "asinh"], [224, 0, 1, "", "assert_supports_inplace"], [91, 0, 1, "", "astype"], [161, 0, 1, "", "atan"], [162, 0, 1, "", "atan2"], [163, 0, 1, "", "atanh"], [381, 0, 1, "", "binary_cross_entropy"], [164, 0, 1, "", "bitwise_and"], [165, 0, 1, "", "bitwise_invert"], [166, 0, 1, "", "bitwise_left_shift"], [167, 0, 1, "", "bitwise_or"], [168, 0, 1, "", "bitwise_right_shift"], [169, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "broadcast_arrays"], [93, 0, 1, "", "broadcast_to"], [94, 0, 1, "", "can_cast"], [170, 0, 1, "", "ceil"], [351, 0, 1, "", "cholesky"], [384, 0, 1, "", "clip"], [226, 0, 1, "", "clip_matrix_norm"], [227, 0, 1, "", "clip_vector_norm"], [385, 0, 1, "", "concat"], [386, 0, 1, "", "constant_pad"], [337, 0, 1, "", "conv1d"], [338, 0, 1, "", "conv1d_transpose"], [339, 0, 1, "", "conv2d"], [340, 0, 1, "", "conv2d_transpose"], [341, 0, 1, "", "conv3d"], [342, 0, 1, "", "conv3d_transpose"], [71, 0, 1, "", "copy_array"], [171, 0, 1, "", "cos"], [172, 0, 1, "", "cosh"], [352, 0, 1, "", "cross"], [382, 0, 1, "", "cross_entropy"], [441, 0, 1, "", "cumprod"], [442, 0, 1, "", "cumsum"], [230, 0, 1, "", "default"], [173, 0, 1, "", "deg2rad"], [345, 0, 1, "", "depthwise_conv2d"], [353, 0, 1, "", "det"], [135, 0, 1, "", "dev"], [354, 0, 1, "", "diag"], [355, 0, 1, "", "diagonal"], [174, 0, 1, "", "divide"], [346, 0, 1, "", "dropout"], [102, 0, 1, "", "dtype"], [356, 0, 1, "", "eig"], [357, 0, 1, "", "eigh"], [358, 0, 1, "", "eigvalsh"], [231, 0, 1, "", "einops_rearrange"], [232, 0, 1, "", "einops_reduce"], [233, 0, 1, "", "einops_repeat"], [443, 0, 1, "", "einsum"], [73, 0, 1, "", "empty_like"], [175, 0, 1, "", "equal"], [176, 0, 1, "", "erf"], [234, 0, 1, "", "exists"], [177, 0, 1, "", "exp"], [387, 0, 1, "", "expand_dims"], [178, 0, 1, "", "expm1"], [104, 0, 1, "", "finfo"], [388, 0, 1, "", "flip"], [179, 0, 1, "", "floor"], [180, 0, 1, "", "floor_divide"], [181, 0, 1, "", "fmod"], [235, 0, 1, "", "fourier_encode"], [75, 0, 1, "", "from_dlpack"], [77, 0, 1, "", "full_like"], [238, 0, 1, "", "gather"], [239, 0, 1, "", "gather_nd"], [52, 0, 1, "", "gelu"], [247, 0, 1, "", "get_num_dims"], [303, 0, 1, "", "gradient_descent_update"], [182, 0, 1, "", "greater"], [183, 0, 1, "", "greater_equal"], [252, 0, 1, "", "has_nans"], [107, 0, 1, "", "iinfo"], [359, 0, 1, "", "inner"], [254, 0, 1, "", "inplace_decrement"], [255, 0, 1, "", "inplace_increment"], [256, 0, 1, "", "inplace_update"], [360, 0, 1, "", "inv"], [258, 0, 1, "", "is_array"], [110, 0, 1, "", "is_bool_dtype"], [112, 0, 1, "", "is_float_dtype"], [113, 0, 1, "", "is_int_dtype"], [259, 0, 1, "", "is_ivy_array"], [260, 0, 1, "", "is_ivy_container"], [261, 0, 1, "", "is_native_array"], [115, 0, 1, "", "is_uint_dtype"], [184, 0, 1, "", "isfinite"], [262, 0, 1, "", "isin"], [185, 0, 1, "", "isinf"], [186, 0, 1, "", "isnan"], [187, 0, 1, "", "isreal"], [264, 0, 1, "", "itemsize"], [305, 0, 1, "", "lamb_update"], [306, 0, 1, "", "lars_update"], [422, 0, 1, "", "layer_norm"], [54, 0, 1, "", "leaky_relu"], [188, 0, 1, "", "less"], [189, 0, 1, "", "less_equal"], [347, 0, 1, "", "linear"], [78, 0, 1, "", "linspace"], [190, 0, 1, "", "log"], [191, 0, 1, "", "log10"], [192, 0, 1, "", "log1p"], [193, 0, 1, "", "log2"], [55, 0, 1, "", "log_softmax"], [194, 0, 1, "", "logaddexp"], [195, 0, 1, "", "logical_and"], [196, 0, 1, "", "logical_not"], [197, 0, 1, "", "logical_or"], [198, 0, 1, "", "logical_xor"], [79, 0, 1, "", "logspace"], [348, 0, 1, "", "lstm_update"], [362, 0, 1, "", "matmul"], [363, 0, 1, "", "matrix_norm"], [364, 0, 1, "", "matrix_power"], [365, 0, 1, "", "matrix_rank"], [366, 0, 1, "", "matrix_transpose"], [444, 0, 1, "", "max"], [199, 0, 1, "", "maximum"], [445, 0, 1, "", "mean"], [80, 0, 1, "", "meshgrid"], [446, 0, 1, "", "min"], [200, 0, 1, "", "minimum"], [56, 0, 1, "", "mish"], [349, 0, 1, "", "multi_head_attention"], [423, 0, 1, "", "multinomial"], [201, 0, 1, "", "multiply"], [81, 0, 1, "", "native_array"], [202, 0, 1, "", "negative"], [432, 0, 1, "", "nonzero"], [203, 0, 1, "", "not_equal"], [82, 0, 1, "", "one_hot"], [84, 0, 1, "", "ones_like"], [307, 0, 1, "", "optimizer_update"], [367, 0, 1, "", "outer"], [389, 0, 1, "", "permute_dims"], [368, 0, 1, "", "pinv"], [204, 0, 1, "", "positive"], [205, 0, 1, "", "pow"], [447, 0, 1, "", "prod"], [369, 0, 1, "", "qr"], [206, 0, 1, "", "rad2deg"], [424, 0, 1, "", "randint"], [425, 0, 1, "", "random_normal"], [426, 0, 1, "", "random_uniform"], [207, 0, 1, "", "reciprocal"], [57, 0, 1, "", "relu"], [208, 0, 1, "", "remainder"], [390, 0, 1, "", "repeat"], [391, 0, 1, "", "reshape"], [118, 0, 1, "", "result_type"], [392, 0, 1, "", "roll"], [209, 0, 1, "", "round"], [350, 0, 1, "", "scaled_dot_product_attention"], [269, 0, 1, "", "scatter_flat"], [270, 0, 1, "", "scatter_nd"], [439, 0, 1, "", "searchsorted"], [280, 0, 1, "", "shape"], [428, 0, 1, "", "shuffle"], [58, 0, 1, "", "sigmoid"], [210, 0, 1, "", "sign"], [211, 0, 1, "", "sin"], [212, 0, 1, "", "sinh"], [370, 0, 1, "", "slogdet"], [59, 0, 1, "", "softmax"], [60, 0, 1, "", "softplus"], [371, 0, 1, "", "solve"], [440, 0, 1, "", "sort"], [383, 0, 1, "", "sparse_cross_entropy"], [393, 0, 1, "", "split"], [213, 0, 1, "", "sqrt"], [214, 0, 1, "", "square"], [394, 0, 1, "", "squeeze"], [282, 0, 1, "", "stable_divide"], [283, 0, 1, "", "stable_pow"], [395, 0, 1, "", "stack"], [448, 0, 1, "", "std"], [309, 0, 1, "", "stop_gradient"], [215, 0, 1, "", "subtract"], [449, 0, 1, "", "sum"], [284, 0, 1, "", "supports_inplace_updates"], [372, 0, 1, "", "svd"], [373, 0, 1, "", "svdvals"], [396, 0, 1, "", "swapaxes"], [216, 0, 1, "", "tan"], [217, 0, 1, "", "tanh"], [374, 0, 1, "", "tensordot"], [375, 0, 1, "", "tensorsolve"], [397, 0, 1, "", "tile"], [150, 0, 1, "", "to_device"], [286, 0, 1, "", "to_list"], [288, 0, 1, "", "to_numpy"], [289, 0, 1, "", "to_scalar"], [376, 0, 1, "", "trace"], [85, 0, 1, "", "tril"], [86, 0, 1, "", "triu"], [218, 0, 1, "", "trunc"], [219, 0, 1, "", "trunc_divide"], [434, 0, 1, "", "unique_all"], [435, 0, 1, "", "unique_counts"], [436, 0, 1, "", "unique_inverse"], [437, 0, 1, "", "unique_values"], [398, 0, 1, "", "unstack"], [297, 0, 1, "", "value_is_nan"], [377, 0, 1, "", "vander"], [450, 0, 1, "", "var"], [378, 0, 1, "", "vecdot"], [379, 0, 1, "", "vector_norm"], [380, 0, 1, "", "vector_to_skew_symmetric_matrix"], [433, 0, 1, "", "where"], [399, 0, 1, "", "zero_pad"], [88, 0, 1, "", "zeros_like"]], "ivy": [[321, 1, 1, "", "ArrayMode"], [317, 1, 1, "", "DefaultComplexDtype"], [318, 1, 1, "", "DefaultDevice"], [317, 1, 1, "", "DefaultDtype"], [317, 1, 1, "", "DefaultFloatDtype"], [317, 1, 1, "", "DefaultIntDtype"], [317, 1, 1, "", "DefaultUintDtype"], [322, 1, 1, "", "GradientTracking"], [315, 2, 1, "", "IfElse"], [316, 1, 1, "", "NestedSequence"], [318, 1, 1, "", "Profiler"], [315, 2, 1, "", "WhileLoop"], [319, 2, 1, "", "abs"], [319, 2, 1, "", "acos"], [319, 2, 1, "", "acosh"], [322, 2, 1, "", "adam_step"], [322, 2, 1, "", "adam_update"], [319, 2, 1, "", "add"], [451, 2, 1, "", "all"], [321, 2, 1, "", "all_equal"], [403, 2, 1, "", "all_nested_indices"], [452, 2, 1, "", "any"], [316, 2, 1, "", "arange"], [321, 2, 1, "", "arg_info"], [321, 2, 1, "", "arg_names"], [429, 2, 1, "", "argmax"], [430, 2, 1, "", "argmin"], [438, 2, 1, "", "argsort"], [431, 2, 1, "", "argwhere"], [316, 2, 1, "", "array"], [321, 2, 1, "", "array_equal"], [318, 2, 1, "", "as_ivy_dev"], [317, 2, 1, "", "as_ivy_dtype"], [318, 2, 1, "", "as_native_dev"], [317, 2, 1, "", "as_native_dtype"], [316, 2, 1, "", "asarray"], [316, 2, 1, "", "asarray_handle_nestable"], [316, 2, 1, "", "asarray_infer_device"], [316, 2, 1, "", "asarray_to_native_arrays_and_back"], [319, 2, 1, "", "asin"], [319, 2, 1, "", "asinh"], [321, 2, 1, "", "assert_supports_inplace"], [317, 2, 1, "", "astype"], [319, 2, 1, "", "atan"], [319, 2, 1, "", "atan2"], [319, 2, 1, "", "atanh"], [381, 2, 1, "", "binary_cross_entropy"], [319, 2, 1, "", "bitwise_and"], [319, 2, 1, "", "bitwise_invert"], [319, 2, 1, "", "bitwise_left_shift"], [319, 2, 1, "", "bitwise_or"], [319, 2, 1, "", "bitwise_right_shift"], [319, 2, 1, "", "bitwise_xor"], [317, 2, 1, "", "broadcast_arrays"], [317, 2, 1, "", "broadcast_to"], [321, 2, 1, "", "cache_fn"], [317, 2, 1, "", "can_cast"], [319, 2, 1, "", "ceil"], [317, 2, 1, "", "check_float"], [351, 2, 1, "", "cholesky"], [318, 2, 1, "", "clear_cached_mem_on_dev"], [384, 2, 1, "", "clip"], [321, 2, 1, "", "clip_matrix_norm"], [321, 2, 1, "", "clip_vector_norm"], [317, 2, 1, "", "closest_valid_dtype"], [0, 2, 1, "", "compile"], [385, 2, 1, "", "concat"], [386, 2, 1, "", "constant_pad"], [321, 2, 1, "", "container_types"], [336, 2, 1, "", "conv"], [337, 2, 1, "", "conv1d"], [338, 2, 1, "", "conv1d_transpose"], [339, 2, 1, "", "conv2d"], [340, 2, 1, "", "conv2d_transpose"], [341, 2, 1, "", "conv3d"], [342, 2, 1, "", "conv3d_transpose"], [343, 2, 1, "", "conv_general_dilated"], [344, 2, 1, "", "conv_general_transpose"], [316, 2, 1, "", "copy_array"], [404, 2, 1, "", "copy_nest"], [319, 2, 1, "", "cos"], [319, 2, 1, "", "cosh"], [352, 2, 1, "", "cross"], [382, 2, 1, "", "cross_entropy"], [441, 2, 1, "", "cumprod"], [442, 2, 1, "", "cumsum"], [321, 2, 1, "", "current_backend_str"], [321, 2, 1, "", "default"], [317, 2, 1, "", "default_complex_dtype"], [318, 2, 1, "", "default_device"], [317, 2, 1, "", "default_dtype"], [317, 2, 1, "", "default_float_dtype"], [317, 2, 1, "", "default_int_dtype"], [317, 2, 1, "", "default_uint_dtype"], [319, 2, 1, "", "deg2rad"], [345, 2, 1, "", "depthwise_conv2d"], [313, 2, 1, "", "deserialize"], [353, 2, 1, "", "det"], [318, 2, 1, "", "dev"], [318, 2, 1, "", "dev_util"], [354, 2, 1, "", "diag"], [355, 2, 1, "", "diagonal"], [319, 2, 1, "", "divide"], [346, 2, 1, "", "dropout"], [317, 2, 1, "", "dtype"], [317, 2, 1, "", "dtype_bits"], [405, 2, 1, "", "duplicate_array_index_chains"], [314, 6, 1, "", "e"], [356, 2, 1, "", "eig"], [357, 2, 1, "", "eigh"], [358, 2, 1, "", "eigvalsh"], [321, 2, 1, "", "einops_rearrange"], [321, 2, 1, "", "einops_reduce"], [321, 2, 1, "", "einops_repeat"], [443, 2, 1, "", "einsum"], [316, 2, 1, "", "empty"], [316, 2, 1, "", "empty_like"], [319, 2, 1, "", "equal"], [319, 2, 1, "", "erf"], [322, 2, 1, "", "execute_with_gradients"], [321, 2, 1, "", "exists"], [319, 2, 1, "", "exp"], [387, 2, 1, "", "expand_dims"], [319, 2, 1, "", "expm1"], [316, 2, 1, "", "eye"], [317, 2, 1, "", "finfo"], [388, 2, 1, "", "flip"], [319, 2, 1, "", "floor"], [319, 2, 1, "", "floor_divide"], [319, 2, 1, "", "fmod"], [400, 2, 1, "", "fomaml_step"], [321, 2, 1, "", "fourier_encode"], [316, 2, 1, "", "from_dlpack"], [316, 2, 1, "", "full"], [316, 2, 1, "", "full_like"], [318, 2, 1, "", "function_supported_devices"], [321, 2, 1, "", "function_supported_devices_and_dtypes"], [317, 2, 1, "", "function_supported_dtypes"], [318, 2, 1, "", "function_unsupported_devices"], [321, 2, 1, "", "function_unsupported_devices_and_dtypes"], [317, 2, 1, "", "function_unsupported_dtypes"], [321, 2, 1, "", "gather"], [321, 2, 1, "", "gather_nd"], [313, 2, 1, "", "gelu"], [313, 2, 1, "", "get"], [321, 2, 1, "", "get_all_arrays_in_memory"], [318, 2, 1, "", "get_all_ivy_arrays_on_dev"], [321, 2, 1, "", "get_array_mode"], [321, 2, 1, "", "get_exception_trace_mode"], [321, 2, 1, "", "get_item"], [321, 2, 1, "", "get_min_base"], [321, 2, 1, "", "get_min_denominator"], [321, 2, 1, "", "get_nestable_mode"], [321, 2, 1, "", "get_num_dims"], [321, 2, 1, "", "get_queue_timeout"], [321, 2, 1, "", "get_referrers_recursive"], [321, 2, 1, "", "get_show_func_wrapper_trace_mode"], [321, 2, 1, "", "get_tmp_dir"], [318, 2, 1, "", "gpu_is_available"], [322, 2, 1, "", "grad"], [322, 2, 1, "", "gradient_descent_update"], [319, 2, 1, "", "greater"], [319, 2, 1, "", "greater_equal"], [321, 2, 1, "", "has_nans"], [315, 2, 1, "", "if_else"], [317, 2, 1, "", "iinfo"], [406, 2, 1, "", "index_nest"], [314, 6, 1, "", "inf"], [317, 2, 1, "", "infer_default_dtype"], [359, 2, 1, "", "inner"], [321, 2, 1, "", "inplace_arrays_supported"], [321, 2, 1, "", "inplace_decrement"], [321, 2, 1, "", "inplace_increment"], [321, 2, 1, "", "inplace_update"], [321, 2, 1, "", "inplace_variables_supported"], [407, 2, 1, "", "insert_into_nest_at_index"], [408, 2, 1, "", "insert_into_nest_at_indices"], [360, 2, 1, "", "inv"], [317, 2, 1, "", "invalid_dtype"], [321, 2, 1, "", "is_array"], [317, 2, 1, "", "is_bool_dtype"], [317, 2, 1, "", "is_complex_dtype"], [317, 2, 1, "", "is_float_dtype"], [317, 2, 1, "", "is_int_dtype"], [321, 2, 1, "", "is_ivy_array"], [321, 2, 1, "", "is_ivy_container"], [321, 2, 1, "", "is_native_array"], [317, 2, 1, "", "is_native_dtype"], [317, 2, 1, "", "is_uint_dtype"], [319, 2, 1, "", "isfinite"], [321, 2, 1, "", "isin"], [319, 2, 1, "", "isinf"], [319, 2, 1, "", "isnan"], [319, 2, 1, "", "isreal"], [321, 2, 1, "", "isscalar"], [321, 2, 1, "", "itemsize"], [322, 2, 1, "", "jac"], [322, 2, 1, "", "lamb_update"], [322, 2, 1, "", "lars_update"], [422, 2, 1, "", "layer_norm"], [313, 2, 1, "", "leaky_relu"], [319, 2, 1, "", "less"], [319, 2, 1, "", "less_equal"], [347, 2, 1, "", "linear"], [316, 2, 1, "", "linspace"], [319, 2, 1, "", "log"], [319, 2, 1, "", "log10"], [319, 2, 1, "", "log1p"], [319, 2, 1, "", "log2"], [313, 2, 1, "", "log_softmax"], [319, 2, 1, "", "logaddexp"], [319, 2, 1, "", "logical_and"], [319, 2, 1, "", "logical_not"], [319, 2, 1, "", "logical_or"], [319, 2, 1, "", "logical_xor"], [316, 2, 1, "", "logspace"], [348, 2, 1, "", "lstm_update"], [361, 2, 1, "", "lu_factor"], [401, 2, 1, "", "maml_step"], [409, 2, 1, "", "map"], [410, 2, 1, "", "map_nest_at_index"], [411, 2, 1, "", "map_nest_at_indices"], [321, 2, 1, "", "match_kwargs"], [362, 2, 1, "", "matmul"], [363, 2, 1, "", "matrix_norm"], [364, 2, 1, "", "matrix_power"], [365, 2, 1, "", "matrix_rank"], [366, 2, 1, "", "matrix_transpose"], [444, 2, 1, "", "max"], [319, 2, 1, "", "maximum"], [445, 2, 1, "", "mean"], [316, 2, 1, "", "meshgrid"], [446, 2, 1, "", "min"], [319, 2, 1, "", "minimum"], [313, 2, 1, "", "mish"], [349, 2, 1, "", "multi_head_attention"], [412, 2, 1, "", "multi_index_nest"], [423, 2, 1, "", "multinomial"], [319, 2, 1, "", "multiply"], [321, 2, 1, "", "multiprocessing"], [314, 6, 1, "", "nan"], [316, 2, 1, "", "native_array"], [319, 2, 1, "", "negative"], [413, 2, 1, "", "nested_any"], [414, 2, 1, "", "nested_argwhere"], [415, 2, 1, "", "nested_map"], [416, 2, 1, "", "nested_multi_map"], [314, 6, 1, "", "newaxis"], [432, 2, 1, "", "nonzero"], [319, 2, 1, "", "not_equal"], [321, 2, 1, "", "num_arrays_in_memory"], [318, 2, 1, "", "num_cpu_cores"], [318, 2, 1, "", "num_gpus"], [318, 2, 1, "", "num_ivy_arrays_on_dev"], [316, 2, 1, "", "one_hot"], [316, 2, 1, "", "ones"], [316, 2, 1, "", "ones_like"], [322, 2, 1, "", "optimizer_update"], [367, 2, 1, "", "outer"], [318, 2, 1, "", "percent_used_mem_on_dev"], [389, 2, 1, "", "permute_dims"], [314, 6, 1, "", "pi"], [368, 2, 1, "", "pinv"], [319, 2, 1, "", "positive"], [319, 2, 1, "", "pow"], [321, 2, 1, "", "print_all_arrays_in_memory"], [318, 2, 1, "", "print_all_ivy_arrays_on_dev"], [447, 2, 1, "", "prod"], [317, 2, 1, "", "promote_types"], [317, 2, 1, "", "promote_types_of_inputs"], [417, 2, 1, "", "prune_empty"], [418, 2, 1, "", "prune_nest_at_index"], [419, 2, 1, "", "prune_nest_at_indices"], [369, 2, 1, "", "qr"], [319, 2, 1, "", "rad2deg"], [424, 2, 1, "", "randint"], [425, 2, 1, "", "random_normal"], [426, 2, 1, "", "random_uniform"], [319, 2, 1, "", "reciprocal"], [313, 2, 1, "", "relu"], [319, 2, 1, "", "remainder"], [390, 2, 1, "", "repeat"], [402, 2, 1, "", "reptile_step"], [391, 2, 1, "", "reshape"], [317, 2, 1, "", "result_type"], [392, 2, 1, "", "roll"], [319, 2, 1, "", "round"], [350, 2, 1, "", "scaled_dot_product_attention"], [321, 2, 1, "", "scatter_flat"], [321, 2, 1, "", "scatter_nd"], [439, 2, 1, "", "searchsorted"], [427, 2, 1, "", "seed"], [321, 2, 1, "", "set_array_mode"], [317, 2, 1, "", "set_default_complex_dtype"], [318, 2, 1, "", "set_default_device"], [317, 2, 1, "", "set_default_dtype"], [317, 2, 1, "", "set_default_float_dtype"], [317, 2, 1, "", "set_default_int_dtype"], [317, 2, 1, "", "set_default_uint_dtype"], [321, 2, 1, "", "set_exception_trace_mode"], [321, 2, 1, "", "set_min_base"], [321, 2, 1, "", "set_min_denominator"], [420, 2, 1, "", "set_nest_at_index"], [421, 2, 1, "", "set_nest_at_indices"], [321, 2, 1, "", "set_nestable_mode"], [321, 2, 1, "", "set_queue_timeout"], [321, 2, 1, "", "set_shape_array_mode"], [321, 2, 1, "", "set_show_func_wrapper_trace_mode"], [318, 2, 1, "", "set_split_factor"], [321, 2, 1, "", "set_tmp_dir"], [322, 2, 1, "", "set_with_grads"], [321, 2, 1, "", "shape"], [321, 2, 1, "", "shape_array_mode"], [428, 2, 1, "", "shuffle"], [313, 2, 1, "", "sigmoid"], [319, 2, 1, "", "sign"], [319, 2, 1, "", "sin"], [319, 2, 1, "", "sinh"], [370, 2, 1, "", "slogdet"], [313, 2, 1, "", "softmax"], [313, 2, 1, "", "softplus"], [371, 2, 1, "", "solve"], [440, 2, 1, "", "sort"], [383, 2, 1, "", "sparse_cross_entropy"], [393, 2, 1, "", "split"], [318, 2, 1, "", "split_factor"], [318, 2, 1, "", "split_func_call"], [319, 2, 1, "", "sqrt"], [319, 2, 1, "", "square"], [394, 2, 1, "", "squeeze"], [321, 2, 1, "", "stable_divide"], [321, 2, 1, "", "stable_pow"], [395, 2, 1, "", "stack"], [448, 2, 1, "", "std"], [322, 2, 1, "", "stop_gradient"], [319, 2, 1, "", "subtract"], [449, 2, 1, "", "sum"], [321, 2, 1, "", "supports_inplace_updates"], [372, 2, 1, "", "svd"], [373, 2, 1, "", "svdvals"], [396, 2, 1, "", "swapaxes"], [319, 2, 1, "", "tan"], [319, 2, 1, "", "tanh"], [374, 2, 1, "", "tensordot"], [375, 2, 1, "", "tensorsolve"], [397, 2, 1, "", "tile"], [318, 2, 1, "", "to_device"], [321, 2, 1, "", "to_ivy_shape"], [321, 2, 1, "", "to_list"], [321, 2, 1, "", "to_native_shape"], [321, 2, 1, "", "to_numpy"], [321, 2, 1, "", "to_scalar"], [318, 2, 1, "", "total_mem_on_dev"], [318, 2, 1, "", "tpu_is_available"], [376, 2, 1, "", "trace"], [1, 2, 1, "", "transpile"], [316, 2, 1, "", "tril"], [316, 2, 1, "", "triu"], [319, 2, 1, "", "trunc"], [319, 2, 1, "", "trunc_divide"], [321, 2, 1, "", "try_else_none"], [317, 2, 1, "", "type_promote_arrays"], [1, 2, 1, "", "unify"], [434, 2, 1, "", "unique_all"], [435, 2, 1, "", "unique_counts"], [436, 2, 1, "", "unique_inverse"], [437, 2, 1, "", "unique_values"], [321, 2, 1, "", "unset_array_mode"], [317, 2, 1, "", "unset_default_complex_dtype"], [318, 2, 1, "", "unset_default_device"], [317, 2, 1, "", "unset_default_dtype"], [317, 2, 1, "", "unset_default_float_dtype"], [317, 2, 1, "", "unset_default_int_dtype"], [317, 2, 1, "", "unset_default_uint_dtype"], [321, 2, 1, "", "unset_exception_trace_mode"], [321, 2, 1, "", "unset_nestable_mode"], [321, 2, 1, "", "unset_queue_timeout"], [321, 2, 1, "", "unset_shape_array_mode"], [321, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [322, 2, 1, "", "unset_with_grads"], [398, 2, 1, "", "unstack"], [318, 2, 1, "", "used_mem_on_dev"], [317, 2, 1, "", "valid_dtype"], [322, 2, 1, "", "value_and_grad"], [321, 2, 1, "", "value_is_nan"], [377, 2, 1, "", "vander"], [450, 2, 1, "", "var"], [378, 2, 1, "", "vecdot"], [379, 2, 1, "", "vector_norm"], [380, 2, 1, "", "vector_to_skew_symmetric_matrix"], [321, 2, 1, "", "vmap"], [433, 2, 1, "", "where"], [315, 2, 1, "", "while_loop"], [322, 2, 1, "", "with_grads"], [399, 2, 1, "", "zero_pad"], [316, 2, 1, "", "zeros"], [316, 2, 1, "", "zeros_like"]], "ivy.Container": [[155, 0, 1, "", "abs"], [156, 0, 1, "", "acos"], [157, 0, 1, "", "acosh"], [299, 0, 1, "", "adam_step"], [300, 0, 1, "", "adam_update"], [158, 0, 1, "", "add"], [451, 0, 1, "", "all"], [220, 0, 1, "", "all_equal"], [452, 0, 1, "", "any"], [429, 0, 1, "", "argmax"], [430, 0, 1, "", "argmin"], [438, 0, 1, "", "argsort"], [431, 0, 1, "", "argwhere"], [223, 0, 1, "", "array_equal"], [159, 0, 1, "", "asin"], [160, 0, 1, "", "asinh"], [224, 0, 1, "", "assert_supports_inplace"], [91, 0, 1, "", "astype"], [161, 0, 1, "", "atan"], [162, 0, 1, "", "atan2"], [163, 0, 1, "", "atanh"], [381, 0, 1, "", "binary_cross_entropy"], [164, 0, 1, "", "bitwise_and"], [165, 0, 1, "", "bitwise_invert"], [166, 0, 1, "", "bitwise_left_shift"], [167, 0, 1, "", "bitwise_or"], [168, 0, 1, "", "bitwise_right_shift"], [169, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "broadcast_arrays"], [93, 0, 1, "", "broadcast_to"], [94, 0, 1, "", "can_cast"], [170, 0, 1, "", "ceil"], [351, 0, 1, "", "cholesky"], [384, 0, 1, "", "clip"], [226, 0, 1, "", "clip_matrix_norm"], [227, 0, 1, "", "clip_vector_norm"], [385, 0, 1, "", "concat"], [386, 0, 1, "", "constant_pad"], [337, 0, 1, "", "conv1d"], [338, 0, 1, "", "conv1d_transpose"], [339, 0, 1, "", "conv2d"], [340, 0, 1, "", "conv2d_transpose"], [341, 0, 1, "", "conv3d"], [342, 0, 1, "", "conv3d_transpose"], [171, 0, 1, "", "cos"], [172, 0, 1, "", "cosh"], [352, 0, 1, "", "cross"], [382, 0, 1, "", "cross_entropy"], [441, 0, 1, "", "cumprod"], [442, 0, 1, "", "cumsum"], [173, 0, 1, "", "deg2rad"], [345, 0, 1, "", "depthwise_conv2d"], [353, 0, 1, "", "det"], [135, 0, 1, "", "dev"], [354, 0, 1, "", "diag"], [355, 0, 1, "", "diagonal"], [174, 0, 1, "", "divide"], [346, 0, 1, "", "dropout"], [102, 0, 1, "", "dtype"], [356, 0, 1, "", "eig"], [357, 0, 1, "", "eigh"], [358, 0, 1, "", "eigvalsh"], [231, 0, 1, "", "einops_rearrange"], [232, 0, 1, "", "einops_reduce"], [233, 0, 1, "", "einops_repeat"], [443, 0, 1, "", "einsum"], [73, 0, 1, "", "empty_like"], [175, 0, 1, "", "equal"], [176, 0, 1, "", "erf"], [177, 0, 1, "", "exp"], [387, 0, 1, "", "expand_dims"], [178, 0, 1, "", "expm1"], [104, 0, 1, "", "finfo"], [388, 0, 1, "", "flip"], [179, 0, 1, "", "floor"], [180, 0, 1, "", "floor_divide"], [181, 0, 1, "", "fmod"], [235, 0, 1, "", "fourier_encode"], [75, 0, 1, "", "from_dlpack"], [77, 0, 1, "", "full_like"], [238, 0, 1, "", "gather"], [239, 0, 1, "", "gather_nd"], [52, 0, 1, "", "gelu"], [53, 0, 1, "", "get"], [247, 0, 1, "", "get_num_dims"], [303, 0, 1, "", "gradient_descent_update"], [182, 0, 1, "", "greater"], [183, 0, 1, "", "greater_equal"], [252, 0, 1, "", "has_nans"], [107, 0, 1, "", "iinfo"], [359, 0, 1, "", "inner"], [254, 0, 1, "", "inplace_decrement"], [255, 0, 1, "", "inplace_increment"], [256, 0, 1, "", "inplace_update"], [360, 0, 1, "", "inv"], [258, 0, 1, "", "is_array"], [110, 0, 1, "", "is_bool_dtype"], [111, 0, 1, "", "is_complex_dtype"], [112, 0, 1, "", "is_float_dtype"], [113, 0, 1, "", "is_int_dtype"], [259, 0, 1, "", "is_ivy_array"], [261, 0, 1, "", "is_native_array"], [115, 0, 1, "", "is_uint_dtype"], [184, 0, 1, "", "isfinite"], [262, 0, 1, "", "isin"], [185, 0, 1, "", "isinf"], [186, 0, 1, "", "isnan"], [187, 0, 1, "", "isreal"], [264, 0, 1, "", "itemsize"], [305, 0, 1, "", "lamb_update"], [306, 0, 1, "", "lars_update"], [422, 0, 1, "", "layer_norm"], [54, 0, 1, "", "leaky_relu"], [188, 0, 1, "", "less"], [189, 0, 1, "", "less_equal"], [347, 0, 1, "", "linear"], [78, 0, 1, "", "linspace"], [190, 0, 1, "", "log"], [191, 0, 1, "", "log10"], [192, 0, 1, "", "log1p"], [193, 0, 1, "", "log2"], [55, 0, 1, "", "log_softmax"], [194, 0, 1, "", "logaddexp"], [195, 0, 1, "", "logical_and"], [196, 0, 1, "", "logical_not"], [197, 0, 1, "", "logical_or"], [198, 0, 1, "", "logical_xor"], [79, 0, 1, "", "logspace"], [348, 0, 1, "", "lstm_update"], [362, 0, 1, "", "matmul"], [363, 0, 1, "", "matrix_norm"], [364, 0, 1, "", "matrix_power"], [365, 0, 1, "", "matrix_rank"], [366, 0, 1, "", "matrix_transpose"], [444, 0, 1, "", "max"], [199, 0, 1, "", "maximum"], [445, 0, 1, "", "mean"], [80, 0, 1, "", "meshgrid"], [446, 0, 1, "", "min"], [200, 0, 1, "", "minimum"], [56, 0, 1, "", "mish"], [349, 0, 1, "", "multi_head_attention"], [423, 0, 1, "", "multinomial"], [201, 0, 1, "", "multiply"], [81, 0, 1, "", "native_array"], [202, 0, 1, "", "negative"], [432, 0, 1, "", "nonzero"], [203, 0, 1, "", "not_equal"], [82, 0, 1, "", "one_hot"], [84, 0, 1, "", "ones_like"], [307, 0, 1, "", "optimizer_update"], [367, 0, 1, "", "outer"], [389, 0, 1, "", "permute_dims"], [368, 0, 1, "", "pinv"], [204, 0, 1, "", "positive"], [205, 0, 1, "", "pow"], [447, 0, 1, "", "prod"], [369, 0, 1, "", "qr"], [206, 0, 1, "", "rad2deg"], [424, 0, 1, "", "randint"], [425, 0, 1, "", "random_normal"], [426, 0, 1, "", "random_uniform"], [207, 0, 1, "", "reciprocal"], [57, 0, 1, "", "relu"], [208, 0, 1, "", "remainder"], [390, 0, 1, "", "repeat"], [391, 0, 1, "", "reshape"], [118, 0, 1, "", "result_type"], [392, 0, 1, "", "roll"], [209, 0, 1, "", "round"], [350, 0, 1, "", "scaled_dot_product_attention"], [269, 0, 1, "", "scatter_flat"], [270, 0, 1, "", "scatter_nd"], [439, 0, 1, "", "searchsorted"], [428, 0, 1, "", "shuffle"], [58, 0, 1, "", "sigmoid"], [210, 0, 1, "", "sign"], [211, 0, 1, "", "sin"], [212, 0, 1, "", "sinh"], [370, 0, 1, "", "slogdet"], [59, 0, 1, "", "softmax"], [60, 0, 1, "", "softplus"], [371, 0, 1, "", "solve"], [440, 0, 1, "", "sort"], [383, 0, 1, "", "sparse_cross_entropy"], [393, 0, 1, "", "split"], [213, 0, 1, "", "sqrt"], [214, 0, 1, "", "square"], [394, 0, 1, "", "squeeze"], [282, 0, 1, "", "stable_divide"], [283, 0, 1, "", "stable_pow"], [395, 0, 1, "", "stack"], [448, 0, 1, "", "std"], [309, 0, 1, "", "stop_gradient"], [215, 0, 1, "", "subtract"], [449, 0, 1, "", "sum"], [284, 0, 1, "", "supports_inplace_updates"], [372, 0, 1, "", "svd"], [373, 0, 1, "", "svdvals"], [396, 0, 1, "", "swapaxes"], [216, 0, 1, "", "tan"], [217, 0, 1, "", "tanh"], [374, 0, 1, "", "tensordot"], [375, 0, 1, "", "tensorsolve"], [397, 0, 1, "", "tile"], [150, 0, 1, "", "to_device"], [286, 0, 1, "", "to_list"], [288, 0, 1, "", "to_numpy"], [289, 0, 1, "", "to_scalar"], [376, 0, 1, "", "trace"], [85, 0, 1, "", "tril"], [86, 0, 1, "", "triu"], [218, 0, 1, "", "trunc"], [219, 0, 1, "", "trunc_divide"], [434, 0, 1, "", "unique_all"], [435, 0, 1, "", "unique_counts"], [436, 0, 1, "", "unique_inverse"], [437, 0, 1, "", "unique_values"], [398, 0, 1, "", "unstack"], [297, 0, 1, "", "value_is_nan"], [377, 0, 1, "", "vander"], [450, 0, 1, "", "var"], [378, 0, 1, "", "vecdot"], [379, 0, 1, "", "vector_norm"], [380, 0, 1, "", "vector_to_skew_symmetric_matrix"], [433, 0, 1, "", "where"], [399, 0, 1, "", "zero_pad"], [88, 0, 1, "", "zeros_like"]], "ivy.data_classes.array": [[2, 3, 0, "-", "activations"], [47, 3, 0, "-", "array"], [3, 3, 0, "-", "conversions"], [4, 3, 0, "-", "creation"], [5, 3, 0, "-", "data_type"], [6, 3, 0, "-", "device"], [7, 3, 0, "-", "elementwise"], [8, 3, 0, "-", "experimental"], [9, 3, 0, "-", "general"], [10, 3, 0, "-", "gradients"], [11, 3, 0, "-", "image"], [12, 3, 0, "-", "layers"], [13, 3, 0, "-", "linear_algebra"], [14, 3, 0, "-", "losses"], [15, 3, 0, "-", "manipulation"], [16, 3, 0, "-", "norms"], [17, 3, 0, "-", "random"], [18, 3, 0, "-", "searching"], [19, 3, 0, "-", "set"], [20, 3, 0, "-", "sorting"], [21, 3, 0, "-", "statistical"], [22, 3, 0, "-", "utility"], [23, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[2, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[2, 4, 1, "", "_abc_impl"], [2, 0, 1, "", "gelu"], [2, 0, 1, "", "leaky_relu"], [2, 0, 1, "", "log_softmax"], [2, 0, 1, "", "mish"], [2, 0, 1, "", "relu"], [2, 0, 1, "", "sigmoid"], [2, 0, 1, "", "softmax"], [2, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[47, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[47, 5, 1, "", "T"], [47, 0, 1, "", "__abs__"], [47, 0, 1, "", "__add__"], [47, 0, 1, "", "__eq__"], [47, 0, 1, "", "__ge__"], [47, 0, 1, "", "__gt__"], [47, 0, 1, "", "__init__"], [47, 0, 1, "", "__le__"], [47, 0, 1, "", "__lt__"], [47, 0, 1, "", "__ne__"], [47, 0, 1, "", "__pow__"], [47, 0, 1, "", "__radd__"], [47, 0, 1, "", "__rrshift__"], [47, 0, 1, "", "__rshift__"], [47, 0, 1, "", "__rsub__"], [47, 0, 1, "", "__sub__"], [47, 0, 1, "", "__truediv__"], [47, 0, 1, "", "__xor__"], [47, 5, 1, "", "base"], [47, 5, 1, "", "data"], [47, 5, 1, "", "device"], [47, 5, 1, "", "dtype"], [47, 5, 1, "", "dynamic_backend"], [47, 5, 1, "", "itemsize"], [47, 5, 1, "", "mT"], [47, 5, 1, "", "ndim"], [47, 5, 1, "", "shape"], [47, 5, 1, "", "size"]], "ivy.data_classes.array.conversions": [[3, 2, 1, "", "_to_ivy"], [3, 2, 1, "", "_to_native"], [3, 2, 1, "", "args_to_ivy"], [3, 2, 1, "", "args_to_native"], [3, 2, 1, "", "to_ivy"], [3, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[4, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "asarray"], [4, 0, 1, "", "copy_array"], [4, 0, 1, "", "empty_like"], [4, 0, 1, "", "from_dlpack"], [4, 0, 1, "", "full_like"], [4, 0, 1, "", "linspace"], [4, 0, 1, "", "logspace"], [4, 0, 1, "", "meshgrid"], [4, 0, 1, "", "native_array"], [4, 0, 1, "", "one_hot"], [4, 0, 1, "", "ones_like"], [4, 0, 1, "", "tril"], [4, 0, 1, "", "triu"], [4, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[5, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "astype"], [5, 0, 1, "", "broadcast_arrays"], [5, 0, 1, "", "broadcast_to"], [5, 0, 1, "", "can_cast"], [5, 0, 1, "", "dtype"], [5, 0, 1, "", "finfo"], [5, 0, 1, "", "iinfo"], [5, 0, 1, "", "is_bool_dtype"], [5, 0, 1, "", "is_float_dtype"], [5, 0, 1, "", "is_int_dtype"], [5, 0, 1, "", "is_uint_dtype"], [5, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[6, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "dev"], [6, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[7, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "abs"], [7, 0, 1, "", "acos"], [7, 0, 1, "", "acosh"], [7, 0, 1, "", "add"], [7, 0, 1, "", "asin"], [7, 0, 1, "", "asinh"], [7, 0, 1, "", "atan"], [7, 0, 1, "", "atan2"], [7, 0, 1, "", "atanh"], [7, 0, 1, "", "bitwise_and"], [7, 0, 1, "", "bitwise_invert"], [7, 0, 1, "", "bitwise_left_shift"], [7, 0, 1, "", "bitwise_or"], [7, 0, 1, "", "bitwise_right_shift"], [7, 0, 1, "", "bitwise_xor"], [7, 0, 1, "", "ceil"], [7, 0, 1, "", "cos"], [7, 0, 1, "", "cosh"], [7, 0, 1, "", "deg2rad"], [7, 0, 1, "", "divide"], [7, 0, 1, "", "equal"], [7, 0, 1, "", "erf"], [7, 0, 1, "", "exp"], [7, 0, 1, "", "expm1"], [7, 0, 1, "", "floor"], [7, 0, 1, "", "floor_divide"], [7, 0, 1, "", "greater"], [7, 0, 1, "", "greater_equal"], [7, 0, 1, "", "isfinite"], [7, 0, 1, "", "isinf"], [7, 0, 1, "", "isnan"], [7, 0, 1, "", "isreal"], [7, 0, 1, "", "less"], [7, 0, 1, "", "less_equal"], [7, 0, 1, "", "log"], [7, 0, 1, "", "log10"], [7, 0, 1, "", "log1p"], [7, 0, 1, "", "log2"], [7, 0, 1, "", "logaddexp"], [7, 0, 1, "", "logical_and"], [7, 0, 1, "", "logical_not"], [7, 0, 1, "", "logical_or"], [7, 0, 1, "", "logical_xor"], [7, 0, 1, "", "maximum"], [7, 0, 1, "", "minimum"], [7, 0, 1, "", "multiply"], [7, 0, 1, "", "negative"], [7, 0, 1, "", "not_equal"], [7, 0, 1, "", "positive"], [7, 0, 1, "", "pow"], [7, 0, 1, "", "rad2deg"], [7, 0, 1, "", "reciprocal"], [7, 0, 1, "", "remainder"], [7, 0, 1, "", "round"], [7, 0, 1, "", "sign"], [7, 0, 1, "", "sin"], [7, 0, 1, "", "sinh"], [7, 0, 1, "", "sqrt"], [7, 0, 1, "", "square"], [7, 0, 1, "", "subtract"], [7, 0, 1, "", "tan"], [7, 0, 1, "", "tanh"], [7, 0, 1, "", "trunc"], [7, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[8, 3, 0, "-", "activations"], [8, 3, 0, "-", "conversions"], [8, 3, 0, "-", "creation"], [8, 3, 0, "-", "data_type"], [8, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [8, 3, 0, "-", "general"], [8, 3, 0, "-", "gradients"], [8, 3, 0, "-", "image"], [8, 3, 0, "-", "layers"], [8, 3, 0, "-", "linear_algebra"], [8, 3, 0, "-", "losses"], [8, 3, 0, "-", "manipulation"], [8, 3, 0, "-", "norms"], [8, 3, 0, "-", "random"], [8, 3, 0, "-", "searching"], [8, 3, 0, "-", "set"], [8, 3, 0, "-", "sorting"], [8, 3, 0, "-", "statistical"], [8, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[8, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "logit"], [8, 0, 1, "", "logsigmoid"], [8, 0, 1, "", "prelu"], [8, 0, 1, "", "relu6"], [8, 0, 1, "", "selu"], [8, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[8, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[8, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "eye_like"]], "ivy.data_classes.array.experimental.data_type": [[8, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[8, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[8, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "allclose"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "binarizer"], [8, 0, 1, "", "conj"], [8, 0, 1, "", "copysign"], [8, 0, 1, "", "count_nonzero"], [8, 0, 1, "", "diff"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "fix"], [8, 0, 1, "", "float_power"], [8, 0, 1, "", "fmax"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "fmod"], [8, 0, 1, "", "frexp"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "gradient"], [8, 0, 1, "", "hypot"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isclose"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "ldexp"], [8, 0, 1, "", "lerp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "nansum"], [8, 0, 1, "", "nextafter"], [8, 0, 1, "", "real"], [8, 0, 1, "", "signbit"], [8, 0, 1, "", "sinc"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "xlogy"], [8, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[8, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.gradients": [[8, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[8, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[8, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adaptive_avg_pool1d"], [8, 0, 1, "", "adaptive_avg_pool2d"], [8, 0, 1, "", "avg_pool1d"], [8, 0, 1, "", "avg_pool2d"], [8, 0, 1, "", "avg_pool3d"], [8, 0, 1, "", "dct"], [8, 0, 1, "", "dft"], [8, 0, 1, "", "embedding"], [8, 0, 1, "", "fft"], [8, 0, 1, "", "ifft"], [8, 0, 1, "", "interpolate"], [8, 0, 1, "", "max_pool1d"], [8, 0, 1, "", "max_pool2d"], [8, 0, 1, "", "max_pool3d"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adjoint"], [8, 0, 1, "", "cond"], [8, 0, 1, "", "cov"], [8, 0, 1, "", "diagflat"], [8, 0, 1, "", "eig"], [8, 0, 1, "", "eigh_tridiagonal"], [8, 0, 1, "", "eigvals"], [8, 0, 1, "", "kron"], [8, 0, 1, "", "matrix_exp"], [8, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[8, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[8, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "as_strided"], [8, 0, 1, "", "atleast_1d"], [8, 0, 1, "", "atleast_2d"], [8, 0, 1, "", "atleast_3d"], [8, 0, 1, "", "concat_from_sequence"], [8, 0, 1, "", "dsplit"], [8, 0, 1, "", "dstack"], [8, 0, 1, "", "expand"], [8, 0, 1, "", "flatten"], [8, 0, 1, "", "fliplr"], [8, 0, 1, "", "flipud"], [8, 0, 1, "", "heaviside"], [8, 0, 1, "", "hsplit"], [8, 0, 1, "", "hstack"], [8, 0, 1, "", "i0"], [8, 0, 1, "", "moveaxis"], [8, 0, 1, "", "pad"], [8, 0, 1, "", "rot90"], [8, 0, 1, "", "take_along_axis"], [8, 0, 1, "", "top_k"], [8, 0, 1, "", "vsplit"], [8, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[8, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "batch_norm"], [8, 0, 1, "", "instance_norm"], [8, 0, 1, "", "l2_normalize"], [8, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[8, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bernoulli"], [8, 0, 1, "", "beta"], [8, 0, 1, "", "dirichlet"], [8, 0, 1, "", "gamma"], [8, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[8, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[8, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[8, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "lexsort"], [8, 0, 1, "", "msort"]], "ivy.data_classes.array.experimental.statistical": [[8, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bincount"], [8, 0, 1, "", "corrcoef"], [8, 0, 1, "", "median"], [8, 0, 1, "", "nanmean"], [8, 0, 1, "", "nanmedian"], [8, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[8, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[9, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "all_equal"], [9, 0, 1, "", "array_equal"], [9, 0, 1, "", "assert_supports_inplace"], [9, 0, 1, "", "clip_matrix_norm"], [9, 0, 1, "", "clip_vector_norm"], [9, 0, 1, "", "default"], [9, 0, 1, "", "einops_rearrange"], [9, 0, 1, "", "einops_reduce"], [9, 0, 1, "", "einops_repeat"], [9, 0, 1, "", "exists"], [9, 0, 1, "", "fourier_encode"], [9, 0, 1, "", "gather"], [9, 0, 1, "", "gather_nd"], [9, 0, 1, "", "get_num_dims"], [9, 0, 1, "", "has_nans"], [9, 0, 1, "", "inplace_decrement"], [9, 0, 1, "", "inplace_increment"], [9, 0, 1, "", "inplace_update"], [9, 0, 1, "", "is_array"], [9, 0, 1, "", "is_ivy_array"], [9, 0, 1, "", "is_ivy_container"], [9, 0, 1, "", "is_native_array"], [9, 0, 1, "", "isin"], [9, 0, 1, "", "scatter_flat"], [9, 0, 1, "", "scatter_nd"], [9, 0, 1, "", "stable_divide"], [9, 0, 1, "", "stable_pow"], [9, 0, 1, "", "supports_inplace_updates"], [9, 0, 1, "", "to_list"], [9, 0, 1, "", "to_numpy"], [9, 0, 1, "", "to_scalar"], [9, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[10, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "adam_step"], [10, 0, 1, "", "adam_update"], [10, 0, 1, "", "gradient_descent_update"], [10, 0, 1, "", "lamb_update"], [10, 0, 1, "", "lars_update"], [10, 0, 1, "", "optimizer_update"], [10, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[11, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[11, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[12, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "conv1d"], [12, 0, 1, "", "conv1d_transpose"], [12, 0, 1, "", "conv2d"], [12, 0, 1, "", "conv2d_transpose"], [12, 0, 1, "", "conv3d"], [12, 0, 1, "", "conv3d_transpose"], [12, 0, 1, "", "depthwise_conv2d"], [12, 0, 1, "", "dropout"], [12, 0, 1, "", "dropout1d"], [12, 0, 1, "", "dropout3d"], [12, 0, 1, "", "linear"], [12, 0, 1, "", "lstm_update"], [12, 0, 1, "", "multi_head_attention"], [12, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[13, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "cholesky"], [13, 0, 1, "", "cross"], [13, 0, 1, "", "det"], [13, 0, 1, "", "diag"], [13, 0, 1, "", "diagonal"], [13, 0, 1, "", "eig"], [13, 0, 1, "", "eigh"], [13, 0, 1, "", "eigvalsh"], [13, 0, 1, "", "inner"], [13, 0, 1, "", "inv"], [13, 0, 1, "", "matmul"], [13, 0, 1, "", "matrix_norm"], [13, 0, 1, "", "matrix_power"], [13, 0, 1, "", "matrix_rank"], [13, 0, 1, "", "matrix_transpose"], [13, 0, 1, "", "outer"], [13, 0, 1, "", "pinv"], [13, 0, 1, "", "qr"], [13, 0, 1, "", "slogdet"], [13, 0, 1, "", "solve"], [13, 0, 1, "", "svd"], [13, 0, 1, "", "svdvals"], [13, 0, 1, "", "tensordot"], [13, 0, 1, "", "tensorsolve"], [13, 0, 1, "", "trace"], [13, 0, 1, "", "vander"], [13, 0, 1, "", "vecdot"], [13, 0, 1, "", "vector_norm"], [13, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[14, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "binary_cross_entropy"], [14, 0, 1, "", "cross_entropy"], [14, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[15, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "clip"], [15, 0, 1, "", "concat"], [15, 0, 1, "", "constant_pad"], [15, 0, 1, "", "expand_dims"], [15, 0, 1, "", "flip"], [15, 0, 1, "", "permute_dims"], [15, 0, 1, "", "repeat"], [15, 0, 1, "", "reshape"], [15, 0, 1, "", "roll"], [15, 0, 1, "", "split"], [15, 0, 1, "", "squeeze"], [15, 0, 1, "", "stack"], [15, 0, 1, "", "swapaxes"], [15, 0, 1, "", "tile"], [15, 0, 1, "", "unstack"], [15, 0, 1, "", "view"], [15, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[16, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[17, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "multinomial"], [17, 0, 1, "", "randint"], [17, 0, 1, "", "random_normal"], [17, 0, 1, "", "random_uniform"], [17, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[18, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "argmax"], [18, 0, 1, "", "argmin"], [18, 0, 1, "", "argwhere"], [18, 0, 1, "", "nonzero"], [18, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[19, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "unique_all"], [19, 0, 1, "", "unique_counts"], [19, 0, 1, "", "unique_inverse"], [19, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[20, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "argsort"], [20, 0, 1, "", "searchsorted"], [20, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[21, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "cumprod"], [21, 0, 1, "", "cumsum"], [21, 0, 1, "", "einsum"], [21, 0, 1, "", "max"], [21, 0, 1, "", "mean"], [21, 0, 1, "", "min"], [21, 0, 1, "", "prod"], [21, 0, 1, "", "std"], [21, 0, 1, "", "sum"], [21, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[22, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "all"], [22, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[23, 2, 1, "", "_wrap_function"], [23, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[24, 3, 0, "-", "activations"], [25, 3, 0, "-", "base"], [48, 3, 0, "-", "container"], [26, 3, 0, "-", "conversions"], [27, 3, 0, "-", "creation"], [28, 3, 0, "-", "data_type"], [29, 3, 0, "-", "device"], [30, 3, 0, "-", "elementwise"], [31, 3, 0, "-", "experimental"], [32, 3, 0, "-", "general"], [33, 3, 0, "-", "gradients"], [34, 3, 0, "-", "image"], [35, 3, 0, "-", "layers"], [36, 3, 0, "-", "linear_algebra"], [37, 3, 0, "-", "losses"], [38, 3, 0, "-", "manipulation"], [39, 3, 0, "-", "norms"], [40, 3, 0, "-", "random"], [41, 3, 0, "-", "searching"], [42, 3, 0, "-", "set"], [43, 3, 0, "-", "sorting"], [44, 3, 0, "-", "statistical"], [45, 3, 0, "-", "utility"], [46, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[24, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "_static_gelu"], [24, 0, 1, "", "_static_leaky_relu"], [24, 0, 1, "", "_static_log_softmax"], [24, 0, 1, "", "_static_mish"], [24, 0, 1, "", "_static_relu"], [24, 0, 1, "", "_static_sigmoid"], [24, 0, 1, "", "_static_softmax"], [24, 0, 1, "", "_static_softplus"], [24, 0, 1, "", "gelu"], [24, 0, 1, "", "leaky_relu"], [24, 0, 1, "", "log_softmax"], [24, 0, 1, "", "mish"], [24, 0, 1, "", "relu"], [24, 0, 1, "", "sigmoid"], [24, 0, 1, "", "softmax"], [24, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[25, 1, 1, "", "ContainerBase"], [25, 2, 1, "", "_is_jsonable"], [25, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[25, 0, 1, "", "__getitem__"], [25, 0, 1, "", "__init__"], [25, 0, 1, "", "__setitem__"], [25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [25, 0, 1, "", "_cont_concat_unify"], [25, 0, 1, "", "_cont_get_dev"], [25, 0, 1, "", "_cont_get_shape"], [25, 0, 1, "", "_cont_get_shapes"], [25, 5, 1, "", "_cont_ivy"], [25, 0, 1, "", "_cont_mean_unify"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_slice_keys"], [25, 0, 1, "", "_cont_sum_unify"], [25, 0, 1, "", "_get_queue_item"], [25, 0, 1, "", "cont_all_false"], [25, 0, 1, "", "cont_all_key_chains"], [25, 0, 1, "", "cont_all_true"], [25, 0, 1, "", "cont_as_bools"], [25, 0, 1, "", "cont_assert_contains_sub_container"], [25, 0, 1, "", "cont_assert_contains_sub_structure"], [25, 0, 1, "", "cont_assert_identical"], [25, 0, 1, "", "cont_assert_identical_structure"], [25, 0, 1, "", "cont_at_key_chain"], [25, 0, 1, "", "cont_at_key_chains"], [25, 0, 1, "", "cont_at_keys"], [25, 0, 1, "", "cont_combine"], [25, 0, 1, "", "cont_common_key_chains"], [25, 5, 1, "", "cont_config"], [25, 0, 1, "", "cont_contains_sub_container"], [25, 0, 1, "", "cont_contains_sub_structure"], [25, 0, 1, "", "cont_copy"], [25, 0, 1, "", "cont_create_if_absent"], [25, 0, 1, "", "cont_cutoff_at_depth"], [25, 0, 1, "", "cont_cutoff_at_height"], [25, 0, 1, "", "cont_deep_copy"], [25, 5, 1, "", "cont_dev"], [25, 5, 1, "", "cont_dev_str"], [25, 0, 1, "", "cont_diff"], [25, 0, 1, "", "cont_duplicate_array_keychains"], [25, 0, 1, "", "cont_find_sub_container"], [25, 0, 1, "", "cont_find_sub_structure"], [25, 0, 1, "", "cont_flatten_key_chain"], [25, 0, 1, "", "cont_flatten_key_chains"], [25, 0, 1, "", "cont_format_key_chains"], [25, 0, 1, "", "cont_from_disk_as_hdf5"], [25, 0, 1, "", "cont_from_disk_as_json"], [25, 0, 1, "", "cont_from_disk_as_pickled"], [25, 0, 1, "", "cont_from_flat_list"], [25, 0, 1, "", "cont_handle_inplace"], [25, 0, 1, "", "cont_has_key"], [25, 0, 1, "", "cont_has_key_chain"], [25, 0, 1, "", "cont_identical"], [25, 0, 1, "", "cont_identical_array_shapes"], [25, 0, 1, "", "cont_identical_configs"], [25, 0, 1, "", "cont_identical_structure"], [25, 0, 1, "", "cont_if_exists"], [25, 0, 1, "", "cont_inplace_update"], [25, 5, 1, "", "cont_ivy"], [25, 0, 1, "", "cont_key_chains_containing"], [25, 0, 1, "", "cont_list_join"], [25, 0, 1, "", "cont_list_stack"], [25, 0, 1, "", "cont_map"], [25, 0, 1, "", "cont_map_sub_conts"], [25, 5, 1, "", "cont_max_depth"], [25, 0, 1, "", "cont_multi_map"], [25, 0, 1, "", "cont_multi_map_in_function"], [25, 0, 1, "", "cont_num_arrays"], [25, 0, 1, "", "cont_overwrite_at_key_chain"], [25, 0, 1, "", "cont_overwrite_at_key_chains"], [25, 0, 1, "", "cont_prune_empty"], [25, 0, 1, "", "cont_prune_key_chain"], [25, 0, 1, "", "cont_prune_key_chains"], [25, 0, 1, "", "cont_prune_key_from_key_chains"], [25, 0, 1, "", "cont_prune_keys"], [25, 0, 1, "", "cont_prune_keys_from_key_chains"], [25, 0, 1, "", "cont_reduce"], [25, 0, 1, "", "cont_remove_key_length_limit"], [25, 0, 1, "", "cont_remove_print_limit"], [25, 0, 1, "", "cont_reshape_like"], [25, 0, 1, "", "cont_restructure"], [25, 0, 1, "", "cont_restructure_key_chains"], [25, 0, 1, "", "cont_set_at_key_chain"], [25, 0, 1, "", "cont_set_at_key_chains"], [25, 0, 1, "", "cont_set_at_keys"], [25, 5, 1, "", "cont_shape"], [25, 5, 1, "", "cont_shapes"], [25, 0, 1, "", "cont_show"], [25, 0, 1, "", "cont_show_sub_container"], [25, 0, 1, "", "cont_size_ordered_arrays"], [25, 0, 1, "", "cont_slice_keys"], [25, 0, 1, "", "cont_slice_via_key"], [25, 0, 1, "", "cont_sort_by_key"], [25, 0, 1, "", "cont_structural_diff"], [25, 0, 1, "", "cont_to_dict"], [25, 0, 1, "", "cont_to_disk_as_hdf5"], [25, 0, 1, "", "cont_to_disk_as_json"], [25, 0, 1, "", "cont_to_disk_as_pickled"], [25, 0, 1, "", "cont_to_flat_list"], [25, 0, 1, "", "cont_to_iterator"], [25, 0, 1, "", "cont_to_iterator_keys"], [25, 0, 1, "", "cont_to_iterator_values"], [25, 0, 1, "", "cont_to_jsonable"], [25, 0, 1, "", "cont_to_nested_list"], [25, 0, 1, "", "cont_to_raw"], [25, 0, 1, "", "cont_trim_key"], [25, 0, 1, "", "cont_try_kc"], [25, 0, 1, "", "cont_unify"], [25, 0, 1, "", "cont_unstack_conts"], [25, 0, 1, "", "cont_update_config"], [25, 0, 1, "", "cont_with_default_key_color"], [25, 0, 1, "", "cont_with_entries_as_lists"], [25, 0, 1, "", "cont_with_ivy_backend"], [25, 0, 1, "", "cont_with_key_length_limit"], [25, 0, 1, "", "cont_with_print_indent"], [25, 0, 1, "", "cont_with_print_limit"], [25, 0, 1, "", "cont_with_print_line_spacing"], [25, 5, 1, "", "dynamic_backend"], [25, 0, 1, "", "h5_file_size"], [25, 0, 1, "", "shuffle_h5_file"], [25, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[48, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[48, 0, 1, "", "__abs__"], [48, 0, 1, "", "__add__"], [48, 0, 1, "", "__eq__"], [48, 0, 1, "", "__ge__"], [48, 0, 1, "", "__gt__"], [48, 0, 1, "", "__init__"], [48, 0, 1, "", "__le__"], [48, 0, 1, "", "__lt__"], [48, 0, 1, "", "__ne__"], [48, 0, 1, "", "__pow__"], [48, 0, 1, "", "__radd__"], [48, 0, 1, "", "__rrshift__"], [48, 0, 1, "", "__rshift__"], [48, 0, 1, "", "__rsub__"], [48, 0, 1, "", "__sub__"], [48, 0, 1, "", "__truediv__"], [48, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[26, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_static_to_ivy"], [26, 0, 1, "", "_static_to_native"], [26, 0, 1, "", "to_ivy"], [26, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[27, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_arange"], [27, 0, 1, "", "_static_asarray"], [27, 0, 1, "", "_static_empty"], [27, 0, 1, "", "_static_empty_like"], [27, 0, 1, "", "_static_eye"], [27, 0, 1, "", "_static_from_dlpack"], [27, 0, 1, "", "_static_full_like"], [27, 0, 1, "", "_static_linspace"], [27, 0, 1, "", "_static_logspace"], [27, 0, 1, "", "_static_meshgrid"], [27, 0, 1, "", "_static_native_array"], [27, 0, 1, "", "_static_one_hot"], [27, 0, 1, "", "_static_ones"], [27, 0, 1, "", "_static_ones_like"], [27, 0, 1, "", "_static_tril"], [27, 0, 1, "", "_static_triu"], [27, 0, 1, "", "_static_zeros"], [27, 0, 1, "", "_static_zeros_like"], [27, 0, 1, "", "empty_like"], [27, 0, 1, "", "from_dlpack"], [27, 0, 1, "", "full_like"], [27, 0, 1, "", "linspace"], [27, 0, 1, "", "logspace"], [27, 0, 1, "", "meshgrid"], [27, 0, 1, "", "native_array"], [27, 0, 1, "", "one_hot"], [27, 0, 1, "", "ones_like"], [27, 0, 1, "", "tril"], [27, 0, 1, "", "triu"], [27, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[28, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_astype"], [28, 0, 1, "", "_static_broadcast_arrays"], [28, 0, 1, "", "_static_broadcast_to"], [28, 0, 1, "", "_static_can_cast"], [28, 0, 1, "", "_static_default_complex_dtype"], [28, 0, 1, "", "_static_default_float_dtype"], [28, 0, 1, "", "_static_dtype"], [28, 0, 1, "", "_static_finfo"], [28, 0, 1, "", "_static_function_supported_dtypes"], [28, 0, 1, "", "_static_function_unsupported_dtypes"], [28, 0, 1, "", "_static_iinfo"], [28, 0, 1, "", "_static_is_bool_dtype"], [28, 0, 1, "", "_static_is_complex_dtype"], [28, 0, 1, "", "_static_is_float_dtype"], [28, 0, 1, "", "_static_is_int_dtype"], [28, 0, 1, "", "_static_is_uint_dtype"], [28, 0, 1, "", "_static_result_type"], [28, 0, 1, "", "astype"], [28, 0, 1, "", "broadcast_arrays"], [28, 0, 1, "", "broadcast_to"], [28, 0, 1, "", "can_cast"], [28, 0, 1, "", "dtype"], [28, 0, 1, "", "finfo"], [28, 0, 1, "", "iinfo"], [28, 0, 1, "", "is_bool_dtype"], [28, 0, 1, "", "is_complex_dtype"], [28, 0, 1, "", "is_float_dtype"], [28, 0, 1, "", "is_int_dtype"], [28, 0, 1, "", "is_uint_dtype"], [28, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[29, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_dev"], [29, 0, 1, "", "_static_to_device"], [29, 0, 1, "", "dev"], [29, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[30, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_abs"], [30, 0, 1, "", "_static_acos"], [30, 0, 1, "", "_static_acosh"], [30, 0, 1, "", "_static_add"], [30, 0, 1, "", "_static_asin"], [30, 0, 1, "", "_static_asinh"], [30, 0, 1, "", "_static_atan"], [30, 0, 1, "", "_static_atan2"], [30, 0, 1, "", "_static_atanh"], [30, 0, 1, "", "_static_bitwise_and"], [30, 0, 1, "", "_static_bitwise_invert"], [30, 0, 1, "", "_static_bitwise_left_shift"], [30, 0, 1, "", "_static_bitwise_or"], [30, 0, 1, "", "_static_bitwise_right_shift"], [30, 0, 1, "", "_static_bitwise_xor"], [30, 0, 1, "", "_static_ceil"], [30, 0, 1, "", "_static_cos"], [30, 0, 1, "", "_static_cosh"], [30, 0, 1, "", "_static_deg2rad"], [30, 0, 1, "", "_static_divide"], [30, 0, 1, "", "_static_equal"], [30, 0, 1, "", "_static_erf"], [30, 0, 1, "", "_static_exp"], [30, 0, 1, "", "_static_expm1"], [30, 0, 1, "", "_static_floor"], [30, 0, 1, "", "_static_floor_divide"], [30, 0, 1, "", "_static_greater"], [30, 0, 1, "", "_static_greater_equal"], [30, 0, 1, "", "_static_isfinite"], [30, 0, 1, "", "_static_isinf"], [30, 0, 1, "", "_static_isnan"], [30, 0, 1, "", "_static_isreal"], [30, 0, 1, "", "_static_less"], [30, 0, 1, "", "_static_less_equal"], [30, 0, 1, "", "_static_log"], [30, 0, 1, "", "_static_log10"], [30, 0, 1, "", "_static_log1p"], [30, 0, 1, "", "_static_log2"], [30, 0, 1, "", "_static_logaddexp"], [30, 0, 1, "", "_static_logical_and"], [30, 0, 1, "", "_static_logical_not"], [30, 0, 1, "", "_static_logical_or"], [30, 0, 1, "", "_static_logical_xor"], [30, 0, 1, "", "_static_maximum"], [30, 0, 1, "", "_static_minimum"], [30, 0, 1, "", "_static_multiply"], [30, 0, 1, "", "_static_negative"], [30, 0, 1, "", "_static_not_equal"], [30, 0, 1, "", "_static_positive"], [30, 0, 1, "", "_static_pow"], [30, 0, 1, "", "_static_rad2deg"], [30, 0, 1, "", "_static_reciprocal"], [30, 0, 1, "", "_static_remainder"], [30, 0, 1, "", "_static_round"], [30, 0, 1, "", "_static_sign"], [30, 0, 1, "", "_static_sin"], [30, 0, 1, "", "_static_sinh"], [30, 0, 1, "", "_static_sqrt"], [30, 0, 1, "", "_static_square"], [30, 0, 1, "", "_static_subtract"], [30, 0, 1, "", "_static_tan"], [30, 0, 1, "", "_static_tanh"], [30, 0, 1, "", "_static_trapz"], [30, 0, 1, "", "_static_trunc"], [30, 0, 1, "", "_static_trunc_divide"], [30, 0, 1, "", "abs"], [30, 0, 1, "", "acos"], [30, 0, 1, "", "acosh"], [30, 0, 1, "", "add"], [30, 0, 1, "", "asin"], [30, 0, 1, "", "asinh"], [30, 0, 1, "", "atan"], [30, 0, 1, "", "atan2"], [30, 0, 1, "", "atanh"], [30, 0, 1, "", "bitwise_and"], [30, 0, 1, "", "bitwise_invert"], [30, 0, 1, "", "bitwise_left_shift"], [30, 0, 1, "", "bitwise_or"], [30, 0, 1, "", "bitwise_right_shift"], [30, 0, 1, "", "bitwise_xor"], [30, 0, 1, "", "ceil"], [30, 0, 1, "", "cos"], [30, 0, 1, "", "cosh"], [30, 0, 1, "", "deg2rad"], [30, 0, 1, "", "divide"], [30, 0, 1, "", "equal"], [30, 0, 1, "", "erf"], [30, 0, 1, "", "exp"], [30, 0, 1, "", "expm1"], [30, 0, 1, "", "floor"], [30, 0, 1, "", "floor_divide"], [30, 0, 1, "", "greater"], [30, 0, 1, "", "greater_equal"], [30, 0, 1, "", "isfinite"], [30, 0, 1, "", "isinf"], [30, 0, 1, "", "isnan"], [30, 0, 1, "", "isreal"], [30, 0, 1, "", "less"], [30, 0, 1, "", "less_equal"], [30, 0, 1, "", "log"], [30, 0, 1, "", "log10"], [30, 0, 1, "", "log1p"], [30, 0, 1, "", "log2"], [30, 0, 1, "", "logaddexp"], [30, 0, 1, "", "logical_and"], [30, 0, 1, "", "logical_not"], [30, 0, 1, "", "logical_or"], [30, 0, 1, "", "logical_xor"], [30, 0, 1, "", "maximum"], [30, 0, 1, "", "minimum"], [30, 0, 1, "", "multiply"], [30, 0, 1, "", "negative"], [30, 0, 1, "", "not_equal"], [30, 0, 1, "", "positive"], [30, 0, 1, "", "pow"], [30, 0, 1, "", "rad2deg"], [30, 0, 1, "", "reciprocal"], [30, 0, 1, "", "remainder"], [30, 0, 1, "", "round"], [30, 0, 1, "", "sign"], [30, 0, 1, "", "sin"], [30, 0, 1, "", "sinh"], [30, 0, 1, "", "sqrt"], [30, 0, 1, "", "square"], [30, 0, 1, "", "subtract"], [30, 0, 1, "", "tan"], [30, 0, 1, "", "tanh"], [30, 0, 1, "", "trapz"], [30, 0, 1, "", "trunc"], [30, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[31, 3, 0, "-", "activations"], [31, 3, 0, "-", "conversions"], [31, 3, 0, "-", "creation"], [31, 3, 0, "-", "data_type"], [31, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [31, 3, 0, "-", "general"], [31, 3, 0, "-", "gradients"], [31, 3, 0, "-", "image"], [31, 3, 0, "-", "layers"], [31, 3, 0, "-", "linear_algebra"], [31, 3, 0, "-", "losses"], [31, 3, 0, "-", "manipulation"], [31, 3, 0, "-", "norms"], [31, 3, 0, "-", "random"], [31, 3, 0, "-", "searching"], [31, 3, 0, "-", "set"], [31, 3, 0, "-", "sorting"], [31, 3, 0, "-", "statistical"], [31, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[31, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "logit"], [31, 0, 1, "", "logsigmoid"], [31, 0, 1, "", "prelu"], [31, 0, 1, "", "relu6"], [31, 0, 1, "", "selu"], [31, 0, 1, "", "static_logit"], [31, 0, 1, "", "static_logsigmoid"], [31, 0, 1, "", "static_prelu"], [31, 0, 1, "", "static_relu6"], [31, 0, 1, "", "static_selu"], [31, 0, 1, "", "static_thresholded_relu"], [31, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[31, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[31, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "eye_like"], [31, 0, 1, "", "frombuffer"], [31, 0, 1, "", "hamming_window"], [31, 0, 1, "", "hann_window"], [31, 0, 1, "", "kaiser_bessel_derived_window"], [31, 0, 1, "", "kaiser_window"], [31, 0, 1, "", "static_eye_like"], [31, 0, 1, "", "static_frombuffer"], [31, 0, 1, "", "static_hamming_window"], [31, 0, 1, "", "static_hann_window"], [31, 0, 1, "", "static_kaiser_bessel_derived_window"], [31, 0, 1, "", "static_kaiser_window"], [31, 0, 1, "", "static_tril_indices"], [31, 0, 1, "", "static_triu_indices"], [31, 0, 1, "", "static_vorbis_window"], [31, 0, 1, "", "tril_indices"], [31, 0, 1, "", "triu_indices"], [31, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[31, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[31, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[31, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "allclose"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "binarizer"], [31, 0, 1, "", "conj"], [31, 0, 1, "", "copysign"], [31, 0, 1, "", "count_nonzero"], [31, 0, 1, "", "diff"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "fix"], [31, 0, 1, "", "float_power"], [31, 0, 1, "", "fmax"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "fmod"], [31, 0, 1, "", "frexp"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "gradient"], [31, 0, 1, "", "hypot"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isclose"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "ldexp"], [31, 0, 1, "", "lerp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "nansum"], [31, 0, 1, "", "nextafter"], [31, 0, 1, "", "real"], [31, 0, 1, "", "signbit"], [31, 0, 1, "", "sinc"], [31, 0, 1, "", "static_allclose"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_binarizer"], [31, 0, 1, "", "static_conj"], [31, 0, 1, "", "static_copysign"], [31, 0, 1, "", "static_count_nonzero"], [31, 0, 1, "", "static_diff"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fix"], [31, 0, 1, "", "static_float_power"], [31, 0, 1, "", "static_fmax"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_fmod"], [31, 0, 1, "", "static_frexp"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_gradient"], [31, 0, 1, "", "static_hypot"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_isclose"], [31, 0, 1, "", "static_lcm"], [31, 0, 1, "", "static_ldexp"], [31, 0, 1, "", "static_lerp"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_nansum"], [31, 0, 1, "", "static_nextafter"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "static_signbit"], [31, 0, 1, "", "static_sinc"], [31, 0, 1, "", "static_xlogy"], [31, 0, 1, "", "static_zeta"], [31, 0, 1, "", "xlogy"], [31, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[31, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.gradients": [[31, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[31, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[31, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adaptive_avg_pool1d"], [31, 0, 1, "", "adaptive_avg_pool2d"], [31, 0, 1, "", "avg_pool1d"], [31, 0, 1, "", "avg_pool2d"], [31, 0, 1, "", "avg_pool3d"], [31, 0, 1, "", "dct"], [31, 0, 1, "", "dft"], [31, 0, 1, "", "embedding"], [31, 0, 1, "", "fft"], [31, 0, 1, "", "ifft"], [31, 0, 1, "", "interpolate"], [31, 0, 1, "", "max_pool1d"], [31, 0, 1, "", "max_pool2d"], [31, 0, 1, "", "max_pool3d"], [31, 0, 1, "", "static_adaptive_avg_pool1d"], [31, 0, 1, "", "static_adaptive_avg_pool2d"], [31, 0, 1, "", "static_avg_pool1d"], [31, 0, 1, "", "static_avg_pool2d"], [31, 0, 1, "", "static_avg_pool3d"], [31, 0, 1, "", "static_dct"], [31, 0, 1, "", "static_dft"], [31, 0, 1, "", "static_embedding"], [31, 0, 1, "", "static_fft"], [31, 0, 1, "", "static_ifft"], [31, 0, 1, "", "static_interpolate"], [31, 0, 1, "", "static_max_pool1d"], [31, 0, 1, "", "static_max_pool2d"], [31, 0, 1, "", "static_max_pool3d"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adjoint"], [31, 0, 1, "", "cond"], [31, 0, 1, "", "cov"], [31, 0, 1, "", "diagflat"], [31, 0, 1, "", "eig"], [31, 0, 1, "", "eigh_tridiagonal"], [31, 0, 1, "", "eigvals"], [31, 0, 1, "", "kron"], [31, 0, 1, "", "matrix_exp"], [31, 0, 1, "", "multi_dot"], [31, 0, 1, "", "static_adjoint"], [31, 0, 1, "", "static_cond"], [31, 0, 1, "", "static_cov"], [31, 0, 1, "", "static_diagflat"], [31, 0, 1, "", "static_eig"], [31, 0, 1, "", "static_eigh_tridiagonal"], [31, 0, 1, "", "static_eigvals"], [31, 0, 1, "", "static_kron"], [31, 0, 1, "", "static_matrix_exp"], [31, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.losses": [[31, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "binary_cross_entropy_with_logits"], [31, 0, 1, "", "static_binary_cross_entropy_with_logits"]], "ivy.data_classes.container.experimental.manipulation": [[31, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "as_strided"], [31, 0, 1, "", "atleast_1d"], [31, 0, 1, "", "atleast_2d"], [31, 0, 1, "", "atleast_3d"], [31, 0, 1, "", "broadcast_shapes"], [31, 0, 1, "", "concat_from_sequence"], [31, 0, 1, "", "dsplit"], [31, 0, 1, "", "dstack"], [31, 0, 1, "", "expand"], [31, 0, 1, "", "flatten"], [31, 0, 1, "", "fliplr"], [31, 0, 1, "", "flipud"], [31, 0, 1, "", "heaviside"], [31, 0, 1, "", "hsplit"], [31, 0, 1, "", "hstack"], [31, 0, 1, "", "i0"], [31, 0, 1, "", "moveaxis"], [31, 0, 1, "", "pad"], [31, 0, 1, "", "rot90"], [31, 0, 1, "", "static_as_strided"], [31, 0, 1, "", "static_atleast_1d"], [31, 0, 1, "", "static_atleast_2d"], [31, 0, 1, "", "static_atleast_3d"], [31, 0, 1, "", "static_broadcast_shapes"], [31, 0, 1, "", "static_concat_from_sequence"], [31, 0, 1, "", "static_dsplit"], [31, 0, 1, "", "static_dstack"], [31, 0, 1, "", "static_expand"], [31, 0, 1, "", "static_flatten"], [31, 0, 1, "", "static_fliplr"], [31, 0, 1, "", "static_flipud"], [31, 0, 1, "", "static_heaviside"], [31, 0, 1, "", "static_hsplit"], [31, 0, 1, "", "static_hstack"], [31, 0, 1, "", "static_i0"], [31, 0, 1, "", "static_moveaxis"], [31, 0, 1, "", "static_pad"], [31, 0, 1, "", "static_rot90"], [31, 0, 1, "", "static_take_along_axis"], [31, 0, 1, "", "static_top_k"], [31, 0, 1, "", "static_vsplit"], [31, 0, 1, "", "static_vstack"], [31, 0, 1, "", "take_along_axis"], [31, 0, 1, "", "top_k"], [31, 0, 1, "", "vsplit"], [31, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[31, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "batch_norm"], [31, 0, 1, "", "instance_norm"], [31, 0, 1, "", "l2_normalize"], [31, 0, 1, "", "lp_normalize"], [31, 0, 1, "", "static_batch_norm"], [31, 0, 1, "", "static_instance_norm"], [31, 0, 1, "", "static_l2_normalize"], [31, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[31, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bernoulli"], [31, 0, 1, "", "beta"], [31, 0, 1, "", "dirichlet"], [31, 0, 1, "", "poisson"], [31, 0, 1, "", "static_bernoulli"], [31, 0, 1, "", "static_beta"], [31, 0, 1, "", "static_dirichlet"], [31, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[31, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "static_unravel_index"], [31, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[31, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[31, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "lexsort"], [31, 0, 1, "", "msort"], [31, 0, 1, "", "static_lexsort"], [31, 0, 1, "", "static_msort"]], "ivy.data_classes.container.experimental.statistical": [[31, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bincount"], [31, 0, 1, "", "corrcoef"], [31, 0, 1, "", "median"], [31, 0, 1, "", "nanmean"], [31, 0, 1, "", "nanmedian"], [31, 0, 1, "", "quantile"], [31, 0, 1, "", "static_bincount"], [31, 0, 1, "", "static_corrcoef"], [31, 0, 1, "", "static_median"], [31, 0, 1, "", "static_nanmean"], [31, 0, 1, "", "static_nanmedian"], [31, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[31, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[32, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_all_equal"], [32, 0, 1, "", "_static_array_equal"], [32, 0, 1, "", "_static_assert_supports_inplace"], [32, 0, 1, "", "_static_clip_matrix_norm"], [32, 0, 1, "", "_static_clip_vector_norm"], [32, 0, 1, "", "_static_einops_rearrange"], [32, 0, 1, "", "_static_einops_reduce"], [32, 0, 1, "", "_static_einops_repeat"], [32, 0, 1, "", "_static_fourier_encode"], [32, 0, 1, "", "_static_gather"], [32, 0, 1, "", "_static_gather_nd"], [32, 0, 1, "", "_static_get_num_dims"], [32, 0, 1, "", "_static_has_nans"], [32, 0, 1, "", "_static_inplace_decrement"], [32, 0, 1, "", "_static_inplace_increment"], [32, 0, 1, "", "_static_inplace_update"], [32, 0, 1, "", "_static_is_array"], [32, 0, 1, "", "_static_is_ivy_array"], [32, 0, 1, "", "_static_is_native_array"], [32, 0, 1, "", "_static_scatter_flat"], [32, 0, 1, "", "_static_scatter_nd"], [32, 0, 1, "", "_static_stable_divide"], [32, 0, 1, "", "_static_stable_pow"], [32, 0, 1, "", "_static_supports_inplace_updates"], [32, 0, 1, "", "_static_to_list"], [32, 0, 1, "", "_static_to_numpy"], [32, 0, 1, "", "_static_to_scalar"], [32, 0, 1, "", "_static_value_is_nan"], [32, 0, 1, "", "all_equal"], [32, 0, 1, "", "array_equal"], [32, 0, 1, "", "assert_supports_inplace"], [32, 0, 1, "", "clip_matrix_norm"], [32, 0, 1, "", "clip_vector_norm"], [32, 0, 1, "", "einops_rearrange"], [32, 0, 1, "", "einops_reduce"], [32, 0, 1, "", "einops_repeat"], [32, 0, 1, "", "fourier_encode"], [32, 0, 1, "", "gather"], [32, 0, 1, "", "gather_nd"], [32, 0, 1, "", "get_num_dims"], [32, 0, 1, "", "has_nans"], [32, 0, 1, "", "inplace_decrement"], [32, 0, 1, "", "inplace_increment"], [32, 0, 1, "", "inplace_update"], [32, 0, 1, "", "is_array"], [32, 0, 1, "", "is_ivy_array"], [32, 0, 1, "", "is_native_array"], [32, 0, 1, "", "isin"], [32, 0, 1, "", "itemsize"], [32, 0, 1, "", "scatter_flat"], [32, 0, 1, "", "scatter_nd"], [32, 0, 1, "", "stable_divide"], [32, 0, 1, "", "stable_pow"], [32, 0, 1, "", "static_isin"], [32, 0, 1, "", "static_itemsize"], [32, 0, 1, "", "supports_inplace_updates"], [32, 0, 1, "", "to_list"], [32, 0, 1, "", "to_numpy"], [32, 0, 1, "", "to_scalar"], [32, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[33, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_stop_gradient"], [33, 0, 1, "", "adam_step"], [33, 0, 1, "", "adam_update"], [33, 0, 1, "", "gradient_descent_update"], [33, 0, 1, "", "lamb_update"], [33, 0, 1, "", "lars_update"], [33, 0, 1, "", "optimizer_update"], [33, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[34, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[34, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[35, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_conv1d"], [35, 0, 1, "", "_static_conv1d_transpose"], [35, 0, 1, "", "_static_conv2d"], [35, 0, 1, "", "_static_conv2d_transpose"], [35, 0, 1, "", "_static_conv3d"], [35, 0, 1, "", "_static_conv3d_transpose"], [35, 0, 1, "", "_static_depthwise_conv2d"], [35, 0, 1, "", "_static_dropout"], [35, 0, 1, "", "_static_dropout1d"], [35, 0, 1, "", "_static_dropout3d"], [35, 0, 1, "", "_static_linear"], [35, 0, 1, "", "_static_lstm_update"], [35, 0, 1, "", "_static_multi_head_attention"], [35, 0, 1, "", "_static_scaled_dot_product_attention"], [35, 0, 1, "", "conv1d"], [35, 0, 1, "", "conv1d_transpose"], [35, 0, 1, "", "conv2d"], [35, 0, 1, "", "conv2d_transpose"], [35, 0, 1, "", "conv3d"], [35, 0, 1, "", "conv3d_transpose"], [35, 0, 1, "", "depthwise_conv2d"], [35, 0, 1, "", "dropout"], [35, 0, 1, "", "dropout1d"], [35, 0, 1, "", "dropout3d"], [35, 0, 1, "", "linear"], [35, 0, 1, "", "lstm_update"], [35, 0, 1, "", "multi_head_attention"], [35, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[36, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_cholesky"], [36, 0, 1, "", "_static_cross"], [36, 0, 1, "", "_static_det"], [36, 0, 1, "", "_static_diag"], [36, 0, 1, "", "_static_diagonal"], [36, 0, 1, "", "_static_eigh"], [36, 0, 1, "", "_static_eigvalsh"], [36, 0, 1, "", "_static_inner"], [36, 0, 1, "", "_static_inv"], [36, 0, 1, "", "_static_matmul"], [36, 0, 1, "", "_static_matrix_norm"], [36, 0, 1, "", "_static_matrix_power"], [36, 0, 1, "", "_static_matrix_rank"], [36, 0, 1, "", "_static_matrix_transpose"], [36, 0, 1, "", "_static_outer"], [36, 0, 1, "", "_static_pinv"], [36, 0, 1, "", "_static_qr"], [36, 0, 1, "", "_static_slogdet"], [36, 0, 1, "", "_static_solve"], [36, 0, 1, "", "_static_svd"], [36, 0, 1, "", "_static_svdvals"], [36, 0, 1, "", "_static_tensordot"], [36, 0, 1, "", "_static_tensorsolve"], [36, 0, 1, "", "_static_trace"], [36, 0, 1, "", "_static_vander"], [36, 0, 1, "", "_static_vecdot"], [36, 0, 1, "", "_static_vector_norm"], [36, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [36, 0, 1, "", "cholesky"], [36, 0, 1, "", "cross"], [36, 0, 1, "", "det"], [36, 0, 1, "", "diag"], [36, 0, 1, "", "diagonal"], [36, 0, 1, "", "eigh"], [36, 0, 1, "", "eigvalsh"], [36, 0, 1, "", "inner"], [36, 0, 1, "", "inv"], [36, 0, 1, "", "matmul"], [36, 0, 1, "", "matrix_norm"], [36, 0, 1, "", "matrix_power"], [36, 0, 1, "", "matrix_rank"], [36, 0, 1, "", "matrix_transpose"], [36, 0, 1, "", "outer"], [36, 0, 1, "", "pinv"], [36, 0, 1, "", "qr"], [36, 0, 1, "", "slogdet"], [36, 0, 1, "", "solve"], [36, 0, 1, "", "svd"], [36, 0, 1, "", "svdvals"], [36, 0, 1, "", "tensordot"], [36, 0, 1, "", "tensorsolve"], [36, 0, 1, "", "trace"], [36, 0, 1, "", "vander"], [36, 0, 1, "", "vecdot"], [36, 0, 1, "", "vector_norm"], [36, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[37, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_binary_cross_entropy"], [37, 0, 1, "", "_static_cross_entropy"], [37, 0, 1, "", "_static_sparse_cross_entropy"], [37, 0, 1, "", "binary_cross_entropy"], [37, 0, 1, "", "cross_entropy"], [37, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[38, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_clip"], [38, 0, 1, "", "_static_concat"], [38, 0, 1, "", "_static_constant_pad"], [38, 0, 1, "", "_static_expand_dims"], [38, 0, 1, "", "_static_flip"], [38, 0, 1, "", "_static_permute_dims"], [38, 0, 1, "", "_static_repeat"], [38, 0, 1, "", "_static_reshape"], [38, 0, 1, "", "_static_roll"], [38, 0, 1, "", "_static_split"], [38, 0, 1, "", "_static_squeeze"], [38, 0, 1, "", "_static_stack"], [38, 0, 1, "", "_static_swapaxes"], [38, 0, 1, "", "_static_tile"], [38, 0, 1, "", "_static_unstack"], [38, 0, 1, "", "_static_zero_pad"], [38, 0, 1, "", "clip"], [38, 0, 1, "", "concat"], [38, 0, 1, "", "constant_pad"], [38, 0, 1, "", "expand_dims"], [38, 0, 1, "", "flip"], [38, 0, 1, "", "permute_dims"], [38, 0, 1, "", "repeat"], [38, 0, 1, "", "reshape"], [38, 0, 1, "", "roll"], [38, 0, 1, "", "split"], [38, 0, 1, "", "squeeze"], [38, 0, 1, "", "stack"], [38, 0, 1, "", "swapaxes"], [38, 0, 1, "", "tile"], [38, 0, 1, "", "unstack"], [38, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[39, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[40, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_multinomial"], [40, 0, 1, "", "_static_randint"], [40, 0, 1, "", "_static_random_normal"], [40, 0, 1, "", "_static_random_uniform"], [40, 0, 1, "", "_static_shuffle"], [40, 0, 1, "", "multinomial"], [40, 0, 1, "", "randint"], [40, 0, 1, "", "random_normal"], [40, 0, 1, "", "random_uniform"], [40, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[41, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_argmax"], [41, 0, 1, "", "_static_argmin"], [41, 0, 1, "", "_static_argwhere"], [41, 0, 1, "", "_static_nonzero"], [41, 0, 1, "", "_static_where"], [41, 0, 1, "", "argmax"], [41, 0, 1, "", "argmin"], [41, 0, 1, "", "argwhere"], [41, 0, 1, "", "nonzero"], [41, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[42, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_unique_all"], [42, 0, 1, "", "_static_unique_counts"], [42, 0, 1, "", "_static_unique_inverse"], [42, 0, 1, "", "_static_unique_values"], [42, 0, 1, "", "unique_all"], [42, 0, 1, "", "unique_counts"], [42, 0, 1, "", "unique_inverse"], [42, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[43, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_argsort"], [43, 0, 1, "", "_static_searchsorted"], [43, 0, 1, "", "_static_sort"], [43, 0, 1, "", "argsort"], [43, 0, 1, "", "searchsorted"], [43, 0, 1, "", "sort"]], "ivy.data_classes.container.statistical": [[44, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_cumprod"], [44, 0, 1, "", "_static_cumsum"], [44, 0, 1, "", "_static_prod"], [44, 0, 1, "", "_static_sum"], [44, 0, 1, "", "_static_var"], [44, 0, 1, "", "cumprod"], [44, 0, 1, "", "cumsum"], [44, 0, 1, "", "einsum"], [44, 0, 1, "", "max"], [44, 0, 1, "", "mean"], [44, 0, 1, "", "min"], [44, 0, 1, "", "prod"], [44, 0, 1, "", "std"], [44, 0, 1, "", "sum"], [44, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[45, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_all"], [45, 0, 1, "", "_static_any"], [45, 0, 1, "", "all"], [45, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[46, 2, 1, "", "_wrap_function"], [46, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.functional.ivy": [[313, 3, 0, "-", "activations"], [314, 3, 0, "-", "constants"], [315, 3, 0, "-", "control_flow_ops"], [316, 3, 0, "-", "creation"], [317, 3, 0, "-", "data_type"], [318, 3, 0, "-", "device"], [319, 3, 0, "-", "elementwise"], [320, 3, 0, "-", "experimental"], [321, 3, 0, "-", "general"], [322, 3, 0, "-", "gradients"], [323, 3, 0, "-", "layers"], [324, 3, 0, "-", "linear_algebra"], [325, 3, 0, "-", "losses"], [326, 3, 0, "-", "manipulation"], [327, 3, 0, "-", "meta"], [328, 3, 0, "-", "nest"], [329, 3, 0, "-", "norms"], [330, 3, 0, "-", "random"], [331, 3, 0, "-", "searching"], [332, 3, 0, "-", "set"], [333, 3, 0, "-", "sorting"], [334, 3, 0, "-", "statistical"], [335, 3, 0, "-", "utility"]], "ivy.nested_array": [[469, 3, 0, "-", "nested_array"]], "ivy.nested_array.nested_array": [[469, 1, 1, "", "NestedArray"]], "ivy.nested_array.nested_array.NestedArray": [[469, 0, 1, "", "__init__"], [469, 5, 1, "", "data"], [469, 5, 1, "", "device"], [469, 5, 1, "", "dtype"], [469, 0, 1, "", "from_row_lengths"], [469, 0, 1, "", "from_row_split"], [469, 5, 1, "", "ndim"], [469, 0, 1, "", "nested_array"], [469, 0, 1, "", "reshape"], [469, 5, 1, "", "shape"], [469, 0, 1, "", "unbind"]], "ivy.stateful": [[470, 3, 0, "-", "activations"], [471, 3, 0, "-", "converters"], [472, 3, 0, "-", "helpers"], [473, 3, 0, "-", "initializers"], [474, 3, 0, "-", "layers"], [475, 3, 0, "-", "module"], [476, 3, 0, "-", "norms"], [477, 3, 0, "-", "optimizers"], [478, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[470, 1, 1, "", "GEGLU"], [470, 1, 1, "", "GELU"], [470, 1, 1, "", "LeakyReLU"], [470, 1, 1, "", "LogSoftmax"], [470, 1, 1, "", "Mish"], [470, 1, 1, "", "ReLU"], [470, 1, 1, "", "Softmax"], [470, 1, 1, "", "Softplus"]], "ivy.stateful.activations.GEGLU": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[470, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[470, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[471, 1, 1, "", "ModuleConverters"], [471, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[471, 0, 1, "", "from_flax_module"], [471, 0, 1, "", "from_haiku_module"], [471, 0, 1, "", "from_keras_module"], [471, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[472, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[472, 0, 1, "", "check_submod_rets"], [472, 0, 1, "", "get_mod_key"], [472, 0, 1, "", "mod_depth"], [472, 0, 1, "", "mod_height"], [472, 0, 1, "", "mod_with_top_mod_key_chain"], [472, 0, 1, "", "show_mod_in_top_mod"], [472, 0, 1, "", "show_structure"], [472, 0, 1, "", "show_v_in_top_v"], [472, 0, 1, "", "sub_mods"], [472, 0, 1, "", "track_submod_call_order"], [472, 0, 1, "", "track_submod_rets"], [472, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[473, 1, 1, "", "Constant"], [473, 1, 1, "", "FirstLayerSiren"], [473, 1, 1, "", "GlorotUniform"], [473, 1, 1, "", "Initializer"], [473, 1, 1, "", "KaimingNormal"], [473, 1, 1, "", "Ones"], [473, 1, 1, "", "Siren"], [473, 1, 1, "", "Uniform"], [473, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[473, 0, 1, "", "__init__"], [473, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[473, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[473, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[473, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[473, 0, 1, "", "__init__"], [473, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[473, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[473, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[473, 0, 1, "", "__init__"], [473, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[473, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[474, 1, 1, "", "Conv1D"], [474, 1, 1, "", "Conv1DTranspose"], [474, 1, 1, "", "Conv2D"], [474, 1, 1, "", "Conv2DTranspose"], [474, 1, 1, "", "Conv3D"], [474, 1, 1, "", "Conv3DTranspose"], [474, 1, 1, "", "DepthwiseConv2D"], [474, 1, 1, "", "Dropout"], [474, 1, 1, "", "LSTM"], [474, 1, 1, "", "Linear"], [474, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[474, 0, 1, "", "__init__"], [474, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[474, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[474, 0, 1, "", "__init__"]], "ivy.stateful.module": [[475, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[475, 0, 1, "", "__call__"], [475, 0, 1, "", "__init__"], [475, 0, 1, "", "build"], [475, 5, 1, "", "build_mode"], [475, 5, 1, "", "built_"], [475, 0, 1, "", "compile"], [475, 0, 1, "", "save_weights"], [475, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[476, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[476, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[477, 1, 1, "", "Adam"], [477, 1, 1, "", "LAMB"], [477, 1, 1, "", "LARS"], [477, 1, 1, "", "Optimizer"], [477, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[477, 0, 1, "", "__init__"], [477, 0, 1, "", "set_state"], [477, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[477, 0, 1, "", "__init__"], [477, 0, 1, "", "set_state"], [477, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[477, 0, 1, "", "__init__"], [477, 0, 1, "", "set_state"], [477, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[477, 0, 1, "", "__init__"], [477, 0, 1, "", "set_state"], [477, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[477, 0, 1, "", "__init__"], [477, 0, 1, "", "set_state"], [477, 5, 1, "", "state"]], "ivy.stateful.sequential": [[478, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[478, 0, 1, "", "__init__"]], "ivy.utils": [[479, 3, 0, "-", "assertions"], [480, 3, 0, "-", "backend"], [484, 3, 0, "-", "dynamic_import"], [485, 3, 0, "-", "exceptions"], [486, 3, 0, "-", "inspection"], [487, 3, 0, "-", "profiler"], [488, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[479, 2, 1, "", "check_all"], [479, 2, 1, "", "check_all_or_any_fn"], [479, 2, 1, "", "check_any"], [479, 2, 1, "", "check_dimensions"], [479, 2, 1, "", "check_elem_in_list"], [479, 2, 1, "", "check_equal"], [479, 2, 1, "", "check_exists"], [479, 2, 1, "", "check_false"], [479, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [479, 2, 1, "", "check_gather_input_valid"], [479, 2, 1, "", "check_gather_nd_input_valid"], [479, 2, 1, "", "check_greater"], [479, 2, 1, "", "check_inplace_sizes_valid"], [479, 2, 1, "", "check_isinstance"], [479, 2, 1, "", "check_kernel_padding_size"], [479, 2, 1, "", "check_less"], [479, 2, 1, "", "check_one_way_broadcastable"], [479, 2, 1, "", "check_same_dtype"], [479, 2, 1, "", "check_shape"], [479, 2, 1, "", "check_shapes_broadcastable"], [479, 2, 1, "", "check_true"]], "ivy.utils.backend": [[481, 3, 0, "-", "ast_helpers"], [482, 3, 0, "-", "handler"], [483, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[481, 1, 1, "", "ImportTransformer"], [481, 1, 1, "", "IvyLoader"], [481, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[481, 0, 1, "", "__init__"], [481, 0, 1, "", "impersonate_import"], [481, 0, 1, "", "visit_Import"], [481, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[481, 0, 1, "", "__init__"], [481, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[481, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[482, 1, 1, "", "ContextManager"], [482, 2, 1, "", "choose_random_backend"], [482, 2, 1, "", "convert_from_numpy_to_target_backend"], [482, 2, 1, "", "convert_from_source_backend_to_numpy"], [482, 2, 1, "", "current_backend"], [482, 2, 1, "", "fn_name_from_version_specific_fn_name"], [482, 2, 1, "", "prevent_access_locally"], [482, 2, 1, "", "previous_backend"], [482, 2, 1, "", "set_backend"], [482, 2, 1, "", "set_backend_to_specific_version"], [482, 2, 1, "", "set_jax_backend"], [482, 2, 1, "", "set_numpy_backend"], [482, 2, 1, "", "set_tensorflow_backend"], [482, 2, 1, "", "set_torch_backend"], [482, 2, 1, "", "unset_backend"], [482, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[482, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[483, 2, 1, "", "available_sub_backends"], [483, 2, 1, "", "clear_sub_backends"], [483, 2, 1, "", "find_available_sub_backends"], [483, 2, 1, "", "set_sub_backend"], [483, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[484, 2, 1, "", "import_module"]], "ivy.utils.exceptions": [[485, 7, 1, "", "IvyBackendException"], [485, 7, 1, "", "IvyError"], [485, 7, 1, "", "IvyException"], [485, 7, 1, "", "IvyNotImplementedException"], [485, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyBackendException": [[485, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[485, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[485, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[485, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[486, 2, 1, "", "add_array_specs"], [486, 2, 1, "", "fn_array_spec"]], "ivy.utils.profiler": [[487, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[487, 0, 1, "", "__init__"], [487, 4, 1, "", "print_stats"], [487, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[488, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[453, 3, 0, "-", "assertions"], [454, 3, 0, "-", "available_frameworks"], [455, 3, 0, "-", "function_testing"], [456, 3, 0, "-", "globals"], [457, 3, 0, "-", "hypothesis_helpers"], [462, 3, 0, "-", "structs"], [463, 3, 0, "-", "test_parameter_flags"], [464, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[453, 2, 1, "", "assert_all_close"], [453, 2, 1, "", "assert_same_type_and_shape"], [453, 2, 1, "", "check_unsupported_device"], [453, 2, 1, "", "check_unsupported_device_and_dtype"], [453, 2, 1, "", "check_unsupported_dtype"], [453, 2, 1, "", "test_unsupported_function"], [453, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[454, 2, 1, "", "available_frameworks"], [454, 2, 1, "", "ground_truth"]], "ivy_tests.test_ivy.helpers.function_testing": [[455, 2, 1, "", "args_to_container"], [455, 2, 1, "", "args_to_frontend"], [455, 2, 1, "", "arrays_to_frontend"], [455, 2, 1, "", "as_lists"], [455, 2, 1, "", "compiled_if_required"], [455, 2, 1, "", "convtrue"], [455, 2, 1, "", "create_args_kwargs"], [455, 2, 1, "", "empty_func"], [455, 2, 1, "", "flatten"], [455, 2, 1, "", "flatten_and_to_np"], [455, 2, 1, "", "flatten_frontend"], [455, 2, 1, "", "flatten_frontend_to_np"], [455, 2, 1, "", "flatten_fw_and_to_np"], [455, 2, 1, "", "framework_comparator"], [455, 2, 1, "", "get_frontend_ret"], [455, 2, 1, "", "get_ret_and_flattened_np_array"], [455, 2, 1, "", "gradient_incompatible_function"], [455, 2, 1, "", "gradient_test"], [455, 2, 1, "", "gradient_unsupported_dtypes"], [455, 2, 1, "", "kwargs_to_args_n_kwargs"], [455, 2, 1, "", "make_json_pickable"], [455, 2, 1, "", "test_frontend_function"], [455, 2, 1, "", "test_frontend_method"], [455, 2, 1, "", "test_function"], [455, 2, 1, "", "test_method"], [455, 2, 1, "", "var_fn"]], "ivy_tests.test_ivy.helpers.globals": [[456, 7, 1, "", "InterruptedTest"], [456, 1, 1, "", "TestData"], [456, 2, 1, "", "remove_all_current_framework"], [456, 2, 1, "", "setup_api_test"], [456, 2, 1, "", "setup_frontend_test"], [456, 2, 1, "", "teardown_api_test"], [456, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[456, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[456, 0, 1, "", "__init__"], [456, 4, 1, "", "fn_name"], [456, 4, 1, "", "fn_tree"], [456, 4, 1, "", "is_method"], [456, 4, 1, "", "supported_device_dtypes"], [456, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[458, 3, 0, "-", "array_helpers"], [459, 3, 0, "-", "dtype_helpers"], [460, 3, 0, "-", "general_helpers"], [461, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[458, 2, 1, "", "array_and_broadcastable_shape"], [458, 2, 1, "", "array_bools"], [458, 2, 1, "", "array_indices_axis"], [458, 2, 1, "", "array_values"], [458, 2, 1, "", "arrays_and_axes"], [458, 2, 1, "", "arrays_for_pooling"], [458, 2, 1, "", "broadcast_shapes"], [458, 2, 1, "", "dtype_and_values"], [458, 2, 1, "", "dtype_values_axis"], [458, 2, 1, "", "list_of_size"], [458, 2, 1, "", "lists"], [458, 2, 1, "", "mutually_broadcastable_shapes"], [458, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[459, 2, 1, "", "array_dtypes"], [459, 2, 1, "", "get_castable_dtype"], [459, 2, 1, "", "get_dtypes"], [459, 2, 1, "", "make_json_pickable"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[460, 2, 1, "", "apply_safety_factor"], [460, 2, 1, "", "embedding_helper"], [460, 2, 1, "", "get_axis"], [460, 2, 1, "", "get_bounds"], [460, 2, 1, "", "get_mean_std"], [460, 2, 1, "", "get_shape"], [460, 2, 1, "", "matrix_is_stable"], [460, 2, 1, "", "reshape_shapes"], [460, 2, 1, "", "subsets"], [460, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[461, 2, 1, "", "floats"], [461, 2, 1, "", "ints"], [461, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.structs": [[462, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[462, 0, 1, "", "__init__"], [462, 4, 1, "", "framework_init_module"], [462, 4, 1, "", "init_name"], [462, 4, 1, "", "ivy_init_module"], [462, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[463, 1, 1, "", "FrontendFunctionTestFlags"], [463, 1, 1, "", "FrontendMethodTestFlags"], [463, 1, 1, "", "FunctionTestFlags"], [463, 1, 1, "", "InitMethodTestFlags"], [463, 1, 1, "", "MethodTestFlags"], [463, 1, 1, "", "TestFlags"], [463, 2, 1, "", "as_cont"], [463, 2, 1, "", "build_flag"], [463, 2, 1, "", "frontend_function_flags"], [463, 2, 1, "", "frontend_method_flags"], [463, 2, 1, "", "function_flags"], [463, 2, 1, "", "init_method_flags"], [463, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[463, 0, 1, "", "__init__"], [463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[463, 0, 1, "", "__init__"], [463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[463, 0, 1, "", "__init__"], [463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[463, 0, 1, "", "__init__"], [463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[463, 0, 1, "", "__init__"], [463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[463, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[464, 2, 1, "", "handle_frontend_method"], [464, 2, 1, "", "handle_frontend_test"], [464, 2, 1, "", "handle_method"], [464, 2, 1, "", "handle_test"], [464, 2, 1, "", "num_positional_args"], [464, 2, 1, "", "num_positional_args_method"], [464, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 525, 530, 540, 545], "compil": [0, 525, 530, 537, 542, 544, 545], "api": [0, 1, 492, 498, 500, 502, 506, 507, 517, 522, 525, 527, 529, 530, 536, 543, 545], "us": [0, 1, 489, 496, 499, 502, 517, 520, 528], "eager": 0, "v": [0, 492, 533], "lazi": 0, "arrai": [0, 47, 66, 458, 465, 469, 492, 502, 503, 507, 514, 527, 536], "cach": 0, "gener": [0, 9, 32, 321, 460, 517, 521, 523], "state": [0, 529, 533], "sharp": [0, 1], "bit": [0, 1], "exampl": [0, 1, 489, 495, 510, 514, 517, 520, 523], "transpil": [1, 489, 530], "function": [1, 50, 455, 498, 506, 508, 509, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 525, 530, 533], "librari": [1, 495, 532], "modul": [1, 475, 508, 509, 529], "ivi": [1, 489, 495, 498, 500, 503, 505, 507, 510, 512, 517, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 532, 545], "unifi": [1, 493, 527, 541, 545], "activ": [2, 24, 313, 470], "convers": [3, 26], "creation": [4, 27, 316], "data": [5, 28, 49, 317, 332, 434, 435, 436, 437, 508, 519, 521, 528, 533], "type": [5, 28, 317, 508, 515, 519, 533], "devic": [6, 29, 318, 509, 514, 519], "elementwis": [7, 30, 319], "experiment": [8, 31, 320, 498, 500], "gradient": [10, 33, 322, 517], "imag": [11, 34, 496, 505], "layer": [12, 35, 323, 474], "linear": [13, 36, 324, 347], "algebra": [13, 36, 324], "loss": [14, 37, 325], "manipul": [15, 38, 326], "norm": [16, 39, 329, 476], "random": [17, 40, 330], "search": [18, 41, 331], "set": [19, 42, 332, 489, 499, 504], "sort": [20, 43, 333, 440], "statist": [21, 44, 334], "util": [22, 45, 335, 467], "wrap": [23, 46, 516], "base": 25, "contain": [48, 500, 506, 528], "class": [49, 466, 503, 512, 519, 527], "deseri": 51, "gelu": 52, "get": [53, 500], "leaky_relu": 54, "log_softmax": 55, "mish": 56, "relu": 57, "sigmoid": 58, "softmax": 59, "softplu": 60, "ifels": 61, "whileloop": 62, "if_els": 63, "while_loop": 64, "arang": 65, "asarrai": 67, "asarray_handle_nest": 68, "asarray_infer_devic": 69, "asarray_to_native_arrays_and_back": 70, "copy_arrai": 71, "empti": 72, "empty_lik": 73, "ey": 74, "from_dlpack": 75, "note": [75, 316], "full": [76, 520], "full_lik": 77, "linspac": 78, "logspac": 79, "meshgrid": 80, "native_arrai": 81, "one_hot": 82, "ones": 83, "ones_lik": 84, "tril": 85, "triu": 86, "zero": 87, "zeros_lik": 88, "as_ivy_dtyp": 89, "as_native_dtyp": 90, "astyp": 91, "broadcast_arrai": 92, "broadcast_to": 93, "can_cast": 94, "check_float": 95, "closest_valid_dtyp": 96, "default_complex_dtyp": 97, "default_dtyp": 98, "default_float_dtyp": 99, "default_int_dtyp": 100, "default_uint_dtyp": 101, "dtype": [102, 459, 514], "dtype_bit": 103, "finfo": 104, "function_supported_dtyp": 105, "function_unsupported_dtyp": 106, "iinfo": 107, "infer_default_dtyp": 108, "invalid_dtyp": 109, "is_bool_dtyp": 110, "is_complex_dtyp": 111, "is_float_dtyp": 112, "is_int_dtyp": 113, "is_native_dtyp": 114, "is_uint_dtyp": 115, "promote_typ": 116, "promote_types_of_input": 117, "result_typ": 118, "set_default_complex_dtyp": 119, "set_default_dtyp": 120, "set_default_float_dtyp": 121, "set_default_int_dtyp": 122, "set_default_uint_dtyp": 123, "type_promote_arrai": 124, "unset_default_complex_dtyp": 125, "unset_default_dtyp": 126, "unset_default_float_dtyp": 127, "unset_default_int_dtyp": 128, "unset_default_uint_dtyp": 129, "valid_dtyp": 130, "as_ivy_dev": 131, "as_native_dev": 132, "clear_cached_mem_on_dev": 133, "default_devic": 134, "dev": 135, "dev_util": 136, "function_supported_devic": 137, "function_unsupported_devic": 138, "get_all_ivy_arrays_on_dev": 139, "gpu_is_avail": 140, "num_cpu_cor": 141, "num_gpu": 142, "num_ivy_arrays_on_dev": 143, "percent_used_mem_on_dev": 144, "print_all_ivy_arrays_on_dev": 145, "set_default_devic": 146, "set_split_factor": 147, "split_factor": 148, "split_func_cal": 149, "to_devic": 150, "total_mem_on_dev": 151, "tpu_is_avail": 152, "unset_default_devic": 153, "used_mem_on_dev": 154, "ab": 155, "aco": 156, "acosh": 157, "add": [158, 510, 520, 545], "asin": 159, "asinh": 160, "atan": 161, "atan2": 162, "atanh": 163, "bitwise_and": 164, "bitwise_invert": 165, "bitwise_left_shift": 166, "bitwise_or": 167, "bitwise_right_shift": 168, "bitwise_xor": 169, "ceil": 170, "co": 171, "cosh": 172, "deg2rad": 173, "divid": 174, "equal": 175, "erf": 176, "exp": 177, "expm1": 178, "floor": 179, "floor_divid": 180, "fmod": 181, "greater": 182, "greater_equ": 183, "isfinit": 184, "isinf": 185, "isnan": 186, "isreal": 187, "less": 188, "less_equ": 189, "log": [190, 499], "log10": 191, "log1p": 192, "log2": 193, "logaddexp": 194, "logical_and": 195, "logical_not": 196, "logical_or": 197, "logical_xor": 198, "maximum": 199, "minimum": 200, "multipli": 201, "neg": 202, "not_equ": 203, "posit": [204, 514], "pow": 205, "rad2deg": 206, "reciproc": 207, "remaind": 208, "round": 209, "sign": 210, "sin": 211, "sinh": 212, "sqrt": 213, "squar": 214, "subtract": 215, "tan": [216, 510, 520], "tanh": 217, "trunc": 218, "trunc_divid": 219, "all_equ": 220, "arg_info": 221, "arg_nam": 222, "array_equ": 223, "assert_supports_inplac": 224, "cache_fn": 225, "clip_matrix_norm": 226, "clip_vector_norm": 227, "container_typ": 228, "current_backend_str": 229, "default": 230, "einops_rearrang": 231, "einops_reduc": 232, "einops_repeat": 233, "exist": [234, 496], "fourier_encod": 235, "function_supported_devices_and_dtyp": 236, "function_unsupported_devices_and_dtyp": 237, "gather": 238, "gather_nd": 239, "get_all_arrays_in_memori": 240, "get_array_mod": 241, "get_exception_trace_mod": 242, "get_item": 243, "get_min_bas": 244, "get_min_denomin": 245, "get_nestable_mod": 246, "get_num_dim": 247, "get_queue_timeout": 248, "get_referrers_recurs": 249, "get_show_func_wrapper_trace_mod": 250, "get_tmp_dir": 251, "has_nan": 252, "inplace_arrays_support": 253, "inplace_decr": 254, "inplace_incr": 255, "inplace_upd": 256, "inplace_variables_support": 257, "is_arrai": 258, "is_ivy_arrai": 259, "is_ivy_contain": 260, "is_native_arrai": 261, "isin": 262, "isscalar": 263, "items": 264, "match_kwarg": 265, "multiprocess": 266, "num_arrays_in_memori": 267, "print_all_arrays_in_memori": 268, "scatter_flat": 269, "scatter_nd": 270, "set_array_mod": 271, "paramet": [271, 272, 275, 277, 278, 321, 463], "set_exception_trace_mod": 272, "set_min_bas": 273, "set_min_denomin": 274, "set_nestable_mod": 275, "set_queue_timeout": 276, "set_shape_array_mod": 277, "set_show_func_wrapper_trace_mod": 278, "set_tmp_dir": 279, "shape": [280, 332, 434, 435, 436, 437, 533], "shape_array_mod": 281, "stable_divid": 282, "stable_pow": 283, "supports_inplace_upd": 284, "to_ivy_shap": 285, "to_list": 286, "to_native_shap": 287, "to_numpi": 288, "to_scalar": 289, "try_else_non": 290, "unset_array_mod": 291, "unset_exception_trace_mod": 292, "unset_nestable_mod": 293, "unset_queue_timeout": 294, "unset_shape_array_mod": 295, "unset_show_func_wrapper_trace_mod": 296, "value_is_nan": 297, "vmap": 298, "adam_step": 299, "adam_upd": 300, "execute_with_gradi": [301, 517], "grad": 302, "gradient_descent_upd": 303, "jac": 304, "lamb_upd": 305, "lars_upd": 306, "optimizer_upd": 307, "set_with_grad": 308, "stop_gradi": 309, "unset_with_grad": 310, "value_and_grad": 311, "with_grad": 312, "constant": 314, "control": [315, 533], "flow": [315, 533], "op": 315, "meta": 327, "nest": [328, 465, 469], "depend": [332, 434, 435, 436, 437], "output": [332, 434, 435, 436, 437], "conv": 336, "conv1d": 337, "conv1d_transpos": 338, "conv2d": 339, "conv2d_transpos": 340, "conv3d": 341, "conv3d_transpos": 342, "conv_general_dil": 343, "conv_general_transpos": 344, "depthwise_conv2d": 345, "dropout": 346, "lstm_updat": 348, "multi_head_attent": 349, "scaled_dot_product_attent": 350, "choleski": 351, "cross": 352, "det": 353, "diag": 354, "diagon": 355, "eig": 356, "eigh": 357, "eigvalsh": 358, "inner": 359, "inv": 360, "lu_factor": 361, "matmul": 362, "matrix_norm": 363, "matrix_pow": 364, "matrix_rank": 365, "matrix_transpos": 366, "outer": 367, "pinv": 368, "qr": 369, "slogdet": 370, "solv": 371, "svd": 372, "svdval": 373, "tensordot": 374, "tensorsolv": 375, "trace": [376, 512], "vander": 377, "vecdot": 378, "vector_norm": 379, "vector_to_skew_symmetric_matrix": 380, "binary_cross_entropi": 381, "cross_entropi": 382, "sparse_cross_entropi": 383, "clip": 384, "concat": 385, "constant_pad": 386, "expand_dim": 387, "flip": 388, "permute_dim": 389, "repeat": 390, "reshap": 391, "roll": [392, 510], "split": 393, "squeez": 394, "stack": [395, 512], "swapax": 396, "tile": 397, "unstack": 398, "zero_pad": 399, "fomaml_step": 400, "maml_step": 401, "reptile_step": 402, "all_nested_indic": 403, "copy_nest": 404, "duplicate_array_index_chain": 405, "index_nest": 406, "insert_into_nest_at_index": 407, "insert_into_nest_at_indic": 408, "map": [409, 507], "map_nest_at_index": 410, "map_nest_at_indic": 411, "multi_index_nest": 412, "nested_ani": 413, "nested_argwher": 414, "nested_map": 415, "nested_multi_map": 416, "prune_empti": 417, "prune_nest_at_index": 418, "prune_nest_at_indic": 419, "set_nest_at_index": 420, "set_nest_at_indic": 421, "layer_norm": 422, "multinomi": 423, "randint": 424, "random_norm": 425, "random_uniform": 426, "seed": 427, "shuffl": 428, "argmax": 429, "argmin": 430, "argwher": 431, "nonzero": 432, "where": [433, 498], "unique_al": 434, "unique_count": 435, "unique_invers": 436, "unique_valu": 437, "argsort": 438, "searchsort": 439, "cumprod": 441, "cumsum": 442, "einsum": 443, "max": 444, "mean": 445, "min": 446, "prod": 447, "std": 448, "sum": 449, "var": 450, "all": 451, "ani": 452, "assert": [453, 479, 512], "avail": 454, "framework": [454, 466, 489, 517, 526, 539, 542, 545, 546], "test": [455, 463, 464, 468, 499, 500, 502, 507, 520, 521], "global": 456, "hypothesi": [457, 499, 520, 521], "helper": [457, 458, 459, 460, 461, 464, 472, 481, 520, 521, 522], "number": [461, 514], "struct": 462, "flag": 463, "convert": [471, 530], "initi": [473, 529], "optim": [477, 529], "sequenti": 478, "backend": [480, 483, 504, 508, 517, 522, 525, 533], "ast": 481, "handler": [482, 483, 525], "sub": 483, "dynam": [484, 533], "import": 484, "except": [485, 512], "inspect": 486, "profil": 487, "verbos": 488, "content": 489, "when": [489, 523], "should": 489, "i": [489, 505, 523], "up": [489, 499], "instal": 489, "pip": 489, "docker": [489, 496, 499, 500, 505], "from": 489, "sourc": 489, "document": 489, "contribut": [489, 494], "commun": 489, "citat": 489, "background": 490, "ml": [491, 541, 545], "explos": 491, "standard": [492, 523, 536, 545], "skeptic": 492, "complimentari": 492, "competit": 492, "do": [492, 521], "work": [492, 535], "The": [492, 500, 505, 517, 519, 527, 533], "why": [493, 521], "No": [493, 499], "more": [493, 499, 523], "re": [493, 521], "implement": [493, 507, 517], "infinit": 493, "shelf": 493, "life": 493, "appli": [495, 532], "introduct": [495, 519, 520], "robot": [495, 532], "build": [496, 505, 525], "doc": [496, 505], "conveni": [496, 505, 515], "script": [496, 505], "hub": 496, "local": [496, 500], "without": [496, 520], "help": [497, 500], "resourc": 497, "open": 498, "task": 498, "format": [498, 513, 538, 545], "checklist": 498, "frontend": [498, 504, 519, 520, 530], "place": 498, "fork": [499, 500], "clone": [499, 507], "repo": 499, "pycharm": [499, 500], "virtual": 499, "environ": 499, "miniconda": 499, "venv": 499, "interpret": 499, "window": 499, "maco": 499, "ubuntu": 499, "detail": 499, "free": 499, "github": 499, "codespac": 499, "pre": [499, 513], "commit": [499, 500, 507, 513], "basic": [500, 519], "todo": 500, "list": 500, "issu": 500, "manag": 500, "your": [500, 521], "who": 500, "To": 500, "ask": 500, "With": 500, "command": 500, "line": 500, "browser": 500, "pull": [500, 507], "request": [500, 507], "small": 500, "often": 500, "interact": 500, "run": [500, 502, 505, 521], "most": 500, "out": [500, 514, 518], "id": [500, 502], "deep": 501, "dive": 501, "termin": 502, "regener": 502, "failur": 502, "skip": 502, "nativ": [503, 523], "handl": [503, 512, 533], "integr": [503, 507, 521], "custom": [503, 505, 517, 528, 533], "version": [504, 522, 533], "support": [504, 508, 519, 533], "pipelin": [505, 507, 521, 533], "how": [505, 521], "builder": 505, "being": 505, "option": 505, "": 505, "structur": [505, 517, 533], "index": 505, "rst": 505, "partial_conf": 505, "py": 505, "prebuild": 505, "sh": 505, "extens": [505, 531], "custom_autosummari": 505, "hide": 505, "tabl": 505, "includ": 505, "fix": 505, "directori": 505, "substitut": 505, "caption": 505, "custom_build": 505, "discussion_link": 505, "skippable_funct": 505, "instanc": [506, 519, 520, 527], "method": [506, 519, 520, 527, 528], "static": 506, "special": [506, 519], "nestabl": [506, 514, 515], "continu": 507, "push": 507, "pr": 507, "trigger": 507, "A": [507, 523], "top": 507, "down": 507, "view": [507, 518], "store": 507, "retriev": 507, "repositori": 507, "nitti": 507, "gritti": 507, "storag": 507, "space": 507, "unifyai": 507, "determin": 507, "coverag": 507, "workflow": 507, "multipl": 507, "runner": 507, "race": 507, "condit": 507, "period": 507, "manual": 507, "dispatch": 507, "ci": 507, "dashboard": 507, "promot": [508, 519], "argument": [508, 509, 514, 518, 519], "other": [508, 509], "unsupport": 508, "bug": 508, "superset": [508, 523], "docstr": [510, 511], "configur": [512, 528], "mode": 512, "func_wrapp": 512, "prune": 512, "handle_except": 512, "decor": [512, 521], "lint": 513, "check": [513, 533], "hook": 513, "keyword": 514, "input": 514, "oper": [514, 527, 533], "integ": 514, "sequenc": 514, "primari": 515, "composit": [515, 519], "mix": 515, "standalon": 515, "overview": 517, "usag": [517, 523], "signatur": 517, "an": 517, "design": [517, 522, 524], "our": 517, "polici": [517, 519], "specif": [517, 543, 544, 545], "consider": 517, "inplac": 518, "updat": 518, "copi": 518, "write": [519, 521], "unus": 519, "miss": 519, "temporari": 519, "rule": 519, "numpi": [519, 539], "cast": 519, "duplic": [519, 523], "valu": 520, "alia": 520, "own": 521, "strategi": 521, "we": 521, "need": 521, "effect": 521, "bonu": 521, "extend": [521, 523], "featur": 521, "self": 521, "consist": 521, "explicit": 521, "test_array_funct": 521, "fail": 521, "navig": 522, "code": 522, "categor": 522, "submodul": 522, "pin": 522, "behaviour": 523, "what": [523, 545], "non": 523, "too": 523, "much": 523, "balanc": 523, "effici": 523, "maxim": 523, "block": 525, "monkei": 527, "patch": 527, "construct": 528, "represent": 528, "recurs": 528, "built": 528, "ins": 528, "access": 528, "save": 528, "load": 528, "comparison": 528, "case": 528, "compartment": 528, "network": [528, 530], "weight": 528, "role": 530, "model": [530, 533], "mechan": 532, "vision": 532, "gym": 532, "memori": 532, "faq": 533, "maintain": 533, "size": 533, "gpu": 533, "deploy": 533, "auto": 533, "differenti": 533, "replica": 533, "parallel": 533, "altern": 533, "glossari": 534, "relat": 535, "infrastructur": [537, 545], "llvm": 537, "mlir": 537, "oneapi": 537, "exchang": [538, 545], "onnx": 538, "nnef": 538, "coreml": 538, "matlab": 539, "scipi": 539, "torch": [539, 540], "scikit": 539, "learn": 539, "theano": 539, "panda": 539, "julia": 539, "apach": [539, 542], "spark": 539, "mllib": 539, "caff": 539, "chainer": 539, "tensorflow": 539, "1": 539, "mxnet": 539, "cntk": 539, "pytorch": 539, "flux": 539, "jax": 539, "2": 539, "dex": 539, "languag": 539, "tracer": [540, 545], "tf": 540, "jaxpr": 540, "jit": 540, "fx": 540, "compani": [541, 545], "quansight": 541, "modular": 541, "octoml": 541, "multi": [542, 545], "vendor": [542, 543, 544, 545], "tvm": 542, "xla": 542, "gcc": 542, "tensorrt": 543, "cuda": 543, "icc": 544, "icx": 544, "nvcc": 544, "doe": 545, "wrapper": [545, 546], "eagerpi": 546, "kera": 546, "thinc": 546, "tensorli": 546, "neuropod": 546}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [1, "sharp-bits"]], "Examples": [[0, "examples"], [1, "examples"], [489, "examples"], [514, "examples"]], "Transpiler": [[1, "transpiler"]], "Transpiler API": [[1, "transpiler-api"]], "Using the transpiler": [[1, "using-the-transpiler"]], "Transpiling functions": [[1, "transpiling-functions"]], "Transpiling Libraries": [[1, "transpiling-libraries"]], "Transpiling Modules": [[1, "transpiling-modules"]], "Ivy.unify": [[1, "ivy-unify"]], "Activations": [[2, "module-ivy.data_classes.array.activations"], [24, "module-ivy.data_classes.container.activations"], [313, "activations"], [470, "module-ivy.stateful.activations"]], "Conversions": [[3, "module-ivy.data_classes.array.conversions"], [26, "module-ivy.data_classes.container.conversions"]], "Creation": [[4, "module-ivy.data_classes.array.creation"], [27, "module-ivy.data_classes.container.creation"], [316, "creation"]], "Data type": [[5, "module-ivy.data_classes.array.data_type"], [28, "module-ivy.data_classes.container.data_type"], [317, "data-type"]], "Device": [[6, "module-ivy.data_classes.array.device"], [29, "module-ivy.data_classes.container.device"], [318, "device"]], "Elementwise": [[7, "module-ivy.data_classes.array.elementwise"], [30, "module-ivy.data_classes.container.elementwise"], [319, "elementwise"]], "Experimental": [[8, "module-ivy.data_classes.array.experimental"], [31, "module-ivy.data_classes.container.experimental"], [320, "experimental"]], "General": [[9, "module-ivy.data_classes.array.general"], [32, "module-ivy.data_classes.container.general"], [321, "general"]], "Gradients": [[10, "module-ivy.data_classes.array.gradients"], [33, "module-ivy.data_classes.container.gradients"], [322, "gradients"], [517, "gradients"]], "Image": [[11, "module-ivy.data_classes.array.image"], [34, "module-ivy.data_classes.container.image"]], "Layers": [[12, "module-ivy.data_classes.array.layers"], [35, "module-ivy.data_classes.container.layers"], [323, "layers"], [474, "module-ivy.stateful.layers"]], "Linear algebra": [[13, "module-ivy.data_classes.array.linear_algebra"], [36, "module-ivy.data_classes.container.linear_algebra"], [324, "linear-algebra"]], "Losses": [[14, "module-ivy.data_classes.array.losses"], [37, "module-ivy.data_classes.container.losses"], [325, "losses"]], "Manipulation": [[15, "module-ivy.data_classes.array.manipulation"], [38, "module-ivy.data_classes.container.manipulation"], [326, "manipulation"]], "Norms": [[16, "module-ivy.data_classes.array.norms"], [39, "module-ivy.data_classes.container.norms"], [329, "norms"], [476, "module-ivy.stateful.norms"]], "Random": [[17, "module-ivy.data_classes.array.random"], [40, "module-ivy.data_classes.container.random"], [330, "random"]], "Searching": [[18, "module-ivy.data_classes.array.searching"], [41, "module-ivy.data_classes.container.searching"], [331, "searching"]], "Set": [[19, "module-ivy.data_classes.array.set"], [42, "module-ivy.data_classes.container.set"], [332, "set"]], "Sorting": [[20, "module-ivy.data_classes.array.sorting"], [43, "module-ivy.data_classes.container.sorting"], [333, "sorting"]], "Statistical": [[21, "module-ivy.data_classes.array.statistical"], [44, "module-ivy.data_classes.container.statistical"], [334, "statistical"]], "Utility": [[22, "module-ivy.data_classes.array.utility"], [45, "module-ivy.data_classes.container.utility"], [335, "utility"]], "Wrapping": [[23, "module-ivy.data_classes.array.wrapping"], [46, "module-ivy.data_classes.container.wrapping"]], "Base": [[25, "module-ivy.data_classes.container.base"]], "Array": [[47, "array"]], "Container": [[48, "container"]], "Data classes": [[49, "data-classes"]], "Functions": [[50, "functions"]], "deserialize": [[51, "deserialize"]], "gelu": [[52, "gelu"]], "get": [[53, "get"]], "leaky_relu": [[54, "leaky-relu"]], "log_softmax": [[55, "log-softmax"]], "mish": [[56, "mish"]], "relu": [[57, "relu"]], "sigmoid": [[58, "sigmoid"]], "softmax": [[59, "softmax"]], "softplus": [[60, "softplus"]], "IfElse": [[61, "ifelse"]], "WhileLoop": [[62, "whileloop"]], "if_else": [[63, "if-else"]], "while_loop": [[64, "while-loop"]], "arange": [[65, "arange"]], "array": [[66, "array"]], "asarray": [[67, "asarray"]], "asarray_handle_nestable": [[68, "asarray-handle-nestable"]], "asarray_infer_device": [[69, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[70, "asarray-to-native-arrays-and-back"]], "copy_array": [[71, "copy-array"]], "empty": [[72, "empty"]], "empty_like": [[73, "empty-like"]], "eye": [[74, "eye"]], "from_dlpack": [[75, "from-dlpack"]], "Note": [[75, null], [316, null]], "full": [[76, "full"]], "full_like": [[77, "full-like"]], "linspace": [[78, "linspace"]], "logspace": [[79, "logspace"]], "meshgrid": [[80, "meshgrid"]], "native_array": [[81, "native-array"]], "one_hot": [[82, "one-hot"]], "ones": [[83, "ones"]], "ones_like": [[84, "ones-like"]], "tril": [[85, "tril"]], "triu": [[86, "triu"]], "zeros": [[87, "zeros"]], "zeros_like": [[88, "zeros-like"]], "as_ivy_dtype": [[89, "as-ivy-dtype"]], "as_native_dtype": [[90, "as-native-dtype"]], "astype": [[91, "astype"]], "broadcast_arrays": [[92, "broadcast-arrays"]], "broadcast_to": [[93, "broadcast-to"]], "can_cast": [[94, "can-cast"]], "check_float": [[95, "check-float"]], "closest_valid_dtype": [[96, "closest-valid-dtype"]], "default_complex_dtype": [[97, "default-complex-dtype"]], "default_dtype": [[98, "default-dtype"]], "default_float_dtype": [[99, "default-float-dtype"]], "default_int_dtype": [[100, "default-int-dtype"]], "default_uint_dtype": [[101, "default-uint-dtype"]], "dtype": [[102, "dtype"]], "dtype_bits": [[103, "dtype-bits"]], "finfo": [[104, "finfo"]], "function_supported_dtypes": [[105, "function-supported-dtypes"]], "function_unsupported_dtypes": [[106, "function-unsupported-dtypes"]], "iinfo": [[107, "iinfo"]], "infer_default_dtype": [[108, "infer-default-dtype"]], "invalid_dtype": [[109, "invalid-dtype"]], "is_bool_dtype": [[110, "is-bool-dtype"]], "is_complex_dtype": [[111, "is-complex-dtype"]], "is_float_dtype": [[112, "is-float-dtype"]], "is_int_dtype": [[113, "is-int-dtype"]], "is_native_dtype": [[114, "is-native-dtype"]], "is_uint_dtype": [[115, "is-uint-dtype"]], "promote_types": [[116, "promote-types"]], "promote_types_of_inputs": [[117, "promote-types-of-inputs"]], "result_type": [[118, "result-type"]], "set_default_complex_dtype": [[119, "set-default-complex-dtype"]], "set_default_dtype": [[120, "set-default-dtype"]], "set_default_float_dtype": [[121, "set-default-float-dtype"]], "set_default_int_dtype": [[122, "set-default-int-dtype"]], "set_default_uint_dtype": [[123, "set-default-uint-dtype"]], "type_promote_arrays": [[124, "type-promote-arrays"]], "unset_default_complex_dtype": [[125, "unset-default-complex-dtype"]], "unset_default_dtype": [[126, "unset-default-dtype"]], "unset_default_float_dtype": [[127, "unset-default-float-dtype"]], "unset_default_int_dtype": [[128, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[129, "unset-default-uint-dtype"]], "valid_dtype": [[130, "valid-dtype"]], "as_ivy_dev": [[131, "as-ivy-dev"]], "as_native_dev": [[132, "as-native-dev"]], "clear_cached_mem_on_dev": [[133, "clear-cached-mem-on-dev"]], "default_device": [[134, "default-device"]], "dev": [[135, "dev"]], "dev_util": [[136, "dev-util"]], "function_supported_devices": [[137, "function-supported-devices"]], "function_unsupported_devices": [[138, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[139, "get-all-ivy-arrays-on-dev"]], "gpu_is_available": [[140, "gpu-is-available"]], "num_cpu_cores": [[141, "num-cpu-cores"]], "num_gpus": [[142, "num-gpus"]], "num_ivy_arrays_on_dev": [[143, "num-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[144, "percent-used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[145, "print-all-ivy-arrays-on-dev"]], "set_default_device": [[146, "set-default-device"]], "set_split_factor": [[147, "set-split-factor"]], "split_factor": [[148, "split-factor"]], "split_func_call": [[149, "split-func-call"]], "to_device": [[150, "to-device"]], "total_mem_on_dev": [[151, "total-mem-on-dev"]], "tpu_is_available": [[152, "tpu-is-available"]], "unset_default_device": [[153, "unset-default-device"]], "used_mem_on_dev": [[154, "used-mem-on-dev"]], "abs": [[155, "abs"]], "acos": [[156, "acos"]], "acosh": [[157, "acosh"]], "add": [[158, "add"]], "asin": [[159, "asin"]], "asinh": [[160, "asinh"]], "atan": [[161, "atan"]], "atan2": [[162, "atan2"]], "atanh": [[163, "atanh"]], "bitwise_and": [[164, "bitwise-and"]], "bitwise_invert": [[165, "bitwise-invert"]], "bitwise_left_shift": [[166, "bitwise-left-shift"]], "bitwise_or": [[167, "bitwise-or"]], "bitwise_right_shift": [[168, "bitwise-right-shift"]], "bitwise_xor": [[169, "bitwise-xor"]], "ceil": [[170, "ceil"]], "cos": [[171, "cos"]], "cosh": [[172, "cosh"]], "deg2rad": [[173, "deg2rad"]], "divide": [[174, "divide"]], "equal": [[175, "equal"]], "erf": [[176, "erf"]], "exp": [[177, "exp"]], "expm1": [[178, "expm1"]], "floor": [[179, "floor"]], "floor_divide": [[180, "floor-divide"]], "fmod": [[181, "fmod"]], "greater": [[182, "greater"]], "greater_equal": [[183, "greater-equal"]], "isfinite": [[184, "isfinite"]], "isinf": [[185, "isinf"]], "isnan": [[186, "isnan"]], "isreal": [[187, "isreal"]], "less": [[188, "less"]], "less_equal": [[189, "less-equal"]], "log": [[190, "log"]], "log10": [[191, "log10"]], "log1p": [[192, "log1p"]], "log2": [[193, "log2"]], "logaddexp": [[194, "logaddexp"]], "logical_and": [[195, "logical-and"]], "logical_not": [[196, "logical-not"]], "logical_or": [[197, "logical-or"]], "logical_xor": [[198, "logical-xor"]], "maximum": [[199, "maximum"]], "minimum": [[200, "minimum"]], "multiply": [[201, "multiply"]], "negative": [[202, "negative"]], "not_equal": [[203, "not-equal"]], "positive": [[204, "positive"]], "pow": [[205, "pow"]], "rad2deg": [[206, "rad2deg"]], "reciprocal": [[207, "reciprocal"]], "remainder": [[208, "remainder"]], "round": [[209, "round"]], "sign": [[210, "sign"]], "sin": [[211, "sin"]], "sinh": [[212, "sinh"]], "sqrt": [[213, "sqrt"]], "square": [[214, "square"]], "subtract": [[215, "subtract"]], "tan": [[216, "tan"]], "tanh": [[217, "tanh"]], "trunc": [[218, "trunc"]], "trunc_divide": [[219, "trunc-divide"]], "all_equal": [[220, "all-equal"]], "arg_info": [[221, "arg-info"]], "arg_names": [[222, "arg-names"]], "array_equal": [[223, "array-equal"]], "assert_supports_inplace": [[224, "assert-supports-inplace"]], "cache_fn": [[225, "cache-fn"]], "clip_matrix_norm": [[226, "clip-matrix-norm"]], "clip_vector_norm": [[227, "clip-vector-norm"]], "container_types": [[228, "container-types"]], "current_backend_str": [[229, "current-backend-str"]], "default": [[230, "default"]], "einops_rearrange": [[231, "einops-rearrange"]], "einops_reduce": [[232, "einops-reduce"]], "einops_repeat": [[233, "einops-repeat"]], "exists": [[234, "exists"]], "fourier_encode": [[235, "fourier-encode"]], "function_supported_devices_and_dtypes": [[236, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[237, "function-unsupported-devices-and-dtypes"]], "gather": [[238, "gather"]], "gather_nd": [[239, "gather-nd"]], "get_all_arrays_in_memory": [[240, "get-all-arrays-in-memory"]], "get_array_mode": [[241, "get-array-mode"]], "get_exception_trace_mode": [[242, "get-exception-trace-mode"]], "get_item": [[243, "get-item"]], "get_min_base": [[244, "get-min-base"]], "get_min_denominator": [[245, "get-min-denominator"]], "get_nestable_mode": [[246, "get-nestable-mode"]], "get_num_dims": [[247, "get-num-dims"]], "get_queue_timeout": [[248, "get-queue-timeout"]], "get_referrers_recursive": [[249, "get-referrers-recursive"]], "get_show_func_wrapper_trace_mode": [[250, "get-show-func-wrapper-trace-mode"]], "get_tmp_dir": [[251, "get-tmp-dir"]], "has_nans": [[252, "has-nans"]], "inplace_arrays_supported": [[253, "inplace-arrays-supported"]], "inplace_decrement": [[254, "inplace-decrement"]], "inplace_increment": [[255, "inplace-increment"]], "inplace_update": [[256, "inplace-update"]], "inplace_variables_supported": [[257, "inplace-variables-supported"]], "is_array": [[258, "is-array"]], "is_ivy_array": [[259, "is-ivy-array"]], "is_ivy_container": [[260, "is-ivy-container"]], "is_native_array": [[261, "is-native-array"]], "isin": [[262, "isin"]], "isscalar": [[263, "isscalar"]], "itemsize": [[264, "itemsize"]], "match_kwargs": [[265, "match-kwargs"]], "multiprocessing": [[266, "multiprocessing"]], "num_arrays_in_memory": [[267, "num-arrays-in-memory"]], "print_all_arrays_in_memory": [[268, "print-all-arrays-in-memory"]], "scatter_flat": [[269, "scatter-flat"]], "scatter_nd": [[270, "scatter-nd"]], "set_array_mode": [[271, "set-array-mode"]], "Parameter": [[271, "parameter"], [272, "parameter"], [275, "parameter"], [277, "parameter"], [278, "parameter"], [321, "parameter"], [321, "id1"], [321, "id2"], [321, "id3"], [321, "id4"]], "set_exception_trace_mode": [[272, "set-exception-trace-mode"]], "set_min_base": [[273, "set-min-base"]], "set_min_denominator": [[274, "set-min-denominator"]], "set_nestable_mode": [[275, "set-nestable-mode"]], "set_queue_timeout": [[276, "set-queue-timeout"]], "set_shape_array_mode": [[277, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[278, "set-show-func-wrapper-trace-mode"]], "set_tmp_dir": [[279, "set-tmp-dir"]], "shape": [[280, "shape"]], "shape_array_mode": [[281, "shape-array-mode"]], "stable_divide": [[282, "stable-divide"]], "stable_pow": [[283, "stable-pow"]], "supports_inplace_updates": [[284, "supports-inplace-updates"]], "to_ivy_shape": [[285, "to-ivy-shape"]], "to_list": [[286, "to-list"]], "to_native_shape": [[287, "to-native-shape"]], "to_numpy": [[288, "to-numpy"]], "to_scalar": [[289, "to-scalar"]], "try_else_none": [[290, "try-else-none"]], "unset_array_mode": [[291, "unset-array-mode"]], "unset_exception_trace_mode": [[292, "unset-exception-trace-mode"]], "unset_nestable_mode": [[293, "unset-nestable-mode"]], "unset_queue_timeout": [[294, "unset-queue-timeout"]], "unset_shape_array_mode": [[295, "unset-shape-array-mode"]], "unset_show_func_wrapper_trace_mode": [[296, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[297, "value-is-nan"]], "vmap": [[298, "vmap"]], "adam_step": [[299, "adam-step"]], "adam_update": [[300, "adam-update"]], "execute_with_gradients": [[301, "execute-with-gradients"]], "grad": [[302, "grad"]], "gradient_descent_update": [[303, "gradient-descent-update"]], "jac": [[304, "jac"]], "lamb_update": [[305, "lamb-update"]], "lars_update": [[306, "lars-update"]], "optimizer_update": [[307, "optimizer-update"]], "set_with_grads": [[308, "set-with-grads"]], "stop_gradient": [[309, "stop-gradient"]], "unset_with_grads": [[310, "unset-with-grads"]], "value_and_grad": [[311, "value-and-grad"]], "with_grads": [[312, "with-grads"]], "Constants": [[314, "constants"]], "Control flow ops": [[315, "control-flow-ops"]], "Meta": [[327, "meta"]], "Nest": [[328, "nest"]], "Data-dependent output shape": [[332, null], [332, null], [332, null], [332, null], [434, null], [435, null], [436, null], [437, null]], "conv": [[336, "conv"]], "conv1d": [[337, "conv1d"]], "conv1d_transpose": [[338, "conv1d-transpose"]], "conv2d": [[339, "conv2d"]], "conv2d_transpose": [[340, "conv2d-transpose"]], "conv3d": [[341, "conv3d"]], "conv3d_transpose": [[342, "conv3d-transpose"]], "conv_general_dilated": [[343, "conv-general-dilated"]], "conv_general_transpose": [[344, "conv-general-transpose"]], "depthwise_conv2d": [[345, "depthwise-conv2d"]], "dropout": [[346, "dropout"]], "linear": [[347, "linear"]], "lstm_update": [[348, "lstm-update"]], "multi_head_attention": [[349, "multi-head-attention"]], "scaled_dot_product_attention": [[350, "scaled-dot-product-attention"]], "cholesky": [[351, "cholesky"]], "cross": [[352, "cross"]], "det": [[353, "det"]], "diag": [[354, "diag"]], "diagonal": [[355, "diagonal"]], "eig": [[356, "eig"]], "eigh": [[357, "eigh"]], "eigvalsh": [[358, "eigvalsh"]], "inner": [[359, "inner"]], "inv": [[360, "inv"]], "lu_factor": [[361, "lu-factor"]], "matmul": [[362, "matmul"]], "matrix_norm": [[363, "matrix-norm"]], "matrix_power": [[364, "matrix-power"]], "matrix_rank": [[365, "matrix-rank"]], "matrix_transpose": [[366, "matrix-transpose"]], "outer": [[367, "outer"]], "pinv": [[368, "pinv"]], "qr": [[369, "qr"]], "slogdet": [[370, "slogdet"]], "solve": [[371, "solve"]], "svd": [[372, "svd"]], "svdvals": [[373, "svdvals"]], "tensordot": [[374, "tensordot"]], "tensorsolve": [[375, "tensorsolve"]], "trace": [[376, "trace"]], "vander": [[377, "vander"]], "vecdot": [[378, "vecdot"]], "vector_norm": [[379, "vector-norm"]], "vector_to_skew_symmetric_matrix": [[380, "vector-to-skew-symmetric-matrix"]], "binary_cross_entropy": [[381, "binary-cross-entropy"]], "cross_entropy": [[382, "cross-entropy"]], "sparse_cross_entropy": [[383, "sparse-cross-entropy"]], "clip": [[384, "clip"]], "concat": [[385, "concat"]], "constant_pad": [[386, "constant-pad"]], "expand_dims": [[387, "expand-dims"]], "flip": [[388, "flip"]], "permute_dims": [[389, "permute-dims"]], "repeat": [[390, "repeat"]], "reshape": [[391, "reshape"]], "roll": [[392, "roll"]], "split": [[393, "split"]], "squeeze": [[394, "squeeze"]], "stack": [[395, "stack"]], "swapaxes": [[396, "swapaxes"]], "tile": [[397, "tile"]], "unstack": [[398, "unstack"]], "zero_pad": [[399, "zero-pad"]], "fomaml_step": [[400, "fomaml-step"]], "maml_step": [[401, "maml-step"]], "reptile_step": [[402, "reptile-step"]], "all_nested_indices": [[403, "all-nested-indices"]], "copy_nest": [[404, "copy-nest"]], "duplicate_array_index_chains": [[405, "duplicate-array-index-chains"]], "index_nest": [[406, "index-nest"]], "insert_into_nest_at_index": [[407, "insert-into-nest-at-index"]], "insert_into_nest_at_indices": [[408, "insert-into-nest-at-indices"]], "map": [[409, "map"]], "map_nest_at_index": [[410, "map-nest-at-index"]], "map_nest_at_indices": [[411, "map-nest-at-indices"]], "multi_index_nest": [[412, "multi-index-nest"]], "nested_any": [[413, "nested-any"]], "nested_argwhere": [[414, "nested-argwhere"]], "nested_map": [[415, "nested-map"]], "nested_multi_map": [[416, "nested-multi-map"]], "prune_empty": [[417, "prune-empty"]], "prune_nest_at_index": [[418, "prune-nest-at-index"]], "prune_nest_at_indices": [[419, "prune-nest-at-indices"]], "set_nest_at_index": [[420, "set-nest-at-index"]], "set_nest_at_indices": [[421, "set-nest-at-indices"]], "layer_norm": [[422, "layer-norm"]], "multinomial": [[423, "multinomial"]], "randint": [[424, "randint"]], "random_normal": [[425, "random-normal"]], "random_uniform": [[426, "random-uniform"]], "seed": [[427, "seed"]], "shuffle": [[428, "shuffle"]], "argmax": [[429, "argmax"]], "argmin": [[430, "argmin"]], "argwhere": [[431, "argwhere"]], "nonzero": [[432, "nonzero"]], "where": [[433, "where"]], "unique_all": [[434, "unique-all"]], "unique_counts": [[435, "unique-counts"]], "unique_inverse": [[436, "unique-inverse"]], "unique_values": [[437, "unique-values"]], "argsort": [[438, "argsort"]], "searchsorted": [[439, "searchsorted"]], "sort": [[440, "sort"]], "cumprod": [[441, "cumprod"]], "cumsum": [[442, "cumsum"]], "einsum": [[443, "einsum"]], "max": [[444, "max"]], "mean": [[445, "mean"]], "min": [[446, "min"]], "prod": [[447, "prod"]], "std": [[448, "std"]], "sum": [[449, "sum"]], "var": [[450, "var"]], "all": [[451, "all"]], "any": [[452, "any"]], "Assertions": [[453, "module-ivy_tests.test_ivy.helpers.assertions"], [479, "module-ivy.utils.assertions"]], "Available frameworks": [[454, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Function testing": [[455, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[456, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[457, "hypothesis-helpers"]], "Array helpers": [[458, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Dtype helpers": [[459, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "General helpers": [[460, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Number helpers": [[461, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Structs": [[462, "module-ivy_tests.test_ivy.helpers.structs"]], "Test parameter flags": [[463, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Testing helpers": [[464, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Nested array": [[465, "nested-array"], [469, "module-ivy.nested_array.nested_array"]], "Framework classes": [[466, "framework-classes"]], "Utils": [[467, "utils"]], "Testing": [[468, "testing"]], "Converters": [[471, "module-ivy.stateful.converters"]], "Helpers": [[472, "module-ivy.stateful.helpers"]], "Initializers": [[473, "module-ivy.stateful.initializers"], [529, "initializers"]], "Module": [[475, "module-ivy.stateful.module"]], "Optimizers": [[477, "module-ivy.stateful.optimizers"], [529, "optimizers"]], "Sequential": [[478, "module-ivy.stateful.sequential"]], "Backend": [[480, "backend"]], "Ast helpers": [[481, "module-ivy.utils.backend.ast_helpers"]], "Handler": [[482, "module-ivy.utils.backend.handler"]], "Sub backend handler": [[483, "module-ivy.utils.backend.sub_backend_handler"]], "Dynamic import": [[484, "module-ivy.utils.dynamic_import"]], "Exceptions": [[485, "module-ivy.utils.exceptions"]], "Inspection": [[486, "module-ivy.utils.inspection"]], "Profiler": [[487, "module-ivy.utils.profiler"]], "Verbosity": [[488, "module-ivy.utils.verbosity"]], "Contents": [[489, "contents"]], "Ivy as a transpiler": [[489, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[489, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[489, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[489, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[489, "setting-up-ivy"]], "Installing using pip": [[489, "installing-using-pip"]], "Docker": [[489, "docker"]], "Installing from source": [[489, "installing-from-source"]], "Using Ivy": [[489, "using-ivy"]], "Documentation": [[489, "documentation"]], "Contributing": [[489, "contributing"], [494, "contributing"]], "Community": [[489, "community"]], "Citation": [[489, "citation"]], "Background": [[490, "background"]], "ML Explosion": [[491, "ml-explosion"]], "Standardization": [[492, "standardization"]], "Skepticism": [[492, "skepticism"]], "Complimentary vs Competitive": [[492, "complimentary-vs-competitive"]], "Do Standards Work?": [[492, "do-standards-work"]], "The Array API Standard": [[492, "the-array-api-standard"]], "Why Unify?": [[493, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[493, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[493, "infinite-shelf-life"]], "Applied Libraries": [[495, "applied-libraries"], [532, "applied-libraries"]], "Introduction": [[495, "introduction"], [519, "introduction"], [520, "introduction"]], "Example - Ivy Robot": [[495, "example-ivy-robot"]], "Building the Docs": [[496, "building-the-docs"]], "Building the Docs using Docker": [[496, "building-the-docs-using-docker"]], "Using convenience script": [[496, "using-convenience-script"]], "Using existing image on Docker Hub": [[496, "using-existing-image-on-docker-hub"]], "Building the image locally": [[496, "building-the-image-locally"]], "Building the Docs without Docker": [[496, "building-the-docs-without-docker"]], "Helpful Resources": [[497, "helpful-resources"]], "Open Tasks": [[498, "open-tasks"]], "Function Formatting": [[498, "function-formatting"]], "Formatting checklist": [[498, "formatting-checklist"]], "Frontend APIs": [[498, "frontend-apis"]], "Where to place a frontend function": [[498, "where-to-place-a-frontend-function"]], "Ivy Experimental API": [[498, "ivy-experimental-api"], [500, "id4"]], "Setting Up": [[499, "setting-up"]], "Forking and cloning the repo": [[499, "forking-and-cloning-the-repo"]], "PyCharm": [[499, "pycharm"]], "Virtual environments - No Docker": [[499, "virtual-environments-no-docker"]], "Using miniconda": [[499, "using-miniconda"]], "Using venv": [[499, "using-venv"]], "Docker Interpreter with PyCharm": [[499, "docker-interpreter-with-pycharm"]], "Windows": [[499, "windows"], [499, "id6"]], "MacOS": [[499, "macos"]], "Ubuntu": [[499, "ubuntu"], [499, "id8"]], "Setting Up Testing": [[499, "setting-up-testing"]], "More Detailed Hypothesis Logs": [[499, "more-detailed-hypothesis-logs"]], "Setting up for Free": [[499, "setting-up-for-free"]], "GitHub Codespaces": [[499, "github-codespaces"]], "Pre-Commit": [[499, "pre-commit"]], "The Basics": [[500, "the-basics"]], "Getting Help": [[500, "getting-help"]], "ToDo List Issues": [[500, "todo-list-issues"]], "Managing Your Fork": [[500, "managing-your-fork"]], "Who To Ask": [[500, "who-to-ask"]], "With Command Line:": [[500, "with-command-line"]], "With Browser:": [[500, "with-browser"]], "Pull Requests": [[500, "pull-requests"]], "Small Commits Often": [[500, "small-commits-often"]], "Interactive Ivy Docker Container": [[500, "interactive-ivy-docker-container"]], "Running Tests Locally": [[500, "running-tests-locally"]], "With Docker": [[500, "with-docker"]], "Getting the most out of IDE": [[500, "getting-the-most-out-of-ide"]], "with PyCharm": [[500, "with-pycharm"]], "Deep Dive": [[501, "deep-dive"]], "Array API Tests": [[502, "array-api-tests"], [507, "array-api-tests"]], "Running the Tests": [[502, "running-the-tests"]], "Using Terminal": [[502, "using-terminal"]], "Using the IDE": [[502, "using-the-ide"]], "Regenerating Test Failures": [[502, "regenerating-test-failures"]], "Test Skipping": [[502, "test-skipping"]], "Arrays": [[503, "arrays"]], "Native Array": [[503, "native-array"]], "Ivy Array": [[503, "ivy-array"], [527, "ivy-array"]], "Array Handling": [[503, "array-handling"]], "Integrating custom classes with Ivy": [[503, "integrating-custom-classes-with-ivy"]], "Backend Setting": [[504, "backend-setting"]], "Backend and Frontend Version Support": [[504, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[505, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[505, "how-the-doc-builder-is-being-run"]], "The convenience script": [[505, "the-convenience-script"]], "Options": [[505, "options"]], "The Docker image": [[505, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[505, "how-ivy-s-docs-is-structured"]], "index.rst": [[505, "index-rst"]], "partial_conf.py": [[505, "partial-conf-py"]], "prebuild.sh": [[505, "prebuild-sh"]], "Custom Extensions": [[505, "custom-extensions"]], "custom_autosummary": [[505, "custom-autosummary"]], ":hide-table:": [[505, "hide-table"]], ":include:": [[505, "include"]], ":fix-directory:": [[505, "fix-directory"]], ":substitute-caption:": [[505, "substitute-caption"]], "custom_builder": [[505, "custom-builder"]], "discussion_linker": [[505, "discussion-linker"]], "skippable_function": [[505, "skippable-function"]], "Containers": [[506, "containers"]], "Container Instance Methods": [[506, "container-instance-methods"]], "Container Static Methods": [[506, "container-static-methods"]], "API Static Methods": [[506, "api-static-methods"]], "API Instance Methods": [[506, "api-instance-methods"]], "API Special Methods": [[506, "api-special-methods"]], "Nestable Functions": [[506, "nestable-functions"], [514, "nestable-functions"], [515, "nestable-functions"]], "Continuous Integration": [[507, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[507, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[507, "ivy-tests"], [521, "ivy-tests"]], "Implementation": [[507, "implementation"]], "A Top-Down View": [[507, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[507, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[507, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[507, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[507, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[507, "determine-test-coverage-workflow"]], "Multiple Runners": [[507, "multiple-runners"]], "Race Condition": [[507, "race-condition"]], "Periodic Testing": [[507, "periodic-testing"]], "Manually Dispatched Workflows": [[507, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[507, "ci-pipeline"]], "Push": [[507, "push"]], "Pull Request": [[507, "pull-request"]], "Dashboard": [[507, "dashboard"]], "Data Types": [[508, "data-types"]], "Data Type Module": [[508, "data-type-module"]], "Data Type Promotion": [[508, "data-type-promotion"]], "Arguments in other Functions": [[508, "arguments-in-other-functions"], [509, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[508, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[508, "backend-data-type-bugs"]], "Superset Data Type Support": [[508, "superset-data-type-support"]], "Devices": [[509, "devices"]], "Device Module": [[509, "device-module"]], "Docstring Examples": [[510, "docstring-examples"]], "ivy.tan": [[510, "ivy-tan"]], "ivy.roll": [[510, "ivy-roll"]], "ivy.add": [[510, "ivy-add"]], "Docstrings": [[511, "docstrings"]], "Exception Handling": [[512, "exception-handling"]], "Ivy Exception Class": [[512, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[512, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[512, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[512, "handle-exceptions-decorator"]], "Assertion Function": [[512, "assertion-function"]], "Formatting": [[513, "formatting"]], "Lint Checks": [[513, "lint-checks"]], "Pre-Commit Hook": [[513, "pre-commit-hook"]], "Function Arguments": [[514, "function-arguments"]], "Positional and Keyword Arguments": [[514, "positional-and-keyword-arguments"]], "Input Arrays": [[514, "input-arrays"]], "out Argument": [[514, "out-argument"]], "dtype and device arguments": [[514, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[514, "numbers-in-operator-functions"]], "Integer Sequences": [[514, "integer-sequences"]], "Function Types": [[515, "function-types"]], "Primary Functions": [[515, "primary-functions"]], "Compositional Functions": [[515, "compositional-functions"]], "Mixed Functions": [[515, "mixed-functions"]], "Standalone Functions": [[515, "standalone-functions"]], "Convenience Functions": [[515, "convenience-functions"]], "Function Wrapping": [[516, "function-wrapping"]], "Overview": [[517, "overview"]], "Example Usage of the Gradient API": [[517, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[517, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[517, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[517, "custom-gradient-functions"]], "Design of the Gradient API": [[517, "design-of-the-gradient-api"]], "Our policy on gradients": [[517, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[517, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[517, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[517, "framework-specific-considerations"]], "Inplace Updates": [[518, "inplace-updates"]], "out argument": [[518, "out-argument"]], "Views": [[518, "views"]], "copy argument": [[518, "copy-argument"]], "Ivy Frontends": [[519, "ivy-frontends"]], "The Frontend Basics": [[519, "the-frontend-basics"]], "Writing Frontend Functions": [[519, "writing-frontend-functions"]], "Unused Arguments": [[519, "unused-arguments"]], "Compositions": [[519, "compositions"]], "Missing Ivy Functions": [[519, "missing-ivy-functions"]], "Temporary Compositions": [[519, "temporary-compositions"]], "Supported Data Types and Devices": [[519, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[519, "id6"]], "Frontend Data Type Promotion Rules": [[519, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[519, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[519, "frontends-duplicate-policy"]], "Ivy Frontend Tests": [[520, "ivy-frontend-tests"]], "Frontend Test Examples": [[520, "frontend-test-examples"]], "ivy.tan()": [[520, "ivy-tan"]], "ivy.full()": [[520, "ivy-full"]], "Testing Without Using Tests Values": [[520, "testing-without-using-tests-values"]], "Alias functions": [[520, "alias-functions"]], "Frontend Instance Method Tests": [[520, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[520, "frontend-instance-method-test-examples"]], "ivy.add()": [[520, "ivy-add"]], "Hypothesis Helpers": [[520, "hypothesis-helpers"]], "Testing Pipeline": [[521, "testing-pipeline"]], "Hypothesis": [[521, "id2"]], "Data Generation": [[521, "id3"]], "Writing your own strategy": [[521, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[521, "writing-hypothesis-test"]], "Ivy Test Decorators": [[521, "ivy-test-decorators"]], "Writing Ivy Tests": [[521, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[521, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[521, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[521, "how-to-write-hypothesis-tests-effectively"]], "Bonus: Hypothesis\u2019 Extended Features": [[521, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[521, "self-consistent-and-explicit-testing"]], "test_array_function": [[521, "id6"]], "Running Ivy Tests": [[521, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[521, "re-running-failed-ivy-tests"]], "Navigating the Code": [[522, "navigating-the-code"]], "Categorization": [[522, "categorization"]], "Submodule Design": [[522, "submodule-design"]], "Ivy API": [[522, "ivy-api"]], "Backend API": [[522, "backend-api"]], "Submodule Helper Functions": [[522, "submodule-helper-functions"]], "Version Pinning": [[522, "version-pinning"]], "Superset Behaviour": [[523, "superset-behaviour"]], "Extending the Standard": [[523, "extending-the-standard"]], "What is the Superset?": [[523, "what-is-the-superset"]], "A Non-Duplicate Superset": [[523, "a-non-duplicate-superset"]], "What is not the Superset?": [[523, "what-is-not-the-superset"]], "When the Superset is Too Much": [[523, "when-the-superset-is-too-much"]], "Balancing Generalization with Efficiency": [[523, "balancing-generalization-with-efficiency"]], "More Examples": [[523, "more-examples"]], "Maximizing Usage of Native Functionality": [[523, "maximizing-usage-of-native-functionality"]], "Design": [[524, "design"]], "Building Blocks": [[525, "building-blocks"]], "Backend Functional APIs \u2705": [[525, "backend-functional-apis"]], "Ivy Functional API \u2705": [[525, "ivy-functional-api"]], "Backend Handler \u2705": [[525, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[525, "graph-compiler"]], "Ivy as a Framework": [[526, "ivy-as-a-framework"]], "The Array Class": [[527, "the-array-class"]], "Unifying Operators": [[527, "unifying-operators"]], "API Monkey Patching": [[527, "api-monkey-patching"]], "Instance Methods": [[527, "instance-methods"]], "Ivy Container": [[528, "ivy-container"]], "Construction": [[528, "construction"]], "Representation": [[528, "representation"]], "Recursive Methods": [[528, "recursive-methods"]], "Built-ins": [[528, "built-ins"]], "Access": [[528, "access"]], "Saving and Loading": [[528, "saving-and-loading"]], "Comparisons": [[528, "comparisons"]], "Customized Representations": [[528, "customized-representations"]], "Use Cases": [[528, "use-cases"]], "Compartmentalization": [[528, "compartmentalization"]], "Configuration": [[528, "configuration"]], "Data loading": [[528, "data-loading"]], "Network weights": [[528, "network-weights"]], "Ivy Stateful API": [[529, "ivy-stateful-api"]], "Modules": [[529, "modules"]], "Ivy as a Transpiler": [[530, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[530, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[530, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[530, "converting-network-models"]], "Extensions": [[531, "extensions"]], "Ivy Mechanics": [[532, "ivy-mechanics"]], "Ivy Vision": [[532, "ivy-vision"]], "Ivy Robot": [[532, "ivy-robot"]], "Ivy Gym": [[532, "ivy-gym"]], "Ivy Memory": [[532, "ivy-memory"]], "FAQ": [[533, "faq"]], "Maintaining Backend Versions": [[533, "maintaining-backend-versions"]], "Dynamic Sizes": [[533, "dynamic-sizes"]], "Type and Shape Checking": [[533, "type-and-shape-checking"]], "GPU handling": [[533, "gpu-handling"]], "Model Deployment": [[533, "model-deployment"]], "Dynamic Control Flow": [[533, "dynamic-control-flow"]], "Auto-Differentiation": [[533, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[533, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[533, "support-for-functions"]], "Alternative Data Structures": [[533, "alternative-data-structures"]], "Custom Operations": [[533, "custom-operations"]], "The Pipeline": [[533, "the-pipeline"]], "State": [[533, "state"]], "Glossary": [[534, "glossary"]], "Related Work": [[535, "related-work"]], "API Standards": [[536, "api-standards"], [545, "api-standards"]], "Array API Standard": [[536, "id1"]], "Compiler Infrastructure": [[537, "compiler-infrastructure"], [545, "compiler-infrastructure"]], "LLVM": [[537, "id1"]], "MLIR": [[537, "id2"]], "OneAPI": [[537, "id3"]], "Exchange Formats": [[538, "exchange-formats"], [545, "exchange-formats"]], "ONNX onnx": [[538, "onnx-onnx"]], "NNEF nnef": [[538, "nnef-nnef"]], "CoreML coreml": [[538, "coreml-coreml"]], "Frameworks": [[539, "frameworks"], [545, "frameworks"]], "MATLAB matlab": [[539, "matlab-matlab"]], "SciPy scipy": [[539, "scipy-scipy"]], "Torch torch": [[539, "torch-torch"]], "NumPy numpy": [[539, "numpy-numpy"]], "SciKit Learn scikit-learn": [[539, "scikit-learn-scikit-learn"]], "Theano theano": [[539, "theano-theano"]], "Pandas pandas": [[539, "pandas-pandas"]], "Julia julia": [[539, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[539, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[539, "caffe-caffe"]], "Chainer chainer": [[539, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[539, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[539, "mxnet-mxnet"]], "CNTK cntk": [[539, "cntk-cntk"]], "PyTorch pytorch": [[539, "pytorch-pytorch"]], "Flux flux": [[539, "flux-flux"]], "JAX jax": [[539, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[539, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[539, "dex-language-dex-language"]], "Graph Tracers": [[540, "graph-tracers"], [545, "graph-tracers"]], "tf.Graph": [[540, "tf-graph"]], "Jaxpr": [[540, "jaxpr"]], "torch.jit": [[540, "torch-jit"]], "torch.fx": [[540, "torch-fx"]], "ML-Unifying Companies": [[541, "ml-unifying-companies"], [545, "ml-unifying-companies"]], "Quansight": [[541, "id1"]], "Modular": [[541, "id2"]], "OctoML": [[541, "id3"]], "Multi-Vendor Compiler Frameworks": [[542, "multi-vendor-compiler-frameworks"], [545, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[542, "apache-tvm"]], "XLA": [[542, "xla"]], "GCC": [[542, "gcc"]], "Vendor-Specific APIs": [[543, "vendor-specific-apis"], [545, "vendor-specific-apis"]], "TensorRT tensorrt": [[543, "tensorrt-tensorrt"]], "CUDA cuda": [[543, "cuda-cuda"]], "Vendor-Specific Compilers": [[544, "vendor-specific-compilers"], [545, "vendor-specific-compilers"]], "ICC": [[544, "id1"]], "ICX": [[544, "icx"]], "NVCC": [[544, "nvcc"]], "What does Ivy Add?": [[545, "what-does-ivy-add"]], "Wrapper Frameworks": [[545, "wrapper-frameworks"], [546, "wrapper-frameworks"]], "EagerPy eagerpy": [[546, "eagerpy-eagerpy"]], "Keras keras": [[546, "keras-keras"]], "Thinc thinc": [[546, "thinc-thinc"]], "TensorLy tensorly": [[546, "tensorly-tensorly"]], "NeuroPod": [[546, "id1"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [1, "ivy.transpile"], [1, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[1, "ivy.transpile"]], "ivy.unify()": [[1, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "ivy.data_classes.array.activations": [[2, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[2, "module-ivy.data_classes.array.activations"], [3, "module-ivy.data_classes.array.conversions"], [4, "module-ivy.data_classes.array.creation"], [5, "module-ivy.data_classes.array.data_type"], [6, "module-ivy.data_classes.array.device"], [7, "module-ivy.data_classes.array.elementwise"], [8, "module-ivy.data_classes.array.experimental"], [8, "module-ivy.data_classes.array.experimental.activations"], [8, "module-ivy.data_classes.array.experimental.conversions"], [8, "module-ivy.data_classes.array.experimental.creation"], [8, "module-ivy.data_classes.array.experimental.data_type"], [8, "module-ivy.data_classes.array.experimental.device"], [8, "module-ivy.data_classes.array.experimental.elementwise"], [8, "module-ivy.data_classes.array.experimental.general"], [8, "module-ivy.data_classes.array.experimental.gradients"], [8, "module-ivy.data_classes.array.experimental.image"], [8, "module-ivy.data_classes.array.experimental.layers"], [8, "module-ivy.data_classes.array.experimental.linear_algebra"], [8, "module-ivy.data_classes.array.experimental.losses"], [8, "module-ivy.data_classes.array.experimental.manipulation"], [8, "module-ivy.data_classes.array.experimental.norms"], [8, "module-ivy.data_classes.array.experimental.random"], [8, "module-ivy.data_classes.array.experimental.searching"], [8, "module-ivy.data_classes.array.experimental.set"], [8, "module-ivy.data_classes.array.experimental.sorting"], [8, "module-ivy.data_classes.array.experimental.statistical"], [8, "module-ivy.data_classes.array.experimental.utility"], [9, "module-ivy.data_classes.array.general"], [10, "module-ivy.data_classes.array.gradients"], [11, "module-ivy.data_classes.array.image"], [12, "module-ivy.data_classes.array.layers"], [13, "module-ivy.data_classes.array.linear_algebra"], [14, "module-ivy.data_classes.array.losses"], [15, "module-ivy.data_classes.array.manipulation"], [16, "module-ivy.data_classes.array.norms"], [17, "module-ivy.data_classes.array.random"], [18, "module-ivy.data_classes.array.searching"], [19, "module-ivy.data_classes.array.set"], [20, "module-ivy.data_classes.array.sorting"], [21, "module-ivy.data_classes.array.statistical"], [22, "module-ivy.data_classes.array.utility"], [23, "module-ivy.data_classes.array.wrapping"], [24, "module-ivy.data_classes.container.activations"], [25, "module-ivy.data_classes.container.base"], [26, "module-ivy.data_classes.container.conversions"], [27, "module-ivy.data_classes.container.creation"], [28, "module-ivy.data_classes.container.data_type"], [29, "module-ivy.data_classes.container.device"], [30, "module-ivy.data_classes.container.elementwise"], [31, "module-ivy.data_classes.container.experimental"], [31, "module-ivy.data_classes.container.experimental.activations"], [31, "module-ivy.data_classes.container.experimental.conversions"], [31, "module-ivy.data_classes.container.experimental.creation"], [31, "module-ivy.data_classes.container.experimental.data_type"], [31, "module-ivy.data_classes.container.experimental.device"], [31, "module-ivy.data_classes.container.experimental.elementwise"], [31, "module-ivy.data_classes.container.experimental.general"], [31, "module-ivy.data_classes.container.experimental.gradients"], [31, "module-ivy.data_classes.container.experimental.image"], [31, "module-ivy.data_classes.container.experimental.layers"], [31, "module-ivy.data_classes.container.experimental.linear_algebra"], [31, "module-ivy.data_classes.container.experimental.losses"], [31, "module-ivy.data_classes.container.experimental.manipulation"], [31, "module-ivy.data_classes.container.experimental.norms"], [31, "module-ivy.data_classes.container.experimental.random"], [31, "module-ivy.data_classes.container.experimental.searching"], [31, "module-ivy.data_classes.container.experimental.set"], [31, "module-ivy.data_classes.container.experimental.sorting"], [31, "module-ivy.data_classes.container.experimental.statistical"], [31, "module-ivy.data_classes.container.experimental.utility"], [32, "module-ivy.data_classes.container.general"], [33, "module-ivy.data_classes.container.gradients"], [34, "module-ivy.data_classes.container.image"], [35, "module-ivy.data_classes.container.layers"], [36, "module-ivy.data_classes.container.linear_algebra"], [37, "module-ivy.data_classes.container.losses"], [38, "module-ivy.data_classes.container.manipulation"], [39, "module-ivy.data_classes.container.norms"], [40, "module-ivy.data_classes.container.random"], [41, "module-ivy.data_classes.container.searching"], [42, "module-ivy.data_classes.container.set"], [43, "module-ivy.data_classes.container.sorting"], [44, "module-ivy.data_classes.container.statistical"], [45, "module-ivy.data_classes.container.utility"], [46, "module-ivy.data_classes.container.wrapping"], [47, "module-ivy.data_classes.array.array"], [48, "module-ivy.data_classes.container.container"], [313, "module-ivy.functional.ivy.activations"], [314, "module-ivy.functional.ivy.constants"], [315, "module-ivy.functional.ivy.control_flow_ops"], [316, "module-ivy.functional.ivy.creation"], [317, "module-ivy.functional.ivy.data_type"], [318, "module-ivy.functional.ivy.device"], [319, "module-ivy.functional.ivy.elementwise"], [320, "module-ivy.functional.ivy.experimental"], [321, "module-ivy.functional.ivy.general"], [322, "module-ivy.functional.ivy.gradients"], [323, "module-ivy.functional.ivy.layers"], [324, "module-ivy.functional.ivy.linear_algebra"], [325, "module-ivy.functional.ivy.losses"], [326, "module-ivy.functional.ivy.manipulation"], [327, "module-ivy.functional.ivy.meta"], [328, "module-ivy.functional.ivy.nest"], [329, "module-ivy.functional.ivy.norms"], [330, "module-ivy.functional.ivy.random"], [331, "module-ivy.functional.ivy.searching"], [332, "module-ivy.functional.ivy.set"], [333, "module-ivy.functional.ivy.sorting"], [334, "module-ivy.functional.ivy.statistical"], [335, "module-ivy.functional.ivy.utility"], [453, "module-ivy_tests.test_ivy.helpers.assertions"], [454, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [455, "module-ivy_tests.test_ivy.helpers.function_testing"], [456, "module-ivy_tests.test_ivy.helpers.globals"], [457, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [458, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [459, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [460, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [461, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [462, "module-ivy_tests.test_ivy.helpers.structs"], [463, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [464, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [469, "module-ivy.nested_array.nested_array"], [470, "module-ivy.stateful.activations"], [471, "module-ivy.stateful.converters"], [472, "module-ivy.stateful.helpers"], [473, "module-ivy.stateful.initializers"], [474, "module-ivy.stateful.layers"], [475, "module-ivy.stateful.module"], [476, "module-ivy.stateful.norms"], [477, "module-ivy.stateful.optimizers"], [478, "module-ivy.stateful.sequential"], [479, "module-ivy.utils.assertions"], [480, "module-ivy.utils.backend"], [481, "module-ivy.utils.backend.ast_helpers"], [482, "module-ivy.utils.backend.handler"], [483, "module-ivy.utils.backend.sub_backend_handler"], [484, "module-ivy.utils.dynamic_import"], [485, "module-ivy.utils.exceptions"], [486, "module-ivy.utils.inspection"], [487, "module-ivy.utils.profiler"], [488, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[3, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[4, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[5, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[6, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[6, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[6, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[7, "module-ivy.data_classes.array.elementwise"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.angle"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cov"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gcd() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[8, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[8, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[8, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[8, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[8, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[8, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[8, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[8, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[8, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[8, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[8, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[8, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[8, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[8, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[8, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[8, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[8, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[8, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[8, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[8, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trapz() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.trapz"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[9, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[10, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[11, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[11, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[11, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[12, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[13, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[14, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[15, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[16, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[17, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[17, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[17, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[18, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[19, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[19, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[19, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[20, "module-ivy.data_classes.array.sorting"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[21, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[22, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[23, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "ivy.data_classes.container.activations": [[24, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[25, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[25, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[26, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[27, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[28, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[29, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[29, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[30, "module-ivy.data_classes.container.elementwise"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.angle"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.binary_cross_entropy_with_logits"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cov"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "frombuffer() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.frombuffer"]], "gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[31, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[31, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[31, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[31, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[31, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[31, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[31, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[31, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[31, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[31, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[31, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[31, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[31, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[31, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[31, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[31, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[31, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[31, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[31, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[31, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_angle"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.static_binary_cross_entropy_with_logits"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_exp2"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_fft"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmin"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_frombuffer() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_frombuffer"]], "static_gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gcd"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_imag"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lcm"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_logaddexp2"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_msort"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nan_to_num"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_real"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_triu_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.triu_indices"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[32, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[33, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[34, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[34, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[34, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[35, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[36, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[37, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[38, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[39, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[40, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[40, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[41, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[42, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[42, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[42, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[43, "module-ivy.data_classes.container.sorting"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[44, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[45, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[46, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[47, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__xor__"]], "base (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dynamic_backend"]], "itemsize (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[47, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.size"]], "container (class in ivy.data_classes.container.container)": [[48, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[48, "module-ivy.data_classes.container.container"]], "deserialize() (in module ivy)": [[51, "ivy.deserialize"], [313, "ivy.deserialize"]], "gelu() (in module ivy)": [[52, "ivy.gelu"], [313, "ivy.gelu"]], "gelu() (ivy.array method)": [[52, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[52, "ivy.Container.gelu"]], "get() (in module ivy)": [[53, "ivy.get"], [313, "ivy.get"]], "get() (ivy.container method)": [[53, "ivy.Container.get"]], "leaky_relu() (in module ivy)": [[54, "ivy.leaky_relu"], [313, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[54, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[54, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[55, "ivy.log_softmax"], [313, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[55, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[55, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[56, "ivy.mish"], [313, "ivy.mish"]], "mish() (ivy.array method)": [[56, "ivy.Array.mish"]], "mish() (ivy.container method)": [[56, "ivy.Container.mish"]], "relu() (in module ivy)": [[57, "ivy.relu"], [313, "ivy.relu"]], "relu() (ivy.array method)": [[57, "ivy.Array.relu"]], "relu() (ivy.container method)": [[57, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[58, "ivy.sigmoid"], [313, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[58, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[58, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[59, "ivy.softmax"], [313, "ivy.softmax"]], "softmax() (ivy.array method)": [[59, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[59, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[60, "ivy.softplus"], [313, "ivy.softplus"]], "softplus() (ivy.array method)": [[60, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[60, "ivy.Container.softplus"]], "ifelse() (in module ivy)": [[61, "ivy.IfElse"], [315, "ivy.IfElse"]], "whileloop() (in module ivy)": [[62, "ivy.WhileLoop"], [315, "ivy.WhileLoop"]], "if_else() (in module ivy)": [[63, "ivy.if_else"], [315, "ivy.if_else"]], "while_loop() (in module ivy)": [[64, "ivy.while_loop"], [315, "ivy.while_loop"]], "arange() (in module ivy)": [[65, "ivy.arange"], [316, "ivy.arange"]], "array() (in module ivy)": [[66, "ivy.array"], [316, "ivy.array"]], "asarray() (in module ivy)": [[67, "ivy.asarray"], [316, "ivy.asarray"]], "asarray() (ivy.array method)": [[67, "ivy.Array.asarray"]], "asarray_handle_nestable() (in module ivy)": [[68, "ivy.asarray_handle_nestable"], [316, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[69, "ivy.asarray_infer_device"], [316, "ivy.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[70, "ivy.asarray_to_native_arrays_and_back"], [316, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[71, "ivy.copy_array"], [316, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[71, "ivy.Array.copy_array"]], "empty() (in module ivy)": [[72, "ivy.empty"], [316, "ivy.empty"]], "empty_like() (in module ivy)": [[73, "ivy.empty_like"], [316, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[73, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[73, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[74, "ivy.eye"], [316, "ivy.eye"]], "from_dlpack() (in module ivy)": [[75, "ivy.from_dlpack"], [316, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[75, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[75, "ivy.Container.from_dlpack"]], "full() (in module ivy)": [[76, "ivy.full"], [316, "ivy.full"]], "full_like() (in module ivy)": [[77, "ivy.full_like"], [316, "ivy.full_like"]], "full_like() (ivy.array method)": [[77, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[77, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[78, "ivy.linspace"], [316, "ivy.linspace"]], "linspace() (ivy.array method)": [[78, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[78, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[79, "ivy.logspace"], [316, "ivy.logspace"]], "logspace() (ivy.array method)": [[79, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[79, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[80, "ivy.meshgrid"], [316, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[80, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[80, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[81, "ivy.native_array"], [316, "ivy.native_array"]], "native_array() (ivy.array method)": [[81, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[81, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[82, "ivy.one_hot"], [316, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[82, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[82, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[83, "ivy.ones"], [316, "ivy.ones"]], "ones_like() (in module ivy)": [[84, "ivy.ones_like"], [316, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[84, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[84, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[85, "ivy.tril"], [316, "ivy.tril"]], "tril() (ivy.array method)": [[85, "ivy.Array.tril"]], "tril() (ivy.container method)": [[85, "ivy.Container.tril"]], "triu() (in module ivy)": [[86, "ivy.triu"], [316, "ivy.triu"]], "triu() (ivy.array method)": [[86, "ivy.Array.triu"]], "triu() (ivy.container method)": [[86, "ivy.Container.triu"]], "zeros() (in module ivy)": [[87, "ivy.zeros"], [316, "ivy.zeros"]], "zeros_like() (in module ivy)": [[88, "ivy.zeros_like"], [316, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[88, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[88, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[89, "ivy.as_ivy_dtype"], [317, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[90, "ivy.as_native_dtype"], [317, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[91, "ivy.astype"], [317, "ivy.astype"]], "astype() (ivy.array method)": [[91, "ivy.Array.astype"]], "astype() (ivy.container method)": [[91, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[92, "ivy.broadcast_arrays"], [317, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[92, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[92, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[93, "ivy.broadcast_to"], [317, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[93, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[93, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[94, "ivy.can_cast"], [317, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[94, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[94, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[95, "ivy.check_float"], [317, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[96, "ivy.closest_valid_dtype"], [317, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[97, "ivy.default_complex_dtype"], [317, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[98, "ivy.default_dtype"], [317, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[99, "ivy.default_float_dtype"], [317, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[100, "ivy.default_int_dtype"], [317, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[101, "ivy.default_uint_dtype"], [317, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[102, "ivy.dtype"], [317, "ivy.dtype"]], "dtype() (ivy.array method)": [[102, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[102, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[103, "ivy.dtype_bits"], [317, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[104, "ivy.finfo"], [317, "ivy.finfo"]], "finfo() (ivy.array method)": [[104, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[104, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[105, "ivy.function_supported_dtypes"], [317, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[106, "ivy.function_unsupported_dtypes"], [317, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[107, "ivy.iinfo"], [317, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[107, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[107, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[108, "ivy.infer_default_dtype"], [317, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[109, "ivy.invalid_dtype"], [317, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[110, "ivy.is_bool_dtype"], [317, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[110, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[110, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[111, "ivy.is_complex_dtype"], [317, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[111, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[112, "ivy.is_float_dtype"], [317, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[112, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[112, "ivy.Container.is_float_dtype"]], "is_int_dtype() (in module ivy)": [[113, "ivy.is_int_dtype"], [317, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[113, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[113, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[114, "ivy.is_native_dtype"], [317, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[115, "ivy.is_uint_dtype"], [317, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[115, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[115, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[116, "ivy.promote_types"], [317, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[117, "ivy.promote_types_of_inputs"], [317, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[118, "ivy.result_type"], [317, "ivy.result_type"]], "result_type() (ivy.array method)": [[118, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[118, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[119, "ivy.set_default_complex_dtype"], [317, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[120, "ivy.set_default_dtype"], [317, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[121, "ivy.set_default_float_dtype"], [317, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[122, "ivy.set_default_int_dtype"], [317, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[123, "ivy.set_default_uint_dtype"], [317, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[124, "ivy.type_promote_arrays"], [317, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[125, "ivy.unset_default_complex_dtype"], [317, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[126, "ivy.unset_default_dtype"], [317, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[127, "ivy.unset_default_float_dtype"], [317, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[128, "ivy.unset_default_int_dtype"], [317, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[129, "ivy.unset_default_uint_dtype"], [317, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[130, "ivy.valid_dtype"], [317, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[131, "ivy.as_ivy_dev"], [318, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[132, "ivy.as_native_dev"], [318, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[133, "ivy.clear_cached_mem_on_dev"], [318, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[134, "ivy.default_device"], [318, "ivy.default_device"]], "dev() (in module ivy)": [[135, "ivy.dev"], [318, "ivy.dev"]], "dev() (ivy.array method)": [[135, "ivy.Array.dev"]], "dev() (ivy.container method)": [[135, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[136, "ivy.dev_util"], [318, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[137, "ivy.function_supported_devices"], [318, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[138, "ivy.function_unsupported_devices"], [318, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[139, "ivy.get_all_ivy_arrays_on_dev"], [318, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[140, "ivy.gpu_is_available"], [318, "ivy.gpu_is_available"]], "num_cpu_cores() (in module ivy)": [[141, "ivy.num_cpu_cores"], [318, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[142, "ivy.num_gpus"], [318, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[143, "ivy.num_ivy_arrays_on_dev"], [318, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[144, "ivy.percent_used_mem_on_dev"], [318, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[145, "ivy.print_all_ivy_arrays_on_dev"], [318, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[146, "ivy.set_default_device"], [318, "ivy.set_default_device"]], "set_split_factor() (in module ivy)": [[147, "ivy.set_split_factor"], [318, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[148, "ivy.split_factor"], [318, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[149, "ivy.split_func_call"], [318, "ivy.split_func_call"]], "to_device() (in module ivy)": [[150, "ivy.to_device"], [318, "ivy.to_device"]], "to_device() (ivy.array method)": [[150, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[150, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[151, "ivy.total_mem_on_dev"], [318, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[152, "ivy.tpu_is_available"], [318, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[153, "ivy.unset_default_device"], [318, "ivy.unset_default_device"]], "used_mem_on_dev() (in module ivy)": [[154, "ivy.used_mem_on_dev"], [318, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[155, "ivy.abs"], [319, "ivy.abs"]], "abs() (ivy.array method)": [[155, "ivy.Array.abs"]], "abs() (ivy.container method)": [[155, "ivy.Container.abs"]], "acos() (in module ivy)": [[156, "ivy.acos"], [319, "ivy.acos"]], "acos() (ivy.array method)": [[156, "ivy.Array.acos"]], "acos() (ivy.container method)": [[156, "ivy.Container.acos"]], "acosh() (in module ivy)": [[157, "ivy.acosh"], [319, "ivy.acosh"]], "acosh() (ivy.array method)": [[157, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[157, "ivy.Container.acosh"]], "add() (in module ivy)": [[158, "ivy.add"], [319, "ivy.add"]], "add() (ivy.array method)": [[158, "ivy.Array.add"]], "add() (ivy.container method)": [[158, "ivy.Container.add"]], "asin() (in module ivy)": [[159, "ivy.asin"], [319, "ivy.asin"]], "asin() (ivy.array method)": [[159, "ivy.Array.asin"]], "asin() (ivy.container method)": [[159, "ivy.Container.asin"]], "asinh() (in module ivy)": [[160, "ivy.asinh"], [319, "ivy.asinh"]], "asinh() (ivy.array method)": [[160, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[160, "ivy.Container.asinh"]], "atan() (in module ivy)": [[161, "ivy.atan"], [319, "ivy.atan"]], "atan() (ivy.array method)": [[161, "ivy.Array.atan"]], "atan() (ivy.container method)": [[161, "ivy.Container.atan"]], "atan2() (in module ivy)": [[162, "ivy.atan2"], [319, "ivy.atan2"]], "atan2() (ivy.array method)": [[162, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[162, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[163, "ivy.atanh"], [319, "ivy.atanh"]], "atanh() (ivy.array method)": [[163, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[163, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[164, "ivy.bitwise_and"], [319, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[164, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[164, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[165, "ivy.bitwise_invert"], [319, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[165, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[165, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[166, "ivy.bitwise_left_shift"], [319, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[166, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[166, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[167, "ivy.bitwise_or"], [319, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[167, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[167, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[168, "ivy.bitwise_right_shift"], [319, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[168, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[168, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[169, "ivy.bitwise_xor"], [319, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[169, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[169, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[170, "ivy.ceil"], [319, "ivy.ceil"]], "ceil() (ivy.array method)": [[170, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[170, "ivy.Container.ceil"]], "cos() (in module ivy)": [[171, "ivy.cos"], [319, "ivy.cos"]], "cos() (ivy.array method)": [[171, "ivy.Array.cos"]], "cos() (ivy.container method)": [[171, "ivy.Container.cos"]], "cosh() (in module ivy)": [[172, "ivy.cosh"], [319, "ivy.cosh"]], "cosh() (ivy.array method)": [[172, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[172, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[173, "ivy.deg2rad"], [319, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[173, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[173, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[174, "ivy.divide"], [319, "ivy.divide"]], "divide() (ivy.array method)": [[174, "ivy.Array.divide"]], "divide() (ivy.container method)": [[174, "ivy.Container.divide"]], "equal() (in module ivy)": [[175, "ivy.equal"], [319, "ivy.equal"]], "equal() (ivy.array method)": [[175, "ivy.Array.equal"]], "equal() (ivy.container method)": [[175, "ivy.Container.equal"]], "erf() (in module ivy)": [[176, "ivy.erf"], [319, "ivy.erf"]], "erf() (ivy.array method)": [[176, "ivy.Array.erf"]], "erf() (ivy.container method)": [[176, "ivy.Container.erf"]], "exp() (in module ivy)": [[177, "ivy.exp"], [319, "ivy.exp"]], "exp() (ivy.array method)": [[177, "ivy.Array.exp"]], "exp() (ivy.container method)": [[177, "ivy.Container.exp"]], "expm1() (in module ivy)": [[178, "ivy.expm1"], [319, "ivy.expm1"]], "expm1() (ivy.array method)": [[178, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[178, "ivy.Container.expm1"]], "floor() (in module ivy)": [[179, "ivy.floor"], [319, "ivy.floor"]], "floor() (ivy.array method)": [[179, "ivy.Array.floor"]], "floor() (ivy.container method)": [[179, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[180, "ivy.floor_divide"], [319, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[180, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[180, "ivy.Container.floor_divide"]], "fmod() (in module ivy)": [[181, "ivy.fmod"], [319, "ivy.fmod"]], "fmod() (ivy.array method)": [[181, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[181, "ivy.Container.fmod"]], "greater() (in module ivy)": [[182, "ivy.greater"], [319, "ivy.greater"]], "greater() (ivy.array method)": [[182, "ivy.Array.greater"]], "greater() (ivy.container method)": [[182, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[183, "ivy.greater_equal"], [319, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[183, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[183, "ivy.Container.greater_equal"]], "isfinite() (in module ivy)": [[184, "ivy.isfinite"], [319, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[184, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[184, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[185, "ivy.isinf"], [319, "ivy.isinf"]], "isinf() (ivy.array method)": [[185, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[185, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[186, "ivy.isnan"], [319, "ivy.isnan"]], "isnan() (ivy.array method)": [[186, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[186, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[187, "ivy.isreal"], [319, "ivy.isreal"]], "isreal() (ivy.array method)": [[187, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[187, "ivy.Container.isreal"]], "less() (in module ivy)": [[188, "ivy.less"], [319, "ivy.less"]], "less() (ivy.array method)": [[188, "ivy.Array.less"]], "less() (ivy.container method)": [[188, "ivy.Container.less"]], "less_equal() (in module ivy)": [[189, "ivy.less_equal"], [319, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[189, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[189, "ivy.Container.less_equal"]], "log() (in module ivy)": [[190, "ivy.log"], [319, "ivy.log"]], "log() (ivy.array method)": [[190, "ivy.Array.log"]], "log() (ivy.container method)": [[190, "ivy.Container.log"]], "log10() (in module ivy)": [[191, "ivy.log10"], [319, "ivy.log10"]], "log10() (ivy.array method)": [[191, "ivy.Array.log10"]], "log10() (ivy.container method)": [[191, "ivy.Container.log10"]], "log1p() (in module ivy)": [[192, "ivy.log1p"], [319, "ivy.log1p"]], "log1p() (ivy.array method)": [[192, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[192, "ivy.Container.log1p"]], "log2() (in module ivy)": [[193, "ivy.log2"], [319, "ivy.log2"]], "log2() (ivy.array method)": [[193, "ivy.Array.log2"]], "log2() (ivy.container method)": [[193, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[194, "ivy.logaddexp"], [319, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[194, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[194, "ivy.Container.logaddexp"]], "logical_and() (in module ivy)": [[195, "ivy.logical_and"], [319, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[195, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[195, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[196, "ivy.logical_not"], [319, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[196, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[196, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[197, "ivy.logical_or"], [319, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[197, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[197, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[198, "ivy.logical_xor"], [319, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[198, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[198, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[199, "ivy.maximum"], [319, "ivy.maximum"]], "maximum() (ivy.array method)": [[199, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[199, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[200, "ivy.minimum"], [319, "ivy.minimum"]], "minimum() (ivy.array method)": [[200, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[200, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[201, "ivy.multiply"], [319, "ivy.multiply"]], "multiply() (ivy.array method)": [[201, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[201, "ivy.Container.multiply"]], "negative() (in module ivy)": [[202, "ivy.negative"], [319, "ivy.negative"]], "negative() (ivy.array method)": [[202, "ivy.Array.negative"]], "negative() (ivy.container method)": [[202, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[203, "ivy.not_equal"], [319, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[203, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[203, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[204, "ivy.positive"], [319, "ivy.positive"]], "positive() (ivy.array method)": [[204, "ivy.Array.positive"]], "positive() (ivy.container method)": [[204, "ivy.Container.positive"]], "pow() (in module ivy)": [[205, "ivy.pow"], [319, "ivy.pow"]], "pow() (ivy.array method)": [[205, "ivy.Array.pow"]], "pow() (ivy.container method)": [[205, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[206, "ivy.rad2deg"], [319, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[206, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[206, "ivy.Container.rad2deg"]], "reciprocal() (in module ivy)": [[207, "ivy.reciprocal"], [319, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[207, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[207, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[208, "ivy.remainder"], [319, "ivy.remainder"]], "remainder() (ivy.array method)": [[208, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[208, "ivy.Container.remainder"]], "round() (in module ivy)": [[209, "ivy.round"], [319, "ivy.round"]], "round() (ivy.array method)": [[209, "ivy.Array.round"]], "round() (ivy.container method)": [[209, "ivy.Container.round"]], "sign() (in module ivy)": [[210, "ivy.sign"], [319, "ivy.sign"]], "sign() (ivy.array method)": [[210, "ivy.Array.sign"]], "sign() (ivy.container method)": [[210, "ivy.Container.sign"]], "sin() (in module ivy)": [[211, "ivy.sin"], [319, "ivy.sin"]], "sin() (ivy.array method)": [[211, "ivy.Array.sin"]], "sin() (ivy.container method)": [[211, "ivy.Container.sin"]], "sinh() (in module ivy)": [[212, "ivy.sinh"], [319, "ivy.sinh"]], "sinh() (ivy.array method)": [[212, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[212, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[213, "ivy.sqrt"], [319, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[213, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[213, "ivy.Container.sqrt"]], "square() (in module ivy)": [[214, "ivy.square"], [319, "ivy.square"]], "square() (ivy.array method)": [[214, "ivy.Array.square"]], "square() (ivy.container method)": [[214, "ivy.Container.square"]], "subtract() (in module ivy)": [[215, "ivy.subtract"], [319, "ivy.subtract"]], "subtract() (ivy.array method)": [[215, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[215, "ivy.Container.subtract"]], "tan() (in module ivy)": [[216, "ivy.tan"], [319, "ivy.tan"]], "tan() (ivy.array method)": [[216, "ivy.Array.tan"]], "tan() (ivy.container method)": [[216, "ivy.Container.tan"]], "tanh() (in module ivy)": [[217, "ivy.tanh"], [319, "ivy.tanh"]], "tanh() (ivy.array method)": [[217, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[217, "ivy.Container.tanh"]], "trunc() (in module ivy)": [[218, "ivy.trunc"], [319, "ivy.trunc"]], "trunc() (ivy.array method)": [[218, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[218, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[219, "ivy.trunc_divide"], [319, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[219, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[219, "ivy.Container.trunc_divide"]], "all_equal() (in module ivy)": [[220, "ivy.all_equal"], [321, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[220, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[220, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[221, "ivy.arg_info"], [321, "ivy.arg_info"]], "arg_names() (in module ivy)": [[222, "ivy.arg_names"], [321, "ivy.arg_names"]], "array_equal() (in module ivy)": [[223, "ivy.array_equal"], [321, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[223, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[223, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[224, "ivy.assert_supports_inplace"], [321, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[224, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[224, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[225, "ivy.cache_fn"], [321, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[226, "ivy.clip_matrix_norm"], [321, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[226, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[226, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[227, "ivy.clip_vector_norm"], [321, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[227, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[227, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[228, "ivy.container_types"], [321, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[229, "ivy.current_backend_str"], [321, "ivy.current_backend_str"]], "default() (in module ivy)": [[230, "ivy.default"], [321, "ivy.default"]], "default() (ivy.array method)": [[230, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[231, "ivy.einops_rearrange"], [321, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[231, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[231, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[232, "ivy.einops_reduce"], [321, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[232, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[232, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[233, "ivy.einops_repeat"], [321, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[233, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[233, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[234, "ivy.exists"], [321, "ivy.exists"]], "exists() (ivy.array method)": [[234, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[235, "ivy.fourier_encode"], [321, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[235, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[235, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[236, "ivy.function_supported_devices_and_dtypes"], [321, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[237, "ivy.function_unsupported_devices_and_dtypes"], [321, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[238, "ivy.gather"], [321, "ivy.gather"]], "gather() (ivy.array method)": [[238, "ivy.Array.gather"]], "gather() (ivy.container method)": [[238, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[239, "ivy.gather_nd"], [321, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[239, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[239, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[240, "ivy.get_all_arrays_in_memory"], [321, "ivy.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy)": [[241, "ivy.get_array_mode"], [321, "ivy.get_array_mode"]], "get_exception_trace_mode() (in module ivy)": [[242, "ivy.get_exception_trace_mode"], [321, "ivy.get_exception_trace_mode"]], "get_item() (in module ivy)": [[243, "ivy.get_item"], [321, "ivy.get_item"]], "get_min_base() (in module ivy)": [[244, "ivy.get_min_base"], [321, "ivy.get_min_base"]], "get_min_denominator() (in module ivy)": [[245, "ivy.get_min_denominator"], [321, "ivy.get_min_denominator"]], "get_nestable_mode() (in module ivy)": [[246, "ivy.get_nestable_mode"], [321, "ivy.get_nestable_mode"]], "get_num_dims() (in module ivy)": [[247, "ivy.get_num_dims"], [321, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[247, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[247, "ivy.Container.get_num_dims"]], "get_queue_timeout() (in module ivy)": [[248, "ivy.get_queue_timeout"], [321, "ivy.get_queue_timeout"]], "get_referrers_recursive() (in module ivy)": [[249, "ivy.get_referrers_recursive"], [321, "ivy.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy)": [[250, "ivy.get_show_func_wrapper_trace_mode"], [321, "ivy.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy)": [[251, "ivy.get_tmp_dir"], [321, "ivy.get_tmp_dir"]], "has_nans() (in module ivy)": [[252, "ivy.has_nans"], [321, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[252, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[252, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[253, "ivy.inplace_arrays_supported"], [321, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[254, "ivy.inplace_decrement"], [321, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[254, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[254, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[255, "ivy.inplace_increment"], [321, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[255, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[255, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[256, "ivy.inplace_update"], [321, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[256, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[256, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[257, "ivy.inplace_variables_supported"], [321, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[258, "ivy.is_array"], [321, "ivy.is_array"]], "is_array() (ivy.array method)": [[258, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[258, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[259, "ivy.is_ivy_array"], [321, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[259, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[259, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[260, "ivy.is_ivy_container"], [321, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[260, "ivy.Array.is_ivy_container"]], "is_native_array() (in module ivy)": [[261, "ivy.is_native_array"], [321, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[261, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[261, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[262, "ivy.isin"], [321, "ivy.isin"]], "isin() (ivy.array method)": [[262, "ivy.Array.isin"]], "isin() (ivy.container method)": [[262, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[263, "ivy.isscalar"], [321, "ivy.isscalar"]], "itemsize() (in module ivy)": [[264, "ivy.itemsize"], [321, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[264, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[264, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[265, "ivy.match_kwargs"], [321, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[266, "ivy.multiprocessing"], [321, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[267, "ivy.num_arrays_in_memory"], [321, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[268, "ivy.print_all_arrays_in_memory"], [321, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[269, "ivy.scatter_flat"], [321, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[269, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[269, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[270, "ivy.scatter_nd"], [321, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[270, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[270, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[271, "ivy.set_array_mode"], [321, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[272, "ivy.set_exception_trace_mode"], [321, "ivy.set_exception_trace_mode"]], "set_min_base() (in module ivy)": [[273, "ivy.set_min_base"], [321, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[274, "ivy.set_min_denominator"], [321, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[275, "ivy.set_nestable_mode"], [321, "ivy.set_nestable_mode"]], "set_queue_timeout() (in module ivy)": [[276, "ivy.set_queue_timeout"], [321, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[277, "ivy.set_shape_array_mode"], [321, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[278, "ivy.set_show_func_wrapper_trace_mode"], [321, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[279, "ivy.set_tmp_dir"], [321, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[280, "ivy.shape"], [321, "ivy.shape"]], "shape() (ivy.array method)": [[280, "ivy.Array.shape"]], "shape_array_mode() (in module ivy)": [[281, "ivy.shape_array_mode"], [321, "ivy.shape_array_mode"]], "stable_divide() (in module ivy)": [[282, "ivy.stable_divide"], [321, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[282, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[282, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[283, "ivy.stable_pow"], [321, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[283, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[283, "ivy.Container.stable_pow"]], "supports_inplace_updates() (in module ivy)": [[284, "ivy.supports_inplace_updates"], [321, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[284, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[284, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[285, "ivy.to_ivy_shape"], [321, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[286, "ivy.to_list"], [321, "ivy.to_list"]], "to_list() (ivy.array method)": [[286, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[286, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[287, "ivy.to_native_shape"], [321, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[288, "ivy.to_numpy"], [321, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[288, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[288, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[289, "ivy.to_scalar"], [321, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[289, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[289, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[290, "ivy.try_else_none"], [321, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[291, "ivy.unset_array_mode"], [321, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[292, "ivy.unset_exception_trace_mode"], [321, "ivy.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy)": [[293, "ivy.unset_nestable_mode"], [321, "ivy.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy)": [[294, "ivy.unset_queue_timeout"], [321, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[295, "ivy.unset_shape_array_mode"], [321, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[296, "ivy.unset_show_func_wrapper_trace_mode"], [321, "ivy.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy)": [[297, "ivy.value_is_nan"], [321, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[297, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[297, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[298, "ivy.vmap"], [321, "ivy.vmap"]], "adam_step() (in module ivy)": [[299, "ivy.adam_step"], [322, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[299, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[299, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[300, "ivy.adam_update"], [322, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[300, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[300, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[301, "ivy.execute_with_gradients"], [322, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[302, "ivy.grad"], [322, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[303, "ivy.gradient_descent_update"], [322, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[303, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[303, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[304, "ivy.jac"], [322, "ivy.jac"]], "lamb_update() (in module ivy)": [[305, "ivy.lamb_update"], [322, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[305, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[305, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[306, "ivy.lars_update"], [322, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[306, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[306, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[307, "ivy.optimizer_update"], [322, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[307, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[307, "ivy.Container.optimizer_update"]], "set_with_grads() (in module ivy)": [[308, "ivy.set_with_grads"], [322, "ivy.set_with_grads"]], "stop_gradient() (in module ivy)": [[309, "ivy.stop_gradient"], [322, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[309, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[309, "ivy.Container.stop_gradient"]], "unset_with_grads() (in module ivy)": [[310, "ivy.unset_with_grads"], [322, "ivy.unset_with_grads"]], "value_and_grad() (in module ivy)": [[311, "ivy.value_and_grad"], [322, "ivy.value_and_grad"]], "with_grads() (in module ivy)": [[312, "ivy.with_grads"], [322, "ivy.with_grads"]], "ivy.functional.ivy.activations": [[313, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[314, "ivy.e"]], "inf (in module ivy)": [[314, "ivy.inf"]], "ivy.functional.ivy.constants": [[314, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[314, "ivy.nan"]], "newaxis (in module ivy)": [[314, "ivy.newaxis"]], "pi (in module ivy)": [[314, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[315, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[316, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[316, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[317, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[317, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[317, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[317, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[317, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[317, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[318, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[318, "ivy.Profiler"]], "ivy.functional.ivy.device": [[318, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[319, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[320, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[321, "ivy.ArrayMode"]], "ivy.functional.ivy.general": [[321, "module-ivy.functional.ivy.general"]], "gradienttracking (class in ivy)": [[322, "ivy.GradientTracking"]], "ivy.functional.ivy.gradients": [[322, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[323, "ivy.conv"], [336, "ivy.conv"]], "conv1d() (in module ivy)": [[323, "ivy.conv1d"], [337, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[323, "ivy.conv1d_transpose"], [338, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[323, "ivy.conv2d"], [339, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[323, "ivy.conv2d_transpose"], [340, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[323, "ivy.conv3d"], [341, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[323, "ivy.conv3d_transpose"], [342, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[323, "ivy.conv_general_dilated"], [343, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[323, "ivy.conv_general_transpose"], [344, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[323, "ivy.depthwise_conv2d"], [345, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[323, "ivy.dropout"], [346, "ivy.dropout"]], "ivy.functional.ivy.layers": [[323, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[323, "ivy.linear"], [347, "ivy.linear"]], "lstm_update() (in module ivy)": [[323, "ivy.lstm_update"], [348, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[323, "ivy.multi_head_attention"], [349, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[323, "ivy.scaled_dot_product_attention"], [350, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[324, "ivy.cholesky"], [351, "ivy.cholesky"]], "cross() (in module ivy)": [[324, "ivy.cross"], [352, "ivy.cross"]], "det() (in module ivy)": [[324, "ivy.det"], [353, "ivy.det"]], "diag() (in module ivy)": [[324, "ivy.diag"], [354, "ivy.diag"]], "diagonal() (in module ivy)": [[324, "ivy.diagonal"], [355, "ivy.diagonal"]], "eig() (in module ivy)": [[324, "ivy.eig"], [356, "ivy.eig"]], "eigh() (in module ivy)": [[324, "ivy.eigh"], [357, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[324, "ivy.eigvalsh"], [358, "ivy.eigvalsh"]], "inner() (in module ivy)": [[324, "ivy.inner"], [359, "ivy.inner"]], "inv() (in module ivy)": [[324, "ivy.inv"], [360, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[324, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[324, "ivy.lu_factor"], [361, "ivy.lu_factor"]], "matmul() (in module ivy)": [[324, "ivy.matmul"], [362, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[324, "ivy.matrix_norm"], [363, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[324, "ivy.matrix_power"], [364, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[324, "ivy.matrix_rank"], [365, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[324, "ivy.matrix_transpose"], [366, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[324, "ivy.outer"], [367, "ivy.outer"]], "pinv() (in module ivy)": [[324, "ivy.pinv"], [368, "ivy.pinv"]], "qr() (in module ivy)": [[324, "ivy.qr"], [369, "ivy.qr"]], "slogdet() (in module ivy)": [[324, "ivy.slogdet"], [370, "ivy.slogdet"]], "solve() (in module ivy)": [[324, "ivy.solve"], [371, "ivy.solve"]], "svd() (in module ivy)": [[324, "ivy.svd"], [372, "ivy.svd"]], "svdvals() (in module ivy)": [[324, "ivy.svdvals"], [373, "ivy.svdvals"]], "tensordot() (in module ivy)": [[324, "ivy.tensordot"], [374, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[324, "ivy.tensorsolve"], [375, "ivy.tensorsolve"]], "trace() (in module ivy)": [[324, "ivy.trace"], [376, "ivy.trace"]], "vander() (in module ivy)": [[324, "ivy.vander"], [377, "ivy.vander"]], "vecdot() (in module ivy)": [[324, "ivy.vecdot"], [378, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[324, "ivy.vector_norm"], [379, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[324, "ivy.vector_to_skew_symmetric_matrix"], [380, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[325, "ivy.binary_cross_entropy"], [381, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[325, "ivy.cross_entropy"], [382, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[325, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[325, "ivy.sparse_cross_entropy"], [383, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[326, "ivy.clip"], [384, "ivy.clip"]], "concat() (in module ivy)": [[326, "ivy.concat"], [385, "ivy.concat"]], "constant_pad() (in module ivy)": [[326, "ivy.constant_pad"], [386, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[326, "ivy.expand_dims"], [387, "ivy.expand_dims"]], "flip() (in module ivy)": [[326, "ivy.flip"], [388, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[326, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[326, "ivy.permute_dims"], [389, "ivy.permute_dims"]], "repeat() (in module ivy)": [[326, "ivy.repeat"], [390, "ivy.repeat"]], "reshape() (in module ivy)": [[326, "ivy.reshape"], [391, "ivy.reshape"]], "roll() (in module ivy)": [[326, "ivy.roll"], [392, "ivy.roll"]], "split() (in module ivy)": [[326, "ivy.split"], [393, "ivy.split"]], "squeeze() (in module ivy)": [[326, "ivy.squeeze"], [394, "ivy.squeeze"]], "stack() (in module ivy)": [[326, "ivy.stack"], [395, "ivy.stack"]], "swapaxes() (in module ivy)": [[326, "ivy.swapaxes"], [396, "ivy.swapaxes"]], "tile() (in module ivy)": [[326, "ivy.tile"], [397, "ivy.tile"]], "unstack() (in module ivy)": [[326, "ivy.unstack"], [398, "ivy.unstack"]], "zero_pad() (in module ivy)": [[326, "ivy.zero_pad"], [399, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[327, "ivy.fomaml_step"], [400, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[327, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[327, "ivy.maml_step"], [401, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[327, "ivy.reptile_step"], [402, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[328, "ivy.all_nested_indices"], [403, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[328, "ivy.copy_nest"], [404, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[328, "ivy.duplicate_array_index_chains"], [405, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[328, "ivy.index_nest"], [406, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[328, "ivy.insert_into_nest_at_index"], [407, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[328, "ivy.insert_into_nest_at_indices"], [408, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[328, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[328, "ivy.map"], [409, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[328, "ivy.map_nest_at_index"], [410, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[328, "ivy.map_nest_at_indices"], [411, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[328, "ivy.multi_index_nest"], [412, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[328, "ivy.nested_any"], [413, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[328, "ivy.nested_argwhere"], [414, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[328, "ivy.nested_map"], [415, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[328, "ivy.nested_multi_map"], [416, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[328, "ivy.prune_empty"], [417, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[328, "ivy.prune_nest_at_index"], [418, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[328, "ivy.prune_nest_at_indices"], [419, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[328, "ivy.set_nest_at_index"], [420, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[328, "ivy.set_nest_at_indices"], [421, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[329, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[329, "ivy.layer_norm"], [422, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[330, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[330, "ivy.multinomial"], [423, "ivy.multinomial"]], "randint() (in module ivy)": [[330, "ivy.randint"], [424, "ivy.randint"]], "random_normal() (in module ivy)": [[330, "ivy.random_normal"], [425, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[330, "ivy.random_uniform"], [426, "ivy.random_uniform"]], "seed() (in module ivy)": [[330, "ivy.seed"], [427, "ivy.seed"]], "shuffle() (in module ivy)": [[330, "ivy.shuffle"], [428, "ivy.shuffle"]], "argmax() (in module ivy)": [[331, "ivy.argmax"], [429, "ivy.argmax"]], "argmin() (in module ivy)": [[331, "ivy.argmin"], [430, "ivy.argmin"]], "argwhere() (in module ivy)": [[331, "ivy.argwhere"], [431, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[331, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[331, "ivy.nonzero"], [432, "ivy.nonzero"]], "where() (in module ivy)": [[331, "ivy.where"], [433, "ivy.where"]], "ivy.functional.ivy.set": [[332, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[332, "ivy.unique_all"], [434, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[332, "ivy.unique_counts"], [435, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[332, "ivy.unique_inverse"], [436, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[332, "ivy.unique_values"], [437, "ivy.unique_values"]], "argsort() (in module ivy)": [[333, "ivy.argsort"], [438, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[333, "module-ivy.functional.ivy.sorting"]], "searchsorted() (in module ivy)": [[333, "ivy.searchsorted"], [439, "ivy.searchsorted"]], "sort() (in module ivy)": [[333, "ivy.sort"], [440, "ivy.sort"]], "cumprod() (in module ivy)": [[334, "ivy.cumprod"], [441, "ivy.cumprod"]], "cumsum() (in module ivy)": [[334, "ivy.cumsum"], [442, "ivy.cumsum"]], "einsum() (in module ivy)": [[334, "ivy.einsum"], [443, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[334, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[334, "ivy.max"], [444, "ivy.max"]], "mean() (in module ivy)": [[334, "ivy.mean"], [445, "ivy.mean"]], "min() (in module ivy)": [[334, "ivy.min"], [446, "ivy.min"]], "prod() (in module ivy)": [[334, "ivy.prod"], [447, "ivy.prod"]], "std() (in module ivy)": [[334, "ivy.std"], [448, "ivy.std"]], "sum() (in module ivy)": [[334, "ivy.sum"], [449, "ivy.sum"]], "var() (in module ivy)": [[334, "ivy.var"], [450, "ivy.var"]], "all() (in module ivy)": [[335, "ivy.all"], [451, "ivy.all"]], "any() (in module ivy)": [[335, "ivy.any"], [452, "ivy.any"]], "ivy.functional.ivy.utility": [[335, "module-ivy.functional.ivy.utility"]], "conv1d() (ivy.array method)": [[337, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[337, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[338, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[338, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[339, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[339, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[340, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[340, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[341, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[341, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[342, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[342, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[345, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[345, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[346, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[346, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[347, "ivy.Array.linear"]], "linear() (ivy.container method)": [[347, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[348, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[348, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[349, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[349, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[350, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[350, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[351, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[351, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[352, "ivy.Array.cross"]], "cross() (ivy.container method)": [[352, "ivy.Container.cross"]], "det() (ivy.array method)": [[353, "ivy.Array.det"]], "det() (ivy.container method)": [[353, "ivy.Container.det"]], "diag() (ivy.array method)": [[354, "ivy.Array.diag"]], "diag() (ivy.container method)": [[354, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[355, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[355, "ivy.Container.diagonal"]], "eig() (ivy.array method)": [[356, "ivy.Array.eig"]], "eig() (ivy.container method)": [[356, "ivy.Container.eig"]], "eigh() (ivy.array method)": [[357, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[357, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[358, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[358, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[359, "ivy.Array.inner"]], "inner() (ivy.container method)": [[359, "ivy.Container.inner"]], "inv() (ivy.array method)": [[360, "ivy.Array.inv"]], "inv() (ivy.container method)": [[360, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[362, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[362, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[363, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[363, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[364, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[364, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[365, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[365, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[366, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[366, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[367, "ivy.Array.outer"]], "outer() (ivy.container method)": [[367, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[368, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[368, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[369, "ivy.Array.qr"]], "qr() (ivy.container method)": [[369, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[370, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[370, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[371, "ivy.Array.solve"]], "solve() (ivy.container method)": [[371, "ivy.Container.solve"]], "svd() (ivy.array method)": [[372, "ivy.Array.svd"]], "svd() (ivy.container method)": [[372, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[373, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[373, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[374, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[374, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[375, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[375, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[376, "ivy.Array.trace"]], "trace() (ivy.container method)": [[376, "ivy.Container.trace"]], "vander() (ivy.array method)": [[377, "ivy.Array.vander"]], "vander() (ivy.container method)": [[377, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[378, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[378, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[379, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[379, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[380, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[380, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[381, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[381, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[382, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[382, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[383, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[383, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[384, "ivy.Array.clip"]], "clip() (ivy.container method)": [[384, "ivy.Container.clip"]], "concat() (ivy.array method)": [[385, "ivy.Array.concat"]], "concat() (ivy.container method)": [[385, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[386, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[386, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[387, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[387, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[388, "ivy.Array.flip"]], "flip() (ivy.container method)": [[388, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[389, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[389, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[390, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[390, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[391, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[391, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[392, "ivy.Array.roll"]], "roll() (ivy.container method)": [[392, "ivy.Container.roll"]], "split() (ivy.array method)": [[393, "ivy.Array.split"]], "split() (ivy.container method)": [[393, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[394, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[394, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[395, "ivy.Array.stack"]], "stack() (ivy.container method)": [[395, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[396, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[396, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[397, "ivy.Array.tile"]], "tile() (ivy.container method)": [[397, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[398, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[398, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[399, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[399, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[422, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[422, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[423, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[423, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[424, "ivy.Array.randint"]], "randint() (ivy.container method)": [[424, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[425, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[425, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[426, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[426, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[428, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[428, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[429, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[429, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[430, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[430, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[431, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[431, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[432, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[432, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[433, "ivy.Array.where"]], "where() (ivy.container method)": [[433, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[434, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[434, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[435, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[435, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[436, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[436, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[437, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[437, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[438, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[438, "ivy.Container.argsort"]], "searchsorted() (ivy.array method)": [[439, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[439, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[440, "ivy.Array.sort"]], "sort() (ivy.container method)": [[440, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[441, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[441, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[442, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[442, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[443, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[443, "ivy.Container.einsum"]], "max() (ivy.array method)": [[444, "ivy.Array.max"]], "max() (ivy.container method)": [[444, "ivy.Container.max"]], "mean() (ivy.array method)": [[445, "ivy.Array.mean"]], "mean() (ivy.container method)": [[445, "ivy.Container.mean"]], "min() (ivy.array method)": [[446, "ivy.Array.min"]], "min() (ivy.container method)": [[446, "ivy.Container.min"]], "prod() (ivy.array method)": [[447, "ivy.Array.prod"]], "prod() (ivy.container method)": [[447, "ivy.Container.prod"]], "std() (ivy.array method)": [[448, "ivy.Array.std"]], "std() (ivy.container method)": [[448, "ivy.Container.std"]], "sum() (ivy.array method)": [[449, "ivy.Array.sum"]], "sum() (ivy.container method)": [[449, "ivy.Container.sum"]], "var() (ivy.array method)": [[450, "ivy.Array.var"]], "var() (ivy.container method)": [[450, "ivy.Container.var"]], "all() (ivy.array method)": [[451, "ivy.Array.all"]], "all() (ivy.container method)": [[451, "ivy.Container.all"]], "any() (ivy.array method)": [[452, "ivy.Array.any"]], "any() (ivy.container method)": [[452, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[453, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[453, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "available_frameworks() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[454, "ivy_tests.test_ivy.helpers.available_frameworks.available_frameworks"]], "ground_truth() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[454, "ivy_tests.test_ivy.helpers.available_frameworks.ground_truth"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[454, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "empty_func() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.empty_func"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "flatten_fw_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.flatten_fw_and_to_np"]], "framework_comparator() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.framework_comparator"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[455, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.make_json_pickable"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "var_fn() (in module ivy_tests.test_ivy.helpers.function_testing)": [[455, "ivy_tests.test_ivy.helpers.function_testing.var_fn"]], "interruptedtest": [[456, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[456, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[456, "module-ivy_tests.test_ivy.helpers.globals"]], "remove_all_current_framework() (in module ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.remove_all_current_framework"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[456, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[456, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[457, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[458, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[458, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[459, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[459, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[459, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[459, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[459, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.make_json_pickable"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[460, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[460, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[461, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[461, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[461, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[461, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[462, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[462, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "as_cont() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.as_cont"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[463, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[463, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[464, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[464, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "nestedarray (class in ivy.nested_array.nested_array)": [[469, "ivy.nested_array.nested_array.NestedArray"]], "__init__() (ivy.nested_array.nested_array.nestedarray method)": [[469, "ivy.nested_array.nested_array.NestedArray.__init__"]], "data (ivy.nested_array.nested_array.nestedarray property)": [[469, "ivy.nested_array.nested_array.NestedArray.data"]], "device (ivy.nested_array.nested_array.nestedarray property)": [[469, "ivy.nested_array.nested_array.NestedArray.device"]], "dtype (ivy.nested_array.nested_array.nestedarray property)": [[469, "ivy.nested_array.nested_array.NestedArray.dtype"]], "from_row_lengths() (ivy.nested_array.nested_array.nestedarray class method)": [[469, "ivy.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_split() (ivy.nested_array.nested_array.nestedarray class method)": [[469, "ivy.nested_array.nested_array.NestedArray.from_row_split"]], "ivy.nested_array.nested_array": [[469, "module-ivy.nested_array.nested_array"]], "ndim (ivy.nested_array.nested_array.nestedarray property)": [[469, "ivy.nested_array.nested_array.NestedArray.ndim"]], "nested_array() (ivy.nested_array.nested_array.nestedarray class method)": [[469, "ivy.nested_array.nested_array.NestedArray.nested_array"]], "reshape() (ivy.nested_array.nested_array.nestedarray method)": [[469, "ivy.nested_array.nested_array.NestedArray.reshape"]], "shape (ivy.nested_array.nested_array.nestedarray property)": [[469, "ivy.nested_array.nested_array.NestedArray.shape"]], "unbind() (ivy.nested_array.nested_array.nestedarray method)": [[469, "ivy.nested_array.nested_array.NestedArray.unbind"]], "geglu (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.GELU"]], "leakyrelu (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.LeakyReLU"]], "logsoftmax (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.LogSoftmax"]], "mish (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.Mish"]], "relu (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.ReLU"]], "softmax (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[470, "ivy.stateful.activations.Softplus"]], "__init__() (ivy.stateful.activations.geglu method)": [[470, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[470, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[470, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[470, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[470, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[470, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[470, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[470, "ivy.stateful.activations.Softplus.__init__"]], "ivy.stateful.activations": [[470, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[471, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[471, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[471, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[471, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[471, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[471, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[471, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[472, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[472, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[472, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Ones"]], "siren (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[473, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[473, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[473, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[473, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[473, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[473, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[473, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[473, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[473, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[473, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[473, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[473, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[473, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[473, "module-ivy.stateful.initializers"]], "conv1d (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Conv3DTranspose"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Dropout"]], "lstm (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.Linear"]], "multiheadattention (class in ivy.stateful.layers)": [[474, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.conv1d method)": [[474, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[474, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[474, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[474, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[474, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[474, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[474, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[474, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[474, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[474, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[474, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[474, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[474, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[475, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[475, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[475, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[475, "module-ivy.stateful.module"]], "save_weights() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[475, "ivy.stateful.module.Module.show_graph"]], "layernorm (class in ivy.stateful.norms)": [[476, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.layernorm method)": [[476, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[476, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[477, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[477, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[477, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[477, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[477, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[477, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[477, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[477, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[477, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[477, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[477, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[477, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[477, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[477, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[477, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[477, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[477, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[477, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[477, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[477, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[477, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[478, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[478, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[478, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_any"]], "check_dimensions() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[479, "ivy.utils.assertions.check_true"]], "ivy.utils.assertions": [[479, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[480, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[481, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[481, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[481, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[481, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[481, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[481, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[481, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[481, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[481, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[481, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[481, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[482, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[482, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_jax_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_numpy_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[482, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[483, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[483, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[483, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[483, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[483, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[483, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[484, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[484, "module-ivy.utils.dynamic_import"]], "ivybackendexception": [[485, "ivy.utils.exceptions.IvyBackendException"]], "ivyerror": [[485, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[485, "ivy.utils.exceptions.IvyException"]], "ivynotimplementedexception": [[485, "ivy.utils.exceptions.IvyNotImplementedException"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[485, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[485, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[485, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[485, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[485, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[485, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[486, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[486, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[486, "module-ivy.utils.inspection"]], "profiler (class in ivy.utils.profiler)": [[487, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[487, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[487, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[487, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[487, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[488, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[488, "module-ivy.utils.verbosity"]], "applied libraries": [[534, "term-Applied-Libraries"]], "automatic code conversions": [[534, "term-Automatic-Code-Conversions"]], "backend handler": [[534, "term-Backend-Handler"]], "compositional functions": [[534, "term-Compositional-Functions"]], "convenience functions": [[534, "term-Convenience-Functions"]], "framework": [[534, "term-Framework"]], "framework handler": [[534, "term-Framework-Handler"]], "graph compiler": [[534, "term-Graph-Compiler"]], "ivy array": [[534, "term-Ivy-Array"]], "ivy backends": [[534, "term-Ivy-Backends"]], "ivy builder": [[534, "term-Ivy-Builder"]], "ivy compiler": [[534, "term-Ivy-Compiler"]], "ivy container": [[534, "term-Ivy-Container"]], "ivy frontends": [[534, "term-Ivy-Frontends"]], "ivy functional api": [[534, "term-Ivy-Functional-API"]], "ivy graph compiler": [[534, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[534, "term-Ivy-Transpiler"]], "mixed functions": [[534, "term-Mixed-Functions"]], "native array": [[534, "term-Native-Array"]], "nestable functions": [[534, "term-Nestable-Functions"]], "pipeline": [[534, "term-Pipeline"]], "primary functions": [[534, "term-Primary-Functions"]], "standalone functions": [[534, "term-Standalone-Functions"]], "submodule helper functions": [[534, "term-Submodule-Helper-Functions"]]}})