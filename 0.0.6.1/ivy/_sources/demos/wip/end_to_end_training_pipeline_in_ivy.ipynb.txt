{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "bLWUYAEhkbRR"
      },
      "source": [
        "---\n",
        "file: temp_demos/end_to_end_training_pipeline_in_ivy.ipynb\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "Ckul4XOmkbRT"
      },
      "source": [
        "# End-to-End Training Pipeline in Ivy"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dXnE1vqdkbRU"
      },
      "source": [
        "ToDo: description"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "IqVm_caAkbRU"
      },
      "source": [
        "::::: {#colab-button}\n",
        "[![Open in Colab]({{< var remote_badge.colab >}})](https://colab.research.google.com/github/unifyai/demos/blob/main/{{< meta file >}})\n",
        "[![GitHub]({{< var remote_badge.github >}})](https://github.com/unifyai/demos/blob/main/{{< meta file >}})\n",
        ":::::"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 902
        },
        "id": "viDG7dwgD4Fd",
        "outputId": "453c3af5-e9d5-4360-8d3e-689d104998b3",
        "pycharm": {
          "name": "#%%\n"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting git+https://github.com/unifyai/ivy.git@master\n",
            "  Cloning https://github.com/unifyai/ivy.git (to revision master) to /tmp/pip-req-build-_3r2_73j\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/unifyai/ivy.git /tmp/pip-req-build-_3r2_73j\n",
            "  Resolved https://github.com/unifyai/ivy.git to commit 0edf8c1e8ea835f4c456bdf89737d89032f50b5a\n",
            "  Running command git submodule update --init --recursive -q\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from ivy-core==1.1.9) (1.22.4)\n",
            "Collecting einops==0.4.1\n",
            "  Downloading einops-0.4.1-py3-none-any.whl (28 kB)\n",
            "Collecting psutil==5.9.1\n",
            "  Downloading psutil-5.9.1-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (281 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m281.1/281.1 KB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting termcolor==1.1.0\n",
            "  Downloading termcolor-1.1.0.tar.gz (3.9 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting colorama==0.4.5\n",
            "  Downloading colorama-0.4.5-py2.py3-none-any.whl (16 kB)\n",
            "Collecting packaging==21.3\n",
            "  Downloading packaging-21.3-py3-none-any.whl (40 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.8/40.8 KB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-ml-py<=11.495.46\n",
            "  Downloading nvidia_ml_py-11.495.46-py3-none-any.whl (25 kB)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.9/dist-packages (from packaging==21.3->ivy-core==1.1.9) (3.0.9)\n",
            "Building wheels for collected packages: ivy-core, termcolor\n",
            "  Building wheel for ivy-core (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for ivy-core: filename=ivy_core-1.1.9-py3-none-any.whl size=1297564 sha256=05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-le3bu3_v/wheels/07/46/2e/ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063\n",
            "  Building wheel for termcolor (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for termcolor: filename=termcolor-1.1.0-py3-none-any.whl size=4845 sha256=cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b\n",
            "  Stored in directory: /root/.cache/pip/wheels/b6/0d/90/0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d\n",
            "Successfully built ivy-core termcolor\n",
            "Installing collected packages: termcolor, nvidia-ml-py, einops, psutil, packaging, colorama, ivy-core\n",
            "  Attempting uninstall: termcolor\n",
            "    Found existing installation: termcolor 2.2.0\n",
            "    Uninstalling termcolor-2.2.0:\n",
            "      Successfully uninstalled termcolor-2.2.0\n",
            "  Attempting uninstall: psutil\n",
            "    Found existing installation: psutil 5.9.4\n",
            "    Uninstalling psutil-5.9.4:\n",
            "      Successfully uninstalled psutil-5.9.4\n",
            "  Attempting uninstall: packaging\n",
            "    Found existing installation: packaging 23.0\n",
            "    Uninstalling packaging-23.0:\n",
            "      Successfully uninstalled packaging-23.0\n",
            "Successfully installed colorama-0.4.5 einops-0.4.1 ivy-core-1.1.9 nvidia-ml-py-11.495.46 packaging-21.3 psutil-5.9.1 termcolor-1.1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "packaging",
                  "psutil"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# install the latest Ivy version for this purpose\n",
        "!pip install git+https://github.com/unifyai/ivy.git@master"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": false,
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "1zKySH_KkbRV"
      },
      "source": [
        "# Importing libraries\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "ttwcL6WSIRZH",
        "pycharm": {
          "name": "#%%\n"
        }
      },
      "outputs": [],
      "source": [
        "# third party libraries\n",
        "import ivy\n",
        "\n",
        "# built-in libraries\n",
        "import os\n",
        "import random\n",
        "import csv\n",
        "from tqdm import tqdm\n",
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9P-LMZ8ck8Ue",
        "outputId": "da26f882-3841-4de7-aa60-fc57aebe43d8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "N0kLtV0VkbRW"
      },
      "outputs": [],
      "source": [
        "!mkdir /content/drive/MyDrive/Ivy/\n",
        "os.chdir('/content/drive/MyDrive/Ivy')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vsaBQt2LfYKA",
        "pycharm": {
          "name": "#%% md\n"
        }
      },
      "source": [
        "# Let's build the pipeline with a Tensorflow backend\n",
        "\n",
        "One can experiment with any other backend as well. Just add the following line at the start with the string name to be the framework you want. \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "yLmXZO5NHmGR"
      },
      "outputs": [],
      "source": [
        "ivy.set_backend(\"tensorflow\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_sZBpS1jfKkt",
        "pycharm": {
          "name": "#%% md\n"
        }
      },
      "source": [
        "# We are using MNIST dataset for this Tutorial\n",
        "\n",
        "Now we will download the MNIST dataset from Kaggle using its API. More details in this [medium](https://medium.com/swlh/image-classifcation-with-google-colab-183e95bfc439#:~:text=Download%20datasets%20directly%20to%20colab%20using%20kaggle%20API.&text=After%20uploading%20the%20JSON%20file,store%20it%20into%20data%20frames.&text=After%20this%2C%20additional%20data%20frames,images%20to%20train%20the%20model) article."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir /root/.kaggle"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_bIIqcp9lx32",
        "outputId": "f36a0c91-5216-4b32-c89a-efcd32b6b9d7"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mkdir: cannot create directory ‘/root/.kaggle’: File exists\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Insert the `kaggle.json` file in the `/root/.kaggle` folder. You can download the file here `https://www.kaggle.com/{your_kaggle_username}/account` by clicking on `Create New API Token`"
      ],
      "metadata": {
        "id": "FUjnnhsFu-N2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c digit-recognizer \n",
        "!unzip digit-recognizer.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "39bYlmgRlhiu",
        "outputId": "a0ab5630-79eb-43bf-b72b-5b0a9a39c70e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'\n",
            "digit-recognizer.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "Archive:  digit-recognizer.zip\n",
            "  inflating: sample_submission.csv   \n",
            "  inflating: test.csv                \n",
            "  inflating: train.csv               \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Import pandas and read training and testing data in data frames\n",
        "import pandas as pd \n",
        "train = pd.read_csv(\"train.csv\")\n",
        "test = pd.read_csv(\"test.csv\")"
      ],
      "metadata": {
        "id": "1Yel8hW5nIsr"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the PATH string that will be used to save the dataset in your Google Drive folder, it will be used later to load the dataset\n",
        "PATH = '/content/drive/My Drive/mnist'"
      ],
      "metadata": {
        "id": "3iEqK1AbwB3k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a data frame to store labels, another without labels, df with values only, test value df and a path variable to set location of where to store images\n",
        "label_df = train['label']\n",
        "mod_train = train.drop(columns= 'label')\n",
        "data_values = mod_train.values\n",
        "test_data_values = test.values"
      ],
      "metadata": {
        "id": "Y9wWLlRTnYd2"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(0, len(data_values)):\n",
        "    #read the correct label\n",
        "    correct_label = label_df[i]\n",
        "\n",
        "    #split the data into training and validation sets\n",
        "    if np.random.rand() < 0.8:\n",
        "        folder = '/train/'\n",
        "        train_path = f'{PATH}' + '/train/' + str(correct_label)\n",
        "        if not os.path.exists(train_path):\n",
        "          os.makedirs(train_path)\n",
        "    else:\n",
        "        folder = '/valid/'\n",
        "        valid_path = f'{PATH}' + '/valid/' + str(correct_label)\n",
        "        if not os.path.exists(valid_path):\n",
        "          os.makedirs(valid_path)\n",
        "    img = data_values[i][:]\n",
        "    #reshape into 28x28 pic\n",
        "    img = img.reshape(28,28)\n",
        "    #we need three channels into the picture\n",
        "    img = np.stack((img,)*3,axis = -1)\n",
        "    #change the data type to int8\n",
        "    img = np.uint8(img)\n",
        "    #create PIL Image\n",
        "    new_img = Image.fromarray(img)\n",
        "    #save the .jpg into correct folder\n",
        "    new_img.save(f'{PATH}' + folder + str(correct_label) + '/' + str(i) + '.jpg', 'JPEG')"
      ],
      "metadata": {
        "id": "si0Km1h2pacY"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7VoBuoqjQqQy"
      },
      "source": [
        "# Temporary Dataset and Dynamic loader\n",
        "\n",
        "Since we don't have the builder ready just yet, we will create three functions which help in generating the dataset, randomizing, and batchwise loading at training time. \n",
        "\n",
        "**Note** -  We're only using a small subset of the entire dataset for the purpose of this demo. Same goes for the number of `epochs` we train the model for."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l4dVyGp-e6km"
      },
      "source": [
        "Let's set a global seed for randomized operations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "HE8evnQCeTuX"
      },
      "outputs": [],
      "source": [
        "ivy.seed(seed_value = 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "Gq8IM3-AUH2n"
      },
      "outputs": [],
      "source": [
        "def randomize_dataset(images, classes):\n",
        "    data = list(zip(images, classes))\n",
        "    random.shuffle(data)\n",
        "    images, classes = zip(*data)\n",
        "    return list(images), list(classes)\n",
        "\n",
        " \n",
        "def create_dataset(folder, num_examples_per_class = 100):\n",
        "    img_array = []\n",
        "    class_name = []\n",
        "    for dir in os.listdir(folder):\n",
        "        for i, file in enumerate(os.listdir(os.path.join(folder, dir))):\n",
        "            if i >= num_examples_per_class:\n",
        "                continue\n",
        "            img_path = os.path.join(folder, dir, file)\n",
        "            image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "            image = ivy.array(image).astype('float32').expand_dims()\n",
        "            image /= 255\n",
        "            img_array.append(image) \n",
        "            class_name.append(dir)\n",
        "    \n",
        "    return randomize_dataset(img_array, class_name)\n",
        "\n",
        "\n",
        "def generate_batches(images, classes, dataset_size, batch_size = 32):\n",
        "    targets={k: v for v, k in enumerate(np.unique(classes))}\n",
        "    y_train= [targets[classes[i]] for i in range(len(classes))]\n",
        "    if batch_size > dataset_size:\n",
        "        raise ivy.utils.exceptions.IvyError('Use a smaller batch size')\n",
        "    for idx in range(0, dataset_size, batch_size):\n",
        "        yield ivy.stack(images[idx:min(idx+batch_size, dataset_size)]), ivy.array(y_train[idx:min(idx+batch_size, dataset_size)])\n",
        "\n",
        "\n",
        "#choosing 1000 examples per class for this demo\n",
        "images, classes = create_dataset(PATH + '/train',num_examples_per_class = 1000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dX4xW6nsxvj6",
        "outputId": "1be16a0c-1d8b-4e91-cc72-a0684c4d7045"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of Training Examples is -: 10000\n"
          ]
        }
      ],
      "source": [
        "print(f'Number of Training Examples is -: {len(images)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-gFZs6eAVYls",
        "outputId": "8566bc42-f3d6-4909-a8a5-5f6a8f3e9b8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class labels -: {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n"
          ]
        }
      ],
      "source": [
        "targets = {k: v for v, k in enumerate(np.unique(classes))}\n",
        "print(f\"Class labels -: {targets}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bREEiiUu415W",
        "outputId": "75455c27-5d7e-460d-efc5-11d0dfdd4b8a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data is of the form -: (32, 1, 28, 28) (NCHW)\n",
            "\n",
            "32 ivy.array([2, 6, 8, 8, 3, 6, 0, 3, 6, 4, 1, 5, 8, 3, 8, 7, 4, 7, 1, 0, 0, 7,\n",
            "       9, 8, 2, 0, 2, 8, 8, 9, 1, 2], dev=gpu:0)\n"
          ]
        }
      ],
      "source": [
        "x_batch_instance, y = next(iter(generate_batches(images, classes, len(images))))\n",
        "print(f\"Data is of the form -: {x_batch_instance.shape} (NCHW)\\n\")\n",
        "print(y.shape[0], y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0MFYmtCgc-V"
      },
      "source": [
        "Intialising some training parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "k0Yim1MPZ1RK"
      },
      "outputs": [],
      "source": [
        "optimizer= ivy.Adam(1e-4)\n",
        "batch_size = 64 \n",
        "num_epochs = 20\n",
        "num_classes = 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mGAcRGmUgjDn",
        "pycharm": {
          "name": "#%% md\n"
        }
      },
      "source": [
        "# Defining the Ivy Network\n",
        "\n",
        "We inherit from the `ivy.Module` class for creation of networks. This helps us with the forward pass and computation of the gradients. Note that some keyword arguments below are user-defined, and are purely for the purpose of building this model. You can find more information about the `init` method inside the docs."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "HrDmq06pfqQk"
      },
      "outputs": [],
      "source": [
        "class IvyNet(ivy.Module):\n",
        "    def __init__(self, h_w = (32, 32), input_channels = 3,  output_channels = 512, kernel_size = [3, 3], num_classes = 2, data_format = \"NCHW\", device = \"cpu\"):\n",
        "        self.extractor = ivy.Sequential(\n",
        "            ivy.Conv2D(input_channels, 6, [5, 5], 1,  \"SAME\", data_format = data_format),\n",
        "            ivy.GELU(),\n",
        "            ivy.Conv2D(6,  16,  [5, 5], 1,  \"SAME\", data_format = data_format),\n",
        "            ivy.GELU(),\n",
        "            ivy.Conv2D(16, output_channels, [5, 5],  1,  \"SAME\", data_format = data_format),\n",
        "            ivy.GELU()\n",
        "        )\n",
        "        \n",
        "        self.classifier = ivy.Sequential(\n",
        "            ivy.Linear(h_w[0]*h_w[1]*output_channels, 512), #since padding is same, this would be image_height x image_widht x output_channels\n",
        "            ivy.GELU(),\n",
        "            ivy.Linear(512, num_classes)\n",
        "        )\n",
        "        ivy.Module.__init__(self)\n",
        "\n",
        "    def _forward(self, x):\n",
        "        x = self.extractor(x)\n",
        "        x = ivy.flatten(x, start_dim = 1, end_dim = -1) #flatten all dims except batch dim\n",
        "        logits = self.classifier(x)\n",
        "        probs = ivy.softmax(logits)\n",
        "        return logits, probs\n",
        "\n",
        "# train the model on gpu if it's available\n",
        "device = \"cuda:0\" if ivy.gpu_is_available() else \"cpu\"\n",
        "\n",
        "model = IvyNet(h_w = (28, 28), input_channels = 1, output_channels = 120, kernel_size = [5,5], num_classes = num_classes, device = device)\n",
        "model_name = type(model).__name__.lower()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eAn76_ynseYq",
        "outputId": "f56cea6c-2d42-4931-a405-926c61206823"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda:0 ivynet\n"
          ]
        }
      ],
      "source": [
        "print(device, model_name)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TE-jMYkehQca"
      },
      "source": [
        "# Training Loop with utility functions\n",
        "\n",
        "The `train` function is where we do the heavy lifting, and use the `loss_fn` to compute the gradients. `num_correct` is used for returning the correct set of predictions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aktlI5JshJb2"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "N3BnvAx1hERH"
      },
      "outputs": [],
      "source": [
        "def num_correct(preds, labels):\n",
        "    return (preds.argmax() == labels).sum().to_numpy().item()\n",
        "\n",
        "def loss_fn(params):\n",
        "    v, model, x, y = params\n",
        "    y_pred, probs = model(x)\n",
        "    return ivy.cross_entropy(y, probs), probs\n",
        "\n",
        "def train(images, classes, epochs, model, device, num_classes = 10, batch_size = 32):\n",
        "    # training metrics\n",
        "    epoch_loss = 0.0\n",
        "    running_loss = 0.0\n",
        "    fields = ['epoch', 'epoch_loss', 'training_accuracy']\n",
        "    metrics = []\n",
        "    dataset_size = len(images)\n",
        "    \n",
        "    for epoch in range(epochs):\n",
        "        train_loss, train_correct = 0, 0\n",
        "        train_loop = tqdm(generate_batches(images, classes, len(images), batch_size = batch_size), total = dataset_size//batch_size\n",
        "        , position = 0, leave = True)\n",
        "        \n",
        "        for xbatch, ybatch in train_loop:\n",
        "            print(xbatch.shape)\n",
        "            print(ybatch.shape)\n",
        "            if device != \"cpu\":\n",
        "                 xbatch, ybatch = xbatch.to_device(\"gpu:0\"), ybatch.to_device(\"gpu:0\")\n",
        "\n",
        "            # since the cross entropy function expects the target classes to be in one-hot encoded format\n",
        "            ybatch_encoded = ivy.one_hot(ybatch, num_classes)\n",
        "            \n",
        "            # update model params\n",
        "            loss_probs, grads = ivy.execute_with_gradients(loss_fn, (model.v, model, xbatch, ybatch_encoded), ret_grad_idxs = [[0]], xs_grad_idxs = [[0]])\n",
        "            model.v = optimizer.step(model.v, grads['0'])\n",
        "            \n",
        "            batch_loss = ivy.to_numpy(loss_probs[0]).mean().item() # batch mean loss\n",
        "            epoch_loss +=  batch_loss * xbatch.shape[0]\n",
        "            train_correct += num_correct(loss_probs[1], ybatch)\n",
        "\n",
        "            train_loop.set_description(f'Epoch [{epoch+1:2d}/{epochs}]')\n",
        "            train_loop.set_postfix(\n",
        "                running_loss=batch_loss, accuracy_percentage=(train_correct/dataset_size)*100\n",
        "            )\n",
        "        epoch_loss = epoch_loss/dataset_size\n",
        "        training_accuracy = train_correct/dataset_size\n",
        "\n",
        "      \n",
        "        metrics.append([epoch, epoch_loss, training_accuracy])\n",
        "\n",
        "        train_loop.write(\n",
        "                f'\\nAverage training loss: {epoch_loss:.6f}, Train Correct: {train_correct}', end='\\n'\n",
        "            )\n",
        "\n",
        "    # write metrics for plotting\n",
        "    with open(f'/{model_name}_train_summary.csv', 'w') as f:\n",
        "        f = csv.writer(f)\n",
        "        f.writerow(fields)\n",
        "        f.writerows(metrics)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4QnGBCrZUnhl"
      },
      "outputs": [
      {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 1/20]: : 157it [01:16,  2.06it/s, accuracy_percentage=0.2, running_loss=0.29]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.475401, Train Correct: 20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 2/20]: : 157it [01:14,  2.11it/s, accuracy_percentage=0.14, running_loss=0.12]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.081436, Train Correct: 14\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 3/20]: : 157it [01:13,  2.13it/s, accuracy_percentage=0.19, running_loss=0.0187]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.029279, Train Correct: 19\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 4/20]: : 157it [01:14,  2.11it/s, accuracy_percentage=0.36, running_loss=0.0324]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.008382, Train Correct: 36\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 5/20]: : 157it [01:15,  2.07it/s, accuracy_percentage=0.6, running_loss=0.00456]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.003816, Train Correct: 60\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 6/20]: : 157it [01:26,  1.82it/s, accuracy_percentage=0.6, running_loss=0.00277]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.002179, Train Correct: 60\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 7/20]: : 157it [01:16,  2.05it/s, accuracy_percentage=0.81, running_loss=0.00175]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.001569, Train Correct: 81\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 8/20]: : 157it [01:14,  2.11it/s, accuracy_percentage=0.81, running_loss=0.00147]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.001235, Train Correct: 81\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [ 9/20]: : 157it [01:14,  2.09it/s, accuracy_percentage=1.06, running_loss=0.00128]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.001005, Train Correct: 106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [10/20]: : 157it [01:14,  2.10it/s, accuracy_percentage=1.29, running_loss=0.00112]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000837, Train Correct: 129\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [11/20]: : 157it [01:13,  2.12it/s, accuracy_percentage=1.45, running_loss=0.000989]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000709, Train Correct: 145\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [12/20]: : 157it [01:15,  2.07it/s, accuracy_percentage=1.68, running_loss=0.000873]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000606, Train Correct: 168\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [13/20]: : 157it [01:15,  2.08it/s, accuracy_percentage=1.77, running_loss=0.000774]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000524, Train Correct: 177\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [14/20]: : 157it [01:15,  2.09it/s, accuracy_percentage=1.92, running_loss=0.000688]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000455, Train Correct: 192\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [15/20]: : 157it [01:13,  2.13it/s, accuracy_percentage=1.92, running_loss=0.000613]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000398, Train Correct: 192\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [16/20]: : 157it [01:13,  2.12it/s, accuracy_percentage=2.05, running_loss=0.000547]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000350, Train Correct: 205\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [17/20]: : 157it [01:13,  2.13it/s, accuracy_percentage=2.18, running_loss=0.000488]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000308, Train Correct: 218\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [18/20]: : 157it [01:13,  2.13it/s, accuracy_percentage=2.25, running_loss=0.000437]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000273, Train Correct: 225\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [19/20]: : 157it [01:14,  2.10it/s, accuracy_percentage=2.38, running_loss=0.000391]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000243, Train Correct: 238\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [20/20]: : 157it [01:19,  1.98it/s, accuracy_percentage=2.6, running_loss=0.000351]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average training loss: 0.000216, Train Correct: 260\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
      "source": [
        "train(images, classes, num_epochs, model, device, num_classes = num_classes, batch_size = batch_size)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vf0SzHX2iG7-"
      },
      "source": [
        "# Plotting the training metrics\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "2AsYxL4Bh6WO",
        "outputId": "f37fd882-94c1-4be6-9c86-de42a0b1140d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1008x288 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "def plot_summary(path):\n",
        "    data = pd.read_csv(path)\n",
        "\n",
        "    plt.style.use('seaborn-whitegrid')\n",
        "    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(14, 4))\n",
        "\n",
        "    ax1.plot(data['epoch'], data['epoch_loss'], label='Train Loss')\n",
        "    ax2.plot(data['epoch'], data['training_accuracy'], label='Train Accuracy')\n",
        "\n",
        "    ax1.legend()\n",
        "    ax1.set_title('Running Loss', fontweight='bold')\n",
        "    ax1.set_xlabel('Epochs')\n",
        "    ax1.set_ylabel('Loss')\n",
        "    ax1.grid(True)\n",
        "\n",
        "    ax2.legend()\n",
        "    ax2.set_title('Running Accuracy', fontweight='bold')\n",
        "    ax2.set_xlabel('Epochs')\n",
        "    ax2.set_ylabel('Accuracy')\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    fig.savefig(f'summary_plots.png')\n",
        "    plt.show()\n",
        "    plt.close()\n",
        "\n",
        "\n",
        "plot_summary(f'/{model_name}_train_summary.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wxnb0QRBh3UB",
        "pycharm": {
          "name": "#%% md\n"
        }
      },
      "source": [
        "# Save the trained Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yf49uvhL30H1"
      },
      "outputs": [],
      "source": [
        "model.save_weights('model_params/ivynet_weights.hdf5')"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
