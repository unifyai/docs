Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 160, 163, 166, 167, 168, 170, 174, 175, 189, 192, 202, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 569, 575, 580, 581, 582, 583, 585, 587, 588, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 708, 710, 712, 713, 718, 719, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 762, 764, 765, 767, 776, 777, 779, 780, 782, 783, 784, 785, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "repo": [0, 11, 40, 804, 807, 809, 812, 814, 815, 820, 828, 830, 845], "hold": [0, 52, 53, 57, 65, 75, 80, 88, 92, 93, 328, 344, 349, 365, 380, 460, 488, 512, 513, 518, 565, 566, 622, 625, 635, 666, 746, 762, 838, 857], "all": [0, 1, 3, 4, 5, 7, 8, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 39, 40, 42, 43, 45, 47, 48, 52, 53, 56, 57, 59, 61, 66, 67, 69, 70, 71, 74, 75, 76, 79, 80, 82, 84, 89, 90, 92, 93, 121, 129, 136, 140, 141, 142, 196, 203, 235, 239, 267, 268, 322, 323, 335, 353, 362, 365, 368, 369, 370, 371, 380, 401, 410, 412, 413, 414, 422, 427, 435, 436, 438, 441, 442, 463, 474, 482, 487, 517, 523, 526, 543, 563, 564, 580, 587, 588, 602, 605, 617, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631, 632, 636, 647, 649, 650, 655, 668, 673, 674, 677, 682, 691, 695, 697, 703, 704, 705, 706, 707, 708, 717, 718, 719, 720, 726, 729, 734, 759, 761, 764, 765, 766, 767, 779, 780, 786, 789, 794, 796, 800, 801, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 852, 853, 854, 855, 856, 857, 859, 862, 863], "jupyt": [0, 846, 858], "exampl": [0, 6, 8, 17, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 324, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 386, 387, 388, 389, 391, 392, 394, 395, 396, 399, 400, 401, 404, 405, 406, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 436, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 493, 494, 496, 499, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 772, 789, 793, 794, 798, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 826, 827, 830, 831, 835, 837, 838, 839, 840, 841, 847, 853, 854, 857, 859, 862, 863], "tab": [0, 805, 806, 814, 820, 838], "ivi": [0, 1, 2, 6, 8, 9, 11, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 808, 809, 811, 813, 815, 816, 818, 820, 821, 822, 823, 824, 826, 833, 834, 841, 843, 846, 847, 848, 852, 863], "": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 41, 43, 44, 45, 48, 52, 53, 54, 57, 65, 75, 77, 80, 88, 117, 134, 140, 141, 161, 162, 191, 194, 195, 207, 242, 277, 323, 328, 329, 330, 332, 342, 344, 350, 354, 356, 362, 365, 366, 368, 369, 370, 371, 374, 375, 380, 383, 384, 390, 396, 401, 412, 420, 424, 430, 439, 444, 446, 447, 463, 465, 466, 474, 490, 491, 492, 501, 511, 521, 539, 540, 546, 560, 582, 583, 604, 606, 607, 608, 609, 611, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 629, 635, 639, 641, 643, 645, 650, 657, 668, 675, 676, 682, 718, 752, 754, 765, 779, 780, 781, 782, 783, 784, 785, 789, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 843, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 862], "web": 0, "relev": [0, 48, 71, 133, 617, 784, 800, 805, 806, 807, 810, 813, 814, 815, 817, 820, 824, 825, 828, 829, 830, 838, 842, 846, 854, 861, 862], "link": [0, 17, 26, 27, 41, 800, 805, 806, 807, 812, 814, 815, 821, 827, 850, 852, 854], "list": [0, 4, 5, 6, 7, 9, 42, 47, 48, 49, 51, 52, 53, 56, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 131, 134, 135, 136, 138, 144, 148, 150, 163, 167, 168, 175, 191, 208, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 343, 344, 350, 351, 352, 354, 355, 356, 365, 368, 369, 371, 378, 386, 387, 388, 390, 391, 392, 393, 404, 405, 406, 407, 411, 413, 417, 422, 426, 429, 434, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 458, 459, 460, 469, 480, 482, 483, 484, 488, 490, 492, 493, 494, 496, 498, 503, 511, 512, 513, 514, 523, 525, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 543, 545, 547, 549, 550, 551, 553, 554, 557, 561, 565, 566, 580, 581, 583, 585, 586, 587, 588, 589, 601, 602, 607, 612, 617, 618, 619, 620, 622, 624, 625, 627, 629, 630, 633, 634, 638, 639, 640, 641, 642, 643, 646, 647, 648, 650, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 677, 679, 684, 685, 686, 687, 688, 691, 694, 695, 696, 697, 698, 701, 702, 706, 707, 708, 709, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 742, 743, 745, 746, 749, 751, 752, 754, 755, 756, 759, 761, 764, 765, 766, 767, 772, 777, 780, 786, 793, 794, 804, 805, 806, 809, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 835, 838, 839, 840, 841, 849, 856, 857, 862], "open": [0, 3, 5, 6, 7, 8, 23, 26, 27, 40, 41, 42, 43, 53, 61, 84, 121, 617, 631, 727, 729, 800, 801, 802, 806, 807, 812, 815, 818, 820, 827, 828, 833, 842, 845, 846, 847, 849, 850, 854, 855, 856, 858, 859], "task": [0, 43, 628, 703, 704, 705, 800, 801, 806, 807, 827, 828, 856, 862, 863], "avil": 0, "discuss": [0, 805, 807, 812, 815, 816, 826, 827, 829, 830, 833, 836, 837, 838, 841, 847, 852, 857], "suggest": [0, 805, 806, 807, 812, 815, 821, 825, 827, 830, 831, 832, 842], "new": [0, 6, 8, 10, 11, 13, 15, 18, 21, 22, 23, 24, 26, 27, 28, 42, 44, 47, 52, 53, 54, 59, 60, 69, 71, 75, 76, 77, 80, 82, 83, 125, 128, 130, 131, 136, 137, 138, 143, 144, 181, 224, 270, 272, 276, 328, 333, 344, 349, 365, 368, 371, 380, 403, 450, 458, 459, 473, 479, 518, 534, 535, 536, 538, 541, 542, 544, 565, 566, 569, 571, 578, 580, 581, 587, 604, 607, 609, 610, 611, 617, 618, 620, 622, 623, 624, 627, 629, 630, 650, 662, 670, 690, 694, 698, 711, 723, 724, 725, 777, 780, 783, 784, 789, 794, 800, 801, 805, 806, 807, 808, 810, 811, 813, 814, 815, 817, 818, 820, 821, 824, 826, 827, 828, 829, 830, 831, 833, 834, 837, 840, 842, 843, 845, 846, 847, 849, 854, 858, 862, 863], "should": [0, 4, 8, 9, 21, 22, 23, 24, 43, 46, 48, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 65, 68, 69, 71, 74, 75, 76, 77, 79, 80, 82, 84, 85, 87, 88, 90, 92, 95, 97, 98, 108, 112, 120, 134, 136, 140, 141, 149, 174, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 307, 323, 329, 330, 341, 345, 346, 347, 348, 352, 357, 358, 359, 360, 362, 365, 367, 368, 369, 370, 371, 375, 380, 383, 391, 392, 393, 395, 400, 411, 426, 435, 441, 448, 473, 474, 497, 498, 511, 512, 513, 528, 546, 551, 602, 604, 607, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 644, 645, 653, 654, 655, 656, 658, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 694, 710, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 753, 754, 761, 762, 764, 766, 776, 777, 779, 780, 782, 783, 784, 785, 793, 794, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 844, 846, 850, 852, 853, 856, 858, 863], "comprehens": [0, 15, 807, 809, 829], "possibl": [0, 3, 32, 48, 52, 71, 75, 82, 92, 123, 242, 285, 306, 329, 330, 362, 365, 368, 370, 371, 390, 443, 452, 453, 454, 460, 462, 464, 465, 466, 473, 488, 561, 620, 622, 624, 635, 647, 690, 691, 692, 694, 696, 697, 699, 701, 748, 750, 764, 780, 794, 797, 800, 801, 803, 805, 806, 807, 809, 812, 813, 815, 817, 818, 820, 821, 823, 825, 826, 827, 828, 830, 833, 835, 838, 841, 846, 854, 856, 862], "us": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 41, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 61, 62, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 90, 92, 93, 95, 98, 105, 133, 136, 147, 159, 161, 162, 173, 174, 194, 195, 197, 202, 206, 207, 208, 209, 211, 214, 220, 228, 256, 257, 259, 260, 262, 263, 264, 266, 267, 269, 278, 282, 287, 306, 308, 309, 311, 312, 313, 321, 342, 345, 346, 349, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 386, 387, 388, 390, 391, 392, 393, 394, 396, 401, 403, 404, 405, 406, 409, 411, 412, 413, 415, 420, 422, 426, 430, 432, 434, 435, 437, 438, 439, 441, 442, 447, 464, 468, 472, 474, 482, 490, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 511, 518, 521, 539, 540, 549, 550, 561, 562, 569, 571, 572, 574, 580, 581, 593, 594, 596, 603, 604, 609, 610, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 635, 648, 650, 653, 658, 660, 668, 672, 676, 679, 682, 684, 693, 694, 695, 699, 703, 704, 705, 706, 708, 709, 715, 716, 717, 719, 726, 727, 728, 729, 731, 732, 733, 734, 737, 739, 747, 762, 764, 765, 766, 767, 772, 776, 777, 779, 780, 781, 782, 783, 784, 789, 793, 794, 798, 801, 804, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 847, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "easi": [0, 26, 27, 40, 806, 807, 810, 811, 813, 823, 825, 828, 830, 833, 846, 854, 856, 862, 863], "follow": [0, 9, 20, 21, 22, 24, 26, 27, 30, 31, 32, 38, 41, 42, 52, 53, 54, 56, 57, 63, 69, 75, 76, 77, 79, 80, 129, 160, 163, 208, 218, 235, 242, 268, 270, 277, 278, 313, 362, 368, 370, 371, 374, 390, 403, 411, 447, 462, 474, 490, 492, 549, 550, 551, 580, 581, 604, 607, 609, 610, 611, 617, 618, 619, 620, 622, 623, 624, 625, 629, 633, 650, 653, 666, 672, 682, 712, 718, 737, 738, 739, 740, 780, 784, 800, 802, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 849, 853, 856, 859], "attract": 0, "visual": [0, 9, 44, 798, 800, 806, 820, 827, 830, 841, 856, 858, 861], "graph": [0, 3, 5, 7, 9, 15, 16, 19, 21, 23, 24, 27, 33, 34, 39, 44, 45, 63, 633, 737, 738, 739, 740, 772, 800, 813, 823, 827, 829, 833, 835, 840, 841, 843, 847, 848, 849, 850, 851, 852, 856, 859], "nice": [0, 830, 847, 856], "format": [0, 23, 24, 26, 27, 38, 40, 41, 42, 50, 53, 56, 65, 68, 69, 70, 73, 79, 95, 113, 158, 192, 368, 369, 379, 409, 440, 507, 534, 614, 618, 619, 622, 624, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 747, 757, 758, 759, 776, 800, 806, 807, 808, 814, 815, 816, 817, 818, 819, 827, 829, 838, 850, 852, 854, 856, 857], "result": [0, 3, 5, 6, 7, 8, 9, 11, 13, 21, 22, 23, 24, 26, 27, 38, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 174, 175, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 440, 443, 444, 445, 446, 448, 449, 451, 458, 459, 462, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 529, 530, 534, 535, 536, 541, 542, 546, 551, 558, 565, 566, 603, 604, 605, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 709, 712, 713, 715, 719, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 766, 772, 786, 794, 798, 800, 803, 805, 807, 809, 810, 812, 813, 814, 815, 817, 818, 820, 822, 823, 825, 826, 827, 828, 830, 831, 835, 838, 841, 849, 850, 851, 857, 859], "etc": [0, 29, 34, 41, 48, 52, 61, 63, 67, 71, 75, 84, 90, 124, 132, 133, 136, 368, 375, 396, 401, 412, 497, 498, 500, 501, 617, 631, 633, 726, 727, 728, 729, 737, 738, 739, 740, 764, 767, 779, 780, 781, 782, 783, 784, 785, 805, 806, 807, 809, 810, 811, 812, 813, 815, 817, 819, 822, 827, 828, 830, 831, 835, 837, 838, 841, 843, 847, 849, 854, 856, 862], "gener": [0, 5, 15, 19, 24, 26, 27, 29, 32, 40, 42, 44, 45, 48, 51, 52, 56, 61, 67, 71, 74, 75, 79, 84, 90, 93, 121, 132, 133, 142, 150, 235, 238, 248, 249, 264, 268, 277, 306, 309, 313, 314, 315, 317, 318, 319, 320, 321, 322, 329, 330, 362, 365, 368, 369, 371, 375, 380, 411, 417, 437, 482, 499, 511, 617, 618, 620, 624, 625, 627, 631, 635, 647, 673, 674, 677, 680, 702, 726, 727, 729, 730, 752, 764, 767, 772, 784, 793, 805, 806, 807, 808, 809, 810, 812, 815, 816, 817, 818, 819, 822, 823, 826, 827, 828, 831, 834, 835, 837, 839, 840, 841, 843, 854, 855, 856, 857, 858, 859, 860, 861, 862], "tone": [0, 4], "feel": [0, 41, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 842, 849], "free": [0, 5, 40, 41, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 842, 849, 857, 859], "includ": [0, 9, 15, 19, 29, 34, 48, 51, 52, 53, 57, 62, 65, 66, 69, 71, 74, 75, 76, 80, 85, 88, 89, 121, 122, 123, 132, 133, 135, 142, 215, 239, 243, 244, 245, 248, 250, 253, 261, 269, 282, 287, 308, 311, 312, 313, 316, 322, 325, 327, 329, 330, 334, 335, 336, 338, 339, 340, 341, 343, 345, 346, 348, 349, 350, 351, 354, 355, 362, 365, 368, 371, 380, 386, 387, 388, 418, 421, 423, 465, 466, 468, 471, 473, 475, 478, 499, 501, 502, 510, 514, 516, 517, 519, 520, 521, 547, 601, 617, 620, 622, 625, 629, 631, 632, 635, 636, 659, 680, 682, 706, 729, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 767, 779, 780, 783, 796, 800, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 826, 827, 828, 829, 830, 831, 833, 835, 846, 849, 850, 853, 854, 856, 858, 861, 862, 863], "emoji": [0, 805], "don": [0, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 40, 42, 67, 90, 800, 805, 806, 807, 814, 815, 816, 821, 825, 830, 833, 839, 841, 842, 847, 849], "t": [0, 4, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 38, 40, 41, 42, 52, 56, 67, 75, 79, 90, 92, 93, 97, 342, 357, 365, 367, 369, 422, 551, 569, 583, 605, 622, 623, 624, 629, 648, 649, 714, 759, 780, 800, 802, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 820, 821, 823, 824, 825, 826, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 846, 847, 849, 850, 851, 854, 856, 858], "keep": [0, 1, 11, 13, 17, 23, 24, 26, 52, 59, 69, 75, 82, 92, 95, 353, 369, 441, 627, 701, 804, 805, 806, 807, 809, 812, 813, 814, 819, 826, 827, 830, 831, 833, 838, 840, 842, 850], "thing": [0, 24, 38, 40, 793, 804, 805, 806, 807, 811, 827, 830, 833, 837, 838, 845, 846, 847, 856], "super": [0, 3, 5, 11, 13, 26, 27, 40, 52, 75, 369, 422, 800, 819, 835, 838, 839, 840, 850], "seriou": 0, "given": [0, 3, 17, 26, 39, 52, 53, 58, 59, 61, 69, 75, 76, 77, 81, 82, 84, 92, 93, 95, 97, 98, 121, 125, 132, 133, 153, 154, 155, 156, 157, 169, 174, 193, 202, 204, 206, 207, 208, 210, 214, 287, 316, 325, 328, 334, 335, 342, 343, 344, 346, 349, 362, 365, 368, 369, 370, 371, 374, 375, 380, 386, 387, 388, 389, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 412, 422, 427, 440, 444, 445, 446, 448, 449, 450, 451, 461, 462, 463, 470, 472, 484, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 511, 512, 513, 514, 520, 542, 546, 565, 566, 576, 603, 604, 607, 609, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 683, 684, 685, 686, 687, 690, 691, 692, 693, 695, 696, 700, 701, 713, 714, 723, 724, 727, 728, 729, 731, 743, 744, 745, 746, 759, 764, 765, 766, 767, 772, 776, 777, 779, 780, 782, 783, 784, 785, 786, 793, 794, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 836, 837, 839, 846, 847, 853, 858, 859, 862, 863], "an": [0, 2, 3, 8, 9, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 32, 38, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 160, 163, 166, 170, 174, 175, 205, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 310, 311, 312, 314, 315, 322, 323, 324, 325, 326, 327, 329, 330, 332, 335, 338, 343, 347, 352, 360, 362, 365, 368, 369, 370, 371, 374, 375, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 399, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 423, 446, 447, 451, 452, 453, 454, 458, 459, 460, 462, 469, 473, 474, 480, 482, 487, 488, 490, 491, 492, 495, 497, 498, 500, 503, 504, 509, 510, 511, 512, 513, 514, 515, 518, 519, 522, 527, 529, 530, 538, 541, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 560, 566, 569, 570, 579, 583, 587, 588, 589, 602, 605, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 712, 725, 727, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 766, 767, 769, 772, 776, 777, 779, 780, 782, 783, 784, 785, 794, 800, 802, 803, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 862, 863], "intern": [0, 9, 69, 100, 101, 102, 629, 706, 716, 717, 779, 780, 781, 782, 783, 785, 810, 813, 816, 818, 826, 828, 830, 832], "releas": [0, 41, 805, 806, 815, 831, 833, 841, 847, 856, 862], "tracer": [0, 3, 5, 7, 8, 21, 22, 23, 24, 27, 43, 45, 800, 827, 834, 836, 841, 843, 850, 851, 852], "i": [0, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 175, 187, 189, 191, 192, 194, 195, 197, 199, 202, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 401, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 424, 425, 426, 427, 429, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 562, 565, 566, 567, 569, 575, 579, 580, 581, 583, 585, 587, 588, 589, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 762, 764, 765, 766, 767, 772, 776, 777, 779, 780, 781, 782, 783, 784, 786, 789, 790, 793, 794, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "around": [0, 10, 11, 13, 15, 52, 69, 75, 98, 371, 474, 482, 805, 807, 809, 810, 812, 816, 822, 823, 827, 831, 837, 841, 843, 849, 854, 856, 863], "corner": [0, 52, 75, 368, 403, 806, 807, 820, 827], "anybodi": 0, "abl": [0, 3, 5, 28, 32, 43, 45, 69, 92, 806, 807, 809, 815, 820, 823, 826, 827, 831, 835, 840, 849, 859, 862], "start": [0, 1, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 41, 42, 48, 52, 69, 71, 75, 79, 121, 129, 132, 133, 346, 356, 365, 366, 368, 371, 380, 410, 464, 467, 475, 477, 486, 520, 617, 766, 793, 801, 805, 806, 807, 808, 814, 815, 817, 818, 820, 821, 822, 827, 830, 833, 834, 835, 837, 838, 839, 841, 849, 850, 856, 862], "work": [0, 24, 26, 27, 38, 39, 41, 45, 47, 52, 75, 92, 380, 521, 625, 629, 676, 713, 714, 718, 723, 724, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 826, 827, 828, 830, 831, 834, 835, 837, 839, 840, 842, 847, 849, 850, 851, 854, 856, 858, 860, 863], "shortli": 0, "so": [0, 1, 5, 6, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 38, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 365, 368, 371, 378, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 624, 629, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 675, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 717, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 794, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 845, 846, 849, 850, 851, 856, 857, 858, 860], "worri": [0, 26, 27, 805, 806, 821], "about": [0, 15, 16, 17, 20, 22, 24, 26, 27, 30, 41, 42, 49, 72, 160, 163, 618, 800, 802, 804, 805, 806, 807, 808, 809, 812, 814, 815, 816, 821, 822, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 847, 851, 857, 858, 861], "have": [0, 1, 3, 4, 5, 6, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 38, 40, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 160, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 323, 329, 330, 331, 332, 337, 341, 343, 345, 346, 347, 348, 352, 355, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 409, 411, 412, 416, 418, 419, 421, 422, 427, 428, 431, 432, 433, 434, 439, 443, 444, 445, 446, 447, 448, 449, 453, 454, 459, 460, 462, 467, 475, 476, 477, 478, 480, 482, 484, 486, 493, 494, 496, 497, 498, 500, 501, 502, 504, 511, 512, 513, 514, 518, 522, 529, 530, 534, 535, 536, 541, 542, 551, 565, 566, 569, 603, 604, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 776, 777, 779, 780, 782, 783, 784, 785, 793, 794, 800, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 858, 862, 863], "access": [0, 23, 26, 27, 69, 800, 805, 806, 807, 814, 815, 821, 826, 827, 842, 850, 856, 858, 860], "transpil": [0, 6, 7, 8, 10, 15, 16, 19, 29, 771, 772, 805, 806, 819, 820, 827, 834, 835, 836, 843, 848, 849, 851, 856, 862, 863], "code": [0, 4, 6, 7, 8, 15, 16, 23, 24, 26, 28, 29, 30, 31, 32, 33, 40, 41, 50, 51, 69, 73, 74, 98, 209, 255, 380, 518, 527, 535, 536, 551, 565, 569, 583, 619, 622, 624, 625, 627, 646, 667, 668, 669, 698, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 822, 823, 824, 826, 827, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 863], "now": [0, 4, 6, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 42, 780, 781, 782, 800, 806, 809, 810, 811, 812, 813, 814, 815, 816, 820, 822, 824, 827, 828, 830, 831, 833, 837, 838, 840, 841, 847, 849, 850, 851, 856], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 75, 76, 92, 97, 98, 371, 380, 462, 518, 541, 542, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 650, 776, 777, 779, 780, 782, 783, 784, 785, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856], "can": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 45, 48, 49, 52, 53, 57, 59, 61, 63, 71, 72, 75, 76, 80, 82, 84, 86, 92, 93, 107, 110, 122, 123, 133, 135, 150, 189, 206, 207, 208, 296, 313, 360, 362, 368, 369, 370, 374, 375, 378, 380, 390, 403, 427, 432, 434, 439, 447, 459, 490, 498, 499, 504, 511, 558, 569, 602, 605, 614, 617, 618, 619, 622, 623, 624, 625, 627, 631, 650, 658, 665, 675, 679, 694, 698, 727, 728, 729, 737, 761, 764, 765, 766, 767, 772, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 862, 863], "style": [0, 9, 40, 42, 371, 474, 632, 735, 807, 821, 856], "stori": 0, "If": [0, 1, 3, 4, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 41, 44, 45, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 93, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 147, 148, 149, 150, 175, 191, 207, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 322, 323, 325, 328, 329, 330, 331, 332, 334, 335, 336, 339, 343, 344, 349, 350, 352, 354, 355, 356, 362, 365, 366, 368, 369, 370, 371, 374, 375, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 401, 403, 404, 405, 406, 411, 412, 413, 415, 420, 422, 424, 426, 427, 432, 434, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 460, 462, 463, 464, 465, 466, 469, 473, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 557, 558, 565, 566, 570, 580, 581, 583, 585, 587, 588, 601, 602, 605, 607, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 647, 648, 650, 653, 654, 655, 657, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 718, 719, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 779, 780, 782, 783, 789, 794, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 840, 841, 842, 845, 849, 850, 851], "anyon": [0, 800, 801, 807, 814, 841, 846, 862], "ha": [0, 3, 5, 7, 8, 9, 11, 13, 17, 19, 23, 26, 27, 29, 32, 34, 38, 45, 48, 52, 57, 59, 63, 65, 69, 72, 75, 76, 80, 82, 86, 88, 92, 134, 191, 215, 235, 238, 240, 242, 252, 268, 270, 275, 278, 280, 281, 285, 324, 325, 326, 362, 369, 370, 371, 380, 403, 436, 446, 457, 481, 483, 487, 510, 512, 513, 515, 547, 617, 619, 620, 624, 625, 627, 632, 633, 635, 649, 650, 665, 666, 674, 675, 677, 679, 682, 690, 697, 735, 738, 739, 740, 745, 746, 749, 751, 752, 753, 754, 764, 767, 789, 805, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 839, 840, 841, 842, 845, 846, 847, 849, 851, 852, 855, 856, 858, 859, 862], "ani": [0, 5, 7, 11, 13, 15, 16, 17, 18, 19, 28, 29, 32, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 57, 66, 67, 71, 73, 74, 75, 76, 89, 90, 92, 97, 98, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 166, 170, 174, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 322, 323, 329, 330, 332, 335, 362, 365, 368, 369, 370, 371, 374, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 412, 413, 422, 427, 442, 463, 474, 482, 490, 491, 492, 511, 514, 517, 518, 519, 523, 533, 534, 535, 536, 537, 541, 545, 547, 549, 553, 555, 556, 574, 581, 588, 589, 596, 602, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 712, 713, 715, 716, 723, 725, 729, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 759, 762, 766, 776, 777, 779, 780, 782, 783, 784, 785, 789, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 854, 855, 856, 857, 859, 862, 863], "question": [0, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847], "ping": 0, "me": [0, 807], "guillermo": 0, "commun": [0, 41, 801, 805, 806, 807, 841, 846, 855, 856, 858], "ux": 0, "team": [0, 800, 801, 805, 806, 807, 827, 842, 858], "discord": [0, 41, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 838, 839, 840, 842, 845, 846, 847], "channel": [0, 24, 42, 52, 53, 56, 75, 76, 79, 97, 98, 368, 374, 391, 392, 393, 403, 490, 491, 492, 495, 534, 538, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 776, 777, 779, 780, 782, 783, 784, 785, 807, 812, 820, 829], "To": [0, 7, 8, 9, 11, 13, 17, 21, 22, 23, 24, 26, 27, 38, 41, 42, 43, 93, 242, 370, 446, 575, 620, 622, 779, 805, 806, 809, 810, 811, 812, 815, 817, 819, 820, 821, 823, 824, 827, 828, 829, 830, 831, 838, 839, 840, 842, 849, 850], "ensur": [0, 7, 8, 11, 13, 21, 22, 23, 24, 52, 53, 75, 76, 368, 369, 404, 405, 406, 437, 551, 622, 759, 800, 805, 806, 807, 810, 815, 816, 817, 819, 821, 822, 824, 826, 827, 828, 829, 830, 831, 842, 856], "similar": [0, 17, 26, 27, 52, 277, 370, 442, 620, 624, 650, 780, 803, 805, 806, 813, 814, 815, 816, 819, 820, 821, 823, 824, 825, 827, 828, 830, 831, 838, 841, 845, 850, 852, 853, 854, 855, 862], "ar": [0, 1, 3, 4, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 41, 43, 44, 47, 48, 51, 52, 53, 56, 57, 59, 61, 62, 63, 69, 71, 74, 75, 76, 79, 80, 82, 84, 85, 86, 92, 93, 97, 98, 121, 131, 133, 136, 142, 196, 201, 203, 208, 232, 234, 235, 238, 242, 263, 264, 268, 273, 274, 278, 280, 285, 286, 287, 322, 324, 325, 326, 328, 331, 333, 334, 335, 338, 339, 344, 349, 352, 356, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 384, 390, 391, 392, 393, 396, 401, 403, 411, 412, 421, 422, 426, 434, 435, 437, 441, 442, 443, 447, 448, 452, 453, 454, 464, 465, 466, 468, 474, 477, 481, 482, 490, 492, 497, 498, 499, 500, 501, 511, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 537, 543, 548, 552, 563, 564, 573, 583, 595, 605, 617, 619, 620, 622, 623, 624, 625, 627, 629, 631, 632, 633, 647, 648, 650, 653, 655, 659, 660, 661, 665, 666, 668, 671, 672, 675, 676, 680, 681, 682, 687, 688, 691, 695, 697, 707, 712, 717, 718, 719, 727, 728, 729, 732, 733, 734, 735, 737, 739, 759, 761, 764, 765, 766, 767, 772, 779, 782, 785, 786, 793, 794, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863], "across": [0, 7, 8, 9, 21, 22, 23, 24, 38, 52, 62, 69, 75, 76, 85, 97, 206, 207, 235, 242, 268, 286, 370, 374, 442, 492, 495, 526, 547, 582, 619, 620, 622, 624, 629, 632, 647, 650, 712, 732, 733, 780, 805, 809, 815, 817, 819, 822, 823, 825, 830, 833, 854, 856, 861], "templat": [0, 800, 812, 818, 830], "help": [0, 15, 42, 44, 49, 524, 569, 622, 635, 753, 779, 800, 801, 802, 805, 806, 810, 811, 812, 813, 814, 815, 817, 821, 823, 824, 826, 827, 830, 831, 837, 838, 839, 842, 843, 852, 856, 858, 862], "get": [0, 3, 4, 6, 7, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 40, 41, 43, 49, 50, 57, 69, 73, 80, 97, 158, 159, 160, 163, 191, 192, 193, 196, 202, 207, 210, 214, 371, 479, 525, 543, 564, 582, 618, 619, 622, 625, 629, 682, 708, 764, 779, 780, 793, 801, 804, 805, 806, 808, 809, 814, 815, 816, 820, 823, 824, 825, 826, 827, 828, 829, 830, 835, 836, 837, 838, 839, 843, 847, 850, 851, 856, 862], "It": [0, 3, 8, 9, 18, 21, 22, 23, 24, 26, 27, 28, 29, 38, 39, 40, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 323, 329, 330, 331, 332, 337, 341, 343, 345, 346, 347, 348, 352, 360, 362, 365, 368, 369, 370, 371, 374, 375, 380, 381, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 409, 411, 416, 418, 419, 427, 428, 431, 432, 433, 434, 442, 443, 444, 445, 446, 448, 449, 459, 462, 467, 475, 476, 477, 478, 480, 482, 486, 490, 493, 494, 496, 497, 498, 500, 501, 511, 512, 513, 514, 522, 529, 530, 534, 535, 536, 541, 542, 551, 565, 566, 567, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 674, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 705, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 740, 741, 744, 745, 746, 749, 751, 752, 754, 755, 756, 779, 780, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 848, 851, 854, 856, 857, 859, 860, 861, 862, 863], "locat": [0, 42, 136, 380, 512, 617, 629, 631, 634, 710, 726, 743, 794, 805, 807, 811, 812, 816, 827, 828, 830, 831, 842, 854], "asset": [0, 843], "01_templat": 0, "ipynb": 0, "pleas": [0, 32, 41, 45, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 838, 839, 840, 842, 845, 846, 847], "make": [0, 3, 5, 6, 7, 8, 9, 18, 26, 27, 28, 40, 44, 52, 75, 368, 411, 789, 800, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 837, 838, 840, 842, 846, 847, 850, 854, 856, 857, 858, 859, 862, 863], "copi": [0, 42, 45, 48, 49, 50, 51, 52, 53, 59, 69, 71, 72, 73, 74, 75, 76, 82, 92, 96, 122, 123, 124, 128, 139, 147, 209, 269, 371, 450, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 488, 544, 570, 580, 587, 588, 617, 618, 619, 620, 622, 627, 629, 634, 690, 691, 692, 694, 696, 697, 699, 701, 707, 742, 744, 772, 794, 806, 807, 809, 811, 814, 815, 818, 827, 828, 835, 841, 849, 850, 851], "firstli": [0, 18, 19, 22, 28, 29, 33, 38, 810, 815, 817, 818, 819, 823, 824, 826, 833, 838, 852, 862], "updat": [0, 4, 5, 6, 8, 9, 20, 21, 22, 23, 24, 26, 27, 40, 42, 47, 53, 54, 69, 76, 77, 92, 371, 479, 551, 565, 566, 569, 570, 592, 603, 604, 607, 609, 610, 611, 622, 623, 624, 628, 629, 647, 649, 703, 704, 705, 713, 714, 718, 723, 724, 772, 777, 783, 784, 789, 794, 800, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 822, 824, 825, 827, 828, 830, 833, 835, 837, 838, 840, 841], "file": [0, 40, 41, 42, 53, 69, 578, 600, 622, 782, 802, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 823, 827, 828, 829, 830, 831, 835, 838, 842, 852, 855, 856, 857], "name": [0, 6, 26, 27, 38, 40, 41, 42, 52, 57, 63, 67, 75, 80, 86, 90, 242, 368, 369, 371, 415, 421, 484, 487, 524, 525, 620, 622, 625, 633, 659, 660, 664, 672, 673, 675, 676, 680, 737, 738, 739, 761, 765, 772, 782, 789, 790, 792, 805, 806, 807, 811, 812, 813, 814, 817, 818, 819, 822, 827, 828, 830, 831, 832, 833, 835, 838, 840, 856], "match": [0, 49, 52, 69, 72, 75, 147, 242, 277, 333, 335, 365, 368, 370, 371, 412, 442, 457, 479, 483, 561, 618, 620, 622, 625, 660, 661, 666, 682, 759, 803, 805, 810, 812, 813, 817, 820, 828, 857, 862], "topic": [0, 15, 18, 19, 20, 28, 29, 30, 31, 32, 33, 824, 837, 856], "your": [0, 2, 3, 4, 6, 8, 9, 11, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 30, 38, 40, 42, 44, 800, 801, 803, 804, 805, 806, 809, 811, 812, 814, 818, 820, 821, 825, 827, 829, 831, 833, 838, 839, 841, 842, 846, 847, 849, 850, 856], "Then": [0, 45, 624, 650, 802, 805, 806, 807, 811, 812, 814, 820, 821, 824, 826, 830, 831, 841], "place": [0, 7, 8, 21, 22, 23, 24, 40, 47, 48, 51, 52, 53, 57, 59, 69, 71, 73, 74, 75, 76, 80, 82, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 306, 307, 310, 322, 323, 328, 329, 330, 332, 335, 336, 337, 341, 343, 344, 345, 346, 348, 349, 350, 354, 355, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 464, 474, 479, 482, 498, 511, 514, 518, 527, 535, 536, 541, 545, 547, 549, 550, 551, 565, 569, 583, 588, 592, 612, 617, 618, 619, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 784, 800, 803, 804, 807, 808, 809, 812, 813, 814, 816, 817, 818, 820, 822, 823, 827, 828, 830, 831, 833, 840, 843, 858], "its": [0, 8, 17, 19, 26, 27, 29, 32, 39, 40, 42, 47, 49, 52, 59, 69, 72, 75, 76, 82, 95, 107, 110, 113, 118, 148, 153, 154, 155, 156, 157, 208, 235, 268, 287, 296, 360, 368, 371, 380, 407, 415, 487, 514, 538, 586, 614, 616, 618, 619, 620, 622, 625, 627, 629, 665, 690, 694, 695, 699, 712, 761, 794, 800, 805, 806, 810, 813, 814, 815, 816, 818, 819, 820, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 840, 841, 843, 849, 855, 856, 862], "folder": [0, 7, 8, 21, 22, 23, 24, 42, 800, 806, 807, 809, 812, 814, 820, 823, 827, 830, 831, 832], "next": [0, 5, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 40, 42, 52, 75, 160, 341, 345, 350, 354, 365, 618, 779, 784, 800, 805, 806, 807, 811, 815, 817, 818, 820, 821, 824, 836, 837, 838, 847, 856, 858], "edit": [0, 805, 806, 807, 821], "titl": [0, 9, 12, 14, 25, 41, 44, 800, 805, 807, 812], "descript": [0, 1, 35, 36, 37, 42, 45, 48, 51, 52, 57, 74, 75, 80, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 323, 329, 330, 332, 335, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 474, 482, 511, 514, 541, 545, 547, 549, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 805, 807, 818, 825, 826], "accordingli": [0, 52, 57, 62, 63, 65, 66, 75, 80, 85, 88, 89, 134, 235, 240, 242, 258, 268, 282, 329, 330, 365, 617, 620, 625, 632, 633, 635, 636, 682, 733, 737, 738, 739, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 827, 835, 842], "thei": [0, 9, 33, 38, 43, 52, 57, 61, 63, 69, 80, 84, 86, 173, 287, 339, 365, 618, 620, 625, 628, 631, 633, 680, 703, 704, 726, 737, 759, 785, 800, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 826, 827, 830, 831, 833, 835, 837, 838, 839, 840, 841, 849, 853, 856, 858, 859, 862, 863], "render": [0, 812, 818], "correctli": [0, 23, 26, 27, 40, 52, 57, 62, 75, 80, 85, 334, 365, 380, 517, 518, 519, 520, 521, 625, 632, 666, 732, 805, 806, 807, 810, 813, 815, 817, 819, 821, 822, 828, 830, 833, 839, 841, 849, 850], "webpag": [0, 15], "content": [0, 1, 12, 14, 25, 26, 41, 42, 52, 69, 75, 380, 518, 805, 807, 812, 816, 826, 829, 835, 838, 842], "behind": [0, 17, 26, 800, 808, 822, 830, 834, 836], "exist": [0, 17, 26, 27, 40, 41, 42, 45, 48, 52, 53, 69, 71, 75, 76, 82, 123, 371, 452, 453, 459, 460, 462, 464, 465, 466, 473, 488, 533, 569, 622, 627, 688, 690, 691, 692, 694, 696, 697, 699, 701, 784, 786, 800, 805, 806, 809, 811, 816, 817, 818, 823, 824, 826, 827, 830, 833, 835, 841, 843, 845, 846, 854, 856, 859, 862], "cell": [0, 1, 3, 4, 5, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 41, 56, 79, 624, 649, 780, 814, 835], "where": [0, 6, 19, 23, 29, 30, 34, 42, 48, 51, 52, 53, 57, 59, 61, 62, 65, 66, 69, 71, 74, 75, 76, 80, 82, 84, 85, 88, 89, 92, 93, 130, 131, 134, 136, 142, 223, 233, 235, 238, 240, 242, 243, 252, 257, 258, 259, 266, 267, 268, 273, 275, 279, 281, 285, 294, 296, 322, 324, 325, 326, 340, 344, 351, 360, 362, 365, 368, 369, 370, 371, 374, 375, 380, 382, 383, 384, 390, 395, 396, 400, 415, 421, 422, 426, 427, 429, 435, 441, 442, 443, 452, 453, 454, 468, 474, 490, 491, 492, 495, 497, 498, 500, 501, 511, 519, 520, 521, 551, 565, 602, 617, 620, 622, 624, 625, 627, 629, 631, 632, 635, 636, 650, 655, 659, 660, 664, 666, 668, 670, 671, 672, 675, 676, 679, 681, 687, 689, 690, 692, 698, 702, 710, 717, 726, 727, 728, 729, 734, 735, 750, 752, 754, 755, 756, 764, 779, 783, 794, 800, 801, 803, 806, 807, 809, 810, 811, 812, 813, 815, 816, 818, 819, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 838, 839, 840, 841, 842, 845, 846, 847, 849, 854, 863], "The": [0, 3, 5, 6, 7, 8, 9, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 128, 129, 131, 133, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 194, 195, 196, 201, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 424, 426, 436, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 463, 464, 465, 466, 470, 473, 474, 479, 480, 482, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 560, 562, 565, 566, 569, 571, 572, 575, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 766, 767, 772, 776, 777, 779, 780, 782, 783, 784, 789, 793, 794, 800, 801, 802, 803, 805, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "h2": [0, 1, 12, 14, 25], "tag": [0, 1, 12, 14, 25, 806, 807], "section": [0, 1, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 46, 52, 63, 75, 107, 368, 371, 401, 412, 460, 469, 488, 633, 737, 738, 739, 740, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 838, 839, 851, 852, 859, 862], "h3": [0, 1, 12, 14, 25], "subsect": [0, 1, 12, 14, 25, 805, 806, 807, 809, 814], "step": [0, 1, 12, 13, 14, 25, 26, 27, 38, 40, 41, 42, 52, 54, 71, 75, 77, 121, 132, 368, 371, 413, 415, 468, 603, 604, 607, 609, 610, 611, 617, 623, 628, 703, 704, 705, 784, 800, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 820, 825, 827, 830, 835, 838, 839, 840, 847, 856], "explan": [0, 1, 12, 14, 25, 805, 806, 807, 813, 818, 822, 827, 831, 837], "go": [0, 4, 11, 13, 17, 24, 27, 32, 47, 52, 75, 79, 368, 410, 414, 629, 717, 718, 800, 801, 803, 805, 806, 807, 808, 811, 812, 815, 817, 820, 821, 827, 828, 830, 831, 834, 838, 841, 852, 856, 857, 861, 863], "default": [0, 3, 5, 26, 27, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 191, 192, 194, 195, 199, 202, 203, 204, 206, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 575, 579, 580, 581, 583, 585, 587, 588, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 716, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 766, 767, 772, 776, 777, 779, 780, 781, 782, 783, 784, 785, 793, 794, 805, 806, 807, 811, 812, 815, 816, 817, 818, 819, 822, 823, 827, 830, 833, 835, 839, 843, 849, 856], "which": [0, 3, 8, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 95, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 148, 150, 152, 158, 160, 163, 165, 168, 175, 187, 192, 196, 201, 203, 206, 207, 208, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 316, 319, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 346, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 378, 380, 390, 391, 392, 393, 395, 396, 400, 401, 410, 411, 412, 414, 419, 422, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 479, 480, 481, 482, 483, 484, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 557, 558, 563, 564, 565, 566, 580, 581, 583, 585, 587, 588, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 647, 648, 650, 653, 654, 655, 657, 658, 660, 661, 662, 663, 665, 666, 668, 669, 670, 672, 673, 674, 675, 679, 681, 682, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 701, 702, 711, 712, 713, 714, 719, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 776, 777, 779, 780, 781, 782, 783, 784, 785, 789, 790, 796, 800, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863], "text": [0, 4, 7, 9, 40, 52, 53, 369, 370, 434, 442, 805, 807, 812, 817, 818], "paragraph": [0, 1, 12, 14, 25, 812], "p": [0, 1, 12, 14, 25, 38, 52, 53, 57, 75, 76, 80, 93, 134, 239, 369, 374, 418, 496, 529, 530, 617, 620, 622, 625, 629, 666, 682, 714, 780, 800, 806, 807, 808], "without": [0, 3, 9, 29, 38, 42, 45, 63, 69, 95, 575, 589, 622, 627, 629, 633, 694, 707, 737, 738, 739, 740, 764, 767, 793, 806, 807, 810, 811, 813, 814, 815, 816, 817, 819, 822, 823, 827, 830, 831, 833, 837, 838, 839, 841, 849, 853, 856, 857, 858, 862], "path": [0, 7, 8, 9, 21, 22, 23, 24, 41, 42, 761, 772, 788, 806, 812, 826, 827, 828, 842, 856], "correspond": [0, 3, 6, 8, 13, 26, 27, 41, 49, 51, 52, 53, 56, 59, 62, 63, 65, 69, 72, 74, 75, 79, 82, 88, 92, 95, 98, 148, 160, 163, 223, 273, 287, 325, 338, 339, 362, 365, 368, 369, 371, 374, 380, 390, 396, 407, 412, 418, 421, 422, 423, 440, 465, 466, 490, 491, 492, 495, 512, 513, 580, 602, 618, 620, 622, 624, 625, 627, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 655, 659, 660, 666, 673, 674, 694, 695, 726, 732, 733, 737, 738, 739, 740, 745, 746, 751, 752, 753, 754, 761, 764, 766, 793, 800, 805, 807, 810, 811, 813, 814, 815, 817, 818, 819, 822, 823, 825, 827, 830, 833, 835, 849, 850, 851, 856], "toctre": [0, 812], "index": [0, 40, 41, 42, 45, 48, 52, 53, 59, 62, 63, 64, 69, 71, 75, 76, 82, 85, 86, 87, 127, 134, 204, 307, 314, 315, 324, 325, 326, 362, 368, 369, 371, 376, 378, 380, 390, 396, 427, 429, 434, 457, 464, 467, 475, 477, 479, 482, 483, 486, 502, 503, 512, 521, 524, 542, 544, 565, 566, 570, 615, 617, 619, 622, 627, 629, 632, 633, 634, 694, 698, 708, 709, 710, 713, 714, 715, 721, 723, 732, 733, 735, 737, 738, 739, 741, 743, 765, 780, 794, 796, 813, 814, 819, 823, 824, 825, 826, 828, 830, 837, 856], "rst": [0, 823], "left": [0, 19, 29, 40, 41, 52, 57, 62, 64, 75, 80, 85, 87, 115, 116, 227, 242, 334, 349, 356, 365, 366, 368, 369, 371, 380, 402, 421, 426, 430, 437, 439, 465, 475, 516, 517, 518, 519, 520, 521, 534, 616, 620, 622, 625, 632, 634, 659, 660, 666, 675, 680, 732, 743, 764, 806, 807, 809, 812, 814, 815, 817, 820], "mai": [0, 50, 51, 52, 57, 63, 64, 73, 74, 80, 87, 97, 98, 121, 128, 139, 209, 235, 236, 242, 247, 255, 263, 264, 268, 269, 271, 286, 329, 330, 365, 396, 533, 569, 617, 619, 620, 622, 625, 633, 634, 635, 673, 682, 737, 738, 739, 740, 741, 744, 748, 749, 750, 752, 764, 794, 804, 805, 806, 807, 809, 813, 814, 815, 819, 820, 823, 824, 825, 827, 828, 830, 833, 836, 837, 839, 847, 863], "need": [0, 3, 6, 8, 15, 17, 23, 24, 26, 27, 40, 41, 42, 52, 53, 59, 75, 76, 82, 368, 369, 380, 390, 395, 396, 400, 421, 518, 529, 530, 551, 622, 624, 625, 627, 629, 650, 659, 687, 690, 717, 765, 800, 802, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 841, 842, 847, 849, 850, 852, 856, 857, 858, 862], "add": [0, 19, 29, 42, 44, 51, 52, 60, 67, 69, 74, 75, 83, 90, 97, 98, 356, 366, 368, 370, 371, 410, 447, 479, 561, 589, 620, 622, 624, 625, 630, 635, 650, 679, 725, 753, 761, 772, 780, 783, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 826, 827, 830, 831, 833, 835, 837, 841, 842, 852, 854, 856], "grid": [0, 42, 48, 134, 310, 362, 617, 817, 830], "item": [0, 4, 26, 27, 38, 40, 42, 47, 53, 67, 69, 71, 74, 75, 76, 129, 154, 191, 245, 261, 269, 335, 338, 351, 531, 541, 542, 546, 580, 581, 617, 618, 619, 622, 629, 636, 711, 712, 713, 714, 718, 723, 724, 758, 800, 805, 813, 815, 835, 837, 838, 840, 849], "card": [0, 52, 75, 353, 365, 861], "refer": [0, 5, 52, 59, 65, 66, 75, 77, 82, 88, 89, 127, 142, 240, 258, 307, 322, 351, 362, 365, 368, 369, 371, 396, 401, 412, 419, 441, 464, 603, 604, 617, 620, 623, 625, 627, 635, 636, 655, 657, 681, 694, 752, 754, 755, 756, 780, 800, 804, 805, 806, 807, 809, 810, 812, 814, 815, 822, 823, 824, 825, 826, 827, 828, 829, 830, 841, 842, 843, 856], "also": [0, 3, 4, 6, 8, 9, 11, 13, 17, 19, 21, 22, 24, 26, 27, 29, 31, 32, 33, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 163, 166, 167, 168, 170, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 368, 369, 371, 378, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 617, 618, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 716, 717, 718, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 779, 780, 789, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 838, 839, 840, 841, 842, 845, 846, 849, 850, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863], "look": [0, 5, 17, 26, 27, 40, 42, 45, 800, 803, 805, 806, 807, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 827, 828, 830, 831, 832, 833, 835, 837, 839, 840, 842, 845, 849, 852, 856], "document": [0, 17, 26, 59, 242, 329, 330, 365, 602, 620, 622, 698, 801, 802, 804, 807, 812, 814, 815, 817, 826, 827, 828, 830, 838, 840], "sphinx": [0, 802, 812], "design": [0, 9, 17, 26, 75, 242, 306, 311, 312, 362, 620, 800, 808, 812, 814, 815, 826, 827, 828, 829, 833, 835, 837, 841, 845, 846, 852, 854, 856, 859, 860, 861], "websit": [0, 44, 806, 809, 846], "alreadi": [1, 8, 18, 21, 22, 23, 24, 26, 27, 32, 40, 42, 45, 52, 57, 69, 75, 80, 231, 241, 268, 278, 288, 371, 380, 453, 454, 474, 509, 518, 620, 625, 662, 670, 793, 794, 800, 805, 806, 807, 811, 813, 815, 816, 822, 826, 827, 833, 841, 842, 856, 858, 863], "instal": [1, 5, 6, 8, 9, 11, 13, 18, 19, 20, 21, 22, 23, 24, 26, 27, 40, 42, 43, 44, 45, 802, 806, 807, 811, 812, 820, 821], "skip": [1, 4, 42, 52, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 369, 371, 391, 392, 393, 411, 427, 429, 434, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 475, 478, 480, 482, 483, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 629, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 765, 793, 812, 823, 830], "colab": [1, 4, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 40, 42, 44, 45], "manual": [1, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 629, 706, 716, 717, 805, 806, 807, 815, 821, 830, 839, 842], "do": [1, 3, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 38, 40, 42, 52, 53, 69, 75, 76, 235, 268, 277, 368, 370, 371, 380, 413, 447, 459, 518, 521, 551, 620, 622, 629, 706, 713, 716, 717, 718, 723, 766, 794, 800, 803, 805, 806, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 835, 837, 838, 839, 840, 841, 843, 847, 857, 862, 863], "run": [1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 40, 42, 43, 44, 52, 54, 75, 77, 374, 490, 492, 603, 604, 609, 623, 628, 703, 704, 705, 761, 762, 780, 781, 782, 783, 793, 800, 802, 805, 806, 808, 810, 811, 814, 816, 817, 819, 821, 822, 824, 827, 828, 835, 836, 837, 838, 839, 840, 841, 842, 849, 850, 851, 854, 856, 857, 858, 859, 861, 862, 863], "below": [1, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 31, 32, 33, 38, 41, 42, 43, 48, 52, 57, 75, 80, 88, 140, 141, 142, 242, 252, 275, 322, 323, 332, 362, 365, 371, 482, 617, 620, 625, 658, 679, 754, 801, 803, 805, 806, 808, 809, 813, 814, 815, 816, 817, 819, 820, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 849, 850, 851, 852, 854, 859, 861], "mind": [1, 11, 13, 17, 23, 26, 30, 805, 806, 810, 813, 830, 842, 850], "packag": [1, 3, 5, 7, 8, 11, 21, 22, 23, 24, 27, 40, 41, 42, 45, 792, 800, 803, 806, 814, 827, 841, 842, 856, 858], "avail": [1, 3, 5, 7, 21, 22, 24, 26, 27, 42, 53, 76, 191, 197, 199, 200, 211, 535, 619, 622, 625, 676, 765, 800, 806, 807, 813, 814, 815, 816, 818, 819, 827, 830, 833, 841, 842, 845, 849, 850, 851, 861, 862], "click": [1, 3, 42, 805, 806, 807, 814, 818, 820, 821, 836], "runtim": [1, 3, 4, 5, 6, 7, 8, 19, 26, 29, 40, 41, 808, 823, 830, 833, 856], "restart": [1, 3, 4, 5, 7, 40, 41, 806, 820], "pip": [1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 39, 40, 41, 42, 43, 44, 45, 803, 806, 812, 821], "q": [1, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 52, 56, 57, 75, 79, 80, 355, 365, 369, 380, 421, 521, 624, 625, 629, 650, 653, 659, 660, 672, 714, 806, 807, 808, 828, 841], "git": [1, 3, 4, 5, 7, 26, 40, 41, 42, 43, 800, 802, 804, 806, 807, 809, 812, 814, 820, 821, 830, 842], "clone": [1, 3, 5, 7, 26, 40, 42, 43, 800, 802, 807, 820, 842], "http": [1, 3, 4, 5, 6, 7, 8, 13, 21, 22, 23, 24, 26, 27, 40, 41, 42, 43, 44, 45, 51, 52, 74, 75, 77, 142, 150, 238, 248, 249, 264, 322, 329, 330, 362, 365, 368, 371, 380, 411, 482, 511, 603, 604, 617, 618, 620, 623, 625, 627, 635, 673, 674, 702, 752, 800, 802, 806, 807, 809, 812, 814, 815, 818, 820, 842, 850], "github": [1, 3, 4, 5, 7, 26, 40, 41, 42, 43, 44, 800, 802, 804, 807, 809, 812, 814, 815, 817, 818, 820, 821, 829, 830, 842, 845], "com": [1, 3, 4, 5, 7, 13, 26, 40, 41, 42, 43, 44, 800, 802, 806, 807, 809, 812, 814, 815, 820, 842], "unifyai": [1, 3, 5, 7, 26, 40, 41, 42, 43, 44, 800, 802, 806, 807, 812, 820, 842], "model": [1, 2, 3, 9, 10, 15, 16, 17, 43, 45, 235, 268, 370, 443, 620, 777, 781, 782, 800, 838, 839, 843, 849, 850, 854, 855, 856, 857, 858, 859, 860, 862, 863], "depth": [1, 3, 5, 7, 41, 48, 52, 56, 71, 75, 79, 136, 368, 371, 403, 461, 534, 546, 617, 622, 624, 642, 643, 807, 814, 838, 839, 840, 842], "1": [1, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 147, 148, 149, 150, 154, 158, 159, 160, 163, 168, 170, 175, 191, 192, 196, 200, 201, 203, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 319, 320, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 563, 565, 566, 570, 579, 580, 581, 582, 583, 585, 587, 588, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 767, 769, 772, 776, 779, 780, 781, 782, 783, 784, 785, 789, 793, 794, 800, 803, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 833, 834, 835, 837, 838, 839, 840, 841, 846, 847, 849, 850, 851], "from": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 82, 84, 85, 88, 89, 90, 92, 93, 95, 98, 121, 123, 126, 128, 129, 130, 131, 134, 135, 138, 142, 144, 150, 168, 174, 175, 191, 196, 201, 207, 208, 234, 242, 243, 270, 274, 275, 282, 286, 306, 307, 313, 316, 322, 324, 325, 326, 333, 336, 339, 340, 342, 343, 355, 359, 362, 365, 367, 368, 369, 370, 371, 375, 380, 391, 392, 393, 407, 412, 413, 430, 437, 442, 443, 447, 457, 460, 469, 474, 480, 482, 483, 485, 487, 488, 497, 498, 499, 500, 501, 512, 513, 533, 541, 542, 544, 564, 575, 585, 602, 604, 605, 609, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 638, 646, 647, 655, 658, 675, 679, 680, 681, 688, 691, 694, 697, 703, 704, 705, 707, 718, 719, 720, 726, 727, 728, 729, 733, 736, 737, 739, 745, 746, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 766, 767, 772, 777, 779, 780, 781, 782, 784, 789, 794, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863], "repositori": [1, 3, 5, 7, 802, 805, 806, 807, 808, 809, 812, 820, 829, 847], "cd": [1, 3, 5, 7, 26, 43, 800, 802, 806, 807, 820, 842], "here": [1, 3, 9, 12, 14, 17, 22, 25, 26, 27, 38, 40, 41, 42, 43, 45, 75, 278, 449, 620, 800, 803, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 817, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 835, 836, 837, 838, 839, 840, 841, 849, 850, 851, 856, 857], "normal": [1, 3, 7, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 52, 60, 61, 75, 83, 84, 92, 93, 352, 365, 368, 374, 380, 389, 390, 395, 396, 399, 400, 401, 411, 412, 490, 491, 492, 493, 494, 495, 496, 511, 514, 627, 630, 631, 688, 698, 725, 726, 728, 779, 780, 783, 800, 805, 826, 827, 833, 838, 849, 851, 854], "resnet": [2, 8, 15, 26, 849, 850], "imag": [2, 3, 6, 8, 11, 15, 23, 26, 27, 40, 41, 42, 43, 44, 45, 51, 52, 56, 74, 75, 79, 97, 215, 216, 217, 218, 221, 224, 233, 236, 238, 240, 249, 250, 251, 256, 258, 271, 278, 279, 281, 282, 286, 368, 386, 387, 403, 404, 405, 407, 534, 620, 622, 624, 637, 638, 639, 640, 641, 644, 645, 646, 780, 800, 806, 820, 833, 835, 836, 838, 840, 842, 849, 850, 856], "classif": [2, 3, 7, 9, 15, 40, 800, 856], "acceler": [2, 15, 800, 815, 827, 854, 858, 859, 860, 861], "pytorch": [2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16, 24, 26, 27, 38, 45, 278, 329, 330, 365, 620, 784, 800, 804, 805, 810, 815, 816, 819, 822, 823, 826, 827, 828, 833, 835, 840, 841, 843, 846, 847, 849, 850, 857, 859, 860, 862, 863], "jax": [2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 38, 40, 44, 46, 51, 52, 53, 63, 68, 74, 75, 76, 105, 106, 107, 108, 109, 110, 111, 112, 113, 286, 290, 294, 295, 297, 342, 360, 365, 380, 521, 551, 583, 602, 614, 620, 622, 633, 737, 738, 739, 740, 772, 776, 789, 800, 803, 804, 805, 806, 807, 809, 811, 815, 816, 819, 820, 822, 825, 826, 827, 828, 830, 831, 833, 835, 837, 840, 841, 846, 847, 849, 850, 851, 857, 859, 862, 863], "convert": [2, 5, 6, 8, 9, 11, 13, 15, 16, 18, 20, 23, 24, 26, 27, 28, 30, 32, 40, 43, 45, 47, 48, 51, 69, 70, 71, 74, 92, 122, 123, 135, 145, 146, 188, 189, 190, 191, 202, 210, 214, 234, 274, 371, 376, 452, 453, 454, 502, 567, 584, 586, 587, 588, 590, 617, 618, 619, 620, 622, 625, 629, 683, 707, 718, 719, 761, 789, 793, 800, 805, 810, 811, 824, 825, 827, 830, 832, 835, 841, 843, 847, 850, 854, 855, 862], "them": [2, 3, 6, 8, 11, 13, 15, 26, 27, 32, 369, 436, 528, 564, 622, 764, 780, 800, 802, 805, 807, 809, 810, 811, 812, 813, 814, 815, 819, 821, 824, 826, 827, 828, 830, 832, 835, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 858, 862], "faster": [2, 3, 6, 8, 9, 15, 26, 27, 43, 45, 52, 57, 75, 80, 369, 439, 625, 675, 802, 804, 812, 843, 858, 861], "infer": [2, 6, 8, 9, 15, 19, 29, 31, 32, 41, 43, 45, 48, 52, 53, 56, 59, 71, 75, 76, 79, 82, 121, 123, 126, 130, 131, 135, 138, 144, 153, 154, 155, 156, 157, 306, 307, 368, 375, 403, 499, 545, 579, 617, 618, 622, 624, 627, 647, 694, 789, 790, 808, 811, 815, 816, 830, 835, 840, 850, 854, 855, 858, 860], "mmpretrain": [2, 15], "segment": [2, 15, 52, 75, 324, 325, 326, 362, 812, 817], "unet": [2, 15], "alexnet": [2, 15], "In": [2, 3, 4, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 45, 50, 52, 53, 59, 73, 75, 76, 82, 92, 93, 202, 209, 210, 214, 218, 235, 236, 242, 250, 251, 268, 271, 277, 279, 368, 371, 374, 391, 392, 393, 413, 452, 453, 454, 460, 462, 464, 465, 466, 467, 469, 473, 479, 480, 488, 490, 492, 524, 544, 551, 569, 619, 620, 622, 625, 627, 631, 673, 690, 691, 692, 694, 696, 697, 699, 701, 729, 800, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 837, 838, 839, 840, 841, 845, 847, 849, 850, 851, 852, 854, 856, 857, 859, 862], "we": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 43, 44, 45, 52, 57, 58, 59, 67, 75, 80, 81, 90, 92, 93, 113, 357, 367, 371, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 484, 488, 534, 544, 583, 605, 606, 608, 613, 614, 622, 623, 625, 626, 627, 668, 684, 690, 691, 692, 694, 696, 697, 699, 701, 776, 782, 789, 794, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 856, 857, 861, 862], "show": [2, 3, 4, 7, 15, 21, 26, 27, 28, 29, 31, 38, 40, 42, 43, 568, 577, 599, 622, 800, 805, 806, 807, 812, 814, 817, 821, 826, 827, 830, 832, 841, 849, 856], "how": [2, 3, 4, 5, 6, 8, 11, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 38, 41, 44, 45, 46, 51, 52, 68, 74, 75, 95, 105, 106, 107, 108, 109, 110, 111, 112, 113, 235, 268, 286, 290, 294, 295, 297, 360, 370, 371, 442, 457, 482, 483, 614, 620, 776, 779, 780, 781, 782, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 845, 847, 852, 856], "written": [2, 3, 4, 15, 17, 26, 27, 40, 53, 371, 463, 806, 809, 810, 818, 821, 822, 826, 827, 831, 835, 837, 840, 841, 845, 850, 854, 856, 860, 862, 863], "xgboost": [2, 15], "video": [3, 5, 6, 7, 8, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 800, 801, 806, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 842, 854], "tutori": [3, 5, 6, 7, 8, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 800, 807, 827, 842], "nativ": [3, 4, 8, 17, 21, 22, 23, 24, 26, 27, 47, 48, 49, 50, 53, 70, 73, 76, 97, 101, 135, 145, 146, 152, 153, 154, 155, 156, 157, 171, 174, 189, 190, 191, 192, 202, 210, 214, 551, 553, 557, 564, 569, 586, 617, 618, 619, 622, 761, 772, 777, 789, 800, 803, 805, 815, 816, 819, 820, 823, 824, 826, 827, 828, 830, 835, 837, 838, 843, 849, 850, 851, 854, 863], "integr": [3, 4, 11, 13, 20, 27, 30, 49, 51, 52, 72, 74, 75, 147, 287, 348, 365, 380, 514, 618, 620, 800, 804, 806, 808, 824, 850, 854, 856, 858, 859, 860], "three": [3, 4, 15, 21, 31, 32, 42, 52, 134, 306, 362, 371, 454, 617, 806, 807, 813, 814, 815, 817, 827, 830, 833, 834, 835, 857, 862], "major": [3, 4, 632, 735, 815, 816, 828, 830, 841, 846, 853, 856], "ml": [3, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 45, 800, 801, 804, 827, 834, 835, 836, 838, 839, 840, 844, 846, 847, 850, 852, 853, 854, 855, 856, 859, 861, 863], "framework": [3, 4, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 33, 40, 42, 44, 47, 53, 165, 187, 197, 200, 211, 532, 548, 552, 583, 586, 618, 619, 622, 629, 708, 759, 761, 765, 772, 777, 784, 789, 790, 800, 803, 805, 806, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 822, 823, 824, 826, 827, 830, 831, 833, 834, 835, 837, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 860], "sinc": [3, 5, 7, 23, 24, 26, 27, 40, 42, 52, 75, 93, 365, 800, 802, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 819, 826, 827, 841, 846, 856, 862], "want": [3, 5, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 39, 40, 42, 52, 67, 75, 90, 235, 268, 371, 462, 620, 782, 800, 801, 802, 805, 806, 807, 812, 814, 816, 819, 821, 823, 824, 825, 826, 830, 833, 838, 839, 840, 841, 842, 846, 850], "after": [3, 4, 5, 6, 7, 8, 26, 27, 41, 52, 53, 54, 56, 60, 69, 75, 76, 77, 79, 83, 181, 282, 298, 302, 350, 360, 365, 368, 369, 371, 390, 391, 392, 393, 410, 414, 433, 463, 474, 551, 604, 607, 609, 610, 611, 618, 620, 622, 623, 624, 629, 630, 637, 638, 639, 640, 642, 644, 646, 647, 717, 725, 784, 789, 800, 805, 806, 807, 809, 811, 812, 814, 815, 817, 819, 822, 825, 828, 830, 834, 842, 849, 850, 856], "first": [3, 4, 5, 7, 11, 17, 19, 20, 21, 23, 26, 27, 29, 30, 31, 40, 43, 44, 45, 48, 51, 52, 57, 59, 61, 62, 63, 65, 71, 74, 75, 76, 80, 82, 84, 86, 88, 92, 93, 97, 98, 117, 118, 132, 133, 142, 173, 181, 191, 218, 223, 225, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 264, 265, 268, 271, 273, 284, 285, 296, 306, 307, 322, 324, 325, 326, 328, 340, 342, 343, 344, 350, 354, 355, 360, 362, 365, 368, 369, 370, 371, 378, 380, 390, 420, 421, 422, 424, 428, 448, 458, 460, 464, 471, 474, 476, 477, 480, 487, 498, 500, 504, 512, 513, 514, 521, 526, 616, 617, 618, 619, 620, 622, 624, 625, 627, 628, 629, 632, 633, 634, 635, 650, 655, 658, 659, 660, 662, 665, 670, 672, 673, 675, 677, 679, 681, 694, 695, 698, 699, 703, 704, 705, 706, 707, 716, 717, 719, 731, 732, 733, 737, 738, 739, 742, 743, 745, 746, 761, 779, 780, 781, 782, 784, 789, 800, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 816, 817, 821, 822, 823, 824, 826, 827, 830, 833, 835, 837, 838, 840, 842, 845, 846, 849, 850, 854, 856, 857, 861], "notebook": [3, 4, 5, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 32, 41, 782, 800], "automat": [3, 5, 7, 24, 26, 27, 32, 800, 805, 806, 807, 808, 811, 812, 814, 815, 821, 823, 826, 830, 833, 834, 836, 839, 840, 842, 843, 847, 856, 859, 863], "sure": [3, 5, 6, 7, 8, 9, 26, 40, 805, 806, 807, 809, 814, 819, 820, 827, 828, 830, 833, 842], "gpu": [3, 4, 5, 6, 7, 8, 9, 40, 42, 44, 45, 191, 193, 194, 197, 200, 202, 204, 206, 207, 210, 212, 214, 619, 800, 806, 807, 814, 816, 837, 842, 854, 856, 859, 860, 861], "enabl": [3, 4, 5, 6, 7, 8, 9, 21, 22, 24, 41, 52, 57, 69, 80, 98, 368, 370, 390, 446, 569, 622, 625, 668, 782, 800, 806, 807, 810, 813, 815, 823, 824, 825, 826, 827, 830, 831, 834, 836, 838, 840, 841, 843, 846, 849, 854, 855, 856, 857, 858, 859, 862, 863], "dm": [3, 4, 5, 6, 8, 26, 27, 38, 40], "haiku": [3, 4, 5, 6, 8, 24, 26, 27, 38, 40, 44, 777, 800, 840, 847, 850, 856], "exit": [3, 5, 7, 26, 27, 816], "download": [3, 7, 11, 13, 26, 27, 41, 42, 45, 802, 806, 812, 830, 849, 850], "imagenet": [3, 13, 41, 43, 800], "class": [3, 5, 7, 9, 11, 13, 17, 26, 27, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 129, 138, 144, 160, 163, 176, 178, 179, 238, 275, 332, 353, 365, 379, 380, 387, 388, 421, 517, 518, 525, 534, 538, 551, 561, 583, 617, 618, 619, 620, 622, 624, 625, 626, 629, 630, 645, 649, 653, 659, 670, 674, 675, 677, 684, 700, 707, 718, 725, 740, 747, 751, 752, 761, 762, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 793, 798, 800, 805, 811, 812, 813, 815, 816, 817, 818, 822, 824, 825, 828, 829, 830, 833, 835, 836, 838, 839, 840, 843, 849, 850, 854, 856, 857, 863], "preprocess": [3, 7, 9, 26, 27, 40, 43, 849], "wget": [3, 5, 7, 40, 41, 44, 806], "raw": [3, 5, 6, 7, 8, 23, 26, 27, 40, 43, 44, 69, 800, 818, 850, 857], "githubusercont": [3, 5, 7, 40, 44], "hub": [3, 5, 7, 40, 43, 45], "master": [3, 5, 7, 18, 19, 20, 28, 29, 30, 31, 32, 33, 40, 42, 43, 44, 814, 856], "imagenet_class": [3, 7], "txt": [3, 7, 41, 53, 806, 809, 812], "r": [3, 7, 40, 41, 52, 57, 69, 75, 80, 92, 93, 342, 357, 365, 367, 605, 623, 625, 627, 672, 701, 806, 807, 808, 825, 828], "f": [3, 4, 6, 7, 26, 27, 39, 40, 42, 52, 59, 75, 82, 296, 313, 360, 362, 371, 464, 485, 627, 629, 694, 709, 713, 714, 715, 718, 723, 724, 800, 801, 807, 808, 813, 814, 819, 831, 835, 837, 838, 847, 852], "categori": [3, 7, 805, 809, 810, 813, 815, 819, 827, 831, 834], "strip": [3, 7, 19, 29, 846], "readlin": [3, 7, 41], "cat": [3, 7, 41, 828, 833, 835, 840, 849, 850], "jpg": [3, 5, 6, 7, 8, 23, 26, 27, 42, 43, 800, 850], "filenam": [3, 5, 7, 26, 27, 40, 42, 45, 53, 782, 788, 838], "3": [3, 5, 6, 7, 8, 9, 11, 13, 17, 20, 21, 22, 23, 24, 26, 27, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 127, 129, 131, 132, 134, 135, 136, 137, 138, 142, 143, 144, 147, 148, 149, 150, 154, 158, 160, 168, 170, 175, 189, 191, 192, 203, 206, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 324, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 386, 387, 388, 389, 391, 394, 395, 396, 399, 400, 404, 405, 406, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 433, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 493, 494, 495, 496, 499, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 565, 566, 579, 580, 581, 585, 588, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 767, 780, 793, 794, 800, 803, 805, 806, 809, 810, 811, 813, 814, 815, 817, 819, 820, 823, 825, 828, 830, 835, 837, 838, 839, 840, 849, 850, 863], "import": [3, 6, 8, 11, 13, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 43, 44, 45, 52, 63, 67, 71, 75, 90, 189, 190, 194, 204, 206, 292, 301, 380, 511, 546, 562, 619, 622, 628, 633, 704, 705, 740, 772, 789, 790, 800, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 824, 825, 826, 827, 828, 829, 830, 831, 835, 837, 838, 840, 841, 842, 846, 849, 850, 851, 852, 854, 856, 859, 860, 862], "torchvis": [3, 6, 7, 40, 847], "transform": [3, 4, 6, 7, 8, 23, 26, 27, 40, 41, 43, 52, 56, 75, 79, 368, 369, 389, 390, 395, 396, 399, 400, 401, 411, 412, 415, 430, 624, 648, 764, 767, 780, 800, 824, 830, 840, 843, 849, 850, 854, 856, 857, 858], "pil": [3, 5, 6, 7, 8, 23, 26, 27, 41, 42, 43, 800, 850], "numpi": [3, 4, 5, 6, 8, 11, 13, 18, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 39, 40, 42, 43, 44, 45, 51, 52, 53, 65, 74, 75, 76, 142, 171, 189, 219, 279, 292, 301, 322, 362, 380, 511, 518, 527, 551, 580, 583, 587, 617, 618, 619, 620, 622, 635, 747, 759, 761, 772, 789, 793, 794, 800, 804, 805, 806, 807, 809, 810, 811, 814, 815, 816, 819, 820, 822, 826, 828, 830, 831, 833, 835, 837, 840, 842, 843, 845, 846, 849, 850, 851, 858, 863], "np": [3, 4, 5, 6, 8, 11, 13, 18, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 38, 39, 40, 41, 42, 43, 45, 48, 51, 52, 74, 75, 76, 122, 123, 124, 135, 171, 248, 252, 292, 301, 368, 369, 395, 400, 416, 580, 617, 618, 620, 622, 629, 712, 761, 789, 793, 794, 800, 805, 810, 815, 816, 819, 822, 826, 827, 828, 830, 831, 833, 835, 837, 838, 840, 843, 851], "warn": [3, 4, 5, 7, 8, 9, 21, 22, 23, 24, 40, 41, 42, 45, 797, 806, 807, 832, 849, 850, 851], "time": [3, 4, 6, 8, 24, 26, 27, 32, 40, 42, 43, 44, 52, 54, 57, 63, 75, 77, 86, 92, 93, 129, 335, 365, 368, 369, 371, 380, 396, 401, 413, 415, 434, 441, 474, 480, 511, 604, 609, 617, 623, 624, 625, 627, 628, 632, 633, 647, 649, 665, 700, 703, 704, 705, 732, 733, 737, 738, 780, 781, 782, 805, 806, 807, 809, 811, 813, 814, 815, 817, 820, 822, 823, 824, 826, 827, 830, 831, 835, 838, 840, 841, 842, 845, 846, 847, 849, 850, 854, 856, 857, 860, 861, 862], "filterwarn": [3, 4], "ignor": [3, 4, 39, 47, 48, 52, 69, 75, 134, 368, 369, 371, 380, 391, 392, 393, 422, 436, 476, 477, 481, 519, 617, 624, 625, 629, 650, 664, 717, 718, 784, 806, 812, 814, 817, 830, 841, 862], "compos": [3, 6, 7, 26, 27, 40, 52, 75, 368, 382, 383, 384, 806, 813, 827, 830, 849, 851, 856, 863], "resiz": [3, 5, 6, 7, 40, 41, 52, 75, 368, 403, 833], "256": [3, 5, 7, 51, 76, 278, 279, 581, 624, 639, 641, 764], "centercrop": [3, 7], "224": [3, 7, 11, 13, 26, 27, 40, 41, 43, 800, 850], "totensor": [3, 6, 7, 40], "mean": [3, 6, 7, 8, 9, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42, 52, 53, 56, 58, 59, 61, 65, 67, 69, 71, 75, 76, 79, 81, 82, 84, 88, 90, 92, 129, 208, 324, 334, 362, 365, 368, 369, 370, 371, 374, 375, 380, 396, 401, 419, 430, 442, 443, 444, 445, 446, 447, 448, 449, 459, 464, 474, 490, 492, 498, 517, 518, 535, 605, 606, 608, 613, 617, 619, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 639, 641, 642, 643, 645, 646, 647, 657, 684, 685, 686, 694, 703, 704, 705, 712, 727, 728, 764, 766, 767, 779, 780, 783, 800, 806, 807, 808, 809, 811, 813, 815, 816, 817, 823, 825, 826, 827, 830, 831, 833, 835, 837, 838, 839, 840, 841, 843, 850, 851, 853, 856], "0": [3, 4, 5, 6, 7, 8, 9, 11, 13, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 124, 127, 129, 130, 131, 132, 133, 136, 138, 140, 141, 142, 143, 144, 147, 148, 149, 150, 158, 160, 163, 164, 168, 170, 175, 188, 191, 193, 196, 201, 202, 203, 204, 206, 207, 208, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 404, 405, 406, 407, 410, 411, 412, 414, 417, 418, 419, 421, 422, 423, 426, 427, 429, 430, 431, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 457, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 528, 529, 530, 533, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 561, 563, 565, 566, 570, 575, 579, 580, 581, 583, 585, 587, 588, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 767, 769, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 800, 803, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 825, 826, 827, 828, 830, 831, 835, 837, 838, 839, 840, 841, 849, 850], "485": [3, 7, 40], "456": [3, 7, 40, 830], "406": [3, 7, 40, 52, 75, 389, 529, 622], "std": [3, 6, 7, 8, 9, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 41, 56, 61, 65, 79, 84, 88, 375, 498, 624, 631, 635, 639, 641, 642, 643, 645, 646, 727, 728, 800, 817, 851], "229": [3, 7, 40, 274, 620], "225": [3, 7, 40, 42, 229, 620], "torch_img": [3, 5, 7], "unsqueez": [3, 5, 6, 7], "img": [3, 5, 7, 23, 26, 27, 40, 41, 42, 44, 800, 838, 850], "4": [3, 4, 5, 6, 7, 8, 9, 11, 17, 19, 20, 21, 22, 23, 24, 26, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 105, 106, 107, 108, 109, 110, 112, 113, 121, 122, 123, 124, 127, 129, 131, 132, 133, 134, 135, 136, 138, 142, 144, 148, 149, 150, 158, 160, 163, 168, 170, 175, 192, 193, 201, 206, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 314, 315, 322, 324, 329, 330, 332, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 386, 387, 388, 389, 391, 392, 394, 395, 396, 399, 400, 404, 405, 406, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 430, 436, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 457, 458, 459, 460, 461, 464, 465, 466, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 487, 488, 489, 493, 494, 495, 496, 499, 501, 502, 504, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 544, 547, 549, 550, 551, 558, 565, 566, 580, 581, 582, 583, 585, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 767, 779, 780, 784, 793, 794, 800, 803, 805, 806, 811, 812, 813, 814, 815, 817, 820, 825, 828, 830, 833, 835, 837, 838, 839, 840, 847, 849, 856, 862, 863], "ipython": [3, 5, 7, 21, 22, 23, 24, 26, 27, 45], "displai": [3, 5, 7, 23, 26, 27, 40, 41, 42, 44, 45, 806, 812, 814, 819, 830, 838], "end": [3, 5, 40, 41, 52, 75, 121, 223, 279, 346, 365, 368, 370, 371, 415, 442, 464, 474, 476, 477, 617, 620, 794, 800, 806, 807, 811, 814, 820, 826, 831, 833, 834, 841, 854, 859], "see": [3, 4, 6, 8, 9, 18, 19, 24, 26, 27, 28, 29, 33, 38, 39, 45, 46, 49, 51, 52, 57, 62, 63, 65, 66, 68, 74, 75, 80, 85, 88, 89, 92, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 128, 132, 139, 142, 149, 168, 175, 218, 223, 225, 227, 228, 229, 230, 235, 236, 240, 242, 246, 247, 254, 255, 258, 260, 262, 264, 265, 268, 271, 273, 277, 284, 286, 289, 290, 294, 295, 297, 322, 329, 330, 360, 362, 365, 369, 370, 371, 418, 444, 482, 614, 617, 618, 620, 625, 632, 633, 635, 636, 655, 668, 671, 674, 681, 682, 733, 737, 738, 739, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 776, 800, 801, 803, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 827, 828, 830, 833, 835, 837, 838, 841, 845, 852], "5": [3, 4, 5, 6, 7, 8, 9, 11, 19, 21, 22, 23, 24, 26, 27, 38, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 92, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 121, 122, 123, 129, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 148, 149, 150, 154, 158, 160, 168, 170, 175, 192, 201, 206, 209, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 324, 327, 329, 330, 332, 334, 336, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 376, 378, 380, 386, 387, 388, 389, 391, 392, 394, 395, 396, 399, 400, 404, 405, 406, 409, 410, 411, 412, 414, 417, 420, 421, 423, 424, 426, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 464, 465, 468, 469, 470, 473, 474, 479, 480, 481, 482, 483, 484, 488, 489, 494, 495, 496, 499, 501, 502, 504, 509, 511, 512, 513, 514, 515, 516, 518, 521, 527, 528, 529, 530, 533, 534, 535, 536, 538, 541, 542, 544, 547, 549, 550, 551, 565, 566, 570, 580, 581, 582, 583, 585, 589, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 765, 766, 767, 780, 793, 794, 800, 805, 806, 807, 809, 811, 813, 814, 815, 817, 819, 820, 822, 825, 828, 830, 837, 838, 839, 850], "set_default_devic": [3, 4, 5, 6, 7, 8, 212, 619, 816], "set_soft_device_mod": [3, 9, 213, 619, 816], "true": [3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 20, 21, 23, 24, 26, 27, 31, 32, 33, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 151, 158, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 175, 187, 191, 192, 194, 195, 199, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 366, 368, 369, 370, 371, 374, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 565, 566, 567, 570, 573, 574, 576, 577, 579, 580, 581, 583, 585, 587, 588, 590, 595, 596, 598, 599, 601, 604, 605, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 716, 717, 718, 719, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 766, 767, 780, 781, 782, 783, 784, 786, 789, 791, 793, 794, 798, 800, 803, 806, 811, 813, 814, 815, 816, 817, 819, 820, 822, 823, 824, 826, 827, 828, 830, 832, 833, 835, 838, 839, 840, 849, 850], "set_backend": [3, 4, 5, 7, 9, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 39, 41, 42, 43, 51, 53, 67, 74, 76, 162, 171, 189, 190, 204, 206, 211, 219, 527, 551, 618, 619, 622, 628, 704, 705, 789, 800, 809, 811, 815, 816, 823, 824, 825, 835, 837, 840, 849, 850, 851], "ivy_model": [3, 4, 5, 7, 43], "ivy_alexnet": 3, "order": [3, 20, 30, 32, 40, 43, 45, 48, 52, 53, 56, 57, 59, 63, 64, 69, 75, 79, 80, 82, 86, 87, 92, 97, 98, 122, 123, 134, 142, 223, 242, 285, 322, 342, 362, 365, 368, 369, 371, 374, 378, 413, 418, 421, 422, 423, 424, 425, 429, 433, 435, 438, 441, 464, 465, 466, 471, 472, 484, 490, 491, 492, 495, 504, 617, 620, 624, 625, 627, 628, 632, 633, 634, 638, 639, 640, 641, 642, 643, 646, 659, 660, 666, 675, 676, 680, 682, 691, 694, 703, 704, 735, 737, 738, 739, 740, 741, 743, 744, 761, 783, 785, 794, 800, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 838, 840, 841, 845, 852, 855, 856, 857, 859, 862], "quick": [3, 15, 27, 807, 808, 828, 839], "call": [3, 6, 11, 13, 17, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 40, 44, 52, 67, 72, 75, 90, 92, 98, 117, 167, 168, 208, 369, 380, 433, 518, 569, 575, 589, 605, 606, 608, 616, 619, 622, 623, 625, 629, 673, 706, 712, 716, 717, 761, 772, 780, 781, 782, 784, 789, 794, 800, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 837, 838, 839, 840, 841, 846, 849, 850, 851, 856, 857, 860], "trace_graph": [3, 4, 5, 7, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 43, 782, 800, 835, 840, 848], "take": [3, 7, 17, 24, 26, 27, 32, 38, 40, 43, 52, 57, 59, 65, 75, 82, 92, 117, 118, 120, 136, 275, 282, 296, 360, 368, 369, 371, 387, 395, 400, 405, 415, 424, 436, 457, 464, 483, 512, 513, 616, 617, 620, 624, 625, 627, 628, 650, 665, 669, 694, 705, 745, 764, 772, 779, 780, 793, 800, 801, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 826, 827, 828, 830, 833, 835, 837, 839, 840, 841, 842, 847, 849, 850, 853, 854, 862], "moment": [3, 52, 54, 75, 77, 369, 425, 603, 604, 609, 623, 784, 805, 811, 841, 849, 850], "one": [3, 6, 8, 11, 13, 15, 16, 19, 20, 23, 24, 26, 27, 29, 30, 42, 43, 44, 48, 52, 53, 56, 57, 59, 62, 63, 65, 69, 71, 74, 75, 76, 77, 79, 80, 82, 83, 85, 86, 87, 88, 92, 121, 124, 134, 136, 137, 138, 148, 150, 208, 229, 235, 242, 243, 260, 266, 267, 268, 287, 296, 306, 309, 310, 328, 334, 337, 340, 341, 344, 345, 346, 348, 349, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 380, 389, 391, 395, 396, 399, 400, 403, 411, 416, 418, 427, 434, 448, 452, 453, 454, 458, 464, 465, 466, 471, 473, 478, 481, 490, 491, 492, 497, 502, 512, 513, 516, 517, 518, 519, 520, 521, 523, 561, 565, 566, 568, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 617, 618, 619, 620, 622, 623, 624, 625, 627, 630, 632, 633, 635, 638, 639, 640, 641, 642, 643, 646, 662, 665, 666, 670, 672, 681, 682, 690, 691, 692, 695, 697, 701, 725, 732, 735, 737, 738, 739, 740, 745, 747, 764, 766, 783, 786, 789, 794, 797, 800, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 837, 838, 840, 841, 842, 843, 846, 847, 850, 856, 857, 859, 862], "cost": [3, 54, 77, 603, 604, 607, 609, 610, 611, 623, 628, 703, 704, 705, 794, 815, 833, 854], "arg": [3, 5, 6, 7, 11, 13, 21, 22, 24, 26, 27, 31, 32, 33, 44, 47, 69, 91, 101, 117, 198, 208, 589, 616, 617, 619, 622, 759, 761, 776, 777, 780, 781, 782, 786, 789, 793, 798, 800, 810, 815, 816, 819, 825, 826, 827, 833, 835, 839, 849, 850, 851], "asarrai": [3, 4, 5, 6, 7, 41, 48, 52, 53, 64, 71, 75, 76, 87, 122, 378, 503, 504, 534, 545, 549, 550, 580, 581, 617, 622, 624, 633, 634, 638, 738, 742, 819, 824, 827, 828], "cuda": [3, 4, 5, 6, 7, 8, 9, 17, 26, 41, 42, 45, 48, 52, 61, 71, 75, 84, 132, 133, 136, 188, 189, 190, 204, 206, 375, 497, 498, 500, 501, 617, 619, 625, 631, 676, 726, 727, 728, 729, 779, 780, 781, 782, 783, 784, 785, 800, 835, 841, 843, 861], "7": [3, 5, 6, 7, 8, 9, 11, 13, 18, 19, 21, 22, 23, 24, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 107, 108, 109, 110, 121, 122, 123, 132, 135, 136, 154, 160, 163, 193, 215, 218, 221, 225, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 241, 242, 245, 246, 247, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 278, 279, 280, 282, 285, 286, 288, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 312, 313, 324, 328, 332, 334, 335, 342, 343, 344, 346, 348, 349, 356, 360, 362, 365, 366, 368, 369, 370, 371, 376, 380, 386, 387, 388, 389, 394, 395, 399, 400, 404, 409, 410, 411, 412, 414, 417, 420, 431, 443, 444, 445, 446, 448, 449, 452, 453, 454, 458, 460, 464, 469, 470, 473, 474, 479, 480, 482, 483, 485, 488, 489, 499, 501, 502, 509, 512, 513, 515, 516, 521, 527, 529, 530, 534, 535, 538, 549, 550, 551, 558, 565, 566, 580, 583, 603, 604, 606, 607, 608, 609, 610, 611, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 643, 645, 646, 647, 648, 653, 655, 656, 657, 658, 660, 661, 662, 665, 667, 670, 672, 673, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 690, 691, 696, 698, 699, 701, 706, 707, 714, 718, 725, 726, 727, 728, 729, 731, 736, 737, 739, 741, 742, 744, 745, 746, 747, 749, 751, 753, 754, 764, 806, 807, 811, 813, 814, 817, 823, 826, 830], "output": [3, 4, 5, 7, 17, 23, 24, 26, 27, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 174, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 316, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 365, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 409, 411, 412, 413, 415, 416, 418, 419, 420, 422, 424, 427, 428, 431, 432, 433, 434, 436, 437, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 459, 462, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 528, 529, 530, 534, 535, 536, 538, 542, 551, 558, 565, 566, 567, 590, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 719, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 764, 779, 780, 793, 794, 800, 802, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 837, 839, 840, 841, 843, 849, 850, 857], "softmax": [3, 7, 11, 24, 26, 27, 42, 46, 56, 67, 68, 79, 370, 444, 614, 624, 650, 653, 776, 800], "pass": [3, 5, 6, 7, 8, 9, 11, 13, 17, 24, 26, 27, 33, 39, 40, 42, 44, 45, 51, 52, 67, 69, 74, 75, 90, 98, 117, 118, 120, 152, 174, 189, 208, 223, 269, 368, 370, 371, 374, 375, 380, 413, 444, 464, 490, 492, 497, 517, 518, 551, 616, 618, 619, 620, 622, 628, 703, 704, 759, 761, 765, 772, 777, 781, 782, 784, 785, 789, 793, 798, 800, 803, 805, 807, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 841, 849, 850, 851, 854], "argsort": [3, 7, 64, 87, 634, 743, 827], "descend": [3, 7, 64, 87, 625, 634, 675, 676, 741, 744], "top": [3, 7, 10, 15, 24, 26, 27, 40, 41, 52, 59, 75, 313, 362, 370, 371, 442, 484, 534, 622, 688, 800, 806, 807, 815, 820, 827, 829, 830, 833, 838, 839, 856, 860], "logit": [3, 4, 5, 7, 40, 41, 42, 43, 52, 58, 75, 81, 360, 375, 497, 500, 626, 684, 686, 776, 800, 849], "gather": [3, 7, 40, 52, 53, 75, 76, 324, 325, 326, 362, 542, 544, 622, 863], "print": [3, 4, 6, 7, 9, 11, 13, 17, 18, 20, 24, 26, 27, 28, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 147, 148, 149, 150, 152, 158, 159, 160, 161, 162, 165, 167, 168, 170, 175, 187, 188, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 303, 304, 305, 307, 314, 315, 322, 324, 328, 329, 330, 332, 346, 347, 352, 356, 360, 362, 365, 368, 369, 370, 371, 374, 380, 386, 387, 388, 389, 391, 392, 394, 396, 399, 401, 404, 405, 406, 409, 411, 412, 417, 420, 422, 424, 425, 433, 440, 443, 444, 445, 446, 447, 448, 449, 455, 457, 459, 470, 474, 479, 480, 482, 483, 484, 489, 493, 494, 496, 511, 512, 513, 514, 521, 523, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 561, 562, 564, 565, 566, 570, 571, 572, 575, 578, 579, 580, 581, 583, 585, 587, 588, 589, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 658, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 789, 793, 794, 798, 800, 806, 807, 813, 815, 817, 828, 830, 832, 835, 837, 838, 839, 849, 851], "indic": [3, 7, 48, 52, 53, 56, 57, 59, 60, 62, 63, 64, 69, 71, 72, 75, 76, 79, 80, 82, 83, 85, 86, 87, 92, 95, 122, 123, 136, 140, 142, 163, 167, 168, 279, 322, 323, 324, 342, 362, 365, 368, 369, 370, 371, 376, 378, 386, 387, 388, 390, 394, 395, 396, 400, 401, 404, 405, 406, 407, 411, 412, 422, 441, 444, 452, 453, 454, 457, 460, 462, 464, 465, 466, 469, 473, 479, 480, 482, 483, 484, 487, 488, 502, 503, 504, 526, 541, 542, 544, 565, 566, 570, 602, 605, 606, 617, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 638, 640, 641, 642, 643, 646, 650, 668, 682, 690, 691, 692, 694, 695, 696, 697, 699, 701, 706, 709, 711, 713, 714, 715, 717, 721, 722, 723, 724, 725, 726, 732, 733, 734, 735, 737, 739, 741, 743, 744, 761, 762, 764, 766, 780, 786, 793, 794, 796, 806, 814, 822, 825, 827, 840, 849], "to_list": [3, 7, 53, 76, 622], "arrai": [3, 4, 7, 8, 9, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 181, 191, 192, 196, 201, 203, 205, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 569, 570, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 718, 719, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 766, 772, 779, 780, 781, 782, 785, 789, 793, 794, 796, 800, 803, 805, 806, 807, 808, 811, 812, 813, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 850, 851, 854, 855, 856, 858, 862, 863], "282": [3, 7], "281": [3, 7, 40, 42], "285": [3, 7, 75], "dev": [3, 6, 7, 8, 9, 19, 40, 42, 45, 50, 69, 73, 196, 203, 619, 806, 816, 820, 823, 837, 839], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 8, 9, 11, 13, 17, 21, 22, 23, 24, 38, 40, 41, 42, 43, 45, 46, 51, 52, 57, 61, 68, 74, 75, 77, 80, 84, 107, 221, 256, 258, 260, 290, 291, 293, 360, 368, 380, 387, 389, 406, 409, 512, 603, 614, 620, 623, 625, 635, 662, 670, 728, 747], "tiger": [3, 7], "tabbi": [3, 7], "egyptian": [3, 7], "check": [3, 4, 6, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 43, 45, 47, 49, 53, 57, 69, 72, 76, 80, 113, 151, 152, 161, 162, 165, 167, 168, 169, 172, 187, 194, 195, 202, 214, 527, 537, 539, 540, 547, 553, 554, 555, 556, 557, 573, 583, 595, 601, 614, 618, 619, 622, 625, 629, 660, 661, 668, 706, 716, 717, 718, 759, 766, 793, 794, 800, 802, 804, 805, 806, 807, 809, 813, 814, 816, 817, 819, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 842, 849], "confirm": [3, 41, 805], "same": [3, 4, 5, 6, 7, 8, 13, 19, 21, 22, 23, 24, 26, 29, 31, 33, 38, 39, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 71, 72, 74, 75, 76, 77, 79, 80, 82, 84, 86, 88, 92, 93, 94, 95, 96, 97, 111, 121, 126, 131, 133, 134, 136, 138, 140, 141, 142, 144, 147, 148, 149, 160, 163, 208, 215, 216, 217, 218, 220, 222, 226, 228, 231, 235, 241, 242, 248, 268, 270, 272, 275, 277, 278, 279, 288, 295, 307, 321, 322, 323, 324, 325, 326, 329, 330, 332, 339, 355, 360, 362, 365, 368, 369, 370, 371, 374, 376, 378, 380, 386, 387, 388, 404, 405, 406, 407, 409, 410, 411, 412, 414, 421, 426, 427, 435, 436, 437, 438, 439, 441, 442, 444, 447, 457, 459, 474, 482, 483, 490, 492, 502, 504, 509, 510, 511, 512, 513, 514, 515, 521, 558, 612, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 653, 654, 655, 656, 658, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 688, 691, 692, 694, 695, 697, 698, 703, 704, 719, 729, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 759, 764, 765, 766, 772, 780, 793, 800, 806, 807, 810, 811, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 841, 845, 847, 849, 851, 853, 855, 862, 863], "8": [3, 6, 7, 8, 9, 18, 19, 21, 22, 23, 24, 38, 40, 42, 45, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 97, 98, 105, 120, 130, 131, 135, 138, 144, 153, 155, 156, 157, 160, 168, 193, 210, 218, 220, 221, 225, 226, 229, 230, 231, 233, 239, 242, 246, 247, 253, 254, 255, 259, 260, 263, 264, 266, 267, 268, 273, 274, 277, 278, 279, 282, 283, 286, 287, 288, 292, 297, 299, 300, 301, 303, 304, 306, 307, 324, 328, 339, 342, 344, 345, 346, 349, 356, 360, 362, 365, 368, 369, 370, 371, 380, 386, 387, 388, 389, 394, 395, 399, 400, 404, 405, 409, 410, 414, 417, 420, 428, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 458, 460, 464, 469, 470, 479, 480, 483, 484, 485, 488, 489, 499, 501, 513, 516, 517, 521, 527, 528, 530, 534, 535, 538, 541, 545, 549, 550, 551, 553, 554, 557, 560, 565, 566, 570, 580, 581, 582, 583, 603, 606, 608, 610, 611, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 638, 642, 643, 645, 646, 647, 648, 650, 656, 657, 658, 660, 661, 662, 665, 666, 667, 670, 672, 673, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 691, 698, 699, 701, 707, 714, 718, 726, 727, 728, 729, 731, 736, 737, 739, 741, 742, 744, 746, 747, 749, 751, 753, 754, 764, 767, 780, 806, 813, 814, 817, 830, 834, 838], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 9, 11, 13, 26, 27, 40, 41, 52, 54, 56, 58, 75, 77, 79, 81, 92, 93, 309, 313, 346, 362, 365, 368, 369, 380, 394, 427, 509, 511, 514, 603, 604, 607, 609, 610, 611, 623, 624, 626, 628, 648, 649, 650, 653, 684, 705, 766, 779, 780, 782, 784, 800, 813, 823, 830, 835, 839, 840, 855], "imagenet1k_v1": [3, 7], "dropout": [3, 56, 79, 368, 391, 392, 393, 624, 650, 653, 780, 838], "9": [3, 4, 5, 6, 7, 8, 9, 18, 19, 21, 22, 23, 24, 38, 40, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 63, 64, 65, 68, 72, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 97, 98, 105, 121, 122, 123, 135, 153, 154, 155, 156, 157, 160, 163, 216, 218, 220, 221, 224, 225, 226, 229, 230, 235, 236, 237, 242, 249, 255, 256, 257, 259, 263, 264, 266, 267, 268, 271, 273, 274, 278, 279, 282, 283, 284, 289, 294, 297, 298, 299, 336, 338, 342, 348, 349, 356, 360, 365, 366, 368, 370, 371, 378, 380, 386, 387, 388, 389, 394, 395, 399, 400, 404, 405, 409, 410, 414, 428, 443, 445, 447, 448, 452, 453, 454, 460, 464, 469, 479, 480, 481, 482, 484, 488, 499, 501, 504, 513, 530, 534, 535, 536, 538, 541, 549, 550, 553, 554, 557, 565, 566, 580, 582, 603, 604, 605, 609, 610, 614, 617, 618, 620, 622, 623, 624, 625, 627, 629, 631, 632, 633, 634, 635, 638, 639, 640, 646, 647, 648, 655, 656, 658, 660, 661, 662, 665, 666, 667, 670, 672, 673, 675, 676, 677, 679, 680, 681, 687, 691, 695, 696, 698, 699, 701, 706, 707, 712, 714, 717, 718, 726, 727, 728, 729, 731, 736, 737, 739, 741, 742, 744, 746, 747, 749, 751, 753, 754, 764, 784, 813, 815, 817, 825, 830, 838, 839, 852], "torch_output": [3, 5, 7], "dim": [3, 7, 42, 52, 69, 71, 75, 136, 307, 362, 368, 371, 385, 395, 396, 397, 400, 408, 464, 617, 624, 637, 644, 645, 649, 766, 780, 800, 815, 827, 828, 833], "torch_class": [3, 7], "torch_logit": [3, 7], "tensor": [3, 4, 6, 7, 8, 11, 13, 17, 18, 21, 22, 24, 26, 27, 28, 32, 38, 40, 48, 51, 52, 53, 56, 58, 59, 61, 69, 71, 74, 75, 76, 79, 80, 81, 82, 84, 91, 124, 132, 133, 136, 142, 158, 174, 266, 267, 296, 313, 317, 318, 319, 320, 321, 322, 331, 353, 360, 362, 365, 368, 369, 370, 371, 380, 381, 386, 387, 390, 394, 403, 404, 405, 406, 413, 415, 417, 424, 425, 426, 427, 430, 432, 434, 435, 438, 440, 441, 442, 444, 447, 448, 464, 467, 472, 475, 476, 477, 478, 481, 486, 517, 522, 565, 566, 617, 618, 620, 622, 624, 625, 626, 627, 631, 647, 649, 650, 664, 677, 684, 694, 696, 726, 780, 789, 794, 800, 810, 811, 815, 816, 820, 822, 823, 826, 827, 828, 830, 831, 833, 835, 837, 838, 840, 841, 843, 845, 849, 850, 851, 853, 854, 857, 859, 860, 863], "devic": [3, 5, 6, 7, 41, 42, 45, 48, 52, 61, 69, 71, 75, 84, 97, 100, 101, 102, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 306, 307, 322, 323, 362, 375, 462, 497, 498, 500, 501, 525, 539, 540, 617, 622, 631, 726, 727, 728, 729, 759, 761, 762, 777, 779, 780, 781, 782, 783, 784, 785, 786, 800, 807, 808, 811, 815, 819, 823, 824, 828, 830, 831, 833, 835, 840, 841, 842, 843, 846, 855, 856, 858, 859, 860, 861], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 7, 24, 38, 606, 613, 623, 838], "lt": [3, 7, 11, 13, 17, 21, 22, 23, 24, 38, 40, 42, 98], "takebackward0": [3, 7], "gt": [3, 7, 11, 13, 17, 21, 22, 23, 24, 38, 40, 42, 45, 98, 828, 835], "great": [3, 5, 800, 807, 830, 835, 837, 846, 847, 862], "With": [3, 19, 29, 38, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 62, 65, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 147, 148, 149, 150, 152, 158, 159, 160, 163, 170, 175, 176, 177, 178, 179, 189, 192, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 329, 330, 332, 334, 337, 341, 344, 345, 346, 348, 349, 352, 360, 362, 365, 368, 369, 370, 371, 380, 389, 391, 392, 399, 411, 418, 419, 420, 422, 423, 424, 433, 436, 448, 464, 465, 466, 468, 471, 473, 474, 480, 482, 484, 487, 502, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 527, 528, 529, 530, 533, 534, 535, 536, 537, 541, 542, 545, 547, 549, 550, 551, 565, 566, 580, 581, 583, 585, 587, 588, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 653, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 679, 680, 681, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 806, 815, 817, 827, 830, 833, 835, 846, 847, 849, 856, 859], "simpl": [3, 11, 15, 16, 18, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 38, 40, 42, 45, 52, 75, 380, 511, 766, 780, 794, 800, 805, 806, 807, 810, 812, 813, 815, 816, 817, 818, 823, 826, 827, 830, 831, 833, 837, 839, 840, 841, 843, 845, 849, 850, 855, 856, 857, 858], "chang": [3, 4, 9, 17, 27, 40, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 368, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 614, 620, 627, 629, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 675, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 718, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 761, 800, 805, 806, 807, 809, 811, 812, 813, 814, 815, 817, 818, 820, 821, 827, 828, 829, 830, 831, 832, 833, 835, 839, 841, 842, 847, 849, 859, 862], "backend": [3, 8, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 32, 47, 48, 52, 53, 57, 69, 75, 76, 80, 97, 124, 161, 162, 165, 187, 194, 195, 197, 200, 211, 329, 330, 365, 369, 420, 422, 518, 527, 539, 540, 548, 551, 552, 562, 569, 583, 586, 617, 618, 619, 622, 625, 675, 759, 761, 762, 764, 765, 766, 769, 771, 772, 777, 781, 782, 784, 788, 789, 800, 803, 804, 806, 807, 808, 809, 810, 814, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 832, 833, 834, 836, 837, 840, 843, 845, 849, 850, 851, 856, 859, 862, 863], "let": [3, 4, 5, 6, 8, 9, 11, 13, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 40, 41, 43, 45, 53, 65, 76, 215, 216, 217, 218, 221, 224, 233, 236, 238, 240, 249, 250, 251, 256, 258, 271, 279, 281, 282, 286, 541, 542, 620, 622, 625, 635, 679, 749, 751, 752, 753, 754, 800, 805, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 847, 849, 850, 863], "u": [3, 6, 40, 42, 44, 45, 52, 57, 71, 75, 80, 92, 93, 133, 369, 430, 437, 439, 625, 629, 654, 660, 661, 675, 714, 800, 801, 806, 807, 808, 813, 814, 821, 824, 826, 827, 828, 829, 830, 831, 833, 839, 841, 846], "differ": [3, 4, 6, 8, 9, 11, 15, 16, 20, 21, 22, 26, 27, 30, 31, 32, 33, 51, 52, 53, 57, 65, 69, 75, 76, 88, 97, 98, 107, 110, 160, 218, 235, 242, 243, 268, 284, 328, 335, 339, 340, 344, 365, 368, 369, 371, 380, 401, 412, 435, 441, 458, 465, 466, 480, 512, 513, 521, 541, 542, 614, 618, 620, 622, 624, 625, 627, 635, 647, 648, 662, 673, 688, 698, 745, 746, 751, 753, 754, 759, 764, 772, 781, 782, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 859, 862, 863], "ll": [3, 5, 6, 8, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 41, 800, 801, 803, 805, 806, 807, 812, 817, 820, 821, 825, 826, 838, 842, 847, 849, 850], "try": [3, 18, 28, 38, 41, 45, 69, 589, 622, 779, 789, 800, 805, 806, 807, 809, 810, 813, 814, 815, 819, 821, 826, 828, 835, 837, 841, 844, 846, 847, 851], "10": [3, 5, 7, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 40, 42, 44, 45, 48, 51, 52, 53, 54, 56, 57, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 121, 131, 132, 133, 217, 225, 226, 229, 230, 233, 240, 245, 247, 253, 255, 257, 268, 274, 281, 282, 287, 295, 328, 329, 330, 333, 337, 339, 341, 342, 344, 345, 346, 348, 349, 353, 356, 365, 368, 371, 380, 386, 387, 388, 389, 399, 404, 405, 409, 410, 411, 412, 414, 442, 454, 457, 460, 464, 469, 479, 480, 488, 509, 512, 513, 516, 518, 521, 534, 535, 536, 538, 541, 542, 544, 549, 550, 558, 566, 570, 575, 580, 582, 594, 597, 609, 617, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 647, 656, 658, 662, 663, 665, 666, 667, 670, 675, 676, 677, 679, 681, 691, 696, 697, 698, 699, 701, 712, 714, 717, 718, 725, 726, 727, 728, 729, 735, 737, 743, 745, 746, 747, 748, 750, 751, 753, 754, 764, 766, 784, 800, 803, 806, 809, 813, 814, 815, 817, 820, 825, 828, 830, 835, 837, 838, 846, 851, 861], "tf": [3, 5, 8, 11, 13, 18, 21, 22, 24, 26, 27, 28, 29, 31, 33, 38, 43, 44, 777, 800, 810, 815, 816, 822, 826, 827, 830, 831, 833, 835, 840, 841, 843, 849, 850, 851, 856], "onc": [3, 5, 26, 27, 38, 40, 57, 61, 80, 84, 208, 369, 421, 619, 625, 631, 659, 660, 661, 675, 726, 800, 805, 806, 807, 813, 814, 815, 816, 817, 820, 821, 826, 827, 830, 833, 835, 838, 841, 842, 847, 849], "set": [3, 11, 13, 19, 26, 27, 29, 32, 40, 41, 42, 43, 44, 47, 52, 53, 56, 57, 62, 64, 65, 69, 75, 76, 79, 80, 85, 87, 88, 110, 113, 120, 140, 142, 176, 177, 178, 179, 180, 191, 204, 205, 206, 207, 208, 223, 322, 334, 349, 351, 356, 362, 365, 366, 368, 369, 370, 371, 380, 390, 411, 415, 419, 423, 426, 442, 447, 448, 464, 474, 477, 484, 511, 516, 517, 518, 519, 520, 521, 523, 527, 534, 546, 551, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 583, 591, 614, 616, 617, 618, 619, 620, 622, 624, 625, 629, 631, 632, 634, 635, 647, 653, 655, 666, 668, 671, 674, 675, 706, 713, 716, 717, 718, 723, 724, 730, 732, 733, 737, 739, 740, 741, 744, 752, 754, 761, 764, 765, 766, 767, 772, 779, 780, 782, 784, 789, 794, 797, 800, 801, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 826, 827, 828, 830, 831, 833, 835, 837, 838, 845, 848, 849, 850, 854, 855, 856, 857, 858, 860, 863], "our": [3, 6, 8, 9, 11, 13, 15, 18, 19, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 38, 40, 41, 44, 67, 90, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 766, 776, 777, 779, 780, 782, 783, 784, 785, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 819, 820, 821, 824, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 845, 846, 849, 861, 862], "post": [3, 5, 40, 60, 83, 630, 725, 806, 820, 825, 840, 842], "process": [3, 5, 21, 26, 27, 31, 40, 202, 214, 619, 801, 806, 807, 812, 813, 814, 820, 821, 823, 825, 827, 828, 829, 830, 833, 835, 840, 846, 847, 849, 854, 855, 856, 859, 860, 862, 863], "11": [3, 5, 7, 8, 17, 19, 21, 22, 23, 24, 38, 40, 41, 42, 45, 51, 52, 53, 56, 57, 61, 65, 74, 75, 76, 79, 80, 82, 84, 88, 98, 218, 222, 225, 230, 240, 277, 278, 284, 346, 365, 368, 369, 371, 386, 387, 399, 404, 405, 409, 410, 414, 423, 457, 458, 460, 464, 469, 471, 488, 512, 513, 528, 534, 535, 541, 550, 566, 620, 622, 624, 625, 626, 627, 629, 631, 632, 633, 635, 638, 639, 647, 648, 658, 661, 662, 663, 665, 666, 670, 674, 675, 676, 677, 679, 681, 684, 686, 691, 696, 697, 699, 701, 712, 714, 724, 727, 728, 729, 736, 737, 745, 746, 747, 754, 813, 814, 815, 817, 825], "st": [3, 4, 6, 764, 809, 828, 830], "perf_count": [3, 6], "raw_logit": 3, "latenc": [3, 6], "nn": [3, 5, 13, 24, 26, 27, 40, 44, 134, 617, 800, 823, 828, 833, 840, 850, 857], "axi": [3, 5, 9, 41, 42, 43, 46, 48, 51, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 108, 112, 132, 133, 136, 208, 282, 287, 329, 330, 334, 335, 342, 349, 365, 368, 370, 371, 374, 378, 380, 389, 390, 396, 399, 401, 411, 412, 446, 451, 459, 460, 461, 464, 465, 466, 469, 474, 479, 480, 482, 483, 484, 487, 488, 493, 494, 496, 504, 509, 512, 513, 514, 516, 517, 518, 519, 520, 521, 534, 541, 602, 614, 617, 619, 620, 622, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 646, 655, 658, 666, 679, 681, 682, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 731, 732, 733, 737, 739, 741, 742, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 766, 776, 780, 781, 786, 813, 815, 817, 819, 822, 823, 826, 827, 830, 833, 835, 837, 840], "direct": [3, 52, 75, 335, 341, 345, 350, 354, 365, 368, 371, 401, 412, 465, 466, 480, 634, 744, 805, 810, 812, 827, 833, 839, 840, 852, 856, 857, 860], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 9, 11, 13, 19, 20, 21, 22, 26, 27, 32, 38, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 203, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 329, 330, 331, 332, 333, 335, 337, 339, 341, 343, 345, 346, 347, 348, 352, 353, 355, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 409, 411, 412, 413, 416, 417, 418, 419, 421, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 457, 459, 462, 467, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 529, 530, 534, 535, 536, 538, 541, 542, 545, 551, 558, 565, 566, 576, 584, 586, 598, 602, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 741, 742, 744, 745, 746, 747, 749, 751, 752, 754, 755, 756, 761, 764, 766, 779, 780, 783, 793, 800, 807, 813, 815, 816, 817, 818, 819, 820, 822, 826, 827, 828, 830, 831, 832, 835, 837, 838, 839, 840, 849, 850], "dtype": [3, 5, 7, 9, 13, 19, 21, 22, 23, 24, 38, 41, 48, 49, 52, 53, 56, 57, 61, 62, 65, 69, 71, 72, 74, 75, 76, 79, 80, 84, 85, 88, 97, 100, 101, 102, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 203, 230, 269, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 327, 332, 334, 349, 362, 365, 368, 369, 370, 371, 375, 380, 389, 399, 411, 412, 415, 436, 442, 447, 458, 482, 497, 498, 499, 500, 501, 511, 512, 513, 514, 517, 520, 521, 538, 539, 540, 542, 551, 560, 587, 617, 618, 619, 620, 622, 624, 625, 628, 631, 632, 634, 635, 636, 640, 647, 666, 682, 704, 705, 727, 728, 729, 732, 733, 734, 743, 744, 745, 746, 751, 753, 755, 756, 759, 761, 764, 766, 767, 779, 780, 781, 782, 783, 785, 800, 803, 809, 811, 815, 816, 817, 819, 820, 823, 824, 826, 827, 828, 830, 831, 835, 837, 850], "int32": [3, 38, 40, 49, 52, 53, 61, 62, 65, 72, 75, 76, 84, 85, 127, 132, 138, 144, 147, 150, 152, 154, 156, 158, 161, 163, 164, 168, 171, 175, 179, 183, 185, 203, 230, 376, 380, 502, 512, 513, 514, 542, 551, 587, 617, 618, 619, 620, 622, 631, 632, 635, 727, 728, 729, 733, 745, 746, 751, 753, 764, 765, 815, 827, 830, 835], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 7, 9, 11, 13, 18, 19, 38, 40, 41, 42, 48, 49, 52, 53, 56, 71, 72, 75, 76, 79, 88, 133, 136, 138, 144, 145, 146, 150, 154, 155, 158, 159, 160, 161, 164, 167, 168, 170, 175, 178, 184, 248, 275, 327, 339, 362, 365, 368, 369, 370, 380, 389, 399, 412, 436, 442, 447, 514, 551, 587, 617, 618, 620, 622, 624, 625, 628, 640, 642, 643, 646, 673, 675, 676, 682, 704, 705, 761, 764, 765, 800, 815, 817, 828, 830, 831, 850, 851], "As": [3, 5, 6, 8, 9, 11, 13, 19, 23, 24, 26, 27, 29, 32, 38, 39, 63, 67, 90, 633, 737, 738, 739, 740, 800, 803, 805, 806, 807, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 833, 837, 838, 839, 841, 845, 849, 850, 851, 856, 861], "expect": [3, 5, 6, 8, 19, 23, 26, 27, 29, 42, 43, 45, 52, 57, 58, 75, 81, 174, 242, 286, 368, 370, 390, 412, 447, 525, 618, 620, 622, 626, 670, 684, 779, 780, 800, 806, 807, 809, 815, 816, 819, 821, 824, 826, 828, 830, 833, 841, 842, 847, 849, 850, 851], "ident": [3, 9, 24, 41, 43, 57, 69, 127, 196, 544, 570, 617, 619, 622, 625, 629, 662, 667, 719, 780, 813, 823, 824, 827, 828, 831, 833, 837, 838, 841, 843, 845, 847], "had": [3, 813, 814, 826, 831, 835, 856, 857], "anoth": [3, 17, 19, 20, 23, 24, 26, 27, 29, 30, 42, 43, 128, 148, 150, 617, 618, 800, 805, 806, 807, 811, 813, 815, 816, 819, 821, 823, 826, 827, 830, 835, 837, 840, 843, 846, 848, 849, 850, 856, 862], "postprocess": 3, "routin": [3, 814, 826, 827, 833, 841, 856], "feed": [3, 208, 619, 849, 856, 857], "other": [3, 6, 8, 11, 13, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 49, 51, 52, 53, 59, 65, 69, 72, 74, 75, 76, 82, 88, 92, 97, 98, 121, 136, 148, 174, 235, 240, 242, 258, 267, 268, 331, 335, 365, 371, 458, 459, 467, 523, 524, 617, 618, 620, 622, 631, 635, 688, 698, 729, 752, 754, 766, 800, 803, 805, 806, 807, 809, 810, 813, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 841, 842, 843, 846, 849, 850, 852, 854, 855, 856, 862, 863], "carefulli": [3, 273, 620, 779, 827, 854, 859], "rewrit": 3, "easili": [3, 23, 26, 27, 38, 800, 806, 810, 814, 820, 827, 833, 838, 839, 840, 841, 846, 856, 862, 863], "out": [3, 5, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 41, 44, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 158, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 409, 411, 412, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 428, 429, 431, 432, 433, 434, 436, 440, 443, 444, 445, 446, 448, 449, 455, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 529, 530, 534, 535, 536, 538, 541, 542, 551, 561, 565, 566, 603, 604, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 772, 776, 777, 779, 780, 782, 783, 784, 785, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 823, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 845, 846, 847, 849, 850, 856, 863], "quickest": 3, "particular": [3, 26, 27, 263, 620, 765, 806, 807, 809, 811, 814, 815, 817, 824, 826, 827, 830, 831, 852, 856, 862], "hardwar": [3, 40, 97, 101, 800, 806, 833, 846, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862], "again": [3, 5, 20, 21, 29, 30, 31, 32, 625, 673, 807, 810, 811, 812, 813, 817, 819, 821, 826, 827, 830, 831, 833, 838, 840, 841, 846, 847, 861, 862], "speed": [3, 6, 8, 9, 26, 27, 40, 45, 53, 76, 558, 622, 830, 845, 859], "up": [3, 5, 6, 8, 9, 26, 52, 53, 75, 76, 368, 371, 390, 403, 458, 466, 546, 558, 622, 624, 647, 800, 801, 803, 805, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 849, 857, 862, 863], "12": [3, 5, 6, 7, 9, 17, 19, 21, 22, 23, 24, 38, 40, 41, 42, 49, 51, 52, 53, 56, 57, 61, 65, 72, 74, 75, 76, 79, 80, 82, 83, 84, 88, 97, 98, 163, 218, 220, 225, 229, 230, 233, 235, 236, 237, 255, 268, 271, 278, 281, 288, 289, 311, 312, 342, 345, 346, 362, 365, 368, 371, 380, 386, 387, 388, 389, 391, 395, 396, 404, 405, 409, 410, 411, 412, 414, 457, 458, 460, 464, 469, 488, 501, 512, 518, 519, 520, 530, 534, 535, 566, 572, 580, 594, 620, 622, 624, 625, 627, 629, 630, 631, 632, 633, 635, 638, 642, 647, 648, 658, 660, 662, 666, 670, 674, 676, 677, 679, 681, 691, 695, 697, 699, 701, 718, 725, 727, 728, 729, 736, 737, 745, 746, 747, 751, 753, 764, 806, 811, 813, 815, 817, 825], "repeat": [3, 4, 20, 30, 52, 53, 59, 75, 76, 82, 368, 371, 380, 396, 401, 463, 511, 536, 622, 627, 628, 700, 704, 705, 793, 807, 810, 811, 817, 818, 826, 830], "previou": [3, 9, 19, 20, 21, 23, 29, 30, 31, 33, 54, 75, 77, 182, 183, 184, 185, 186, 357, 367, 368, 413, 590, 592, 593, 594, 595, 597, 598, 600, 604, 609, 618, 622, 623, 779, 797, 806, 807, 809, 811, 814, 816, 822, 827, 830, 833, 840, 841, 859], "trace": [3, 4, 5, 6, 7, 8, 15, 16, 20, 23, 26, 29, 31, 32, 44, 53, 57, 69, 76, 80, 553, 554, 557, 568, 577, 591, 599, 622, 625, 761, 772, 782, 784, 800, 809, 813, 815, 827, 832, 833, 835, 840, 841, 848, 849, 850, 857, 862], "befor": [3, 4, 5, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 40, 52, 56, 57, 59, 63, 65, 69, 75, 79, 80, 205, 208, 213, 368, 371, 380, 395, 400, 410, 414, 458, 465, 466, 467, 474, 512, 513, 619, 624, 625, 627, 628, 629, 633, 635, 637, 638, 639, 640, 642, 644, 646, 649, 650, 653, 665, 682, 688, 703, 704, 718, 737, 738, 739, 740, 745, 746, 751, 753, 780, 789, 793, 805, 806, 807, 809, 810, 812, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 835, 838, 841, 849, 850, 856], "13": [3, 5, 6, 7, 17, 21, 22, 23, 24, 38, 40, 42, 46, 51, 52, 56, 57, 61, 65, 74, 75, 76, 77, 79, 82, 84, 88, 97, 113, 163, 193, 218, 233, 242, 253, 273, 282, 342, 349, 356, 365, 368, 371, 388, 389, 399, 404, 410, 414, 457, 458, 460, 464, 469, 488, 501, 512, 513, 529, 530, 534, 535, 550, 572, 580, 603, 614, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 632, 633, 635, 638, 639, 647, 648, 658, 662, 670, 674, 676, 679, 701, 705, 718, 727, 728, 729, 736, 737, 745, 746, 747, 813, 815, 817, 827], "026875037000081647": 3, "14": [3, 5, 6, 7, 22, 38, 40, 41, 42, 49, 51, 52, 56, 57, 61, 65, 72, 74, 75, 76, 79, 80, 82, 84, 147, 160, 163, 216, 221, 223, 230, 234, 260, 264, 268, 274, 281, 289, 338, 368, 369, 371, 380, 386, 387, 388, 389, 399, 406, 409, 410, 411, 414, 418, 424, 425, 458, 460, 464, 469, 488, 512, 580, 603, 618, 620, 622, 623, 624, 625, 627, 629, 633, 635, 638, 639, 641, 643, 645, 647, 658, 660, 662, 670, 677, 679, 681, 701, 718, 727, 728, 729, 737, 746, 747, 813, 817, 830], "overrid": [3, 5, 32, 41, 48, 52, 71, 75, 136, 380, 511, 617, 810, 812], "behavior": [3, 5, 52, 63, 235, 242, 268, 277, 381, 522, 569, 592, 620, 622, 633, 737, 738, 739, 740, 805, 812, 813, 814, 815, 826, 827, 828, 830, 833, 835, 841, 853], "prealloc": [3, 5], "75": [3, 5, 38, 51, 52, 74, 75, 76, 79, 84, 114, 132, 221, 223, 235, 237, 248, 309, 341, 342, 362, 365, 410, 521, 536, 549, 580, 614, 617, 620, 622, 625, 629, 631, 638, 663, 670, 714, 729], "memori": [3, 5, 8, 21, 22, 23, 24, 48, 52, 59, 71, 75, 82, 123, 134, 190, 202, 208, 210, 214, 371, 380, 452, 453, 460, 462, 464, 465, 466, 473, 488, 518, 564, 569, 592, 617, 619, 622, 624, 627, 649, 690, 691, 692, 694, 696, 697, 699, 701, 794, 814, 815, 816, 826, 827, 833, 835, 841, 849, 856, 858, 859, 860], "temporari": [3, 5, 578, 600, 622, 794, 815, 832], "fix": [3, 5, 42, 52, 75, 92, 93, 365, 368, 369, 413, 441, 624, 650, 800, 803, 806, 807, 809, 815, 821, 830, 831], "until": [3, 5, 794, 807, 826, 835, 841, 846, 849, 863], "handl": [3, 5, 38, 40, 46, 50, 51, 52, 68, 69, 73, 74, 75, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 188, 189, 190, 191, 192, 196, 201, 202, 210, 214, 220, 232, 257, 259, 273, 279, 280, 285, 286, 290, 294, 295, 297, 360, 371, 457, 483, 614, 619, 620, 625, 635, 679, 751, 753, 776, 784, 801, 808, 813, 814, 815, 821, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 839, 853, 863], "o": [3, 5, 39, 40, 41, 42, 44, 561, 622, 624, 650, 800, 806, 808, 814, 835, 842], "environ": [3, 5, 8, 21, 22, 23, 24, 41, 44, 800, 801, 807, 842, 856, 858], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 9, 21, 22, 24, 802, 804, 806, 812, 854, 858, 860], "jit": [3, 6, 8, 26, 29, 835, 841, 849, 856], "img_jax": [3, 5], "device_put": [3, 6], "15": [3, 5, 7, 8, 9, 22, 38, 40, 41, 42, 45, 51, 52, 53, 57, 61, 65, 71, 72, 74, 75, 76, 79, 80, 82, 84, 88, 98, 131, 160, 218, 225, 229, 235, 237, 246, 253, 254, 259, 260, 268, 277, 278, 279, 342, 356, 365, 366, 368, 369, 371, 380, 386, 387, 404, 406, 409, 410, 414, 420, 460, 464, 469, 488, 512, 530, 534, 535, 538, 549, 550, 575, 580, 597, 617, 618, 620, 622, 624, 625, 627, 629, 631, 632, 633, 635, 638, 648, 658, 661, 662, 663, 670, 676, 677, 695, 701, 706, 718, 727, 728, 735, 737, 745, 746, 747, 761, 806, 814, 817, 825, 859], "warm": 3, "_": [3, 6, 8, 9, 26, 39, 40, 51, 52, 69, 74, 75, 77, 93, 150, 238, 240, 248, 249, 264, 329, 330, 365, 368, 371, 380, 411, 438, 441, 482, 511, 534, 603, 604, 618, 620, 622, 623, 625, 627, 629, 635, 673, 674, 676, 702, 713, 752, 807, 814, 815, 818, 826, 838], "rang": [3, 9, 26, 27, 38, 39, 40, 42, 48, 52, 65, 71, 75, 121, 132, 133, 282, 293, 301, 313, 360, 362, 369, 371, 380, 422, 432, 467, 475, 477, 482, 486, 512, 513, 514, 534, 602, 617, 620, 622, 633, 635, 737, 745, 746, 751, 753, 764, 766, 767, 779, 800, 805, 815, 819, 823, 830, 835, 838, 839, 840, 856, 862], "16": [3, 5, 9, 21, 22, 23, 24, 38, 40, 42, 51, 52, 53, 56, 57, 61, 65, 72, 74, 75, 76, 79, 80, 82, 84, 97, 98, 163, 229, 258, 278, 285, 339, 342, 346, 365, 368, 371, 380, 386, 387, 389, 395, 399, 400, 404, 405, 410, 414, 447, 464, 512, 518, 535, 538, 560, 580, 581, 613, 618, 620, 622, 623, 624, 625, 627, 629, 631, 632, 635, 646, 648, 654, 658, 661, 662, 670, 672, 676, 701, 714, 727, 728, 729, 736, 746, 747, 764, 767, 800, 807, 815, 817, 838], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 52, 68, 69, 105, 368, 370, 403, 408, 446, 447, 633, 737, 739, 766, 776, 806, 807, 809, 817, 835], "note": [3, 5, 9, 22, 26, 27, 32, 41, 42, 43, 52, 53, 57, 59, 63, 75, 80, 82, 92, 129, 142, 174, 242, 277, 278, 285, 322, 323, 342, 362, 365, 368, 369, 371, 390, 421, 426, 434, 435, 441, 464, 482, 618, 620, 624, 625, 627, 633, 635, 650, 659, 660, 672, 673, 675, 694, 698, 738, 740, 749, 780, 794, 803, 805, 806, 807, 810, 815, 817, 818, 821, 826, 827, 828, 830, 831, 833], "were": [3, 5, 43, 69, 72, 163, 167, 168, 242, 620, 624, 650, 805, 806, 807, 815, 819, 821, 825, 826, 828, 830, 831, 833, 835, 849, 856, 857, 862], "function": [3, 9, 11, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 160, 161, 162, 163, 166, 167, 168, 170, 174, 175, 192, 194, 195, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 564, 565, 566, 569, 570, 573, 575, 577, 580, 581, 582, 583, 585, 587, 588, 589, 595, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 762, 764, 765, 766, 767, 772, 776, 779, 782, 789, 790, 796, 800, 803, 806, 807, 808, 809, 810, 811, 812, 814, 817, 818, 820, 826, 829, 834, 836, 837, 838, 839, 843, 845, 849, 851, 853, 854, 855, 856, 857, 862, 863], "calcul": [3, 9, 40, 51, 52, 53, 58, 65, 69, 74, 75, 76, 80, 81, 88, 98, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 233, 235, 238, 239, 240, 256, 257, 258, 259, 260, 261, 266, 267, 268, 273, 280, 281, 282, 284, 285, 286, 292, 301, 329, 330, 342, 352, 365, 368, 369, 370, 371, 374, 380, 386, 387, 388, 422, 442, 447, 474, 490, 492, 518, 558, 620, 622, 625, 626, 635, 661, 670, 673, 684, 685, 686, 748, 749, 750, 751, 752, 753, 754, 764, 766, 779, 780, 783, 805, 818, 835, 846, 849], "dog": 3, "18": [3, 8, 9, 21, 22, 23, 24, 38, 40, 42, 51, 52, 61, 74, 75, 79, 80, 84, 88, 108, 230, 235, 277, 281, 290, 291, 342, 360, 365, 368, 371, 389, 395, 399, 400, 404, 410, 414, 464, 614, 620, 625, 631, 635, 642, 658, 665, 670, 677, 727, 728, 729, 746, 747, 751, 813, 815, 817], "19": [3, 8, 21, 22, 23, 24, 38, 40, 41, 42, 45, 51, 52, 61, 74, 75, 79, 80, 84, 221, 230, 258, 268, 285, 368, 369, 371, 380, 388, 389, 400, 404, 410, 414, 420, 425, 464, 512, 620, 625, 629, 631, 634, 658, 666, 679, 717, 727, 728, 729, 744, 817], "006431100999861883": 3, "258": [3, 624, 639, 641], "104": [3, 65, 625, 635, 670, 747], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 814], "predict": [3, 5, 7, 9, 40, 41, 42, 43, 52, 58, 75, 81, 370, 443, 446, 449, 626, 684, 685, 686, 800, 815], "down": [3, 19, 29, 43, 52, 75, 368, 371, 403, 466, 806, 830, 843, 856, 862], "itself": [3, 21, 31, 51, 92, 269, 524, 589, 620, 622, 629, 718, 794, 803, 806, 807, 809, 812, 813, 814, 815, 816, 819, 820, 821, 826, 827, 839, 841, 845, 849, 855, 856, 857, 862], "version": [3, 9, 23, 24, 29, 40, 41, 42, 45, 46, 52, 75, 92, 105, 286, 334, 336, 365, 380, 516, 521, 602, 620, 622, 625, 660, 661, 761, 789, 790, 800, 806, 807, 812, 814, 815, 818, 826, 828, 835, 845, 846, 847, 850, 862, 863], "return": [3, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 766, 767, 771, 772, 777, 779, 780, 782, 784, 789, 790, 793, 794, 795, 796, 797, 800, 806, 807, 810, 813, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 849, 850, 851, 857], "20": [3, 9, 13, 38, 40, 41, 42, 45, 51, 52, 53, 56, 61, 65, 74, 75, 76, 79, 80, 84, 88, 230, 234, 238, 274, 278, 282, 298, 342, 344, 346, 365, 368, 371, 386, 388, 404, 410, 414, 457, 479, 534, 541, 542, 544, 566, 570, 580, 620, 622, 625, 631, 632, 635, 638, 639, 649, 658, 663, 666, 670, 677, 727, 735, 736, 745, 746, 747, 751, 753, 800, 814, 833, 837], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 846], "sourc": [3, 7, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 809, 810, 812, 813, 814, 827, 829, 845, 846, 847, 848, 850, 851, 855, 856, 857, 858, 859], "21": [3, 9, 38, 40, 42, 45, 51, 52, 53, 61, 71, 74, 75, 79, 80, 84, 88, 97, 133, 163, 218, 221, 223, 229, 253, 268, 298, 349, 368, 369, 370, 371, 380, 386, 389, 399, 404, 410, 412, 414, 418, 442, 457, 512, 566, 617, 618, 620, 622, 625, 626, 629, 635, 658, 670, 674, 686, 712, 727, 728, 745, 746, 747, 819, 825], "modul": [3, 5, 6, 8, 11, 13, 15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 32, 38, 39, 40, 42, 43, 44, 67, 69, 90, 98, 361, 363, 364, 372, 373, 377, 562, 622, 636, 757, 761, 776, 777, 778, 780, 781, 783, 785, 788, 789, 800, 802, 806, 810, 811, 812, 819, 823, 826, 827, 829, 830, 835, 836, 838, 840, 841, 847, 849, 851, 856, 857, 859], "def": [3, 5, 6, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 44, 51, 74, 117, 219, 528, 546, 616, 622, 628, 629, 704, 705, 712, 793, 800, 803, 805, 806, 809, 810, 813, 815, 816, 817, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 833, 835, 837, 838, 839, 840, 849, 850, 851], "__init__": [3, 5, 11, 13, 26, 27, 38, 39, 40, 42, 69, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 762, 769, 770, 771, 776, 779, 780, 781, 782, 783, 784, 785, 788, 789, 793, 795, 798, 800, 805, 810, 811, 815, 819, 827, 831, 835, 837, 838, 839, 840, 850], "self": [3, 5, 11, 13, 26, 27, 38, 39, 40, 42, 44, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 158, 160, 163, 166, 167, 168, 170, 172, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 624, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 784, 793, 800, 807, 810, 813, 819, 827, 828, 835, 837, 838, 839, 840, 850], "num_class": [3, 11, 13, 26, 27, 40, 42, 44, 800, 840, 850], "1000": [3, 6, 7, 11, 26, 27, 40, 41, 42, 43, 45, 48, 71, 133, 617, 800, 838, 850], "v": [3, 4, 5, 15, 16, 19, 26, 27, 29, 32, 33, 38, 41, 42, 52, 56, 64, 71, 75, 79, 87, 133, 233, 238, 240, 281, 369, 371, 422, 430, 437, 438, 463, 620, 624, 628, 634, 650, 653, 704, 705, 743, 761, 780, 781, 782, 783, 784, 785, 800, 802, 806, 807, 808, 812, 820, 835, 838, 839, 840], "none": [3, 5, 6, 8, 9, 26, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 96, 97, 98, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 163, 165, 166, 167, 168, 170, 172, 175, 187, 190, 191, 203, 204, 205, 206, 207, 208, 209, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 767, 772, 776, 777, 779, 780, 781, 782, 783, 784, 785, 788, 789, 792, 794, 800, 803, 806, 809, 810, 811, 813, 814, 815, 816, 817, 819, 820, 822, 823, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 849, 850, 851], "_build": [3, 5, 781, 782, 800], "kwarg": [3, 4, 5, 8, 9, 26, 40, 44, 47, 52, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 98, 101, 198, 371, 474, 561, 589, 617, 619, 622, 759, 761, 776, 777, 780, 781, 782, 789, 798, 800, 810, 815, 816, 819, 823, 826, 827, 833, 835, 839, 849, 850, 851], "featur": [3, 8, 9, 11, 13, 15, 17, 26, 27, 40, 44, 52, 75, 368, 382, 384, 391, 392, 393, 779, 780, 800, 805, 806, 807, 810, 811, 814, 815, 822, 831, 833, 838, 841, 850, 856, 857, 858, 862], "sequenti": [3, 5, 7, 24, 26, 27, 42, 800, 812, 813, 839, 850], "conv2d": [3, 5, 7, 24, 26, 27, 42, 45, 56, 79, 624, 641, 780, 800], "64": [3, 5, 7, 38, 40, 41, 42, 45, 51, 52, 56, 74, 75, 76, 79, 80, 84, 88, 98, 159, 229, 239, 273, 282, 283, 339, 365, 368, 389, 399, 534, 535, 581, 609, 618, 620, 622, 623, 624, 625, 629, 635, 639, 641, 643, 645, 646, 667, 670, 680, 714, 718, 728, 747, 751, 800, 806, 815, 838, 839, 861], "2": [3, 4, 5, 6, 7, 8, 9, 11, 17, 19, 20, 21, 22, 23, 24, 26, 27, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 105, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 147, 148, 149, 150, 154, 158, 160, 168, 170, 175, 191, 192, 193, 196, 199, 201, 203, 206, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 322, 324, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 399, 400, 401, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 436, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 487, 488, 489, 493, 494, 496, 499, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 561, 563, 565, 566, 570, 579, 580, 581, 582, 583, 585, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 766, 767, 776, 779, 780, 789, 793, 794, 800, 803, 806, 807, 809, 811, 812, 813, 814, 815, 817, 819, 820, 822, 823, 825, 826, 827, 828, 830, 834, 835, 837, 838, 839, 840, 841, 849, 850, 851, 862, 863], "data_format": [3, 42, 52, 56, 75, 79, 368, 374, 383, 386, 387, 388, 391, 392, 393, 404, 405, 406, 407, 409, 490, 491, 492, 495, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 764, 780, 783, 800], "nchw": [3, 42, 52, 56, 75, 79, 368, 374, 383, 387, 392, 405, 409, 495, 624, 637, 640, 641, 644, 645, 646, 780, 800], "relu": [3, 5, 7, 24, 26, 27, 38, 45, 46, 52, 67, 68, 75, 107, 296, 297, 305, 360, 614, 776, 800, 828, 838, 839], "maxpool2d": [3, 5, 7, 40, 780, 800], "192": [3, 42, 764, 793], "384": [3, 77, 603, 623, 629, 706], "avgpool": [3, 7], "adaptiveavgpool2d": [3, 7, 780], "6": [3, 6, 7, 8, 9, 11, 19, 21, 22, 23, 24, 26, 27, 38, 40, 41, 42, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 64, 65, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 97, 98, 105, 107, 112, 117, 122, 123, 130, 131, 134, 135, 138, 144, 148, 149, 150, 158, 160, 168, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 297, 299, 300, 301, 303, 304, 305, 306, 307, 313, 324, 329, 330, 332, 334, 342, 343, 345, 346, 347, 349, 356, 360, 362, 365, 366, 368, 369, 370, 371, 376, 378, 380, 389, 391, 394, 395, 399, 400, 404, 410, 411, 412, 414, 417, 420, 423, 424, 428, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 458, 460, 464, 465, 469, 470, 473, 474, 479, 480, 482, 483, 488, 489, 499, 501, 502, 504, 509, 511, 512, 513, 514, 516, 518, 520, 521, 527, 529, 530, 533, 534, 535, 541, 542, 549, 550, 551, 566, 580, 581, 582, 583, 585, 589, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 653, 655, 656, 657, 658, 660, 661, 662, 665, 666, 667, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 717, 718, 724, 725, 726, 727, 728, 729, 731, 732, 733, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 764, 779, 800, 803, 806, 809, 811, 813, 814, 815, 817, 820, 825, 830, 833, 835, 837, 838, 839], "classifi": [3, 9, 11, 13, 26, 27, 40, 42, 43, 800, 805, 849, 850], "prob": [3, 42, 52, 56, 75, 79, 84, 368, 375, 391, 392, 393, 497, 624, 631, 647, 726, 780, 800], "linear": [3, 7, 13, 25, 26, 27, 38, 39, 40, 42, 45, 52, 53, 56, 68, 75, 76, 79, 105, 107, 109, 110, 113, 290, 293, 297, 299, 300, 301, 305, 346, 360, 365, 368, 371, 380, 403, 436, 474, 521, 538, 561, 614, 622, 624, 629, 650, 674, 713, 764, 766, 767, 779, 780, 800, 813, 818, 823, 824, 826, 827, 830, 833, 835, 838, 839, 840, 850, 854, 855, 856, 859], "4096": 3, "_forward": [3, 5, 6, 8, 26, 27, 38, 39, 42, 800, 818, 835, 838, 839], "x": [3, 5, 9, 11, 13, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 167, 168, 170, 175, 191, 192, 196, 201, 202, 203, 207, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 322, 323, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 455, 456, 458, 459, 461, 462, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 570, 571, 572, 575, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589, 601, 602, 604, 605, 606, 608, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 780, 783, 786, 789, 793, 798, 800, 803, 805, 808, 810, 811, 813, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 831, 833, 835, 837, 838, 839, 840, 849, 850, 851], "reshap": [3, 26, 27, 42, 43, 52, 56, 57, 59, 69, 75, 79, 80, 82, 353, 365, 368, 369, 371, 386, 387, 388, 391, 404, 405, 406, 409, 418, 433, 458, 464, 602, 622, 624, 625, 627, 640, 642, 646, 666, 682, 800, 826, 827, 830, 833, 835, 837, 840], "bidirect": 4, "encod": [4, 11, 13, 26, 27, 40, 42, 53, 58, 76, 81, 538, 622, 626, 684, 800, 838, 846, 850], "mlm": 4, "support": [4, 8, 9, 17, 21, 22, 23, 24, 26, 29, 41, 50, 52, 53, 57, 73, 75, 76, 80, 142, 161, 165, 187, 194, 209, 218, 235, 242, 263, 264, 268, 278, 296, 322, 342, 360, 362, 365, 369, 371, 403, 421, 482, 527, 539, 548, 551, 552, 569, 583, 617, 618, 619, 620, 622, 624, 625, 648, 659, 660, 661, 664, 666, 675, 682, 759, 765, 772, 784, 789, 790, 793, 800, 802, 803, 805, 806, 807, 809, 810, 812, 816, 817, 818, 820, 822, 823, 825, 826, 828, 830, 831, 833, 834, 835, 837, 838, 840, 842, 843, 845, 846, 847, 850, 853, 855, 856, 859, 861, 862, 863], "googl": [4, 21, 22, 23, 24, 40, 41, 42, 44, 814, 846], "type": [4, 6, 11, 13, 17, 23, 26, 27, 32, 40, 41, 42, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 764, 765, 766, 767, 771, 772, 776, 779, 780, 781, 782, 786, 789, 793, 794, 795, 798, 800, 805, 806, 807, 808, 809, 810, 813, 816, 817, 818, 819, 822, 824, 826, 828, 830, 831, 833, 835, 837, 838, 849, 850, 851, 856, 857, 860], "choos": [4, 40, 42, 50, 62, 63, 73, 209, 235, 242, 263, 264, 268, 329, 330, 365, 371, 619, 620, 632, 633, 635, 736, 737, 738, 739, 740, 748, 749, 750, 752, 764, 800, 805, 806, 807, 824, 830, 836, 840, 849], "librari": [4, 6, 8, 15, 16, 22, 24, 38, 40, 50, 63, 73, 209, 240, 242, 258, 263, 264, 286, 329, 330, 365, 619, 620, 625, 633, 635, 660, 661, 737, 738, 739, 740, 748, 749, 750, 752, 800, 805, 806, 809, 815, 840, 841, 845, 846, 847, 849, 852, 853, 854, 856, 860, 863], "pretrain": [4, 6, 11, 12, 13, 26, 27, 45, 800, 850], "save": [4, 7, 40, 52, 69, 75, 380, 518, 578, 600, 619, 622, 636, 782, 806, 814, 821, 830, 841, 847, 855], "some": [4, 5, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 31, 32, 38, 42, 43, 69, 77, 240, 242, 258, 368, 391, 392, 393, 603, 604, 607, 609, 610, 611, 619, 620, 623, 629, 717, 780, 800, 803, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 837, 838, 839, 841, 842, 843, 846, 847, 849, 850, 852, 853, 855, 856, 857, 862, 863], "mohame54": 4, "automodel": [4, 8, 26], "autotoken": 4, "load": [4, 6, 8, 23, 26, 40, 41, 42, 43, 44, 45, 69, 369, 437, 636, 782, 800, 830, 841, 855, 862], "token": [4, 42], "bert_bas": 4, "from_pretrain": [4, 8, 26, 43, 849, 850], "base": [4, 9, 40, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 102, 133, 142, 174, 238, 239, 256, 257, 258, 259, 273, 313, 322, 324, 331, 334, 339, 346, 362, 365, 368, 369, 370, 378, 410, 414, 437, 442, 503, 571, 581, 593, 617, 618, 620, 622, 625, 627, 633, 635, 666, 690, 737, 738, 739, 740, 747, 762, 765, 766, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 794, 795, 798, 800, 806, 807, 809, 813, 814, 815, 819, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 856, 861, 863], "uncas": 4, "eval": [4, 5, 7, 21, 22, 23, 24, 782], "evalu": [4, 51, 52, 69, 74, 75, 238, 240, 256, 257, 258, 259, 263, 270, 272, 279, 283, 316, 347, 358, 359, 362, 367, 369, 370, 371, 433, 442, 447, 471, 613, 620, 623, 629, 636, 716, 717, 755, 756, 781, 782, 807, 813, 815, 823, 824, 856], "bert_token": 4, "sampl": [4, 6, 8, 11, 13, 23, 26, 27, 41, 48, 51, 52, 61, 65, 71, 74, 75, 84, 88, 132, 133, 287, 313, 362, 368, 370, 371, 375, 391, 392, 393, 403, 413, 415, 442, 447, 477, 497, 498, 499, 500, 501, 617, 620, 631, 635, 726, 727, 728, 729, 752, 754, 780, 828, 830], "test": [4, 18, 19, 21, 22, 28, 29, 31, 32, 33, 41, 42, 51, 53, 66, 74, 76, 89, 120, 166, 170, 249, 250, 251, 252, 275, 368, 391, 392, 393, 558, 616, 618, 620, 622, 636, 755, 756, 759, 762, 765, 794, 800, 802, 803, 804, 808, 812, 815, 817, 819, 821, 824, 827, 829, 831, 841, 842, 847, 849, 850, 851, 856], "did": [4, 40, 805, 812, 840, 846, 862], "realli": [4, 38, 806, 813, 820, 841, 849, 861, 862], "like": [4, 6, 8, 18, 19, 20, 26, 28, 29, 30, 31, 32, 33, 43, 45, 48, 51, 52, 59, 71, 74, 75, 79, 82, 87, 133, 151, 174, 219, 239, 245, 248, 261, 279, 335, 339, 351, 365, 368, 369, 370, 371, 378, 380, 410, 412, 421, 444, 453, 454, 463, 464, 503, 504, 521, 617, 618, 620, 625, 627, 631, 634, 659, 694, 729, 742, 794, 800, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 846, 849, 850, 856, 861], "input": [4, 5, 8, 11, 13, 23, 24, 26, 31, 32, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 189, 191, 192, 205, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 431, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 565, 566, 567, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 714, 715, 717, 718, 719, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 765, 772, 776, 779, 780, 781, 782, 783, 793, 794, 809, 810, 811, 813, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 849, 850, 857, 860], "pad": [4, 7, 40, 42, 52, 56, 59, 75, 79, 82, 93, 95, 368, 371, 386, 387, 388, 389, 390, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 538, 622, 624, 627, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 689, 702, 766, 780, 800], "longest": 4, "return_tensor": [4, 8, 26, 43, 849, 850], "pt": [4, 8, 26, 849], "max_length": [4, 69], "512": [4, 5, 7, 40, 42, 80, 624, 639, 680, 800], "input_id": 4, "101": [4, 9, 41, 624, 625, 629, 648, 663, 712], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 9, 52, 75, 84, 389, 727], "token_type_id": 4, "attention_mask": [4, 56, 79, 624, 650], "pooler": 4, "compar": [4, 6, 8, 26, 39, 43, 45, 52, 53, 63, 64, 65, 69, 75, 76, 87, 88, 328, 344, 365, 380, 519, 523, 526, 622, 633, 634, 635, 737, 738, 739, 740, 741, 744, 750, 761, 800, 811, 817, 819, 828, 830, 833, 838, 852, 854, 856, 862, 863], "no_grad": [4, 40, 849], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 6, 39, 42, 48, 52, 53, 56, 57, 61, 71, 74, 75, 79, 80, 84, 92, 93, 117, 127, 140, 141, 142, 262, 307, 322, 323, 362, 369, 371, 375, 378, 380, 419, 432, 436, 438, 440, 480, 484, 497, 498, 499, 500, 501, 504, 514, 526, 616, 617, 622, 624, 625, 629, 631, 632, 650, 653, 657, 665, 666, 672, 674, 675, 676, 679, 714, 727, 728, 729, 735, 800, 808, 809, 827, 828, 835, 849, 852, 856], "ivy_output": [4, 43], "logits_clos": 4, "allclos": [4, 6, 8, 11, 13, 26, 43, 45, 52, 75, 365], "detach": [4, 6, 8, 11, 13, 26, 825], "rtol": [4, 11, 13, 52, 57, 75, 80, 328, 344, 365, 625, 668, 671, 759, 761, 803, 820, 828], "005": [4, 7, 52, 75, 328, 344, 365, 443], "atol": [4, 6, 8, 26, 52, 57, 75, 80, 328, 344, 365, 625, 668, 759, 761, 803, 820, 828], "equal": [4, 48, 49, 51, 52, 53, 57, 58, 59, 61, 63, 64, 65, 69, 72, 74, 75, 76, 80, 81, 82, 84, 87, 93, 97, 98, 127, 129, 130, 131, 137, 138, 147, 227, 229, 233, 238, 240, 249, 250, 271, 273, 278, 281, 282, 286, 324, 325, 326, 328, 344, 362, 365, 368, 369, 371, 374, 380, 390, 411, 436, 460, 469, 482, 488, 493, 494, 496, 514, 523, 526, 602, 617, 618, 620, 622, 625, 626, 627, 631, 632, 633, 634, 635, 658, 667, 668, 671, 673, 679, 684, 687, 689, 694, 696, 702, 729, 735, 737, 738, 739, 740, 741, 744, 749, 751, 752, 753, 754, 772, 779, 780, 812, 813, 815, 817, 819, 828, 830], "els": [4, 5, 6, 9, 41, 42, 44, 45, 52, 53, 61, 74, 75, 84, 153, 154, 155, 156, 157, 169, 275, 279, 368, 369, 375, 413, 426, 435, 439, 441, 498, 533, 537, 618, 620, 622, 624, 629, 631, 649, 716, 719, 727, 728, 729, 759, 793, 794, 800, 805, 806, 807, 809, 811, 815, 816, 819, 823, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 841, 857], "768": 4, "fn": [4, 43, 45, 52, 69, 72, 75, 101, 161, 162, 194, 195, 198, 371, 451, 524, 539, 540, 589, 618, 619, 622, 629, 712, 713, 714, 716, 717, 718, 759, 761, 786, 789, 795, 796, 798, 816, 819, 826, 827, 835, 849], "finish": [4, 15, 26, 27, 38, 41, 800, 801, 805, 806, 808], "2f": [4, 6], "sec": 4, "89": [4, 9, 38, 51, 61, 72, 74, 75, 84, 98, 163, 230, 618, 625, 635, 677, 728, 729, 753], "43": [4, 9, 38, 40, 42, 52, 75, 84, 98, 229, 368, 369, 380, 388, 420, 512, 620, 631, 632, 728, 729, 736], "procedur": [4, 812, 814, 817, 828], "60": [4, 38, 42, 51, 65, 74, 76, 84, 88, 219, 253, 371, 479, 542, 550, 566, 580, 602, 620, 622, 625, 629, 635, 670, 709, 727, 745, 747, 751, 794, 814], "big": [4, 779, 801, 841, 856], "jnp": [4, 18, 23, 26, 27, 28, 29, 32, 38, 40, 44, 800, 815, 816, 819, 822, 826, 831, 835, 840, 850, 851], "config": [4, 5, 6, 8, 9, 20, 23, 26, 27, 40, 41, 43, 69, 629, 719, 800, 806, 809, 812, 814, 821, 828, 838, 849, 857], "jax_enable_x64": [4, 5, 6, 8, 9, 20, 23, 26, 27, 800], "ref": [4, 5, 76, 80, 254, 268, 271, 277, 284, 620, 627, 698, 806, 826], "initi": [4, 26, 27, 43, 52, 56, 65, 69, 75, 79, 88, 98, 369, 380, 426, 435, 441, 519, 520, 624, 635, 649, 750, 777, 780, 781, 782, 784, 785, 800, 807, 811, 815, 816, 820, 828, 830, 835, 846, 849, 850, 851, 856, 862, 863], "fast": [4, 21, 31, 52, 368, 390, 856], "valu": [4, 9, 38, 39, 41, 42, 48, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 95, 97, 98, 100, 113, 117, 118, 120, 121, 127, 130, 131, 132, 133, 136, 142, 147, 164, 168, 174, 207, 208, 215, 216, 217, 218, 220, 222, 223, 224, 231, 235, 236, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 296, 301, 304, 305, 307, 314, 316, 322, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 344, 345, 347, 350, 352, 353, 354, 355, 356, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 390, 403, 410, 411, 413, 415, 419, 422, 426, 430, 435, 437, 439, 441, 442, 443, 445, 446, 447, 448, 457, 463, 468, 474, 479, 481, 482, 483, 484, 487, 490, 492, 497, 498, 500, 501, 507, 509, 512, 513, 514, 517, 518, 519, 520, 521, 527, 529, 530, 531, 533, 538, 541, 542, 544, 549, 550, 551, 558, 565, 566, 570, 571, 572, 575, 583, 588, 593, 594, 597, 600, 601, 602, 603, 604, 605, 609, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 653, 657, 660, 661, 666, 667, 668, 671, 672, 673, 674, 675, 676, 679, 682, 687, 688, 689, 693, 694, 702, 703, 704, 708, 710, 711, 712, 713, 714, 719, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 759, 761, 764, 765, 766, 767, 769, 771, 776, 779, 780, 781, 782, 783, 784, 803, 806, 807, 809, 812, 813, 815, 816, 817, 818, 819, 820, 822, 823, 826, 827, 830, 832, 833, 835, 837, 841, 849, 856, 857], "demo": [5, 6, 7, 8, 9, 27, 34, 38, 42, 800], "milesi": 5, "blob": [5, 40, 42], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 8, 21, 22, 23, 24, 40, 43, 52, 75, 193, 369, 437, 619, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 806, 812, 816, 819, 820, 823, 826, 830, 831, 835, 850, 854, 862, 863], "data_load": 5, "py": [5, 7, 8, 21, 22, 23, 24, 40, 42, 45, 88, 369, 437, 747, 789, 793, 800, 805, 806, 807, 809, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 827, 828, 830, 831, 835, 837, 839, 840], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 6, 40, 52, 56, 60, 75, 77, 79, 83, 107, 206, 207, 298, 299, 302, 313, 342, 360, 362, 365, 368, 369, 374, 385, 391, 392, 393, 401, 403, 408, 412, 428, 490, 491, 492, 610, 614, 619, 623, 624, 630, 647, 650, 653, 725, 764, 766, 767, 779, 780, 784, 794, 856, 858], "is_mask": 5, "w": [5, 8, 41, 42, 52, 53, 54, 56, 69, 74, 75, 76, 77, 79, 92, 262, 342, 357, 365, 367, 368, 369, 374, 386, 387, 388, 390, 404, 405, 406, 407, 423, 441, 495, 510, 534, 536, 580, 603, 604, 605, 607, 609, 610, 611, 622, 623, 624, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 712, 800, 808, 825, 835, 838, 839, 850], "h": [5, 52, 53, 56, 75, 76, 79, 368, 374, 387, 388, 405, 406, 495, 534, 536, 622, 624, 629, 637, 640, 641, 642, 643, 644, 645, 646, 709, 713, 715, 718, 723, 808, 812, 813, 814, 850, 852], "size": [5, 9, 11, 13, 18, 21, 22, 28, 29, 31, 32, 33, 40, 42, 45, 52, 53, 56, 57, 59, 61, 62, 69, 75, 76, 79, 80, 82, 84, 85, 92, 93, 97, 98, 129, 132, 206, 207, 208, 306, 309, 313, 324, 325, 326, 327, 334, 349, 356, 362, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 382, 383, 384, 385, 386, 387, 403, 404, 405, 407, 408, 414, 415, 422, 425, 435, 441, 442, 444, 458, 460, 472, 482, 484, 491, 492, 495, 499, 504, 516, 517, 518, 519, 520, 521, 560, 565, 617, 619, 622, 624, 625, 627, 631, 632, 636, 650, 653, 655, 658, 662, 666, 670, 672, 675, 681, 690, 695, 696, 697, 726, 732, 735, 755, 756, 764, 766, 767, 780, 794, 800, 826, 828, 830, 833, 838, 849, 851], "neww": 5, "newh": 5, "int": [5, 40, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 97, 101, 108, 112, 113, 122, 123, 127, 129, 130, 131, 132, 133, 136, 140, 141, 142, 149, 156, 159, 160, 163, 170, 185, 199, 200, 201, 208, 209, 218, 225, 226, 227, 228, 229, 230, 242, 245, 269, 273, 278, 284, 287, 294, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 334, 335, 338, 342, 349, 351, 353, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 422, 424, 425, 426, 427, 429, 432, 434, 435, 438, 439, 441, 446, 450, 451, 455, 459, 460, 463, 464, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 524, 534, 535, 536, 538, 541, 542, 545, 546, 560, 563, 565, 580, 581, 582, 586, 602, 603, 604, 605, 606, 609, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 655, 657, 658, 666, 667, 672, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 712, 713, 715, 717, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 739, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 765, 766, 767, 776, 779, 780, 793, 794, 813, 815, 816, 817, 819, 822, 823, 826, 828, 830, 831, 833, 835, 840, 849], "assert": [5, 9, 41, 43, 45, 69, 527, 622, 772, 803, 808, 809, 820, 823, 826, 827, 828, 830, 831, 837, 838], "too": [5, 52, 75, 218, 235, 242, 268, 371, 482, 620, 779, 805, 806, 807, 809, 815, 819, 831, 841], "small": [5, 9, 42, 51, 52, 57, 60, 74, 75, 80, 83, 235, 242, 268, 269, 328, 344, 365, 369, 370, 374, 430, 447, 490, 491, 492, 620, 625, 630, 668, 671, 673, 725, 779, 783, 800, 806, 814, 817, 823, 828, 833, 835, 839, 841, 849, 850, 857], "would": [5, 8, 9, 20, 21, 22, 23, 24, 26, 27, 30, 32, 34, 42, 48, 50, 52, 71, 73, 75, 82, 108, 112, 123, 209, 368, 371, 395, 400, 452, 453, 460, 462, 464, 465, 466, 473, 477, 488, 614, 619, 690, 691, 692, 694, 696, 697, 699, 701, 766, 776, 780, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 817, 818, 820, 822, 824, 826, 827, 828, 830, 831, 833, 834, 835, 837, 839, 840, 841, 842, 846, 849, 856, 862], "pixel": [5, 40, 52, 75, 368, 403], "resampl": 5, "nearest": [5, 52, 75, 218, 235, 268, 278, 338, 365, 368, 380, 403, 521, 620, 833], "bicub": [5, 52, 75, 368, 403, 833], "zero": [5, 40, 48, 49, 51, 52, 53, 54, 56, 57, 59, 62, 63, 65, 66, 71, 72, 74, 75, 77, 79, 80, 84, 85, 88, 89, 93, 107, 109, 110, 111, 113, 124, 125, 127, 129, 134, 136, 137, 138, 140, 141, 144, 147, 148, 216, 217, 218, 220, 221, 222, 223, 224, 227, 229, 230, 232, 233, 234, 235, 237, 240, 241, 242, 249, 250, 251, 252, 258, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 285, 286, 288, 289, 291, 293, 297, 299, 305, 307, 316, 323, 329, 330, 333, 334, 335, 338, 346, 349, 351, 352, 353, 354, 360, 362, 365, 368, 369, 371, 378, 380, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 410, 411, 412, 413, 414, 415, 420, 422, 433, 436, 458, 468, 473, 474, 485, 503, 512, 513, 530, 534, 541, 561, 566, 603, 604, 609, 610, 611, 612, 614, 617, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 650, 653, 654, 656, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 673, 679, 681, 682, 689, 690, 691, 692, 694, 695, 702, 725, 727, 728, 729, 732, 733, 734, 735, 737, 738, 739, 740, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 779, 780, 784, 810, 813, 815, 816, 817, 822, 824, 825, 828, 835, 838, 839, 847, 855], "int64": [5, 52, 61, 62, 64, 65, 72, 84, 85, 87, 88, 137, 150, 156, 159, 161, 163, 167, 168, 172, 179, 310, 362, 378, 380, 504, 512, 513, 617, 618, 632, 634, 635, 727, 732, 733, 734, 743, 745, 746, 751, 753, 764, 765, 815, 827, 830, 835], "enumer": [5, 40, 42, 769, 800], "ndim": [5, 52, 57, 62, 75, 80, 85, 97, 101, 369, 371, 434, 435, 441, 452, 453, 454, 467, 475, 477, 486, 602, 622, 625, 632, 672, 675, 735, 813, 823, 830], "newaxi": [5, 615], "transpos": [5, 23, 26, 27, 44, 52, 56, 57, 69, 75, 79, 80, 97, 369, 416, 432, 434, 436, 510, 624, 625, 637, 639, 641, 643, 644, 645, 665, 669, 671, 677, 766, 780, 800, 820, 826, 837, 840, 850], "255": [5, 23, 26, 27, 40, 41, 42, 44, 56, 75, 79, 229, 620, 646, 800, 850], "car": 5, "full_img": 5, "from_numpi": [5, 838], "fals": [5, 6, 7, 8, 13, 17, 26, 29, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 191, 192, 197, 199, 202, 203, 205, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 366, 368, 369, 370, 371, 374, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 561, 565, 566, 567, 570, 573, 574, 576, 577, 579, 580, 581, 583, 585, 587, 588, 590, 595, 596, 598, 599, 601, 604, 605, 607, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 716, 717, 718, 719, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 762, 764, 765, 766, 767, 772, 776, 777, 780, 781, 782, 784, 786, 789, 793, 794, 795, 798, 800, 803, 806, 809, 811, 814, 815, 816, 817, 819, 820, 826, 827, 828, 830, 832, 833, 835, 838, 839, 840, 849, 850], "permut": [5, 7, 40, 59, 82, 97, 378, 503, 627, 692, 699, 850], "img_numpi": 5, "cpu": [5, 6, 8, 21, 22, 23, 24, 26, 40, 41, 42, 44, 45, 48, 50, 52, 61, 71, 73, 75, 84, 121, 127, 130, 132, 133, 136, 137, 138, 144, 188, 189, 191, 192, 193, 194, 199, 202, 204, 206, 209, 210, 212, 214, 375, 497, 498, 500, 501, 617, 619, 625, 631, 664, 726, 727, 728, 729, 761, 779, 780, 781, 782, 783, 784, 785, 800, 803, 806, 807, 812, 815, 816, 820, 827, 830, 841, 854, 856, 859, 861], "torch_unet": 5, "unet_carvana": 5, "when": [5, 7, 8, 9, 17, 19, 21, 22, 23, 24, 26, 27, 29, 31, 32, 33, 41, 43, 47, 48, 49, 51, 52, 57, 58, 61, 62, 65, 69, 71, 72, 74, 75, 80, 81, 84, 85, 88, 98, 136, 147, 218, 235, 240, 242, 258, 268, 286, 287, 294, 329, 330, 360, 365, 368, 369, 370, 374, 375, 380, 390, 403, 415, 422, 426, 435, 441, 442, 447, 490, 492, 498, 518, 521, 551, 567, 575, 581, 617, 618, 620, 622, 624, 625, 626, 627, 629, 631, 632, 635, 637, 650, 668, 673, 684, 685, 686, 694, 717, 718, 727, 728, 729, 732, 733, 735, 736, 748, 750, 752, 754, 764, 767, 779, 780, 781, 782, 783, 789, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 840, 841, 842, 845, 846, 849, 850, 854, 856, 859, 860, 861, 862], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 7, 13, 26, 27, 40, 42, 52, 75, 358, 367, 368, 390, 395, 396, 400, 401, 411, 412, 777, 779, 780, 782, 784, 800, 806, 811, 818, 825, 830, 831, 833, 840, 841, 849, 856, 857], "effici": [5, 6, 7, 8, 15, 16, 18, 19, 26, 27, 28, 29, 52, 57, 75, 80, 369, 370, 430, 446, 574, 596, 622, 625, 668, 800, 806, 807, 813, 823, 824, 826, 830, 832, 835, 838, 841, 850, 856, 858, 859], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 48, 52, 53, 71, 75, 93, 122, 123, 135, 368, 369, 371, 380, 412, 435, 479, 517, 518, 587, 617, 622, 789, 793, 805, 810, 815, 816, 819, 822, 826, 827, 828, 831, 833, 835, 837, 840, 843], "isinst": [5, 9, 24, 26, 27, 819, 827, 830, 831, 839, 840], "len": [5, 9, 40, 42, 48, 52, 57, 75, 80, 134, 310, 319, 320, 362, 368, 369, 380, 401, 412, 424, 427, 435, 441, 521, 617, 625, 660, 680, 800, 813, 814, 819, 826, 827, 830, 837, 840, 849], "uint8": [5, 23, 26, 27, 42, 150, 157, 161, 172, 175, 180, 186, 618, 764, 765, 815, 830], "elif": [5, 6, 814, 819, 826, 827, 828], "bool": [5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 124, 129, 130, 131, 132, 133, 134, 136, 138, 144, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 183, 187, 191, 192, 194, 195, 197, 199, 202, 203, 208, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 323, 328, 329, 330, 331, 332, 334, 336, 343, 344, 349, 350, 352, 354, 355, 356, 362, 365, 366, 368, 369, 370, 371, 374, 380, 386, 387, 388, 390, 391, 392, 393, 403, 404, 405, 406, 409, 411, 413, 415, 422, 426, 429, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 462, 463, 464, 465, 466, 469, 473, 477, 480, 482, 483, 484, 488, 490, 492, 493, 494, 495, 496, 498, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 565, 566, 570, 579, 580, 581, 583, 585, 587, 588, 601, 604, 605, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 647, 648, 649, 650, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 679, 680, 682, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 716, 717, 718, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 762, 764, 765, 766, 776, 780, 783, 784, 793, 794, 798, 815, 817, 819, 826, 827, 830, 831, 833, 835, 840, 849, 850], "argmax": [5, 41, 42, 43, 62, 85, 371, 479, 632, 800, 827, 849], "fromarrai": [5, 23, 26, 27, 42], "interpol": [5, 40, 52, 75, 346, 365, 368, 380, 521, 624, 650, 833, 856], "mode": [5, 32, 44, 52, 57, 69, 75, 80, 91, 92, 93, 94, 95, 96, 205, 208, 213, 218, 235, 268, 321, 358, 359, 362, 367, 368, 369, 371, 398, 403, 411, 412, 424, 426, 432, 434, 435, 441, 457, 467, 472, 474, 475, 477, 479, 482, 483, 486, 567, 568, 569, 573, 574, 576, 577, 590, 591, 595, 596, 598, 599, 619, 620, 622, 625, 672, 772, 780, 781, 782, 797, 806, 807, 808, 813, 816, 817, 820, 833, 841, 856, 859], "bilinear": [5, 52, 75, 368, 403, 833], "torch_mask": 5, "squeez": [5, 40, 59, 82, 627, 856], "torch_result": 5, "to_numpi": [5, 9, 26, 27, 38, 41, 42, 45, 53, 76, 622, 800, 820, 828, 838], "give": [5, 18, 28, 38, 52, 56, 75, 79, 174, 358, 367, 368, 410, 414, 618, 624, 627, 637, 638, 639, 640, 642, 644, 646, 694, 779, 800, 806, 807, 808, 811, 814, 815, 817, 818, 820, 821, 822, 830, 847, 856, 860], "img_tf": 5, "math": [5, 43, 93, 285, 620, 815, 826, 827, 828, 840, 854], "ve": [5, 9, 15, 24, 26, 61, 84, 631, 726, 805, 806, 807, 820, 830, 833, 834, 837, 843], "lot": [5, 814, 815, 824, 830, 841, 846, 847, 855], "far": [5, 26, 27, 629, 706, 717, 794, 816, 817, 836, 861, 862], "space": [5, 48, 51, 52, 53, 71, 74, 75, 76, 121, 132, 133, 287, 342, 365, 370, 444, 534, 538, 617, 620, 622, 833, 846], "del": [5, 814], "empty_cach": 5, "permute_dim": [5, 59, 82, 627, 820], "usr": [5, 40, 41, 42, 45, 806], "local": [5, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 31, 32, 33, 40, 41, 42, 45, 374, 495, 546, 622, 801, 806, 809, 812, 820, 823, 828, 830], "lib": [5, 9, 21, 22, 23, 24, 40, 41, 42, 45], "python3": [5, 7, 21, 22, 23, 24, 26, 40, 42, 45, 800, 806, 807], "dist": [5, 40, 41, 42, 45], "func_wrapp": [5, 46, 51, 52, 68, 74, 75, 105, 106, 107, 108, 109, 110, 111, 112, 113, 286, 290, 294, 295, 297, 360, 614, 620, 776, 816, 827, 832], "242": [5, 75], "userwarn": [5, 7, 8, 21, 22, 23, 24, 45], "creat": [5, 8, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 40, 41, 42, 44, 45, 48, 51, 52, 61, 69, 71, 74, 75, 80, 84, 93, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 269, 306, 307, 317, 319, 321, 322, 362, 368, 369, 371, 375, 386, 387, 388, 409, 426, 435, 441, 450, 458, 474, 479, 497, 498, 499, 500, 501, 569, 585, 602, 613, 617, 620, 622, 623, 631, 670, 726, 727, 728, 729, 731, 761, 772, 777, 779, 780, 781, 782, 783, 784, 785, 801, 806, 807, 810, 811, 812, 814, 815, 816, 819, 823, 824, 826, 827, 828, 830, 833, 835, 836, 839, 842, 843, 846, 849, 850, 851, 856, 857, 862], "mani": [5, 26, 27, 30, 59, 69, 82, 142, 322, 362, 617, 627, 696, 800, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 827, 828, 830, 833, 835, 837, 838, 841, 845, 846, 847, 852, 856, 859, 862, 863], "view": [5, 8, 21, 22, 23, 24, 52, 59, 75, 97, 128, 139, 371, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 488, 544, 617, 622, 627, 690, 691, 692, 694, 696, 697, 699, 701, 806, 807, 819, 856], "lead": [5, 8, 21, 22, 23, 24, 57, 69, 80, 98, 242, 369, 430, 569, 620, 622, 625, 672, 675, 766, 814, 815, 817, 829, 831, 841, 846, 847], "overhead": [5, 8, 19, 21, 22, 23, 24, 26, 27, 29, 841, 849, 859], "perform": [5, 9, 19, 21, 22, 23, 24, 26, 27, 29, 31, 38, 40, 48, 52, 56, 57, 65, 66, 71, 75, 76, 79, 80, 88, 89, 108, 112, 132, 133, 205, 213, 235, 268, 289, 335, 356, 365, 366, 368, 369, 371, 378, 380, 390, 391, 392, 393, 395, 396, 400, 401, 409, 411, 435, 451, 504, 512, 513, 534, 535, 536, 549, 550, 551, 567, 577, 614, 617, 619, 620, 622, 624, 625, 628, 629, 635, 636, 647, 649, 675, 677, 682, 703, 704, 705, 713, 714, 745, 746, 755, 756, 759, 776, 780, 794, 809, 810, 811, 813, 815, 816, 817, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 838, 841, 847, 849, 850, 853, 856, 857, 858, 859, 860, 861, 863], "inplac": [5, 7, 8, 9, 21, 22, 23, 24, 47, 53, 69, 76, 92, 95, 525, 527, 548, 551, 552, 569, 570, 622, 629, 713, 714, 718, 723, 724, 771, 772, 777, 784, 808, 810, 817, 820, 822, 824, 827, 833, 837, 839], "17": [5, 8, 9, 21, 22, 23, 24, 38, 40, 42, 45, 46, 52, 57, 68, 74, 75, 76, 77, 79, 80, 84, 98, 107, 108, 133, 218, 235, 260, 268, 298, 306, 356, 362, 368, 371, 386, 387, 395, 396, 399, 400, 404, 405, 410, 414, 464, 535, 550, 603, 605, 614, 617, 620, 622, 623, 624, 625, 629, 631, 638, 647, 648, 658, 662, 714, 727, 728, 729, 731, 813], "factor": [5, 9, 52, 54, 56, 57, 75, 77, 79, 80, 91, 92, 93, 94, 95, 206, 207, 208, 368, 369, 374, 401, 412, 426, 427, 435, 438, 440, 441, 495, 603, 604, 609, 610, 619, 623, 624, 625, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 654, 764, 766, 767, 779, 780, 784, 819, 846], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 7, 26, 27, 40, 49, 51, 56, 72, 74, 79, 98, 163, 239, 368, 389, 399, 534, 544, 618, 620, 622, 624, 625, 639, 641, 646, 670, 800], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 7, 40, 41, 800], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 17, 26, 27, 45, 49, 51, 52, 53, 57, 62, 72, 74, 75, 76, 80, 85, 87, 97, 98, 102, 148, 158, 174, 181, 201, 218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 243, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 264, 265, 266, 267, 268, 271, 273, 277, 284, 289, 307, 328, 333, 339, 340, 341, 343, 345, 350, 354, 362, 365, 369, 371, 380, 436, 468, 511, 523, 526, 618, 619, 620, 622, 625, 632, 634, 655, 662, 665, 670, 674, 677, 678, 681, 736, 743, 761, 786, 800, 809, 815, 817, 819, 822, 826, 827, 850, 851], "x2": [5, 17, 26, 27, 49, 51, 52, 53, 57, 62, 72, 74, 75, 76, 80, 85, 97, 98, 102, 148, 174, 181, 201, 218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 243, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 264, 265, 266, 267, 268, 271, 273, 277, 284, 289, 328, 333, 339, 340, 341, 343, 345, 350, 354, 365, 369, 371, 380, 424, 436, 468, 511, 523, 526, 618, 619, 620, 622, 625, 632, 655, 662, 665, 670, 674, 677, 678, 681, 736, 761, 786, 809, 815, 817, 819, 822, 826, 827], "x3": [5, 49, 53, 148, 523, 618, 622], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 780, 800, 839, 850], "batchnorm2d": [5, 7, 783], "downscal": [5, 53, 76, 529, 530, 551, 622], "maxpool": [5, 7], "doubl": 5, "conv": [5, 624, 780, 833], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 52, 75, 368, 403, 833], "align_corn": [5, 52, 75, 368, 403, 833], "conv2dtranspos": [5, 780], "valid": [5, 40, 42, 52, 56, 66, 75, 79, 89, 92, 93, 152, 368, 369, 386, 387, 388, 404, 405, 406, 407, 409, 410, 414, 433, 441, 554, 618, 622, 624, 627, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 690, 698, 755, 756, 764, 765, 780, 793, 806, 811, 815, 817, 821, 825, 828, 830, 849, 857], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 52, 59, 75, 82, 371, 474, 627, 689, 702], "constant_pad": [5, 59, 82, 627], "concat": [5, 38, 43, 53, 59, 69, 82, 208, 538, 619, 622, 627, 702, 828, 833, 835, 849], "openmim": 6, "mim": 6, "0rc8": 6, "torch": [6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 43, 44, 45, 48, 53, 57, 67, 76, 80, 124, 162, 189, 190, 204, 206, 211, 278, 329, 330, 365, 527, 551, 583, 617, 618, 619, 620, 622, 625, 628, 675, 704, 705, 761, 772, 777, 789, 800, 803, 806, 807, 809, 810, 811, 812, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 837, 838, 840, 841, 843, 849, 850, 851, 862], "request": [6, 7, 8, 21, 22, 23, 24, 26, 27, 40, 43, 52, 199, 375, 501, 619, 800, 801, 805, 817, 821, 831, 833, 847, 850], "get_model": 6, "list_model": 6, "mmengin": 6, "configdict": 6, "saniti": [6, 8, 9, 26, 827], "checkpoint": [6, 7, 43, 841], "correct": [6, 11, 13, 22, 32, 38, 40, 42, 65, 88, 181, 369, 437, 618, 627, 635, 687, 752, 754, 761, 764, 800, 803, 805, 807, 808, 813, 814, 815, 816, 819, 820, 822, 823, 826, 828, 830, 850], "against": [6, 49, 52, 53, 57, 62, 72, 74, 75, 76, 80, 85, 148, 267, 286, 328, 331, 334, 344, 365, 380, 517, 518, 519, 520, 521, 558, 618, 620, 622, 625, 632, 665, 666, 668, 671, 732, 830, 835, 841, 845, 856], "zoo": 6, "checkpoint_nam": [6, 8, 26], "convnext": 6, "tiny_32xb128": 6, "noema_in1k": 6, "openmmlab": 6, "dure": [6, 8, 19, 21, 26, 29, 31, 32, 50, 54, 65, 69, 73, 77, 88, 209, 368, 391, 392, 393, 569, 589, 603, 604, 609, 619, 622, 623, 624, 625, 628, 635, 647, 665, 703, 704, 705, 752, 754, 772, 783, 784, 806, 813, 815, 816, 819, 823, 824, 826, 827, 828, 829, 830, 833, 841, 849, 856, 857, 862], "appropri": [6, 17, 21, 22, 24, 26, 27, 53, 62, 67, 85, 90, 218, 235, 242, 268, 328, 344, 365, 620, 632, 732, 800, 805, 806, 807, 819, 824, 830], "get_scal": 6, "cfg": [6, 821], "kei": [6, 19, 20, 26, 27, 42, 44, 47, 52, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 163, 167, 168, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 378, 391, 392, 393, 411, 442, 443, 444, 445, 446, 447, 448, 449, 458, 459, 480, 482, 484, 490, 492, 493, 494, 496, 498, 504, 511, 512, 513, 514, 523, 524, 526, 527, 529, 530, 531, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 622, 624, 628, 629, 638, 639, 640, 641, 647, 648, 650, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 703, 704, 709, 715, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 764, 765, 771, 777, 780, 784, 800, 812, 813, 814, 823, 826, 827, 828, 830, 838, 850, 856, 859, 863], "input_shap": [6, 13, 24, 26, 27, 800], "block": [6, 26, 27, 30, 31, 32, 33, 369, 428, 800, 807, 813, 815, 819, 823, 830, 834, 836, 840, 841, 843, 850, 861, 863], "url": [6, 8, 23, 26, 27, 40, 43, 800, 850], "cocodataset": [6, 8, 23, 26, 27, 43, 800, 850], "org": [6, 7, 8, 23, 26, 27, 40, 42, 43, 45, 51, 52, 74, 75, 77, 142, 150, 238, 248, 249, 264, 322, 329, 330, 362, 365, 368, 371, 380, 411, 482, 511, 603, 604, 617, 618, 620, 623, 625, 627, 635, 673, 674, 702, 752, 800, 818, 850], "val2017": [6, 8, 26, 43], "000000039769": [6, 8, 26, 43], "stream": [6, 8, 23, 26, 27, 40, 43, 50, 73, 209, 619, 800, 850, 860], "_config": 6, "train_pipelin": 6, "tensor_imag": 6, "And": [6, 8, 9, 11, 13, 18, 21, 26, 27, 28, 41, 72, 358, 359, 367, 800, 809, 812, 821, 823, 830, 849], "final": [6, 8, 11, 13, 15, 23, 26, 27, 32, 38, 39, 48, 52, 53, 75, 76, 92, 120, 132, 133, 316, 362, 368, 412, 538, 616, 617, 622, 624, 649, 650, 794, 805, 807, 809, 810, 812, 814, 815, 817, 818, 823, 825, 826, 827, 829, 833, 834, 838, 849, 850, 852, 862], "transpiled_graph": [6, 8, 26], "what": [6, 8, 15, 20, 26, 27, 30, 31, 34, 39, 40, 368, 401, 412, 766, 794, 800, 805, 807, 808, 813, 814, 817, 818, 821, 822, 824, 825, 826, 827, 828, 830, 834, 835, 837, 838, 839, 840, 841, 846, 847, 852, 857, 858, 861], "improv": [6, 8, 9, 26, 29, 807, 815, 822, 823, 833, 835, 843, 847, 849, 854, 856, 858, 859], "For": [6, 7, 8, 9, 17, 19, 26, 27, 29, 32, 34, 48, 52, 57, 63, 75, 80, 121, 134, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 249, 250, 251, 256, 257, 258, 259, 260, 263, 268, 270, 271, 273, 277, 278, 279, 280, 281, 282, 285, 286, 288, 324, 325, 326, 329, 330, 332, 352, 362, 365, 369, 371, 432, 434, 454, 474, 477, 617, 620, 625, 627, 633, 635, 673, 675, 679, 687, 698, 737, 738, 739, 740, 748, 750, 751, 753, 765, 777, 805, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 845, 846, 847, 849, 853, 854, 857, 862, 863], "compil": [6, 7, 8, 9, 21, 22, 24, 26, 27, 30, 43, 45, 286, 620, 772, 800, 806, 827, 831, 835, 841, 843, 850, 852, 855, 856, 857, 860, 863], "origin": [6, 8, 9, 24, 26, 27, 28, 29, 30, 32, 39, 40, 41, 45, 52, 57, 59, 65, 69, 75, 80, 82, 88, 92, 95, 97, 98, 223, 248, 275, 313, 362, 368, 369, 371, 380, 411, 435, 467, 473, 475, 478, 512, 513, 517, 518, 519, 520, 521, 620, 625, 627, 635, 666, 694, 695, 746, 761, 766, 789, 790, 800, 802, 805, 806, 807, 811, 812, 814, 815, 820, 824, 826, 827, 828, 835, 847, 849, 850, 856, 857], "_f": [6, 8, 26], "comp_model": [6, 8, 26], "equival": [6, 8, 26, 57, 80, 92, 93, 121, 229, 242, 263, 264, 277, 278, 371, 458, 482, 487, 617, 620, 625, 668, 671, 674, 682, 789, 826, 827, 833, 838, 840, 842, 850], "just": [6, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 38, 40, 42, 52, 57, 65, 80, 92, 95, 142, 322, 362, 369, 434, 617, 625, 635, 668, 747, 772, 780, 800, 803, 806, 807, 809, 811, 814, 815, 816, 817, 818, 820, 823, 824, 826, 827, 828, 830, 835, 837, 838, 841, 846, 847, 850, 856, 857, 862], "np_imag": [6, 23, 26, 27], "jax_imag": 6, "hk": [6, 8, 26, 40, 44, 800, 840, 850], "rng_kei": [6, 8, 26, 800, 850], "random": [6, 8, 11, 13, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 33, 40, 42, 43, 52, 56, 69, 75, 79, 317, 318, 319, 320, 321, 362, 369, 370, 426, 435, 441, 447, 497, 498, 499, 500, 501, 624, 647, 726, 727, 728, 729, 730, 731, 764, 766, 779, 793, 794, 800, 805, 816, 828, 830, 831, 840, 850, 851, 856], "prngkei": [6, 8, 19, 20, 26, 27, 40, 800, 840, 850], "42": [6, 8, 9, 19, 20, 24, 26, 27, 38, 40, 41, 46, 61, 68, 77, 84, 113, 229, 368, 389, 399, 603, 607, 614, 620, 623, 625, 630, 631, 635, 666, 670, 725, 726, 727, 728, 729, 730, 745, 747, 800, 835, 840, 850], "jax_mlp_forward": 6, "param": [6, 8, 9, 26, 40, 41, 42, 44, 69, 75, 76, 98, 524, 541, 542, 622, 786, 800, 840, 850], "init": [6, 8, 26, 40, 42, 52, 75, 369, 426, 435, 441, 800, 809, 840, 850], "rng": [6, 8, 26, 40, 800, 840, 850], "appli": [6, 8, 21, 22, 23, 24, 26, 27, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 365, 366, 368, 369, 370, 371, 374, 380, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 403, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 614, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 670, 671, 672, 673, 675, 679, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 712, 715, 718, 719, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 766, 767, 776, 780, 783, 800, 805, 806, 807, 810, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 830, 831, 833, 837, 838, 839, 840, 841, 849, 850, 857], "both": [6, 7, 8, 9, 11, 13, 21, 23, 26, 27, 31, 32, 39, 41, 48, 51, 52, 53, 56, 57, 71, 74, 75, 76, 79, 80, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 150, 166, 170, 173, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 323, 329, 330, 332, 333, 335, 339, 344, 362, 365, 368, 369, 371, 375, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 468, 474, 482, 485, 497, 511, 514, 541, 545, 547, 549, 558, 588, 612, 613, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 780, 800, 803, 805, 807, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 826, 827, 830, 833, 835, 837, 838, 839, 840, 841, 849, 850, 856, 859, 861, 862, 863], "optim": [6, 8, 9, 17, 21, 22, 24, 26, 27, 40, 42, 43, 45, 52, 54, 75, 77, 306, 362, 370, 446, 447, 525, 611, 622, 623, 628, 703, 704, 705, 779, 794, 800, 815, 826, 833, 836, 838, 840, 847, 850, 854, 855, 856, 857, 858, 859, 860, 863], "each": [6, 8, 9, 19, 20, 21, 26, 27, 29, 30, 31, 33, 40, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 62, 63, 65, 69, 72, 74, 75, 76, 77, 79, 80, 82, 85, 86, 88, 92, 93, 95, 97, 98, 106, 107, 109, 110, 111, 113, 117, 134, 148, 160, 163, 208, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 292, 297, 299, 300, 301, 303, 304, 305, 310, 321, 324, 325, 326, 332, 339, 343, 347, 352, 355, 360, 362, 365, 368, 369, 371, 374, 375, 378, 380, 386, 387, 388, 391, 392, 393, 396, 404, 405, 406, 407, 410, 412, 413, 414, 421, 422, 427, 434, 435, 439, 441, 452, 453, 454, 458, 459, 460, 465, 466, 468, 469, 471, 473, 474, 477, 479, 487, 488, 495, 497, 504, 509, 510, 511, 512, 513, 514, 523, 526, 534, 541, 542, 558, 582, 602, 604, 605, 607, 609, 610, 611, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 654, 655, 656, 659, 660, 661, 665, 667, 668, 669, 671, 673, 674, 675, 680, 689, 693, 695, 696, 698, 700, 702, 712, 719, 726, 735, 737, 738, 740, 746, 747, 754, 764, 766, 780, 783, 784, 785, 794, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 840, 841, 845, 846, 847, 849, 850, 852, 853, 857, 859, 862], "timeit": [6, 8, 9, 19, 26, 27, 43, 45], "06": [6, 9, 21, 42, 49, 61, 74, 77, 96, 105, 160, 217, 233, 368, 389, 399, 609, 614, 618, 623, 729, 759, 761, 830, 838], "m": [6, 7, 8, 9, 26, 39, 41, 43, 45, 48, 52, 57, 61, 74, 75, 80, 84, 97, 134, 140, 141, 142, 262, 322, 323, 362, 368, 369, 370, 371, 375, 390, 421, 426, 427, 429, 443, 454, 465, 466, 480, 497, 498, 499, 500, 501, 617, 625, 629, 631, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 714, 727, 728, 729, 800, 806, 807, 808, 814, 835], "per": [6, 8, 9, 19, 40, 42, 52, 56, 75, 79, 313, 362, 368, 369, 371, 386, 387, 388, 404, 405, 406, 407, 434, 481, 624, 638, 640, 641, 642, 643, 646, 650, 780, 807, 814, 824, 827, 838], "loop": [6, 8, 9, 19, 34, 67, 75, 90, 117, 120, 368, 413, 616, 628, 703, 704, 705, 800, 811, 841, 849], "100": [6, 7, 8, 9, 38, 40, 42, 48, 51, 52, 71, 74, 75, 76, 79, 96, 133, 142, 229, 269, 282, 322, 344, 353, 362, 365, 368, 369, 371, 391, 392, 435, 441, 479, 542, 550, 566, 617, 620, 622, 625, 629, 663, 712, 800, 814, 815, 830, 838, 839, 840, 841, 846, 847, 849], "block_until_readi": 6, "08": [6, 52, 65, 75, 84, 221, 328, 344, 365, 368, 370, 389, 399, 447, 620, 728, 729, 754, 759, 764, 821], "\u00b5": [6, 8, 9, 19], "made": [6, 8, 26, 52, 59, 75, 369, 371, 428, 452, 453, 454, 698, 805, 807, 809, 810, 813, 814, 819, 821, 823, 825, 826, 827, 831, 833, 835, 837, 846, 856], "significantli": [6, 8, 26, 52, 57, 75, 80, 369, 439, 625, 675, 814, 845, 854], "line": [6, 8, 9, 15, 16, 19, 20, 23, 26, 27, 29, 30, 41, 42, 285, 620, 800, 806, 809, 810, 814, 816, 817, 819, 827, 830, 833, 836, 837, 838, 839, 847, 850, 859], "even": [6, 23, 26, 27, 52, 75, 92, 235, 268, 273, 278, 371, 380, 474, 511, 620, 806, 807, 809, 811, 814, 815, 816, 818, 822, 823, 826, 827, 828, 833, 837, 838, 839, 840, 841, 846, 847, 862], "better": [6, 9, 29, 38, 44, 45, 805, 808, 827, 828, 831, 833, 834, 837, 838, 839, 847, 859], "v100": 6, "3x": 6, "increas": [6, 8, 9, 19, 26, 29, 52, 57, 59, 75, 80, 82, 95, 371, 380, 474, 514, 625, 627, 680, 689, 702, 766, 815, 819, 827, 831, 833, 845, 849, 856], "execut": [6, 8, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 31, 34, 41, 43, 45, 118, 120, 589, 616, 619, 622, 806, 807, 812, 813, 814, 815, 816, 817, 819, 823, 824, 826, 830, 833, 835, 837, 840, 841, 843, 849, 852, 856, 857, 858, 859, 860, 862], "train2017": [6, 8, 23, 26, 27, 800, 850], "000000283921": [6, 8, 26], "out_torch": [6, 8, 26], "et": [6, 624, 625, 650, 675], "took": [6, 74, 275], "out_jax": [6, 8, 26], "1e": [6, 7, 8, 11, 13, 26, 38, 42, 49, 52, 54, 57, 58, 60, 72, 75, 77, 80, 81, 83, 96, 160, 328, 344, 365, 370, 374, 447, 490, 491, 492, 571, 572, 580, 593, 594, 603, 604, 609, 611, 618, 622, 623, 625, 626, 630, 675, 684, 685, 686, 725, 759, 761, 781, 783, 784, 800, 803, 813, 820, 823, 826, 828, 839, 840], "66m": 6, "53m": 6, "That": [6, 8, 11, 13, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 40, 277, 370, 446, 620, 793, 806, 807, 810, 830, 837, 838, 839, 857], "pretti": [6, 8, 26, 27, 40, 803, 820, 838, 862], "much": [6, 8, 9, 17, 18, 24, 26, 27, 28, 29, 40, 95, 328, 344, 365, 779, 805, 806, 807, 810, 813, 815, 823, 826, 827, 828, 831, 832, 833, 835, 837, 838, 846, 854, 856, 862, 863], "achiev": [6, 8, 9, 26, 800, 814, 815, 823, 824, 830, 833, 838, 840, 843], "solid": [6, 8, 26], "associ": [7, 52, 57, 75, 80, 218, 268, 371, 380, 451, 514, 620, 625, 668, 671, 683, 761, 807, 815, 823, 824, 827, 828, 830, 841], "python": [7, 11, 17, 29, 34, 38, 40, 41, 42, 44, 45, 52, 61, 75, 84, 121, 202, 214, 242, 277, 368, 375, 413, 497, 498, 499, 500, 501, 602, 617, 619, 620, 622, 631, 726, 727, 728, 729, 731, 789, 793, 794, 804, 806, 807, 809, 812, 813, 814, 819, 820, 827, 829, 830, 835, 837, 838, 841, 843, 844, 845, 846, 849, 853, 856, 857, 858, 862, 863], "2023": [7, 8, 21, 22, 23, 24, 40], "02": [7, 8, 40, 48, 53, 54, 60, 61, 74, 77, 84, 133, 220, 221, 260, 368, 389, 399, 400, 580, 581, 603, 604, 609, 617, 620, 622, 623, 626, 630, 631, 684, 725, 728, 729, 828], "52": [7, 9, 38, 51, 74, 76, 77, 84, 223, 233, 235, 380, 512, 534, 535, 550, 603, 620, 622, 623, 624, 625, 635, 648, 670, 729, 747, 793], "00": [7, 9, 40, 42, 45, 52, 53, 57, 75, 76, 80, 240, 306, 337, 362, 368, 389, 395, 399, 400, 538, 581, 620, 622, 625, 626, 661, 672, 684, 764, 821, 830], "resolv": [7, 40, 42, 52, 65, 242, 380, 512, 513, 620, 627, 635, 690, 745, 746, 751, 753, 807, 812, 815, 821, 835], "185": [7, 40, 68], "199": [7, 40, 221, 620], "110": [7, 40], "133": [7, 40, 56, 530, 622, 648], "111": [7, 40, 629, 724], "108": [7, 9, 21, 22, 23, 24, 40, 624, 635, 648, 747], "connect": [7, 40, 780, 800, 802, 806, 812, 829, 839, 840, 846, 854], "443": [7, 40, 280, 620], "sent": [7, 40], "await": [7, 40], "respons": [7, 40, 374, 495, 807, 814, 815], "200": [7, 9, 40, 76, 79, 229, 368, 391, 392, 542, 566, 620, 622, 793, 838], "ok": [7, 40, 806], "length": [7, 40, 41, 48, 52, 58, 59, 69, 75, 81, 82, 92, 93, 98, 121, 129, 134, 308, 311, 312, 327, 335, 362, 365, 368, 369, 371, 375, 378, 389, 390, 395, 396, 399, 400, 401, 411, 412, 413, 415, 427, 434, 474, 483, 499, 504, 602, 617, 622, 624, 625, 626, 627, 633, 650, 675, 676, 684, 694, 737, 764, 780, 830, 838], "10472": 7, "10k": 7, "plain": [7, 40], "tx": 7, "23k": 7, "kb": [7, 40, 42, 45], "57": [7, 9, 38, 40, 51, 52, 74, 75, 193, 216, 217, 220, 221, 223, 233, 234, 274, 290, 291, 360, 619, 620], "mb": [7, 40, 42, 45, 814], "01": [7, 21, 22, 24, 42, 48, 52, 53, 54, 57, 75, 76, 77, 80, 84, 133, 260, 278, 279, 306, 312, 337, 344, 362, 368, 389, 399, 400, 538, 580, 581, 603, 604, 609, 617, 620, 622, 623, 625, 628, 631, 661, 672, 704, 705, 728, 729, 764, 811, 840], "109": [7, 40, 57, 625, 662], "634575": 7, "620k": 7, "jpeg": [7, 41, 42], "619": 7, "70k": 7, "113": 7, "resnet34_weight": 7, "torch_resnet_34": 7, "conv1": 7, "kernel_s": [7, 24, 26, 27, 42, 52, 75, 368, 386, 387, 388, 407, 414, 780, 786], "stride": [7, 52, 56, 75, 76, 79, 97, 368, 371, 386, 387, 388, 404, 405, 406, 407, 409, 410, 414, 450, 622, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 780, 826, 831, 856], "bia": [7, 52, 56, 75, 79, 83, 374, 380, 495, 511, 561, 622, 624, 630, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 725, 780, 823, 830, 835, 839], "bn1": 7, "ep": [7, 52, 57, 60, 75, 80, 83, 160, 294, 360, 369, 370, 374, 422, 447, 490, 491, 492, 618, 625, 630, 668, 671, 725, 776, 783], "05": [7, 9, 42, 48, 51, 52, 54, 60, 74, 75, 77, 83, 133, 260, 312, 328, 337, 344, 362, 365, 374, 490, 491, 492, 549, 571, 593, 603, 604, 609, 617, 620, 622, 623, 625, 630, 666, 725, 759, 764, 779, 783, 828, 830], "momentum": [7, 40, 52, 75, 374, 490, 492, 783, 846], "affin": [7, 783], "track_running_stat": [7, 783], "dilat": [7, 44, 52, 56, 75, 79, 368, 371, 404, 405, 406, 409, 410, 414, 474, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 780], "ceil_mod": [7, 52, 75, 368, 386, 387, 388, 404, 405, 406, 409, 780], "layer1": 7, "basicblock": 7, "conv2": 7, "bn2": 7, "layer2": 7, "downsampl": [7, 52, 75, 403], "layer3": 7, "layer4": 7, "output_s": [7, 52, 75, 368, 382, 383, 384, 624, 652, 780, 800, 850], "fc": [7, 13, 40, 800, 839, 850], "in_featur": [7, 56, 79, 624, 648, 830], "out_featur": [7, 56, 79, 624, 648, 830], "resnet_34": 7, "ivy_resnet_34": 7, "34": [7, 9, 38, 40, 74, 75, 76, 84, 163, 233, 260, 281, 368, 380, 410, 518, 534, 535, 618, 620, 622, 624, 625, 631, 648, 667, 728, 729, 816], "333f7ec4": 7, "pth": 7, "root": [7, 8, 21, 22, 23, 24, 40, 41, 42, 45, 51, 74, 282, 620, 802, 805, 806, 807, 812, 820, 827, 838], "cach": [7, 8, 21, 22, 23, 24, 40, 42, 45, 190, 528, 619, 622, 789, 821, 823, 826, 830], "83": [7, 9, 38, 57, 79, 84, 282, 368, 380, 389, 399, 410, 512, 530, 620, 622, 624, 625, 648, 662, 728], "3m": 7, "56": [7, 9, 38, 40, 51, 52, 56, 61, 74, 75, 79, 133, 268, 282, 285, 288, 368, 389, 399, 603, 617, 620, 623, 624, 625, 629, 635, 639, 641, 643, 645, 648, 670, 706, 728, 747, 817], "4mb": 7, "preserv": [7, 8, 21, 22, 23, 24, 52, 53, 54, 69, 75, 76, 77, 98, 368, 369, 371, 380, 403, 435, 452, 453, 454, 465, 466, 485, 518, 551, 612, 622, 623, 627, 691, 764, 829, 830, 840, 841, 850], "multipl": [7, 8, 17, 21, 22, 23, 24, 26, 51, 52, 57, 60, 65, 66, 69, 74, 75, 76, 77, 80, 82, 83, 88, 89, 129, 229, 253, 260, 266, 267, 268, 270, 329, 330, 365, 368, 369, 371, 374, 378, 389, 396, 399, 401, 433, 460, 469, 488, 495, 504, 523, 530, 561, 603, 604, 607, 609, 610, 611, 612, 617, 620, 622, 623, 624, 625, 627, 630, 632, 635, 636, 639, 640, 641, 642, 654, 663, 665, 666, 679, 687, 690, 695, 696, 725, 732, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 780, 794, 800, 805, 807, 810, 811, 813, 817, 819, 821, 823, 826, 827, 828, 830, 833, 835, 841, 847, 849, 854, 855, 856, 863], "machin": [7, 8, 21, 22, 23, 24, 29, 30, 38, 44, 52, 57, 75, 80, 160, 163, 369, 422, 618, 625, 668, 671, 800, 806, 809, 823, 843, 846, 854, 856, 858, 859, 860, 861, 862], "rel": [7, 8, 21, 22, 23, 24, 52, 54, 57, 59, 64, 71, 75, 77, 80, 82, 87, 97, 131, 328, 344, 365, 370, 380, 446, 447, 511, 604, 607, 609, 610, 611, 623, 625, 627, 634, 658, 668, 671, 679, 691, 695, 741, 744, 759, 761, 807, 814, 828, 833, 856, 858], "project": [7, 8, 15, 20, 21, 22, 23, 24, 26, 27, 30, 93, 624, 650, 780, 800, 802, 805, 806, 807, 810, 811, 812, 830, 839, 841, 845, 846, 847, 850, 852, 854, 856, 859, 863], "consist": [7, 8, 9, 21, 22, 23, 24, 26, 27, 65, 69, 235, 242, 268, 368, 369, 411, 421, 620, 625, 635, 659, 660, 747, 781, 782, 809, 810, 814, 815, 821, 826, 835, 845, 857], "ad": [7, 8, 9, 21, 22, 23, 24, 52, 59, 75, 82, 90, 235, 268, 328, 344, 365, 374, 490, 491, 492, 580, 581, 620, 622, 624, 625, 627, 650, 660, 661, 690, 780, 785, 800, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 839, 841, 846, 849, 855, 856], "home": [7, 8, 21, 22, 23, 24, 814], "workspac": [7, 8, 21, 22, 23, 24, 806, 820], "95": [7, 9, 38, 52, 54, 57, 61, 68, 77, 79, 84, 105, 353, 365, 410, 603, 607, 611, 614, 623, 625, 631, 662, 728, 729], "builtin": [7, 806, 837, 839], "callabl": [7, 44, 52, 53, 67, 75, 76, 79, 90, 117, 118, 120, 161, 162, 194, 195, 208, 356, 358, 359, 366, 367, 368, 371, 410, 413, 415, 451, 474, 524, 528, 533, 535, 539, 540, 561, 589, 602, 606, 608, 613, 616, 618, 619, 622, 623, 628, 629, 703, 704, 705, 712, 713, 714, 716, 717, 718, 719, 759, 762, 772, 784, 795, 813, 819, 825, 827, 835, 848, 849, 850, 851], "track": [7, 17, 26, 27, 39, 40, 546, 622, 806, 807, 809, 825, 826, 849, 856], "properli": [7, 806, 808, 819, 821, 827, 830], "might": [7, 32, 53, 93, 174, 533, 618, 622, 803, 805, 806, 807, 814, 815, 817, 820, 821, 824, 827, 830, 831, 833, 835, 837, 838, 843], "_trace_graph": 7, "comparison": [7, 52, 75, 236, 271, 331, 365, 370, 446, 447, 620, 625, 676, 759, 819], "shown": [7, 24, 26, 67, 69, 90, 252, 275, 332, 365, 620, 805, 806, 807, 809, 812, 814, 815, 817, 819, 821, 822, 827, 828, 830, 831, 832, 835, 837, 841], "8507": 7, "1351": 7, "0069": 7, "85072625": 7, "13506091": 7, "00688289": 7, "resnet50_weight": 7, "torch_resnet_50": 7, "imagenet1k_v2": 7, "11ad3fa6": 7, "97": [7, 9, 38, 52, 54, 74, 77, 84, 221, 353, 365, 607, 620, 623, 728], "8m": 7, "8mb": 7, "bottleneck": [7, 845], "conv3": 7, "bn3": 7, "2048": [7, 581, 622], "resnet_50": 7, "ivy_resnet_50": 7, "3429": 7, "0408": 7, "0121": 7, "34288204": 7, "04077014": 7, "01212029": 7, "depend": [8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 31, 48, 49, 52, 53, 57, 63, 64, 72, 75, 80, 87, 88, 118, 124, 147, 215, 216, 217, 220, 221, 222, 223, 232, 233, 235, 238, 240, 256, 257, 258, 259, 268, 270, 273, 280, 281, 285, 286, 352, 365, 368, 369, 413, 421, 437, 583, 616, 617, 618, 620, 622, 625, 632, 634, 659, 660, 672, 673, 674, 675, 736, 741, 744, 754, 800, 802, 803, 805, 806, 807, 812, 815, 816, 818, 820, 824, 826, 827, 828, 829, 830, 833, 835, 841, 842, 846, 849, 854, 856, 857], "yet": [8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 42, 361, 363, 364, 372, 373, 377, 805, 806, 820, 841, 842, 849, 850, 851], "doc": [8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 41, 42, 75, 142, 322, 329, 330, 362, 365, 513, 617, 800, 801, 804, 805, 808, 817, 818, 821, 822, 830, 835, 838, 839, 849, 850, 851], "user": [8, 15, 21, 22, 23, 24, 26, 41, 42, 44, 269, 286, 371, 474, 569, 620, 622, 780, 781, 782, 793, 800, 806, 807, 808, 810, 811, 813, 814, 815, 816, 819, 824, 825, 826, 827, 830, 832, 833, 834, 835, 841, 842, 845, 846, 854, 856, 862, 863], "broken": [8, 21, 22, 23, 24, 852, 856], "permiss": [8, 21, 22, 23, 24, 806, 814], "conflict": [8, 21, 22, 23, 24, 32, 806, 807, 814, 827, 838], "behaviour": [8, 21, 22, 23, 24, 107, 110, 269, 614, 620, 804, 807, 808, 809, 810, 813, 815, 816, 818, 819, 822, 823, 824, 826, 827, 830, 831, 837], "system": [8, 21, 22, 23, 24, 42, 369, 436, 625, 674, 764, 800, 806, 807, 811, 814, 815, 841, 850, 854, 856, 859, 861, 863], "manag": [8, 17, 21, 22, 23, 24, 26, 569, 592, 622, 800, 801, 811, 815, 816, 826, 829, 841, 847, 858, 860], "recommend": [8, 21, 22, 23, 24, 263, 264, 277, 370, 444, 620, 635, 749, 752, 802, 806, 811, 812, 821, 824, 825, 849], "virtual": [8, 21, 22, 23, 24, 807, 827, 846, 859, 860], "instead": [8, 11, 13, 17, 21, 22, 23, 24, 26, 33, 40, 45, 51, 52, 57, 74, 75, 80, 93, 189, 277, 310, 362, 368, 380, 404, 405, 406, 511, 514, 619, 620, 625, 668, 764, 805, 806, 807, 809, 812, 814, 815, 817, 818, 819, 822, 823, 824, 826, 827, 828, 830, 833, 835, 837, 838, 841, 849, 850, 851, 854, 856, 862, 863], "pypa": [8, 21, 22, 23, 24], "io": [8, 21, 22, 23, 24, 41, 44, 806, 814], "venv": [8, 21, 22, 23, 24], "autofeatureextractor": [8, 26], "extractor": [8, 11, 13, 26, 42, 800], "hug": [8, 26, 849], "face": [8, 26, 801, 806, 809, 820, 821, 825, 833, 835, 849, 856, 862], "arch_nam": [8, 26], "microsoft": [8, 26, 846, 849, 850, 856, 861, 863], "50": [8, 9, 26, 27, 38, 42, 52, 65, 74, 75, 76, 234, 274, 350, 365, 368, 369, 371, 396, 420, 428, 479, 536, 542, 549, 550, 566, 580, 620, 622, 625, 629, 632, 635, 663, 670, 681, 707, 709, 735, 747, 764, 767, 825, 837, 849, 850], "feature_extractor": [8, 26], "23": [8, 9, 21, 22, 23, 24, 38, 40, 42, 51, 52, 57, 61, 71, 74, 75, 76, 79, 84, 131, 230, 233, 250, 251, 252, 275, 277, 278, 279, 281, 288, 332, 333, 365, 368, 371, 380, 386, 387, 389, 399, 404, 405, 406, 410, 414, 457, 512, 518, 617, 620, 624, 625, 629, 632, 643, 645, 658, 662, 666, 674, 676, 677, 707, 714, 718, 727, 728, 729, 736, 800, 814, 830, 835], "980130": 8, "e": [8, 26, 43, 44, 48, 52, 57, 61, 63, 64, 65, 67, 74, 75, 80, 84, 87, 88, 90, 92, 93, 97, 124, 133, 134, 137, 138, 142, 146, 175, 188, 215, 216, 217, 221, 223, 224, 227, 229, 231, 235, 236, 238, 241, 242, 248, 249, 256, 257, 258, 259, 266, 267, 268, 269, 271, 275, 277, 278, 281, 282, 286, 295, 322, 329, 330, 362, 365, 368, 369, 370, 371, 375, 380, 381, 386, 387, 390, 404, 405, 406, 407, 411, 424, 427, 433, 447, 482, 497, 498, 499, 500, 501, 512, 513, 522, 615, 617, 618, 619, 620, 624, 625, 627, 629, 631, 633, 634, 635, 650, 655, 660, 661, 665, 666, 668, 671, 674, 675, 676, 679, 682, 690, 698, 709, 713, 714, 715, 718, 723, 724, 727, 728, 729, 737, 738, 739, 740, 741, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 780, 793, 794, 800, 801, 803, 805, 806, 807, 808, 809, 811, 813, 815, 819, 820, 825, 827, 830, 835, 838, 841, 842, 843, 846, 847, 849, 852], "tensorflow": [8, 10, 11, 15, 17, 18, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 38, 44, 51, 52, 53, 74, 75, 142, 189, 219, 322, 362, 369, 422, 583, 617, 619, 622, 759, 772, 789, 800, 803, 804, 805, 806, 807, 809, 814, 815, 816, 820, 822, 826, 827, 828, 830, 831, 833, 835, 840, 841, 843, 846, 847, 850, 851, 854, 857, 859, 860, 862, 863], "xla": [8, 827, 841, 843, 856], "stream_executor": 8, "cuda_dnn": 8, "cc": [8, 21, 22, 24, 41, 820], "9342": 8, "unabl": [8, 807, 833], "regist": [8, 782, 807, 842, 849], "cudnn": 8, "factori": [8, 52, 370, 446, 447, 794], "attempt": [8, 21, 22, 23, 24, 40, 42, 45, 806, 832, 841], "plugin": [8, 806], "been": [8, 11, 13, 21, 23, 26, 27, 52, 53, 61, 75, 76, 84, 191, 278, 371, 481, 534, 535, 536, 619, 620, 622, 631, 726, 793, 794, 805, 807, 809, 811, 813, 814, 815, 816, 818, 819, 822, 823, 826, 830, 835, 837, 841, 842, 849, 856, 863], "980177": 8, "cuda_fft": 8, "609": 8, "cufft": 8, "980207": 8, "cuda_bla": 8, "1518": 8, "cubla": 8, "351203": 8, "tf2tensorrt": 8, "py_util": 8, "38": [8, 9, 22, 38, 40, 42, 45, 49, 52, 74, 75, 84, 160, 285, 350, 365, 368, 380, 387, 406, 409, 410, 512, 618, 620, 625, 667, 764, 817], "trt": 8, "could": [8, 26, 27, 32, 63, 633, 737, 738, 739, 740, 805, 806, 807, 809, 814, 815, 817, 824, 826, 827, 828, 830, 835, 837, 838, 839, 846, 847, 856, 861, 862], "find": [8, 15, 41, 42, 45, 57, 63, 69, 80, 625, 629, 633, 668, 708, 737, 738, 739, 740, 793, 794, 800, 801, 802, 804, 805, 806, 807, 809, 812, 814, 820, 825, 830, 833, 835, 838, 842, 843, 845, 849], "tensorrt": 8, "doe": [8, 9, 17, 21, 22, 23, 24, 26, 39, 41, 51, 52, 53, 59, 69, 74, 75, 82, 92, 142, 269, 271, 279, 322, 362, 369, 370, 380, 381, 421, 446, 447, 517, 518, 522, 551, 617, 620, 622, 625, 627, 659, 696, 759, 794, 803, 805, 807, 808, 811, 814, 815, 817, 818, 820, 821, 822, 823, 826, 827, 828, 830, 833, 835, 837, 838, 841, 843, 846, 849, 852, 856, 857, 863], "placement": [8, 805], "consid": [8, 9, 21, 22, 23, 24, 31, 32, 52, 57, 63, 75, 80, 113, 142, 263, 264, 322, 328, 333, 344, 362, 365, 369, 380, 422, 426, 435, 511, 614, 617, 620, 625, 633, 657, 668, 737, 738, 739, 740, 766, 779, 810, 814, 815, 823, 825, 831, 833, 836, 837, 838, 845, 846, 849, 853, 857, 861, 863], "except": [8, 21, 22, 23, 24, 41, 42, 45, 52, 53, 59, 61, 66, 69, 75, 76, 80, 84, 89, 149, 329, 330, 335, 353, 365, 371, 375, 380, 458, 482, 498, 517, 518, 533, 551, 568, 583, 589, 618, 622, 625, 627, 631, 632, 636, 671, 688, 690, 698, 727, 728, 729, 735, 755, 756, 759, 762, 766, 800, 807, 808, 809, 810, 814, 815, 816, 818, 820, 822, 826, 827, 831, 832, 833, 837, 841], "390": [8, 21, 22, 23, 24], "current": [8, 17, 21, 22, 23, 24, 26, 27, 40, 41, 47, 52, 53, 69, 75, 98, 117, 161, 162, 165, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 201, 203, 369, 371, 420, 421, 474, 482, 539, 540, 543, 546, 548, 552, 563, 564, 583, 616, 618, 619, 622, 625, 629, 659, 706, 716, 717, 761, 765, 781, 782, 789, 790, 794, 797, 800, 802, 805, 806, 807, 809, 811, 813, 814, 815, 816, 819, 820, 821, 823, 826, 827, 828, 829, 830, 833, 835, 840, 841, 847, 849, 856, 862, 863], "quietli": [8, 21, 22, 23, 24], "control": [8, 21, 22, 23, 24, 34, 52, 75, 142, 291, 322, 360, 362, 368, 371, 391, 392, 393, 457, 483, 569, 617, 622, 625, 657, 813, 815, 816, 825, 826, 827, 828, 833, 837, 838, 843, 849, 856, 862], "set_inplace_mod": [8, 21, 22, 23, 24, 592, 622], "strict": [8, 21, 22, 23, 24, 569, 592, 622], "rais": [8, 21, 22, 23, 24, 41, 42, 48, 52, 53, 61, 63, 66, 69, 71, 75, 76, 82, 84, 86, 89, 123, 149, 238, 273, 329, 330, 339, 365, 368, 370, 371, 375, 380, 401, 412, 447, 452, 453, 460, 462, 464, 465, 466, 473, 482, 488, 498, 517, 518, 527, 551, 569, 571, 581, 583, 589, 593, 618, 620, 622, 625, 627, 631, 632, 633, 635, 636, 665, 667, 681, 690, 691, 692, 694, 696, 697, 698, 699, 701, 727, 728, 729, 735, 740, 748, 750, 755, 756, 759, 766, 784, 800, 807, 809, 811, 815, 816, 819, 826, 827, 831, 832, 835, 837, 842, 846], "error": [8, 9, 21, 22, 23, 24, 32, 43, 45, 51, 52, 56, 69, 74, 75, 79, 105, 237, 285, 329, 330, 337, 365, 369, 370, 371, 380, 381, 435, 441, 443, 445, 482, 518, 522, 569, 614, 620, 622, 624, 625, 635, 653, 673, 676, 748, 750, 766, 784, 797, 801, 804, 805, 806, 807, 809, 810, 811, 814, 815, 816, 817, 821, 822, 827, 830, 831, 832, 837, 841, 847, 856], "whenev": [8, 21, 22, 23, 24, 780, 807, 811, 814, 815, 819, 826, 829, 830, 832, 838], "inputs_jax": [8, 26], "last_hidden_st": [8, 26], "jax_forward": [8, 26], "jit_appli": 8, "63": [8, 9, 38, 42, 51, 68, 74, 79, 80, 113, 274, 281, 282, 368, 380, 389, 399, 410, 512, 620, 625, 629, 635, 654, 670, 707, 718, 747], "122": [8, 49, 163, 233, 620], "134": [8, 56, 625, 648, 667], "2x": [8, 26], "ipytest": 9, "panda": [9, 40, 42, 846], "matplotlib": [9, 21, 22, 23, 24, 40, 41, 42, 45], "scikit": [9, 369, 437, 846], "learn": [9, 11, 13, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 38, 40, 52, 54, 77, 369, 370, 437, 442, 534, 604, 607, 609, 610, 611, 622, 623, 628, 703, 704, 705, 784, 800, 801, 804, 805, 806, 808, 809, 815, 820, 821, 823, 825, 834, 843, 845, 846, 854, 858, 859, 860, 861, 862, 863], "cryptographi": 9, "frontend": [9, 568, 622, 761, 762, 765, 769, 772, 800, 804, 807, 808, 814, 815, 819, 820, 825, 829, 830, 833, 834, 836, 843, 850, 856], "sklearn": 9, "classification_report": 9, "model_select": 9, "train_test_split": 9, "dataset": [9, 26, 69, 800, 838, 849, 850], "load_breast_canc": 9, "pyplot": [9, 40, 41, 42, 45], "plt": [9, 40, 41, 42, 45], "pd": [9, 42], "functool": [9, 40, 819, 827, 837], "autoconfig": 9, "tqdm": [9, 21, 22, 23, 24, 40, 42, 800], "tqdm_notebook": 9, "These": [9, 33, 52, 75, 369, 371, 380, 421, 473, 511, 624, 625, 650, 659, 660, 800, 804, 805, 806, 807, 809, 813, 815, 817, 818, 822, 823, 826, 827, 830, 835, 836, 838, 839, 840, 841, 843, 845, 846, 847, 850, 856, 860, 862, 863], "sole": [9, 38, 822, 831, 855, 856, 857], "verifi": [9, 23, 319, 320, 362, 805, 815, 816, 827, 830, 831], "re": [9, 15, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 40, 42, 43, 45, 52, 53, 62, 75, 85, 95, 208, 313, 362, 369, 371, 440, 475, 476, 534, 619, 622, 625, 627, 632, 677, 695, 734, 736, 801, 802, 805, 806, 807, 808, 809, 812, 815, 820, 825, 826, 827, 828, 829, 831, 833, 837, 840, 841, 844, 845, 846, 856], "test_jax_gpu": 9, "xla_bridg": [9, 40], "get_backend": [9, 823], "test_torch_gpu": 9, "is_avail": 9, "test_xgboost_gpu": 9, "capsi": 9, "load_diabet": 9, "y": [9, 26, 27, 38, 39, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 144, 147, 148, 149, 158, 160, 163, 175, 188, 192, 196, 201, 202, 203, 207, 209, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 328, 329, 330, 336, 343, 344, 345, 346, 347, 352, 354, 356, 360, 362, 365, 368, 369, 370, 371, 374, 380, 387, 389, 391, 392, 396, 399, 401, 405, 411, 418, 422, 428, 433, 440, 442, 443, 445, 446, 447, 448, 449, 459, 461, 470, 474, 482, 483, 484, 489, 493, 494, 496, 504, 510, 511, 512, 513, 514, 517, 519, 520, 521, 523, 526, 529, 530, 533, 534, 536, 537, 538, 541, 542, 543, 547, 549, 550, 551, 553, 554, 557, 558, 563, 570, 571, 572, 575, 578, 579, 580, 581, 583, 585, 587, 588, 589, 593, 594, 597, 600, 601, 602, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 639, 641, 643, 645, 646, 647, 648, 654, 655, 656, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 673, 675, 676, 677, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 709, 712, 713, 715, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 798, 800, 811, 813, 816, 817, 825, 827, 828, 830, 831, 833, 835, 837, 849], "target": [9, 11, 13, 19, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 42, 52, 75, 190, 370, 442, 443, 444, 445, 446, 447, 448, 449, 619, 759, 780, 782, 788, 800, 803, 806, 808, 811, 820, 821, 828, 829, 834, 838, 839, 840, 850, 851, 852, 854, 855, 856, 859, 861, 862], "xgb_model": 9, "xgbregressor": 9, "tree_method": 9, "caus": [9, 370, 444, 806, 807, 809, 811, 813, 814, 815, 817, 826, 828, 830, 841], "either": [9, 21, 22, 31, 32, 33, 34, 38, 44, 51, 52, 53, 56, 65, 69, 74, 75, 76, 79, 80, 107, 110, 113, 118, 128, 129, 139, 215, 216, 217, 218, 223, 233, 235, 236, 238, 240, 242, 249, 250, 256, 257, 258, 259, 260, 268, 277, 279, 280, 282, 285, 286, 331, 352, 365, 368, 374, 380, 389, 399, 409, 410, 414, 495, 512, 513, 533, 553, 561, 562, 570, 589, 614, 616, 617, 620, 622, 624, 625, 628, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 665, 670, 673, 677, 703, 704, 705, 745, 746, 751, 753, 766, 780, 781, 782, 789, 802, 805, 806, 807, 811, 812, 813, 815, 816, 817, 818, 819, 821, 823, 826, 827, 828, 829, 830, 833, 835, 838, 841, 842, 850, 856], "fit": [9, 59, 82, 627, 693, 805, 827, 835, 852, 853, 856], "consol": [9, 564, 622, 800, 807, 821, 830, 837, 842], "gpu_hist": 9, "captur": [9, 825, 830, 840, 857], "readouterr": 9, "err": 9, "99": [9, 38, 51, 52, 54, 72, 74, 84, 130, 217, 232, 353, 365, 580, 607, 617, 620, 622, 623, 629, 635, 710, 718, 728, 747], "implement": [9, 17, 18, 26, 28, 32, 40, 43, 49, 50, 52, 63, 64, 72, 73, 75, 80, 87, 92, 147, 161, 162, 175, 194, 195, 209, 215, 216, 217, 220, 221, 222, 223, 232, 233, 235, 238, 240, 242, 256, 257, 258, 259, 268, 270, 273, 277, 280, 281, 285, 286, 329, 330, 352, 365, 369, 380, 420, 421, 517, 518, 539, 540, 618, 619, 620, 622, 624, 625, 633, 634, 635, 650, 659, 660, 661, 670, 679, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 765, 767, 789, 800, 803, 805, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 822, 823, 824, 826, 828, 830, 831, 833, 835, 837, 838, 839, 840, 841, 843, 853, 854, 855, 856, 859, 862, 863], "binari": [9, 21, 22, 24, 52, 53, 56, 58, 75, 79, 81, 225, 228, 230, 265, 285, 368, 370, 413, 446, 449, 620, 624, 626, 647, 650, 684], "tabular": 9, "pulsar": 9, "emploi": [9, 862], "remov": [9, 15, 16, 19, 24, 26, 27, 29, 57, 69, 80, 625, 627, 628, 629, 658, 665, 679, 697, 703, 704, 720, 794, 797, 800, 805, 811, 812, 814, 815, 818, 823, 829, 830, 833, 840, 849, 850, 856], "id": [9, 41, 52, 75, 191, 324, 325, 326, 362, 546, 619, 622, 800, 804, 806, 810, 812, 813, 821, 825, 830, 842], "column": [9, 42, 52, 57, 75, 80, 92, 93, 127, 142, 322, 362, 369, 371, 378, 380, 421, 427, 437, 458, 463, 465, 466, 470, 472, 504, 510, 511, 617, 625, 659, 660, 666, 672, 674, 675, 680, 764, 779], "well": [9, 26, 27, 40, 41, 42, 76, 370, 446, 547, 622, 625, 674, 766, 800, 802, 805, 807, 812, 814, 815, 819, 826, 827, 828, 830, 839, 840, 850, 855, 856, 857, 861], "standard": [9, 51, 57, 60, 61, 65, 74, 83, 84, 88, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 150, 160, 163, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 329, 330, 332, 365, 368, 369, 371, 380, 411, 439, 482, 511, 602, 617, 618, 620, 622, 625, 627, 630, 631, 632, 633, 634, 635, 636, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 688, 690, 691, 692, 694, 695, 697, 698, 702, 725, 728, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 766, 779, 783, 793, 794, 800, 805, 808, 809, 810, 813, 815, 818, 822, 826, 829, 830, 831, 841, 844, 850, 852, 854, 855, 858, 859, 861], "while": [9, 26, 27, 34, 52, 56, 69, 75, 79, 92, 93, 98, 120, 136, 174, 242, 243, 263, 264, 340, 365, 368, 369, 371, 412, 413, 433, 476, 477, 510, 616, 617, 618, 620, 624, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 737, 749, 752, 762, 803, 805, 806, 807, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 837, 839, 840, 841, 842, 845, 846, 849, 856, 862, 863], "extra": [9, 27, 69, 98, 117, 602, 616, 622, 810, 815, 817, 824, 826, 827, 828, 833, 835, 849, 850, 853, 858], "dimens": [9, 48, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 66, 69, 71, 75, 76, 79, 80, 81, 82, 84, 85, 86, 88, 89, 95, 97, 98, 101, 108, 112, 136, 140, 141, 310, 321, 323, 324, 325, 326, 329, 330, 334, 335, 342, 349, 356, 362, 365, 366, 368, 369, 370, 371, 374, 375, 378, 380, 382, 384, 386, 387, 388, 390, 395, 396, 400, 404, 405, 406, 407, 410, 411, 413, 414, 416, 418, 421, 437, 442, 446, 452, 453, 454, 458, 464, 475, 476, 477, 478, 480, 482, 490, 491, 492, 495, 499, 501, 504, 514, 516, 517, 518, 519, 520, 521, 534, 535, 536, 538, 545, 579, 582, 602, 614, 617, 622, 624, 625, 626, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 682, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 704, 705, 731, 732, 733, 735, 737, 738, 739, 740, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 766, 776, 780, 783, 817, 819, 825, 827, 828, 830, 833, 835, 838], "label": [9, 40, 41, 42, 52, 58, 75, 81, 370, 442, 443, 445, 446, 447, 448, 449, 626, 684, 685, 686, 800, 805, 809, 827, 834, 835, 836, 840, 842, 856], "load_data": 9, "standardscal": 9, "df": [9, 42], "read_csv": [9, 42], "delimit": [9, 838], "drop": [9, 42, 52, 75, 325, 362, 370, 371, 446, 483, 779, 780, 806, 841], "sc": 9, "fit_transform": 9, "prepare_data": 9, "tupl": [9, 44, 47, 48, 49, 51, 52, 53, 56, 57, 59, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 122, 123, 129, 131, 135, 136, 138, 142, 144, 148, 149, 150, 161, 162, 163, 167, 168, 174, 175, 181, 191, 194, 195, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 310, 315, 319, 322, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 341, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 356, 357, 362, 365, 367, 368, 369, 371, 374, 375, 376, 378, 380, 386, 387, 388, 390, 391, 392, 393, 395, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 421, 422, 426, 430, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 458, 459, 469, 474, 480, 482, 483, 484, 487, 490, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 511, 512, 513, 514, 516, 517, 518, 519, 520, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 570, 580, 581, 582, 583, 585, 586, 587, 588, 601, 602, 603, 604, 605, 607, 609, 612, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 675, 677, 678, 679, 682, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 721, 722, 723, 724, 726, 727, 728, 729, 731, 734, 735, 737, 738, 739, 740, 741, 742, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 765, 766, 779, 780, 782, 793, 794, 810, 815, 822, 823, 826, 828, 830, 835, 838, 839, 841, 849, 850, 851], "expand_dim": [9, 23, 26, 27, 42, 44, 59, 82, 624, 627, 646, 800, 827, 835, 838, 850], "astyp": [9, 11, 13, 18, 40, 41, 42, 49, 56, 72, 79, 618, 624, 640, 642, 643, 646, 800, 815, 826, 827, 833, 851], "csv": [9, 42, 800], "instanc": [9, 17, 23, 26, 27, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 160, 163, 166, 167, 168, 170, 175, 192, 204, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 368, 369, 370, 371, 374, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 404, 405, 406, 410, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 576, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 772, 777, 805, 806, 807, 809, 810, 811, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 830, 838, 839, 840, 843, 849, 857], "117564": 9, "variou": [9, 20, 30, 32, 38, 800, 805, 806, 807, 809, 814, 815, 818, 819, 822, 824, 825, 827, 828, 829, 830, 842, 852, 854, 855, 856, 859, 862], "structur": [9, 27, 69, 72, 98, 160, 163, 531, 622, 629, 710, 719, 800, 805, 807, 810, 813, 823, 828, 829, 830, 831, 838, 839, 855, 856], "allow": [9, 24, 26, 27, 38, 52, 65, 75, 88, 132, 273, 369, 380, 438, 514, 518, 561, 617, 620, 622, 634, 635, 743, 750, 764, 765, 766, 767, 781, 782, 794, 798, 800, 805, 807, 810, 811, 814, 815, 819, 821, 823, 824, 825, 826, 827, 828, 830, 833, 835, 837, 841, 843, 846, 849, 850, 851, 854, 856, 860, 861], "navig": [9, 803, 806, 807, 808, 820], "choic": [9, 27, 44, 52, 65, 75, 88, 369, 371, 437, 457, 635, 752, 754, 800, 806, 814, 826, 827, 838, 847, 850, 856, 863], "rerun": [9, 40], "most": [9, 17, 26, 27, 69, 71, 92, 95, 136, 369, 421, 574, 596, 617, 622, 625, 659, 660, 797, 800, 804, 805, 806, 810, 813, 814, 815, 816, 820, 822, 823, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 841, 846, 856, 857, 859, 860, 862, 863], "method": [9, 17, 26, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 147, 148, 149, 150, 160, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 368, 369, 370, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 617, 618, 620, 622, 623, 625, 626, 629, 632, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 717, 718, 719, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 761, 772, 778, 779, 780, 781, 782, 805, 807, 809, 810, 814, 815, 816, 817, 818, 822, 830, 831, 835, 836, 839, 840, 841, 849, 850, 851, 857, 863], "signific": [9, 52, 370, 447, 832, 841, 845, 846, 856], "object": [9, 17, 22, 24, 26, 40, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 101, 102, 124, 128, 129, 139, 151, 160, 163, 171, 174, 209, 267, 498, 546, 562, 605, 617, 618, 619, 622, 623, 629, 631, 709, 710, 711, 713, 714, 715, 721, 722, 723, 724, 731, 759, 761, 762, 769, 770, 771, 777, 778, 780, 781, 782, 789, 793, 800, 810, 811, 813, 814, 823, 824, 827, 828, 830, 833, 837, 840, 848, 849, 850, 851, 856, 862], "logist": 9, "booster": 9, "gblinear": 9, "n_estim": 9, "learning_r": 9, "reg_lambda": 9, "reg_alpha": 9, "base_margin": 9, "xgb_cl": 9, "ivy_cl": 9, "n": [9, 38, 41, 42, 43, 45, 48, 51, 52, 56, 57, 59, 61, 62, 65, 66, 74, 75, 79, 80, 82, 84, 85, 88, 89, 92, 97, 134, 140, 141, 142, 215, 285, 287, 322, 323, 335, 362, 365, 368, 369, 370, 371, 374, 375, 378, 380, 382, 383, 384, 389, 390, 395, 396, 399, 400, 401, 409, 410, 411, 412, 414, 422, 423, 432, 434, 436, 441, 442, 454, 460, 463, 467, 469, 480, 488, 490, 491, 492, 495, 497, 498, 499, 500, 501, 504, 511, 521, 617, 620, 624, 625, 627, 629, 631, 632, 635, 636, 637, 638, 639, 640, 642, 644, 646, 650, 655, 658, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 679, 680, 681, 682, 689, 690, 692, 698, 702, 714, 727, 728, 729, 735, 749, 751, 752, 753, 754, 755, 756, 780, 783, 793, 800, 808, 812, 814, 830, 842, 850], "436": 9, "48": [9, 38, 42, 51, 52, 74, 75, 76, 77, 84, 107, 217, 240, 282, 368, 387, 388, 389, 399, 405, 406, 409, 549, 603, 607, 614, 620, 622, 623, 625, 629, 635, 670, 707, 728, 747], "wai": [9, 15, 16, 17, 20, 22, 26, 30, 32, 38, 92, 95, 800, 802, 804, 806, 809, 810, 811, 812, 814, 815, 816, 826, 827, 828, 830, 833, 837, 838, 839, 840, 841, 842, 845, 846, 851, 858, 862, 863], "t4": 9, "higher": [9, 52, 75, 369, 371, 380, 425, 435, 441, 452, 453, 454, 521, 779, 815, 826, 834, 835, 840, 841, 853, 856, 857, 860, 862, 863], "tier": 9, "than": [9, 26, 27, 29, 32, 51, 52, 53, 56, 57, 59, 61, 62, 63, 65, 69, 74, 75, 76, 79, 80, 82, 84, 85, 86, 88, 97, 98, 121, 129, 160, 208, 216, 217, 220, 221, 223, 224, 227, 229, 231, 235, 241, 242, 256, 257, 258, 259, 266, 268, 273, 277, 279, 281, 282, 286, 287, 288, 296, 306, 328, 331, 344, 351, 362, 365, 368, 369, 370, 371, 380, 389, 390, 395, 396, 399, 400, 401, 411, 412, 416, 418, 435, 441, 442, 465, 466, 512, 513, 514, 553, 554, 557, 574, 596, 617, 618, 619, 620, 622, 624, 625, 627, 631, 632, 633, 635, 653, 655, 665, 666, 667, 668, 671, 682, 687, 691, 697, 729, 735, 738, 739, 740, 745, 746, 751, 752, 753, 754, 780, 794, 803, 807, 809, 813, 814, 815, 817, 819, 820, 826, 827, 828, 830, 831, 832, 833, 835, 838, 839, 840, 841, 842, 846, 853, 854, 855, 856, 862, 863], "reduc": [9, 52, 53, 57, 62, 65, 66, 69, 75, 76, 80, 85, 88, 89, 208, 329, 330, 349, 365, 366, 380, 516, 517, 518, 519, 520, 521, 535, 619, 622, 625, 632, 635, 636, 672, 732, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 793, 794, 814, 819, 827, 833, 835, 837, 849, 854, 858, 859, 860], "lower": [9, 42, 48, 51, 52, 57, 61, 74, 75, 80, 84, 127, 140, 266, 301, 307, 313, 322, 323, 360, 362, 380, 514, 515, 521, 617, 620, 625, 631, 654, 660, 661, 668, 729, 766, 779, 800, 807, 815, 817, 827, 830, 835, 841, 843, 852, 853, 854, 856, 857, 862, 863], "although": [9, 625, 673, 800, 802, 810, 812, 813, 827, 833, 854, 856], "experi": [9, 15, 42, 806, 819, 830, 836, 838, 841], "demonstr": [9, 23, 26, 27, 41, 815, 817, 819, 837], "still": [9, 20, 22, 23, 26, 27, 29, 30, 33, 57, 69, 80, 625, 675, 764, 805, 806, 807, 810, 811, 815, 818, 819, 821, 823, 826, 827, 830, 833, 839, 841, 846, 849, 850, 853, 856, 862], "substanti": [9, 807, 810, 815, 830, 846, 856], "dive": [9, 15, 17, 26, 38, 801, 802, 804, 805, 807, 809, 813, 815, 821, 828, 834, 837, 838, 841, 862], "stuff": 9, "tool": [9, 17, 26, 27, 800, 806, 807, 817, 821, 836, 840, 841, 844, 847, 850, 854, 855, 856, 857, 859, 862, 863], "30": [9, 21, 22, 23, 24, 38, 40, 51, 52, 53, 75, 76, 84, 88, 98, 268, 298, 342, 350, 365, 368, 371, 389, 399, 410, 457, 479, 502, 534, 536, 541, 542, 549, 550, 566, 575, 580, 620, 622, 625, 629, 635, 663, 670, 715, 727, 728, 746, 747, 751, 766, 779, 794, 814], "25": [9, 38, 40, 41, 42, 51, 52, 53, 57, 58, 61, 65, 68, 74, 75, 76, 79, 80, 83, 84, 88, 97, 98, 113, 132, 218, 219, 229, 235, 237, 248, 253, 268, 273, 276, 278, 281, 282, 283, 288, 309, 362, 370, 380, 410, 443, 446, 448, 512, 521, 549, 550, 566, 580, 617, 620, 622, 625, 626, 629, 630, 635, 638, 654, 658, 663, 680, 685, 707, 714, 718, 725, 727, 728, 729, 746, 747, 749, 754, 813, 825], "22": [9, 21, 22, 23, 24, 38, 40, 42, 45, 46, 51, 52, 53, 61, 65, 68, 75, 76, 79, 84, 108, 113, 230, 238, 298, 302, 360, 368, 369, 370, 371, 376, 380, 386, 387, 389, 404, 405, 406, 410, 414, 420, 442, 457, 502, 512, 535, 566, 601, 614, 620, 624, 625, 629, 632, 635, 647, 648, 658, 663, 670, 674, 714, 724, 727, 728, 729, 736, 746, 747, 806, 813, 819], "201": [9, 74, 75, 220, 389, 620], "20x": 9, "24": [9, 19, 38, 40, 51, 52, 57, 65, 74, 75, 76, 79, 80, 84, 97, 230, 238, 253, 255, 268, 278, 279, 282, 342, 345, 365, 368, 380, 386, 388, 389, 399, 404, 405, 406, 410, 414, 512, 534, 535, 620, 622, 625, 629, 635, 638, 658, 666, 670, 707, 718, 727, 728, 729, 745, 747, 761, 819, 838], "ivy_pr": 9, "xgb_pred": 9, "ivyclassifi": 9, "nxgbclassifi": 9, "precis": [9, 52, 57, 75, 80, 160, 248, 268, 275, 282, 339, 365, 369, 380, 422, 511, 574, 596, 618, 620, 622, 625, 660, 661, 666, 673, 675, 676, 682, 772, 814, 827, 832, 833, 860], "recal": 9, "f1": [9, 815], "score": [9, 56, 79, 370, 449, 624, 651, 653, 800], "94": [9, 38, 51, 52, 54, 61, 74, 75, 77, 84, 202, 278, 279, 353, 365, 399, 607, 619, 623, 729], "106597": 9, "33": [9, 38, 40, 41, 51, 61, 65, 74, 75, 76, 77, 79, 221, 222, 229, 278, 368, 369, 371, 380, 387, 409, 410, 438, 457, 512, 530, 580, 607, 620, 622, 623, 624, 625, 629, 635, 647, 648, 670, 724, 727, 747, 754, 764, 767], "10967": 9, "accuraci": [9, 40, 42, 45, 368, 411, 815], "macro": 9, "avg": [9, 368, 386, 388, 409], "96": [9, 38, 52, 54, 74, 75, 76, 84, 232, 253, 285, 353, 365, 368, 389, 534, 535, 607, 620, 622, 623, 625, 635, 670, 729, 747], "67": [9, 38, 51, 52, 53, 57, 74, 75, 76, 79, 84, 97, 233, 238, 278, 279, 281, 288, 298, 302, 360, 380, 410, 512, 534, 535, 580, 606, 608, 620, 622, 623, 625, 662, 729], "73": [9, 38, 51, 80, 282, 380, 512, 625, 631, 654, 728, 830], "92": [9, 38, 42, 52, 53, 84, 353, 365, 601, 611, 623, 625, 656, 728, 729], "28": [9, 24, 26, 27, 38, 40, 42, 45, 51, 52, 56, 60, 74, 75, 76, 79, 80, 84, 88, 234, 237, 258, 274, 368, 369, 389, 399, 420, 518, 549, 603, 620, 622, 623, 624, 625, 630, 635, 639, 641, 643, 645, 646, 648, 670, 725, 727, 728, 729, 747, 751, 800], "27": [9, 38, 40, 45, 51, 52, 57, 61, 74, 75, 79, 80, 84, 88, 229, 230, 233, 273, 281, 282, 339, 365, 368, 389, 399, 550, 620, 622, 625, 629, 635, 665, 670, 680, 707, 714, 728, 747, 751, 764], "852": [9, 624, 648], "449": [9, 530, 622], "47": [9, 38, 42, 51, 52, 57, 61, 74, 75, 76, 77, 79, 84, 224, 282, 368, 380, 387, 405, 406, 512, 534, 535, 607, 620, 622, 623, 624, 625, 631, 648, 662, 728, 729], "29": [9, 38, 40, 42, 45, 57, 74, 76, 77, 79, 84, 223, 380, 410, 512, 534, 535, 605, 609, 620, 622, 623, 625, 662, 727, 728, 729], "82": [9, 38, 40, 45, 46, 51, 77, 84, 108, 221, 380, 512, 603, 623, 728, 729, 803, 820], "68": [9, 38, 42, 45, 51, 84, 108, 130, 223, 368, 389, 399, 614, 617, 620, 625, 630, 681, 725, 728, 729], "nevertheless": 9, "fall": [9, 40, 784, 805, 815, 834], "short": [9, 38, 52, 75, 415, 624, 649, 805, 807, 815, 835, 839], "blaze": 9, "31": [9, 21, 22, 23, 24, 38, 40, 41, 45, 46, 51, 52, 74, 75, 76, 79, 84, 108, 113, 133, 229, 260, 268, 368, 371, 380, 388, 389, 457, 512, 529, 614, 617, 620, 622, 728, 729, 838], "32": [9, 24, 26, 27, 38, 40, 41, 42, 51, 52, 61, 74, 75, 79, 80, 84, 97, 98, 107, 159, 217, 229, 230, 239, 253, 259, 275, 278, 279, 332, 365, 368, 369, 371, 380, 387, 388, 389, 399, 409, 410, 420, 424, 457, 512, 534, 550, 614, 618, 620, 622, 624, 625, 631, 632, 635, 639, 641, 642, 646, 648, 665, 670, 681, 727, 728, 729, 736, 747, 764, 767, 800, 814, 815, 825, 838, 861], "03": [9, 22, 41, 48, 51, 53, 54, 74, 75, 77, 84, 133, 233, 258, 337, 580, 581, 604, 609, 617, 620, 622, 623, 625, 626, 663, 684, 728], "62": [9, 38, 40, 46, 68, 74, 75, 84, 108, 253, 281, 620, 630, 631, 725, 727, 729], "36": [9, 38, 42, 51, 52, 56, 65, 75, 76, 80, 223, 278, 279, 342, 365, 368, 369, 380, 389, 399, 425, 512, 534, 535, 581, 620, 622, 625, 629, 635, 648, 667, 670, 680, 717, 747], "35": [9, 38, 46, 56, 57, 68, 74, 75, 79, 80, 84, 108, 223, 282, 368, 389, 399, 620, 624, 625, 632, 635, 648, 655, 662, 728, 736, 747], "37": [9, 21, 22, 23, 24, 38, 46, 51, 52, 68, 74, 75, 79, 97, 108, 221, 229, 278, 281, 285, 376, 410, 502, 620, 624, 625, 629, 631, 648, 667, 714, 728, 814], "surpass": 9, "remark": [9, 841], "artifici": 9, "simpli": [9, 17, 26, 27, 29, 38, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 368, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 620, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 675, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 800, 805, 806, 807, 810, 811, 812, 814, 815, 816, 817, 818, 820, 822, 823, 826, 827, 828, 830, 833, 835, 839, 840, 841, 843, 857, 862], "stack": [9, 19, 21, 22, 23, 24, 29, 38, 42, 52, 57, 59, 69, 75, 80, 82, 97, 140, 141, 323, 362, 369, 371, 421, 458, 459, 461, 470, 489, 568, 577, 599, 617, 622, 625, 627, 629, 656, 658, 659, 660, 661, 663, 665, 667, 668, 669, 671, 672, 673, 675, 676, 679, 706, 716, 717, 780, 800, 804, 809, 826, 835, 852, 854, 861, 862], "x_doubl": 9, "vstack": [9, 52, 75, 371, 470], "y_doubl": 9, "explor": [9, 11, 13, 17, 21, 22, 23, 26, 27, 32, 33, 34, 805, 806, 807, 815, 820, 833, 836, 840, 856, 859], "235128": 9, "41": [9, 21, 22, 23, 24, 38, 40, 45, 51, 52, 57, 74, 75, 76, 79, 80, 108, 222, 230, 237, 268, 282, 368, 369, 376, 380, 387, 405, 410, 430, 502, 512, 529, 530, 614, 620, 622, 625, 635, 654, 662, 753], "315": [9, 274, 620], "40": [9, 38, 40, 42, 52, 53, 74, 75, 76, 84, 88, 98, 229, 233, 253, 282, 342, 365, 368, 371, 387, 389, 399, 405, 479, 534, 536, 541, 542, 566, 580, 602, 605, 620, 622, 623, 625, 629, 635, 663, 670, 715, 728, 747, 751, 800, 814], "879": 9, "65": [9, 38, 40, 42, 45, 74, 77, 84, 229, 268, 530, 549, 603, 620, 622, 623, 625, 635, 670, 728, 729, 747, 814], "380": 9, "seem": [9, 805, 806, 833, 839, 840, 841, 856], "observ": [9, 52, 75, 380, 510, 511, 807, 815, 819, 835, 849, 858], "examin": 9, "600": [9, 42, 76, 79, 368, 391, 392, 542, 814], "plot": [9, 41, 800, 856], "conduct": [9, 860], "num_boosting_round": 9, "300": [9, 74, 76, 79, 278, 368, 391, 392, 542, 566, 620, 622, 625, 663, 830], "400": [9, 76, 79, 368, 391, 392, 542, 566, 622, 625, 663], "500": [9, 52, 75, 76, 79, 368, 369, 391, 392, 441, 542, 622], "ivy_elapsed_tim": 9, "xgb_elapsed_tim": 9, "ivy_tim": 9, "partial": [9, 52, 69, 75, 161, 162, 194, 195, 342, 365, 368, 369, 371, 380, 415, 435, 475, 476, 477, 478, 518, 539, 540, 608, 618, 619, 622, 623, 625, 664, 765, 767, 781, 782, 807, 812, 833], "append": [9, 41, 42, 52, 57, 69, 75, 227, 335, 365, 620, 625, 627, 658, 665, 690, 794, 800, 814, 830, 835, 838], "xgb_time": 9, "fivethirtyeight": 9, "legend": [9, 42, 805], "loc": 9, "best": [9, 40, 561, 622, 794, 800, 801, 803, 804, 805, 806, 807, 808, 814, 815, 819, 820, 829, 830, 831, 842, 859, 860], "xlabel": 9, "ylabel": 9, "obviou": [9, 838, 856], "trend": 9, "longer": [9, 806, 815, 826, 830, 856], "gap": 9, "between": [9, 15, 16, 21, 31, 32, 33, 38, 51, 52, 53, 56, 57, 58, 59, 63, 69, 74, 75, 79, 80, 81, 82, 98, 121, 160, 223, 236, 271, 287, 328, 344, 346, 365, 368, 369, 370, 371, 380, 391, 392, 393, 404, 405, 406, 414, 420, 424, 443, 444, 445, 446, 447, 448, 449, 474, 521, 617, 618, 620, 624, 626, 627, 629, 631, 633, 647, 670, 684, 685, 686, 690, 698, 712, 727, 738, 739, 740, 765, 772, 784, 800, 810, 811, 815, 817, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 836, 837, 838, 840, 845, 849, 850, 852, 853, 855, 856, 857, 862], "within": [9, 11, 13, 17, 26, 27, 47, 52, 75, 121, 328, 344, 365, 368, 374, 404, 405, 406, 411, 414, 452, 453, 454, 495, 617, 631, 729, 794, 805, 807, 810, 814, 815, 827, 828, 829, 830, 839, 841, 850, 852, 853, 857], "slightli": [9, 306, 362, 813, 827, 830, 835, 839], "paramet": [9, 13, 24, 26, 27, 40, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 565, 566, 569, 570, 571, 572, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 766, 767, 772, 777, 779, 780, 781, 782, 783, 784, 785, 789, 790, 793, 794, 796, 800, 805, 810, 818, 819, 822, 827, 828, 830, 831, 835, 837, 838, 849, 850, 851, 857], "x_train": 9, "y_train": [9, 42, 800], "train_siz": [9, 40], "random_st": [9, 369, 426], "51": [9, 38, 42, 51, 52, 74, 75, 76, 84, 230, 268, 281, 369, 389, 441, 620, 729, 764], "clear": [9, 190, 619, 805, 807, 811, 815, 816, 817, 827, 833, 835, 837, 845, 846, 847, 856], "amount": [9, 58, 81, 210, 619, 626, 684, 685, 686, 794, 806, 814, 816, 828], "widen": 9, "impress": 9, "outcom": [9, 52, 75, 331, 342, 365, 794], "howev": [9, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 57, 80, 242, 285, 286, 371, 374, 482, 490, 492, 569, 620, 622, 625, 673, 675, 789, 805, 806, 809, 810, 811, 813, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 828, 830, 833, 835, 837, 838, 839, 840, 841, 846, 849, 855, 856, 862], "tend": 9, "outperform": 9, "proce": [9, 805, 806], "95933": 9, "9874": 9, "105807": 9, "70": [9, 38, 40, 52, 75, 76, 368, 389, 399, 542, 566, 625, 635, 670, 747, 846], "77": [9, 38, 42, 76, 581, 625, 635, 670, 747], "93": [9, 38, 52, 74, 76, 84, 193, 282, 353, 365, 534, 535, 619, 622, 728, 729], "wrap": [9, 17, 19, 26, 27, 29, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 368, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 577, 580, 581, 582, 583, 585, 587, 588, 599, 601, 603, 604, 607, 609, 610, 611, 612, 622, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 675, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 761, 800, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 822, 823, 826, 827, 830, 835, 837, 840, 841, 843, 849, 850, 852, 856, 857, 862, 863], "balanc": 9, "breast": 9, "cancer": 9, "53": [9, 21, 38, 57, 61, 74, 79, 154, 210, 240, 410, 606, 608, 618, 619, 623, 625, 630, 662, 725, 729], "return_x_i": 9, "x_test": 9, "y_test": 9, "test_siz": [9, 40], "76": [9, 19, 38, 51, 52, 65, 72, 74, 75, 84, 163, 217, 233, 281, 316, 362, 399, 618, 620, 625, 629, 635, 677, 714, 728, 747], "87": [9, 38, 77, 79, 229, 258, 368, 380, 410, 411, 512, 603, 620, 623, 764, 820], "171": [9, 57, 625, 662, 764], "90": [9, 38, 40, 42, 51, 52, 74, 75, 234, 274, 278, 353, 365, 371, 380, 480, 512, 620, 625, 635, 670, 747, 794, 846], "86": [9, 38, 61, 75, 84, 368, 380, 399, 512, 603, 623, 728, 729], "88": [9, 38, 77, 84, 107, 380, 512, 607, 614, 623, 625, 631, 635, 670, 729, 747], "perfectli": [9, 766, 847], "align": [9, 52, 69, 75, 368, 369, 403, 419, 624, 652, 794, 806, 814, 827, 829, 835, 837, 843, 862], "gain": [9, 779, 807, 809, 834, 839, 856], "combin": [9, 32, 52, 69, 75, 98, 368, 380, 401, 412, 511, 539, 540, 622, 625, 655, 665, 807, 810, 813, 814, 815, 817, 819, 823, 830, 840, 856], "build": [10, 14, 15, 17, 24, 26, 27, 30, 31, 32, 33, 38, 40, 45, 63, 69, 98, 633, 737, 738, 739, 740, 780, 781, 782, 800, 801, 806, 808, 814, 815, 823, 825, 834, 836, 839, 840, 841, 843, 846, 850, 854, 856, 858, 861, 862, 863], "timm": [10, 11, 15, 26, 27, 800, 850], "kera": [10, 11, 13, 15, 16, 24, 26, 27, 43, 44, 777, 800, 847, 850, 862], "seen": [11, 13, 18, 24, 26, 369, 375, 427, 499, 546, 622, 789, 814, 815, 817, 819, 827, 830, 835, 837, 838, 845, 846, 862], "veri": [11, 19, 26, 27, 29, 51, 74, 269, 328, 344, 365, 620, 625, 673, 766, 804, 805, 806, 807, 812, 813, 815, 816, 817, 819, 820, 822, 823, 826, 827, 828, 830, 831, 833, 836, 838, 839, 840, 841, 845, 846, 852, 853, 854, 856, 857, 858, 861, 862, 863], "guid": [11, 24, 800, 801, 805, 806, 807, 812, 821, 827, 829, 862], "focu": [11, 24, 805, 825, 854, 855, 858, 863], "more": [11, 14, 15, 17, 18, 19, 22, 24, 26, 27, 28, 29, 38, 40, 41, 42, 46, 51, 52, 57, 59, 63, 68, 74, 75, 80, 82, 86, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 148, 240, 242, 258, 273, 286, 290, 294, 295, 297, 356, 360, 366, 369, 370, 371, 416, 418, 430, 433, 446, 452, 453, 454, 459, 480, 569, 614, 617, 618, 620, 622, 625, 627, 633, 658, 664, 665, 668, 671, 673, 675, 682, 691, 698, 737, 738, 739, 740, 766, 776, 794, 800, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863], "involv": [11, 14, 15, 22, 24, 49, 72, 175, 218, 235, 242, 268, 273, 618, 620, 794, 801, 805, 808, 814, 815, 817, 828, 833, 840, 846, 856, 862], "develop": [11, 25, 26, 27, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 814, 820, 829, 831, 841, 843, 845, 846, 847, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863], "usual": [11, 13, 43, 235, 268, 620, 793, 806, 809, 815, 827, 830, 833], "own": [11, 13, 17, 26, 27, 32, 800, 806, 809, 814, 815, 818, 819, 826, 827, 831, 835, 841, 843, 846, 847, 852, 855, 856, 861, 862], "directli": [11, 13, 17, 20, 24, 26, 27, 30, 368, 369, 403, 427, 629, 718, 800, 805, 806, 807, 809, 810, 813, 814, 815, 816, 818, 821, 823, 824, 826, 827, 828, 831, 832, 835, 837, 839, 840, 841, 842, 847, 849, 850, 851, 860, 861, 862], "case": [11, 13, 19, 21, 26, 27, 29, 30, 31, 32, 40, 47, 48, 52, 53, 59, 65, 69, 71, 75, 76, 82, 92, 93, 98, 123, 134, 161, 162, 189, 194, 195, 202, 210, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 259, 260, 263, 268, 271, 273, 277, 278, 279, 280, 281, 282, 285, 286, 288, 329, 330, 340, 342, 352, 365, 368, 370, 371, 374, 375, 381, 391, 392, 393, 413, 442, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 479, 480, 488, 490, 492, 499, 522, 539, 540, 544, 551, 565, 566, 567, 617, 618, 619, 620, 622, 625, 627, 629, 635, 673, 679, 690, 691, 692, 694, 696, 697, 699, 701, 709, 715, 748, 749, 750, 751, 752, 753, 754, 764, 765, 784, 794, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 841, 846, 849, 850, 851, 855, 859], "mlp": 11, "mixer": 11, "onli": [11, 13, 26, 27, 32, 38, 40, 42, 44, 47, 48, 51, 52, 57, 59, 61, 69, 71, 74, 75, 80, 82, 84, 92, 95, 97, 113, 133, 173, 174, 203, 263, 264, 269, 275, 306, 336, 342, 362, 365, 368, 369, 371, 375, 380, 390, 403, 413, 422, 427, 439, 441, 452, 453, 454, 464, 497, 498, 514, 528, 614, 617, 618, 619, 620, 622, 624, 625, 627, 629, 631, 632, 634, 635, 650, 665, 672, 675, 676, 691, 694, 706, 707, 713, 714, 716, 717, 718, 723, 724, 727, 728, 729, 732, 733, 743, 749, 752, 762, 764, 765, 767, 780, 784, 793, 800, 801, 802, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 822, 823, 825, 826, 827, 828, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 845, 849, 850, 855, 856, 857, 862, 863], "retriev": [11, 13, 17, 524, 546, 571, 622, 807, 827], "mlp_encod": [11, 26, 27, 800, 850], "create_model": [11, 26, 27, 800, 850], "mixer_b16_224": [11, 26, 27, 800, 850], "nois": [11, 13, 26, 27, 800, 849, 850], "randn": [11, 13, 26, 27, 800, 850], "tf_mlp_encod": [11, 26, 27], "output_torch": [11, 13], "output_tf": [11, 13], "constant": [11, 13, 18, 21, 22, 28, 31, 33, 38, 52, 59, 60, 75, 82, 83, 92, 93, 316, 362, 368, 370, 371, 413, 446, 447, 474, 627, 629, 630, 689, 712, 725, 779, 783, 800, 823, 828, 831, 839, 840, 841, 849, 851], "output_dens": [11, 26, 27, 800], "layer": [11, 13, 17, 23, 24, 26, 27, 38, 43, 52, 60, 75, 83, 630, 649, 650, 725, 777, 779, 781, 782, 783, 784, 785, 800, 818, 827, 831, 833, 835, 836, 839, 845, 850, 854, 856, 860, 863], "dens": [11, 24, 26, 27, 310, 362, 780, 800], "unit": [11, 26, 27, 52, 68, 75, 92, 93, 105, 107, 108, 109, 110, 111, 112, 113, 290, 291, 293, 297, 299, 300, 303, 304, 305, 360, 493, 494, 614, 800, 806, 809, 815, 827, 828, 830, 841, 857, 860], "activ": [11, 24, 26, 27, 52, 53, 56, 67, 75, 79, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 583, 624, 650, 653, 779, 780, 800, 805, 806, 807, 815, 821, 831, 832, 839, 850, 856, 859], "mention": [11, 13, 26, 27, 32, 805, 806, 807, 810, 817, 822, 823, 826, 827, 830, 833, 846, 851, 856], "basic": [11, 13, 17, 20, 24, 26, 27, 30, 33, 371, 481, 800, 801, 805, 817, 830], "fulli": [11, 13, 15, 16, 19, 24, 26, 27, 40, 52, 75, 380, 518, 780, 800, 810, 815, 822, 825, 833, 835, 836, 837, 838, 839, 840, 841, 847, 851, 854, 855, 856, 862, 863], "trainabl": [11, 13, 17, 23, 24, 26, 27, 44, 777, 781, 782, 785, 800, 818, 836, 838, 839, 850, 851], "fine": [11, 13, 26, 27, 806, 807, 815, 817, 827, 837, 840, 862], "tune": [11, 13, 26, 27, 861, 862], "train": [11, 13, 24, 26, 27, 43, 52, 54, 56, 75, 77, 79, 95, 368, 369, 374, 391, 392, 393, 438, 490, 492, 603, 604, 609, 623, 624, 647, 650, 653, 779, 780, 781, 782, 783, 800, 813, 816, 823, 838, 839, 840, 841, 847, 850, 854, 855, 860, 862, 863], "ground": [11, 13, 370, 443, 759, 761, 772, 803, 820, 827, 830, 845], "ret": [11, 13, 26, 27, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 428, 431, 433, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 566, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 767, 777, 782, 784, 789, 794, 796, 800, 815, 816, 818, 819, 825, 826, 827, 828, 831, 835, 840, 850], "op": [11, 17, 38, 776, 789, 831, 835, 841], "eagertensor": [11, 17, 38, 789, 828], "readi": [11, 13, 18, 19, 20, 28, 29, 30, 31, 32, 33, 40, 42, 805, 806], "deepmind": [12, 847], "perceiverio": [12, 847], "backbon": [12, 40, 800, 835, 838], "TO": [12, 14, 25], "replac": [12, 14, 25, 41, 51, 52, 53, 59, 61, 69, 74, 75, 76, 82, 84, 127, 269, 304, 307, 360, 362, 371, 479, 482, 565, 566, 570, 617, 620, 622, 627, 631, 687, 726, 764, 807, 812, 813, 815, 816, 824, 827, 830, 837, 840, 841, 846, 850, 863], "efficientnet": 13, "include_top": [13, 800], "eff_encod": [13, 800], "applic": [13, 15, 40, 42, 45, 52, 56, 75, 79, 95, 369, 441, 624, 625, 629, 635, 650, 653, 679, 712, 713, 714, 718, 719, 751, 753, 800, 806, 814, 815, 816, 824, 839, 853, 854, 856, 858, 860, 862], "efficientnet_v2": [13, 800], "efficientnetv2b0": [13, 800], "data": [13, 21, 22, 23, 24, 27, 32, 40, 42, 45, 46, 48, 51, 52, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 68, 69, 71, 74, 75, 76, 79, 80, 82, 84, 85, 86, 87, 88, 89, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 187, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 294, 295, 296, 297, 306, 307, 308, 309, 310, 311, 312, 323, 324, 325, 326, 327, 329, 330, 331, 347, 352, 360, 362, 365, 368, 369, 371, 375, 379, 380, 383, 391, 392, 393, 409, 411, 413, 419, 421, 439, 457, 479, 482, 483, 485, 497, 498, 499, 500, 501, 507, 511, 512, 513, 517, 520, 521, 538, 551, 553, 554, 557, 583, 614, 617, 619, 620, 622, 624, 625, 627, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 688, 691, 692, 694, 695, 697, 698, 702, 710, 727, 728, 729, 731, 732, 733, 735, 736, 741, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 762, 764, 765, 766, 767, 772, 776, 779, 780, 781, 782, 786, 794, 800, 806, 808, 809, 810, 811, 812, 813, 816, 818, 822, 823, 824, 826, 828, 831, 833, 835, 837, 843, 844, 846, 856, 857, 858, 860, 861, 862], "storag": [13, 40, 41, 838, 846], "googleapi": [13, 40, 41], "efficientnetv2": 13, "b0_notop": 13, "h5": [13, 69], "24274472": 13, "0u": 13, "torch_eff_encod": [13, 800], "1280": [13, 534, 622, 800], "state": [14, 25, 40, 56, 75, 79, 95, 182, 183, 184, 185, 186, 268, 368, 413, 590, 592, 595, 597, 598, 618, 620, 622, 624, 649, 762, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 800, 803, 806, 812, 815, 816, 818, 819, 820, 821, 822, 827, 830, 834, 835, 836, 838, 846, 850, 862, 863], "api": [14, 19, 24, 25, 29, 42, 44, 51, 52, 57, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 150, 160, 163, 173, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 329, 330, 332, 365, 368, 371, 380, 411, 482, 511, 617, 618, 620, 625, 627, 632, 633, 634, 635, 636, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 688, 690, 691, 692, 694, 695, 697, 698, 702, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 800, 803, 806, 807, 808, 810, 812, 815, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 830, 833, 834, 836, 838, 841, 843, 844, 845, 852, 854, 856, 858, 861, 863], "welcom": [15, 41, 800, 801, 806, 807, 829], "goal": [15, 40, 242, 620, 800, 805, 846, 856, 862], "provid": [15, 17, 21, 24, 26, 27, 31, 32, 38, 44, 48, 52, 53, 57, 59, 62, 65, 66, 69, 71, 75, 76, 80, 82, 85, 88, 89, 117, 134, 136, 153, 154, 155, 156, 157, 165, 175, 187, 191, 287, 368, 369, 371, 374, 380, 403, 411, 415, 420, 424, 435, 436, 440, 441, 458, 460, 469, 488, 490, 492, 521, 533, 565, 566, 616, 617, 618, 619, 620, 622, 624, 625, 627, 629, 632, 635, 636, 650, 667, 670, 681, 690, 691, 698, 710, 732, 752, 754, 755, 756, 765, 780, 784, 789, 790, 800, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 830, 831, 833, 837, 839, 841, 845, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 863], "varieti": [15, 809, 814, 815, 816, 830, 832, 852, 854, 858, 859, 862, 863], "organ": [15, 810, 813, 823, 827, 829, 831, 843, 846], "main": [15, 27, 48, 52, 57, 75, 80, 127, 140, 141, 142, 307, 322, 323, 362, 369, 371, 419, 463, 617, 625, 657, 658, 679, 800, 805, 806, 807, 809, 812, 813, 820, 824, 826, 854, 856, 857, 862], "exactli": [15, 19, 29, 38, 39, 43, 285, 620, 805, 813, 814, 815, 816, 817, 819, 830, 833, 845, 847], "rush": [15, 847], "jump": [15, 828], "straight": [15, 800, 814, 827, 830, 837], "quickstart": 15, "introduct": [15, 17, 24, 26, 27, 856], "capabl": [15, 23, 27, 830, 833], "point": [15, 24, 49, 51, 52, 57, 61, 63, 65, 72, 74, 75, 80, 84, 88, 121, 122, 123, 125, 127, 130, 137, 138, 143, 147, 160, 164, 168, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 248, 249, 250, 251, 256, 257, 258, 259, 260, 268, 270, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 306, 307, 309, 329, 330, 346, 347, 350, 352, 362, 365, 368, 369, 370, 375, 380, 383, 391, 392, 393, 411, 421, 439, 443, 497, 498, 499, 500, 501, 511, 512, 513, 521, 615, 617, 618, 620, 625, 631, 632, 633, 634, 635, 654, 656, 659, 660, 661, 663, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 682, 728, 729, 735, 737, 738, 739, 740, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 789, 790, 800, 803, 805, 806, 807, 809, 810, 812, 814, 815, 817, 818, 820, 822, 826, 827, 830, 831, 833, 835, 837, 838, 847, 849, 862], "those": [15, 39, 40, 57, 59, 69, 75, 80, 82, 121, 174, 235, 268, 483, 602, 617, 618, 620, 622, 625, 627, 629, 632, 672, 675, 687, 708, 735, 805, 806, 807, 810, 813, 814, 815, 824, 826, 827, 828, 830, 833, 845, 853], "who": [15, 808, 819, 834, 841, 856, 858], "deeper": [15, 17, 27, 47, 629, 717, 718, 807, 808, 830, 834, 845], "showcas": [15, 800], "real": [15, 23, 51, 52, 65, 74, 75, 88, 97, 107, 110, 113, 137, 138, 215, 216, 217, 218, 220, 221, 222, 223, 224, 233, 235, 236, 238, 240, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 265, 268, 270, 271, 273, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 329, 330, 336, 337, 347, 365, 368, 369, 390, 411, 412, 421, 422, 614, 617, 620, 625, 632, 635, 659, 660, 661, 666, 673, 675, 676, 679, 682, 735, 748, 750, 751, 752, 753, 813, 858], "world": [15, 23, 807, 858], "whether": [15, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 122, 123, 129, 131, 136, 138, 144, 147, 148, 150, 153, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 175, 187, 191, 192, 194, 195, 197, 199, 202, 203, 205, 208, 209, 211, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 323, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 362, 365, 368, 369, 370, 371, 380, 386, 387, 388, 390, 391, 392, 393, 409, 411, 413, 415, 430, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 465, 466, 469, 473, 480, 482, 483, 484, 488, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 565, 566, 567, 568, 570, 573, 574, 576, 577, 579, 580, 581, 583, 585, 587, 588, 595, 596, 599, 601, 604, 605, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 638, 639, 640, 641, 647, 648, 649, 650, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 679, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 716, 717, 718, 719, 723, 724, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 759, 761, 764, 776, 777, 780, 781, 782, 783, 784, 793, 800, 801, 805, 806, 810, 813, 815, 817, 822, 826, 827, 830, 832, 833, 849, 850], "beginn": [15, 801, 856], "advanc": [15, 38, 806, 855], "got": [15, 38, 819], "cover": [15, 26, 52, 75, 368, 404, 405, 406, 805, 809, 810, 812, 815, 817, 818, 823, 824, 830, 833, 834], "write": [15, 16, 26, 27, 38, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 323, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 351, 352, 353, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 409, 411, 412, 415, 416, 418, 419, 427, 428, 431, 432, 433, 434, 440, 443, 444, 445, 446, 448, 449, 458, 459, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 529, 530, 534, 535, 536, 541, 542, 551, 565, 566, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 725, 726, 727, 728, 729, 731, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 762, 800, 804, 805, 807, 808, 809, 811, 812, 814, 815, 817, 818, 819, 823, 826, 828, 831, 835, 837, 840, 847, 856, 863], "familiar": [15, 16, 17, 800, 805, 806], "concept": [15, 16, 17], "agnost": [15, 16, 17, 18, 26, 27, 28, 32, 38, 800, 810, 815, 822, 835, 837, 840, 841, 862, 863], "unifi": [15, 16, 17, 19, 20, 26, 29, 30, 34, 41, 69, 208, 619, 808, 809, 810, 814, 815, 819, 824, 825, 827, 833, 835, 841, 844, 846, 848, 850, 852, 853, 854, 856, 860, 863], "alongsid": [15, 16, 17, 18, 28, 624, 650, 846], "turn": [15, 16, 19, 29, 56, 79, 92, 93, 391, 392, 393, 624, 647, 780, 806, 812, 813, 816, 817, 827, 830, 847], "wrapper": [15, 16, 19, 772, 810, 812, 813, 815, 819, 823, 826, 827, 837, 843, 852, 856], "unus": [15, 16, 19, 817, 826], "part": [15, 16, 19, 48, 51, 52, 74, 75, 80, 97, 107, 110, 113, 140, 141, 142, 248, 252, 275, 322, 323, 348, 362, 365, 368, 369, 371, 380, 411, 422, 474, 521, 614, 617, 620, 625, 660, 661, 761, 800, 805, 806, 807, 809, 812, 815, 821, 823, 826, 827, 830, 831, 833, 835, 836, 840, 841, 849, 850, 851, 854, 856, 861, 862, 863], "lazi": [15, 16, 19, 22, 29, 32, 33, 44], "eager": [15, 16, 19, 22, 24, 29, 32, 33, 44, 813, 841, 856], "understand": [15, 16, 17, 21, 38, 44, 803, 804, 805, 806, 807, 808, 809, 812, 817, 818, 822, 828, 829, 834, 847, 852, 862], "decor": [15, 16, 21, 23, 24, 32, 44, 528, 622, 764, 766, 772, 803, 809, 810, 813, 815, 816, 820, 823, 826, 827, 828, 833], "kornia": [15, 16, 23, 26, 27, 40, 44, 800, 850], "roundup": 17, "over": [17, 24, 27, 29, 40, 52, 57, 65, 66, 67, 72, 75, 79, 80, 88, 89, 90, 92, 117, 314, 315, 329, 330, 342, 349, 362, 365, 368, 369, 370, 371, 378, 380, 382, 383, 384, 387, 396, 401, 405, 409, 410, 411, 412, 413, 414, 434, 442, 451, 464, 479, 482, 483, 504, 514, 520, 569, 602, 616, 622, 625, 630, 631, 635, 636, 655, 666, 677, 679, 681, 682, 725, 729, 748, 749, 750, 751, 752, 753, 754, 755, 756, 780, 783, 789, 793, 800, 806, 807, 811, 817, 818, 825, 826, 828, 831, 835, 837, 841, 845, 847, 854, 856], "indep": [17, 26], "futur": [17, 24, 26, 40, 625, 660, 661, 800, 806, 807, 814, 815, 830, 831, 833, 837, 841, 845, 847, 862], "proof": [17, 26], "delv": [17, 27, 800], "theori": [17, 802, 812], "deep": [17, 24, 26, 38, 69, 534, 622, 800, 801, 802, 804, 805, 807, 809, 812, 813, 815, 821, 825, 828, 834, 837, 838, 845, 854, 856, 859, 860, 862, 863], "esenti": [17, 26], "abstract": [17, 26, 27, 779, 784, 800, 813, 815, 826, 827, 830, 833, 839, 845, 854, 856, 858, 859, 863], "specif": [17, 18, 23, 24, 26, 27, 28, 30, 32, 40, 50, 52, 53, 73, 75, 76, 175, 206, 209, 242, 263, 264, 273, 316, 329, 330, 362, 365, 371, 375, 482, 501, 534, 535, 536, 562, 618, 619, 620, 622, 625, 627, 628, 631, 634, 635, 660, 661, 677, 698, 703, 704, 705, 726, 743, 748, 749, 750, 752, 759, 761, 781, 782, 789, 790, 796, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 839, 840, 841, 842, 843, 845, 849, 850, 851, 852, 854, 855, 857, 858, 859, 863], "quirk": [17, 26], "perk": [17, 26, 800, 810, 813], "under": [17, 26, 27, 52, 370, 446, 447, 793, 800, 805, 806, 808, 809, 816, 817, 818, 821, 827, 828, 830, 833, 834, 835, 838, 840, 841, 849, 850, 856, 859, 863], "hood": [17, 26, 27, 800, 808, 816, 817, 821, 827, 830, 833, 834, 835, 838, 840, 849, 850, 863], "appropi": 17, "string": [17, 26, 27, 42, 52, 53, 56, 69, 75, 79, 145, 146, 158, 165, 187, 188, 189, 190, 191, 193, 202, 209, 210, 214, 368, 369, 371, 410, 414, 422, 474, 485, 513, 532, 618, 619, 622, 624, 625, 637, 638, 639, 640, 642, 644, 646, 661, 759, 761, 765, 793, 794, 811, 812, 814, 815, 816, 819, 827, 835, 838], "simplest": [17, 806, 817, 830, 833], "interact": [17, 26, 41, 44, 805, 855, 856, 861], "submodul": [17, 26, 40, 42, 97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 805, 806, 807, 809, 812, 814, 816, 820, 823, 824, 830, 834, 835, 839, 843], "ones": [17, 24, 26, 38, 44, 48, 52, 54, 56, 61, 69, 71, 75, 79, 84, 127, 131, 136, 138, 144, 194, 195, 231, 307, 362, 380, 520, 603, 617, 619, 620, 623, 624, 642, 643, 727, 728, 729, 765, 800, 805, 810, 814, 817, 822, 823, 829, 830, 837, 838, 856], "likewis": [17, 22, 26, 33, 800, 807, 813, 815, 818, 822, 823, 827, 833, 838, 849, 850, 862], "nativearrai": [17, 26, 27, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 122, 123, 124, 126, 131, 132, 133, 134, 135, 136, 138, 140, 141, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 163, 166, 167, 168, 170, 172, 174, 175, 181, 191, 192, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 311, 312, 316, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 511, 512, 513, 514, 515, 523, 526, 527, 529, 530, 534, 535, 536, 538, 541, 542, 543, 544, 545, 547, 549, 550, 551, 554, 557, 558, 560, 565, 566, 567, 570, 579, 580, 581, 582, 583, 585, 587, 588, 590, 601, 603, 604, 605, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 713, 714, 715, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 785, 810, 813, 817, 819, 822, 823, 824, 826, 827, 831, 832, 835, 837, 843], "alia": [17, 26, 329, 330, 365, 615, 805, 827, 848, 851], "select": [17, 26, 31, 44, 52, 65, 75, 88, 369, 371, 380, 422, 433, 482, 483, 512, 513, 635, 745, 746, 805, 806, 807, 814, 820, 826, 830, 835, 837, 840, 841, 856, 859, 860], "lastli": [17, 26, 810], "contain": [17, 26, 27, 41, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 158, 160, 161, 162, 163, 166, 167, 168, 170, 172, 175, 192, 194, 195, 196, 201, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 365, 367, 368, 369, 370, 371, 374, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 570, 573, 575, 580, 581, 582, 583, 585, 587, 588, 595, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 713, 714, 715, 718, 719, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 771, 772, 780, 781, 782, 784, 785, 789, 793, 794, 800, 802, 803, 805, 806, 808, 809, 810, 811, 812, 814, 815, 817, 818, 820, 822, 823, 824, 825, 826, 828, 830, 832, 833, 834, 835, 836, 839, 841, 842, 843, 845, 849, 856, 857, 862], "subclass": [17, 26, 27, 824, 827, 833, 850], "dict": [17, 26, 27, 40, 44, 47, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 129, 131, 136, 138, 144, 148, 150, 161, 162, 163, 167, 168, 175, 191, 194, 195, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 319, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 362, 371, 390, 391, 392, 393, 411, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 474, 480, 482, 483, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 524, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 561, 565, 566, 580, 581, 583, 585, 587, 588, 601, 612, 616, 618, 619, 622, 629, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 706, 707, 709, 712, 713, 714, 715, 717, 718, 719, 723, 724, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 761, 762, 777, 780, 782, 789, 794, 810, 813, 838, 839, 843, 849, 850, 851], "recurs": [17, 26, 27, 40, 42, 47, 69, 70, 161, 162, 194, 195, 369, 438, 539, 540, 546, 618, 619, 622, 629, 706, 707, 710, 716, 717, 718, 759, 806, 809, 812, 813, 820, 823, 826, 839, 841], "oper": [17, 18, 21, 22, 23, 24, 26, 27, 28, 32, 39, 42, 48, 49, 51, 52, 53, 56, 69, 71, 72, 74, 75, 76, 79, 98, 113, 132, 133, 175, 205, 213, 218, 220, 229, 232, 235, 242, 257, 259, 268, 269, 273, 277, 280, 285, 296, 304, 324, 325, 326, 357, 360, 362, 367, 368, 370, 371, 382, 383, 384, 386, 387, 388, 394, 395, 396, 400, 404, 405, 406, 407, 409, 410, 412, 414, 415, 442, 479, 481, 527, 534, 535, 536, 583, 614, 617, 618, 619, 620, 622, 624, 625, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 677, 679, 751, 753, 764, 767, 780, 794, 800, 805, 806, 808, 809, 810, 813, 815, 816, 817, 818, 819, 823, 826, 827, 830, 833, 835, 838, 839, 843, 845, 849, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863], "fashion": [17, 766, 830, 850], "native_arrai": [17, 26, 27, 48, 49, 51, 71, 73, 74, 75, 76, 80, 87, 105, 108, 131, 134, 136, 138, 144, 147, 148, 149, 150, 158, 163, 170, 192, 201, 209, 225, 229, 234, 235, 236, 238, 242, 246, 254, 255, 263, 268, 271, 274, 277, 282, 329, 330, 356, 365, 370, 371, 448, 474, 480, 484, 523, 526, 553, 554, 557, 587, 614, 617, 618, 619, 620, 622, 624, 625, 626, 627, 631, 632, 635, 636, 638, 639, 646, 653, 656, 660, 661, 667, 668, 672, 676, 677, 679, 682, 684, 686, 687, 694, 726, 735, 744, 750, 753, 755, 761, 771, 789, 803, 820, 828, 830], "data_class": [17, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 387, 388, 534, 538, 675, 700], "low": [17, 26, 29, 45, 52, 56, 61, 75, 79, 84, 368, 410, 414, 624, 631, 637, 638, 639, 640, 642, 644, 646, 727, 729, 766, 813, 819, 826, 827, 833, 835, 852, 854, 856, 857, 858, 860, 862], "level": [17, 26, 27, 29, 52, 75, 76, 369, 438, 526, 794, 800, 801, 805, 806, 807, 813, 815, 819, 823, 825, 826, 827, 829, 832, 833, 834, 835, 838, 839, 840, 841, 843, 847, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863], "c": [17, 26, 32, 41, 42, 48, 52, 53, 54, 56, 59, 65, 71, 72, 74, 75, 76, 77, 79, 80, 82, 86, 88, 92, 93, 111, 122, 123, 133, 136, 160, 163, 218, 229, 235, 236, 256, 257, 259, 268, 271, 279, 286, 368, 369, 371, 374, 380, 382, 383, 384, 395, 400, 416, 418, 420, 421, 423, 433, 452, 453, 454, 464, 482, 490, 491, 492, 495, 513, 526, 534, 535, 536, 537, 545, 549, 550, 588, 603, 604, 607, 609, 610, 611, 614, 617, 618, 620, 622, 623, 624, 625, 627, 629, 632, 633, 635, 638, 639, 640, 641, 642, 643, 645, 659, 661, 663, 694, 698, 706, 709, 713, 714, 715, 717, 718, 723, 724, 735, 740, 746, 747, 752, 754, 783, 793, 794, 801, 806, 808, 811, 812, 813, 817, 823, 825, 834, 835, 836, 838, 841, 843, 844, 846, 847, 850, 852, 856, 860, 861, 863], "fundament": [17, 26, 814, 827, 833, 835, 845, 856], "common": [17, 20, 26, 30, 51, 52, 69, 74, 174, 245, 253, 333, 339, 365, 618, 620, 801, 803, 805, 806, 812, 815, 816, 817, 823, 824, 827, 831, 833, 841, 845, 853, 856, 863], "signatur": [17, 26, 371, 380, 474, 511, 815, 816, 817, 818, 822, 826, 830, 831, 833, 846, 853, 862], "matmul": [17, 26, 27, 43, 57, 80, 369, 436, 602, 622, 625, 675, 811, 830, 831, 835], "to_n": [17, 26, 27, 38, 47, 70, 835], "jaxlib": [17, 23, 41, 789, 806, 810, 815, 816, 822, 831, 835, 837], "xla_extens": [17, 23, 789, 810, 815, 816, 822, 831, 835, 837], "arrayimpl": [17, 23, 789], "abov": [17, 22, 26, 27, 32, 33, 48, 51, 52, 57, 61, 68, 74, 75, 80, 84, 93, 113, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 305, 307, 322, 323, 329, 330, 332, 335, 360, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 401, 404, 405, 406, 411, 412, 413, 421, 422, 474, 482, 511, 514, 541, 545, 547, 549, 551, 588, 612, 614, 617, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 727, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 800, 803, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 830, 833, 835, 837, 838, 839, 840, 856, 861], "why": [17, 800, 807, 826, 837, 844, 846], "underli": [17, 26, 27, 38, 52, 59, 75, 82, 95, 225, 228, 230, 265, 370, 371, 447, 464, 620, 625, 627, 673, 694, 813, 826, 833, 849, 856], "disabl": [17, 26, 52, 75, 371, 482, 782, 812], "array_mod": [17, 26, 567, 590, 622, 832], "set_array_mod": [17, 26, 590, 622, 832], "composit": [17, 26, 161, 162, 194, 195, 287, 369, 428, 539, 540, 618, 619, 620, 622, 765, 767, 805, 808, 810, 811, 813, 815, 816, 824, 826, 827, 828, 830, 833, 835, 839, 840, 841, 843, 849, 857], "ultim": [17, 26, 849], "sigmoid": [17, 26, 27, 38, 46, 52, 68, 75, 295, 360, 375, 497, 614, 776, 835, 838, 839], "z": [17, 26, 27, 39, 40, 48, 51, 52, 53, 57, 58, 61, 63, 65, 71, 74, 75, 76, 80, 81, 82, 84, 88, 97, 98, 132, 133, 135, 136, 196, 218, 219, 223, 225, 228, 230, 235, 246, 247, 250, 251, 252, 254, 255, 260, 262, 264, 265, 266, 267, 275, 284, 294, 295, 329, 330, 332, 360, 365, 370, 380, 443, 445, 446, 447, 448, 449, 455, 459, 470, 510, 511, 514, 521, 526, 538, 541, 542, 549, 550, 566, 579, 580, 581, 589, 602, 617, 619, 620, 622, 625, 626, 627, 629, 631, 632, 633, 635, 655, 665, 670, 671, 675, 682, 684, 685, 686, 687, 709, 713, 715, 723, 727, 728, 729, 732, 737, 747, 748, 750, 751, 752, 779, 800, 811, 813, 816, 817, 835, 837, 849], "divid": [17, 22, 26, 27, 43, 51, 52, 53, 59, 69, 74, 75, 82, 97, 98, 242, 374, 444, 490, 491, 492, 495, 580, 620, 622, 627, 696, 810, 813, 817, 821, 830], "exp": [17, 26, 27, 51, 52, 74, 75, 111, 113, 240, 260, 273, 295, 360, 368, 370, 395, 400, 447, 614, 620, 625, 673, 825, 827], "high": [17, 26, 27, 45, 52, 56, 61, 75, 79, 84, 368, 410, 414, 574, 622, 624, 631, 637, 638, 639, 640, 642, 644, 646, 727, 729, 766, 805, 819, 825, 827, 838, 843, 847, 852, 853, 854, 855, 856, 860, 862, 863], "network": [17, 24, 26, 27, 38, 40, 45, 624, 648, 776, 779, 780, 800, 813, 823, 835, 839, 846, 850, 852, 854, 855, 856, 860, 862, 863], "entir": [17, 26, 27, 29, 42, 52, 65, 66, 69, 75, 76, 88, 89, 208, 238, 240, 280, 281, 329, 330, 365, 368, 371, 380, 391, 392, 393, 474, 514, 547, 619, 620, 635, 636, 748, 749, 750, 751, 752, 753, 754, 755, 756, 780, 794, 805, 806, 807, 809, 810, 813, 815, 817, 819, 826, 827, 828, 830, 833, 835, 838, 839, 840, 841, 846, 847, 850, 856, 862, 863], "further": [17, 69, 98, 766, 807, 809, 810, 814, 817, 819, 822, 823, 826, 827, 829, 830, 834, 835, 838, 839, 846, 847, 861, 862], "congratul": [17, 23], "There": [17, 24, 27, 32, 92, 361, 363, 364, 372, 373, 377, 766, 800, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 819, 821, 823, 825, 827, 828, 832, 835, 838, 841, 845, 849, 857, 858, 862, 863], "come": [17, 40, 805, 806, 807, 810, 814, 827, 832, 833, 839, 843, 856], "independ": [17, 27, 52, 61, 75, 84, 218, 235, 268, 278, 374, 375, 495, 497, 620, 625, 631, 655, 674, 726, 800, 809, 815, 817, 824, 835, 840, 850, 854], "good": [17, 26, 27, 800, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 830, 831, 833, 835, 836, 839], "foundat": [17, 846, 859], "power": [17, 26, 27, 51, 52, 53, 57, 74, 75, 76, 80, 97, 98, 229, 238, 239, 273, 327, 339, 362, 365, 368, 415, 571, 581, 593, 620, 622, 625, 629, 667, 680, 712, 779, 832, 837, 838, 839, 856, 858, 862], "defin": [18, 24, 26, 27, 28, 48, 52, 53, 57, 71, 75, 76, 80, 95, 111, 136, 140, 141, 142, 218, 235, 242, 268, 269, 277, 279, 282, 294, 298, 302, 308, 311, 312, 313, 322, 323, 324, 325, 326, 329, 330, 332, 360, 362, 365, 368, 369, 371, 380, 403, 420, 474, 480, 514, 549, 550, 570, 614, 617, 620, 622, 625, 635, 655, 660, 661, 674, 748, 749, 750, 752, 800, 805, 806, 810, 811, 814, 815, 818, 822, 825, 827, 828, 830, 831, 837, 839, 841, 843, 851, 853, 854, 855, 856, 857, 860, 862, 863], "div": [18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 851], "sub": [18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 52, 57, 59, 69, 70, 74, 75, 76, 80, 82, 98, 267, 369, 371, 380, 422, 460, 469, 488, 517, 518, 546, 622, 625, 627, 628, 658, 679, 696, 703, 704, 705, 805, 807, 808, 813, 819, 827, 828, 830, 837, 838, 839, 851, 852], "By": [18, 38, 45, 52, 58, 59, 65, 66, 75, 81, 82, 88, 89, 282, 327, 329, 330, 342, 349, 362, 365, 368, 370, 371, 378, 380, 390, 446, 447, 482, 504, 511, 514, 569, 620, 622, 625, 626, 627, 635, 636, 655, 681, 684, 693, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 806, 811, 815, 817, 819, 823, 825, 826, 827, 835, 839, 840, 849], "uniform": [18, 19, 20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 40, 52, 61, 75, 84, 380, 514, 631, 726, 727, 729, 779, 800, 829, 839, 850, 851, 863], "x_": [18, 28, 93, 279, 620, 851], "82997245": 18, "44733784": 18, "32163444": 18, "93330479": 18, "52438271": 18, "20438017": 18, "252316": 18, "0827222": 18, "26017165": 18, "88881904": 18, "compat": [18, 24, 28, 32, 38, 45, 51, 52, 57, 59, 62, 65, 66, 74, 75, 80, 82, 85, 88, 89, 97, 98, 149, 218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 246, 247, 254, 255, 260, 262, 264, 265, 268, 271, 273, 277, 284, 289, 329, 330, 365, 618, 620, 625, 627, 632, 635, 636, 655, 668, 671, 674, 677, 681, 682, 694, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 800, 806, 811, 822, 827, 828, 831, 835, 841, 846], "sever": [18, 19, 28, 29, 31, 32, 33, 52, 75, 92, 368, 369, 382, 383, 384, 434, 764, 806, 807, 831, 841, 854, 860], "pro": [18, 19, 20, 28, 29, 30, 31, 32, 33], "pick": [19, 29, 779], "off": [19, 29, 56, 57, 79, 80, 391, 392, 393, 624, 625, 647, 658, 679, 779, 780, 806, 820, 834, 847, 849, 862], "last": [19, 24, 26, 29, 48, 52, 56, 57, 58, 59, 62, 64, 65, 66, 69, 71, 75, 79, 80, 81, 82, 87, 88, 89, 93, 97, 132, 133, 136, 191, 307, 335, 362, 365, 368, 369, 370, 371, 378, 380, 396, 401, 411, 412, 413, 424, 446, 464, 474, 476, 482, 504, 512, 513, 617, 619, 624, 625, 626, 627, 632, 634, 635, 636, 649, 650, 655, 658, 670, 679, 681, 685, 686, 688, 691, 694, 695, 696, 698, 732, 733, 741, 743, 744, 745, 746, 755, 756, 780, 789, 800, 807, 809, 811, 812, 815, 817, 826, 828, 830, 833, 835, 841, 847, 850, 856], "purpos": [19, 26, 27, 29, 40, 42, 142, 240, 258, 322, 362, 617, 620, 625, 673, 807, 808, 810, 813, 814, 816, 817, 819, 822, 823, 824, 827, 829, 830, 833, 834, 837, 843, 855, 857, 860, 861, 862], "illustr": [19, 29, 811, 835], "trigger": [19, 29, 782, 805, 821], "unif": [19, 21, 22, 29, 31, 801, 837, 846, 852, 862], "detail": [19, 29, 42, 46, 51, 52, 57, 59, 63, 68, 74, 75, 76, 80, 82, 86, 105, 106, 107, 108, 109, 110, 111, 112, 113, 128, 139, 286, 290, 294, 295, 297, 360, 369, 418, 459, 537, 614, 617, 620, 633, 658, 665, 671, 675, 698, 737, 738, 739, 740, 776, 800, 805, 807, 809, 811, 812, 813, 814, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 835, 837, 838, 839, 858, 862], "55563945": 19, "65538704": 19, "14150524": 19, "46951997": 19, "30220294": 19, "14739668": 19, "57017946": 19, "91962677": 19, "51029003": 19, "59644395": 19, "arbitrari": [19, 29, 48, 49, 52, 69, 72, 75, 134, 148, 175, 316, 370, 444, 452, 453, 454, 605, 617, 618, 623, 822, 823, 825, 826, 827, 830, 839, 841, 849, 851, 857, 862], "constitu": [19, 29, 69, 840], "due": [19, 26, 27, 29, 43, 45, 268, 278, 371, 482, 620, 806, 809, 814, 819, 826, 827, 846, 849, 850, 856], "manner": [19, 27, 29, 39, 47, 70, 629, 718, 806, 815, 816, 818, 823, 827, 831, 838, 841, 845, 852, 854, 862, 863], "non": [19, 29, 49, 51, 52, 57, 61, 62, 65, 66, 72, 74, 75, 80, 84, 85, 88, 89, 129, 147, 165, 174, 243, 263, 264, 269, 329, 330, 334, 340, 353, 365, 368, 369, 371, 380, 411, 422, 426, 430, 453, 454, 514, 517, 617, 618, 620, 625, 629, 631, 632, 635, 636, 655, 656, 666, 668, 675, 677, 681, 682, 719, 728, 732, 733, 734, 735, 748, 749, 750, 751, 752, 754, 755, 756, 764, 779, 781, 782, 784, 810, 813, 817, 835, 849, 850, 851, 856], "5556394": 19, "655387": 19, "1415051": 19, "4695197": 19, "3022028": 19, "1473966": 19, "5701794": 19, "91962665": 19, "51028997": 19, "5964439": 19, "assess": [19, 29, 805, 833], "985": 19, "000": [19, 74, 269, 764, 803, 814, 820], "69": [19, 38, 45, 51, 77, 84, 216, 258, 368, 389, 399, 607, 620, 623, 625, 666, 667, 728, 830, 838], "slower": [19, 827], "On": [19, 26, 27, 806, 815, 816, 821, 827, 830, 833, 836, 840], "hand": [19, 51, 369, 436, 764, 800, 809, 815, 816, 821, 823, 830, 841], "singl": [19, 29, 38, 43, 51, 61, 69, 74, 84, 93, 287, 344, 365, 369, 375, 433, 498, 588, 601, 605, 620, 622, 623, 624, 631, 633, 650, 727, 728, 729, 737, 764, 780, 805, 806, 807, 809, 814, 817, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 838, 839, 840, 841, 847], "learnt": [20, 30], "two": [20, 30, 32, 38, 48, 52, 57, 63, 75, 76, 80, 97, 98, 118, 121, 127, 134, 140, 141, 142, 173, 181, 229, 243, 244, 278, 322, 323, 328, 340, 341, 343, 344, 346, 348, 355, 362, 365, 368, 369, 370, 371, 380, 396, 419, 420, 421, 433, 442, 444, 448, 453, 474, 480, 484, 511, 521, 526, 616, 617, 618, 620, 622, 625, 627, 633, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 699, 737, 738, 739, 740, 764, 766, 772, 780, 805, 806, 809, 810, 815, 816, 817, 818, 823, 827, 828, 830, 833, 834, 838, 840, 847, 853, 861], "workflow": [20, 30, 41, 805, 807, 811, 815, 825, 827, 838, 843, 847, 855, 862, 863], "ivy_norm": 20, "jax_norm": [20, 26, 27], "wider": [20, 30, 574, 596, 622, 815, 832, 862], "avoid": [20, 30, 32, 52, 59, 75, 235, 240, 242, 258, 268, 370, 371, 374, 444, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 488, 490, 491, 492, 528, 544, 546, 569, 574, 596, 620, 622, 627, 690, 691, 692, 694, 696, 697, 699, 701, 766, 767, 806, 807, 811, 812, 813, 814, 815, 819, 824, 827, 830, 831, 832, 833, 856], "conveni": [20, 30, 805, 815, 816, 822, 828, 836, 838, 839, 843, 862], "act": [20, 30, 52, 75, 356, 366, 807, 817, 832, 841, 863], "shorthand": [20, 30, 32, 830], "pair": [20, 30, 40, 52, 56, 75, 79, 223, 242, 314, 355, 362, 365, 368, 401, 410, 412, 414, 620, 624, 625, 637, 638, 639, 640, 642, 644, 646, 653, 655, 794], "93968587": 20, "26075466": 20, "22723222": 20, "06276492": 20, "47426987": 20, "72835908": 20, "71737559": 20, "50411096": 20, "65419174": 20, "15576624": 20, "implic": [20, 30, 31, 34, 813], "requir": [21, 22, 23, 24, 31, 40, 41, 42, 45, 51, 52, 69, 74, 75, 269, 282, 286, 369, 371, 421, 422, 474, 620, 625, 627, 659, 660, 661, 698, 764, 772, 777, 794, 802, 805, 806, 810, 812, 814, 815, 816, 817, 818, 819, 821, 822, 824, 827, 828, 829, 830, 831, 833, 835, 837, 841, 850, 856, 862], "satisfi": [21, 22, 23, 24, 40, 42, 45, 52, 368, 369, 390, 422, 815, 817], "opt": [21, 22, 23, 24, 44, 806, 811, 815, 826, 830, 833], "fw": [21, 22, 23, 24, 56, 79, 380, 511, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 761, 806, 830], "mxnet": [21, 22, 23, 24, 789, 805, 806, 846, 863], "26": [21, 22, 23, 24, 38, 40, 42, 45, 51, 52, 60, 61, 75, 76, 77, 84, 230, 235, 281, 368, 369, 389, 425, 433, 549, 603, 620, 622, 623, 624, 625, 629, 630, 635, 646, 658, 670, 677, 707, 725, 727, 728, 747], "einop": [21, 22, 23, 24, 40, 42, 45, 53, 76, 534, 535, 536, 622, 815, 846], "miniconda": [21, 22, 23, 24], "env": [21, 22, 23, 24], "multienv": [21, 22, 23, 24], "site": [21, 22, 23, 24, 857], "psutil": [21, 22, 23, 24, 40, 42, 45], "termcolor": [21, 22, 23, 24, 40, 42, 45, 69, 98], "colorama": [21, 22, 23, 24, 40, 42], "nvidia": [21, 22, 23, 24, 40, 42, 45, 860, 861], "535": [21, 22, 23, 24, 46, 68, 113, 614, 819], "diskcach": [21, 22, 23, 24, 40], "auth": [21, 22, 23, 24], "urllib3": [21, 22, 23, 24, 40], "pyvi": [21, 22, 23, 24, 26, 27], "dill": [21, 22, 23, 24, 40], "astunpars": [21, 22, 23, 24], "cloudpickl": [21, 22, 23, 24], "gast": [21, 22, 23, 24], "66": [21, 22, 23, 24, 38, 40, 42, 65, 75, 76, 77, 368, 399, 534, 535, 607, 622, 623, 625, 635, 670, 747], "wheel": [21, 22, 23, 24, 40, 42, 45, 845], "six": [21, 22, 23, 24, 40, 45, 806, 833], "cachetool": [21, 22, 23, 24], "pyasn1": [21, 22, 23, 24], "rsa": [21, 22, 23, 24], "jinja2": [21, 22, 23, 24], "jsonpickl": [21, 22, 23, 24], "networkx": [21, 22, 23, 24, 45], "charset": [21, 22, 23, 24, 40], "idna": [21, 22, 23, 24, 40], "certifi": [21, 22, 23, 24, 40], "2017": [21, 22, 23, 24, 40, 624, 650], "jedi": [21, 22, 23, 24], "inlin": [21, 22, 23, 24, 812], "prompt": [21, 22, 23, 24, 805, 807], "toolkit": [21, 22, 23, 24, 856, 857, 863], "pygment": [21, 22, 23, 24], "traitlet": [21, 22, 23, 24], "exceptiongroup": [21, 22, 23, 24], "paddl": [21, 22, 23, 24, 329, 330, 365, 777, 789, 805, 806, 815, 820], "pexpect": [21, 22, 23, 24], "markupsaf": [21, 22, 23, 24], "parso": [21, 22, 23, 24], "ptyprocess": [21, 22, 23, 24], "wcwidth": [21, 22, 23, 24], "asttoken": [21, 22, 23, 24], "pure": [21, 22, 23, 24, 32, 42, 800, 818, 822, 827, 833, 837, 840, 841, 856, 862, 863], "eagerli": [21, 22, 26, 27, 31, 32, 33, 40, 800, 849, 850, 851], "lazili": [21, 22, 23, 26, 27, 31, 33, 44, 800, 849, 850, 851], "actual": [21, 31, 803, 807, 808, 814, 820, 823, 824, 826, 827, 828, 830, 833, 834, 839, 841, 857, 862], "occur": [21, 26, 27, 31, 44, 49, 51, 63, 72, 74, 86, 150, 269, 285, 618, 620, 632, 633, 732, 733, 737, 738, 739, 740, 809, 814, 816, 819, 832], "becaus": [21, 29, 31, 41, 52, 368, 390, 759, 806, 807, 809, 810, 811, 812, 813, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 833, 835, 839, 840, 841, 856, 859, 862], "argument": [21, 23, 24, 26, 27, 29, 31, 32, 33, 38, 40, 42, 44, 47, 48, 51, 52, 53, 57, 69, 70, 74, 75, 76, 92, 93, 98, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 322, 323, 329, 330, 332, 335, 337, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 404, 405, 406, 411, 413, 415, 422, 474, 482, 511, 514, 518, 524, 525, 527, 528, 533, 535, 536, 541, 545, 547, 549, 551, 561, 565, 566, 583, 588, 589, 602, 612, 617, 618, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 712, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 764, 765, 772, 777, 780, 781, 782, 789, 793, 796, 800, 805, 808, 809, 810, 811, 812, 813, 817, 818, 821, 823, 828, 830, 831, 833, 835, 837, 838, 843, 845, 849, 850, 851, 856], "altern": [21, 31, 41, 52, 75, 80, 92, 93, 328, 336, 337, 341, 343, 344, 345, 346, 348, 349, 350, 354, 355, 365, 800, 805, 806, 812, 826, 838, 859], "dummi": [21, 22, 31, 32, 33, 39, 807], "seed": [21, 22, 42, 43, 52, 56, 61, 63, 69, 75, 79, 84, 317, 318, 319, 320, 321, 362, 369, 375, 426, 435, 441, 497, 498, 499, 500, 501, 624, 631, 633, 647, 726, 727, 728, 729, 731, 737, 772, 777, 779, 794, 824, 828, 830], "assum": [21, 22, 31, 32, 33, 48, 51, 52, 53, 56, 57, 58, 74, 75, 76, 79, 80, 81, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 307, 323, 329, 330, 332, 335, 352, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 434, 436, 474, 482, 511, 514, 541, 545, 547, 549, 558, 588, 612, 617, 618, 620, 622, 623, 624, 625, 626, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 780, 793, 800, 806, 809, 811, 814, 815, 818, 828, 830, 833, 837, 838, 841], "201733": 21, "core": [21, 22, 24, 40, 41, 42, 44, 45, 52, 75, 92, 95, 199, 369, 426, 435, 440, 441, 619, 806, 816, 820, 830, 840, 845, 854, 855, 856, 857, 861, 863], "cpu_feature_guard": [21, 22, 24], "182": [21, 22, 24, 75], "instruct": [21, 22, 24, 69, 98, 800, 805, 806, 809, 819, 821, 828, 830, 842, 854, 857, 860, 862], "critic": [21, 22, 24, 26, 27, 856, 862], "avx2": [21, 22, 24], "fma": [21, 22, 24], "rebuild": [21, 22, 24, 69, 98], "flag": [21, 22, 24, 69, 191, 370, 380, 444, 511, 619, 624, 650, 761, 772, 783, 807, 815, 816, 826, 827, 828, 830, 849, 850], "slowli": [21, 31], "norm": [21, 31, 32, 52, 53, 57, 75, 76, 80, 91, 92, 368, 369, 389, 390, 394, 395, 396, 399, 400, 401, 411, 412, 418, 422, 493, 494, 496, 529, 530, 551, 622, 625, 666, 682, 725, 780, 784, 831], "slow": [21, 31, 802, 806, 812], "34431235": [21, 22], "51129461": [21, 22], "06686894": [21, 22], "36452447": [21, 22], "98795534": [21, 22], "15493582": [21, 22], "91630631": [21, 22], "41939619": [21, 22], "78909753": [21, 22], "19475674": [21, 22], "norm_trac": 21, "float64": [21, 22, 49, 52, 61, 65, 71, 72, 74, 75, 76, 84, 88, 121, 129, 130, 147, 150, 154, 155, 160, 161, 164, 165, 170, 171, 175, 177, 178, 184, 187, 269, 339, 365, 370, 380, 442, 447, 511, 560, 617, 618, 622, 625, 631, 660, 661, 666, 682, 728, 729, 746, 761, 764, 765, 815, 828, 830], "norm_tran": [21, 31], "know": [21, 22, 31, 32, 33, 63, 633, 737, 738, 739, 740, 802, 805, 807, 816, 824, 828, 830, 833, 847, 851, 857], "07": [22, 40, 42, 54, 58, 74, 77, 81, 84, 223, 256, 259, 260, 279, 368, 399, 593, 603, 604, 606, 607, 608, 609, 620, 622, 623, 626, 685, 686, 728, 781, 784, 839], "981554": 22, "happen": [22, 26, 27, 287, 620, 800, 806, 807, 816, 826, 830, 838, 847, 849, 850], "wherea": [22, 33, 75, 368, 413, 807, 810, 813, 815, 816, 817, 822, 823, 830, 840, 853], "subtract": [22, 26, 27, 51, 74, 97, 98, 129, 371, 474, 617, 620, 810, 813, 817], "begin": [22, 52, 75, 279, 370, 371, 442, 458, 474, 475, 476, 477, 478, 620, 629, 706, 717, 764, 806, 809, 814, 828], "filelock": [23, 40], "extens": [23, 40, 51, 57, 74, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 150, 160, 163, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 329, 330, 332, 365, 368, 371, 380, 411, 482, 511, 617, 618, 620, 625, 627, 632, 633, 634, 635, 636, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 688, 690, 691, 692, 694, 695, 697, 698, 702, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 804, 806, 807, 818, 820, 821, 830, 853, 856, 863], "sympi": [23, 846], "fsspec": [23, 40], "mpmath": 23, "scenario": [23, 815, 825], "often": [23, 52, 370, 442, 804, 809, 819, 822, 823, 827, 830, 841, 847, 857, 860, 863], "fortun": [23, 24, 809], "everyth": [23, 41, 793, 800, 805, 806, 807, 808, 814, 817, 826, 827, 828, 830, 836, 841, 842, 847], "practic": [23, 807, 811, 814, 827, 829, 859], "specifi": [23, 24, 26, 27, 31, 32, 33, 44, 46, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 89, 92, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 125, 130, 132, 137, 140, 141, 143, 147, 149, 196, 201, 203, 207, 208, 209, 277, 286, 290, 294, 295, 297, 323, 328, 344, 349, 360, 362, 365, 368, 369, 370, 371, 375, 380, 386, 387, 388, 390, 396, 401, 411, 412, 413, 414, 422, 432, 434, 439, 442, 446, 447, 448, 450, 464, 467, 476, 477, 479, 480, 482, 498, 509, 511, 512, 513, 516, 517, 521, 524, 541, 542, 544, 546, 547, 560, 562, 570, 602, 614, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 650, 653, 655, 657, 658, 660, 661, 666, 674, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 695, 697, 698, 701, 702, 710, 711, 713, 714, 721, 722, 723, 724, 727, 728, 729, 731, 732, 733, 735, 738, 739, 740, 741, 745, 746, 747, 751, 753, 755, 756, 764, 767, 776, 780, 781, 782, 794, 806, 808, 812, 815, 816, 822, 823, 824, 826, 827, 828, 830, 835, 838, 839, 849, 850, 851, 862], "everi": [23, 26, 27, 32, 40, 48, 52, 53, 75, 76, 130, 131, 295, 329, 330, 342, 360, 365, 368, 371, 404, 405, 406, 413, 487, 523, 617, 622, 805, 807, 809, 811, 812, 814, 815, 817, 821, 822, 823, 824, 826, 827, 828, 830, 835, 837, 839, 849, 850, 851, 856], "jax_kornia": [23, 26, 27, 800, 850], "though": [23, 804, 805, 807, 815, 816, 818, 823, 826, 827, 833, 838, 841], "comput": [23, 24, 26, 27, 33, 34, 39, 40, 42, 46, 51, 52, 53, 54, 56, 57, 58, 63, 65, 68, 69, 74, 75, 76, 77, 79, 80, 81, 88, 92, 93, 95, 108, 112, 208, 218, 225, 228, 230, 235, 236, 237, 242, 243, 244, 246, 247, 253, 254, 255, 262, 263, 264, 265, 267, 268, 271, 276, 277, 294, 298, 302, 308, 311, 312, 324, 325, 326, 329, 330, 332, 336, 340, 342, 343, 347, 349, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 378, 380, 386, 387, 388, 389, 390, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 412, 415, 416, 418, 420, 421, 422, 423, 425, 426, 428, 431, 433, 435, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 468, 471, 484, 490, 492, 503, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 529, 530, 574, 596, 603, 605, 606, 608, 612, 613, 619, 620, 622, 623, 624, 625, 626, 627, 629, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 654, 655, 659, 660, 661, 664, 665, 666, 668, 670, 672, 674, 675, 677, 679, 681, 682, 684, 685, 686, 690, 712, 737, 738, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 761, 766, 780, 783, 794, 800, 806, 813, 814, 815, 823, 825, 827, 830, 832, 833, 835, 838, 841, 843, 846, 847, 849, 850, 852, 854, 856, 857, 859, 860, 862], "000000000034": [23, 26, 27, 800, 850], "raw_img": [23, 26, 27, 800, 850], "enhanc": [23, 26, 27, 800, 829, 850], "sharp": [23, 26, 27, 800], "prefer": [23, 26, 27, 242, 620, 800, 806, 813, 819, 820, 824, 827, 842, 856], "leverag": [23, 26, 27, 800, 806, 826, 850, 854, 856], "whole": [24, 52, 75, 371, 374, 481, 493, 494, 496, 807, 812, 821], "full": [24, 52, 57, 75, 79, 80, 92, 93, 95, 160, 247, 255, 317, 318, 319, 320, 321, 362, 369, 370, 371, 439, 440, 446, 447, 475, 478, 568, 577, 591, 599, 617, 618, 620, 622, 624, 625, 639, 641, 642, 643, 645, 668, 672, 674, 675, 765, 772, 800, 806, 807, 812, 815, 818, 819, 822, 823, 827, 830, 833, 835, 841, 846, 847, 854, 856, 862], "advantag": [24, 26, 27, 800, 806, 807, 815, 826, 827, 842, 850, 856], "complex": [24, 26, 27, 40, 46, 51, 52, 57, 65, 68, 72, 74, 75, 80, 88, 105, 106, 107, 108, 109, 110, 111, 112, 113, 137, 138, 153, 167, 176, 182, 215, 216, 217, 218, 219, 220, 221, 224, 232, 233, 235, 236, 238, 240, 248, 249, 250, 251, 252, 256, 257, 258, 259, 268, 270, 271, 273, 275, 278, 279, 280, 281, 282, 285, 286, 290, 294, 295, 297, 332, 337, 360, 365, 368, 369, 380, 390, 401, 411, 412, 416, 421, 422, 423, 432, 434, 519, 520, 580, 581, 614, 617, 618, 620, 622, 625, 632, 635, 659, 660, 661, 666, 673, 675, 677, 679, 682, 735, 750, 751, 753, 765, 776, 794, 805, 812, 815, 817, 824, 827, 830, 831, 833, 838, 839, 840, 841, 843, 850, 852, 854, 856, 858, 862, 863], "neccessari": 24, "set_random_se": [24, 43], "manual_se": 24, "301436": 24, "_c": 24, "0x7f252c392390": 24, "convolut": [24, 52, 56, 75, 79, 368, 388, 406, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 766, 780, 850, 854, 856], "flatten": [24, 26, 27, 40, 42, 45, 52, 53, 57, 59, 62, 63, 75, 76, 80, 82, 85, 86, 334, 349, 365, 369, 371, 380, 419, 463, 473, 477, 482, 483, 487, 509, 516, 517, 518, 519, 520, 521, 534, 538, 622, 625, 627, 632, 633, 662, 670, 682, 688, 693, 695, 732, 733, 737, 738, 739, 740, 759, 761, 800, 826, 833], "keyword": [24, 26, 27, 42, 44, 47, 48, 52, 69, 75, 98, 134, 269, 368, 371, 380, 415, 474, 511, 525, 528, 561, 589, 617, 620, 622, 625, 629, 635, 676, 712, 753, 759, 761, 765, 781, 782, 793, 805, 810, 813, 815, 816, 824, 826, 827, 828, 830, 831, 833, 838, 849, 850, 851], "input_arrai": [24, 26, 27, 826], "torch_model": [24, 26, 27, 44], "159": [24, 68, 105, 614, 624, 648], "state_upd": 24, "properti": [24, 69, 92, 93, 94, 95, 96, 97, 101, 782, 784, 809, 813, 823, 828, 830, 837, 838, 839, 862], "_transpil": 24, "thank": [24, 838, 846], "fledg": [24, 806, 835, 836], "rand": [24, 26, 27, 42, 793, 794, 800, 849], "output_arrai": [24, 26, 27, 52, 444], "0893": 24, "1504": 24, "1372": 24, "0991": 24, "0867": 24, "0851": 24, "0911": 24, "0804": 24, "0926": 24, "0881": 24, "softmaxbackward0": 24, "furthermor": 24, "relat": [24, 242, 620, 800, 802, 804, 805, 806, 807, 812, 819, 827, 830, 831, 832, 833, 850, 859], "interest": [24, 26, 38, 235, 268, 620, 805, 807], "continu": [24, 26, 27, 42, 120, 282, 290, 360, 616, 620, 800, 804, 805, 806, 808, 809, 820, 826, 829, 830, 841, 846, 847, 856], "regress": [25, 856, 863], "checkout": [26, 41, 807, 809, 830], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 26, "theoret": 26, "aspect": [26, 27, 801, 825, 838, 856], "switch": [26, 38, 772, 811, 819, 823, 824, 863], "easiest": [26, 800, 802, 806, 842], "defer": [26, 27, 805, 810, 815, 816, 823, 826, 827, 830, 862], "similarli": [26, 39, 134, 142, 218, 322, 329, 330, 362, 365, 617, 620, 811, 815, 827, 833, 837, 862], "obtain": [26, 27, 45, 52, 75, 313, 362, 368, 407, 624, 650, 766, 827, 849], "essenc": [26, 857, 862], "becom": [26, 52, 75, 92, 339, 365, 371, 454, 627, 687, 789, 807, 813, 815, 817, 819, 826, 841, 845, 847, 849], "regardless": [26, 27, 38, 69, 801, 815, 819, 837, 840, 847], "being": [26, 27, 38, 52, 69, 75, 90, 97, 101, 121, 369, 371, 430, 458, 474, 575, 617, 622, 625, 661, 761, 767, 779, 800, 806, 807, 809, 810, 811, 813, 815, 816, 817, 820, 822, 824, 826, 827, 828, 830, 831, 833, 835, 838, 841, 846, 847, 852, 854, 855, 856, 857, 862, 863], "slide": [26, 52, 56, 75, 79, 368, 386, 387, 388, 404, 405, 406, 407, 410, 414, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 780], "A": [26, 27, 41, 48, 49, 52, 53, 59, 61, 65, 66, 69, 72, 74, 75, 76, 79, 80, 82, 84, 86, 89, 92, 93, 98, 117, 118, 120, 127, 135, 142, 148, 189, 208, 270, 272, 276, 307, 318, 322, 324, 325, 326, 328, 341, 344, 348, 349, 362, 365, 368, 369, 370, 371, 374, 375, 380, 383, 396, 410, 413, 415, 422, 433, 436, 444, 448, 459, 462, 480, 484, 485, 490, 491, 492, 493, 497, 498, 499, 500, 501, 509, 518, 521, 526, 528, 537, 546, 549, 550, 580, 581, 582, 585, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 629, 631, 635, 636, 647, 650, 658, 660, 663, 664, 669, 670, 674, 675, 687, 690, 692, 696, 698, 706, 709, 711, 713, 714, 715, 716, 717, 721, 722, 723, 724, 726, 727, 728, 729, 731, 737, 747, 755, 756, 759, 761, 762, 764, 765, 766, 767, 772, 779, 794, 798, 800, 804, 805, 806, 808, 813, 815, 816, 819, 822, 823, 827, 828, 830, 835, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 856, 857], "regressor": [26, 27, 800], "input_dim": [26, 27, 41, 800], "output_dim": [26, 27, 41, 800], "linear0": [26, 27, 38, 800, 838, 839], "linear1": [26, 27, 38, 800, 838, 839], "instanti": [26, 27, 772, 818], "adam": [26, 27, 38, 42, 54, 77, 525, 603, 604, 609, 622, 623, 784, 800, 838, 839, 840, 856], "n_training_exampl": [26, 27, 800], "2000": [26, 27, 75, 308, 362, 800], "random_norm": [26, 27, 56, 57, 61, 79, 80, 84, 534, 622, 624, 625, 631, 639, 641, 642, 643, 645, 646, 649, 675, 800], "linspac": [26, 27, 48, 71, 121, 617, 800, 822, 833, 835, 863], "loss_fn": [26, 27, 38, 40, 42, 800, 838, 839, 840], "pred": [26, 27, 41, 42, 52, 58, 75, 81, 370, 443, 446, 626, 684, 685, 686, 800, 813, 823, 826], "epoch": [26, 27, 40, 42, 800], "loss": [26, 27, 40, 42, 52, 75, 92, 442, 443, 444, 445, 446, 447, 448, 449, 574, 596, 622, 684, 685, 686, 800, 814, 815, 823, 827, 831, 832, 838, 839, 840, 856, 863], "gradient": [26, 27, 40, 42, 52, 75, 92, 208, 357, 365, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 628, 703, 704, 705, 761, 772, 784, 800, 808, 831, 838, 839, 841, 856], "grad": [26, 27, 38, 42, 603, 623, 784, 800, 825, 838, 839, 840], "execute_with_gradi": [26, 27, 38, 42, 623, 800, 838, 839, 840, 841], "lambda": [26, 27, 43, 45, 75, 118, 120, 292, 301, 533, 605, 606, 608, 613, 616, 622, 623, 625, 629, 660, 713, 714, 718, 800, 805, 823, 824, 825, 828, 833, 835, 838], "2d": [26, 27, 42, 52, 75, 92, 307, 362, 368, 369, 371, 380, 383, 384, 391, 392, 432, 439, 453, 463, 511, 780, 800, 827, 833], "5f": [26, 27, 800], "nonetheless": [26, 27], "slight": [26, 27, 815, 830, 839], "introduc": [26, 27, 242, 620, 627, 633, 695, 737, 805, 813, 814, 815, 824, 828, 830, 833, 838, 845], "address": [26, 27, 52, 53, 75, 371, 482, 587, 622, 805, 807, 809, 810, 822, 829, 835, 847, 852, 854, 856, 862], "extract": [26, 27, 34, 41, 52, 75, 93, 371, 457, 483, 827, 829, 831, 852, 856, 857, 862], "gc": [26, 27, 546, 622], "decompos": [26, 27, 52, 75, 92, 95, 317, 318, 319, 320, 321, 341, 348, 362, 365, 369, 430, 435, 438, 441, 827, 840], "said": [26, 27, 766, 831, 847, 849], "otherwis": [26, 27, 44, 47, 48, 49, 51, 52, 53, 56, 57, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 121, 123, 124, 129, 131, 132, 133, 136, 138, 144, 147, 148, 150, 151, 153, 154, 155, 156, 157, 166, 170, 174, 175, 191, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 307, 317, 318, 319, 320, 321, 328, 329, 330, 331, 332, 334, 335, 336, 343, 344, 350, 352, 354, 355, 356, 360, 362, 365, 368, 369, 374, 386, 387, 388, 391, 392, 393, 411, 424, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 460, 462, 464, 465, 466, 473, 480, 482, 483, 484, 488, 490, 492, 493, 494, 496, 498, 510, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 558, 565, 566, 580, 581, 583, 585, 587, 588, 589, 601, 605, 607, 612, 616, 617, 618, 619, 620, 622, 623, 624, 625, 628, 629, 632, 633, 634, 635, 636, 638, 639, 640, 641, 647, 648, 650, 653, 654, 655, 656, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 675, 679, 681, 682, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 719, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 764, 765, 780, 782, 783, 789, 800, 807, 810, 813, 815, 816, 817, 823, 824, 826, 830, 835, 842, 849, 850], "x0": [26, 27, 45, 76, 526, 622, 817], "normalize_trac": [26, 27], "html": [26, 27, 41, 51, 52, 74, 75, 142, 150, 238, 248, 249, 264, 322, 329, 330, 362, 365, 368, 371, 380, 411, 482, 511, 617, 618, 620, 625, 627, 635, 673, 674, 702, 752, 800, 818, 846], "fname": [26, 27, 43, 45, 782, 838], "anticip": [26, 27], "addition": [26, 27, 813, 826, 827, 862], "backend_compil": [26, 27], "normalize_native_comp": [26, 27], "return_backend_compiled_fn": 26, "immedi": [26, 27, 805, 806], "built": [26, 27, 32, 40, 42, 45, 121, 617, 780, 781, 782, 800, 806, 807, 812, 813, 830, 836, 842, 849, 855, 856, 860], "summar": [26, 27, 92, 830], "eager_graph": [26, 27, 800, 849, 850], "lazy_graph": [26, 27, 800, 849, 850], "codebas": [26, 27, 206, 207, 619, 801, 808, 815, 821, 826, 827, 829, 830, 831, 834, 847], "thought": [26, 27, 806, 807, 822, 846, 854], "research": [26, 27, 40, 800, 845, 850, 856, 863], "wa": [26, 27, 32, 41, 52, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 95, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 351, 352, 354, 355, 356, 362, 365, 369, 391, 392, 393, 411, 440, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 480, 482, 483, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 589, 601, 607, 612, 620, 622, 629, 635, 636, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 789, 800, 802, 807, 809, 811, 812, 814, 817, 823, 825, 827, 835, 837, 846, 849, 850, 855, 856, 858], "No": [26, 27, 40, 52, 58, 75, 81, 370, 444, 445, 446, 448, 449, 626, 684, 807, 814, 815, 856], "matter": [26, 27, 32, 817, 845], "job": [26, 27, 800, 812, 814, 850], "haven": [26, 27, 32, 842, 856], "jax_out": [26, 27], "ideal": [26, 27, 814, 815, 827, 833, 838], "But": [26, 27, 766, 813, 814, 818, 821, 824, 833, 840], "bring": [26, 27, 809, 829, 830, 835, 836, 843, 846], "wise": [26, 46, 51, 52, 57, 68, 74, 75, 80, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 276, 277, 284, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 303, 304, 305, 328, 331, 336, 338, 339, 340, 343, 344, 345, 346, 350, 351, 354, 355, 360, 365, 368, 369, 371, 391, 392, 393, 420, 427, 461, 468, 470, 471, 489, 614, 620, 627, 655, 687, 784, 833], "vision": [26, 27, 45, 852, 862], "worth": [26, 27], "differenti": [26, 27, 290, 358, 359, 360, 367, 856], "chosen": [26, 27, 45, 95, 121, 223, 617, 620, 632, 736, 805, 814, 827], "plai": [26, 27, 370, 446, 800, 806, 810, 816, 820, 827, 830, 840, 856, 859], "role": [26, 27, 800, 807, 816, 827, 836, 857, 859, 863], "dl": [26, 27], "cnn": [26, 27, 856], "effortlessli": [26, 27], "previous": [26, 27, 591, 622, 789, 806, 811, 823, 825, 830, 835], "pre": [26, 27, 800, 803, 805, 829, 830, 840, 841, 842, 856], "default_devic": [26, 27, 201, 204, 205, 206, 212, 213, 619, 816, 819, 820], "as_n": [26, 27, 49, 50, 69, 72, 73, 153, 154, 155, 156, 157, 158, 164, 191, 192, 204, 618, 619, 815], "certainli": [26, 27, 800, 846, 862], "upon": [26, 27, 44, 807, 817, 826, 830, 833, 841, 855, 856], "unnecessari": [26, 27, 827], "extend": [26, 27, 52, 75, 371, 380, 474, 514, 811, 812, 815, 818, 819, 822, 827, 831, 841, 853, 856, 862], "infrastructur": [26, 27, 800, 852, 858, 859], "least": [26, 51, 52, 57, 74, 75, 235, 253, 268, 368, 371, 380, 395, 400, 452, 453, 454, 463, 465, 511, 620, 625, 632, 665, 735, 800, 807, 810, 814, 815, 816, 817, 823, 826, 830, 850], "coco": 26, "seamlessli": [27, 830], "benefit": [27, 800, 806, 810, 813, 826, 833, 837, 838, 841, 846, 847, 854, 858, 861], "through": [27, 32, 40, 52, 75, 95, 223, 380, 517, 518, 620, 629, 709, 715, 782, 793, 800, 801, 803, 804, 805, 807, 808, 811, 812, 813, 814, 816, 817, 819, 820, 821, 823, 824, 826, 827, 828, 830, 832, 833, 834, 835, 838, 839, 840, 849, 854, 856, 857, 858], "therefor": [27, 32, 48, 51, 52, 57, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 174, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 322, 323, 329, 330, 332, 335, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 467, 474, 475, 477, 482, 486, 511, 514, 518, 527, 535, 536, 541, 545, 547, 549, 551, 565, 583, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 805, 807, 809, 810, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 837, 839, 841, 845, 853, 856, 862], "wide": [27, 800, 807, 830, 854, 856], "prepar": [27, 40, 42, 45, 800, 814], "plenti": 27, "resourc": [27, 801, 805, 806, 814], "visit": [27, 805, 806, 807, 814], "page": [27, 800, 805, 806, 807, 812, 814, 820, 836, 837, 840, 842, 851], "newli": [28, 29, 41, 43, 49, 72, 147, 528, 618, 622, 807, 814, 826, 830], "randon": [28, 29, 31, 32, 33], "mean_": 28, "std_": 28, "detect": [28, 32, 51, 69, 74, 250, 620, 629, 706, 717, 805, 806, 811, 813, 814, 821, 830, 838, 839], "inspect": [28, 32, 524, 622], "__": [28, 29, 30, 31, 32, 33, 69, 817, 838], "exhibit": [29, 862], "via": [29, 32, 242, 369, 371, 435, 438, 441, 482, 620, 629, 716, 717, 807, 809, 813, 815, 816, 826, 831, 833, 835, 837, 838, 856], "script": [29, 800, 806, 807, 809, 814, 817, 835, 841, 856], "comp": 29, "low_level": 29, "chain": [29, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 163, 167, 168, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 391, 392, 393, 411, 442, 443, 444, 445, 446, 447, 448, 449, 458, 459, 480, 482, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 628, 629, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 703, 704, 708, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 785, 810, 813, 825, 827, 839, 840, 841, 856], "un": [29, 165, 618, 815, 835], "partial_comp": 29, "time_funct": 29, "slowest": [29, 52, 59, 75, 82, 371, 464, 627, 694], "express": [29, 51, 52, 74, 75, 93, 216, 220, 222, 223, 232, 234, 274, 280, 285, 352, 365, 620, 786, 794, 818, 827, 835, 840, 856, 857], "fastest": [29, 52, 59, 75, 82, 369, 371, 433, 464, 627, 694], "maxim": [29, 823, 826, 835, 853, 854, 858, 859, 860], "conclud": [30, 831], "collect": [30, 40, 42, 44, 45, 47, 69, 70, 614, 619, 622, 623, 624, 626, 629, 630, 631, 719, 776, 780, 781, 782, 783, 784, 806, 814, 819, 820, 824, 825, 828, 830, 854, 856, 859], "norm_comp": [31, 32], "global": [31, 32, 42, 53, 69, 76, 98, 153, 154, 155, 156, 157, 206, 207, 208, 571, 572, 575, 580, 581, 593, 594, 597, 618, 619, 622, 772, 783, 789, 806, 810, 811, 814, 815, 816, 819, 823, 827, 835, 856], "approach": [31, 803, 805, 806, 807, 810, 813, 815, 816, 820, 823, 827, 830, 831, 833, 837, 838, 841, 853, 860, 862], "b": [32, 46, 51, 52, 53, 56, 57, 65, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 96, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 124, 129, 130, 131, 133, 136, 138, 144, 147, 148, 149, 150, 158, 168, 170, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 324, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 365, 368, 369, 370, 371, 375, 378, 380, 386, 387, 388, 389, 391, 392, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 417, 420, 422, 424, 428, 433, 436, 441, 442, 443, 445, 446, 447, 448, 452, 453, 454, 455, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 480, 482, 483, 484, 485, 488, 489, 494, 496, 498, 499, 501, 502, 504, 511, 512, 513, 514, 516, 518, 521, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 558, 565, 566, 580, 581, 583, 587, 588, 601, 603, 604, 605, 607, 609, 610, 611, 612, 614, 617, 618, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 653, 654, 655, 656, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 709, 712, 713, 714, 715, 717, 718, 723, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 793, 794, 800, 801, 803, 807, 808, 809, 811, 813, 814, 817, 820, 823, 825, 828, 834, 835, 836, 838, 839, 840, 844, 847, 849, 852], "option": [32, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 163, 165, 175, 187, 191, 203, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 413, 415, 416, 418, 419, 420, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 532, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 549, 550, 551, 553, 554, 557, 562, 565, 566, 570, 580, 581, 583, 585, 587, 588, 589, 601, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 712, 713, 717, 718, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 765, 772, 776, 777, 779, 780, 782, 784, 785, 793, 798, 805, 806, 807, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 830, 831, 833, 835, 840, 841, 849, 850, 851, 856, 862], "prioriti": [32, 69, 789, 805, 807, 816, 826], "normalize_via_oper": 32, "determin": [32, 51, 52, 57, 59, 63, 66, 69, 74, 75, 76, 80, 87, 89, 92, 95, 97, 98, 127, 150, 152, 159, 165, 166, 167, 168, 170, 171, 172, 187, 197, 199, 200, 211, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 235, 238, 240, 242, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 265, 268, 273, 277, 280, 281, 282, 283, 284, 285, 286, 289, 298, 302, 347, 352, 360, 365, 368, 369, 370, 371, 380, 403, 411, 422, 442, 443, 482, 511, 523, 526, 547, 548, 552, 553, 554, 555, 556, 557, 583, 601, 617, 618, 619, 620, 622, 625, 627, 628, 633, 636, 654, 655, 656, 658, 662, 663, 665, 667, 668, 670, 671, 673, 674, 679, 681, 682, 688, 703, 704, 705, 737, 738, 739, 740, 741, 755, 756, 766, 772, 779, 783, 813, 815, 816, 818, 823, 827, 830, 832, 833, 845], "think": [32, 805, 807, 814, 817, 833, 857], "uniqu": [32, 42, 52, 53, 63, 75, 76, 86, 368, 369, 371, 415, 436, 473, 474, 487, 558, 622, 628, 629, 633, 703, 704, 705, 708, 712, 737, 738, 739, 740, 766, 800, 805, 809, 813, 823, 827, 828, 829, 833, 841, 845, 859], "rule": [32, 49, 51, 52, 57, 72, 74, 75, 80, 147, 150, 173, 174, 175, 224, 235, 268, 270, 277, 279, 287, 289, 368, 371, 380, 411, 462, 511, 618, 620, 625, 627, 654, 655, 662, 667, 670, 674, 688, 766, 793, 809, 810, 813, 814, 815, 817, 821, 822, 823, 825, 830, 833, 857], "broadcast": [32, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 323, 329, 330, 331, 332, 333, 334, 337, 339, 341, 343, 345, 346, 347, 348, 352, 360, 362, 365, 368, 369, 370, 371, 374, 375, 380, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 403, 404, 405, 406, 409, 411, 416, 418, 419, 427, 428, 431, 432, 434, 443, 444, 445, 446, 448, 449, 455, 459, 462, 467, 475, 476, 477, 478, 480, 482, 484, 486, 490, 493, 494, 496, 497, 498, 500, 501, 511, 512, 513, 514, 517, 518, 519, 520, 521, 529, 530, 534, 535, 536, 541, 542, 551, 565, 566, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 674, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 740, 741, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 766, 793, 813, 815, 817, 818, 819, 830, 831, 835], "elementwis": [32, 52, 60, 75, 83, 294, 296, 355, 360, 625, 630, 680, 725, 823, 831, 835], "must": [32, 40, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 208, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 319, 320, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 337, 339, 341, 343, 345, 346, 347, 348, 352, 355, 360, 362, 365, 368, 369, 370, 371, 374, 375, 378, 380, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 409, 411, 412, 414, 416, 418, 419, 421, 427, 428, 431, 432, 433, 434, 439, 443, 444, 445, 446, 448, 449, 452, 453, 454, 459, 460, 462, 464, 465, 466, 467, 469, 473, 475, 476, 477, 478, 480, 482, 483, 484, 486, 488, 493, 494, 496, 497, 498, 500, 501, 504, 511, 512, 513, 514, 521, 529, 530, 534, 535, 536, 541, 542, 544, 551, 565, 566, 602, 603, 604, 607, 609, 610, 611, 612, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 779, 780, 784, 786, 804, 805, 806, 807, 809, 810, 814, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 830, 831, 832, 833, 835, 839, 840, 845, 847, 850, 851, 857, 863], "taken": [32, 52, 57, 75, 80, 335, 365, 368, 412, 625, 658, 679, 805, 814, 827, 831, 840, 857], "account": [32, 42, 44, 52, 59, 75, 82, 282, 371, 464, 620, 627, 694, 779, 793, 806, 814, 818, 827, 831, 849], "rather": [32, 53, 69, 76, 121, 208, 553, 554, 557, 617, 619, 622, 803, 807, 809, 813, 815, 818, 820, 827, 828, 830, 831, 840, 841, 846, 852, 855, 856], "fact": [32, 92, 807, 809, 814, 827, 830, 835, 838], "consum": [32, 761, 813, 814, 822, 828, 830], "thrown": [32, 551, 622, 806, 810, 816, 819, 821, 841], "doesn": [32, 551, 569, 622, 759, 780, 805, 806, 811, 813, 814, 815, 816, 817, 820, 821, 823, 825, 830, 833, 835, 841, 849, 854], "consider": [32, 805, 817, 822, 833, 845, 853, 854], "effect": [32, 48, 52, 54, 65, 75, 77, 88, 134, 370, 403, 446, 603, 611, 617, 623, 624, 635, 650, 752, 754, 764, 767, 805, 810, 813, 814, 818, 822, 826, 828, 833, 841, 846], "explain": [32, 52, 75, 368, 401, 412, 800, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 830, 831, 833, 835, 836, 837, 838, 839, 840, 852, 859, 862], "necessari": [32, 48, 52, 71, 75, 82, 123, 235, 268, 370, 371, 442, 452, 453, 454, 460, 462, 463, 464, 465, 466, 473, 488, 574, 596, 620, 622, 690, 691, 692, 694, 696, 697, 699, 701, 800, 805, 806, 810, 811, 813, 815, 817, 826, 827, 830, 832, 833, 849, 850], "standalon": [33, 805, 810, 830, 843, 852, 857, 862, 863], "dynam": [33, 627, 694, 782, 789, 808, 814, 815, 816, 826, 827, 832, 835, 849, 856, 860], "static": [33, 52, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 101, 102, 124, 313, 368, 388, 401, 406, 415, 435, 441, 480, 491, 583, 617, 624, 650, 670, 777, 782, 827, 832, 841, 855, 856, 857], "flow": [34, 813, 849, 856, 857], "statement": [34, 39, 814, 826, 830, 833, 841, 849, 850], "opposit": 34, "exclud": [34, 65, 75, 88, 121, 142, 322, 362, 512, 513, 617, 631, 729, 745, 764, 767, 789, 817, 835, 849], "todo": [35, 36, 37, 42, 45, 75, 513, 805, 815, 827], "aim": [38, 803, 807, 809, 820, 824, 827, 830, 834, 854, 856, 859], "interfac": [38, 71, 129, 617, 837, 840, 841, 843, 846, 852, 853, 854, 855, 856, 860, 863], "set_framework": [38, 45], "44": [38, 42, 51, 52, 61, 74, 75, 84, 221, 268, 278, 282, 283, 333, 365, 368, 388, 389, 620, 624, 625, 629, 632, 635, 647, 670, 714, 727, 728, 736, 747], "45": [38, 40, 42, 51, 52, 65, 74, 75, 77, 79, 84, 98, 219, 223, 235, 278, 279, 337, 350, 365, 368, 380, 389, 399, 410, 512, 518, 603, 609, 620, 623, 625, 627, 635, 670, 696, 728, 729, 747, 764], "46": [38, 40, 42, 52, 61, 75, 79, 84, 133, 258, 279, 308, 362, 368, 387, 405, 406, 617, 620, 629, 707, 727, 728], "underneath": [38, 814, 854], "sai": [38, 805, 806, 820, 824, 837, 847], "clip": [38, 51, 52, 59, 74, 75, 76, 82, 266, 267, 371, 457, 482, 483, 529, 530, 620, 622, 627, 813, 823, 825, 826, 838, 840], "a_min": 38, "a_max": 38, "tensforflow": 38, "clip_by_valu": [38, 840], "clip_value_min": 38, "clip_value_max": 38, "clamp": [38, 52, 75, 294, 360, 840], "min": [38, 42, 49, 52, 53, 57, 65, 72, 75, 76, 80, 88, 140, 142, 160, 163, 267, 322, 325, 330, 362, 365, 369, 371, 422, 479, 519, 535, 565, 566, 580, 617, 618, 620, 622, 625, 635, 666, 672, 675, 676, 682, 800], "max": [38, 40, 49, 52, 53, 57, 65, 72, 75, 76, 80, 88, 160, 163, 266, 329, 365, 368, 369, 370, 371, 386, 387, 388, 404, 405, 406, 407, 409, 411, 422, 442, 479, 481, 482, 529, 530, 535, 551, 565, 566, 618, 620, 622, 625, 635, 666, 668, 671, 764, 780, 784, 814, 827], "49": [38, 42, 52, 61, 75, 79, 80, 282, 368, 369, 380, 389, 399, 410, 433, 512, 620, 635, 680, 728, 747], "devicearrai": [38, 810, 827, 835, 837], "concaten": [38, 52, 53, 59, 75, 80, 371, 459, 534, 538, 622, 624, 627, 650, 670, 688, 764, 828, 833, 835, 838], "accept": [38, 47, 48, 51, 52, 57, 70, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 322, 323, 329, 330, 332, 335, 336, 357, 362, 365, 367, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 474, 482, 511, 514, 518, 527, 535, 536, 541, 545, 547, 549, 551, 565, 583, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 800, 805, 806, 807, 810, 813, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 837, 843, 854], "jax_concat": 38, "tf_concat": 38, "np_concat": 38, "torch_concat": 38, "85": [38, 46, 52, 61, 68, 74, 75, 77, 79, 84, 98, 107, 220, 229, 230, 274, 290, 291, 293, 360, 380, 512, 580, 607, 614, 620, 622, 623, 624, 631, 648, 727, 728, 729], "mymodel": [38, 838], "x_in": [38, 838, 839, 840], "reduce_mean": [38, 800, 838, 839, 840], "91": [38, 52, 79, 84, 353, 365, 410, 624, 625, 631, 635, 648, 670, 728, 747], "49040043354034424": 38, "48975786566734314": 38, "4892795979976654": 38, "48886892199516296": 38, "4884953498840332": 38, "4881443977355957": 38, "4878086447715759": 38, "48748287558555603": 38, "48716384172439575": 38, "48684927821159363": 38, "48653748631477356": 38, "48622724413871765": 38, "4859171509742737": 38, "48560672998428345": 38, "48529526591300964": 38, "4849821627140045": 38, "48466697335243225": 38, "4843493402004242": 38, "4840289056301117": 38, "4837053418159485": 38, "4833785891532898": 38, "4830484390258789": 38, "48271444439888": 38, "48237672448158264": 38, "48203518986701965": 38, "48168954253196716": 38, "4813397228717804": 38, "4809857904911041": 38, "48062753677368164": 38, "48026490211486816": 38, "479898065328598": 38, "47952669858932495": 38, "4791509211063385": 38, "4787706732749939": 38, "47838595509529114": 38, "4779967665672302": 38, "47760307788848877": 38, "4772048890590668": 38, "47680220007896423": 38, "47639501094818115": 38, "47598329186439514": 38, "4755673110485077": 38, "4751465618610382": 38, "4747215211391449": 38, "4742920398712158": 38, "47385817766189575": 38, "47341999411582947": 38, "47297725081443787": 38, "4725303053855896": 38, "47207894921302795": 38, "47162333130836487": 38, "47116345167160034": 38, "470699280500412": 38, "47023090720176697": 38, "54": [38, 49, 51, 56, 74, 75, 79, 84, 163, 232, 233, 238, 253, 282, 288, 308, 362, 368, 380, 389, 399, 512, 620, 624, 625, 635, 648, 667, 670, 727, 728, 729, 747, 814, 817], "4697583019733429": 38, "55": [38, 46, 75, 84, 113, 229, 288, 380, 512, 549, 620, 622, 625, 631, 635, 663, 670, 728, 729, 747, 809], "46928152441978455": 38, "46880054473876953": 38, "4683155119419098": 38, "58": [38, 259, 529, 620, 622], "4678264260292053": 38, "59": [38, 51, 230, 380, 512], "46733325719833374": 38, "46683603525161743": 38, "61": [38, 40, 51, 52, 57, 74, 75, 77, 81, 84, 221, 256, 258, 283, 389, 603, 620, 623, 624, 625, 626, 646, 662, 684, 686, 729, 820], "4663347601890564": 38, "4658295214176178": 38, "465320348739624": 38, "4648073613643646": 38, "46429020166397095": 38, "4637692868709564": 38, "46324464678764343": 38, "4627160429954529": 38, "4621836841106415": 38, "4616474211215973": 38, "71": [38, 51, 74, 79, 234, 274, 410, 620], "46110764145851135": 38, "72": [38, 52, 61, 75, 77, 240, 342, 365, 368, 389, 399, 607, 620, 623, 625, 635, 670, 728, 747], "460563987493515": 38, "4600166976451874": 38, "74": [38, 40, 51, 84, 230, 260, 620, 625, 667], "45946577191352844": 38, "45891112089157104": 38, "45835286378860474": 38, "4577910006046295": 38, "78": [38, 54, 279, 609, 620, 623, 625, 631, 635, 670, 728, 747], "45722562074661255": 38, "79": [38, 40, 52, 53, 75, 76, 79, 84, 97, 235, 368, 389, 399, 410, 529, 530, 620, 622, 729], "45665669441223145": 38, "80": [38, 52, 75, 342, 365, 369, 380, 433, 512, 625, 629, 635, 670, 717, 747, 846], "4560841917991638": 38, "81": [38, 42, 51, 57, 72, 74, 80, 84, 163, 233, 258, 259, 283, 380, 512, 618, 620, 625, 629, 631, 635, 662, 667, 680, 714, 729, 747, 830], "4555082619190216": 38, "45492875576019287": 38, "45434585213661194": 38, "84": [38, 56, 65, 74, 84, 163, 193, 258, 618, 619, 625, 630, 635, 648, 670, 725, 728, 729, 747], "45375964045524597": 38, "4531698524951935": 38, "4525766670703888": 38, "45198020339012146": 38, "4513803720474243": 38, "4507772624492645": 38, "4501707851886749": 38, "4495610296726227": 38, "4489481747150421": 38, "44833192229270935": 38, "4477125108242035": 38, "44708991050720215": 38, "44646409153938293": 38, "44583529233932495": 38, "98": [38, 46, 52, 54, 61, 68, 74, 77, 84, 108, 233, 281, 353, 365, 607, 614, 623, 625, 629, 632, 635, 670, 707, 718, 727, 729, 736, 747], "4452032148838043": 38, "44456806778907776": 38, "4439": 38, "selectbackward0": 38, "hope": [38, 841, 846, 862], "ivy_compil": 39, "ic": 39, "produc": [39, 52, 53, 56, 75, 79, 296, 306, 309, 360, 362, 368, 415, 624, 653, 764, 794, 805, 815, 820, 821, 826, 828, 830, 831, 849, 857, 859], "numer": [39, 48, 49, 51, 52, 53, 57, 61, 62, 65, 72, 74, 75, 76, 80, 84, 85, 87, 97, 98, 134, 147, 215, 218, 231, 235, 240, 241, 242, 249, 250, 251, 254, 263, 264, 268, 270, 271, 272, 273, 277, 278, 279, 283, 284, 288, 289, 368, 370, 375, 380, 411, 444, 498, 511, 571, 572, 580, 581, 593, 594, 617, 618, 620, 622, 625, 631, 632, 635, 655, 662, 665, 670, 673, 675, 677, 679, 681, 727, 728, 729, 731, 732, 733, 735, 736, 741, 748, 751, 753, 764, 765, 766, 767, 779, 803, 815, 820, 825, 827, 828, 830, 831, 832, 833, 835, 839, 853, 856, 862], "anyth": [39, 52, 75, 380, 517, 518, 807, 819, 830, 831, 856, 857], "affect": [39, 45, 52, 370, 447, 814, 827], "intermedi": [39, 854, 855, 856, 857, 862], "variabl": [39, 41, 42, 44, 52, 53, 54, 60, 69, 75, 76, 77, 83, 117, 118, 120, 316, 362, 368, 369, 375, 380, 413, 437, 499, 510, 511, 527, 551, 552, 553, 554, 557, 583, 604, 605, 607, 609, 610, 611, 616, 622, 623, 625, 628, 630, 674, 703, 704, 705, 725, 761, 772, 777, 779, 780, 781, 782, 783, 784, 785, 807, 811, 815, 818, 822, 825, 826, 830, 831, 835, 838, 839, 840, 841, 842, 849, 857], "original_fn": 39, "100000": 39, "var": [39, 65, 88, 90, 117, 118, 119, 120, 616, 628, 635, 703, 704, 786, 806, 817, 835], "co": [39, 40, 51, 53, 74, 233, 238, 240, 281, 538, 620, 622, 804, 815, 835, 846], "sin": [39, 51, 53, 74, 233, 238, 240, 281, 538, 620, 622, 810, 835], "tan": [39, 51, 74, 525, 620, 622, 818, 822, 823, 826, 827, 835], "comp_fn": 39, "compile_graph": [39, 45], "expected_result": 39, "compiled_result": 39, "irrelev": [39, 814, 815, 817], "opeat": 39, "_layer": [39, 835], "net": [39, 44, 45, 835, 840, 846, 847], "compiled_net": 39, "proceed": 40, "latest": [40, 42, 51, 52, 74, 75, 150, 238, 248, 249, 264, 329, 330, 365, 368, 371, 380, 411, 413, 482, 511, 618, 620, 625, 627, 635, 673, 674, 702, 752, 780, 800, 805, 806, 807, 809, 811, 814, 818, 820, 831, 841, 842, 850, 861], "pypi": [40, 42, 45, 805, 806, 831, 841], "pkg": [40, 42, 45], "public": [40, 42, 45, 531, 622, 814, 825, 837, 859], "revis": [40, 42, 807], "tmp": [40, 42, 578, 600, 622], "req": [40, 42], "tabqrujw": 40, "command": [40, 42, 800, 802, 806, 809, 812, 814, 820, 821, 842], "filter": [40, 42, 44, 52, 56, 75, 79, 311, 312, 362, 368, 388, 406, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 766, 780, 800, 811, 814], "quiet": [40, 42], "commit": [40, 42, 803, 805, 809, 817, 829, 830], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 40, "metadata": [40, 42, 45, 826], "setup": [40, 42, 45, 806, 807, 812, 814, 820], "done": [40, 42, 45, 625, 661, 804, 805, 806, 807, 809, 812, 814, 816, 817, 820, 821, 826, 827, 830, 838, 849, 850, 856], "py3": [40, 42, 45], "whl": [40, 41, 42, 45], "cp39": [40, 42], "manylinux_2_12_x86_64": [40, 42], "manylinux2010_x86_64": [40, 42], "manylinux_2_17_x86_64": [40, 42, 806], "manylinux2014_x86_64": [40, 41, 42], "eta": [40, 42, 45], "tar": [40, 41, 42, 45], "gz": [40, 41, 42, 45], "py2": [40, 42], "495": [40, 42], "nvidia_ml_pi": [40, 42], "pypars": [40, 42, 45], "ivy_cor": [40, 42, 45, 806], "1338326": 40, "sha256": [40, 42, 45], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 40, "store": [40, 42, 45, 49, 52, 53, 57, 59, 69, 72, 75, 76, 80, 82, 149, 368, 369, 412, 420, 424, 436, 440, 538, 622, 625, 627, 679, 696, 761, 762, 780, 781, 782, 802, 807, 810, 811, 813, 818, 824, 826, 827, 828, 835, 837, 838, 839, 843, 849], "directori": [40, 41, 42, 45, 578, 600, 619, 622, 802, 805, 806, 807, 812, 814, 820, 827, 830, 842], "ephem": [40, 42], "njrc_e6b": 40, "2e": [40, 42], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [40, 42], "4845": [40, 42], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 40, "b6": [40, 42], "0d": [40, 42], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [40, 42], "successfulli": [40, 42, 45, 782, 806, 810], "uninstal": [40, 42, 45], "found": [40, 42, 43, 45, 57, 59, 63, 69, 75, 80, 82, 86, 98, 196, 380, 459, 512, 619, 629, 658, 665, 698, 717, 737, 794, 805, 806, 807, 810, 811, 812, 813, 815, 816, 818, 821, 824, 826, 827, 842, 858], "cannot": [40, 41, 42, 45, 52, 285, 452, 453, 454, 620, 807, 809, 811, 815, 827, 835, 840, 862], "vnd": [40, 42, 45], "json": [40, 42, 45, 69, 806, 820, 838], "psst": 40, "cv2": [40, 42, 44, 838], "pickl": [40, 41, 69, 782, 813, 838], "imageio": 40, "urllib": [40, 45], "_src": 40, "tpu": [40, 189, 195, 206, 211, 619, 816, 856, 859], "back": [40, 52, 59, 75, 82, 371, 464, 485, 567, 590, 622, 624, 627, 650, 694, 779, 784, 794, 806, 810, 815, 816, 819, 824, 825, 832, 834, 841, 842, 846, 854, 858], "tf_cpp_min_log_level": 40, "info": [40, 797, 800, 812, 818, 821], "mkdir": [40, 41, 42, 806, 814], "perceiv": [40, 41], "touch": 40, "io_processor": 40, "position_encod": 40, "absl": 40, "jmp": 40, "tabul": 40, "04": [40, 41, 48, 54, 68, 72, 75, 77, 107, 108, 133, 160, 240, 571, 603, 604, 609, 614, 617, 618, 620, 622, 623, 764, 806, 830], "29359": 40, "29k": 40, "67k": 40, "002": 40, "30179": 40, "47k": 40, "8107": 40, "9k": 40, "92k": 40, "itertool": 40, "preprocessor": 40, "vector": [40, 48, 52, 53, 56, 57, 75, 76, 79, 80, 92, 93, 95, 134, 358, 359, 367, 368, 369, 371, 374, 375, 380, 390, 421, 426, 432, 434, 439, 474, 476, 478, 495, 499, 511, 530, 534, 551, 602, 617, 622, 624, 625, 648, 650, 655, 659, 660, 662, 665, 670, 675, 676, 680, 681, 682, 683, 764, 780, 856], "perceiverbackbon": 40, "input_preprocessor": 40, "_input_preprocessor": 40, "_encod": 40, "__call__": [40, 761, 780, 781, 782, 800, 850], "is_train": 40, "po": [40, 794], "input_mask": 40, "network_input_is_1d": 40, "_input_is_1d": 40, "queri": [40, 41, 56, 69, 79, 193, 207, 544, 570, 619, 622, 624, 650, 653, 780, 813, 815, 820, 837, 856], "decod": [40, 838], "cross": [40, 42, 57, 58, 80, 81, 93, 625, 626, 684, 685, 686, 800, 814, 815], "attend": [40, 624, 650], "encoder_queri": 40, "latent": [40, 628, 704, 705], "imagepreprocessor": 40, "deal": [40, 782, 803, 816, 823, 825, 827, 841], "image_s": 40, "fourier_pos_config": 40, "position_encoding_typ": 40, "fourier": [40, 52, 75, 368, 390, 395, 396, 400, 401, 411, 412, 415, 538, 622], "fourier_position_encoding_kwarg": 40, "concat_po": 40, "max_resolut": 40, "num_band": [40, 53, 76, 538, 622], "sine_onli": 40, "prep_typ": 40, "spatial_downsampl": 40, "cross_attend_widening_factor": 40, "cross_attention_shape_for_attn": 40, "kv": 40, "dropout_prob": 40, "num_block": 40, "num_cross_attend_head": 40, "num_self_attend_head": 40, "num_self_attends_per_block": 40, "num_z_channel": 40, "self_attend_widening_factor": 40, "use_query_residu": 40, "z_index_dim": 40, "z_pos_enc_init_scal": 40, "perceiver_backbon": [40, 800], "perceiverencod": 40, "At": [40, 805, 806, 807, 809, 820, 830, 831, 846, 856], "almost": [40, 804, 813, 828, 836, 838, 845], "publish": [40, 800, 841, 847, 850], "thankfulli": [40, 830], "perceiver_io": [40, 41], "imagenet_fourier_position_encod": 40, "pystat": 40, "imagenet_checkpoint": 40, "rb": 40, "ckpt": 40, "read": [40, 42, 52, 59, 69, 71, 75, 82, 129, 371, 464, 617, 627, 694, 805, 806, 812, 814, 820, 830, 832, 833, 856], "09": [40, 46, 51, 77, 84, 113, 273, 283, 603, 614, 620, 623, 728], "173": [40, 57, 625, 662], "194": 40, "217": [40, 819], "125": [40, 52, 57, 80, 229, 339, 365, 370, 443, 620, 625, 680], "177": [40, 42], "193776248": 40, "185m": 40, "octet": 40, "184": 40, "80m": 40, "144mb": 40, "144": 40, "mean_rgb": 40, "stddev_rgb": 40, "im": 40, "denorm": 40, "resize_and_center_crop": 40, "crop": [40, 52, 75, 368, 396, 401, 412], "center": [40, 779], "image_height": [40, 42, 800], "image_width": [40, 800], "padded_center_crop_s": 40, "minimum": [40, 51, 52, 53, 59, 62, 65, 74, 75, 76, 82, 85, 88, 215, 243, 270, 293, 325, 329, 330, 339, 360, 362, 365, 371, 380, 474, 509, 513, 519, 571, 572, 580, 581, 593, 594, 620, 622, 627, 632, 635, 687, 733, 748, 750, 764, 766, 767, 772, 815, 832, 853, 859, 863], "offset_height": 40, "offset_width": 40, "crop_window": 40, "inter_cub": 40, "ye": [40, 841], "dummy_input": [40, 800], "transpili": 40, "torch_perceiver_backbon": 40, "quicker": 40, "params_v": [40, 800, 850], "perceiverioclassifi": [40, 800], "max_pool": [40, 800], "huggingfac": [40, 849, 850], "Of": [40, 810, 826, 827, 838, 861, 862], "cours": [40, 806, 807, 809, 810, 817, 826, 827, 833, 838, 841, 861, 862], "468": 40, "huggingface_hub": 40, "multiprocess": [40, 69, 98, 622, 838, 841], "py39": 40, "132": [40, 75], "pyarrow": 40, "xxhash": 40, "212": [40, 52, 56, 75, 352, 365, 648], "pyyaml": 40, "2021": [40, 52, 75, 355, 365, 800], "aiohttp": 40, "async": 40, "timeout": [40, 69, 98, 575, 597, 622, 832], "0a3": 40, "async_timeout": 40, "frozenlist": 40, "manylinux_2_5_x86_64": [40, 45], "manylinux1_x86_64": [40, 45], "158": 40, "attr": [40, 815], "aiosign": 40, "multidict": 40, "114": [40, 368, 389, 399], "yarl": 40, "264": [40, 629, 706], "2022": [40, 41], "pytz": 40, "2020": [40, 809, 856], "dateutil": [40, 45], "wikiart": 40, "paint": [40, 800, 835, 845], "load_dataset": [40, 849, 850], "n_sampl": [40, 52, 75, 369, 371, 417, 425, 477], "10000": [40, 42, 48, 71, 133, 617], "huggan": 40, "split": [40, 41, 42, 46, 51, 52, 59, 68, 69, 74, 75, 82, 105, 106, 107, 108, 109, 110, 111, 112, 113, 206, 207, 208, 286, 290, 294, 295, 297, 341, 348, 360, 371, 460, 469, 488, 534, 561, 614, 619, 620, 622, 624, 627, 637, 644, 645, 699, 761, 776, 780, 800, 801, 807, 814, 834, 835, 841, 863], "wiki_art": 40, "gib": 40, "unknown": [40, 764], "total": [40, 42, 52, 65, 69, 75, 88, 98, 129, 210, 324, 325, 326, 334, 362, 365, 370, 442, 617, 619, 632, 635, 735, 752, 754, 794, 800, 801, 806, 807, 815, 816, 817, 830, 833, 838, 839, 841, 847], "huggan___parquet": 40, "36ee951979f9b56c": 40, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 40, "parquet": 40, "subsequ": [40, 789, 806, 810, 814, 815, 817, 822, 823, 826, 830, 839, 857], "reus": [40, 48, 71, 75, 82, 123, 452, 453, 460, 462, 464, 465, 466, 473, 488, 690, 691, 692, 694, 696, 697, 699, 701, 819, 830, 861], "curl": [40, 806], "server": [40, 800, 806, 807, 812, 820, 842, 856], "row": [40, 52, 75, 93, 127, 142, 322, 362, 369, 371, 378, 380, 427, 437, 466, 472, 489, 504, 510, 511, 617, 625, 631, 632, 666, 674, 675, 680, 726, 735, 779], "2fwikiart": 40, "receiv": [40, 44, 92, 525, 561, 622, 628, 703, 704, 705, 780, 806, 807, 815, 816, 830, 833], "xferd": 40, "averag": [40, 42, 52, 54, 58, 75, 77, 81, 368, 370, 374, 380, 382, 383, 386, 387, 388, 444, 445, 446, 447, 448, 449, 495, 511, 603, 604, 609, 623, 624, 626, 628, 650, 684, 703, 704, 779, 780], "dload": 40, "upload": [40, 830], "spent": [40, 847], "25936": 40, "278k": 40, "number": [40, 42, 43, 44, 45, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 66, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 88, 89, 92, 93, 95, 97, 98, 101, 121, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 142, 148, 153, 154, 155, 156, 157, 159, 160, 163, 166, 167, 168, 170, 172, 175, 199, 200, 201, 215, 216, 217, 218, 219, 221, 223, 224, 231, 233, 235, 236, 238, 240, 241, 242, 248, 249, 250, 252, 256, 258, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 281, 282, 286, 288, 313, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 344, 349, 353, 362, 365, 368, 369, 370, 371, 374, 380, 401, 412, 415, 418, 421, 425, 426, 427, 435, 439, 441, 442, 452, 453, 454, 474, 475, 476, 477, 478, 480, 482, 484, 487, 490, 491, 492, 509, 511, 512, 513, 514, 520, 538, 545, 563, 580, 581, 588, 601, 602, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 631, 632, 633, 635, 636, 637, 644, 645, 647, 650, 655, 659, 660, 661, 668, 673, 675, 679, 680, 681, 684, 687, 689, 690, 692, 693, 695, 696, 698, 700, 702, 703, 704, 705, 726, 730, 735, 737, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 765, 766, 772, 779, 780, 783, 794, 800, 806, 807, 813, 814, 815, 816, 817, 824, 825, 826, 830, 831, 832, 833, 835, 838, 844, 845, 849], "abstract_expression": 40, "action_paint": 40, "analytical_cub": 40, "art_nouveau": 40, "baroqu": 40, "color_field_paint": 40, "contemporary_r": 40, "cubism": 40, "early_renaiss": 40, "expression": 40, "fauvism": 40, "high_renaiss": 40, "impression": 40, "mannerism_late_renaiss": 40, "minim": [40, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 368, 370, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 672, 673, 675, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 794, 818, 826, 828, 833, 835, 849, 854, 862], "naive_art_primitiv": 40, "new_real": 40, "northern_renaiss": 40, "pointil": 40, "pop_art": 40, "post_impression": 40, "realism": 40, "rococo": 40, "romantic": 40, "symbol": [40, 793, 805, 806, 856, 857], "synthetic_cub": 40, "ukiyo_": 40, "custom": [40, 52, 75, 293, 305, 357, 360, 367, 764, 793, 802, 808, 814, 819, 824, 828, 830, 833, 839, 846, 856, 860, 861, 862], "hugginfac": 40, "customdataset": 40, "__len__": [40, 813], "__getitem__": [40, 69, 813], "idx": [40, 41, 42, 524, 622, 800, 816, 837], "random_split": 40, "224x224": 40, "val_siz": 40, "dataset_train": 40, "dataset_v": 40, "dataset_test": 40, "dataloader_train": 40, "batch_siz": [40, 42, 45, 52, 56, 61, 75, 79, 84, 368, 370, 386, 387, 388, 404, 405, 406, 407, 449, 624, 631, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 726, 800, 838], "dataloader_v": 40, "dataloader_test": 40, "batch": [40, 41, 42, 52, 53, 57, 69, 75, 76, 80, 206, 207, 368, 370, 374, 382, 384, 390, 403, 413, 442, 444, 490, 491, 492, 495, 538, 541, 542, 602, 619, 622, 624, 625, 628, 630, 648, 649, 650, 664, 682, 703, 704, 705, 725, 764, 780, 783, 800, 813, 823, 828, 838, 854], "iter": [40, 42, 47, 52, 53, 59, 67, 69, 75, 76, 82, 90, 95, 98, 117, 208, 314, 315, 362, 368, 369, 371, 413, 426, 435, 441, 458, 474, 523, 561, 616, 619, 622, 627, 629, 689, 693, 700, 702, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 721, 722, 724, 793, 794, 809, 811, 813, 835, 838, 847, 849], "train_featur": 40, "train_label": 40, "imshow": [40, 41], "crossentropyloss": [40, 781], "sgd": [40, 784, 856], "lr": [40, 54, 77, 525, 604, 607, 609, 610, 611, 622, 623, 784, 838, 839], "001": [40, 51, 52, 60, 72, 75, 77, 160, 258, 275, 332, 344, 365, 604, 618, 620, 623, 630, 725, 764, 838, 839], "train_step": 40, "running_loss": [40, 42, 800], "last_loss": 40, "training_load": 40, "intra": 40, "report": [40, 805, 830], "zero_grad": 40, "backward": [40, 52, 66, 75, 89, 277, 368, 390, 395, 396, 400, 401, 411, 412, 620, 625, 636, 655, 681, 755, 756, 780, 831, 841], "adjust": [40, 65, 88, 369, 437, 635, 752, 754, 789], "999": [40, 54, 74, 77, 286, 603, 604, 609, 611, 620, 623, 784, 839], "epoch_numb": 40, "best_vloss": 40, "1_000_000": 40, "avg_loss": 40, "running_vloss": 40, "vdata": 40, "vinput": 40, "vlabel": 40, "voutput": 40, "vloss": 40, "avg_vloss": 40, "model_path": 40, "model_": 40, "state_dict": [40, 781, 782], "highest": [40, 52, 61, 75, 84, 313, 316, 362, 631, 727, 815], "energi": 40, "sum": [40, 42, 51, 52, 53, 56, 57, 58, 65, 69, 74, 75, 76, 79, 80, 81, 88, 92, 97, 98, 208, 218, 260, 284, 326, 349, 362, 365, 369, 370, 371, 374, 380, 410, 420, 442, 443, 444, 445, 446, 447, 448, 449, 479, 495, 517, 518, 535, 565, 566, 619, 620, 622, 624, 625, 626, 635, 647, 653, 666, 675, 679, 682, 684, 746, 747, 779, 781, 793, 800, 813, 815, 823, 825, 826, 827, 835, 849, 850, 851], "augment": 40, "mayb": [40, 41, 47, 800, 806, 814, 835, 837], "meta": [40, 703, 704, 705, 810, 831, 856], "finetun": 40, "deploi": [40, 800, 814, 843, 850, 854, 855, 856, 858, 862], "present": [41, 52, 65, 69, 75, 88, 332, 365, 374, 490, 491, 492, 635, 750, 805, 806, 807, 813, 815, 816, 822, 826, 835, 845, 853, 854, 863], "percieverio": 41, "ai": [41, 814, 854, 858], "contribut": [41, 52, 75, 380, 514, 804, 806, 807, 812, 820, 821, 827, 828, 835, 842, 849, 860], "highli": [41, 800, 805, 856], "invit": [41, 805, 827, 833], "g4ar9q7dtn": 41, "step1": 41, "printf": 41, "8packag": 41, "share": [41, 69, 181, 618, 764, 765, 800, 811, 813, 817, 823, 825, 827, 828, 830, 833, 835, 846, 854, 855, 862], "googledr": 41, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 41, "file_id": 41, "drive": [41, 42], "uc": 41, "export": [41, 814, 855, 862], "tee": [41, 806], "file_id_wget_cmd": 41, "perl": 41, "pe": 41, "g": [41, 43, 44, 52, 61, 63, 65, 67, 75, 84, 90, 92, 146, 175, 188, 235, 248, 268, 275, 278, 329, 330, 365, 368, 369, 371, 375, 380, 404, 406, 441, 482, 497, 498, 499, 500, 501, 512, 513, 618, 619, 620, 625, 629, 631, 633, 635, 660, 661, 666, 673, 675, 676, 682, 709, 713, 715, 718, 723, 727, 728, 729, 737, 738, 739, 740, 745, 746, 748, 750, 751, 753, 779, 801, 805, 806, 808, 809, 811, 812, 813, 825, 827, 830, 835, 841, 843, 847, 852], "uuid": 41, "anywai": [41, 810, 824, 827], "bin": [41, 52, 75, 380, 509, 514, 806, 807, 809, 813], "bash": [41, 806, 807, 809], "step2": 41, "interpret": [41, 48, 52, 71, 75, 122, 123, 129, 135, 370, 380, 444, 511, 617, 814, 857], "sudo": [41, 806], "apt": [41, 806], "yf": 41, "step3": 41, "delet": [41, 807, 814], "xvzf": 41, "rm": [41, 43, 802, 807], "step4": 41, "symlink": 41, "unzip": [41, 42], "fr": 41, "l": [41, 52, 57, 74, 80, 262, 369, 370, 421, 442, 624, 625, 650, 654, 659, 660, 661, 665, 679, 807, 808], "d": [41, 52, 53, 56, 57, 59, 71, 75, 76, 79, 80, 82, 95, 111, 133, 142, 175, 218, 235, 236, 268, 271, 322, 362, 368, 369, 371, 374, 375, 378, 386, 387, 388, 395, 400, 404, 405, 406, 407, 409, 413, 419, 433, 454, 460, 462, 465, 469, 483, 485, 488, 495, 497, 503, 526, 537, 614, 617, 618, 620, 624, 625, 627, 629, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 657, 658, 662, 666, 670, 679, 680, 696, 709, 713, 714, 715, 718, 723, 724, 765, 794, 800, 801, 806, 808, 811, 812, 813, 820, 825, 830, 833, 838, 846, 847, 852], "ln": 41, "sf": 41, "la": 41, "step5": 41, "regular": [41, 75, 369, 380, 433, 515, 625, 664, 806, 827, 856], "step6": 41, "ipkykernel": 41, "step7": 41, "engbjapanpython3": 41, "separ": [41, 52, 53, 75, 374, 491, 538, 622, 624, 650, 806, 807, 810, 813, 814, 817, 828, 829, 830, 835, 837, 838, 857, 861], "ipykernel": 41, "reconnect": 41, "sy": 41, "oct": 41, "gcc": [41, 854, 861], "lf": 41, "upgrad": 41, "cuda11": 41, "cudnn805": 41, "cp38": [41, 45, 806], "helper": [41, 759, 761, 762, 768, 770, 771, 800, 803, 812, 815, 819, 820, 829, 838, 843], "feedforward": 41, "prenorm": 41, "perceiveriospec": 41, "fetch": [41, 546, 622, 806, 807, 809, 814], "ogbanugot": 41, "xmartlab": 41, "caffeflow": 41, "fetch_class": 41, "class_label": 41, "ground_truth": 41, "127": [41, 49, 52, 57, 72, 75, 163, 352, 365, 618, 625, 662], "path_to_imag": 41, "get_imag": 41, "ax": [41, 46, 52, 57, 59, 62, 65, 66, 68, 75, 80, 82, 85, 88, 89, 97, 101, 108, 112, 208, 329, 330, 334, 335, 349, 356, 365, 366, 368, 369, 371, 374, 380, 396, 401, 412, 436, 473, 474, 480, 493, 516, 517, 518, 519, 520, 521, 534, 602, 619, 622, 625, 627, 632, 635, 636, 655, 666, 674, 677, 678, 682, 689, 691, 692, 695, 697, 699, 702, 732, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 766, 780, 815, 817, 830, 831, 835, 837], "fig": [41, 42], "subplot": [41, 42], "spine": 41, "set_vis": 41, "right": [41, 52, 57, 69, 75, 80, 98, 115, 116, 227, 229, 282, 343, 365, 368, 369, 371, 402, 430, 436, 437, 439, 465, 534, 616, 620, 622, 625, 634, 675, 680, 743, 764, 801, 805, 806, 807, 808, 809, 817, 820, 833, 838, 849], "bottom": [41, 534, 622, 805, 806, 814, 820, 862], "tick_param": 41, "set_xticklabel": 41, "set_yticklabel": 41, "show_result": 41, "along": [41, 46, 48, 51, 52, 53, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 74, 75, 76, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 95, 108, 112, 117, 132, 133, 208, 282, 285, 287, 324, 325, 326, 329, 330, 334, 335, 349, 356, 362, 365, 366, 368, 369, 370, 371, 374, 380, 389, 395, 396, 399, 400, 401, 411, 412, 435, 446, 459, 460, 461, 463, 465, 466, 474, 479, 482, 484, 493, 494, 495, 496, 512, 513, 514, 516, 517, 518, 519, 520, 521, 534, 541, 616, 617, 619, 620, 622, 625, 626, 627, 628, 631, 632, 634, 635, 636, 655, 670, 679, 681, 682, 684, 685, 686, 688, 691, 692, 693, 695, 696, 698, 700, 701, 703, 704, 705, 731, 732, 733, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 780, 800, 805, 808, 817, 826, 829, 831, 833, 835, 856], "figur": [41, 832], "figsiz": [41, 42], "listdir": [41, 42], "endswith": 41, "this_dir": 41, "dirnam": 41, "join": [41, 42, 59, 69, 75, 82, 458, 459, 627, 688, 698, 800], "add_subplot": 41, "xtick": 41, "ytick": 41, "set_titl": [41, 42], "color": [41, 69, 98, 799], "green": [41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 799, 805, 806, 807], "red": 41, "perceiver_io_img_classif": 41, "normalize_imag": 41, "batch_shap": [41, 56, 61, 71, 79, 84, 127, 136, 617, 624, 625, 631, 649, 653, 683, 726, 780, 833, 835, 837], "img_dim": 41, "queries_dim": 41, "learn_queri": 41, "load_weight": 41, "num_input_ax": 41, "network_depth": 41, "num_lat_att_per_lay": 41, "query_shap": 41, "num_fourier_freq_band": 41, "weight_fpath": 41, "pretrained_weight": 41, "isfil": 41, "noinspect": [41, 837], "pybroadexcept": 41, "from_disk_as_pickl": 41, "larg": [41, 51, 52, 74, 75, 218, 235, 242, 268, 269, 371, 380, 482, 511, 620, 625, 673, 802, 806, 807, 812, 814, 820, 838, 849, 856], "action": [41, 804, 814, 817, 821, 830], "fail": [41, 759, 803, 806, 807, 809, 814, 815, 817, 821, 824, 826, 827, 828], "placehold": [41, 629, 713, 718, 723, 780, 807, 810, 822, 843], "pyunboundlocalvari": 41, "max_fourier_freq": 41, "random_uniform": [41, 45, 61, 84, 631, 816, 819, 830, 835, 839], "817437": 41, "common_runtim": 41, "gpu_bfc_alloc": 41, "orig_valu": 41, "tf_force_gpu_allow_growth": 41, "autograd": [41, 841], "declar": [41, 807, 829], "_3r2_73j": 42, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 42, "1297564": 42, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 42, "le3bu3_v": 42, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 42, "third": [42, 92, 93, 371, 461, 487, 625, 633, 675, 737, 812, 815, 826, 841, 855, 856, 862], "parti": [42, 812, 815, 841, 846, 855, 856, 862], "mount": [42, 802, 807], "mydriv": 42, "chdir": 42, "One": [42, 52, 53, 59, 61, 75, 76, 82, 84, 95, 371, 452, 453, 454, 457, 474, 483, 535, 622, 627, 631, 694, 727, 810, 813, 815, 817, 823, 828, 830, 835, 837, 838], "kaggl": 42, "medium": 42, "articl": [42, 800, 821], "insert": [42, 52, 62, 75, 85, 371, 449, 459, 627, 629, 632, 634, 690, 710, 711, 732, 743, 814, 821], "www": [42, 329, 330, 365], "your_kaggle_usernam": 42, "competit": 42, "digit": 42, "recogn": 42, "zip": [42, 835], "readabl": [42, 810, 813, 819, 821, 822, 830, 831, 837, 838], "chmod": [42, 806, 814], "recent": [42, 797, 806, 807, 830, 845, 846], "modifi": [42, 52, 69, 75, 92, 371, 380, 471, 474, 479, 518, 764, 794, 805, 806, 807, 809, 811, 812, 815, 816, 818, 820, 821, 823, 826, 828, 830, 831, 835], "forc": [42, 812, 814, 816], "archiv": [42, 806], "inflat": [42, 815], "sample_submiss": 42, "frame": [42, 52, 75, 313, 362, 368, 415, 846, 856], "later": [42, 69, 528, 622, 805, 821, 826, 830, 831, 856], "my": [42, 814], "label_df": 42, "mod_train": 42, "data_valu": 42, "test_data_valu": 42, "correct_label": 42, "train_path": 42, "str": [42, 44, 47, 48, 52, 53, 56, 57, 58, 59, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 129, 131, 134, 136, 138, 144, 145, 148, 150, 152, 153, 154, 155, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 175, 176, 177, 178, 179, 180, 187, 188, 208, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 368, 369, 370, 371, 374, 380, 383, 386, 387, 388, 390, 391, 392, 393, 395, 396, 400, 401, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 418, 422, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 457, 458, 459, 464, 480, 482, 483, 484, 485, 490, 491, 492, 493, 494, 496, 498, 500, 511, 512, 513, 514, 521, 523, 524, 526, 527, 529, 530, 532, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 562, 565, 566, 568, 569, 578, 580, 581, 583, 585, 587, 588, 601, 605, 612, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 676, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 712, 713, 718, 723, 726, 727, 728, 729, 731, 734, 737, 738, 739, 741, 745, 746, 747, 749, 751, 752, 754, 755, 756, 761, 762, 764, 765, 770, 772, 780, 782, 783, 793, 794, 815, 816, 819, 823, 826, 827, 831, 835, 840, 849, 850, 851], "makedir": 42, "valid_path": 42, "28x28": 42, "pic": 42, "pictur": [42, 800, 805, 835, 845], "int8": [42, 49, 61, 71, 72, 84, 129, 156, 161, 163, 164, 168, 617, 618, 727, 764, 765, 815, 830], "new_img": [42, 44], "builder": [42, 802], "batchwis": 42, "subset": [42, 766, 810, 814, 818, 822, 825, 827, 830, 835, 856], "goe": [42, 371, 457, 808, 821, 826, 833], "seed_valu": [42, 69, 631, 730], "randomize_dataset": 42, "shuffl": [42, 52, 61, 69, 75, 84, 499, 631], "create_dataset": 42, "num_examples_per_class": 42, "img_arrai": 42, "class_nam": [42, 761], "dir": [42, 838], "img_path": 42, "imread": [42, 44, 838], "imread_grayscal": 42, "generate_batch": [42, 800], "dataset_s": [42, 800], "ivyerror": [42, 795, 800, 819], "smaller": [42, 52, 59, 65, 75, 82, 296, 328, 344, 360, 365, 368, 370, 380, 396, 401, 412, 442, 511, 512, 513, 534, 622, 627, 635, 687, 695, 745, 746, 751, 753, 800, 807, 819, 835], "yield": [42, 62, 314, 315, 362, 371, 474, 632, 736, 800, 814], "x_batch_inst": 42, "form": [42, 44, 47, 48, 52, 57, 69, 71, 80, 91, 92, 93, 122, 123, 135, 140, 141, 306, 309, 323, 332, 362, 365, 369, 371, 421, 430, 461, 470, 474, 489, 524, 584, 586, 617, 622, 624, 625, 629, 654, 656, 658, 659, 660, 661, 663, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 679, 707, 718, 764, 779, 801, 805, 806, 823, 830, 833, 839, 840, 846, 856, 857, 862], "intialis": 42, "num_epoch": [42, 800], "inherit": [42, 810, 813, 819, 837, 841, 843], "creation": [42, 52, 69, 75, 98, 812, 815, 816, 822, 824, 827, 828, 830, 831, 835, 849, 856, 858, 862], "inform": [42, 44, 49, 52, 54, 72, 77, 160, 163, 313, 362, 524, 612, 618, 622, 623, 628, 705, 800, 804, 805, 806, 807, 809, 813, 814, 819, 823, 824, 826, 828, 830, 859], "insid": [42, 57, 80, 98, 371, 484, 625, 668, 762, 806, 807, 810, 813, 815, 816, 820, 823, 824, 830, 831, 849, 862], "ivynet": [42, 800], "h_w": [42, 800], "input_channel": [42, 780, 800, 835, 839], "output_channel": [42, 780, 800, 839], "gelu": [42, 43, 46, 68, 614, 776, 800], "image_widht": 42, "start_dim": [42, 52, 75, 371, 464, 800], "end_dim": [42, 52, 75, 371, 464, 800], "gpu_is_avail": [42, 619, 800], "120": [42, 65, 88, 98, 625, 670, 745, 800], "model_nam": [42, 800], "__name__": [42, 43, 45, 589, 622, 800, 819], "heavi": [42, 766, 806, 827, 828, 833, 857], "lift": [42, 828, 857], "num_correct": [42, 800], "y_pred": [42, 800], "cross_entropi": [42, 58, 81, 626, 686, 800, 813, 823, 826], "epoch_loss": [42, 800], "field": [42, 57, 63, 80, 86, 369, 371, 421, 487, 625, 633, 659, 660, 672, 673, 675, 737, 738, 739, 800, 814, 854, 862], "training_accuraci": [42, 800], "train_loss": [42, 800], "train_correct": [42, 800], "train_loop": [42, 800], "posit": [42, 44, 47, 51, 52, 53, 57, 58, 59, 74, 75, 76, 80, 81, 82, 92, 127, 129, 142, 160, 215, 216, 217, 221, 224, 235, 242, 249, 250, 256, 258, 268, 269, 276, 277, 281, 282, 286, 307, 322, 328, 333, 344, 362, 365, 369, 371, 419, 437, 448, 473, 482, 528, 538, 602, 615, 617, 618, 620, 622, 625, 626, 627, 631, 632, 636, 654, 657, 679, 684, 690, 695, 730, 735, 755, 756, 761, 764, 772, 777, 781, 782, 794, 800, 805, 807, 809, 813, 827, 830, 831, 838, 849, 858], "leav": [42, 47, 52, 70, 72, 74, 75, 76, 79, 80, 82, 88, 98, 160, 163, 235, 292, 294, 295, 301, 371, 458, 459, 464, 476, 477, 478, 493, 494, 496, 512, 513, 518, 538, 585, 627, 629, 643, 653, 658, 675, 689, 693, 698, 700, 701, 706, 707, 716, 717, 718, 719, 745, 746, 793, 800, 805, 813, 814, 815, 817, 818, 822, 823, 826, 827, 830, 838, 839], "xbatch": [42, 800], "ybatch": [42, 800], "to_devic": [42, 50, 73, 191, 619, 782, 800], "entropi": [42, 58, 81, 626, 684, 685, 686, 800], "hot": [42, 48, 71, 136, 617, 800], "ybatch_encod": [42, 800], "one_hot": [42, 48, 71, 617, 800, 840], "loss_prob": [42, 800], "ret_grad_idx": [42, 605, 623, 761, 825], "xs_grad_idx": [42, 605, 623, 761, 825], "batch_loss": [42, 800], "set_descript": [42, 800], "set_postfix": [42, 800], "accuracy_percentag": [42, 800], "naverag": [42, 800], "6f": [42, 800], "_train_summari": [42, 800], "writer": [42, 800], "writerow": [42, 800], "157it": 42, "06it": 42, "475401": 42, "11it": 42, "081436": 42, "13it": 42, "0187": 42, "029279": 42, "0324": 42, "008382": 42, "07it": 42, "00456": 42, "003816": 42, "82it": 42, "00277": 42, "002179": 42, "05it": 42, "00175": 42, "001569": 42, "00147": 42, "001235": 42, "09it": 42, "00128": 42, "001005": 42, "106": 42, "10it": 42, "00112": 42, "000837": 42, "129": [42, 624, 643, 645], "12it": 42, "000989": 42, "000709": 42, "145": 42, "000873": 42, "000606": 42, "168": [42, 529, 622, 629, 706], "08it": 42, "000774": 42, "000524": 42, "000688": 42, "000455": 42, "000613": 42, "000398": 42, "000547": 42, "000350": 42, "205": 42, "000488": 42, "000308": 42, "218": 42, "000437": 42, "000273": 42, "000391": 42, "000243": 42, "238": [42, 242, 620], "98it": 42, "000351": 42, "000216": 42, "260": 42, "plot_summari": 42, "seaborn": 42, "whitegrid": 42, "ax1": 42, "ax2": 42, "nrow": 42, "ncol": 42, "fontweight": 42, "bold": 42, "set_xlabel": 42, "set_ylabel": 42, "tight_layout": 42, "savefig": 42, "summary_plot": 42, "png": [42, 44, 45, 838], "close": [42, 57, 240, 258, 278, 306, 362, 620, 625, 627, 675, 690, 803, 805, 806, 807, 815, 818, 820, 827, 833, 856], "save_weight": [42, 782], "model_param": 42, "ivynet_weight": 42, "hdf5": [42, 69, 782, 838], "deitimageprocessor": 43, "tfdeitforimageclassif": 43, "tfdeitforimageclassificationwithteach": 43, "head": [43, 44, 624, 650, 780, 800, 804, 806, 814, 827], "distillation_classifi": 43, "cls_classifi": 43, "randomli": [43, 368, 391, 392, 393, 624, 647, 764, 765, 766, 767, 772, 780], "henc": [43, 63, 218, 332, 365, 620, 627, 633, 690, 737, 738, 739, 740, 789, 806, 813, 814, 815, 826, 830], "reproduc": [43, 56, 79, 624, 647, 764, 765, 766, 767, 772, 803, 809, 820], "image_processor": [43, 849, 850], "facebook": 43, "distil": [43, 857], "patch16": 43, "outputs_from_original_model": 43, "predicted_class_idx": 43, "id2label": [43, 849], "architectur": [43, 800, 806, 840, 841, 854, 855, 856, 859, 860, 861], "bertforsequenceclassif": 43, "bertforpretrain": 43, "NOT": [43, 263, 620, 793, 805], "probabl": [43, 52, 56, 58, 61, 75, 79, 81, 84, 368, 370, 375, 380, 391, 392, 393, 444, 497, 511, 514, 518, 624, 626, 631, 647, 650, 653, 684, 726, 766, 779, 780, 800, 830, 842, 847], "ptarmigan": 43, "rf": [43, 807], "branch": [43, 223, 235, 238, 240, 268, 280, 281, 282, 285, 620, 805, 806, 807, 809, 814, 821, 841, 849, 856], "moduleconvert": [43, 777, 782], "mc": 43, "from_keras_modul": [43, 777], "compiled_func": 43, "return_graph": [43, 45], "compiled_output": 43, "diverg": [43, 52, 75, 242, 370, 444, 620], "_all_funct": [43, 45], "convert_to_tensor_v2_with_dispatch": 43, "transpose_v2": 43, "convolution_v2": 43, "bias_add": 43, "binary_op_wrapp": 43, "cast": [43, 49, 51, 52, 57, 65, 72, 74, 80, 147, 150, 175, 269, 380, 512, 513, 618, 620, 625, 635, 682, 745, 746, 751, 753, 765, 823, 828, 835], "moments_v2": 43, "batch_norm": [43, 45, 52, 75, 374], "tensordot": [43, 57, 80, 625, 794, 815], "softmax_v2": 43, "_slice_help": 43, "save_to_disk": [43, 45, 782], "12265048989200113": 43, "11038777417100028": 43, "1167045795539998": 43, "ivy_api_kei": 44, "obj": [44, 122, 123, 546, 617, 622, 849, 850, 851], "combo": [44, 838], "permit": [44, 810, 822, 827, 830, 833], "usabl": [44, 822, 831], "neither": [44, 218, 235, 242, 268, 620, 625, 677, 814, 827, 833], "nor": [44, 218, 235, 242, 268, 620, 814, 827, 860], "specifc": 44, "invoc": 44, "represent": [44, 52, 53, 69, 75, 76, 98, 145, 146, 160, 163, 188, 189, 215, 218, 225, 228, 230, 235, 242, 265, 268, 270, 285, 310, 341, 345, 350, 354, 362, 365, 524, 585, 615, 618, 619, 620, 622, 764, 766, 767, 780, 815, 854, 855, 857, 861, 862], "externally_link": 44, "logo": 44, "patch": [44, 286, 620, 815, 856], "cv2_imshow": 44, "envrion": 44, "canni": 44, "original_img": 44, "fn_arg": 44, "dilate_edg": 44, "edg": [44, 52, 59, 75, 82, 313, 362, 368, 371, 380, 403, 474, 514, 627, 687, 689, 702, 767, 809, 830, 850, 856, 858, 862], "morphologi": 44, "hk_model": 44, "resnet18": [44, 45], "keras_model": 44, "count": [44, 52, 59, 63, 66, 71, 75, 82, 86, 89, 129, 201, 334, 365, 371, 380, 482, 487, 509, 514, 617, 619, 625, 627, 633, 636, 655, 681, 688, 691, 737, 738, 755, 756, 812, 813, 817, 838], "odsc": 44, "talk": [44, 861], "228": 45, "352": [45, 79, 624, 648, 819], "nvidia_ml_py3": 45, "19190": 45, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 45, "b9": 45, "b1": [45, 625, 674], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 45, "cycler": 45, "fonttool": 45, "965": 45, "pillow": 45, "kiwisolv": 45, "show_graph": [45, 782], "to_ivy_modul": [45, 777, 840], "image_dim": 45, "v0": [45, 839], "urlerror": 45, "dev_str": 45, "comp_network": 45, "time_chronolog": 45, "ret0_nc": 45, "ret1_nc": 45, "ret0_c": 45, "ret1_c": 45, "pytorch_vision_v0": 45, "distribut": [45, 52, 58, 61, 75, 81, 84, 368, 369, 370, 375, 391, 392, 393, 426, 435, 441, 444, 446, 447, 449, 497, 498, 499, 500, 501, 626, 631, 684, 685, 686, 726, 727, 728, 729, 731, 779, 780, 805, 806, 814, 816, 841, 856, 859], "distributed_c10d": 45, "262": 45, "reduce_op": 45, "deprec": 45, "reduceop": 45, "004645566477999864": 45, "0044566806820000695": 45, "attribut": [45, 69, 160, 161, 162, 163, 194, 195, 203, 539, 540, 618, 619, 622, 762, 811, 812, 813, 818, 819, 823, 824, 826, 827, 833, 836, 837, 838, 839], "definit": [45, 51, 57, 74, 80, 287, 620, 625, 654, 800, 803, 807, 810, 815, 820, 823, 837, 850], "max_pool2d": [45, 52, 75, 368, 387], "__iadd__": 45, "adaptive_avg_pool2d": [45, 52, 75, 368], "_arraywithactiv": [46, 97], "abc": [46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 101, 537, 622, 629, 724, 779, 784, 793, 794, 837], "_abc_impl": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 101, 102], "_abc": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 101, 102], "_abc_data": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 101, 102], "approxim": [46, 51, 52, 57, 68, 74, 75, 80, 92, 95, 105, 216, 217, 220, 221, 222, 223, 232, 233, 238, 240, 242, 256, 257, 258, 259, 273, 280, 281, 285, 286, 287, 342, 352, 365, 370, 446, 447, 614, 620, 625, 668, 671, 776, 818, 827], "complex_mod": [46, 51, 52, 68, 74, 75, 105, 106, 107, 108, 109, 110, 111, 112, 113, 286, 290, 294, 295, 297, 360, 614, 620, 776, 824], "variant": [46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 144, 148, 149, 150, 160, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 368, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 603, 604, 607, 609, 610, 611, 612, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 671, 672, 673, 675, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 810, 817, 818, 833], "docstr": [46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 148, 149, 150, 160, 163, 167, 168, 175, 192, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 368, 371, 380, 386, 387, 388, 389, 391, 392, 393, 395, 399, 400, 401, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 529, 530, 533, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 555, 557, 558, 560, 565, 566, 580, 581, 582, 583, 585, 587, 588, 601, 602, 603, 604, 607, 609, 610, 611, 612, 617, 618, 620, 622, 625, 627, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 804, 805, 808, 812, 821, 822, 823, 824, 827, 829, 831], "liter": [46, 51, 52, 57, 68, 74, 75, 80, 105, 106, 107, 108, 109, 110, 111, 112, 113, 286, 290, 294, 295, 297, 360, 368, 369, 371, 374, 389, 399, 403, 411, 426, 430, 435, 438, 441, 474, 495, 614, 620, 625, 634, 666, 682, 743, 776, 833], "magnitud": [46, 51, 52, 68, 74, 75, 105, 106, 107, 108, 109, 110, 111, 112, 113, 215, 218, 235, 242, 268, 286, 290, 294, 295, 297, 360, 614, 620, 625, 675, 676, 776, 815], "handle_complex_input": [46, 51, 52, 68, 74, 75, 105, 106, 107, 108, 109, 110, 111, 112, 113, 286, 290, 294, 295, 297, 360, 614, 620, 776, 824], "elementhardswish": [46, 68, 614, 776], "leaky_relu": [46, 68, 75, 290, 614, 765], "alpha": [46, 51, 52, 68, 74, 75, 102, 107, 218, 284, 290, 291, 298, 302, 308, 360, 362, 369, 374, 375, 422, 495, 498, 499, 500, 614, 620, 776, 822, 827, 828], "float": [46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 65, 68, 71, 72, 74, 75, 76, 77, 79, 80, 81, 83, 84, 88, 92, 95, 97, 107, 113, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 137, 138, 143, 147, 151, 155, 160, 164, 168, 174, 175, 178, 184, 193, 202, 206, 207, 210, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 246, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 328, 329, 330, 331, 338, 339, 344, 346, 347, 350, 351, 352, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 380, 383, 391, 392, 393, 410, 411, 418, 421, 422, 424, 435, 439, 441, 442, 443, 447, 448, 463, 481, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 511, 512, 513, 514, 519, 520, 521, 528, 529, 530, 538, 547, 571, 572, 575, 580, 581, 601, 603, 604, 607, 609, 610, 611, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 635, 647, 650, 653, 654, 656, 659, 660, 661, 663, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 679, 682, 684, 685, 686, 703, 704, 705, 712, 725, 728, 729, 735, 737, 738, 739, 740, 745, 746, 748, 749, 750, 751, 752, 753, 754, 761, 764, 765, 767, 776, 779, 780, 783, 784, 803, 809, 813, 815, 818, 819, 820, 822, 823, 825, 826, 828, 830, 831, 833, 835, 837, 839], "slope": [46, 52, 68, 75, 107, 290, 291, 296, 298, 302, 360, 614, 776], "neg": [46, 51, 52, 57, 59, 61, 66, 68, 74, 75, 80, 82, 84, 89, 92, 107, 110, 113, 121, 127, 129, 142, 235, 242, 249, 250, 268, 269, 277, 282, 290, 307, 322, 325, 360, 362, 369, 370, 371, 375, 419, 426, 430, 447, 482, 501, 614, 617, 620, 625, 627, 631, 636, 655, 657, 675, 679, 681, 682, 688, 690, 691, 695, 728, 755, 756, 764, 766, 776, 813, 826], "leaki": [46, 68, 107, 614, 776], "log_softmax": [46, 68, 614, 776], "0719": [46, 68, 108], "221": [46, 108], "mish": [46, 68, 614, 776], "30340147": [46, 109, 614], "86509842": [46, 68, 109, 614], "269": [46, 111], "731": [46, 111], "881": [46, 51, 74, 111, 221, 234, 274, 620], "422": [46, 112, 614], "155": [46, 79, 112, 614, 624, 648], "softplu": [46, 68, 614, 776, 833], "beta": [46, 52, 60, 68, 75, 83, 113, 298, 302, 308, 311, 312, 360, 362, 369, 370, 374, 375, 422, 448, 495, 499, 500, 614, 630, 725, 776, 833], "threshold": [46, 51, 52, 68, 74, 75, 113, 266, 267, 305, 331, 360, 365, 370, 371, 443, 448, 481, 614, 620, 776, 833], "union": [46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 362, 365, 366, 368, 369, 370, 371, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 547, 549, 550, 551, 553, 554, 557, 558, 560, 561, 565, 566, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 717, 718, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 764, 779, 784, 785, 810, 813, 815, 816, 817, 819, 822, 823, 826, 831, 833, 835, 840, 849, 850, 851], "3461": [46, 68, 113, 614], "6491": [46, 68, 113, 614], "_array_to_new_backend": 47, "_to_ivi": 47, "_to_n": 47, "to_ignor": [47, 67, 90, 629, 717, 718], "_to_new_backend": 47, "args_to_ivi": 47, "include_deriv": [47, 70, 629, 707, 718, 761], "nest": [47, 69, 70, 98, 101, 238, 556, 585, 602, 605, 620, 622, 623, 628, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 784, 810, 812, 813, 823, 825, 831, 838, 839, 841, 843, 856], "unchang": [47, 51, 368, 371, 412, 464, 624, 647], "deriv": [47, 48, 52, 54, 70, 71, 75, 77, 126, 131, 138, 144, 307, 311, 336, 362, 365, 603, 604, 607, 608, 609, 610, 611, 617, 623, 628, 629, 705, 707, 718, 782, 784, 785, 815, 816, 837, 839], "word": [47, 121, 371, 467, 617, 631, 729, 777, 780, 813, 826, 827, 843], "args_to_n": [47, 826], "cont_inplac": 47, "decid": [47, 69, 629, 717, 718, 800, 805, 806, 815, 833], "args_to_new_backend": 47, "shallow": [47, 629, 713, 714, 718, 723, 724], "nativevari": 47, "mutabl": [47, 629, 707, 713, 714, 718, 723, 724, 811], "to_ivi": [47, 70, 629, 719, 826], "leaf": [47, 69, 76, 88, 98, 537, 629, 716, 717, 719, 746, 813, 823, 838], "travers": [47, 70, 629, 710, 718, 813, 815, 819, 835], "lowest": [47, 52, 61, 70, 75, 84, 380, 514, 629, 631, 718, 727, 794, 823, 841, 843, 853, 857, 861], "search": [47, 52, 70, 75, 732, 733, 772, 804, 806, 813, 817, 820, 830, 831, 845], "to_new_backend": 47, "_arraywithcr": [48, 97], "boolean": [48, 49, 51, 52, 53, 59, 62, 65, 69, 71, 72, 74, 75, 76, 82, 85, 88, 97, 98, 118, 120, 122, 123, 124, 130, 147, 163, 165, 167, 168, 171, 187, 197, 205, 211, 225, 226, 227, 228, 229, 230, 262, 263, 264, 265, 329, 330, 344, 365, 369, 371, 426, 435, 441, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 482, 488, 523, 526, 537, 544, 547, 548, 552, 553, 554, 555, 556, 557, 558, 567, 570, 573, 574, 576, 577, 601, 616, 617, 618, 619, 620, 622, 624, 627, 628, 629, 632, 635, 650, 690, 691, 692, 694, 696, 697, 699, 701, 703, 704, 716, 734, 735, 736, 748, 750, 764, 765, 766, 767, 772, 783, 813, 815, 823, 827, 830, 833], "alwai": [48, 49, 52, 53, 59, 71, 72, 75, 82, 105, 123, 147, 218, 268, 339, 365, 369, 371, 437, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 488, 544, 551, 614, 618, 620, 622, 627, 690, 691, 692, 694, 696, 697, 699, 701, 766, 800, 805, 806, 807, 810, 811, 813, 815, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 833, 835, 841, 849], "never": [48, 52, 59, 71, 75, 82, 123, 371, 452, 453, 454, 460, 462, 464, 465, 466, 469, 473, 480, 488, 544, 622, 627, 690, 691, 692, 694, 696, 697, 699, 701, 807, 815, 826, 827, 830], "valueerror": [48, 52, 59, 71, 75, 82, 86, 123, 368, 370, 401, 412, 447, 452, 453, 460, 462, 464, 465, 466, 473, 488, 627, 690, 691, 692, 694, 696, 697, 699, 701, 740, 766, 795, 819], "buffer": [48, 71, 75, 82, 123, 129, 452, 453, 460, 462, 464, 465, 466, 473, 488, 617, 690, 691, 692, 694, 696, 697, 699, 701, 781, 782, 826, 841], "nativedtyp": [48, 49, 52, 56, 57, 61, 62, 65, 71, 75, 80, 84, 85, 88, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 143, 144, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 169, 171, 173, 177, 187, 306, 307, 308, 309, 310, 311, 312, 327, 334, 349, 362, 365, 375, 380, 497, 498, 499, 500, 501, 511, 512, 513, 514, 517, 520, 617, 618, 624, 625, 631, 632, 634, 635, 647, 682, 727, 728, 729, 732, 733, 743, 745, 746, 751, 753, 779, 815, 816, 822, 831, 835], "datatyp": [48, 52, 69, 71, 75, 123, 131, 135, 152, 173, 177, 368, 415, 617, 618, 759, 831, 849], "nativedevic": [48, 50, 52, 61, 71, 73, 75, 84, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 189, 190, 191, 192, 193, 196, 201, 202, 203, 204, 206, 207, 208, 209, 210, 214, 306, 307, 322, 362, 375, 497, 498, 500, 501, 617, 619, 631, 726, 727, 728, 729, 779, 784, 785, 815, 816, 819, 822, 831], "39999998": [48, 122, 123, 617, 633, 738], "5999999": [48, 52, 75, 79, 122, 123, 292, 360, 369, 417, 617, 624, 647, 653], "0999999": [48, 65, 122, 123, 292, 301, 304, 346, 360, 365, 617, 749], "10000038": [48, 122, 123, 617], "90786433e": [48, 122, 123, 617], "310": [48, 122, 123, 617], "copy_arrai": [48, 71, 617], "to_ivy_arrai": [48, 71, 124, 617], "empty_lik": [48, 52, 71, 75, 259, 369, 420, 617, 620], "uniniti": [48, 125, 126, 617, 821], "from_dlpack": [48, 71, 617], "full_lik": [48, 71, 617, 831], "fill_valu": [48, 52, 62, 71, 75, 85, 130, 131, 247, 255, 371, 375, 482, 501, 617, 620, 632, 735, 815, 828, 831], "scalar": [48, 51, 52, 53, 57, 68, 71, 74, 75, 76, 80, 92, 107, 131, 136, 218, 239, 284, 290, 332, 333, 335, 339, 342, 344, 346, 351, 365, 368, 369, 370, 371, 415, 422, 442, 452, 453, 454, 463, 468, 588, 601, 617, 620, 622, 625, 682, 815, 825, 827, 841, 856], "fill": [48, 51, 52, 61, 62, 69, 71, 74, 75, 84, 85, 125, 130, 131, 133, 136, 137, 138, 143, 144, 269, 307, 362, 369, 371, 375, 426, 430, 435, 441, 463, 482, 483, 498, 500, 501, 617, 620, 631, 632, 727, 735, 779, 805, 828], "000123": [48, 131, 617], "stop": [48, 52, 54, 71, 75, 77, 121, 132, 133, 208, 369, 435, 441, 567, 604, 607, 609, 610, 611, 612, 617, 619, 622, 623, 628, 629, 703, 704, 705, 717, 784, 822, 825, 833, 835, 841, 856], "num": [48, 71, 132, 133, 617, 764, 807, 822, 835], "endpoint": [48, 71, 132, 133, 617, 779, 822], "logspac": [48, 71, 617, 835], "log": [48, 51, 52, 57, 71, 74, 75, 80, 113, 133, 258, 260, 273, 294, 295, 347, 354, 360, 365, 370, 375, 444, 446, 447, 497, 614, 617, 620, 673, 764, 766, 767, 776, 807, 813, 814, 817, 823, 826, 827, 828, 830, 832, 833, 835, 838], "sequenc": [48, 52, 56, 57, 59, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 127, 129, 131, 133, 136, 138, 144, 148, 150, 163, 167, 168, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 310, 317, 318, 319, 320, 321, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 358, 359, 362, 365, 366, 367, 368, 369, 371, 375, 380, 381, 383, 384, 391, 392, 393, 395, 396, 400, 401, 403, 410, 411, 412, 413, 414, 417, 425, 426, 427, 429, 433, 434, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 458, 459, 460, 461, 467, 469, 470, 472, 473, 475, 478, 480, 482, 483, 484, 488, 489, 490, 492, 493, 494, 496, 498, 499, 511, 512, 513, 514, 521, 522, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 561, 565, 566, 580, 581, 583, 585, 587, 588, 601, 602, 605, 606, 607, 612, 617, 620, 622, 623, 624, 625, 627, 629, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 650, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 682, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 701, 702, 706, 713, 723, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 780, 783, 785, 807, 814, 815, 816, 817, 819, 830, 831, 833, 835, 840, 859], "on_valu": [48, 71, 133, 136, 617], "off_valu": [48, 71, 133, 136, 617], "evenli": [48, 51, 52, 56, 59, 69, 71, 74, 75, 79, 82, 121, 132, 133, 287, 368, 410, 414, 617, 620, 624, 627, 637, 638, 639, 640, 642, 644, 646, 696], "hint": [48, 51, 52, 57, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 323, 329, 330, 332, 335, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 474, 482, 511, 514, 541, 545, 547, 549, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 805, 810, 818, 820, 822, 823, 826, 827, 831], "simplic": [48, 51, 52, 57, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 323, 329, 330, 332, 335, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 474, 482, 511, 514, 541, 545, 547, 549, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 818, 833, 839], "nestabl": [48, 51, 52, 57, 74, 75, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 150, 166, 170, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 307, 322, 323, 329, 330, 332, 335, 362, 365, 368, 369, 371, 380, 386, 387, 388, 389, 391, 392, 393, 399, 404, 405, 406, 411, 413, 422, 474, 482, 511, 514, 518, 527, 535, 536, 541, 545, 547, 549, 551, 565, 583, 588, 612, 617, 618, 620, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 725, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 805, 808, 817, 818, 826, 830, 843], "464": [48, 51, 84, 133, 222, 223, 620], "15888336": [48, 133], "2154": [48, 133], "43469003": [48, 133], "meshgrid": [48, 71, 617], "spars": [48, 52, 58, 71, 75, 81, 134, 310, 362, 369, 426, 435, 441, 617, 626, 686], "xy": [48, 71, 134, 617], "dimension": [48, 51, 52, 57, 59, 62, 65, 66, 69, 71, 74, 75, 80, 82, 88, 89, 97, 121, 127, 129, 134, 142, 287, 322, 329, 330, 362, 365, 368, 369, 371, 380, 395, 396, 400, 401, 411, 412, 419, 452, 453, 454, 458, 463, 464, 509, 521, 617, 620, 625, 627, 632, 635, 636, 655, 656, 662, 665, 668, 670, 671, 681, 682, 696, 732, 733, 735, 748, 749, 750, 751, 752, 753, 754, 755, 756, 823, 825, 830, 833, 835, 853, 856, 863], "repres": [48, 51, 52, 56, 57, 74, 75, 79, 80, 95, 120, 134, 136, 159, 217, 218, 221, 224, 233, 235, 242, 268, 281, 285, 286, 310, 324, 325, 326, 342, 359, 362, 365, 367, 368, 369, 370, 371, 374, 375, 378, 410, 414, 428, 440, 442, 447, 474, 485, 490, 491, 492, 497, 503, 510, 546, 616, 617, 618, 620, 622, 624, 625, 647, 648, 662, 670, 673, 674, 766, 779, 783, 794, 806, 810, 815, 833, 837, 853, 854, 857], "coordin": [48, 51, 62, 74, 75, 85, 134, 142, 223, 285, 314, 315, 322, 342, 362, 376, 502, 617, 620, 632, 735], "conserv": [48, 134, 617], "cartesian": [48, 134, 617], "matrix": [48, 52, 53, 56, 57, 75, 76, 79, 80, 92, 93, 95, 97, 134, 140, 141, 142, 322, 323, 362, 369, 371, 380, 418, 421, 422, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 472, 511, 523, 529, 617, 622, 624, 625, 648, 654, 656, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 764, 766, 779, 780, 794, 805, 815, 827, 854, 856], "ij": [48, 65, 134, 617, 635, 747, 794], "respect": [48, 51, 52, 54, 57, 74, 75, 77, 80, 92, 134, 215, 218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 246, 247, 254, 255, 260, 262, 264, 265, 268, 271, 277, 281, 284, 285, 294, 342, 357, 360, 365, 367, 369, 371, 374, 424, 439, 451, 490, 492, 546, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 617, 620, 622, 623, 624, 625, 628, 637, 644, 645, 650, 655, 672, 675, 703, 704, 705, 761, 764, 779, 794, 804, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 822, 823, 825, 826, 827, 830, 831, 832, 852, 862], "rank": [48, 52, 57, 59, 66, 75, 80, 82, 89, 92, 93, 94, 95, 96, 101, 134, 317, 318, 319, 320, 321, 362, 369, 371, 380, 426, 427, 435, 438, 441, 474, 482, 521, 617, 625, 627, 632, 636, 655, 657, 666, 668, 672, 674, 679, 681, 682, 689, 690, 698, 701, 702, 735, 755, 756], "ni": [48, 134, 617], "xi": [48, 134, 617], "scatter": [48, 53, 71, 76, 136, 565, 566, 617, 622, 812, 826, 833, 863], "j": [48, 51, 52, 53, 57, 65, 71, 74, 75, 80, 92, 120, 136, 216, 217, 218, 219, 221, 224, 233, 235, 238, 240, 248, 256, 258, 262, 268, 279, 281, 282, 285, 286, 332, 365, 368, 369, 380, 395, 396, 400, 411, 412, 416, 421, 423, 432, 438, 521, 526, 616, 617, 620, 622, 625, 635, 659, 679, 747, 794, 807, 808, 812, 849, 852], "unless": [48, 52, 57, 71, 75, 136, 268, 328, 344, 349, 365, 617, 620, 625, 668, 811, 816, 826, 841, 850, 851], "ones_lik": [48, 71, 617, 811, 840], "tril": [48, 71, 617], "whose": [48, 51, 52, 53, 57, 59, 63, 65, 71, 74, 75, 76, 80, 82, 86, 88, 93, 95, 97, 131, 140, 141, 217, 221, 224, 232, 233, 234, 273, 274, 280, 281, 285, 286, 287, 323, 337, 341, 345, 346, 348, 352, 362, 369, 371, 421, 440, 473, 482, 487, 528, 583, 617, 620, 622, 625, 627, 633, 635, 654, 656, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 691, 695, 737, 738, 739, 746, 747, 766, 818, 830], "innermost": [48, 52, 57, 80, 140, 141, 323, 362, 369, 421, 617, 625, 654, 656, 658, 659, 660, 661, 663, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 679], "mxn": [48, 52, 57, 80, 140, 141, 323, 362, 617, 625, 658, 666, 668, 669, 671, 672, 676, 679], "matric": [48, 52, 57, 75, 80, 92, 93, 97, 134, 140, 141, 323, 362, 369, 371, 421, 426, 427, 429, 433, 434, 439, 463, 617, 624, 625, 648, 654, 656, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 679, 680, 766, 803, 820, 856], "diagon": [48, 52, 57, 75, 80, 93, 127, 140, 141, 142, 307, 322, 323, 362, 369, 371, 419, 422, 430, 436, 463, 617, 625, 657, 679], "triangular": [48, 52, 57, 80, 140, 141, 142, 322, 323, 362, 369, 436, 617, 625, 654, 660, 661, 668, 672], "alloc": [48, 49, 52, 72, 140, 141, 147, 323, 362, 617, 618, 805, 807, 841], "triu": [48, 71, 617], "upper": [48, 52, 57, 61, 75, 80, 84, 127, 141, 142, 307, 323, 362, 369, 380, 436, 514, 617, 625, 631, 654, 660, 661, 672, 729, 815, 826, 830], "zeros_lik": [48, 52, 71, 147, 264, 371, 482, 603, 604, 607, 609, 610, 611, 617, 618, 620, 623, 625, 627, 672, 687, 827, 833], "data_typ": [49, 52, 72, 75, 177, 618, 812, 815, 830, 831], "_arraywithdatatyp": [49, 97], "irrespect": [49, 57, 72, 80, 147, 618, 625, 675, 813, 826, 837, 863], "promot": [49, 51, 52, 57, 72, 74, 75, 80, 87, 97, 98, 147, 150, 173, 174, 175, 181, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 235, 238, 240, 242, 256, 257, 258, 259, 260, 265, 268, 273, 277, 280, 281, 282, 283, 284, 285, 286, 289, 339, 347, 352, 365, 368, 380, 411, 511, 574, 596, 618, 620, 622, 625, 627, 635, 654, 655, 662, 663, 665, 666, 667, 668, 670, 671, 673, 674, 681, 682, 688, 698, 741, 749, 752, 764, 765, 809, 818, 819, 823, 832], "nan": [49, 51, 52, 53, 63, 65, 72, 74, 75, 76, 147, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 249, 250, 251, 256, 257, 258, 259, 260, 263, 268, 269, 271, 273, 274, 277, 278, 279, 280, 281, 282, 285, 286, 288, 294, 328, 329, 330, 340, 344, 349, 352, 360, 365, 371, 380, 482, 509, 510, 517, 518, 519, 520, 547, 601, 615, 618, 620, 622, 633, 635, 636, 737, 738, 739, 740, 748, 749, 750, 752, 753, 754, 755, 756, 764, 767, 809, 815, 818, 825, 831, 832], "infin": [49, 51, 53, 57, 72, 74, 80, 147, 215, 216, 217, 218, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 249, 250, 256, 257, 258, 259, 260, 263, 268, 269, 271, 273, 277, 278, 280, 281, 282, 285, 286, 288, 329, 330, 352, 365, 547, 615, 618, 620, 622, 625, 635, 636, 673, 682, 748, 750, 755, 756, 809, 818], "desir": [49, 50, 52, 62, 69, 72, 73, 75, 85, 92, 147, 149, 150, 209, 313, 353, 362, 365, 371, 380, 472, 517, 520, 521, 618, 619, 625, 632, 677, 734, 779, 780, 807, 811, 814, 815, 816, 827, 835, 845, 849, 856], "broadcast_arrai": [49, 72, 618], "mix": [49, 51, 72, 74, 75, 76, 81, 84, 97, 98, 148, 161, 162, 175, 194, 195, 225, 228, 229, 230, 235, 236, 242, 246, 254, 255, 265, 268, 271, 277, 370, 380, 448, 518, 537, 539, 540, 541, 542, 551, 585, 588, 618, 619, 620, 622, 624, 625, 626, 627, 630, 635, 638, 640, 643, 645, 646, 648, 653, 654, 677, 684, 686, 687, 725, 747, 749, 752, 765, 767, 805, 808, 815, 816, 817, 826, 833, 835, 843, 856, 860, 862], "broadcast_to": [49, 72, 618, 815], "can_cast": [49, 72, 618, 815, 823, 827], "accord": [49, 52, 53, 59, 65, 72, 82, 88, 150, 160, 218, 229, 235, 242, 268, 279, 313, 362, 368, 371, 412, 474, 541, 544, 565, 566, 618, 620, 622, 625, 627, 635, 681, 689, 702, 752, 754, 759, 766, 786, 793, 805, 806, 809, 815, 821, 823, 827, 830], "finfo": [49, 72, 618, 830], "resolut": [49, 72, 160, 618, 807], "4028235e": [49, 160, 618], "iinfo": [49, 72, 618], "integ": [49, 51, 52, 56, 57, 59, 61, 65, 66, 69, 74, 75, 76, 79, 80, 82, 84, 88, 89, 97, 98, 121, 130, 163, 164, 170, 174, 175, 179, 215, 225, 226, 227, 228, 229, 230, 231, 241, 242, 253, 265, 270, 273, 277, 278, 288, 289, 324, 325, 326, 329, 330, 334, 338, 339, 362, 365, 368, 371, 375, 378, 380, 395, 400, 410, 413, 414, 415, 460, 469, 474, 482, 488, 497, 498, 499, 500, 501, 503, 504, 509, 511, 512, 513, 518, 521, 544, 560, 570, 602, 617, 618, 620, 622, 624, 625, 627, 631, 634, 635, 636, 637, 638, 639, 640, 642, 644, 646, 655, 657, 667, 681, 682, 696, 726, 727, 728, 729, 730, 731, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 765, 766, 767, 772, 780, 794, 807, 813, 815, 825, 828, 830, 835, 837], "119": [49, 163], "1220": [49, 163], "int16": [49, 52, 61, 65, 72, 84, 150, 154, 156, 161, 163, 170, 185, 380, 512, 513, 618, 635, 727, 745, 746, 751, 753, 764, 765, 815, 827, 830, 835], "32768": [49, 72, 163, 581, 622], "32767": [49, 72, 163], "is_bool_dtyp": [49, 72, 618], "is_float_dtyp": [49, 72, 618, 831], "is_int_dtyp": [49, 72, 618, 828, 831], "is_uint_dtyp": [49, 72, 618, 828, 831], "result_typ": [49, 72, 618, 815], "arrays_and_dtyp": [49, 72, 175, 618], "_arraywithdevic": [50, 97], "move": [50, 52, 73, 75, 142, 205, 209, 213, 322, 362, 371, 473, 617, 619, 782, 800, 807, 816, 831], "addit": [50, 52, 53, 60, 73, 75, 76, 83, 118, 120, 209, 218, 278, 370, 374, 380, 442, 495, 510, 515, 534, 535, 536, 602, 616, 619, 620, 622, 624, 628, 630, 650, 705, 725, 780, 794, 805, 806, 807, 811, 815, 817, 818, 821, 823, 825, 826, 827, 830, 831, 833, 837, 838, 840, 849, 856, 857, 858, 862], "__dlpack__": [50, 73, 128, 209, 617, 619], "caveat": [50, 73, 209, 370, 446, 619], "portabl": [50, 73, 209, 619, 800, 854], "_arraywithelementwis": [51, 97], "ab": [51, 57, 67, 74, 90, 97, 98, 273, 328, 344, 365, 371, 481, 620, 625, 629, 666, 676, 682, 714, 717, 761, 793, 794, 803, 810, 815, 820, 824, 827, 830], "absolut": [51, 52, 57, 67, 69, 74, 75, 80, 97, 215, 279, 328, 344, 347, 353, 365, 369, 370, 422, 437, 443, 445, 620, 625, 666, 667, 668, 673, 759, 761, 764, 766, 767, 801, 806], "aco": [51, 74, 620], "invers": [51, 52, 57, 74, 75, 80, 216, 217, 220, 221, 222, 223, 224, 368, 378, 390, 399, 401, 411, 503, 620, 625, 663, 667, 671, 786, 815], "cosin": [51, 74, 216, 217, 232, 233, 306, 309, 362, 368, 389, 399, 620, 780], "acosh": [51, 74, 161, 162, 618, 620, 803, 820], "area": [51, 52, 74, 75, 79, 217, 221, 224, 368, 403, 410, 414, 620, 826, 833, 846, 852], "hyperbol": [51, 74, 217, 221, 224, 233, 281, 285, 286, 298, 302, 360, 620], "sector": [51, 74, 217, 221, 224, 620, 846], "second": [51, 52, 54, 57, 59, 63, 74, 75, 76, 77, 80, 82, 86, 93, 97, 98, 118, 142, 173, 181, 218, 223, 225, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 264, 265, 268, 271, 273, 284, 313, 322, 328, 340, 342, 343, 344, 350, 354, 355, 362, 365, 369, 370, 371, 378, 380, 420, 421, 422, 424, 428, 448, 480, 487, 498, 500, 504, 511, 514, 526, 575, 597, 603, 604, 609, 616, 617, 618, 620, 622, 623, 625, 627, 628, 629, 633, 655, 658, 659, 660, 662, 665, 670, 672, 673, 675, 677, 679, 681, 698, 699, 704, 707, 737, 738, 739, 784, 806, 809, 812, 815, 817, 821, 826, 827, 830, 832, 837, 847, 861], "multipli": [51, 52, 56, 65, 74, 75, 79, 92, 218, 284, 345, 368, 369, 403, 432, 433, 512, 513, 620, 624, 635, 647, 745, 751, 807, 810, 811, 813, 817], "angl": [51, 74, 223, 233, 281, 286, 343, 365, 620], "deg": [51, 74, 219, 620], "radian": [51, 52, 74, 75, 216, 219, 220, 222, 223, 232, 234, 274, 280, 285, 352, 365, 620, 818], "degre": [51, 52, 65, 74, 75, 88, 219, 234, 274, 316, 362, 371, 480, 620, 635, 752, 754, 855], "1j": [51, 74, 75, 219, 220, 232, 233, 238, 240, 252, 275, 280, 281, 285, 332, 580, 620, 622], "2j": [51, 52, 74, 75, 219, 248, 332, 368, 395, 400, 581, 620, 622], "3j": [51, 52, 74, 75, 219, 252, 275, 332, 365, 620], "35619449": [51, 219, 620], "78539816": [51, 219, 620], "135": [51, 219, 529, 620, 622], "asin": [51, 74, 620], "sine": [51, 74, 220, 221, 280, 281, 620], "927": [51, 74, 220], "asinh": [51, 74, 220, 620], "atan": [51, 74, 620], "tangent": [51, 74, 222, 223, 224, 285, 286, 298, 302, 358, 360, 367, 620, 818], "785": [51, 74, 222, 223, 620], "atan2": [51, 74, 620], "quotient": [51, 74, 223, 235, 242, 620], "245": [51, 79, 223, 624, 647, 648], "588": [51, 223, 620], "inf": [51, 52, 53, 57, 74, 75, 76, 80, 223, 240, 249, 250, 251, 252, 256, 257, 259, 269, 294, 347, 360, 365, 369, 380, 418, 514, 547, 601, 615, 620, 622, 624, 625, 651, 666, 682, 764, 767, 803, 815, 820, 825], "719": [51, 223, 620], "197": [51, 223, 620], "atanh": [51, 74, 620], "549": [51, 74, 79, 224, 620, 624, 648], "bitwise_and": [51, 74, 620], "bitwise_invert": [51, 74, 620], "bitiwse_invert": [51, 226], "bitwise_left_shift": [51, 74, 620], "bitwise_or": [51, 74, 620], "bitwise_right_shift": [51, 74, 97, 620], "bitwise_xor": [51, 74, 97, 620], "ceil": [51, 52, 74, 75, 92, 95, 121, 368, 386, 387, 388, 404, 405, 406, 409, 617, 620, 780, 826], "round": [51, 52, 74, 75, 92, 94, 95, 96, 218, 231, 235, 241, 242, 268, 282, 288, 289, 338, 365, 620, 803, 805, 806, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 845, 846, 847], "416": [51, 232, 620], "540": [51, 232], "990": [51, 232], "cosh": [51, 74, 232, 620], "deg2rad": [51, 74, 620], "convers": [51, 52, 75, 234, 274, 567, 577, 622, 781, 782, 805, 834, 836, 840, 841, 843, 847, 855, 862], "180": [51, 74, 234, 274, 620], "270": [51, 74, 234, 274, 620], "360": [51, 74, 234, 274, 620, 814], "dividend": [51, 74, 235, 242, 277, 289, 620], "divisor": [51, 52, 54, 65, 74, 75, 77, 88, 235, 242, 245, 246, 277, 289, 368, 371, 386, 387, 388, 460, 469, 488, 603, 604, 609, 620, 623, 635, 752, 754, 780, 784], "375": [51, 236, 271], "erf": [51, 74, 337, 365, 620], "exponenti": [51, 52, 74, 75, 237, 238, 240, 260, 273, 290, 299, 360, 369, 431, 620], "gauss": [51, 74, 237, 620], "328": [51, 237, 285, 620], "677": [51, 237], "842": [51, 237, 285, 620], "71828198": [51, 74, 238], "38905573": [51, 74, 238], "08553696": [51, 74, 238, 620], "exp2": [51, 74, 620], "expm1": [51, 74, 620, 815], "244": [51, 240, 800], "918": [51, 240], "147": [51, 240, 620], "floor": [51, 52, 74, 75, 92, 95, 229, 242, 368, 386, 387, 388, 390, 404, 405, 406, 409, 620, 780, 826], "floor_divid": [51, 74, 620, 772, 815], "fmin": [51, 74, 620, 815], "gcd": [51, 74, 620, 815], "greater": [51, 52, 56, 59, 61, 74, 75, 79, 84, 97, 98, 129, 216, 217, 220, 221, 223, 224, 227, 229, 235, 241, 242, 256, 258, 273, 277, 279, 281, 282, 286, 287, 288, 331, 365, 368, 390, 395, 400, 411, 617, 620, 624, 625, 627, 631, 653, 655, 667, 697, 729, 766, 780, 807, 828], "greater_equ": [51, 74, 97, 98, 260, 620], "imaginari": [51, 74, 97, 107, 110, 113, 137, 138, 216, 217, 218, 233, 235, 236, 238, 240, 248, 268, 270, 271, 278, 281, 282, 286, 332, 365, 368, 369, 411, 422, 614, 617, 620, 632, 735, 817], "4j": [51, 74, 248, 368, 411, 581, 620, 622], "6j": [51, 52, 74, 248, 252, 332, 620], "isfinit": [51, 74, 620, 827], "out_i": [51, 74, 249, 250, 251, 252, 275, 620], "self_i": [51, 74, 249, 250, 251, 252, 275], "finit": [51, 74, 215, 216, 217, 218, 221, 223, 224, 233, 235, 236, 238, 240, 242, 249, 250, 256, 258, 268, 269, 271, 273, 277, 281, 282, 286, 620], "isinf": [51, 74, 620], "detect_posit": [51, 74, 250, 620], "detect_neg": [51, 74, 250, 620], "isnan": [51, 74, 620], "isreal": [51, 74, 620], "5j": [51, 74, 75, 252, 275, 332, 365, 620], "lcm": [51, 74, 620, 815], "less": [51, 52, 57, 61, 65, 74, 75, 80, 84, 97, 98, 216, 217, 220, 223, 224, 231, 235, 242, 256, 257, 258, 259, 273, 277, 279, 282, 351, 365, 368, 369, 380, 389, 390, 399, 411, 435, 441, 511, 514, 620, 625, 631, 635, 666, 667, 668, 671, 682, 729, 752, 754, 780, 806, 807, 813, 815, 817, 819, 822, 827, 830, 833, 834, 835, 846, 856, 858], "less_equ": [51, 74, 97, 98, 620, 819], "log10": [51, 52, 74, 313, 362, 620], "logarithm": [51, 74, 238, 256, 257, 258, 259, 260, 336, 347, 365, 620, 625, 673], "602": [51, 257, 620], "699": [51, 257, 620], "log1p": [51, 74, 620, 825], "693": [51, 74, 112, 221, 258, 614, 620, 626, 686], "0953": [51, 74, 256, 258, 620], "log2": [51, 74, 261, 620], "logaddexp": [51, 74, 620], "logaddexp2": [51, 74, 620, 803, 820], "169925": [51, 74, 261, 620], "logical_and": [51, 74, 620, 827, 833, 863], "logical_not": [51, 74, 620, 815], "logical_or": [51, 74, 620, 863], "conform": [51, 57, 74, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 150, 160, 163, 175, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 262, 263, 264, 265, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 329, 330, 332, 365, 368, 371, 380, 411, 482, 511, 617, 618, 620, 625, 627, 632, 633, 634, 635, 636, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 688, 690, 691, 692, 694, 695, 697, 698, 702, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 818, 821], "api_specif": [51, 52, 74, 75, 150, 238, 248, 249, 264, 329, 330, 365, 368, 371, 411, 482, 618, 620, 627, 635, 702, 752, 818], "array_api": [51, 74, 150, 238, 248, 249, 264, 368, 371, 411, 482, 618, 620, 625, 627, 635, 673, 674, 702, 752, 818], "logical_xor": [51, 74, 620], "maximum": [51, 52, 53, 54, 59, 62, 65, 69, 74, 75, 76, 77, 82, 85, 88, 98, 208, 293, 329, 330, 340, 353, 360, 365, 368, 369, 371, 380, 384, 394, 435, 438, 441, 474, 512, 514, 519, 529, 530, 538, 546, 609, 619, 620, 622, 623, 625, 627, 632, 635, 666, 687, 732, 733, 748, 750, 764, 766, 767, 772, 794, 807, 815, 817, 826, 838, 863], "use_wher": [51, 74, 266, 267, 620], "formula": [51, 52, 74, 235, 257, 259, 266, 267, 268, 313, 346, 362, 365, 374, 490, 492, 620], "exce": [51, 52, 75, 267, 371, 484, 620], "product": [51, 52, 56, 57, 65, 74, 75, 79, 80, 88, 92, 93, 95, 268, 358, 359, 367, 369, 380, 417, 420, 424, 427, 428, 429, 432, 433, 434, 512, 513, 520, 620, 624, 625, 635, 650, 653, 655, 662, 665, 670, 677, 681, 745, 746, 747, 751, 752, 794, 805, 835, 856, 858], "nan_to_num": [51, 74, 620], "posinf": [51, 74, 269, 620], "neginf": [51, 74, 269, 620], "5e": [51, 54, 74, 75, 269, 350, 609, 620, 623], "not_equ": [51, 74, 97, 98, 620], "pow": [51, 74, 97, 98, 620, 809], "expon": [51, 52, 53, 75, 76, 273, 339, 341, 345, 365, 374, 495, 581, 620, 622, 625, 667], "rad2deg": [51, 74, 620], "286": [51, 75, 274], "458": [51, 274], "573": [51, 274, 620], "reciproc": [51, 74, 620], "333": [51, 74, 235, 276, 530, 620, 622], "remaind": [51, 52, 59, 69, 74, 75, 82, 244, 620, 627, 696, 809, 826], "modulu": [51, 74, 277, 620, 826], "sign": [51, 52, 57, 63, 65, 74, 75, 80, 92, 121, 215, 216, 217, 218, 221, 223, 224, 229, 233, 235, 238, 240, 242, 268, 270, 277, 281, 282, 286, 333, 365, 369, 371, 380, 437, 481, 482, 512, 513, 617, 620, 625, 633, 635, 673, 737, 738, 739, 740, 745, 746, 751, 753, 800, 806, 815, 835, 840, 846], "x2_i": [51, 74, 218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 246, 247, 254, 255, 260, 262, 264, 265, 268, 271, 273, 277, 284, 620, 809], "decim": [51, 74, 278, 620, 832], "0001": [51, 52, 75, 278, 279, 369, 435, 441, 764, 767, 784], "678": [51, 278, 279], "np_variant": [51, 74, 279, 620], "841": [51, 68, 74, 105, 280, 614, 620], "909": [51, 74, 76, 280, 620], "141": [51, 74, 147, 280, 618, 620], "sinh": [51, 74, 280, 620], "232": [51, 74, 281, 620], "sqrt": [51, 52, 74, 75, 368, 390, 395, 396, 400, 401, 411, 620, 779, 780, 800], "squar": [51, 52, 57, 74, 75, 80, 282, 369, 370, 374, 380, 421, 431, 443, 495, 511, 605, 606, 608, 613, 620, 623, 625, 629, 654, 656, 657, 659, 660, 661, 663, 667, 673, 674, 675, 680, 712, 800], "tanh": [51, 52, 74, 75, 285, 298, 302, 360, 620, 776, 835], "762": [51, 74, 286, 620], "964": [51, 74, 286, 620], "trapz": [51, 74, 620], "dx": [51, 74, 287, 620], "apart": [51, 74, 287, 620], "trapezoid": [51, 74, 287, 620], "trunc": [51, 74, 620], "025": [51, 288, 370, 448, 620, 628, 705], "trunc_divid": [51, 74, 620], "_arraywithactivationsexperiment": [52, 97], "celu": [52, 75, 360], "formul": [52, 68, 75, 93, 105, 290, 292, 360, 776], "elu": [52, 75, 293, 360, 776], "scaler": [52, 75, 291, 360, 764, 767, 830], "hardshrink": [52, 75, 360], "lambd": [52, 75, 292, 301, 360], "hardtanh": [52, 75, 360], "max_val": [52, 75, 293, 360], "min_val": [52, 75, 293, 360], "region": [52, 75, 293, 301, 360, 806], "19722438": [52, 75, 294, 360], "38629448": [52, 75, 294, 360], "38629436": [52, 75, 294, 360], "logsigmoid": [52, 75, 360, 776], "31326175": [52, 68, 295, 360], "126928": [52, 75, 295], "01814993": [52, 295], "00004578": [52, 295], "57888985": [52, 295], "31326169": [52, 75, 295, 360], "69314718": [52, 57, 68, 75, 80, 295, 347, 360, 365, 625, 673], "01104775": [52, 295], "prelu": [52, 75, 360, 776], "unidirect": [52, 296, 360], "relu6": [52, 75, 360, 776], "rectifi": [52, 68, 75, 107, 109, 110, 297, 300, 305, 360, 614], "scaled_tanh": [52, 75, 302, 360], "7159": [52, 75, 298, 302, 360], "amplitud": [52, 75, 298, 302, 360], "65537548": [52, 75, 298], "49570239": [52, 75, 298], "77637792": [52, 298], "selu": [52, 75, 360, 776], "11133075": [52, 299, 360], "05070102": [52, 75, 299, 360], "10140204": [52, 299, 360], "15210295": [52, 299, 360], "20280409": [52, 299, 360], "25350523": [52, 299, 360], "30420589": [52, 299, 360], "35490704": [52, 299, 360], "silu": [52, 75, 360, 776], "26894143": [52, 300], "73105854": [52, 75, 300], "softshrink": [52, 75, 360], "bound": [52, 75, 301, 313, 360, 362, 371, 457, 482, 483, 764, 815, 819, 827, 830, 835, 862], "tanhshrink": [52, 75, 360], "23840582": [52, 75, 303, 360], "condit": [52, 62, 75, 85, 118, 304, 319, 320, 362, 369, 418, 616, 629, 632, 716, 717, 736, 766, 809, 815, 817, 819, 823, 824, 826, 830, 849], "met": [52, 75, 304, 819], "hreshold": [52, 304], "thresholded_relu": [52, 75, 360], "_arraywithconversionsexperiment": [52, 97], "_arraywithcreationexperiment": [52, 97], "blackman_window": [52, 75, 362], "period": [52, 75, 281, 285, 306, 308, 309, 311, 312, 362, 368, 402, 620, 807], "window": [52, 56, 75, 79, 306, 308, 309, 311, 312, 327, 362, 368, 374, 386, 387, 388, 390, 404, 405, 406, 407, 409, 410, 414, 415, 495, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 780, 802, 807, 812, 820, 861], "symmetr": [52, 57, 75, 80, 92, 93, 306, 308, 309, 311, 312, 362, 369, 371, 421, 474, 625, 654, 659, 660, 661, 683, 813], "38777878e": [52, 75, 306, 362], "40000000e": [52, 306, 362], "00000000e": [52, 57, 75, 76, 306, 337, 362, 368, 389, 395, 399, 400, 625, 672, 803, 820], "30000000e": [52, 75, 306, 362], "eye_lik": [52, 75, 362], "elsewher": [52, 75, 127, 307, 362, 617, 632, 736, 806], "mel_weight_matrix": [52, 75, 362], "num_mel_bin": [52, 75, 313, 362], "dft_length": [52, 75, 313, 362, 368, 390], "sample_r": [52, 75, 313, 362], "lower_edge_hertz": [52, 75, 313, 362], "upper_edge_hertz": [52, 75, 313, 362], "3000": [52, 75, 313, 362], "melweightmatrix": [52, 75, 313, 362], "linearli": [52, 53, 76, 313, 362, 538, 622, 625, 674], "frequenc": [52, 53, 75, 76, 313, 362, 380, 511, 538, 622, 807], "spectra": [52, 313, 362], "dft": [52, 75, 313, 362, 368], "stft": [52, 75, 313, 362, 368], "mel": [52, 75, 313, 362], "term": [52, 75, 306, 313, 316, 362, 370, 446, 447, 624, 649, 780, 794, 800, 807, 813, 835, 843, 845, 856], "hertz": [52, 313, 362], "2595": [52, 313, 362], "700": [52, 76, 313, 362, 542], "band": [52, 53, 75, 76, 313, 362, 538, 622], "spectrum": [52, 75, 313, 362], "n_fft": [52, 75, 313, 362, 368, 390], "signal": [52, 75, 313, 362, 368, 382, 383, 384, 389, 390, 399, 415, 780, 855, 856], "8000": [52, 75, 308, 313, 362], "75694758": [52, 313, 362], "trilu": [52, 75, 362], "retain": [52, 142, 322, 323, 362, 605, 617, 623, 825, 829, 843], "unsorted_segment_mean": [52, 75, 362], "segment_id": [52, 75, 324, 325, 326, 362, 786], "num_seg": [52, 75, 324, 325, 326, 362, 786], "identifi": [52, 75, 324, 325, 326, 362, 805, 809, 814, 815, 830, 833], "th": [52, 75, 93, 324, 325, 326, 335, 362, 365, 369, 370, 380, 419, 426, 442, 521], "distinct": [52, 63, 75, 324, 325, 326, 362, 633, 737, 738, 739, 740, 806, 813, 818, 825, 826, 827, 834, 846, 856], "unsorted_segment_min": [52, 75, 362], "unsorted_segment_sum": [52, 75, 362], "polyv": [52, 75, 362], "coeff": [52, 75, 316, 362], "polynomi": [52, 75, 316, 362], "coeffici": [52, 75, 308, 316, 362, 369, 436, 625, 674, 784], "indetermin": [52, 75, 316, 362], "simplifi": [52, 75, 316, 362, 793, 794, 819, 827, 835, 836, 839, 846, 849, 852, 854, 855, 856, 859, 862, 863], "substitut": [52, 75, 316, 362], "_arraywithdata_typeexperiment": [52, 97], "_arraywithdeviceexperiment": [52, 97], "_arraywithelementwiseexperiment": [52, 97], "equal_nan": [52, 75, 328, 344, 365], "toler": [52, 57, 75, 80, 328, 344, 365, 369, 422, 435, 441, 625, 668, 671, 759, 761, 809, 828, 856], "1e10": [52, 328, 344, 365], "00001e10": [52, 328, 344, 365], "00001e": [52, 328, 365], "amax": [52, 75, 365], "keepdim": [52, 57, 59, 62, 65, 66, 69, 75, 80, 82, 85, 88, 89, 329, 330, 334, 349, 356, 365, 366, 371, 380, 479, 516, 517, 518, 519, 520, 521, 625, 627, 632, 635, 636, 666, 682, 701, 732, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 819, 827, 835], "singleton": [52, 57, 62, 65, 66, 75, 80, 85, 88, 89, 329, 330, 365, 625, 627, 632, 635, 636, 682, 690, 697, 733, 748, 749, 750, 751, 752, 753, 754, 755, 756, 835], "amin": [52, 75, 365], "binar": [52, 75, 365], "map": [52, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 98, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 163, 167, 168, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 365, 368, 391, 392, 393, 411, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 480, 482, 483, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 602, 607, 612, 622, 629, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 713, 714, 718, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 794, 810, 813, 815, 822, 823, 827, 830, 831, 838, 841, 843, 850, 857], "conj": [52, 75, 233, 238, 240, 281, 282, 286, 365, 620], "conjug": [52, 57, 75, 80, 332, 365, 368, 369, 375, 390, 416, 422, 432, 434, 436, 499, 625, 665, 669, 677], "copysign": [52, 75, 365], "unsign": [52, 65, 75, 333, 365, 371, 380, 482, 512, 513, 635, 745, 746, 751, 753, 765, 815, 835], "count_nonzero": [52, 75, 365], "diff": [52, 69, 75, 365, 817, 826], "prepend": [52, 75, 335, 365, 625, 627, 665, 690, 806], "differenc": [52, 75, 335, 365], "prior": [52, 75, 335, 365, 375, 499, 625, 677, 819, 831], "expand": [52, 53, 59, 75, 76, 335, 365, 371, 538, 622, 627, 690, 813, 829], "discret": [52, 75, 335, 365, 368, 389, 390, 395, 396, 399, 400, 401, 411, 412, 626, 685, 780], "digamma": [52, 75, 365], "7549271": [52, 336, 365], "92278427": [52, 75, 336, 365], "9988394": [52, 336, 365], "erfc": [52, 75, 365], "complementari": [52, 75, 327, 337, 362, 365, 854, 862], "84270084e": [52, 337], "80259693e": [52, 337], "toward": [52, 59, 75, 82, 242, 289, 338, 350, 365, 371, 380, 480, 514, 620, 627, 695, 800, 803, 805, 806, 820, 835, 852, 856], "float_pow": [52, 75, 365], "fmax": [52, 75, 365], "fmod": [52, 75, 620], "divis": [52, 53, 54, 75, 76, 77, 229, 235, 242, 244, 277, 279, 289, 371, 460, 572, 580, 594, 603, 604, 609, 620, 622, 623, 624, 637, 644, 645, 784, 823, 832], "frexp": [52, 75, 365], "edge_ord": [52, 75, 342, 365], "estim": [52, 75, 342, 365, 380, 511], "boundari": [52, 61, 75, 84, 95, 319, 320, 342, 362, 365, 368, 403, 631, 729, 856], "33333333": [52, 75, 276, 342, 365, 442, 620], "hypot": [52, 75, 365], "hypotenus": [52, 343, 365], "4031": [52, 343, 365], "8102": [52, 343, 365], "isclos": [52, 75, 365, 809], "ldexp": [52, 75, 365], "lerp": [52, 75, 365], "lgamma": [52, 365], "45373654": [52, 347, 365], "6477685": [52, 347, 365], "modf": [52, 75, 365], "fraction": [52, 75, 348, 365, 380, 521, 624, 647], "nansum": [52, 75, 365], "accumul": [52, 75, 349, 365, 371, 479], "nextaft": [52, 75, 365], "0e": [52, 54, 75, 77, 350, 365, 609, 623], "4013e": [52, 75, 350, 365], "4028e": [52, 75, 350, 365], "signbit": [52, 75, 365], "637": [52, 75, 352, 365], "0909": [52, 75, 352, 365], "sparsify_tensor": [52, 75, 365], "sparsifi": [52, 75, 353, 365], "arang": [52, 57, 65, 75, 80, 132, 353, 365, 368, 369, 386, 387, 388, 395, 400, 404, 405, 406, 409, 418, 433, 466, 561, 602, 617, 622, 625, 628, 635, 666, 682, 704, 705, 747, 800, 815, 826, 863], "xlogi": [52, 75, 365], "0986": [52, 75, 354, 365], "3863": [52, 75, 354, 365], "0000": [52, 75, 308, 309, 312, 354, 362, 365, 369, 371, 431, 468], "zeta": [52, 75, 365], "0369": [52, 75, 355, 365], "_arraywithgeneralexperiment": [52, 97], "init_valu": [52, 75, 79, 356, 366, 368, 410], "reduct": [52, 53, 58, 66, 69, 75, 76, 79, 81, 89, 356, 366, 368, 370, 371, 410, 442, 443, 444, 445, 446, 447, 448, 449, 479, 535, 565, 566, 622, 626, 636, 684, 685, 686, 755, 756, 781, 815, 823, 826, 830, 837], "_arraywithgradientsexperiment": [52, 97], "_arraywithimageexperiment": [52, 97], "_arraywithlayersexperiment": [52, 97], "adaptive_avg_pool1d": [52, 75, 368], "1d": [52, 75, 92, 93, 368, 369, 371, 380, 382, 389, 391, 393, 399, 432, 452, 457, 479, 483, 511, 764, 780], "adapt": [52, 75, 77, 368, 382, 383, 384, 610, 623, 780, 784, 846], "pool": [52, 75, 79, 368, 382, 383, 384, 386, 387, 388, 404, 405, 406, 407, 410, 780, 806], "plane": [52, 75, 235, 238, 240, 268, 280, 281, 282, 285, 368, 371, 382, 383, 384, 480, 620], "l_in": [52, 75, 368, 382], "spatial": [52, 56, 75, 79, 368, 374, 382, 383, 384, 403, 410, 414, 490, 491, 492, 495, 624, 637, 638, 639, 640, 642, 644, 646, 783], "Will": [52, 75, 368, 382, 383, 384, 789, 841], "l_out": [52, 75, 368, 382], "nhwc": [52, 56, 75, 79, 368, 374, 383, 387, 392, 405, 409, 495, 624, 637, 640, 641, 644, 645, 646, 780], "3d": [52, 57, 75, 368, 383, 391, 392, 454, 625, 662, 780, 833], "4d": [52, 75, 368, 369, 374, 383, 392, 393, 440, 495], "s_0": [52, 75, 368, 383, 384], "s_1": [52, 75, 368, 383, 384], "adaptive_max_pool2d": [52, 75, 368], "h_in": [52, 75, 368, 384], "w_in": [52, 75, 368, 384], "avg_pool1d": [52, 75, 368], "kernel": [52, 56, 75, 79, 368, 386, 387, 388, 404, 405, 406, 407, 624, 649, 835, 841, 856, 859, 860], "nwc": [52, 56, 75, 79, 368, 386, 391, 404, 407, 624, 637, 638, 639, 644, 645, 780], "count_include_pad": [52, 75, 368, 386, 387, 388, 780], "d_in": [52, 56, 75, 79, 368, 386, 387, 388, 390, 395, 396, 400, 404, 405, 406, 407, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646], "algorithm": [52, 56, 68, 75, 79, 105, 368, 369, 386, 387, 388, 403, 404, 405, 406, 407, 435, 437, 441, 625, 638, 640, 641, 642, 643, 646, 673, 776, 780, 794, 815, 827, 833, 841, 856, 858, 860], "ncw": [52, 56, 75, 79, 368, 386, 391, 392, 404, 407, 624, 637, 638, 639, 644, 645, 780], "avg_pool2d": [52, 75, 368], "divisor_overrid": [52, 75, 368, 386, 387, 388, 780], "avg_pool3d": [52, 75, 368], "ndhwc": [52, 56, 75, 79, 368, 388, 393, 406, 624, 637, 642, 643, 644, 645, 780], "volum": [52, 56, 75, 79, 368, 388, 390, 395, 396, 400, 406, 624, 642, 643], "ncdhw": [52, 56, 75, 79, 368, 388, 393, 406, 624, 637, 642, 643, 644, 645, 780], "dct": [52, 75, 368, 780, 838], "truncat": [52, 75, 368, 369, 389, 395, 399, 400, 401, 412, 439, 568, 622, 780, 819, 838], "larger": [52, 59, 65, 75, 82, 88, 160, 368, 389, 396, 399, 401, 412, 618, 627, 635, 687, 695, 752, 754, 780, 830, 833, 863], "ortho": [52, 75, 368, 389, 390, 395, 396, 399, 400, 401, 411, 412, 780], "onesid": [52, 75, 368, 390], "fft": [52, 75, 368, 390, 396, 411, 412, 415, 780, 805, 856], "symmetri": [52, 368, 390], "rfft": [52, 75, 368, 390, 412], "invok": [52, 368, 390, 800, 821, 849, 850], "batch_idx": [52, 368, 390], "signal_dim1": [52, 368, 390], "signal_dim2": [52, 368, 390], "signal_dimn": [52, 368, 390], "signal_dim": [52, 368, 390], "embed": [52, 75, 368, 370, 442, 624, 650, 766, 780, 856], "max_norm": [52, 53, 75, 76, 368, 394, 529, 530, 622, 780], "ifft": [52, 75, 368, 395, 401, 780], "pi": [52, 75, 281, 285, 368, 370, 395, 400, 447, 615, 620], "44509285e": [52, 75, 368, 395], "14423775e": [52, 75, 368, 395], "17j": [52, 75, 368, 395, 400], "11483250e": [52, 75, 368, 395], "16j": [52, 75, 368, 395, 400], "33486982e": [52, 75, 368, 395], "22464680e": [52, 75, 368, 395], "95799250e": [52, 75, 368, 395], "66951701e": [52, 75, 368, 395], "fft2": [52, 368], "vari": [52, 63, 92, 93, 286, 396, 534, 620, 622, 625, 633, 672, 738, 739, 740, 794, 813, 817, 827, 830, 837], "20477401j": [52, 368, 396], "0614962j": [52, 368, 396], "idct": [52, 75, 368], "49862671": [52, 75, 368, 389, 399], "37691498": [52, 75, 368, 389, 399], "00390816": [52, 75, 368, 389, 399], "58938599": [52, 75, 368, 389, 399], "92713165": [52, 75, 368, 389, 399], "078475": [52, 75, 368, 389, 399], "19664812": [52, 75, 368, 389, 399], "95411837": [52, 75, 368, 389, 399], "30636606e": [52, 75, 368, 400], "43029718e": [52, 75, 368, 400], "18j": [52, 75, 368, 395, 400], "53080850e": [52, 75, 368, 400], "58689626e": [52, 75, 368, 400], "24474906e": [52, 75, 368, 400], "91858728e": [52, 75, 368, 400], "01435406e": [52, 75, 368, 400], "ifftn": [52, 75, 368], "24730653": [52, 75, 368, 401], "90832391j": [52, 75, 368, 401], "49495562": [52, 75, 368, 401], "9039565j": [52, 75, 368, 401], "98193269": [52, 75, 368, 401], "49560517j": [52, 75, 368, 401], "93280757": [52, 75, 368, 401], "48075343j": [52, 75, 368, 401], "28526384": [52, 75, 368, 401], "3351205j": [52, 75, 368, 401], "2343787": [52, 75, 368, 401], "83528011j": [52, 75, 368, 401], "18791352": [52, 75, 368, 401], "30690572j": [52, 75, 368, 401], "82115787": [52, 75, 368, 401], "96195183j": [52, 75, 368, 401], "44719226": [52, 75, 368, 401], "72654048j": [52, 75, 368, 401], "51476765": [52, 368, 401], "66160417j": [52, 368, 401], "04319742": [52, 368, 401], "05411636j": [52, 368, 401], "015561": [52, 368, 401], "04216015j": [52, 368, 401], "06310689": [52, 368, 401], "05347854j": [52, 368, 401], "13392983": [52, 368, 401], "16052352j": [52, 368, 401], "08371392": [52, 368, 401], "17252843j": [52, 368, 401], "0031429": [52, 368, 401], "05421245j": [52, 368, 401], "10446617": [52, 368, 401], "17747098j": [52, 368, 401], "05344324": [52, 368, 401], "07972424j": [52, 368, 401], "8344667": [52, 75, 368, 401], "98222595j": [52, 75, 368, 401], "48472244": [52, 75, 368, 401], "30233797j": [52, 75, 368, 401], "recompute_scale_factor": [52, 75, 368, 403, 833], "antialia": [52, 75, 368, 403, 833], "height": [52, 53, 56, 75, 76, 79, 368, 403, 534, 622, 624, 640, 641, 642, 643, 646, 838], "width": [52, 53, 56, 75, 76, 79, 368, 369, 371, 374, 380, 403, 422, 474, 495, 514, 534, 622, 624, 638, 639, 640, 641, 642, 643, 646, 650], "trilinear": [52, 75, 368, 403, 833], "nearest_exact": [52, 75, 368, 403, 833], "tf_area": [52, 75, 368, 403, 833], "mitchellcub": [52, 75, 368, 403, 833], "lanczos3": [52, 75, 368, 403, 833], "lanczos5": [52, 75, 368, 403, 833], "gaussian": [52, 75, 105, 368, 403, 614, 833], "overwrit": [52, 69, 75, 208, 368, 403, 619, 807, 826, 827, 835], "thu": [52, 75, 229, 242, 277, 285, 286, 368, 369, 403, 421, 620, 625, 659, 660, 805, 814, 819, 824, 827, 831], "antialias": [52, 75, 403], "max_pool1d": [52, 75, 368], "dilaton": [52, 75, 404, 405, 406], "max_pool3d": [52, 75, 368], "max_unpool1d": [52, 75, 368], "unpool": [52, 75, 368, 407], "reduce_window": [52, 79, 368], "window_dimens": [52, 79, 368, 410], "window_strid": [52, 79, 368, 410], "base_dil": [52, 79, 368, 410], "window_dil": [52, 79, 368, 410], "trim": [52, 69, 75, 368, 371, 411, 485], "orthonorm": [52, 57, 75, 80, 368, 411, 625, 672, 675], "8660254j": [52, 75, 368, 411], "rfftn": [52, 75, 368], "sliding_window": [52, 75, 368], "window_s": [52, 75, 368, 414], "frame_length": [52, 75, 368, 415], "frame_step": [52, 75, 368, 415], "fft_length": [52, 75, 368, 415], "window_fn": [52, 75, 368, 415], "pad_end": [52, 75, 368, 415], "smallest": [52, 69, 75, 160, 163, 231, 368, 371, 415, 484, 618, 620, 625, 666, 764, 766, 767], "enclos": [52, 75, 368, 415, 857], "window_length": [52, 75, 306, 308, 311, 312, 327, 362, 368, 415], "li": [52, 75, 368, 369, 380, 415, 422, 521, 845], "past": [52, 75, 368, 415, 807, 809, 828, 830, 842, 856], "fft_unique_bin": [52, 75, 368, 415], "complex64": [52, 72, 75, 153, 167, 176, 182, 248, 275, 368, 411, 415, 618, 620, 625, 673, 675, 676, 765, 815, 820], "complex128": [52, 75, 76, 153, 154, 167, 176, 182, 368, 415, 560, 618, 622, 625, 660, 661, 666, 682, 764, 765, 803, 815, 820], "compon": [52, 75, 137, 138, 216, 217, 218, 221, 224, 233, 235, 236, 238, 240, 268, 270, 271, 278, 281, 282, 285, 286, 317, 321, 332, 362, 365, 368, 369, 374, 415, 426, 435, 495, 617, 620, 632, 735, 800, 829, 835, 846, 852, 857, 859], "linear_algebra": [52, 57, 75, 80, 625, 831], "_arraywithlinearalgebraexperiment": [52, 97], "adjoint": [52, 57, 75, 80, 369, 436, 625, 663, 674, 675, 764], "batched_out": [52, 75, 369], "j1": [52, 75, 369, 417], "jn": [52, 75, 369, 417], "k1": [52, 75, 369, 417], "km": [52, 75, 369, 417], "outer": [52, 57, 75, 80, 92, 369, 417, 625, 628, 703, 704, 705, 794, 805], "30000001": [52, 75, 369, 417, 534, 622, 633, 738], "40000001": [52, 56, 68, 75, 97, 98, 107, 110, 291, 360, 369, 417, 614, 624, 633, 653, 738], "60000002": [52, 75, 88, 98, 369, 374, 417, 494, 496, 749], "80000001": [52, 75, 369, 374, 417, 494, 496], "60000001": [52, 75, 369, 417], "90000004": [52, 75, 369, 417, 635, 749], "20000002": [52, 75, 369, 417], "20000005": [52, 54, 75, 291, 298, 301, 302, 360, 369, 417, 603], "00000012": [52, 75, 369, 417], "49999994": [52, 75, 369, 417], "00000006": [52, 75, 369, 417], "60000014": [52, 75, 369, 417], "19999993": [52, 75, 369, 417], "80000007": [52, 75, 369, 417], "20000017": [52, 75, 369, 417], "89999992": [52, 75, 369, 417], "60000008": [52, 75, 369, 417], "80000019": [52, 75, 346, 365, 369, 417], "4000001": [52, 75, 79, 369, 417, 624, 647, 653], "cond": [52, 75, 118, 369, 616, 841], "933034373659268": [52, 418], "diagflat": [52, 75, 369, 428, 431], "offset": [52, 57, 60, 71, 75, 80, 83, 129, 369, 374, 419, 490, 491, 492, 617, 625, 630, 658, 679, 725, 771], "padding_valu": [52, 75, 369, 419], "right_left": [52, 75, 369, 419], "num_row": [52, 75, 369, 419], "num_col": [52, 75, 369, 419], "dot": [52, 56, 75, 79, 92, 369, 370, 433, 442, 624, 625, 650, 653, 681, 794, 800, 806, 814], "eig": [52, 57, 75, 369, 625, 660, 661], "37228132": [52, 75, 369, 421, 423, 659], "82456484": [52, 421, 659], "41597356": [52, 421, 659], "56576746": [52, 421, 659], "90937671": [52, 421, 659], "eigh_tridiagon": [52, 75, 369], "eigvals_onli": [52, 75, 369, 422], "select_rang": [52, 75, 369, 422], "tol": [52, 75, 96, 369, 422, 435, 441], "eigenvalu": [52, 57, 75, 80, 92, 93, 369, 421, 422, 423, 625, 659, 660, 661, 668], "eigenvector": [52, 75, 369, 421, 422, 625, 659, 660], "interv": [52, 61, 66, 75, 84, 89, 121, 132, 133, 140, 369, 380, 422, 514, 617, 625, 627, 631, 636, 655, 681, 687, 690, 698, 727, 729, 755, 756], "togeth": [52, 69, 75, 328, 344, 365, 369, 422, 785, 800, 810, 813, 815, 826, 827, 830, 831, 833, 839, 840, 841, 846, 854, 856, 857, 862], "cluster": [52, 75, 369, 422, 841, 856], "converg": [52, 75, 369, 422, 847], "_2": [52, 75, 369, 422], "eig_val": [52, 75, 369, 422], "decreas": [52, 75, 369, 422, 766], "eig_vector": [52, 75, 369, 422], "38196": [52, 422], "61803": [52, 422], "eigval": [52, 75, 369], "general_inner_product": [52, 80, 369], "n_mode": [52, 80, 369, 424], "tradit": [52, 80, 369, 424], "inner": [52, 57, 71, 80, 101, 136, 369, 421, 424, 617, 625, 628, 659, 660, 665, 703, 704, 705, 794, 805, 826], "higher_order_mo": [52, 75, 369], "n_featur": [52, 75, 369, 425], "d1": [52, 75, 369, 425], "dn": [52, 75, 369, 425], "initialize_tuck": [52, 75, 369], "svd": [52, 57, 75, 80, 95, 369, 426, 430, 435, 437, 438, 439, 441, 625, 676], "truncated_svd": [52, 75, 369, 426, 435, 438, 441], "non_neg": [52, 75, 321, 362, 369, 426], "mask": [52, 56, 75, 79, 92, 368, 369, 371, 413, 426, 427, 435, 441, 481, 544, 622, 624, 647, 650, 653, 833], "svd_mask_repeat": [52, 75, 369, 426, 435, 441], "tuckertensor": [52, 75, 96, 321, 362, 369, 426, 435, 441], "scheme": [52, 75, 369, 426, 435, 809, 839, 856], "tucker": [52, 75, 321, 362, 369, 426, 435], "decomposit": [52, 57, 75, 80, 92, 93, 95, 317, 318, 319, 320, 321, 362, 369, 426, 435, 438, 440, 441, 625, 654, 660, 664, 672, 675, 805, 863], "miss": [52, 75, 369, 371, 426, 435, 441, 481, 784, 805, 806, 810, 813, 814, 817, 827, 830, 833], "everywher": [52, 75, 369, 426, 435, 441], "imput": [52, 75, 369, 426, 435, 441], "kron": [52, 75, 369, 431, 863], "make_svd_non_neg": [52, 75, 369, 439], "nntype": [52, 75, 369, 430], "nndsvd": [52, 75, 369, 430], "singular": [52, 57, 75, 80, 369, 426, 430, 437, 439, 625, 666, 668, 671, 675, 676, 764, 766, 815], "nndsvda": [52, 75, 369, 430], "boutsidi": [52, 75, 369, 430], "gallopoulo": [52, 75, 369, 430], "pattern": [52, 53, 75, 76, 369, 430, 534, 535, 536, 622, 815, 818, 829, 847], "recognit": [52, 75, 369, 430], "1350": [52, 75, 369, 430], "1362": [52, 75, 369, 430], "2008": [52, 75, 369, 430, 856], "matrix_exp": [52, 75, 369], "7183": [52, 75, 369, 431], "3891": [52, 75, 369, 431], "mode_dot": [52, 75, 91, 92, 96, 369], "matrix_or_vector": [52, 75, 92, 96, 369, 432], "i_1": [52, 75, 92, 93, 369, 432], "i_k": [52, 75, 92, 369, 432], "i_n": [52, 75, 92, 369, 432], "i_": [52, 75, 92, 369, 380, 432, 514], "multi_dot": [52, 75, 369], "148": [52, 74, 75, 238, 369, 433], "multi_mode_dot": [52, 75, 369], "mat_or_vec_list": [52, 75, 369, 434], "times_0": [52, 369, 434], "vec": [52, 369, 434], "times_1": [52, 369, 434], "cdot": [52, 268, 369, 434, 620], "times_n": [52, 369, 434], "partial_tuck": [52, 75, 369], "n_iter_max": [52, 75, 369, 435, 441], "verbos": [52, 75, 369, 435, 438, 441, 830, 835], "return_error": [52, 75, 369, 435, 441], "variat": [52, 75, 369, 435, 441, 817, 827, 830], "reconstruct": [52, 57, 63, 75, 86, 95, 369, 371, 435, 441, 487, 625, 633, 675, 737, 739, 828], "return_erro": [52, 369, 435, 441], "svd_flip": [52, 75, 369], "u_based_decis": [52, 75, 369, 437], "basi": [52, 75, 369, 437, 807, 809, 838], "flip": [52, 59, 75, 82, 92, 226, 369, 371, 437, 465, 466, 620, 627, 826, 837, 838, 840], "decis": [52, 75, 369, 437, 800, 809, 815, 833, 835, 837, 856], "u_adjust": [52, 75, 369, 437], "v_adjust": [52, 75, 369, 437], "tensor_train": [52, 75, 369], "tt": [52, 75, 320, 362, 369, 438, 440], "kth": [52, 369, 438], "tttensor": [52, 95, 320, 362, 369, 438], "compute_uv": [52, 57, 75, 80, 369, 439, 625, 675], "n_eigenvec": [52, 75, 369, 439], "returnedv": [52, 439], "vh": [52, 57, 75, 80, 369, 439, 625, 675], "eigen": [52, 75, 369, 439], "namedtupl": [52, 57, 63, 75, 80, 86, 369, 371, 421, 439, 487, 625, 633, 659, 660, 672, 673, 675, 737, 738, 739], "tt_matrix_to_tensor": [52, 75, 369], "known": [52, 75, 279, 369, 438, 440, 620, 779, 809, 814, 815, 827, 830], "rank_k": [52, 75, 369, 440], "left_dim_k": [52, 75, 369, 440], "right_dim_k": [52, 75, 369, 440], "rank_": [52, 75, 369, 440], "49671414": [52, 75, 369, 440, 631, 728], "1382643": [52, 75, 369, 440, 631, 728], "64768857": [52, 75, 369, 440, 631, 728], "5230298": [52, 75, 369, 440, 631, 728], "23415337": [52, 75, 369, 440, 631, 728], "23413695": [52, 75, 369, 440, 631, 728], "57921278": [52, 75, 369, 440], "76743472": [52, 75, 369, 440], "1163073": [52, 75, 369, 440], "11629914": [52, 75, 369, 440], "03237505": [52, 75, 369, 440], "03237278": [52, 75, 369, 440], "78441733": [52, 75, 369, 440], "38119566": [52, 75, 369, 440], "21834874": [52, 75, 369, 440], "10610882": [52, 75, 369, 440], "15165846": [52, 75, 369, 440], "15164782": [52, 75, 369, 440], "35662258": [52, 75, 369, 440], "35659757": [52, 75, 369, 440], "02283812": [52, 75, 369, 440], "49705869": [52, 75, 369, 440], "40518808": [52, 75, 369, 440], "16882598": [52, 75, 369, 440], "fixed_factor": [52, 75, 369, 441], "tl": [52, 75, 369, 441], "kolda": [52, 75, 369, 441], "bader": [52, 75, 369, 441], "siam": [52, 75, 369, 438, 441], "review": [52, 75, 369, 441, 802, 805, 807, 812, 814, 817, 827, 831], "vol": [52, 75, 369, 441], "pp": [52, 75, 369, 441], "455": [52, 75, 369, 441], "2009": [52, 75, 369, 441], "_arraywithlossesexperiment": [52, 97], "hinge_embedding_loss": [52, 75, 370], "margin": [52, 75, 370, 442, 449, 827], "measur": [52, 370, 442, 624, 650, 780], "semi": [52, 370, 442], "supervis": [52, 370, 442], "l_n": [52, 370, 442], "x_n": [52, 370, 442], "y_n": [52, 370, 442], "ell": [52, 370, 442], "operatornam": [52, 279, 281, 370, 442, 620, 625, 660], "l_1": [52, 370, 442], "Its": [52, 370, 442, 856], "hyperparamet": [52, 75, 370, 442], "aggreg": [52, 75, 370, 442, 633, 737, 814], "unreduc": [52, 75, 370, 442], "hing": [52, 75, 370, 442, 449], "input_tensor": [52, 75, 369, 370, 438, 442, 447, 827], "target_tensor": [52, 370, 442, 447], "huber_loss": [52, 75, 370], "delta": [52, 54, 75, 77, 370, 443, 603, 623], "transit": [52, 75, 370, 443, 856], "huber": [52, 75, 370, 443], "kl_div": [52, 75, 370], "log_target": [52, 75, 370, 444], "contai": [52, 444], "batchmean": [52, 370, 444], "kullback": [52, 75, 370, 444], "leibler": [52, 75, 370, 444], "0916": [52, 444], "l1_loss": [52, 75, 370, 446], "l1": [52, 57, 75, 80, 370, 374, 443, 445, 446, 448, 493, 625, 682, 813, 838], "targetict": [52, 75, 370, 445, 446, 448, 449], "20000000000000004": [52, 445], "log_poisson_loss": [52, 75, 370], "compute_full_loss": [52, 75, 370, 446, 781], "favor": [52, 75, 370, 446], "likelihood": [52, 75, 370, 446, 447], "28402555": [52, 370, 446], "03402555": [52, 370, 446], "1573164": [52, 370, 446], "poisson_nll_loss": [52, 75, 370], "log_input": [52, 75, 370, 447], "poisson": [52, 75, 370, 375, 446, 447], "assumpt": [52, 370, 446, 447], "minu": [52, 370, 446, 447], "omiss": [52, 370, 447], "stirl": [52, 75, 370, 446, 447], "describ": [52, 65, 75, 93, 218, 235, 236, 268, 271, 273, 370, 375, 378, 447, 501, 504, 620, 624, 635, 650, 747, 751, 753, 802, 805, 806, 807, 812, 814, 826, 827, 830, 835, 840, 856], "prevent": [52, 54, 75, 77, 370, 447, 546, 603, 604, 609, 622, 623, 624, 635, 647, 753, 779, 784, 805, 807, 814, 815, 819, 826, 827, 831], "1978": [52, 447], "smooth_l1_loss": [52, 75, 370], "smooth": [52, 58, 75, 81, 370, 443, 448, 626, 684, 685, 686, 825], "8125": [52, 448], "soft_margin_loss": [52, 75, 370], "soft": [52, 75, 301, 370, 371, 449, 481, 816], "35667497": [52, 449, 626, 685], "22314353": [52, 449], "60943791": [52, 449], "manipul": [52, 75, 826, 827, 831, 833, 835, 840, 845, 856], "_arraywithmanipulationexperiment": [52, 97], "as_strid": [52, 75, 371], "nativeshap": [52, 56, 59, 61, 75, 82, 84, 122, 123, 125, 130, 137, 143, 371, 375, 450, 462, 467, 475, 478, 497, 498, 499, 500, 501, 566, 579, 584, 586, 617, 622, 624, 627, 631, 637, 639, 641, 643, 645, 694, 727, 728, 729, 822, 824], "byte": [52, 53, 71, 75, 76, 97, 129, 371, 450, 560, 617, 622, 861, 862], "associative_scan": [52, 75, 371], "revers": [52, 53, 57, 65, 75, 80, 88, 97, 98, 359, 367, 368, 369, 371, 380, 413, 429, 451, 465, 466, 512, 513, 533, 622, 625, 627, 635, 680, 691, 745, 746, 805, 813, 814, 815, 817, 818, 826, 827, 833, 840, 841], "scan": [52, 75, 371, 451, 841], "atleast_1d": [52, 75, 371], "ari": [52, 75, 371, 452, 453, 454, 460, 469, 488], "a1": [52, 76, 371, 452, 453, 454, 458, 526], "a2": [52, 76, 371, 452, 453, 454, 458, 526], "atleast_2d": [52, 75, 371], "atleast_3d": [52, 75, 371], "column_stack": [52, 75, 371], "concat_from_sequ": [52, 75, 371], "input_sequ": [52, 75, 371, 459], "new_axi": [52, 75, 371, 459, 840], "dsplit": [52, 75, 371], "indices_or_sect": [52, 75, 371, 460, 469, 488], "3rd": [52, 75, 371, 460], "dstack": [52, 75, 371], "fill_diagon": [52, 75, 371], "fill_diag": [52, 463], "fortran": [52, 59, 75, 82, 371, 464, 627, 694, 856, 860], "layout": [52, 59, 75, 82, 371, 464, 627, 694, 811, 826, 827, 833], "fliplr": [52, 75, 371, 826], "diag": [52, 57, 75, 80, 93, 371, 465, 466, 625, 660, 835], "flipud": [52, 75, 371, 826], "fold": [52, 75, 371, 475, 476, 814], "unfold": [52, 75, 92, 93, 95, 369, 371, 426, 467, 475, 477], "folded_tensor": [52, 371, 467], "heavisid": [52, 75, 371], "5000": [52, 371, 468, 625, 663, 794], "hsplit": [52, 75, 371], "horizont": [52, 75, 371, 458, 469, 534, 622], "hstack": [52, 75, 371, 458], "i0": [52, 75, 371, 380, 514], "bessel": [52, 65, 75, 88, 311, 362, 371, 471, 635, 752, 754], "kind": [52, 65, 75, 160, 163, 164, 380, 471, 512, 513, 518, 618, 635, 745, 746, 751, 753, 764, 765, 804, 827, 830, 833, 835, 841], "26606588": [52, 75, 371, 471], "2795853": [52, 75, 371, 471], "88079259": [52, 75, 371, 471], "row_mod": [52, 75, 371, 472], "column_mod": [52, 75, 371, 472], "ascend": [52, 64, 75, 87, 371, 378, 472, 504, 634, 741, 743], "prod": [52, 53, 65, 76, 88, 369, 371, 427, 429, 472, 520, 535, 622, 635, 764, 794, 815, 817, 835], "moveaxi": [52, 75, 371], "destin": [52, 75, 371, 473], "unstack": [52, 59, 69, 82, 473, 627, 813, 835, 838, 863], "reorder": [52, 59, 75, 82, 371, 473, 534, 622, 627, 691, 829], "stat_length": [52, 75, 371, 474], "constant_valu": [52, 75, 371, 474], "end_valu": [52, 75, 371, 474], "reflect_typ": [52, 75, 371, 474], "partial_fold": [52, 75, 371], "skip_begin": [52, 75, 371, 475, 476, 477, 478], "untouch": [52, 75, 371, 475, 476, 477, 478], "partial_tensor_to_vec": [52, 75, 371], "skip_end": [52, 75, 371, 476, 477], "vectoris": [52, 75, 92, 371, 476, 478], "partial_unfold": [52, 75, 371], "ravel_tensor": [52, 75, 371, 477], "n_1": [52, 75, 371, 477], "n_2": [52, 75, 371, 477], "n_i": [52, 75, 369, 371, 427, 477], "partial_vec_to_tensor": [52, 75, 371], "put_along_axi": [52, 75, 371], "rot90": [52, 75, 371, 826], "rotat": [52, 75, 371, 480], "soft_threshold": [52, 75, 371], "behav": [52, 75, 329, 330, 365, 369, 371, 421, 482, 625, 659, 809, 819, 824, 826, 827, 828, 837, 857], "invalid": [52, 66, 75, 89, 371, 482, 625, 627, 636, 681, 690, 755, 756, 764, 806, 815], "slice": [52, 65, 69, 75, 76, 88, 93, 142, 322, 362, 371, 457, 479, 482, 483, 541, 542, 544, 570, 617, 622, 629, 635, 715, 750, 856], "inexact": [52, 75, 339, 365, 371, 482], "largest": [52, 69, 75, 160, 163, 369, 371, 437, 482, 484, 618, 625, 666, 675], "take_along_axi": [52, 75, 371], "arr": [52, 53, 72, 75, 168, 371, 457, 479, 483, 566, 618, 815, 816], "top_k": [52, 75, 371], "sort": [52, 63, 69, 75, 86, 98, 287, 369, 371, 380, 421, 484, 504, 518, 620, 625, 633, 659, 660, 675, 676, 737, 741, 742, 743, 766, 800, 804, 814, 829, 831], "trim_zero": [52, 75, 371], "fb": [52, 75, 371, 485], "front": [52, 75, 371, 485, 827, 834, 835, 838, 845, 854, 856], "unfolded_tensor": [52, 371, 486], "unique_consecut": [52, 75, 371], "vsplit": [52, 75, 371], "vertic": [52, 75, 371, 488, 489, 534, 622, 807], "_arraywithnormsexperiment": [52, 97], "varianc": [52, 65, 75, 88, 374, 490, 492, 635, 754, 779, 783], "nsc": [52, 75, 374, 490, 491, 492, 783], "braodcast": [52, 75, 374, 490], "running_mean": [52, 75, 374, 490, 492, 783], "running_var": [52, 75, 374, 490, 492, 783], "nc": [52, 75, 374, 490, 491, 492, 783], "group_norm": [52, 75, 374], "num_group": [52, 75, 374, 491], "group": [52, 75, 371, 374, 487, 491, 624, 629, 637, 644, 645, 708, 809, 813, 815, 823, 827, 828, 852, 855, 861], "instance_norm": [52, 75, 374], "l1_normal": [52, 75, 374], "33333334": [52, 374, 493, 496, 605, 623, 624, 625, 646, 682], "33333337": [52, 132, 374, 493, 605, 617, 623], "28571439": [52, 374, 493], "l2_normal": [52, 75, 374, 496], "l2": [52, 57, 80, 91, 92, 374, 494, 496, 625, 682, 780, 813], "44721359": [52, 75, 374, 494, 496], "89442718": [52, 75, 374, 494, 496], "lp_normal": [52, 75, 374], "lp": [52, 374, 496], "_arraywithrandomexperiment": [52, 97], "bernoulli": [52, 75, 368, 375, 391, 392, 393], "event": [52, 75, 375, 497, 830], "entri": [52, 59, 69, 75, 82, 86, 93, 132, 369, 371, 375, 436, 463, 465, 466, 497, 617, 627, 629, 696, 719, 737, 806, 814, 830, 856], "parameter": [52, 61, 75, 84, 375, 497, 498, 500, 501, 631, 726, 728, 729], "odd": [52, 75, 273, 371, 375, 474, 497, 620, 794, 804, 809], "drawn": [52, 61, 75, 84, 375, 497, 498, 499, 500, 501, 631, 726, 727, 728, 729, 764, 765, 766, 779, 830], "dirichlet": [52, 75, 375], "10598304": [52, 375, 499], "21537054": [52, 375, 499], "67864642": [52, 375, 499], "48006698": [52, 375, 499], "07472073": [52, 375, 499], "44521229": [52, 375, 499], "55479872": [52, 375, 499], "05426367": [52, 375, 499], "39093761": [52, 375, 499], "19531053": [52, 375, 499], "51675832": [52, 375, 499], "28793114": [52, 375, 499], "12315625": [52, 375, 499], "29823365": [52, 375, 499], "5786101": [52, 375, 499], "15564976": [52, 375, 499], "50542368": [52, 375, 499], "33892656": [52, 375, 499], "1325352": [52, 375, 499], "44439589": [52, 375, 499], "42306891": [52, 375, 499], "gamma": [52, 60, 75, 83, 336, 347, 365, 375, 380, 515, 630, 725], "rate": [52, 54, 75, 77, 368, 375, 409, 501, 604, 607, 609, 610, 611, 623, 628, 703, 704, 705, 784, 814], "lam": [52, 75, 375, 501], "_arraywithsearchingexperiment": [52, 97], "unravel_index": [52, 75, 376], "unravel": [52, 75, 376, 502], "_arraywithsetexperiment": [52, 97], "_arraywithsortingexperiment": [52, 97], "lexsort": [52, 75, 378], "indirectli": [52, 75, 378, 504], "statist": [52, 75, 90, 371, 474, 783, 798, 805, 815, 830, 831, 856], "_arraywithstatisticalexperiment": [52, 97], "bincount": [52, 75, 380], "minlength": [52, 75, 380, 509], "corrcoef": [52, 75, 380], "rowvar": [52, 75, 380, 510, 511], "relationship": [52, 75, 510, 779, 829], "cov": [52, 75, 380], "ddof": [52, 75, 380, 511], "fweight": [52, 75, 380, 511], "aweight": [52, 75, 380, 511], "overridden": [52, 75, 380, 511, 784, 810], "unbias": [52, 65, 75, 88, 380, 511, 635, 754], "typic": [52, 75, 328, 344, 365, 380, 511, 634, 743, 780, 809, 823, 855, 863], "assign": [52, 75, 92, 380, 511, 805, 807, 811, 815, 826, 829, 837], "covari": [52, 75, 380, 511], "cummax": [52, 75, 380], "exclus": [52, 53, 65, 69, 75, 76, 88, 121, 369, 380, 435, 512, 513, 553, 554, 557, 617, 622, 631, 635, 727, 745, 746, 813, 815, 823, 840, 860, 862], "cumul": [52, 65, 75, 88, 380, 512, 513, 635, 745, 746], "uint64": [52, 65, 157, 162, 164, 165, 175, 177, 180, 380, 512, 513, 618, 635, 745, 746, 751, 753, 764, 765, 815, 830, 835], "uint16": [52, 65, 152, 157, 162, 163, 172, 380, 512, 513, 618, 635, 745, 746, 751, 753, 764, 765, 815, 827, 830, 835], "bit": [52, 65, 159, 160, 163, 226, 227, 229, 380, 512, 513, 618, 620, 635, 745, 746, 751, 753, 800, 804, 805, 806, 813, 814, 815, 817, 823, 835, 837, 862], "uint32": [52, 65, 157, 162, 163, 164, 186, 380, 512, 513, 618, 635, 745, 746, 751, 753, 764, 765, 815, 830, 835], "cummin": [52, 75, 380], "histogram": [52, 75, 380], "extend_lower_interv": [52, 75, 380, 514], "extend_upper_interv": [52, 75, 380, 514], "densiti": [52, 75, 380, 514], "monoton": [52, 75, 380, 514], "rightmost": [52, 75, 380, 514], "c1": [52, 75, 380, 514, 813], "ff": [52, 75, 380, 514], "c_": [52, 75, 93, 380, 514], "igamma": [52, 75, 380], "incomplet": [52, 75, 380, 515, 807], "3614": [52, 75, 380, 515], "2085": [52, 75, 380, 515], "median": [52, 75, 371, 380, 474, 518], "nanmean": [52, 75, 380], "6666666666666665": [52, 75, 380, 517], "nanmedian": [52, 75, 380], "overwrite_input": [52, 75, 380, 518], "treat": [52, 69, 75, 98, 273, 349, 365, 371, 374, 380, 483, 495, 518, 520, 620, 761, 825, 830, 836, 840], "undefin": [52, 75, 371, 380, 381, 474, 518, 522, 815, 819, 825], "nanmin": [52, 75, 380], "nanprod": [52, 75, 380], "Not": [52, 75, 349, 365, 369, 380, 423, 520, 615, 811, 819, 828, 838, 839, 841], "quantil": [52, 75, 380], "inclus": [52, 75, 121, 380, 521, 617, 631, 727, 801, 811, 826, 833], "midpoint": [52, 75, 380, 521], "surround": [52, 75, 380, 521, 833], "whichev": [52, 75, 380, 521], "_arraywithutilityexperiment": [52, 97], "optional_get_el": [52, 75, 381], "empti": [52, 53, 65, 69, 76, 88, 121, 371, 381, 474, 522, 529, 566, 617, 622, 625, 629, 635, 636, 679, 682, 720, 750, 751, 753, 755, 756, 805, 806, 810, 812, 815, 816, 826], "_arraywithgener": [53, 97], "all_equ": [53, 76, 622], "equality_matrix": [53, 76, 523, 622], "array_equ": [53, 76, 622], "assert_supports_inplac": [53, 76, 622], "ivybackendexcept": [53, 76, 527, 551, 622, 795, 810, 816, 819, 820], "clip_matrix_norm": [53, 76, 622], "894": [53, 76, 529, 530, 622, 630, 725], "clip_vector_norm": [53, 76, 622], "default_v": [53, 533, 622], "catch_except": [53, 533, 622], "rev": [53, 533, 622], "with_cal": [53, 533, 622], "catch": [53, 533, 622, 824, 830], "einops_rearrang": [53, 76, 622], "axes_length": [53, 76, 534, 535, 536, 622], "arrang": [53, 534, 622], "rearrang": [53, 76, 534, 536, 622, 829], "einops_reduc": [53, 76, 622, 815], "einops_repeat": [53, 76, 622], "fourier_encod": [53, 76, 622], "max_freq": [53, 76, 538, 622], "oppos": [53, 76, 538, 622, 815], "geometr": [53, 76, 538, 622, 625, 680], "0000000e": [53, 76, 538, 622], "2246468e": [53, 76, 538, 622], "4492936e": [53, 538, 622], "6739404e": [53, 76, 538, 622], "batch_dim": [53, 76, 541, 542, 622, 786], "gather_nd": [53, 76, 622], "get_num_dim": [53, 76, 622], "as_arrai": [53, 76, 545, 579, 622, 786], "has_nan": [53, 76, 622], "include_inf": [53, 76, 547, 601, 622], "inplace_decr": [53, 76, 622], "val": [53, 69, 74, 76, 248, 371, 463, 549, 550, 551, 570, 571, 572, 620, 622, 815, 826, 837], "decrement": [53, 76, 549, 622], "inplace_incr": [53, 76, 622], "increment": [53, 76, 550, 622, 807, 856], "inplace_upd": [53, 76, 569, 622, 777, 826], "ensure_in_backend": [53, 76, 551, 622, 826], "keep_input_dtyp": [53, 76, 551, 622, 826], "is_arrai": [53, 76, 622, 826, 827], "is_ivy_arrai": [53, 76, 622, 826, 837], "is_ivy_contain": [53, 622], "is_native_arrai": [53, 76, 171, 554, 618, 622, 837], "isin": [53, 76, 622], "test_el": [53, 76, 558, 622], "assume_uniqu": [53, 76, 558, 622], "invert": [53, 76, 226, 558, 620, 622, 625, 667], "scatter_flat": [53, 76, 622], "occupi": [53, 160, 163, 565, 566, 618, 622], "scatter_nd": [53, 76, 622, 833, 837], "stable_divid": [53, 76, 622, 823], "denomin": [53, 60, 76, 83, 572, 580, 594, 622, 630, 725, 783, 823, 832, 841, 853], "min_denomin": [53, 76, 572, 580, 594, 622, 832], "_min_denomin": [53, 580, 622], "stable_pow": [53, 76, 622], "min_bas": [53, 76, 571, 581, 593, 622, 783, 832], "stabl": [53, 64, 76, 87, 142, 322, 329, 330, 362, 365, 378, 504, 571, 572, 580, 581, 593, 594, 617, 622, 634, 741, 744, 766, 806, 811, 815, 827, 832, 835, 841], "00004": [53, 76, 581, 622], "00008": [53, 76, 581, 622], "00004000e": [53, 581], "56002560e": [53, 581], "60001200e": [53, 581], "09602048e": [53, 581], "supports_inplace_upd": [53, 76, 622], "to_fil": 53, "fid": 53, "sep": 53, "format_": 53, "recov": [53, 819, 827], "to_scalar": [53, 76, 622], "value_is_nan": [53, 76, 622], "_arraywithgradi": [54, 97], "adam_step": [54, 77, 623], "mw": [54, 77, 603, 604, 623, 839], "vw": [54, 77, 603, 604, 623, 839], "beta1": [54, 77, 525, 603, 604, 609, 622, 623, 784, 839], "beta2": [54, 77, 525, 603, 604, 609, 622, 623, 784, 839], "epsilon": [54, 57, 58, 77, 80, 81, 525, 603, 604, 609, 622, 623, 625, 626, 668, 671, 684, 685, 686, 776, 781, 783, 784, 813, 823, 826, 839], "dc": [54, 77, 603, 604, 607, 609, 610, 611, 623], "dw": [54, 77, 603, 604, 607, 609, 610, 611, 623], "forget": [54, 77, 603, 604, 609, 623, 784, 800, 815], "dcdw": [54, 77, 603, 604, 607, 609, 610, 623], "adam_step_delta": [54, 77, 603, 623], "2020105": [54, 603, 623], "22187898": [54, 603, 623], "24144873": [54, 603, 623], "10000002": [54, 88, 291, 360, 603, 749], "00300002": [54, 603], "00800002": [54, 603], "adam_upd": [54, 77, 623, 839], "mw_tm1": [54, 77, 604, 609, 623], "vw_tm1": [54, 77, 604, 609, 623], "stop_gradi": [54, 77, 208, 525, 604, 607, 609, 610, 611, 619, 622, 623, 628, 703, 704, 705, 784, 839], "ws_new": [54, 77, 604, 609, 610, 611, 623], "updated_weight": [54, 77, 604, 623], "92558753": [54, 604], "92558873": [54, 604, 623], "92558718": [54, 604, 623], "00000063e": [54, 77, 604, 623], "00000016e": [54, 77, 604, 623], "00000086e": [54, 77, 604, 623], "gradient_descent_upd": [54, 77, 623, 628, 703, 704, 705], "descent": [54, 77, 607, 623, 784, 839, 856], "new_weight": [54, 77, 607, 609, 610, 623, 838], "lamb_upd": [54, 77, 623], "max_trust_ratio": [54, 77, 609, 623, 784], "decay_lambda": [54, 77, 609, 610, 623, 784], "trust": [54, 77, 609, 623, 784], "ratio": [54, 77, 609, 623, 784], "decai": [54, 77, 609, 610, 623, 784], "lamb": [54, 77, 609, 623, 784, 839], "784": [54, 609, 623], "lars_upd": [54, 77, 623], "lar": [54, 77, 610, 623, 784, 839], "34077978": [54, 610, 623], "78025991": [54, 610, 623], "56051969": [54, 610, 623], "78026009": [54, 610, 623], "56051981": [54, 610, 623], "12103939": [54, 610, 623], "optimizer_upd": [54, 77, 623], "effective_grad": [54, 77, 611, 623], "3e": [54, 77, 611, 623], "preserve_typ": [54, 77, 612, 623], "_arraywithimag": [55, 97], "_arraywithlay": [56, 97], "conv1d": [56, 79, 624, 780], "filter_format": [56, 79, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645], "channel_last": [56, 79, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645, 764], "x_dilat": [56, 79, 624, 637, 638, 640, 641, 642, 644], "d_out": [56, 79, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645], "channel_first": [56, 79, 624, 637, 638, 639, 640, 641, 642, 643, 644, 645], "wio": [56, 624, 637, 638, 639, 644], "conv1d_transpos": [56, 79, 624], "output_shap": [56, 79, 624, 637, 639, 641, 643, 645, 780], "iow": [56, 79, 624, 639], "woi": [56, 79, 624, 639], "fh": [56, 79, 624, 629, 637, 640, 641, 642, 643, 644, 645, 646, 718], "hwio": [56, 624, 637, 638, 640, 644], "conv2d_transpos": [56, 79, 624], "iohw": [56, 79, 624, 641], "hwoi": [56, 79, 624, 641], "conv3d": [56, 79, 624, 643, 780], "fd": [56, 79, 624, 637, 642, 643, 644, 645], "conv3d_transpos": [56, 79, 624, 645], "iodhw": [56, 79, 624, 643, 645], "dhwoi": [56, 79, 624, 643, 645], "depthwise_conv2d": [56, 79, 624], "randint": [56, 61, 63, 79, 84, 631, 633, 646, 649, 737, 815, 849], "noise_shap": [56, 79, 624, 647], "42857146": [56, 624, 647], "85714293": [56, 624, 647], "28571415": [56, 79, 624, 647], "71428585": [56, 79, 624, 647], "14285755": [56, 79, 624, 647], "5714283": [56, 624, 647], "4285717": [56, 79, 624, 647], "8571434": [56, 79, 624, 647], "2857151": [56, 624, 647], "dropout1d": [56, 79, 368], "droput1d": [56, 391, 392], "dropout2d": [56, 79, 368], "dropout3d": [56, 79, 368], "droput3d": [56, 393], "outer_batch_shap": [56, 79, 624, 648], "inner_batch_shap": [56, 79, 624, 648], "lstm_updat": [56, 79, 624, 835], "init_h": [56, 79, 624, 649, 835], "init_c": [56, 79, 624, 649, 835], "recurrent_kernel": [56, 79, 624, 649, 835], "recurrent_bia": [56, 79, 624, 649, 835], "hidden": [56, 79, 624, 649, 780, 812, 819, 835, 839], "recurr": [56, 75, 79, 368, 413, 624, 649, 835, 856, 860], "timestep": [56, 75, 79, 368, 413, 624, 649, 650, 780, 835], "h_i": [56, 79, 649], "c_i": [56, 79, 649], "rc": [56, 79, 649], "multi_head_attent": [56, 79, 624, 826], "num_head": [56, 79, 624, 650, 780], "in_proj_weight": [56, 79, 624, 650], "q_proj_weight": [56, 79, 624, 650], "k_proj_weight": [56, 79, 624, 650], "v_proj_weight": [56, 79, 624, 650], "out_proj_weight": [56, 79, 624, 650], "in_proj_bia": [56, 79, 624, 650], "out_proj_bia": [56, 79, 624, 650], "is_caus": [56, 79, 624, 650, 653], "key_padding_mask": [56, 79, 624, 650], "bias_k": [56, 79, 624, 650], "bias_v": [56, 79, 624, 650], "static_k": [56, 79, 624, 650], "static_v": [56, 79, 624, 650], "add_zero_attn": [56, 79, 624, 650], "return_attention_weight": [56, 79, 624, 650], "average_attention_weight": [56, 79, 624, 650], "scaled_dot_product_attent": [56, 79, 624], "dropout_p": [56, 79, 624, 653], "num_queri": [56, 79, 624, 653], "feat_dim": [56, 79, 624, 653], "num_kei": [56, 79, 624, 653], "causal": [56, 79, 624, 650, 653], "attent": [56, 79, 624, 650, 653, 780, 807, 810, 846], "29999995": [56, 291, 292, 301, 360, 624, 633, 653, 738], "19994521": [56, 624, 653], "09994531": [56, 624, 653], "30000019": [56, 371, 458, 624, 653], "_arraywithlinearalgebra": [57, 97], "choleski": [57, 80, 625, 826], "625": [57, 75, 341, 625, 654], "vif": [57, 80, 655], "det": [57, 80, 625, 673, 814], "axis1": [57, 59, 80, 82, 625, 627, 658, 679, 699], "axis2": [57, 80, 625, 658, 679], "eigh": [57, 80, 369, 421, 625, 659], "uplo": [57, 80, 625, 660, 661], "eigvalsh": [57, 80, 625], "array_lik": [57, 80, 368, 370, 371, 412, 443, 444, 448, 449, 479, 625, 662, 670, 794], "105": [57, 79, 624, 625, 626, 647, 648, 662, 670, 684], "149": [57, 625, 662], "143": [57, 74, 98, 285, 620, 625, 662, 817], "203": [57, 74, 224, 625, 630, 662, 725], "233": [57, 625, 662], "inv": [57, 80, 625], "transpose_a": [57, 80, 625, 665], "transpose_b": [57, 80, 625, 665], "adjoint_a": [57, 80, 625, 665], "adjoint_b": [57, 80, 625, 665], "matrix_norm": [57, 80, 625], "ord": [57, 80, 625, 666, 682], "fro": [57, 80, 370, 443, 625, 666], "nuc": [57, 80, 625, 666], "matrix_pow": [57, 80, 625], "matrix_rank": [57, 80, 625], "hermitian": [57, 80, 369, 421, 422, 625, 659, 660, 661, 668, 675], "largest_singular_valu": [57, 80, 625, 668, 671], "defici": [57, 625, 668], "matrix_transpos": [57, 80, 625, 837], "pinv": [57, 80, 625], "pseudo": [57, 80, 625, 671, 825], "99999988": [57, 80, 625, 671], "qr": [57, 80, 625, 828], "complet": [57, 69, 80, 625, 672, 765, 805, 806, 807, 809, 810, 813, 814, 817, 819, 823, 827, 828, 830, 833, 837, 838, 846, 854], "12309149": [57, 625, 672], "90453403": [57, 625, 672], "40824829": [57, 625, 672], "49236596": [57, 625, 672], "30151134": [57, 625, 672], "81649658": [57, 625, 672], "86164044": [57, 625, 672], "12403841e": [57, 625, 672], "60113630e": [57, 625, 672], "10782342e": [57, 625, 672], "04534034e": [57, 625, 672], "80906807e": [57, 625, 672], "88178420e": [57, 80, 625, 661, 672], "slogdet": [57, 80, 625], "logabsdet": [57, 80, 625, 673], "natur": [57, 80, 238, 256, 257, 258, 259, 278, 347, 365, 620, 625, 673, 810, 817, 819, 828, 846], "098611": [57, 625, 673], "solv": [57, 80, 369, 430, 625, 764, 800, 806, 809, 820, 827, 836, 858], "full_matric": [57, 80, 625, 675], "svf": [57, 675], "reconstructed_x": [57, 625, 675], "svdval": [57, 80, 625], "tensorsolv": [57, 80, 625], "vander": [57, 80, 625], "vandermond": [57, 80, 625, 680], "vecdot": [57, 80, 625], "vector_norm": [57, 80, 625], "mathemat": [57, 80, 218, 223, 235, 240, 242, 258, 268, 615, 620, 625, 666, 682, 815, 827, 833, 856, 862], "manhattan": [57, 80, 625, 682], "euclidean": [57, 80, 92, 93, 625, 682], "7416575": [57, 80, 625, 682], "vector_to_skew_symmetric_matrix": [57, 80, 625], "_arraywithloss": [58, 97], "binary_cross_entropi": [58, 81, 626, 814], "from_logit": [58, 81, 626, 684, 781], "pos_weight": [58, 81, 626, 684], "crossentropi": [58, 81, 626, 684], "357": [58, 81, 626, 684, 686], "223": [58, 81, 626, 684, 686], "3862944": [58, 626, 685], "sparse_cross_entropi": [58, 81, 626], "_arraywithmanipul": [59, 97], "x_min": [59, 82, 627, 687, 840], "x_max": [59, 82, 627, 687, 840], "before_1": [59, 82, 371, 474, 627, 689, 702], "after_1": [59, 82, 371, 474, 627, 689, 702], "before_n": [59, 82, 371, 474, 627, 689, 702], "after_n": [59, 82, 371, 474, 627, 689, 702], "repetit": [59, 82, 627, 693, 700, 833], "flat": [59, 69, 82, 376, 502, 565, 622, 627, 693], "allowzero": [59, 82, 627, 694], "remain": [59, 62, 75, 82, 85, 218, 235, 236, 242, 250, 251, 268, 271, 277, 279, 368, 391, 392, 393, 412, 620, 627, 629, 632, 694, 712, 735, 794, 806, 807, 814, 817, 819, 823, 831, 833, 841], "roll": [59, 82, 627, 822], "shift": [59, 71, 82, 98, 131, 142, 227, 229, 322, 362, 617, 620, 627, 695, 806, 807, 816, 817, 822, 829], "restor": [59, 82, 627, 695, 821], "num_or_size_split": [59, 69, 82, 627, 696, 835], "with_remaind": [59, 69, 82, 627, 696], "squeezabl": [59, 627, 697], "swapax": [59, 82, 627], "axis0": [59, 82, 627, 699], "swap_ax": [59, 699], "swap": [59, 82, 627, 699, 789, 850], "tile": [59, 76, 82, 536, 627], "unpack": [59, 82, 627, 701, 828, 830], "zero_pad": [59, 82, 627], "_arraywithnorm": [60, 97], "layer_norm": [60, 83, 630], "normalized_idx": [60, 83, 630, 725], "new_std": [60, 83, 630, 725, 783], "learnabl": [60, 83, 628, 630, 705, 725, 780, 783, 840], "deviat": [60, 61, 65, 83, 84, 88, 630, 631, 635, 725, 728, 752, 766, 779, 783, 809, 847], "0976": [60, 630, 725], "3452": [60, 630, 725], "2740": [60, 630, 725], "1047": [60, 630, 725], "5886": [60, 630, 725], "2732": [60, 630, 725], "7696": [60, 630, 725, 764], "7024": [60, 630, 725], "2518": [60, 630, 725], "826": [60, 630, 725], "178": [60, 630, 725], "981": [60, 630, 725], "831": [60, 630, 725], "421": [60, 630, 725], "_arraywithrandom": [61, 97], "multinomi": [61, 84, 375, 499, 631], "population_s": [61, 84, 631, 726], "num_sampl": [61, 84, 631, 726], "unnorm": [61, 84, 631, 726, 830], "popul": [61, 65, 69, 84, 88, 631, 635, 726, 752, 754, 815, 816, 826, 830, 835, 862], "draw": [61, 84, 375, 497, 499, 501, 631, 726, 728, 729, 764, 765, 766, 767, 772, 779, 805, 809, 828, 830], "half": [61, 84, 121, 282, 617, 620, 631, 727, 729, 803, 820, 833], "235": [61, 728], "float16": [61, 72, 84, 129, 152, 154, 155, 160, 162, 339, 365, 617, 618, 625, 682, 728, 729, 764, 765, 803, 815, 820, 827, 830], "807": [61, 728], "_arraywithsearch": [62, 97], "select_last_index": [62, 85, 632, 732, 733], "occurr": [62, 371, 380, 487, 509, 632, 633, 732, 733, 737], "argmin": [62, 85, 632], "output_dtyp": [62, 85, 632, 733], "argwher": [62, 85, 632], "nonzero": [62, 85, 93, 216, 217, 218, 221, 224, 233, 235, 238, 240, 242, 268, 281, 286, 620, 632], "as_tupl": [62, 85, 632, 735], "fewer": [62, 85, 632, 735], "_arraywithset": [63, 97], "unique_al": [63, 86, 633], "by_valu": [63, 86, 633, 737], "inverse_indic": [63, 86, 371, 487, 633, 737, 739], "unique_count": [63, 86, 633], "unique_invers": [63, 86, 633], "unique_valu": [63, 86, 633], "admonit": [63, 740], "dask": [63, 633, 737, 738, 739, 740, 846], "difficult": [63, 633, 737, 738, 739, 740, 807, 809, 815, 830, 841], "omit": [63, 278, 620, 633, 737, 738, 739, 740, 822, 826, 827], "x_i": [63, 65, 74, 93, 215, 216, 217, 220, 221, 222, 224, 226, 231, 232, 233, 238, 240, 241, 248, 249, 250, 251, 252, 256, 257, 258, 259, 263, 270, 275, 278, 279, 280, 281, 282, 283, 285, 286, 288, 329, 330, 332, 352, 365, 620, 633, 635, 737, 738, 739, 740, 748, 749, 750, 752, 753, 754, 779, 818], "x_j": [63, 633, 737, 738, 739, 740], "impli": [63, 633, 737, 738, 739, 740, 830], "typeerror": [63, 86, 633, 740, 837], "_arraywithsort": [64, 97], "stabil": [64, 87, 580, 581, 622, 634, 741, 744, 815, 825, 831, 833], "maintain": [64, 87, 634, 741, 744, 806, 807, 809, 821, 826, 828, 829, 830, 845, 855], "msort": [64, 87, 634], "searchsort": [64, 87, 634, 765], "side": [64, 87, 343, 365, 369, 436, 634, 743, 764, 780, 793, 794, 806, 807, 812], "sorter": [64, 87, 634, 743], "ret_dtyp": [64, 87, 634, 743], "_arraywithstatist": [65, 97], "cumprod": [65, 88, 635, 827, 840], "cumsum": [65, 88, 635, 815], "einsum": [65, 88, 635], "equat": [65, 75, 88, 308, 362, 369, 436, 625, 635, 674, 747, 764, 793, 814, 856], "operand": [65, 75, 79, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 249, 250, 251, 256, 257, 258, 259, 260, 268, 271, 273, 277, 278, 279, 280, 281, 282, 285, 286, 288, 329, 330, 352, 356, 365, 366, 368, 410, 620, 625, 635, 673, 679, 747, 748, 750, 751, 753, 793, 794, 810, 813, 818, 827], "contract": [65, 625, 635, 677, 747, 794], "seq": [65, 635, 747, 764], "ii": [65, 88, 635, 747, 807], "jk": [65, 635, 747, 794], "ik": [65, 635, 747, 794], "126": [65, 105, 274, 614, 620, 625, 635, 667, 747], "510": [65, 635, 747], "special": [65, 80, 92, 93, 97, 98, 215, 216, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 235, 236, 238, 240, 241, 242, 249, 250, 251, 256, 257, 258, 259, 260, 263, 268, 271, 273, 277, 278, 279, 280, 281, 282, 285, 286, 288, 329, 330, 352, 365, 620, 625, 635, 673, 679, 748, 749, 750, 751, 752, 753, 754, 764, 765, 766, 767, 772, 779, 805, 809, 810, 812, 814, 817, 818, 819, 822, 826, 828, 829, 830, 831, 833, 856, 857, 858], "arithmet": [65, 88, 229, 235, 268, 620, 635, 749, 827], "propag": [65, 229, 329, 330, 365, 620, 635, 748, 749, 750, 752, 753, 754, 825], "04999995": [65, 749], "freedom": [65, 88, 635, 752, 754, 811], "constitut": [65, 88, 635, 752, 754, 823, 835, 857], "commonli": [65, 88, 635, 752, 754, 819, 823, 825], "81649661": [65, 635, 752], "6666665": [65, 754, 838], "667": [65, 76, 235, 530, 580, 620, 622, 754], "_arraywithutil": [66, 97], "logic": [66, 89, 199, 235, 236, 262, 263, 264, 268, 271, 619, 620, 636, 755, 756, 805, 810, 814, 815, 816, 819, 823, 824, 825, 826, 827, 829, 830, 833, 837, 850], "AND": [66, 89, 225, 236, 262, 620, 636, 755], "OR": [66, 89, 228, 264, 271, 620, 636, 756, 806, 807, 825], "_wrap_funct": [67, 90, 812, 823, 824], "function_nam": [67, 90, 805, 831], "new_funct": [67, 90, 812], "add_ivy_array_instance_method": 67, "cl": [67, 90], "moduletyp": [67, 90, 849, 850, 851], "toi": [67, 90], "arrayexampl": 67, "hasattr": [67, 90], "_containerwithactiv": [68, 98], "dict_in": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "queue": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 575, 597, 622, 832, 838], "queue_load_s": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "container_combine_method": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "list_join": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "queue_timeout": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 575, 597, 622, 832], "print_limit": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "key_length_limit": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "print_ind": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "print_line_spac": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "ivyh": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "default_key_color": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "keyword_color_dict": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "rebuild_child_contain": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "types_to_iteratively_nest": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "alphabetical_kei": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "dynamic_backend": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 98, 781, 782, 811, 832], "build_cal": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98], "containerbas": [68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 813], "_static_gelu": 68, "key_chain": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 158, 160, 163, 166, 167, 168, 170, 172, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 311, 312, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 353, 354, 355, 356, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 461, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 496, 498, 503, 504, 511, 512, 513, 514, 521, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "to_appli": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 158, 160, 163, 166, 167, 168, 170, 172, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 311, 312, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 353, 354, 355, 356, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 461, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 496, 498, 503, 504, 511, 512, 513, 514, 521, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 629, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "prune_unappli": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 158, 160, 163, 166, 167, 168, 170, 172, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 311, 312, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 353, 354, 355, 356, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 410, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 461, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 496, 498, 503, 504, 511, 512, 513, 514, 521, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 629, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 719, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "map_sequ": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 126, 128, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 149, 150, 158, 160, 163, 166, 167, 168, 170, 172, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 311, 312, 322, 323, 327, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 353, 354, 355, 356, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 403, 404, 405, 406, 410, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 461, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 496, 498, 503, 504, 511, 512, 513, 514, 521, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "prune": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 131, 136, 138, 144, 148, 150, 163, 167, 168, 175, 209, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 303, 304, 305, 307, 328, 329, 330, 331, 332, 334, 336, 343, 344, 350, 352, 354, 355, 356, 391, 392, 393, 411, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 458, 459, 480, 482, 483, 484, 490, 492, 493, 494, 496, 498, 511, 512, 513, 514, 523, 526, 527, 529, 530, 534, 535, 536, 537, 538, 541, 542, 545, 547, 549, 550, 551, 553, 554, 557, 565, 566, 580, 581, 583, 585, 587, 588, 601, 607, 612, 629, 638, 639, 640, 641, 647, 648, 653, 654, 655, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 679, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 701, 702, 719, 720, 721, 722, 726, 727, 728, 729, 731, 734, 737, 738, 739, 740, 741, 745, 746, 749, 751, 752, 754, 755, 756, 762, 765, 814], "static_gelu": 68, "046": 68, "_static_hardswish": 68, "_static_leaky_relu": 68, "static_leaky_relu": 68, "38999999": [68, 75, 107, 290, 291, 360], "_static_log_softmax": 68, "static_log_softmax": 68, "371": [68, 108], "_static_mish": 68, "static_mish": 68, "30883577": [68, 109, 614], "28903052": [68, 109, 614], "10714479": [68, 109, 614], "_static_relu": 68, "static_relu": 68, "_static_sigmoid": 68, "static_sigmoid": 68, "2689414": [68, 111, 112, 614], "7310586": [68, 111, 112, 614], "88079703": [68, 111, 614], "62245935": [68, 111], "4750208": [68, 111], "_static_softmax": 68, "static_softmax": 68, "72844321": [68, 112], "19852395": [68, 112], "07303288": [68, 112], "_static_softplu": 68, "revert": [68, 113, 614], "static_softplu": 68, "53499615": 68, "42036411": 68, "948": [68, 113, 629, 706], "166": [68, 105, 614], "dictionari": [69, 86, 98, 207, 589, 605, 619, 622, 623, 740, 759, 761, 794, 810, 814, 815, 823, 827, 828, 838, 841], "asynchron": [69, 98, 856], "wait": [69, 98, 575, 622, 800, 805, 807, 814, 827], "arriv": [69, 98, 575, 622, 833], "cont_list_join": [69, 98], "limit": [69, 98, 160, 163, 529, 530, 546, 618, 622, 627, 687, 764, 766, 767, 779, 786, 794, 800, 806, 807, 812, 814, 817, 819, 827, 830, 833, 838, 841, 855, 856, 857], "whitespac": [69, 98], "indent": [69, 98, 838], "newlin": [69, 98, 818], "termin": [69, 98, 806, 807, 813, 820, 821, 835, 838], "constructor": [69, 98, 525, 622, 761, 777, 785, 815, 816, 818, 837], "kept": [69, 98, 628, 703, 704, 807, 826, 831], "encount": [69, 98, 780, 803, 805, 815, 819, 820, 830], "node": [69, 76, 98, 527, 537, 583, 629, 716, 717, 779, 788, 812, 813, 827, 846, 849, 850, 857], "alphabet": [69, 98], "__setitem__": [69, 371, 482, 810, 813, 837], "_cont_at_key_chains_input_as_dict": 69, "current_chain": 69, "ignore_key_error": 69, "_cont_at_key_chains_input_as_seq": 69, "_cont_call_static_method_with_flexible_arg": 69, "static_method": 69, "kw": 69, "self_idx": 69, "_cont_concat_unifi": 69, "_cont_get_dev": 69, "_cont_get_dtyp": 69, "_cont_get_shap": 69, "_cont_ivi": 69, "_cont_mean_unifi": 69, "_1": 69, "_cont_prune_key_chains_input_as_dict": 69, "return_cont": 69, "_cont_prune_key_chains_input_as_seq": 69, "_cont_slice_kei": 69, "key_slic": 69, "_cont_sum_unifi": 69, "_get_queue_item": 69, "cont_all_fals": 69, "assert_is_bool": 69, "cont_all_key_chain": 69, "include_empti": 69, "cont_all_tru": [69, 813, 838], "cont_as_bool": 69, "cont_assert_contains_sub_contain": 69, "sub_cont": 69, "screen": [69, 805, 806, 838], "cont_assert_contains_sub_structur": 69, "check_shap": [69, 786], "cont_assert_ident": 69, "check_typ": 69, "same_arrai": [69, 838], "arrays_equ": 69, "cont_assert_identical_structur": 69, "assert_and_assign": 69, "congruent": 69, "cont_at_key_chain": 69, "ignore_non": 69, "cont_at_kei": 69, "substr": 69, "cont_combin": 69, "duplic": [69, 371, 479, 546, 622, 629, 708, 811, 818, 824, 825, 828, 839, 862], "configur": [69, 207, 619, 629, 719, 806, 807, 812, 814, 815, 820, 821], "container_rightmost": 69, "cont_common_key_chain": 69, "cont_config": 69, "cont_contains_sub_contain": 69, "cont_contains_sub_structur": 69, "cont_copi": [69, 838], "cont_create_if_abs": 69, "noth": [69, 833, 862], "cont_cutoff_at_depth": 69, "depth_cutoff": 69, "summari": [69, 164, 531, 618, 622, 806, 807, 830], "cont_cutoff_at_height": 69, "height_cutoff": 69, "cont_deep_copi": [69, 838, 849], "cont_dev": 69, "belong": [69, 805, 809, 839], "cont_dev_str": 69, "cont_diff": [69, 838], "diff_kei": 69, "detect_key_diff": 69, "detect_value_diff": 69, "detect_shape_diff": 69, "among": [69, 813, 814, 830, 833, 847, 856], "container0": 69, "cont_dtyp": 69, "cont_duplicate_array_keychain": 69, "cont_find_sub_contain": 69, "sub_cont_to_find": 69, "cont_find_sub_structur": 69, "sub_struc_to_find": 69, "cont_flatten_key_chain": [69, 838], "above_height": [69, 838], "below_depth": [69, 838], "cont_format_key_chain": 69, "format_fn": 69, "cont_from_disk_as_hdf5": [69, 838], "h5_obj_or_filepath": 69, "slice_obj": 69, "disk": [69, 782, 838, 855], "h5py": 69, "filepath": [69, 636, 757, 758, 807, 809], "cont_from_disk_as_json": [69, 838], "json_filepath": 69, "cont_from_disk_as_pickl": [69, 838], "pickle_filepath": 69, "cont_from_flat_list": 69, "flat_list": 69, "hierarchi": [69, 805, 829, 838, 852, 862], "cont_handle_inplac": 69, "prime": [69, 815], "overwritten": [69, 810, 811], "cont_has_kei": 69, "query_kei": 69, "somewher": [69, 814], "cont_has_key_chain": 69, "cont_ident": [69, 838], "cont_identical_array_shap": 69, "cont_identical_config": 69, "cont_identical_structur": 69, "cont_if_exist": 69, "cont_inplace_upd": 69, "cont_ivi": 69, "cont_key_chains_contain": 69, "sub_str": 69, "cont_list_stack": [69, 838], "cont_load": 69, "cont_map": [69, 813, 838], "func": [69, 92, 208, 357, 358, 359, 367, 528, 602, 605, 606, 608, 613, 619, 622, 623, 629, 719, 761, 805, 809, 810, 817, 819, 825], "cont_map_sub_cont": 69, "include_self": 69, "possibli": [69, 585, 622, 764, 830, 841], "cont_max_depth": 69, "cont_multi_map": 69, "map_nest": 69, "assert_ident": 69, "leftmost": [69, 629, 719], "cont_multi_map_in_funct": 69, "cont_num_arrai": 69, "cont_overwrite_at_key_chain": 69, "target_dict": 69, "return_dict": 69, "cont_prune_empti": 69, "keep_non": 69, "cont_prune_key_chain": 69, "key1": [69, 800, 839], "key2": [69, 800], "key3": 69, "cont_prune_key_from_key_chain": 69, "certain": [69, 121, 132, 133, 370, 444, 617, 806, 807, 809, 815, 823, 829, 830, 833, 841, 849, 850, 851, 860], "cont_prune_kei": 69, "cont_prune_keys_from_key_chain": 69, "cont_reduc": 69, "cont_remove_key_length_limit": 69, "cont_remove_print_limit": 69, "cont_reshape_lik": 69, "leading_shap": 69, "cont_restructur": 69, "keep_orig": 69, "old": [69, 806, 811, 826], "cont_restructure_key_chain": 69, "keychain_map": 69, "cont_sav": 69, "cont_set_at_key_chain": 69, "cont_set_at_kei": 69, "cont_shap": [69, 624, 642], "cont_show": 69, "cont_show_sub_contain": 69, "sub_cont_or_keychain": 69, "cont_size_ordered_arrai": 69, "keychain": [69, 75, 331, 452, 453, 454, 483], "cont_slice_kei": 69, "all_depth": 69, "cont_slice_via_kei": 69, "slice_kei": 69, "cont_sort_by_kei": 69, "cont_structural_diff": 69, "cont_to_dict": 69, "cont_to_disk_as_hdf5": [69, 838], "starting_index": 69, "max_batch_s": 69, "cont_to_disk_as_json": [69, 838], "cont_to_disk_as_pickl": [69, 838], "cont_to_flat_list": 69, "cont_to_iter": [69, 813], "leaf_keys_onli": 69, "cont_to_iterator_kei": 69, "cont_to_iterator_valu": 69, "cont_to_json": 69, "cont_to_nested_list": 69, "cont_to_raw": 69, "cont_trim_kei": 69, "cont_try_kc": 69, "cont_unifi": 69, "concatten": [69, 208, 619], "cont_unstack_cont": 69, "dim_siz": 69, "cont_update_config": 69, "cont_with_default_key_color": 69, "cont_with_entries_as_list": 69, "cont_with_ivy_backend": 69, "ivy_backend": [69, 828], "cont_with_key_length_limit": [69, 838], "cont_with_print_ind": [69, 838], "cont_with_print_limit": [69, 838], "cont_with_print_line_spac": 69, "h5_file_s": 69, "shuffle_h5_fil": 69, "split_cont": 69, "_is_json": 69, "_repr": 69, "_containerwithconvers": [70, 98], "_static_to_ivi": 70, "_static_to_n": 70, "_containerwithcr": [71, 98], "_static_arang": 71, "_static_asarrai": 71, "_static_copy_arrai": 71, "_static_empti": 71, "_static_empty_lik": 71, "_static_ey": 71, "n_row": [71, 75, 127, 142, 322, 362, 369, 429, 617], "n_col": [71, 75, 127, 142, 322, 362, 617], "_static_from_dlpack": 71, "_static_ful": 71, "_static_full_lik": 71, "static_full_lik": 71, "2324": [71, 131, 617], "234": [71, 74, 131, 154, 237, 288, 617, 618, 620, 624, 648, 764], "123": [71, 72, 131, 163, 537, 617, 622, 794, 830], "_static_linspac": 71, "_static_logspac": 71, "static_logspac": 71, "15443469": [71, 133], "64158883": [71, 133], "_static_meshgrid": 71, "_static_native_arrai": 71, "_static_one_hot": 71, "static_one_hot": 71, "_static_on": 71, "_static_ones_lik": 71, "_static_tril": 71, "_static_triu": 71, "_static_zero": 71, "_static_zeros_lik": 71, "frombuff": [71, 617], "expos": [71, 129, 531, 617, 622, 800, 814, 835, 839, 845], "x00": [71, 129, 617], "xf0": [71, 129, 617], "x01": [71, 129, 617], "x02": [71, 129, 617], "x03": [71, 129, 617], "x04": [71, 129, 617], "x05": [71, 129], "5443469": [71, 133, 617], "static_frombuff": 71, "static_triu_indic": 71, "triu_indic": [71, 617], "_containerwithdatatyp": [72, 98], "_static_astyp": 72, "718": [72, 74, 147, 264, 618], "618": [72, 74, 147, 264, 618], "static_astyp": 72, "_static_broadcast_arrai": 72, "static_broadcast_arrai": 72, "_static_broadcast_to": 72, "static_broadcast_to": 72, "_static_can_cast": 72, "from_": [72, 150, 618], "static_can_cast": 72, "_static_default_complex_dtyp": 72, "complex_dtyp": [72, 153, 176, 618], "_static_default_float_dtyp": 72, "float_dtyp": [72, 155, 178, 618], "_static_dtyp": 72, "_static_finfo": 72, "inquir": [72, 160, 163], "static_finfo": 72, "55040e": [72, 160, 618], "7976931348623157e": [72, 160, 618], "308": [72, 160, 618, 764, 830], "_static_function_supported_dtyp": 72, "_static_function_unsupported_dtyp": 72, "_static_iinfo": 72, "1800": [72, 163, 618], "1084": 72, "40000": 72, "static_iinfo": 72, "2147483648": [72, 75, 163, 371, 482, 618], "2147483647": [72, 163, 618], "_static_is_bool_dtyp": 72, "dtype_in": [72, 145, 146, 159, 165, 166, 167, 168, 169, 170, 171, 172, 187, 618], "_static_is_complex_dtyp": 72, "is_complex_dtyp": [72, 618, 831], "roughli": [72, 806, 809, 859], "static_is_complex_dtyp": 72, "_static_is_float_dtyp": 72, "static_is_float_dtyp": 72, "_static_is_int_dtyp": 72, "_static_is_uint_dtyp": 72, "_static_result_typ": 72, "static_result_typ": 72, "broadcats": [72, 148], "_containerwithdevic": [73, 98], "_static_dev": 73, "static_dev": 73, "_static_to_devic": 73, "static_to_devic": 73, "contaion": [73, 192], "_containerwithelementwis": [74, 98], "_static_ab": 74, "static_ab": 74, "_static_aco": 74, "static_aco": 74, "_static_acosh": 74, "static_acosh": 74, "_static_add": 74, "static_add": [74, 102], "_static_asin": 74, "static_asin": 74, "524": [74, 220, 620], "412": [74, 79, 220, 620, 629, 706], "_static_asinh": 74, "static_asinh": 74, "_static_atan": 74, "static_atan": 74, "_static_atan2": 74, "static_atan2": 74, "915": [74, 223, 620], "983": [74, 223, 620], "978": [74, 223, 620], "696": [74, 84, 223, 620, 728], "993": [74, 223, 620], "_static_atanh": 74, "static_atanh": 74, "_static_bitwise_and": 74, "static_bitwise_and": 74, "_static_bitwise_invert": 74, "static_bitwise_invert": 74, "_static_bitwise_left_shift": 74, "_static_bitwise_or": 74, "static_bitwise_or": 74, "_static_bitwise_right_shift": 74, "static_bitwise_right_shift": 74, "_static_bitwise_xor": 74, "static_bitwise_xor": 74, "_static_ceil": 74, "static_ceil": 74, "_static_co": 74, "static_co": 74, "_static_cosh": 74, "static_cosh": 74, "_static_deg2rad": 74, "static_deg2rad": 74, "0262": [74, 234, 274, 620], "873": [74, 234, 274, 620], "_static_divid": 74, "static_divid": 74, "_static_equ": 74, "static_equ": 74, "_static_erf": 74, "static_erf": 74, "27632612": [74, 237], "934008": [74, 237, 620], "99999928": [74, 237], "91903949": [74, 237], "_static_exp": 74, "static_exp": 74, "59814835": [74, 238, 620], "4131622": [74, 238], "_static_expm1": 74, "thefunct": [74, 237], "areal": 74, "static_expm1": 74, "71828175": [74, 238, 620], "38905621": [74, 238, 620], "59815216": 74, "_static_floor": 74, "static_floor": 74, "_static_floor_divid": 74, "static_floor_divid": 74, "_static_great": 74, "static_great": 74, "_static_greater_equ": 74, "static_greater_equ": 74, "_static_isfinit": 74, "999999999999": [74, 249, 620], "static_isfinit": 74, "_static_isinf": 74, "static_isinf": 74, "_static_isnan": 74, "static_isnan": 74, "_static_isr": 74, "0j": [74, 75, 137, 138, 216, 217, 218, 221, 224, 233, 238, 240, 252, 256, 258, 275, 279, 281, 282, 286, 332, 365, 617, 620, 625, 673], "23j": [74, 75], "9j": [74, 75], "static_isr": 74, "_static_lcm": 74, "1080": [74, 253], "1550": [74, 253], "130": [74, 253, 371, 479], "_static_less": 74, "static_less": 74, "_static_less_equ": 74, "static_less_equ": 74, "_static_log": 74, "static_log": 74, "_static_log10": 74, "static_log10": 74, "898": [74, 257, 620], "0414": [74, 257, 620], "_static_log1p": 74, "static_log1p": 74, "_static_log2": 74, "static_log2": 74, "_static_logaddexp": 74, "static_logaddexp": 74, "_static_logical_and": 74, "static_logical_and": 74, "_static_logical_not": 74, "static_logical_not": 74, "_static_logical_or": 74, "static_logical_or": 74, "_static_logical_xor": 74, "static_logical_xor": 74, "_static_maximum": 74, "static_maximum": 74, "_static_minimum": 74, "static_minimum": 74, "_static_multipli": 74, "static_multipli": 74, "_static_neg": 74, "static_neg": 74, "_static_not_equ": 74, "static_not_equ": 74, "_static_posit": 74, "static_posit": 74, "_static_pow": 74, "static_pow": 74, "_static_rad2deg": 74, "static_rad2deg": 74, "5160": 74, "10300": [74, 274, 620], "15500": 74, "20600": 74, "2860": [74, 274], "_static_reciproc": 74, "recirpoc": [74, 276], "static_reciproc": 74, "_static_remaind": 74, "static_remaind": 74, "_static_round": 74, "thevfunct": 74, "527": [74, 278, 620], "static_round": 74, "301": [74, 278, 620], "_static_sign": 74, "static_sign": 74, "_static_sin": 74, "static_sin": 74, "757": [74, 280, 620], "959": [74, 240, 280, 620], "279": [74, 280, 368, 389, 399, 529, 620, 622], "_static_sinh": 74, "static_sinh": 74, "835": [74, 281], "347": [74, 281], "721": [74, 281], "_static_sqrt": 74, "static_sqrt": 74, "_static_squar": 74, "static_squar": 74, "_static_subtract": 74, "static_subtract": 74, "_static_tan": 74, "static_tan": 74, "_static_tanh": 74, "static_tanh": 74, "995": [74, 286, 620], "9999": 74, "_static_trapz": 74, "static_trapz": 74, "_static_trunc": 74, "static_trunc": 74, "_static_trunc_divid": 74, "75j": [74, 219, 248], "01317055": [74, 219], "05634501": [74, 219], "115": [74, 219, 274, 620], "3461759": [74, 219], "524111": [74, 219], "644": [74, 220, 620, 839], "305": [74, 79, 220, 620], "351": [74, 234, 274], "00613": [74, 234], "0154": [74, 234], "403": [74, 238], "428772": [74, 238], "649": [74, 240], "220": [74, 240], "865": [74, 240], "metho": [74, 247, 259], "7j": [74, 75, 252, 275, 332, 365, 620], "956": [74, 258], "08746284": [74, 261], "32192809": [74, 261], "nuner": [74, 268], "413": [74, 274], "335": [74, 75, 275, 332], "345j": [74, 75, 275, 332], "static_angl": 74, "static_exp2": 74, "static_fmin": 74, "static_gcd": 74, "static_imag": 74, "static_logaddexp2": 74, "static_nan_to_num": 74, "static_r": 74, "_containerwithactivationexperiment": [75, 98], "_static_celu": 75, "formlat": 75, "static_celu": 75, "_static_elu": 75, "static_elu": 75, "_static_hardshrink": 75, "hard": [75, 292, 807, 837, 856], "shrinkag": [75, 292, 301, 371, 481], "_static_hardtanh": 75, "static_hardtanh": [75, 293], "_static_scaled_tanh": 75, "931": 75, "71587813": 75, "88367474": 75, "00376701": [75, 298], "2285642": 75, "99999881": 75, "49999905": 75, "_static_silu": 75, "static_silu": 75, "27777028": [75, 300], "23947507": [75, 300], "0900332": [75, 300], "_static_softshrink": 75, "_static_tanhshrink": 75, "36634541": [75, 303], "02005103": [75, 303], "00262468": [75, 303], "_static_threshold": 75, "19722462": [75, 294], "84729779": [75, 294], "31326163": [75, 295], "46328258": [75, 295], "51301527": [75, 295], "79813886": [75, 295], "simplywrap": [75, 298], "54939651": [75, 298], "09999998": [75, 298, 603, 623], "09999999": [75, 298], "08336546": [75, 298], "0379949": [75, 298], "22856998": [75, 299], "42028043": [75, 299], "31868932": [75, 299], "static_logit": 75, "static_logsigmoid": 75, "34115386": 75, "64439666": 75, "24115384": 75, "55435526": 75, "07888974": 75, "00741899": 75, "26328245": 75, "00012302": 75, "static_prelu": 75, "static_relu6": 75, "static_selu": 75, "static_thresholded_relu": 75, "_containerwithconversionexperiment": [75, 98], "_containerwithcreationexperiment": [75, 98], "_static_trilu": 75, "blackman": [75, 306, 362], "00770143e": [75, 306], "49229857e": [75, 306], "hamming_window": [75, 362], "ham": [75, 308, 362], "4180": [75, 308], "8180": [75, 308], "hann_window": [75, 362], "hann": [75, 309, 362], "7500": [75, 309], "3455": [75, 309], "9045": [75, 309], "kaiser_bessel_derived_window": [75, 362], "suitabl": [75, 311, 312, 362, 634, 743, 766, 806, 807, 813, 831, 856], "spectral": [75, 311, 312, 362], "analysi": [75, 311, 312, 362, 856, 857], "kaiser": [75, 306, 311, 312, 362], "70710677": [75, 311, 494, 496], "18493208": [75, 311, 362], "9827513": [75, 311, 362], "kaiser_window": [75, 362], "static_kaiser_window": [75, 312], "2049": [75, 312], "8712": [75, 312], "0367": [75, 312, 362], "7753": [75, 312], "static_blackman_window": 75, "static_eye_lik": 75, "static_hamming_window": 75, "static_hann_window": 75, "static_hann": 75, "static_kaiser_bessel_derived_window": 75, "static_mel_weight_matrix": 75, "static_polyv": 75, "static_tril_indic": 75, "static_unsorted_segment_mean": 75, "static_unsorted_segment_min": 75, "static_unsorted_segment_sum": 75, "static_vorbis_window": 75, "vorbis_window": [75, 362], "vorbi": [75, 327, 362], "38268343": [75, 327, 625, 660], "92387953": [75, 327], "14943586": [75, 327, 362], "51644717": [75, 327], "85631905": [75, 327], "98877142": [75, 327], "tril_indic": [75, 362], "_containerwithdata_typeexperiment": [75, 98], "_containerwithdeviceexperiment": [75, 98], "_containerwithelementwiseexperiment": [75, 98], "0003": [75, 328, 625, 663, 764, 767], "0006": [75, 328, 355], "2345j": [75, 332], "5772": [75, 336], "9635": [75, 336], "4228": [75, 336], "9228": [75, 336], "57299206e": [75, 337], "67773480e": [75, 337], "20904985e": [75, 337], "84270084": [75, 337, 365], "99532223": [75, 337], "99997795": [75, 337], "mantissa": [75, 341, 365, 815], "frist": [75, 342, 365], "coord": [75, 342], "6055": [75, 343], "160": [75, 345, 371, 479], "10240": [75, 345], "60000038": [75, 346, 365, 625, 681], "0707": [75, 352, 365], "0579": [75, 352, 365], "static_allclos": 75, "static_amax": 75, "static_amin": 75, "static_binar": 75, "static_conj": 75, "static_copysign": 75, "static_count_nonzero": 75, "static_diff": 75, "static_digamma": 75, "57721537": 75, "96351004": 75, "static_erfc": 75, "15729921": 75, "00467773": [75, 337, 365], "static_fix": 75, "static_float_pow": 75, "static_fmax": 75, "static_fmod": 75, "static_frexp": 75, "static_gradi": 75, "static_hypot": 75, "static_isclos": 75, "static_ldexp": 75, "static_lerp": 75, "90000057": [75, 346, 365], "70000076": [75, 346, 365], "55000019": [75, 346, 365], "05000019": [75, 346, 365], "static_modf": 75, "static_nansum": 75, "static_nextaft": 75, "static_signbit": 75, "static_sinc": 75, "636": 75, "090": 75, "070": 75, "057": 75, "static_sparsify_tensor": 75, "static_xlogi": 75, "static_zeta": 75, "0244": [75, 355], "_containerwithgeneralexperiment": [75, 98], "_static_reduc": 75, "static_reduc": 75, "_containerwithgradientsexperiment": [75, 98], "_containerwithimageexperiment": [75, 98], "_containerwithlayersexperiment": [75, 98], "_static_fft": 75, "static_fft": 75, "_static_sliding_window": 75, "673": [75, 389], "0507": [75, 389], "79711437": [75, 368, 389, 399], "94867325": [75, 368, 389, 399], "74089146": [75, 368, 389, 399], "25980937": [75, 368, 389, 399], "64958102": [75, 368, 389, 399], "2442648": [75, 368, 389, 399], "247306": [75, 401], "908323j": [75, 401], "494955": [75, 401], "90395j": [75, 401], "static_adaptive_avg_pool1d": 75, "static_adaptive_avg_pool2d": 75, "static_adaptive_max_pool2d": 75, "static_avg_pool1d": 75, "static_avg_pool2d": 75, "static_avg_pool3d": 75, "static_dct": 75, "253": [75, 281, 620], "515": [75, 631, 728], "467": 75, "static_dft": 75, "static_embed": 75, "static_idct": 75, "93732834": [75, 368, 389], "75048852": [75, 368, 389], "29723358": [75, 368, 399], "6950531": 75, "93914509": 75, "88008738": 75, "18951225": 75, "06697273": [75, 368, 399], "57439804": 75, "68861485": [75, 368, 399], "41308832": [75, 368, 399], "0700836": 75, "2449036": 75, "6711426": 75, "514": 75, "501709": 75, "4924011": 75, "static_ifft": 75, "static_ifftn": 75, "static_interpol": 75, "static_max_pool1d": 75, "static_max_pool2d": 75, "max_pool2dd": 75, "static_max_pool3d": 75, "static_max_unpool1d": 75, "static_rfft": 75, "static_rfftn": 75, "static_rnn": 75, "step_funct": [75, 368, 413], "initial_st": [75, 368, 413], "go_backward": [75, 368, 413], "unrol": [75, 368, 413, 624, 649, 835, 838], "input_length": [75, 368, 413], "time_major": [75, 368, 413, 624, 649], "zero_output_for_mask": [75, 368, 413], "return_all_output": [75, 368, 413], "rnn": [75, 368, 856], "tempor": [75, 368, 413], "state_s": [75, 368, 413], "while_loop": [75, 368, 413, 616], "otput": [75, 368, 413], "funciton": [75, 368, 413], "static_stft": 75, "_containerwithlinearalgebraexperiment": [75, 98], "933034": [75, 369, 418], "eigenvealu": [75, 421, 659], "xx": [75, 421, 423, 659], "37228107": [75, 421, 659], "3722816": [75, 421, 659], "8245648": [75, 421, 659], "41597357": [75, 421, 659], "56576747": [75, 421, 659], "9093767": [75, 421, 659], "56155": [75, 422], "82842": [75, 422], "450": [75, 428], "static_adjoint": 75, "static_batched_out": 75, "static_cond": 75, "static_diagflat": 75, "static_dot": 75, "static_eig": 75, "static_eigh_tridiagon": 75, "static_eigv": 75, "static_higher_order_mo": 75, "static_initialize_tuck": 75, "static_kron": 75, "kroneck": [75, 369, 427, 428], "static_make_svd_non_neg": 75, "static_matrix_exp": 75, "static_mode_dot": 75, "static_multi_dot": 75, "static_multi_mode_dot": 75, "static_partial_tuck": 75, "static_svd_flip": 75, "static_tensor_train": 75, "static_truncated_svd": 75, "static_tt_matrix_to_tensor": 75, "tt_matrix": [75, 369, 440], "output_tensor": [75, 95, 369, 440], "static_tuck": 75, "_containerwithlossesexperiment": [75, 98], "_static_hinge_embedding_loss": 75, "_static_huber_loss": 75, "static_huber_loss": 75, "0575": [75, 443], "_static_kl_div": 75, "_static_l1_loss": 75, "static_l1_loss": 75, "_static_log_poisson_loss": 75, "static_log_poisson_loss": 75, "_static_poisson_nll_loss": 75, "06446016": 75, "55611551": 75, "30244565": [75, 447], "_static_smooth_l1_loss": 75, "static_smooth_l1_loss": 75, "_static_soft_margin_loss": 75, "06429195": [75, 447], "_containerwithmanipulationexperiment": [75, 98], "_static_fill_diagon": 75, "_static_put_along_axi": 75, "_static_tak": 75, "69999981": [75, 301, 360, 371, 458, 482], "_static_trim_zero": 75, "_static_unique_consecut": 75, "ary1": [75, 371, 452, 453, 454], "ary2": [75, 371, 452, 453, 454], "broadcast_shap": [75, 101, 371, 764, 766], "static_concat_from_sequ": [75, 459], "30192195": [75, 471], "static_as_strid": 75, "static_atleast_1d": 75, "static_atleast_2d": 75, "static_atleast_3d": 75, "static_broadcast_shap": 75, "static_column_stack": 75, "static_dsplit": 75, "static_dstack": 75, "static_expand": 75, "static_flatten": 75, "static_fliplr": 75, "static_flipud": 75, "static_fold": 75, "static_heavisid": 75, "static_hsplit": 75, "static_hstack": 75, "static_i0": 75, "static_matric": 75, "static_moveaxi": 75, "static_pad": 75, "static_partial_fold": 75, "static_partial_tensor_to_vec": 75, "static_partial_unfold": 75, "static_partial_vec_to_tensor": 75, "static_rot90": 75, "static_soft_threshold": 75, "static_take_along_axi": 75, "static_top_k": 75, "static_unfold": 75, "static_vsplit": 75, "static_vstack": 75, "_containerwithnormsexperiment": [75, 98], "16903085": [75, 494, 496], "50709254": [75, 494, 496], "84515423": [75, 494, 496], "44183609": [75, 494, 496], "56807494": [75, 494, 496], "69431382": [75, 494, 496], "static_batch_norm": 75, "static_group_norm": 75, "static_instance_norm": 75, "static_l1_norm": 75, "static_l2_norm": 75, "static_lp_norm": 75, "12500000": 75, "37500000": 75, "62500000": 75, "27500000": 75, "35000000": 75, "42500000": 75, "0000000": 75, "5000000": 75, "2500000": 75, "_containerwithrandomexperiment": [75, 98], "43643127": [75, 499], "32325703": [75, 499], "24031169": [75, 499], "34251311": [75, 499], "31692529": [75, 499], "3405616": [75, 499], "5319725": [75, 499], "22458365": [75, 499], "24344385": [75, 499], "26588406": [75, 499], "61075421": [75, 499], "12336174": [75, 499], "51142915": [75, 499], "25041268": [75, 499], "23815817": [75, 499], "64042903": [75, 499], "25763214": [75, 499], "10193883": [75, 499], "31624692": [75, 499], "46567987": [75, 499], "21807321": [75, 499], "37677699": [75, 499], "39914594": [75, 499], "22407707": [75, 499], "static_bernoulli": 75, "static_beta": 75, "static_dirichlet": 75, "static_gamma": 75, "static_poisson": 75, "_containerwithsearchingexperiment": [75, 98], "static_unravel_index": 75, "_containerwithsetexperiment": [75, 98], "_containerwithsortingexperiment": [75, 98], "invert_permut": [75, 378], "static_invert_permut": 75, "static_lexsort": [75, 87], "_containerwithstatisticalexperiment": [75, 98], "_static_cummax": 75, "static_cummax": 75, "_static_cummin": 75, "static_cummin": 75, "_static_nanmin": 75, "static_nanmin": 75, "func_nam": [75, 514, 805, 817, 818, 823, 827], "static_bincount": 75, "static_corrcoef": 75, "static_cov": [75, 380, 511], "static_histogram": 75, "static_igamma": 75, "static_median": 75, "static_nanmean": 75, "static_nanmedian": 75, "static_nanprod": 75, "static_quantil": 75, "_containerwithutilityexperiment": [75, 98], "static_optional_get_el": 75, "_containerwithgener": [76, 98], "_static_all_equ": 76, "static_all_equ": 76, "_static_array_equ": 76, "a0": [76, 371, 458], "static_array_equ": 76, "_static_assert_supports_inplac": 76, "_static_clip_matrix_norm": 76, "static_clip_matrix_norm": 76, "849": [76, 529, 530, 622], "_static_clip_vector_norm": 76, "static_clip_vector_norm": 76, "_static_einops_rearrang": 76, "static_einops_rearrang": 76, "_static_einops_reduc": 76, "static_einops_reduc": 76, "29333329": [76, 535, 622], "53000069": [76, 535, 622], "39666676": [76, 535, 622], "20666695": [76, 535, 622], "_static_einops_repeat": 76, "static_einops_repeat": 76, "_static_exist": 76, "_static_fourier_encod": 76, "static_fourier_encod": 76, "classivi": [76, 627, 633, 696, 738], "89858720e": 76, "79717439e": 76, "_static_gath": 76, "static_gath": 76, "_static_gather_nd": 76, "static_gather_nd": 76, "_static_get_num_dim": 76, "static_get_num_dim": 76, "_static_has_nan": 76, "leafwis": 76, "static_has_nan": 76, "_static_inplace_decr": 76, "_static_inplace_incr": 76, "_static_inplace_upd": 76, "_static_is_arrai": 76, "static_is_arrai": 76, "_static_is_ivy_arrai": 76, "static_is_ivy_arrai": 76, "_static_is_native_arrai": 76, "static_is_native_arrai": 76, "_static_scatter_flat": 76, "_static_scatter_nd": 76, "static_scatter_nd": 76, "_static_stable_divid": 76, "22222222": 76, "11111111": 76, "857": [76, 580, 622], "444": 76, "_static_stable_pow": 76, "00012": [76, 581, 622], "00016": [76, 77, 581, 609, 622, 623], "00001": [76, 581, 622, 764], "00032": [76, 581], "00256": [76, 581], "1679638": [76, 581], "395": [76, 581], "16777383": [76, 581], "_static_supports_inplace_upd": 76, "_static_to_list": 76, "static_to_list": 76, "_static_to_numpi": 76, "static_to_numpi": 76, "_static_to_scalar": 76, "static_to_scalar": 76, "_static_value_is_nan": 76, "452": 76, "static_value_is_nan": 76, "833": [76, 530], "items": [76, 97, 622], "static_isin": 76, "static_items": 76, "static_strid": 76, "425": [76, 601], "_containerwithgradi": [77, 98], "_static_stop_gradi": 77, "static_stop_gradi": 77, "976": [77, 286, 603, 620, 623], "49e": [77, 603, 623], "74e": [77, 603, 623], "95e": [77, 603, 623], "024": [77, 603, 623], "096": [77, 603, 623], "216": [77, 80, 603, 623, 680], "626": [77, 603, 623], "en": [77, 603, 604, 623, 814], "wikipedia": [77, 603, 604, 623], "wiki": [77, 603, 604, 623], "stochastic_gradient_desc": [77, 603, 604, 623], "01099": [77, 604], "01003": [77, 604, 623], "01015": [77, 604, 623], "99936122": [77, 604, 623], "99936116": [77, 604, 623], "99936128": [77, 604, 623], "99936104": [77, 604, 623], "w_new": [77, 607, 623], "708": [77, 609, 623], "445": [77, 609, 623], "6e": [77, 609, 623], "00036": [77, 609, 623], "00049": [77, 609, 623], "layerwis": [77, 610, 623], "01132035": [77, 610, 623], "22264051": [77, 610, 623], "2056601": [77, 610, 623], "1324538": [77, 610, 623], "56490755": [77, 610, 623], "96622658": [77, 610, 623], "90848625": [77, 610, 623], "93616199": [77, 610, 623], "77232409": [77, 610, 623], "_containerwithimag": [78, 98], "_containerwithlay": [79, 98], "_static_conv1d": 79, "static_conv1d": 79, "_static_conv1d_transpos": 79, "static_conv1d_transpos": 79, "112": [79, 625, 635, 639, 670, 747], "_static_conv2d": 79, "ey": [79, 617, 624, 640, 646, 833, 840], "static_conv2d": 79, "_static_conv2d_transpos": 79, "static_conv2d_transpos": 79, "_static_conv3d": 79, "fdfh": [79, 642], "static_conv3d": 79, "_static_conv3d_transpos": 79, "static_conv3d_transpos": 79, "_static_depthwise_conv2d": 79, "inp": [79, 624, 646], "static_depthwise_conv2d": 79, "_static_dropout": 79, "static_dropout": 79, "_static_dropout1d": 79, "static_dropout1d": 79, "_static_dropout2d": 79, "_static_dropout3d": 79, "_static_linear": 79, "278": [79, 624, 647, 648], "static_linear": 79, "195": 79, "_static_lstm_upd": 79, "_static_multi_head_attent": 79, "_static_reduce_window": 79, "_static_scaled_dot_product_attent": 79, "static_scaled_dot_product_attent": 79, "39999962": [79, 624, 647, 648], "19999695": [79, 648], "11600018": [79, 648], "88399887": [79, 648], "196": [79, 624, 648], "306": [79, 624, 648], "19999981": [79, 292, 304, 360, 624, 647, 653], "59249449": [79, 624, 653], "68226194": [79, 624, 653], "19603825": [79, 624, 653], "9960382": [79, 624, 653], "26894283": [79, 624, 653], "40236187": [79, 624, 653], "39999437": [79, 624, 653], "59999037": [79, 624, 653], "35046196": [79, 624, 653], "54282808": [79, 624, 653], "39989519": [79, 624, 653], "5998764": [79, 624, 653], "_containerwithlinearalgebra": [80, 98], "_static_choleski": 80, "static_choleski": 80, "577": [80, 625, 654], "707": [80, 625, 654], "static_rol": [80, 82], "_static_cross": 80, "static_cross": 80, "_static_det": 80, "_static_diag": 80, "_static_diagon": 80, "static_diagon": 80, "_static_eigh": 80, "_static_eigvalsh": 80, "static_eigvalsh": 80, "51572949": [80, 625, 661], "17091519": [80, 625, 661], "3448143": [80, 625, 661], "35898387e": [80, 625, 661], "46410179e": [80, 625, 661], "_static_inn": 80, "static_inn": 80, "_static_inv": 80, "static_inv": 80, "_static_matmul": 80, "matul": 80, "static_matmul": 80, "_static_matrix_norm": 80, "deimens": 80, "static_matrix_norm": 80, "_static_matrix_pow": 80, "_static_matrix_rank": 80, "static_matrix_rank": 80, "_static_matrix_transpos": 80, "static_matrix_transpos": 80, "_static_out": 80, "n1": [80, 134, 617], "n2": [80, 134, 617], "static_out": [80, 670], "_static_pinv": 80, "static_pinv": 80, "0426": 80, "0964": 80, "0605": 80, "1368": 80, "_static_qr": 80, "static_qr": 80, "31622777": [80, 625, 672], "9486833": [80, 625, 672], "4472136": [80, 625, 672], "89442719": [80, 625, 672], "16227766": [80, 625, 672], "42718872": [80, 625, 672], "63245553": [80, 625, 672], "47213595": [80, 625, 672], "81377674": [80, 625, 672], "_static_slogdet": 80, "static_slogdet": 80, "6931472": 80, "0986123": 80, "_static_solv": 80, "_static_svd": 80, "static_svd": 80, "au": 80, "aS": 80, "avh": 80, "bu": [80, 846], "bvh": 80, "_static_svdv": 80, "_static_tensordot": 80, "_static_tensorsolv": 80, "_static_trac": 80, "static_trac": 80, "_static_vand": 80, "static_vand": 80, "343": [80, 278, 620, 680], "729": [80, 680, 839], "_static_vecdot": 80, "_static_vector_norm": 80, "static_vector_norm": 80, "77359247": [80, 682], "_static_vector_to_skew_symmetric_matrix": 80, "09861231": [80, 625, 673], "static_general_inner_product": 80, "3475602": [80, 675], "93765765": [80, 675], "58776021": [80, 675], "10416126": [80, 675], "80644298": [80, 675], "87024701": [80, 675], "48127627": [80, 675], "79101127": [80, 675], "98288572": [80, 675], "68917423": [80, 675], "_containerwithloss": [81, 98], "_static_binary_cross_entropi": 81, "static_binary_cross_entropi": 81, "511": [81, 626, 684, 686], "_static_cross_entropi": 81, "static_cross_entropi": 81, "20397282": 81, "83258148": 81, "60943794": [81, 625, 673], "_static_sparse_cross_entropi": 81, "static_sparse_cross_entropi": 81, "5108256": [81, 685], "609438": [81, 685], "_containerwithmanipul": [82, 98], "_static_clip": 82, "static_clip": 82, "_static_concat": 82, "_static_constant_pad": 82, "static_constant_pad": 82, "_static_expand_dim": 82, "static_expand_dim": 82, "container_axi": [82, 627, 690], "_static_flip": 82, "static_flip": 82, "_static_permute_dim": 82, "static_permute_dim": 82, "_static_repeat": 82, "static_repeat": 82, "_static_reshap": 82, "static_reshap": 82, "_static_rol": 82, "positivclip": 82, "_static_split": 82, "static_split": 82, "_static_squeez": 82, "static_squeez": 82, "_static_stack": 82, "leavv": 82, "static_stack": 82, "_static_swapax": 82, "_static_til": 82, "static_til": 82, "_static_unstack": 82, "static_unstack": 82, "_static_zero_pad": 82, "repreat": [82, 693], "_containerwithnorm": [83, 98], "34198591": [83, 630, 725], "04274819": [83, 630, 725], "29923761": [83, 630, 725], "24053511": [83, 630, 725], "62221265": [83, 725], "20277636": [83, 725], "41943574": [83, 725], "83710337": [83, 725], "_containerwithrandom": [84, 98], "_static_multinomi": 84, "_static_randint": 84, "static_randint": 84, "_static_random_norm": 84, "static_random_norm": 84, "651": 84, "_static_random_uniform": 84, "static_random_uniform": 84, "481": 84, "0999": 84, "_static_shuffl": 84, "static_shuffl": 84, "431": [84, 728], "274": [84, 728], "_containerwithsearch": [85, 98], "_static_argmax": 85, "static_argmax": 85, "_static_argmin": 85, "static_argmin": 85, "_static_argwher": 85, "static_argwher": 85, "_static_nonzero": 85, "_static_wher": 85, "static_wher": 85, "_containerwithset": [86, 98], "_static_unique_al": 86, "static_unique_al": 86, "_static_unique_count": 86, "static_unique_count": 86, "_static_unique_invers": 86, "static_unique_invers": 86, "_static_unique_valu": 86, "_containerwithsort": [87, 98], "_static_argsort": 87, "static_argsort": 87, "_static_searchsort": 87, "_static_sort": 87, "static_sort": 87, "static_msort": 87, "_containerwithstatist": [88, 98], "_static_cumprod": 88, "static_cumprod": 88, "_static_cumsum": 88, "static_cumsum": 88, "_static_min": 88, "_static_prod": 88, "static_prod": 88, "11000001": [88, 751], "23100001": [88, 751], "30800003": [88, 635, 751], "_static_sum": 88, "_static_var": 88, "static_var": 88, "12666667": [88, 635, 754], "11555555": [88, 635, 754], "rtype": [88, 747, 793], "respectv": [88, 752], "81649649": [88, 752], "94280904": [88, 752], "509902": [88, 635, 752], "2472192": [88, 752], "44948983": [88, 752], "41421354": [88, 752], "6666667": [88, 754], "_containerwithutil": [89, 98], "_static_al": 89, "static_al": 89, "_static_ani": 89, "static_ani": 89, "add_ivy_container_instance_method": 90, "containerexampl": 90, "factorized_tensor": [91, 92, 93, 94, 95, 96], "factorizedtensor": [91, 92, 93, 94, 95, 96], "matrix_or_tensor": 91, "to_tensor": [91, 92, 93, 94, 95, 96], "to_unfold": [91, 92, 93, 94, 95, 96], "to_vec": [91, 92, 93, 94, 95, 96], "cp_tensor": [92, 93], "cptensor": [92, 93, 317, 362], "cp_copi": 92, "cp_flip_sign": 92, "s_i": [92, 93], "normalisation_weight": [92, 93], "normalised_factor": [92, 93], "cp_lstsq_grad": 92, "return_loss": 92, "nabla": 92, "mathcal": 92, "mathbf": 92, "factor_matric": 92, "cp_gradient": 92, "quantiti": 92, "cp_mode_dot": 92, "keep_dim": [92, 96], "cp_multi_mode_dot": 92, "cp_n_param": 92, "tensor_shap": [92, 94, 95, 96], "n_param": [92, 93, 94, 95, 96], "cp_norm": 92, "cp_to_tensor": 92, "khatria": 92, "rao": [92, 369, 427], "khatri": [92, 369, 427], "cp_normal": 92, "normalis": [92, 93], "u_1": [92, 93], "u_n": [92, 93], "v_1": [92, 93], "v_n": [92, 93], "v_k": [92, 93], "u_k": [92, 93], "absorb": [92, 93], "refold": [92, 371, 467, 478], "cp_to_unfold": 92, "ie": 92, "s_u_i": 92, "exploit": [92, 859], "khatri_rao": [92, 369], "cp_to_vec": 92, "ravel": [92, 833], "unfolding_dot_khatri_rao": 92, "mttkrp": 92, "validate_cp_rank": 92, "percent": [92, 95], "validate_cp_tensor": 92, "parafac2_tensor": 93, "parafac2tensor": [93, 318, 362], "apply_parafac2_project": 93, "evolv": [93, 845, 856], "b_i": 93, "ijk": [93, 794], "sum_r": 93, "a_": 93, "ir": [93, 854, 857, 862], "jr": 93, "kr": 93, "coupl": [93, 806, 810, 837, 839, 856], "factoris": 93, "i1": [93, 380, 514], "classmethod": [93, 100, 101, 769], "from_cptensor": 93, "parafac2_tensor_ok": 93, "parafac2_normalis": 93, "normalised_project": 93, "parafac2_to_slic": 93, "slice_idx": 93, "frontal": 93, "a_i": 93, "j_i": 93, "b_": 93, "reformul": 93, "p_i": 93, "orthogon": [93, 317, 321, 362, 369, 421, 435, 441, 625, 659, 660], "sum_": 93, "ijr": 93, "constraint": [93, 794, 814, 815, 825], "projection_matric": 93, "parafac2_to_tensor": 93, "construct": [93, 627, 700, 780, 783, 784, 785, 829, 835, 839, 840, 854, 856, 863], "uneven": 93, "parafac2_to_unfold": 93, "parafac2_to_vec": 93, "validate_parafac2_tensor": 93, "cp": [93, 317, 362, 807], "tr_tensor": 94, "trtensor": [94, 319, 362], "tr_n_param": 94, "tr_to_tensor": 94, "tr_to_unfold": 94, "tr_to_vec": 94, "validate_tr_rank": 94, "validate_tr_tensor": 94, "tt_tensor": 95, "_tt_n_param": 95, "mp": [95, 320, 362], "index_upd": 95, "pad_tt_rank": 95, "factor_list": 95, "n_pad": 95, "pad_boundari": 95, "ring": 95, "bond": 95, "padded_factor_list": 95, "tt_to_tensor": 95, "assembl": [95, 369, 440], "tt_to_unfold": 95, "reassembl": 95, "tt_to_vec": 95, "validate_tt_rank": 95, "constant_rank": 95, "allow_overparametr": 95, "proport": [95, 779], "realiz": [95, 856], "validate_tt_tensor": 95, "tucker_tensor": 96, "tucker_copi": 96, "tucker_mode_dot": [96, 863], "tucker_n_param": 96, "tucker_norm": 96, "tucker_to_tensor": 96, "skip_factor": 96, "transpose_factor": 96, "tucker_to_unfold": 96, "tucker_to_vec": 96, "validate_tucker_rank": 96, "fixed_mod": 96, "validate_tucker_tensor": 96, "_bisection_root_find": 96, "fun": [96, 359, 367, 602, 622, 629, 717, 814], "max_it": 96, "__abs__": [97, 98], "__add__": [97, 98, 810, 813, 817, 818, 822, 827, 828, 837], "__eq__": [97, 98], "__ge__": [97, 98], "__gt__": [97, 98, 833], "__le__": [97, 98], "__lt__": [97, 98], "__ne__": [97, 98], "__pow__": [97, 98, 837], "69678056": 97, "59876156": 97, "82660675": 97, "__radd__": [97, 98, 817, 818, 827], "__rrshift__": [97, 98], "__rshift__": [97, 98], "__rsub__": [97, 98], "__sub__": [97, 98, 810, 813, 817, 822, 837], "__truediv__": [97, 98, 810, 813, 817], "__xor__": [97, 98], "referenc": [97, 819, 826], "resid": [97, 101, 627, 690, 827, 835, 839], "mt": [97, 837], "hopefulli": [97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 845, 846, 847], "overview": [97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 800, 812, 814, 828, 830, 834], "reach": [97, 98, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 776, 777, 779, 780, 782, 783, 784, 785, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 845, 846, 847, 855, 856], "eq": 98, "ge": 98, "le": 98, "ne": 98, "75979435": 98, "52153397": 98, "13532257": 98, "rshift": 98, "truediv": 98, "66666669": [98, 374, 496, 605, 623], "nested_arrai": [100, 101, 102, 812], "nestedarrai": 100, "nested_rank": [100, 101, 102], "inner_shap": [100, 101, 102], "nestedarraybas": [100, 101, 102], "from_row_length": 100, "row_length": 100, "from_row_split": 100, "row_split": 100, "ragged_map": 101, "ragged_multi_map": 101, "ragged_arrai": 101, "ragged_multi_map_in_funct": 101, "replace_ivy_arrai": 101, "unbind": 101, "nestedarrayelementwis": 102, "strictli": [107, 110, 113, 242, 614, 620, 822, 826], "24000001": [107, 614], "703": [108, 614], "683": [108, 614], "408": [108, 614], "313": [108, 614], "437": [108, 614], "40337825": [109, 614], "56114835": [109, 614], "20788449": [109, 614], "0768": [112, 614], "231": [112, 614], "\u03b2": [113, 614], "66666667": [114, 380, 511, 614], "body_fn": [117, 118, 120, 616], "bodi": [117, 120, 616, 809, 830], "lst": [117, 616], "orelse_fn": [118, 616], "body1": [119, 616], "body2": [119, 616], "test_fn": [120, 616, 762, 800, 850, 851], "repeatedli": [120, 616, 629, 715, 814, 830], "ml_framework": [121, 617], "distanc": [121, 617], "adjac": [121, 617], "nestedsequ": [122, 123, 617], "typevar": [122, 123, 617], "supportsbufferprotocol": [122, 123, 617], "static_copy_arrai": [124, 617], "intdtyp": [127, 138, 144, 156, 167, 172, 179, 185, 617, 618], "pycapsul": [128, 139, 617], "interchang": [128, 139, 617, 627, 699], "plu": [129, 617], "x00b": [129, 617], "x00d": [129, 617], "x00e": [129, 617], "66666663": [132, 617], "41588834": [133, 617], "7827941": [133, 617], "6227766": [133, 617], "23413252": [133, 617], "n3": [134, 617], "xv": [134, 617], "yv": [134, 617], "x_nativ": [135, 617, 826], "y_nativ": [135, 617], "z_nativ": [135, 617], "d_type": [137, 617], "col": [142, 322, 362, 617], "primari": [142, 161, 162, 194, 195, 322, 362, 378, 504, 539, 540, 617, 618, 619, 622, 765, 767, 805, 808, 811, 815, 824, 826, 827, 829, 830, 833, 841, 843], "upward": [142, 322, 362, 617], "downward": [142, 322, 362, 617], "2xn": [142, 322, 362, 617], "subarrai": [142, 322, 362, 617], "incompat": [149, 618], "closest": [152, 231, 241, 242, 278, 288, 618, 620, 830, 833], "xtype": [152, 618], "ytype": [152, 618], "native_uint16": [152, 618], "complexdtyp": [153, 167, 176, 618], "set_default_complex_dtyp": [153, 182, 618], "4294": [153, 155, 618], "967346": [153, 155, 618], "set_default_dtyp": [154, 183, 618, 815, 823], "floatdtyp": [155, 178, 618], "set_default_float_dtyp": [155, 164, 176, 184, 618, 815], "int_dtyp": [156, 179, 618], "set_default_int_dtyp": [156, 164, 185, 618, 815], "4294967346": [156, 157, 618], "uint_dtyp": [157, 180, 618], "uint": [157, 172, 180, 186, 618, 815, 828], "uintdtyp": [157, 172, 180, 186, 618], "set_default_uint_dtyp": [157, 164, 186, 618], "native_bool": [159, 618], "ieee": [160, 218, 235, 240, 258, 268, 277, 282, 285, 615, 618, 620, 846], "754": [160, 218, 235, 240, 258, 268, 277, 282, 285, 615, 618, 620, 846], "smallest_norm": [160, 618], "bfloat16": [161, 618, 764, 765, 815, 827, 830, 831], "unsupport": [162, 195, 540, 618, 619, 622, 759, 762, 803, 806, 820, 827], "encapsul": [163, 618, 814], "314": [163, 275, 332, 365, 618, 620], "9223372036854775808": [163, 618], "9223372036854775807": [163, 618], "65535": [163, 618], "4294967295": [163, 618], "native_uint8": [165, 618], "hashabl": [169, 618], "type1": [173, 618], "type2": [173, 618], "array_api_promot": [173, 174, 618, 764, 765], "unexpect": [174, 242, 618, 620, 815], "default_complex_dtyp": [176, 618], "default_dtype_stack": [177, 183, 618], "unset_default_dtyp": [177, 618], "native_uint64": [177, 618], "default_float_dtyp": [178, 618, 815], "default_int_dtyp": [179, 185, 618, 815], "default_uint_dtyp": [180, 186, 618], "ret1": [181, 618], "ret2": [181, 618], "reset": [182, 183, 184, 185, 186, 212, 213, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 618, 619, 622, 816], "default_complex_dtype_stack": [182, 618], "default_float_dtype_stack": [184, 618], "native_float16": [187, 618], "unmodifi": [189, 619, 811, 815], "aliv": [196, 201, 203, 543, 563, 564, 619, 622, 816], "139740789224448": [196, 619], "physic": [199, 619], "process_specif": [202, 214, 619], "percentag": [202, 619], "ram": [202, 210, 214, 619], "alon": [202, 214, 619, 800, 821, 830], "036902561555": [202, 619], "7024003467681645": [202, 619], "as_native_dev": [202, 619], "7095597456708771": [202, 619], "attr_onli": [203, 619], "soft_device_mod": [205, 213, 619], "chunk": [206, 207, 208, 619], "split_factor": [206, 619, 819], "max_chunk_s": [208, 619], "chunk_siz": [208, 619], "input_ax": [208, 619], "output_ax": [208, 619], "usag": [208, 619, 815, 823, 826, 830, 835, 841, 846, 859], "fed": [208, 619, 839], "fist": [208, 619], "gb": [210, 214, 619, 806, 820], "66700032": [210, 619], "589934592": [210, 619], "219563008": [214, 619], "902400346": [214, 619], "525205504": [214, 619], "na": [215, 620, 830], "noqa": [215, 282, 620, 780, 789, 828], "princip": [216, 220, 222, 352, 365, 620], "domain": [216, 217, 220, 221, 222, 223, 232, 233, 238, 240, 256, 257, 259, 280, 281, 282, 285, 286, 352, 365, 620, 818, 854, 856], "codomain": [216, 217, 220, 221, 222, 223, 232, 233, 238, 240, 256, 257, 259, 280, 281, 282, 285, 286, 352, 365, 620, 818], "\u03c0": [216, 220, 222, 223, 615, 620], "3\u03c0": [216, 223, 620], "unspecifi": [216, 217, 221, 224, 233, 238, 240, 242, 277, 281, 282, 286, 369, 421, 620, 625, 627, 659, 660, 698, 826], "\u03c0j": [217, 221, 224, 256, 258, 620], "3\u03c0j": [217, 256, 258, 620], "x1_i": [218, 223, 225, 227, 228, 229, 230, 235, 236, 242, 246, 247, 254, 255, 260, 262, 264, 265, 268, 271, 273, 277, 284, 620, 809], "2019": [218, 235, 240, 258, 268, 620, 856, 859], "overflow": [218, 235, 242, 620, 625, 635, 673, 753, 804, 815], "commut": [218, 620], "tabl": [218, 235, 268, 574, 596, 620, 622, 764, 765, 780, 827, 832, 856], "dj": [218, 235, 268, 620], "bj": [218, 235, 268, 332, 365, 620], "z1": [218, 620], "z2": [218, 620], "yj": [219, 620], "nanj": [221, 620], "809": [221, 620], "569": [221, 620], "733": [221, 620], "notat": [223, 620, 635, 747, 814], "denot": [223, 620, 782], "quadrant": [223, 620], "rai": [223, 620, 846], "bitwis": [225, 228, 230, 265, 620], "170": [229, 620], "243": [229, 620], "xor": [230, 265, 620], "654": [232, 620], "ci": [233, 238, 240, 281, 620, 809, 815, 821, 828, 830, 841], "368": [233, 620], "670": [233, 620], "202": [233, 620, 809], "548": [233, 620], "1490": [233, 620], "57079633": [234, 620], "14159265": [234, 620], "71238898": [234, 620], "28318531": [234, 620], "02617994": [234, 620], "87266463": [234, 620], "01919862": [234, 620], "03839725": [234, 620], "05759586": [234, 620], "07679449": [234, 620], "09599311": [234, 620], "11519173": [234, 620], "35081118": [234, 620], "88139129": [234, 620], "underflow": [235, 242, 620, 625, 673, 815], "textbook": [235, 268, 620], "frac": [235, 257, 259, 279, 281, 285, 368, 374, 395, 396, 400, 401, 490, 492, 620], "ac": [235, 268, 620, 793, 794], "bd": [235, 268, 620], "bc": [235, 268, 620, 793, 794], "versu": [235, 268, 620], "riemann": [235, 268, 620], "sphere": [235, 268, 620], "c99": [235, 268, 620], "infinit": [235, 268, 282, 620], "unlik": [235, 268, 620, 809, 814, 817, 846, 861, 863], "698": [235, 620], "truth": [236, 246, 247, 254, 255, 271, 370, 443, 620, 759, 761, 772, 803, 820, 827, 830], "32862675": [237, 620], "67780113": [237, 620], "11246294": [237, 620], "42839241": [237, 620], "52050018": [237, 620], "16799599": [237, 620], "30787992": [237, 620], "43796915": [237, 620], "98667163": [237, 620], "79690808": [237, 620], "88020504": [237, 620], "91031402": [237, 620], "95228523": [237, 620], "96610528": [237, 620], "cut": [238, 240, 280, 281, 282, 285, 620, 805, 845, 862], "08553692": [238, 620], "567": [238, 620], "00344786": [238, 620], "76297021": [238, 620], "197948": [238, 620], "53253174": [238, 620], "accur": [240, 258, 620, 625, 673, 824], "fdlibm": [240, 258, 620], "compliant": [240, 258, 263, 264, 329, 330, 365, 620, 635, 748, 749, 750, 752], "potenti": [240, 258, 620, 800, 805, 806, 814, 815, 827, 834, 859], "632": [240, 620], "20e": [240, 620], "72e": [240, 620, 764], "greatest": [241, 242, 245, 620], "pep": [242, 620, 822], "disambigu": [242, 620, 825], "former": [242, 620, 806, 815, 818, 827], "latter": [242, 620, 806, 809, 811, 815, 818, 827], "overload": [242, 620, 830], "led": [242, 620, 809, 858], "subtl": [242, 620, 815, 862], "bug": [242, 620, 800, 805, 807, 812, 820, 821, 827, 830, 842], "ambigu": [242, 620], "semant": [242, 277, 371, 482, 620, 815, 835, 840, 845, 857], "ill": [242, 620, 766], "surpris": [242, 620, 841], "arrau": [248, 620], "log_": [257, 259, 620], "742": [258, 620], "negat": [270, 332, 365, 620], "52095687": [273, 620], "92457771": [273, 620], "49372482": [273, 620], "22738838": [273, 620], "156": [273, 620, 764], "5877228": [273, 620], "189": [274, 620, 629, 706], "252": [274, 620], "378": [274, 620], "1150": [274, 620], "2890": [274, 620], "172": [274, 620], "487": [274, 620, 624, 648], "344": [274, 620], "355j": [275, 332, 365, 620], "55j": [275, 332, 365, 620], "primarili": [277, 620, 805, 813, 856], "reason": [277, 286, 620, 805, 807, 809, 810, 813, 814, 815, 817, 823, 826, 827, 830, 831, 833, 835, 837, 846, 862], "counterpart": [278, 620, 813, 824], "deliber": [278, 620, 833], "imprecis": [278, 620], "5654": [278, 620], "034": [278, 620], "433": [278, 606, 608, 620, 623], "signum": [279, 620], "textrm": [279, 620], "932": [280, 620], "746": [280, 620], "657": [280, 530, 620, 622], "indistinguish": [282, 620], "convent": [282, 620, 625, 635, 665, 747, 807, 811, 822, 831, 845, 862], "infti": [282, 620], "32455532": [282, 620], "89897949": [282, 620], "169": [282, 620], "analyt": [285, 620, 856, 858, 862], "pole": [285, 620], "546": [285, 620, 624, 648], "916": [285, 620, 626, 684], "996": [285, 620], "histor": [286, 620], "stem": [286, 620, 826], "older": [286, 620], "advis": [286, 620, 827], "462": [286, 620], "604": [286, 620], "984": [286, 620], "997": [286, 620], "0375": [288, 620], "032": [288, 620], "57258511": [291, 360], "69999999": [291, 360, 613, 623], "90928203": [291, 360], "98772264": [291, 360], "99591321": [291, 360], "99863964": [291, 360], "69880581": [291, 360], "18126924": [291, 360], "79999995": [292, 301, 304, 360], "70000005": [292, 304, 360], "hardtanhx": [293, 360], "20141329": [295, 360], "40318608": [295, 360], "48683619": [295, 360], "46328247": [295, 360], "59813893": [295, 360], "43748799": [295, 360], "parametr": [296, 360, 809, 830, 856], "71589994": [298, 302, 360], "14324772": [298, 302, 360], "70648694": [298, 302, 360], "54488957": [298, 302, 360], "10740992": [298, 302, 360], "19514863": [298, 302, 360], "6705687": [299, 360], "52016652": [299, 360], "40560818": [299, 360], "45630932": [299, 360], "2689": [300, 360], "7310": [300, 360], "7615": [300, 360], "2784": [300, 360], "7168": [300, 360], "8708": [300, 360], "4374": [300, 360], "1379": [300, 360], "0089": [300, 360], "59999991": [301, 360], "03597236": [303, 360], "43827677": [303, 360], "80100036": [303, 360], "12954807": [303, 360], "76459098": [303, 360], "20044947": [303, 360], "60000372": [303, 360], "taper": [306, 309, 362], "summat": [306, 362, 635, 747, 793, 794], "leakag": [306, 362], "wors": [306, 362, 846], "y1": [307, 362], "0800": [308, 362], "3979": [308, 362], "9121": [308, 362], "5400": [308, 362], "han": [309, 362], "ith": [310, 362], "00726415": [311, 362], "9999736": [311, 362], "2773e": [312, 362], "0172e": [312, 362], "9294e": [312, 362], "4149": [312, 362], "9138": [312, 362], "5529": [312, 362], "multidimension": [314, 315, 362, 856], "normalise_factor": [317, 318, 362], "parafac2": [318, 362], "tr": [319, 362], "context": [319, 362, 562, 622, 805, 806, 807, 811, 815, 816, 817], "38268346": [327, 362], "38268352": [327, 362], "8563191": [327, 362], "14943568": [327, 362], "paddlepaddl": [329, 330, 365, 806], "cn": [329, 330, 365], "zh": [329, 330, 365], "amax_cn": [329, 365], "sentinel": [329, 330, 365, 635, 748, 750], "amin_cn": [330, 365], "position": [339, 365], "triangl": [343, 365], "999999e": [344, 365], "65999985": [346, 365], "52000046": [346, 365], "1500001": [346, 365, 535, 622], "11259177": [347, 365], "3574118": [347, 365], "20097363": [347, 365], "suppli": [351, 365, 371, 474, 793, 810, 812, 830], "217234": [352, 365], "hurwitz": [355, 365], "custom_grad_func": [357, 367], "bind": [357, 367, 805, 825, 855, 856], "upstream": [357, 367, 806, 807, 809, 820, 825], "primal": [358, 359, 367], "jacobian": [358, 359, 367, 608, 623, 841, 856], "cotang": [359, 367], "stanh": 360, "ndenumer": 362, "ndindex": 362, "random_cp": 362, "random_parafac2": 362, "random_tr": 362, "random_tt": 362, "random_tuck": 362, "bind_custom_gradient_funct": [367, 825], "jvp": 367, "vjp": 367, "area_interpol": 368, "01823380e": [368, 389, 399], "15385818e": [368, 389, 399], "36371466e": [368, 389, 399], "38763905e": [368, 389, 399], "60722279e": [368, 389, 399], "80319249e": [368, 389, 399], "05617893e": [368, 389, 399], "21500000e": [368, 389, 399], "24000015e": [368, 389, 399], "90734863e": [368, 389, 399], "10000420e": [368, 389, 399], "15899994e": [368, 389, 399], "24000053e": [368, 389, 399], "81469727e": [368, 389, 399], "09999847e": [368, 389, 399], "4135742": [368, 389, 399], "6779785": [368, 389, 399], "3770599": [368, 389, 399], "8719864": [368, 389, 399], "72109985": [368, 389, 399], "52869415": [368, 389, 399], "79182434": [368, 389, 399], "72489166": [368, 389, 399], "container_n": [368, 389, 399], "container_typ": [368, 389, 399, 622], "container_norm": [368, 389, 399], "1580677": [368, 389], "89422607": [368, 389], "86190414": [368, 389], "00041008": [368, 389], "75149155": [368, 389], "97056389": [368, 389], "87819386": [368, 389], "89381361": [368, 389], "50000000e": [368, 389, 399, 764], "22044605e": [368, 389, 399], "ed": [368, 391, 392, 393], "rest": [368, 371, 391, 392, 393, 460, 806, 812, 814, 830, 840, 858], "5d": [368, 393, 780], "emb": [368, 394], "51285338": [368, 394], "87183261": [368, 394], "2308116": [368, 394], "02733949e": [368, 395], "00j": [368, 395], "49660576e": [368, 395], "68178638e": [368, 395], "01j": [368, 395, 400], "98912367e": [368, 395], "21802426e": [368, 395, 400], "04549134e": [368, 395, 400], "82842712e": [368, 395, 400], "86902654e": [368, 395, 400], "25501143e": [368, 395, 400], "32978028e": [368, 395, 400], "52068201e": [368, 395, 400], "71158374e": [368, 395, 400], "generate_einsum_equ": 368, "get_interpolate_kernel": 368, "27279224e": [368, 399], "44232273e": [368, 399], "70464332e": [368, 399], "73454881e": [368, 399], "00902849e": [368, 399], "10039906e": [368, 399], "07022366e": [368, 399], "69506073": [368, 399], "93914604": [368, 399], "88008881": [368, 399], "18951607": [368, 399], "57439613": [368, 399], "15318303e": [368, 400], "15148591e": [368, 400], "19j": [368, 400], "25000000e": [368, 400], "35378602e": [368, 400], "02j": [368, 400], "65404249e": [368, 400], "17611649e": [368, 400], "24320230e": [368, 400], "79344813e": [368, 400], "22374531e": [368, 400], "45929364e": [368, 400], "14208718e": [368, 400], "07177031e": [368, 400], "indexerror": [368, 401, 412, 627, 690, 795, 819], "interp": [368, 833], "xp": [368, 402, 809], "fp": [368, 402], "nd": [368, 403], "tf_bicub": [368, 403, 833], "nearest_interpol": 368, "window_shap": [368, 409], "pool_typ": [368, 409], "irfft": [368, 411], "silent": [368, 411], "discard": [368, 411, 814], "639999": [368, 411], "516063j": [368, 411], "3999999": [368, 411], "3999996": [368, 411], "99038106j": [368, 412], "33012702": [368, 412], "23205081j": [368, 412], "33012702j": [368, 412], "superdiagon": [369, 419, 625, 657], "subdiagon": [369, 419, 625, 657], "eigendecomposit": [369, 421, 625, 659, 660], "qlq\u1d40": [369, 421, 625, 659, 660], "tridiagon": [369, 422], "38196602": [369, 422], "61803389": [369, 422], "35048741": [369, 422], "56710052": [369, 422], "06693714": [369, 422], "74234426": [369, 422], "56155282": [369, 422], "56155276": [369, 422], "82842714": [369, 422], "82842731": [369, 422, 625, 660], "necessarili": [369, 423, 810, 813], "generalis": [369, 424], "skip_matrix": [369, 427, 429], "khatri_rao_product": [369, 427], "kronecker_product": [369, 429], "n_column": [369, 429], "nnmf": [369, 430], "hoi": [369, 435, 441], "solve_triangular": 369, "unit_diagon": [369, 436], "solut": [369, 436, 625, 674, 764, 800, 803, 805, 806, 807, 813, 815, 820, 828, 830, 833, 854, 858], "determinist": [369, 437], "borrow": [369, 437, 808], "extmath": [369, 437], "ivan": [369, 438], "oseledet": [369, 438], "scientif": [369, 438, 856], "2295": [369, 438], "2317": [369, 438], "2011": [369, 438], "convention": [370, 444, 859], "issu": [370, 444, 779, 801, 802, 803, 804, 806, 809, 811, 812, 814, 815, 816, 817, 819, 820, 827, 830, 831, 833, 835, 839, 841, 847, 849], "explicit": [370, 371, 444, 482, 806, 813, 815, 825, 826, 827, 835, 841, 856], "555969": [370, 444], "223876": [370, 444], "111938": [370, 444], "42649534": [370, 444], "68651628": [370, 444], "51119184": [370, 444], "59967244": [370, 444], "mae": [370, 445], "91097307": [370, 447], "3467": [370, 448], "0133": [370, 448], "0250": [370, 448], "0056": [370, 448], "0025": [370, 448], "0675": [370, 448], "6987": [370, 449], "1606": [370, 449], "3711": [370, 449], "4032": [370, 449], "6931": [370, 449], "whilst": [371, 452, 453, 454, 840, 843, 856], "ary3": [371, 454], "check_scalar": 371, "force_integ": [371, 456], "force_posit": [371, 456], "mod": [371, 457, 809], "tall": [371, 463], "appear": [371, 465, 466, 602, 622, 806, 807, 809, 827, 833, 849], "horizot": [371, 470], "shortcut": [371, 474, 806], "linear_ramp": [371, 474], "reflect": [371, 474, 807, 810, 826, 830], "ramp": [371, 474], "mirror": [371, 474, 805, 856], "padding_func": [371, 474], "iaxis_pad_width": [371, 474], "iaxi": [371, 474], "unalt": [371, 474], "put": [371, 479, 800, 805, 830, 841, 862], "mul": [371, 479, 826, 837], "conceptu": [371, 482, 852, 857], "concern": [371, 482, 807, 808, 813, 815, 817, 826, 833, 834, 862], "regard": [371, 482, 804, 813, 827, 828, 833, 846], "mutat": [371, 482], "elimin": [371, 487, 806], "consecut": [371, 487], "batch_mean": [374, 490, 492], "batch_var": [374, 490, 492], "running_vari": [374, 490, 492], "local_response_norm": 374, "neighbour": [374, 495], "42857143": [374, 496], "5714286": [374, 496], "multivari": [375, 499], "bayesian": [375, 499], "supposedli": [378, 503], "indirect": [378, 504], "secondari": [378, 504], "is_ivy_sparse_arrai": 379, "is_native_sparse_arrai": 379, "native_sparse_arrai": 379, "coo_indic": [379, 507], "crow_indic": [379, 507], "col_indic": [379, 507], "ccol_indic": [379, 507], "row_indic": [379, 507], "dense_shap": [379, 507], "native_sparse_array_to_indices_values_and_shap": 379, "nativesparsearrai": 379, "sparsearrai": 379, "linalg": [380, 511, 625, 673, 674, 805, 826, 828], "aw": [380, 511, 846], "48447205": [380, 511], "c0": [380, 514], "ck": [380, 514], "c2": [380, 514], "nearest_jax": [380, 521], "trace_on_next_step": [525, 622, 784, 839], "recalcul": [528, 622], "my_sum": [528, 622], "val1": [528, 622], "val2": [528, 622], "cached_sum": [528, 622], "line_eq": [528, 622], "slp": [528, 622], "itc": [528, 622], "cached_line_eq": [528, 622], "0353": [529, 622], "424": [529, 622], "176": [529, 622], "339": [529, 622], "271": [529, 622], "391": [529, 622], "417": [530, 622], "583": [530, 622], "0667": [530, 622], "267": [530, 622], "131": [530, 622], "263": [530, 622], "394": [530, 622, 631, 731], "526": [530, 622], "788": [530, 622], "default_str": [533, 622], "46999979": [534, 622], "66000009": [534, 622], "93000001": [534, 622], "29000092": [534, 622], "33999991": [534, 622], "6400001": [534, 622], "96000004": [534, 622], "36000013": [534, 622], "51999998": [534, 622], "67000008": [534, 622], "suppos": [534, 622, 815, 830], "960": [534, 622], "3600": [534, 622], "h1": [534, 622], "w1": [534, 622], "40499985": [535, 622], "61000061": [535, 622], "max_depth": [546, 622], "seen_set": [546, 622], "local_set": [546, 622], "referr": [546, 622], "redund": [546, 622, 800, 815, 819, 827, 849], "example_funct": [546, 622], "ref_id_1": [546, 622], "ref_id_2": [546, 622], "ref_id_3": [546, 622], "ivyexcept": [551, 583, 622, 795, 816, 819, 824, 826, 827, 831], "allow_dupl": [561, 622], "fork": [562, 622, 801, 805, 809, 814, 820], "forkserv": [562, 622], "spawn": [562, 622], "mp_default": [562, 622], "defaultcontext": [562, 622], "0x7f4e3193e520": [562, 622], "mp_fork": [562, 622], "forkcontext": [562, 622], "0x7f4e3193e580": [562, 622], "mp_spawn": [562, 622], "spawncontext": [562, 622], "0x7f4e3193e5e0": [562, 622], "mp_forkserv": [562, 622], "forkservercontext": [562, 622], "0x7f4e3193e640": [562, 622], "garbag": [564, 622], "collector": [564, 622], "get_all_arrays_in_memori": [564, 622], "exception_trace_mod": [568, 591, 622, 832], "lenient": [569, 592, 622], "inplace_mod": [569, 592, 622], "break": [569, 622, 800, 811, 815, 822, 831, 841], "infus": [570, 622], "nestable_mod": [573, 595, 622, 832], "precise_mod": [574, 596, 622, 832], "shape_array_mod": [576, 598, 622, 832], "show_func_wrapper_trace_mod": [577, 599, 622, 832], "tmp_dr": [578, 622], "tmp_dir": [578, 600, 622, 832], "my_tmp": [578, 622], "49999999999975": [580, 622], "5015015015010504": [580, 622], "000444502911705e": [580, 622], "9999999999995j": [580, 622], "00000262": [581, 622], "15605032": [581, 622], "01208451j": [581, 622], "00048": [581, 622], "1296": [581, 622], "00864": [581, 622], "isn": [583, 622, 807, 824, 826, 838, 841, 858], "100000023841858": [585, 622], "200000047683716": [585, 622], "299999952316284": [585, 622], "400000095367432": [585, 622], "599999904632568": [585, 622], "hemant": [589, 622], "unset_shape_array_mod": [590, 622], "set_exception_trace_mod": [591, 622, 819], "set_min_bas": [593, 622], "set_min_denomin": [594, 622], "set_nestable_mod": [595, 622], "set_precise_mod": [596, 622], "set_queue_timeout": [597, 622], "set_shape_array_mod": [598, 622], "set_show_func_wrapper_trace_mod": [599, 622, 819], "set_tmp_dir": [600, 622], "my_dir": [600, 622], "451": [601, 622], "in_ax": [602, 622], "out_ax": [602, 622], "thereof": [602, 622], "summaris": [602, 622], "99999998": [603, 623], "19999998": [603, 623], "00000001": [603, 623], "00300001": [603, 623], "00800001": [603, 623], "0125": [603, 623], "17294501": [603, 623], "15770318": [603, 623], "20863818": [603, 623], "90000075": [604, 623], "90000164": [604, 623], "9000032": [604, 623], "50000012e": [604, 623], "92558754": [604, 623], "92558694": [604, 623], "92558682": [604, 623], "92558861": [604, 623], "60000025e": [604, 623], "01024": [604, 623], "retain_grad": [605, 623], "func_ret": [605, 623, 825], "666666": [605, 623], "333332": [605, 623], "66666675": [605, 613, 623], "argnum": [606, 623], "933": [606, 608, 623], "jac_fn": [608, 623], "639": [609, 623], "361": [609, 623], "52565837": [610, 623], "8418861": [610, 623], "68377209": [610, 623], "value_grad": [613, 623], "42333412": [613, 623], "5333333": [613, 623], "93333334": [613, 623], "43333334": [613, 623], "0666666": [613, 623], "softsign": 614, "718281828459045": 615, "euler": 615, "141592653589793": 615, "cmp_i": 616, "cmp_isnot": 616, "for_loop": 616, "if_els": 616, "try_except": 616, "to_dlpack": 617, "as_ivy_dtyp": [618, 827], "as_native_dtyp": 618, "check_float": 618, "closest_valid_dtyp": 618, "default_dtyp": [618, 815, 823], "dtype_bit": 618, "function_supported_dtyp": [618, 815, 830], "function_unsupported_dtyp": [618, 815], "infer_default_dtyp": 618, "invalid_dtyp": [618, 815], "is_hashable_dtyp": 618, "is_native_dtyp": 618, "promote_typ": [618, 815], "promote_types_of_input": [618, 815, 826], "type_promote_arrai": [618, 815], "unset_default_complex_dtyp": 618, "unset_default_float_dtyp": 618, "unset_default_int_dtyp": 618, "unset_default_uint_dtyp": 618, "valid_dtyp": 618, "defaultcomplexdtyp": 618, "defaultdtyp": 618, "defaultfloatdtyp": 618, "defaultintdtyp": 618, "defaultuintdtyp": 618, "as_ivy_dev": [619, 837], "clear_cached_mem_on_dev": 619, "dev_util": [619, 816], "function_supported_devic": 619, "function_unsupported_devic": 619, "get_all_ivy_arrays_on_dev": [619, 816], "handle_soft_device_vari": [619, 816], "num_cpu_cor": [619, 816], "num_gpu": [619, 816, 830], "num_ivy_arrays_on_dev": 619, "percent_used_mem_on_dev": 619, "print_all_ivy_arrays_on_dev": 619, "set_split_factor": [619, 819], "split_func_cal": 619, "total_mem_on_dev": [619, 816], "tpu_is_avail": 619, "unset_default_devic": [619, 816], "unset_soft_device_mod": [619, 816], "used_mem_on_dev": 619, "defaultdevic": [619, 816], "profil": 619, "save_dir": 619, "arg_info": 622, "arg_nam": 622, "cache_fn": [622, 823], "current_backend_str": [622, 830, 835, 837], "function_supported_devices_and_dtyp": 622, "function_unsupported_devices_and_dtyp": 622, "get_item": [622, 826], "get_referrers_recurs": 622, "inplace_arrays_support": 622, "inplace_variables_support": 622, "is_ivy_nested_arrai": 622, "isscalar": 622, "match_kwarg": 622, "num_arrays_in_memori": 622, "print_all_arrays_in_memori": 622, "set_item": 622, "to_ivy_shap": 622, "to_native_shap": 622, "try_else_non": 622, "unset_array_mod": [622, 832], "unset_exception_trace_mod": 622, "unset_inplace_mod": 622, "unset_min_bas": 622, "unset_min_denomin": 622, "unset_nestable_mod": 622, "unset_precise_mod": 622, "unset_queue_timeout": 622, "unset_show_func_wrapper_trace_mod": 622, "unset_tmp_dir": 622, "vmap": [622, 841, 856], "arraymod": 622, "precisemod": [622, 815], "jac": 623, "value_and_grad": [623, 825], "neural": [624, 776, 780, 800, 850, 852, 854, 855, 856, 860, 862, 863], "feature_group_count": [624, 637, 644, 645], "oiw": [624, 637, 638, 644], "oihw": [624, 637, 640, 644], "oidhw": [624, 637, 642, 644], "dhwio": [624, 637, 638, 642, 644], "conv_general_dil": [624, 827], "conv_general_transpos": 624, "depthwis": [624, 646, 766, 780], "overfit": [624, 647], "overal": [624, 647, 794, 813, 815, 816, 818, 840, 849, 852, 854, 855, 856], "1428566": [624, 647], "49000001": [624, 647], "55599999": [624, 647], "21000004": [624, 647], "incom": [624, 648], "666": [624, 625, 648, 666], "4269": [624, 648], "911": [624, 648, 819], "157": [624, 648], "753": [624, 648], "545": [624, 631, 648, 729], "547": [624, 648, 816], "124": [624, 648], "963": [624, 648], "98495483": [624, 648], "0293808": [624, 648], "0159359": [624, 648], "74752808": [624, 648], "20942307": [624, 648], "3205719": [624, 648], "long": [624, 649, 806, 807, 814, 815, 817, 819, 820, 827, 835, 856], "lstm": [624, 649, 780, 835, 856], "batch_first": [624, 650], "multi": [624, 625, 650, 655, 766, 780, 817, 834, 841, 852, 854, 856, 860], "paper": [624, 650, 800, 847], "vaswani": [624, 650], "al": [624, 650], "num_attention_head": [624, 650], "key_dim": [624, 650, 780], "value_dim": [624, 650, 780], "attention_weight": [624, 650], "unbatch": [624, 650], "nm": 624, "box": [624, 651, 652, 806], "iou_threshold": [624, 651], "max_output_s": [624, 651], "score_threshold": [624, 651], "roi_align": 624, "spatial_scal": [624, 652], "sampling_ratio": [624, 652], "23333359": [624, 653], "03946018": [624, 653], "0280633": [624, 653], "29981947": [624, 653], "29981089": [624, 653], "06345534": [624, 653], "9634552": [624, 653], "19336844": [624, 653], "09336829": [624, 653], "axisa": [625, 655], "axisb": [625, 655], "axisc": [625, 655], "293": [625, 656], "46997": [625, 656], "explicitli": [625, 660, 661, 677, 761, 780, 781, 782, 803, 809, 810, 811, 813, 815, 818, 819, 820, 823, 824, 825, 826, 828, 830, 835, 841, 850, 856], "17157288": [625, 660], "9238795": [625, 660], "78930789": [625, 660], "59803128": [625, 660], "19127655": [625, 660], "31213903": [625, 660], "63418275": [625, 660], "84632206": [625, 660], "70548367": [625, 660], "70223427": [625, 660], "09570674": [625, 660], "63116378": [625, 660], "56109613": [625, 660], "53554028": [625, 660], "32237405": [625, 660], "43822157": [625, 660], "83906901": [625, 660], "50766778": [625, 660], "71475857": [625, 660], "48103389": [625, 660], "3676433": [625, 660], "68466955": [625, 660], "62933773": [625, 660], "77917379": [625, 660], "14264561": [625, 660], "61036086": [625, 660], "45033181e": [625, 661], "02829754e": [625, 661], "54220343e": [625, 661], "12647155e": [625, 661], "38447177e": [625, 661], "56155300e": [625, 661], "26794919": [625, 661], "7320509": [625, 661], "0012": [625, 663], "00342": [625, 663], "000565": [625, 663], "0104": [625, 663], "000981": [625, 663], "00282": [625, 663], "000766": [625, 663], "0322": [625, 663], "00237": [625, 663], "000151": [625, 663], "00101": [625, 663], "00019": [625, 663], "0214": [625, 663], "00171": [625, 663], "0107": [625, 663], "0167": [625, 663], "0472": [625, 663], "0536": [625, 663], "0177": [625, 663], "000429": [625, 663], "00762": [625, 663], "lu_factor": 625, "pivot": [625, 664], "lu": [625, 664], "frobeniu": [625, 666], "nuclear": [625, 666], "induc": [625, 666], "ranl": [625, 666], "47722558": [625, 666], "776": [625, 666], "6000004": [625, 666], "118": [625, 667], "moor": [625, 671], "penros": [625, 671], "31622776": [625, 672], "94868332": [625, 672], "1622777": [625, 672], "42718887": [625, 672], "deteremin": [625, 673], "logsabsdet": [625, 673], "subject": [625, 673], "ordin": [625, 674], "b2": [625, 674], "usvh": [625, 675], "cetera": [625, 675], "driver": [625, 676, 841], "cusolv": [625, 676], "gesvd": [625, 676], "gesvdj": [625, 676], "gesvda": [625, 676], "86217213": [625, 676], "31816804": [625, 676], "615": [625, 676], "ss": [625, 676], "25994301": [625, 676], "16403675": [625, 676], "61529762": [625, 676], "51231241": [625, 676], "39777088": [625, 676], "15413129": [625, 676], "1029852": [625, 676], "01383495": [625, 676], "86647356": [625, 676], "7786541": [625, 676], "55970621": [625, 676], "16857576": [625, 676], "86412698": [625, 676], "37566757": [625, 676], "88477993": [625, 676], "95925522": [625, 676], "6444726": [625, 676], "54687881": [625, 676], "16134834": [625, 676], "35037804": [625, 676], "31025076": [625, 676], "35769391": [625, 676], "transposit": [625, 677], "success": [625, 635, 679, 751, 753, 806, 814, 846], "0x": [625, 680], "Such": [625, 680, 823, 830], "progress": [625, 680, 806, 807, 840], "alexandr": [625, 680], "theophil": [625, 680], "dot_product": [625, 681], "9000001": [625, 682], "64158917": [625, 682], "skew": [625, 683], "6666193": [626, 684], "67164493e": [626, 684], "05471958e": [626, 684], "32684899e": [626, 684], "30496836e": [626, 684], "05393649": [626, 684], "49992943": [626, 684], "83330965": [626, 684], "35667494": [626, 686], "79329094": [626, 686], "512926": [626, 686], "outsid": [627, 687, 698, 815, 816, 823, 837, 861], "honor": [627, 694], "beyond": [627, 695, 818, 827, 862], "famili": [627, 698], "intxx": [627, 698], "floatxx": [627, 698], "rep": [627, 700], "fomaml_step": 628, "inner_cost_fn": [628, 703, 704, 705], "outer_cost_fn": [628, 703, 704], "inner_grad_step": [628, 703, 704, 705], "inner_learning_r": [628, 703, 704, 705], "inner_optimization_step": [628, 703, 704, 705], "inner_batch_fn": [628, 703, 704], "outer_batch_fn": [628, 703, 704], "average_across_step": [628, 703, 704], "inner_v": [628, 703, 704], "keep_inner_v": [628, 703, 704], "outer_v": [628, 703, 704], "keep_outer_v": [628, 703, 704], "return_inner_v": [628, 703, 704, 705], "num_task": [628, 703, 704, 705], "maml": [628, 703, 704], "0x7f7618dd3010": [628, 703, 704, 705], "maml_step": 628, "vanilla": [628, 704, 839, 856], "_variabl": [628, 704, 705], "sub_batch": [628, 704], "40069818": [628, 704], "13723135": [628, 704], "reptile_step": 628, "cost_fn": [628, 705], "reptil": [628, 705], "batch_in": [628, 705], "4485182": [628, 705], "139": [628, 705], "9569855": [628, 705], "9880483": [628, 705], "01766968": [628, 705], "02197957": [628, 705], "02197981": [628, 705], "all_nested_indic": 629, "include_nest": [629, 706], "_index": [629, 706, 717], "_base": [629, 706, 716, 717, 826], "themselv": [629, 706, 805, 813, 815, 816, 818, 823, 827, 839, 853, 862], "863": [629, 706, 816], "672": [629, 706], "482": [629, 706], "674": [629, 706], "341": [629, 706], "copy_nest": 629, "to_mut": [629, 707, 718], "deepli": [629, 707, 841, 856], "copied_nest": [629, 707], "1337": [629, 707, 718], "duplicate_array_index_chain": 629, "index_nest": [629, 823], "insert_into_nest_at_index": 629, "insert_into_nest_at_indic": 629, "onto": [629, 712, 718, 844, 845, 856], "special_squar": [629, 712], "6666666666666667": [629, 712], "special_pow": [629, 712], "linear_model": [629, 712], "map_nest_at_index": 629, "_result": [629, 713, 723], "hh": [629, 713, 718], "map_nest_at_indic": 629, "ub": [629, 714], "tb": [629, 714], "multi_index_nest": 629, "nested_ani": 629, "check_nest": [629, 716, 717], "nested_argwher": 629, "stop_after_n_found": [629, 717], "nested_indic": [629, 717], "nested_map": [629, 816, 823], "_tuple_check_fn": [629, 718], "_list_check_fn": [629, 718], "_dict_check_fn": [629, 718], "wherebi": [629, 718, 805, 853], "ah": [629, 718], "bh": [629, 718], "ch": [629, 718], "dh": [629, 718, 809], "eh": [629, 718], "gh": [629, 718, 806, 820], "ih": [629, 718], "1338": [629, 718], "nested_multi_map": 629, "index_chain": [629, 719], "nest0": [629, 719], "ivy_arrai": [629, 719, 810, 827], "unappli": [629, 719], "prune_empti": 629, "prune_nest_at_index": 629, "prune_nest_at_indic": 629, "set_nest_at_index": 629, "set_nest_at_indic": 629, "xyz": [629, 724], "pqr": [629, 724], "mini": [630, 725, 780, 783], "uniformli": [631, 727, 729], "22346112": [631, 728], "0922": [631, 728], "9213753": [631, 728], "12818667": [631, 728], "799": [631, 728], "469": [631, 728], "287": [631, 728], "0366": [631, 728], "26431865": [631, 729], "475": [631, 729], "878": [631, 729], "861": [631, 729], "929": [631, 729], "789": [631, 729], "519": [631, 729], "0435": [631, 729], "381": [631, 729], "4608004": [631, 729], "8458502": [631, 729], "67270088": [631, 729], "31128597": [631, 729], "zeroel": [632, 735], "guarante": [633, 737, 739, 810, 815, 826, 841, 847], "fourth": [633, 737], "1141": [633, 737], "8101": [633, 737], "9298": [633, 737], "8460": [633, 737], "2119": [633, 737], "3519": [633, 737], "6252": [633, 737], "4033": [633, 737], "7443": [633, 737], "2577": [633, 737], "3707": [633, 737], "0545": [633, 737], "3238": [633, 737], "5944": [633, 737], "0775": [633, 737], "4327": [633, 737], "62519997": [633, 737], "40329999": [633, 737], "59439999": [633, 737], "74430001": [633, 737], "81010002": [633, 737], "84600002": [633, 737], "92979997": [633, 737], "einstein": [635, 747, 793], "117": [635, 747], "intend": [635, 753, 762, 779, 809, 822, 825, 854, 856, 860, 861], "07472222": [635, 754], "00666667": [635, 754], "08966666": [635, 754], "simplicit": [636, 755, 756], "ivy_test": [759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 805, 806, 807, 809, 812, 814, 820, 828], "test_ivi": [759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 805, 806, 807, 812, 814, 820, 828, 830], "assert_all_clos": [759, 828], "ret_np": [759, 761, 828], "ret_from_gt_np": [759, 828], "ground_truth_backend": [759, 761, 762, 771, 772, 803, 820, 828], "mark": [759, 805, 807, 809, 830, 835], "assert_same_typ": 759, "ret_from_target": 759, "ret_from_gt": 759, "backend_to_test": [759, 761, 803, 820, 828], "gt_backend": 759, "with_backend": [759, 789], "assert_same_type_and_shap": 759, "this_key_chain": 759, "check_unsupported_devic": 759, "input_devic": 759, "all_as_kwargs_np": [759, 761], "presenc": [759, 813, 826], "check_unsupported_device_and_dtyp": 759, "input_dtyp": [759, 761, 771, 803, 820, 828, 830], "check_unsupported_dtyp": 759, "test_unsupported_funct": 759, "value_test": 759, "ret_np_flat": 759, "ret_np_from_gt_flat": 759, "specific_tolerance_dict": 759, "ret_from_np_gt_flat": 759, "function_test": 761, "args_to_contain": 761, "array_arg": [761, 823], "args_to_frontend": 761, "frontend_array_fn": 761, "arrays_to_frontend": 761, "as_list": 761, "convtru": 761, "nativeclass": 761, "counter": [761, 839], "create_args_kwarg": 761, "args_np": 761, "arg_np_val": 761, "args_idx": 761, "kwargs_np": 761, "kwarg_np_val": 761, "kwargs_idx": 761, "test_flag": [761, 803, 820, 828, 830], "on_devic": [761, 771, 803, 820, 828], "flatten_and_to_np": 761, "flatten_frontend": 761, "flatten_frontend_fw_to_np": 761, "frontend_ret": [761, 828], "isscalar_func": 761, "is_native_array_func": 761, "to_numpy_func": 761, "flatten_frontend_to_np": 761, "get_frontend_ret": 761, "frontend_fn": 761, "frontend_array_funct": 761, "precision_mod": [761, 771, 772, 820], "test_trac": [761, 771, 772, 803, 809, 820], "get_ret_and_flattened_np_arrai": 761, "gradient_incompatible_funct": 761, "gradient_test": [761, 830], "rtol_": [761, 803, 820], "atol_": [761, 803, 820, 828], "tolerance_dict": 761, "gradient_unsupported_dtyp": 761, "kwargs_to_args_n_kwarg": 761, "num_positional_arg": [761, 771, 772, 803, 820, 828, 830], "port": [761, 847], "test_frontend_funct": [761, 828], "fn_tree": [761, 762, 772, 803, 820, 827, 828, 830], "gt_fn_tree": [761, 772], "test_valu": [761, 828, 830], "frontend_function_flag": [761, 771], "functiontestflag": [761, 771, 803, 820], "with_out": [761, 771, 803, 820, 828, 830], "instance_method": [761, 771, 803, 820, 830], "as_vari": [761, 771, 803, 820, 828, 830], "namespac": [761, 805, 815, 824, 827, 828, 831, 835, 840], "test_frontend_method": [761, 828], "init_input_dtyp": [761, 828], "method_input_dtyp": [761, 828], "init_flag": [761, 828, 830], "method_flag": [761, 771, 828, 830], "init_all_as_kwargs_np": [761, 828], "method_all_as_kwargs_np": [761, 828], "frontend_method_data": [761, 828], "init_as_variable_flag": [761, 772], "dictat": [761, 810, 817, 822, 826], "init_num_positional_arg": [761, 772], "init_native_array_flag": 761, "with_v": 761, "ret_gt": 761, "test_funct": [761, 803, 806, 807, 814, 820, 828, 830], "fn_name": [761, 762, 772, 803, 811, 820, 828, 830], "return_flat_np_arrai": 761, "as_variable_flag": [761, 772, 830], "native_array_flag": [761, 772, 830], "container_flag": [761, 771, 772, 830], "test_function_backend_comput": 761, "test_function_ground_truth_comput": 761, "arg_np_arrai": 761, "arrays_args_indic": 761, "arrays_kwargs_indic": 761, "kwarg_np_arrai": 761, "test_gradient_backend_comput": 761, "test_gradient_ground_truth_comput": 761, "test_method": 761, "method_nam": [761, 770, 772, 828], "init_with_v": 761, "method_with_v": 761, "test_gradi": [761, 771, 772, 803, 820, 830], "method_as_variable_flag": [761, 772], "method_num_positional_arg": [761, 772], "method_native_array_flag": 761, "method_container_flag": [761, 772], "test_method_backend_comput": 761, "test_method_ground_truth_comput": 761, "org_con_data": 761, "args_np_method": 761, "met_arg_np_v": 761, "met_args_idx": 761, "kwargs_np_method": 761, "met_kwarg_np_v": 761, "met_kwargs_idx": 761, "v_np": 761, "traced_if_requir": 761, "wrap_frontend_function_arg": 761, "holder": 762, "current_frontend_config": 762, "0x7f760c311d80": 762, "interruptedtest": 762, "test_interrupt": 762, "baseexcept": 762, "tri": [762, 815], "testdata": 762, "supported_device_dtyp": 762, "is_method": 762, "setup_api_test": 762, "test_data": 762, "setup_frontend_test": 762, "teardown_api_test": 762, "teardown_frontend_test": 762, "hypothesis_help": [764, 765, 766, 767], "array_help": 764, "array_and_broadcastable_shap": 764, "searchstrategi": [764, 765, 766, 767, 771, 772, 830], "array_bool": [764, 830], "min_valu": [764, 765, 766, 767, 803, 820, 828, 830], "max_valu": [764, 765, 766, 767, 828, 830], "ex": [764, 765, 766, 767, 772, 814, 850], "strategi": [764, 765, 766, 767, 771, 772, 805, 828], "array_helpers_dtype_info_help": 764, "kind_dtyp": [764, 766], "array_indices_axi": 764, "array_dtyp": [764, 765, 830], "indices_dtyp": 764, "get_dtyp": [764, 765, 803, 820, 828, 830], "disable_random_axi": 764, "axis_zero": 764, "allow_inf": [764, 767, 828, 830], "min_num_dim": [764, 766, 828, 830], "max_num_dim": [764, 766, 828, 830], "min_dim_s": [764, 766, 828, 830], "max_dim_s": [764, 766, 828], "first_dimension_onli": 764, "indices_same_dim": 764, "valid_bound": 764, "hypothesi": [764, 766, 772, 805, 807, 809, 814, 824], "65536": 764, "44758124e": [764, 830], "array_indices_put_along_axi": 764, "values_dtyp": 764, "array_valu": [764, 830], "abs_smallest_v": [764, 766, 767], "allow_nan": [764, 767, 830], "allow_subnorm": [764, 767, 830], "exclude_min": [764, 767, 830], "exclude_max": [764, 767], "large_abs_safety_factor": [764, 766, 767, 803, 820, 828, 830], "small_abs_safety_factor": [764, 766, 767, 803, 820, 828], "safety_factor_scal": [764, 766, 767, 828, 830], "subnorm": [764, 767], "safeti": [764, 766, 767, 856], "0002": [764, 767], "get_shap": [764, 766, 828, 830], "1806": 764, "36912": 764, "6955": 764, "59576": 764, "1025": 764, "arrays_and_ax": 764, "available_dtyp": [764, 765, 803, 820, 828, 830], "allow_non": [764, 766, 828, 830], "return_dtyp": 764, "force_int_axi": 764, "26e": 764, "10e": 764, "24322108": 764, "26446279e": 764, "96046448e": 764, "008": 764, "17549435e": 764, "038": 764, "06541027e": 764, "13725760e": 764, "07143888": 764, "arrays_for_pool": 764, "min_dim": 764, "max_dim": 764, "min_sid": 764, "max_sid": 764, "explicit_or_str_pad": 764, "only_explicit_pad": 764, "return_dil": 764, "mixed_fn_compo": [764, 765, 766, 767, 830], "return_data_format": 764, "cond_data_gen_help": 764, "create_concatenable_arrays_dtyp": 764, "min_num_arrai": 764, "max_num_arrai": 764, "concat_dim": 764, "common_shap": [764, 830], "stackabl": 764, "given_common_shap": 764, "create_nested_input": 764, "leaf_valu": 764, "dtype_and_valu": [764, 803, 820, 828, 830], "num_arrai": [764, 765, 828, 830], "shared_dtyp": [764, 765, 828], "ret_shap": 764, "array_api_dtyp": [764, 765], "shape_kei": 764, "37915": 764, "6322": 764, "26765": 764, "12413": 764, "26986": 764, "34665": 764, "000e": 764, "711e": 764, "100e": 764, "955e": [764, 830], "40817": 764, "56193": 764, "29200": 764, "5851": 764, "9746": 764, "9604645e": 764, "103": 764, "41795": 764, "1170789994": 764, "44251": 764, "44209": 764, "433075925": 764, "24791": 764, "24691": 764, "24892": 764, "16711": 764, "972": 764, "15357": 764, "72057594037927936": 764, "dtype_array_queri": 764, "allow_mask": 764, "allow_neg_step": 764, "dtype_array_query_v": 764, "dtype_values_axi": [764, 830], "min_axi": 764, "max_axi": 764, "valid_axi": 764, "allow_neg_ax": 764, "min_axes_s": 764, "max_axes_s": 764, "force_tuple_axi": 764, "29788": 764, "62222885e": 764, "68281172e": 764, "257j": 764, "40129846e": 764, "90000000e": 764, "63426649e": 764, "91931887e": 764, "29488e": 764, "14361019e": 764, "12445": 764, "einsum_help": 764, "get_first_solve_batch_matrix": 764, "choose_adjoint": 764, "get_second_solve_batch_matrix": 764, "get_first_solve_matrix": 764, "allow_simplifi": 764, "choose_sid": 764, "xa": 764, "get_second_solve_matrix": 764, "list_of_s": 764, "sampled_from": [764, 828, 830], "min_siz": [764, 766, 772, 830], "max_siz": [764, 766, 772, 830], "size_bound": [764, 830], "999999999999999": 764, "9394938006792373": 764, "mutually_broadcastable_shap": 764, "num_shap": 764, "base_shap": 764, "dtype_help": 765, "univers": [765, 827, 845], "cast_filt": 765, "cast_filter_help": 765, "current_backend": [765, 789, 805, 811, 819, 823, 828, 831, 835], "get_castable_dtyp": 765, "castabl": 765, "prune_funct": 765, "intersect": [765, 814, 830], "signed_integ": 765, "real_and_complex": 765, "float_and_complex": 765, "general_help": 766, "broadcasterror": 766, "apply_safety_factor": 766, "embedding_help": 766, "general_helpers_dtype_info_help": 766, "get_axi": [766, 830], "allow_neg": 766, "sort_valu": 766, "force_tupl": 766, "force_int": 766, "assertionerror": [766, 803, 809, 819, 820, 828, 830], "get_bound": [766, 830], "get_mean_std": 766, "matrix_is_st": 766, "cond_limit": 766, "instabl": [766, 803, 815, 820], "computation": [766, 806], "prone": [766, 815], "thumb": 766, "gradual": 766, "strong": [766, 841, 846, 856], "collinear": 766, "reshape_shap": [766, 830], "two_broadcastable_shap": 766, "x_and_filt": 766, "number_help": 767, "arbitrarili": [767, 838], "safety_factor": 767, "backend_proc": 768, "input_queu": 768, "output_queu": 768, "frontend_proc": 768, "pipeline_help": 769, "backendhandl": 769, "update_backend": [769, 828], "backendhandlermod": 769, "enum": 769, "setbackend": 769, "withbackend": 769, "withbackendcontext": 769, "get_frontend_config": 769, "frontendmethoddata": 770, "ivy_init_modul": 770, "framework_init_modul": 770, "init_nam": 770, "test_parameter_flag": 771, "dynamicflag": [771, 772], "frontendfunctiontestflag": [771, 820], "with_copi": 771, "generate_frontend_arrai": [771, 772, 820], "testflag": 771, "apply_flag": 771, "args_to_iter": 771, "frontendinittestflag": 771, "frontendmethodtestflag": 771, "initmethodtestflag": 771, "methodtestflag": 771, "build_flag": 771, "frontend_init_flag": 771, "frontend_method_flag": 771, "function_flag": 771, "init_method_flag": 771, "testing_help": 772, "handle_frontend_method": [772, 828, 830], "class_tre": [772, 828], "init_tre": [772, 828], "init_native_arrai": 772, "_as_varaible_strategi": 772, "method_native_arrai": 772, "test_inplac": [772, 830], "_given_kwarg": 772, "test_compil": 772, "handle_frontend_test": [772, 828, 830], "alias": [772, 805, 827, 828], "number_positional_arg": [772, 828], "test_with_out": [772, 828, 830], "test_with_copi": 772, "handle_method": [772, 830], "method_tre": [772, 828, 830], "_gradient_strategi": 772, "handle_test": [772, 803, 820, 830], "test_instance_method": [772, 830], "num_positional_args_help": 772, "num_positional_args_method": 772, "geglu": 776, "leakyrelu": 776, "logsoftmax": 776, "from_flax_modul": 777, "native_modul": 777, "params_fx": 777, "rng_seed": 777, "constructor_arg": 777, "constructor_kwarg": 777, "instance_arg": 777, "instance_kwarg": 777, "flax": [777, 840, 841, 847, 856], "from_haiku_modul": 777, "params_hk": 777, "from_paddle_modul": 777, "from_torch_modul": 777, "dedic": [777, 822, 833, 837, 839], "to_keras_modul": 777, "native_module_class": 777, "modulehelp": [778, 782], "create_vari": [779, 839], "var_shap": [779, 839], "fan_out": [779, 839], "fan_in": [779, 839], "rectangular": 779, "firstlayersiren": 779, "siren": 779, "glorotuniform": [779, 780, 839], "glorot": 779, "xavier": 779, "neuron": 779, "w_1x_1": 779, "w_2x_2": 779, "w_nx_n": 779, "w_i": 779, "vanish": 779, "explod": [779, 844, 845], "kaimingnorm": 779, "fan_mod": [779, 839], "kaim": 779, "he": 779, "negative_slop": 779, "fan": 779, "propog": 779, "fan_sum": [779, 839], "Ones": 779, "randomnorm": 779, "stddev": 779, "w0": 779, "wlim": 779, "predefin": 779, "fan_avg": 779, "adaptiveavgpool1d": 780, "avgpool1d": 780, "implicit": [780, 813, 818, 827, 830, 835, 856], "avgpool2d": 780, "avgpool3d": 780, "e501": 780, "filter_s": 780, "weight_initi": [780, 839], "bias_initi": [780, 839], "0x7f7618a0e380": 780, "0x7f7618a0e3e0": 780, "conv1dtranspos": 780, "0x7f7618a0e440": 780, "0x7f7618a0e4a0": 780, "filter_shap": 780, "0x7f7618a0e500": 780, "0x7f7618a0e560": 780, "0x7f7618a0e5c0": 780, "0x7f7618a0e620": 780, "0x7f7618a0e740": 780, "0x7f7618a0e7a0": 780, "conv3dtranspos": 780, "0x7f7618a0e800": 780, "0x7f7618a0e860": 780, "depthwiseconv2d": 780, "num_channel": 780, "0x7f7618a0e680": 780, "0x7f7618a0e6e0": 780, "bernoul": 780, "num_embed": 780, "embedding_dim": 780, "padding_idx": 780, "lookup": 780, "num_embeddingss": 780, "renorm": 780, "insensit": 780, "num_lay": 780, "return_sequ": 780, "return_st": 780, "0x7f7618a0e8c0": 780, "get_initial_st": 780, "0x7f7618a0e2c0": 780, "0x7f7618a0e320": 780, "maxpool1d": 780, "maxpool3d": 780, "multiheadattent": 780, "embed_dim": 780, "head_dim": 780, "dropout_r": 780, "use_proj_bia": 780, "attention_ax": 780, "build_mod": [780, 781, 782], "on_init": [780, 782], "parallel": [780, 812, 856, 860, 861], "binarycrossentropyloss": 781, "store_var": [781, 782], "with_partial_v": [781, 782], "logpoissonloss": 781, "modulemeta": 782, "temporarili": [782, 803, 809, 820], "from_cal": 782, "module_dict": 782, "register_buff": 782, "register_paramet": 782, "weights_path": 782, "randomness_factor": 782, "with_edge_label": 782, "with_arg_label": 782, "with_output_label": 782, "output_connected_onli": 782, "highlight_subgraph": 782, "trace_kwarg": 782, "_unified_ivy_graph": 782, "_call": 782, "num_featur": 783, "trail": 783, "layernorm": 783, "normalized_shap": 783, "elementwise_affin": 783, "set_stat": [784, 839], "adamw": 784, "weight_decai": 784, "init_on_first_step": 784, "fallback_to_non_trac": 784, "ignore_miss": 784, "privat": [784, 827, 830], "_step": [784, 839], "stochast": [784, 856], "sub_modul": 785, "check_al": 786, "messag": [786, 795, 799, 806, 807, 814, 817, 819, 821, 827, 835, 837, 846], "check_all_or_any_fn": 786, "check_ani": 786, "check_dev_correct_format": 786, "check_dimens": 786, "check_elem_in_list": [786, 823, 826, 827], "elem": 786, "check_equ": [786, 827], "check_exist": 786, "check_fals": 786, "check_gather_input_valid": 786, "check_gather_nd_input_valid": 786, "check_great": 786, "allow_equ": [786, 819], "check_inplace_sizes_valid": [786, 826], "check_isinst": 786, "allowed_typ": 786, "check_kernel_padding_s": 786, "padding_s": 786, "check_less": [786, 819], "check_one_way_broadcast": 786, "check_same_dtyp": 786, "check_shapes_broadcast": 786, "check_tru": 786, "check_unsorted_segment_valid_param": 786, "ast_help": 788, "importtransform": 788, "nodetransform": 788, "impersonate_import": 788, "tree": [788, 815], "local_ivy_id": 788, "visit_import": 788, "visit_importfrom": 788, "ivyload": 788, "loader": [788, 838, 841], "exec_modul": 788, "ivypathfind": 788, "metapathfind": 788, "find_spec": 788, "fullnam": 788, "contextmanag": 789, "choose_random_backend": 789, "global_backend": 789, "dynamic_backend_convert": 789, "backend_stack": [789, 835], "prevent_access_loc": 789, "previous_backend": [789, 811], "unset": [789, 811, 835], "Or": [789, 800, 802, 826, 838], "set_backend_to_specific_vers": 789, "set_jax_backend": 789, "set_mxnet_backend": 789, "mx": 789, "set_numpy_backend": 789, "set_paddle_backend": 789, "set_tensorflow_backend": 789, "set_torch_backend": 789, "unset_backend": [789, 811], "sub_backend_handl": 790, "clear_sub_backend": 790, "find_available_sub_backend": 790, "sub_backends_loc": 790, "fn_name_from_version_specific_fn_nam": 790, "fn_name_from_version_specific_fn_name_sub_backend": 790, "sub_backend_vers": 790, "backend_vers": [790, 803, 815, 820], "set_sub_backend": 790, "sub_backend_str": 790, "set_sub_backend_to_specific_vers": 790, "sub_backend": 790, "unset_sub_backend": 790, "check_for_binari": 791, "cleanup_and_fetch_binari": [791, 806], "clean": [791, 807, 831, 835, 836, 838], "dynamic_import": 792, "import_modul": [792, 835], "einsum_pars": 793, "convert_interleaved_input": 793, "interleav": 793, "convert_subscript": 793, "old_sub": 793, "symbol_map": 793, "subscript": [793, 794], "oe": 793, "ellipsi": [793, 794], "find_output_shap": 793, "find_output_str": 793, "canon": 793, "gen_unused_symbol": 793, "abd": [793, 794], "get_symbol": 793, "letter": 793, "resort": 793, "unicod": 793, "charact": [793, 827, 846], "chr": 793, "surrog": 793, "\u0155": 793, "20000": 793, "\u4eac": 793, "has_valid_einsum_chars_onli": 793, "einsum_str": 793, "abaz": 793, "\u00f6ver": 793, "is_valid_einsum_char": 793, "\u01f5": 793, "legalise_einsum_expr": 793, "reproduct": [793, 794], "pars": [793, 794, 812, 817, 841], "intak": 793, "contract_path": 793, "parse_einsum_input": [793, 794], "einsum_eqn": 793, "legalis": 793, "legalise_einsum_eqn": 793, "za": [793, 794], "xza": [793, 794], "xz": [793, 794], "possibly_convert_to_numpi": 793, "myshap": 793, "__main__": 793, "0x10f850710": 793, "einsum_path_help": 794, "can_dot": 794, "idx_remov": 794, "bla": 794, "benefici": 794, "movement": 794, "costli": 794, "gemm": 794, "ijj": 794, "ddot": 794, "ikj": 794, "compute_size_by_dict": 794, "idx_dict": 794, "abbc": 794, "find_contract": 794, "input_set": 794, "output_set": 794, "lh": 794, "rh": 794, "new_result": 794, "idx_contract": 794, "iset": 794, "oset": 794, "bdc": 794, "flop_count": 794, "num_term": 794, "size_dictionari": 794, "flop": 794, "greedy_path": 794, "memory_limit": 794, "exhaust": [794, 826, 830, 853, 862], "indices_remov": 794, "priorit": [794, 805, 829, 833], "hadamard": 794, "cubic": 794, "greedi": 794, "idx_siz": 794, "optimal_path": 794, "siev": 794, "input_str": 794, "output_str": 794, "parse_possible_contract": 794, "path_cost": 794, "naive_cost": 794, "propos": [794, 807, 827, 833, 856], "intermediari": [794, 811], "unoptim": 794, "new_input_set": 794, "update_other_result": 794, "provision": 794, "_parse_possible_contract": 794, "mod_result": 794, "inplaceupdateexcept": 795, "include_backend": [795, 819], "ivyattributeerror": [795, 819], "attributeerror": [795, 819, 837], "ivybroadcastshapeerror": [795, 819], "ivydeviceerror": 795, "ivydtypepromotionerror": [795, 819], "ivyindexerror": [795, 819], "ivyinvalidbackendexcept": 795, "ivynotimplementedexcept": [795, 819], "notimplementederror": 795, "ivyvalueerror": [795, 819], "handle_except": [795, 822, 824], "add_array_spec": 796, "fn_array_spec": 796, "set_logging_mod": 797, "debug": [797, 806, 807, 813, 814, 825, 830, 833, 838, 856], "unset_logging_mod": 797, "print_stat": 798, "viz": 798, "snakeviz": 798, "bonu": 798, "cprofil": 798, "cprint": [799, 835], "grant": 800, "autotun": [800, 860], "grow": [800, 856], "peopl": [800, 804, 806, 807, 808, 856, 858], "wip": [800, 849], "docker": [800, 803, 804, 820], "pull": [800, 801, 805, 806, 809, 817, 821, 831, 833, 841, 842, 847], "sweat_smil": 800, "setting_up": 800, "awai": [800, 854, 856], "jax_fn": 800, "jax_x": 800, "torch_x": 800, "torch_fn": 800, "motiv": [800, 837, 846], "contextu": 800, "problem": [800, 805, 807, 809, 810, 816, 827, 837, 846, 852, 858, 862], "explos": [800, 844, 846], "adher": [800, 809, 815, 818, 822, 833, 835, 840, 845, 846, 852, 853, 862], "focus": [800, 815, 831, 854, 855, 856, 862, 863], "orient": 800, "contributor": [800, 801, 803, 805, 806, 807, 820, 827, 834, 856], "shorter": [800, 837], "ensp": 800, "customiz": [800, 812], "deepmind_perceiver_io": 800, "sm_framework": 800, "segmentation_model": 800, "sm": 800, "torch_sm": 800, "metric": [800, 841], "iou_scor": 800, "rax": 800, "torch_rax": 800, "poly1_softmax_loss": 800, "madmom": 800, "madmon": 800, "torch_madmom": 800, "freq": 800, "audio": 800, "hz2midi": 800, "torch_loss": 800, "maxpooling1d": 800, "pool_siz": 800, "tf_kornia": 800, "tf_rax": 800, "tf_madmom": 800, "tf_loss": 800, "_forward_classifi": [800, 850], "forward_classifi": [800, 850], "hk_eff_encod": 800, "dummy_x": 800, "jax_sm": 800, "jax_madmom": 800, "jax_loss": 800, "np_kornia": 800, "np_sm": 800, "np_rax": 800, "np_loss": 800, "yourself": [800, 805, 807, 821, 830, 833], "favourit": [800, 806], "pipelin": [800, 802, 808, 809, 810, 828, 831, 840, 843, 845, 850, 856, 857, 862], "hyperparam": 800, "idea": [800, 805, 829, 831, 836, 847, 855], "instantli": [800, 850], "essenti": [800, 805, 811, 813, 816, 817, 823, 826, 827, 828, 845, 846, 862], "mainli": [800, 805, 808, 825, 827, 830, 836, 838, 843, 856], "handler": [800, 834, 836, 840, 843], "scene": [800, 808, 834, 836, 844, 845, 856], "facilit": 800, "mse_loss": 800, "jax_ms": 800, "tf_mse": 800, "np_mse": 800, "torch_ms": 800, "someth": [800, 803, 807, 811, 820, 821, 831, 838, 839, 841, 842, 862], "favorit": 800, "flexibl": [800, 813, 815, 822, 825, 831, 833, 856], "everyon": [800, 801, 805, 806, 807, 841, 847], "plan": [800, 842], "interoper": [800, 846, 853, 854, 856, 859], "believ": [800, 807, 846], "feedback": [800, 805, 814], "appreci": 800, "amaz": 800, "journei": [800, 801], "ambiti": 800, "season": 800, "perfect": 800, "ask": [800, 805, 806, 817, 835, 837, 841, 842, 847], "fellow": 800, "twitter": 800, "sneak": 800, "peek": 800, "stai": [800, 814], "proper": [800, 805, 827, 850], "credit": 800, "accompani": 800, "lenton2021ivi": 800, "inter": 800, "author": [800, 805, 807, 854, 858], "lenton": 800, "daniel": 800, "pardo": 800, "fabio": 800, "falck": 800, "fabian": 800, "jame": 800, "stephen": 800, "clark": 800, "ronald": 800, "journal": 800, "arxiv": 800, "preprint": 800, "2102": 800, "02886": 800, "year": [800, 809, 841, 845, 847, 856], "strongli": [801, 806, 827, 862, 863], "engag": [801, 807, 846], "skill": [801, 858], "veteran": 801, "effort": [801, 805, 841, 846, 852, 856, 862], "board": [801, 812], "stage": [801, 807, 808, 809, 812, 830, 846, 856], "excit": [801, 808, 846], "Be": [802, 812], "awar": [802, 812, 819, 821], "linux": [802, 806, 807, 812, 859, 861], "regularli": [802, 812, 814], "internet": [802, 812], "codespac": [802, 812, 820], "make_doc": 802, "sh": [802, 806, 807, 809, 814], "host": [802, 814, 841, 846, 861], "pwd": 802, "ssh": [802, 814], "make_docs_without_dock": [802, 812], "assist": [803, 820], "runtimeerror": [803, 820], "logaddexp2_cpu": [803, 820], "falsifi": [803, 809, 820, 830], "test_logaddexp2": [803, 820], "backend_fw": [803, 820, 828], "dtype_and_x": [803, 820, 828, 830], "reproduce_failur": [803, 809, 820, 824, 830], "axicy2bkaamobaar2waaaacvaai": [803, 820], "decoartor": [803, 820], "with_unsupported_dtyp": [803, 815, 820, 827], "25830078125": [803, 820], "258544921875": [803, 820], "test_acosh": [803, 820], "axicy2baabyqwqgiaabdaai": [803, 820], "quit": [803, 807, 810, 817, 818, 820, 823, 824, 830, 833, 856, 862], "41421356": [803, 820], "41421356e": [803, 820], "34078079e": [803, 820], "154": [803, 820], "test_ab": [803, 806, 820, 830], "000j": [803, 820], "154j": [803, 820], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [803, 820], "experiment": [803, 807, 815, 827, 831, 835, 856], "thread": [803, 805, 806, 807, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 838, 856], "pycharm": [803, 828, 830], "few": [804, 805, 807, 813, 815, 816, 822, 823, 825, 826, 828, 830, 833, 835, 836, 837, 838, 839, 847, 856, 858], "climb": 804, "steep": 804, "curv": 804, "realpython": 804, "pyn": 804, "exchang": [804, 846, 852, 854], "pilot": [804, 842], "stuck": [804, 805], "spell": 804, "sound": [804, 814, 834], "frequent": [805, 807, 811, 856], "outlin": [805, 806, 807, 808, 813, 815, 818, 823, 826, 827, 830], "broad": [805, 858], "individu": [805, 807, 809, 811, 815, 823, 827, 856, 859, 862, 863], "clearli": [805, 807, 817, 828, 830, 846, 860], "qualiti": [805, 807], "lie": 805, "craft": [805, 829, 830], "fault": [805, 817, 856], "situat": [805, 807, 814, 840], "opportun": 805, "tackl": [805, 827], "challeng": [805, 811, 862], "categoris": [805, 809, 827], "encourag": [805, 821, 841, 846], "comfort": [805, 806, 819], "valuabl": [805, 807], "linkag": 805, "confid": 805, "submit": [805, 821], "merg": [805, 807, 809, 814, 827, 856], "meet": [805, 827], "scipi": [805, 846, 858, 863], "mindspor": 805, "simpler": [805, 807, 821, 849, 857, 863], "member": [805, 807, 827, 842, 846], "comment": [805, 806, 807, 809, 815, 821, 827, 829, 833], "pr": [805, 807, 809, 821, 827, 828, 830], "composition": 805, "feasibl": [805, 814, 846, 849], "pend": 805, "helpfulli": [805, 833, 854], "problemat": [805, 806], "unimpl": 805, "issue_link": 805, "alias_nam": 805, "notic": [805, 810, 814, 820, 821, 830, 833, 849], "push": [805, 807, 809, 828, 830, 862], "liner": 805, "meanwhil": [805, 814], "reselect": 805, "faithfulli": 805, "creation_routin": [805, 828], "indexing_routin": 805, "ma": 805, "manipulation_routin": 805, "mathematical_funct": [805, 827], "sorting_searching_count": 805, "ufunc": [805, 827], "matrix_and_vector_product": 805, "matrix_eigenvalu": 805, "norms_and_other_numb": 805, "solving_equations_and_inverting_matric": 805, "gleam": 805, "uncom": 805, "test_numpy_inn": 805, "test_frontend": [805, 814, 820, 828], "unsur": [805, 830], "statu": [805, 814, 821, 847], "refrain": 805, "checkbox": [805, 806], "aforement": 805, "parent": [805, 814, 837], "arraywithelementwis": [805, 810, 837], "containerwithmanipul": 805, "thorough": [805, 818, 822, 830], "add_reformatting_checklist_": 805, "category_nam": [805, 815, 816, 818, 822, 823], "autom": [805, 814, 821, 830, 843, 858], "bot": [805, 821], "markdown": [805, 812], "patient": [805, 806], "elabor": 805, "struggl": 805, "assigne": 805, "status": 805, "central": [805, 821, 833, 846, 862], "analyz": [805, 843], "relevant_submodul": 805, "roadmap": [805, 814], "soon": [805, 807, 814, 815, 841, 849], "deem": [805, 827], "subtask": 805, "clearer": [805, 819, 828, 838], "backend_nam": [805, 811, 815, 816, 818, 822, 823, 824], "sometim": [805, 806, 807, 809, 815, 823, 827, 830, 833], "rare": [805, 816, 841, 861], "button": [805, 806, 807, 820], "centr": 805, "predetermin": 805, "superset": [805, 808, 823, 826, 841], "reserv": 805, "happi": [806, 820, 841, 847], "your_usernam": [806, 820], "your_fold": [806, 820], "enter": [806, 807, 810, 815, 816, 820, 822, 824], "sync": [806, 809, 820], "remot": [806, 809, 820, 821], "nutshel": [806, 822], "hook": [806, 821, 829], "lint": [806, 808], "succe": [806, 849], "whatev": [806, 813, 841], "elig": 806, "student": 806, "licens": [806, 859], "remind": 806, "expir": 806, "won": [806, 807, 813, 815, 840, 842, 846, 847, 849, 850, 851], "profession": 806, "trial": 806, "jetbrain": 806, "month": [806, 845], "bui": [806, 862], "paid": 806, "rapid": [806, 845, 846, 856], "pace": 806, "person": [806, 807], "abil": [806, 833, 836, 841, 856], "perhap": [806, 837, 838, 839, 841, 862], "conda": [806, 846, 858], "ivy_dev": [806, 807], "icon": [806, 807, 820], "panel": 806, "vscode": [806, 820], "palett": 806, "ctrl": [806, 807], "mac": [806, 807], "intel": [806, 846, 854, 861], "m1": 806, "optional_apple_silicon_1": 806, "optional_apple_silicon_2": 806, "array_api_test": [806, 807, 809, 820], "test_array_api": [806, 807, 809, 820, 830], "suit": [806, 808, 809, 814, 820, 829, 830, 838, 846, 856, 862], "cmd": 806, "bat": [806, 807], "virtualenv": 806, "tick": [806, 807, 814], "nz2": 806, "openssl": 806, "libssl1": 806, "1_1": 806, "1f": 806, "1ubuntu2": 806, "19_amd64": 806, "deb": 806, "dpkg": 806, "mitig": [806, 862], "desktop": [806, 820], "powershel": 806, "admin": 806, "deploy": [806, 850, 855, 858, 859, 862, 863], "menu": [806, 820], "introspect": 806, "dialog": 806, "persist": 806, "earlier": [806, 807, 815, 831], "virtualis": 806, "bio": [806, 846], "dropdown": [806, 814], "dockerfil": 806, "ca": 806, "certif": 806, "gnupg": 806, "lsb": 806, "keyr": 806, "fssl": 806, "gpg": 806, "dearmor": 806, "echo": [806, 814, 842], "arch": 806, "lsb_releas": 806, "null": [806, 820], "ce": 806, "cli": 806, "containerd": 806, "systemctl": 806, "softwar": [806, 807, 845, 846, 854, 859, 860, 861], "press": [806, 807, 838], "4a": 806, "socket": 806, "rwx": 806, "sock": 806, "pid": 806, "editor": 806, "pytest": [806, 807, 809, 814, 820, 824, 830], "keyboard": 806, "screenshot": 806, "pop": [806, 820, 846], "test_elementwis": 806, "bar": [806, 820], "shell": [806, 807, 809, 814], "setup_test": 806, "run_ivy_core_test": 806, "run_ivy_nn_test": 806, "run_ivy_stateful_test": 806, "run_test": [806, 814], "test_depend": 806, "test_ivy_cor": 806, "test_ivy_nn": 806, "test_ivy_st": 806, "unix": 806, "test_": [806, 828], "test_cor": [806, 807, 828], "offici": [806, 815, 835], "wish": [806, 827], "ivy_nn": 806, "ivy_st": 806, "header": [806, 807, 829], "arrow": 806, "test_stat": 806, "test_submodule_nam": 806, "test_function_nam": 806, "debugg": 806, "studio": [806, 820, 830], "especi": [806, 811, 821, 845, 856], "afterward": [806, 838], "background": [806, 812, 820, 856, 858], "overlap": [806, 814, 820, 831, 833, 857], "test_file_path": [806, 820], "test_fn_nam": [806, 820], "engin": [806, 856, 858, 859], "devcontain": 806, "comma": 806, "postcreatecommand": 806, "post_create_command": 806, "poststartcommand": 806, "safe": [806, 827], "containerworkspacefold": 806, "reopen": 806, "test_fle_path": 806, "slash": 806, "isol": [806, 807, 857, 862], "container": 806, "intens": 806, "headach": 806, "arm": [806, 807], "vm": [806, 814], "azur": 806, "cloud": [806, 814, 858], "theme": [806, 812], "ipad": 806, "browser": [806, 812], "quota": 806, "requisit": 806, "pane": [806, 807, 814], "dockerfilegpu": 806, "ivv": 806, "multiv": 806, "multivers": [806, 831], "dockerfilemultivers": 806, "dockerhub": 806, "upto": [806, 807], "minut": [806, 814], "launch": 806, "quickli": [806, 807, 814, 838, 839, 845, 847, 856, 863], "kindli": [806, 829], "guidelin": 806, "colour": 806, "chanc": 806, "troubleshoot": 806, "ever": 806, "flask": [806, 820], "toolbar": [806, 807, 820], "_array_modul": [806, 809, 820], "refresh": [806, 820], "pytestarg": [806, 820], "unittesten": [806, 820], "pytesten": [806, 820], "autotestdiscoveronsaveen": [806, 820], "conftest": 806, "serv": [806, 807, 810, 813, 822, 823, 827, 828, 830, 833, 834, 843, 854], "aren": [806, 815], "record": [806, 841, 857], "available_config": 806, "cp310": 806, "x86": [806, 861], "newer": [806, 830], "_compil": 806, "meantim": 806, "suffici": [806, 817, 827, 830], "bear": [806, 810, 813, 815, 827], "tendenc": 807, "land": 807, "unrel": [807, 846], "fly": [807, 856], "internship": 807, "suspect": 807, "iii": 807, "issue_numb": 807, "12345": 807, "rememb": 807, "respond": 807, "dai": [807, 821], "freed": 807, "obvious": [807, 814], "hypothet": 807, "frustrat": 807, "delai": [807, 849], "busi": 807, "inact": 807, "unfairli": 807, "investig": 807, "name_of_your_branch": 807, "date": [807, 809], "complic": [807, 828, 835], "merge_with_upstream": 807, "abort": 807, "tediou": [807, 817, 833], "stash": [807, 821], "reinstat": 807, "uncommit": 807, "unstag": [807, 821], "untrack": 807, "atlassian": 807, "wrote": 807, "piec": [807, 810, 823, 824, 835, 849, 852, 854], "blame": 807, "eg": 807, "week": [807, 847], "grep": 807, "commit_id": 807, "handi": 807, "histori": 807, "toggl": 807, "highlight": [807, 814, 817, 827, 829], "approv": 807, "someon": [807, 841], "hash": [807, 838], "cancel": 807, "speedup": 807, "unavail": 807, "tickbox": 807, "span": [807, 854, 862], "intent": [807, 826], "discourag": 807, "adopt": [807, 810, 822, 833, 846, 855, 856, 861], "philosophi": 807, "infrequ": 807, "earli": [807, 856], "wast": [807, 814], "spot": [807, 817, 823], "mistak": 807, "mountain": 807, "advoc": [807, 841], "session": [807, 856], "beauti": 807, "particularli": [807, 838, 841, 849, 854], "care": [807, 816, 827, 833, 840, 846], "undo": 807, "stress": 807, "nifti": 807, "reassur": 807, "local_path_to_ivi": 807, "subfold": [807, 828, 830, 831], "dep": 807, "fresh": 807, "arsen": 807, "exec": 807, "ivy_contain": 807, "test_imag": 807, "test_random_crop": 807, "test_creation_funct": 807, "test_arang": 807, "cursor": 807, "alt": 807, "blog": 807, "breakpoint": 807, "gutter": 807, "caret": 807, "f8": 807, "f9": 807, "Into": 807, "f7": 807, "smart": 807, "fragment": [807, 852, 854, 858], "wherein": [807, 823, 830], "failur": [807, 814, 828, 830], "weed": [808, 834], "tour": 808, "formatt": [808, 821], "conjunct": 809, "establish": [809, 858], "popular": [809, 856], "sens": [809, 815, 817, 827, 829, 837], "unconnect": 809, "initialis": [809, 827, 830], "strang": [809, 837], "thoroughli": 809, "test_linalg": [809, 828], "test_set_funct": 809, "test_signatur": 809, "excess": [809, 811, 817], "array_modul": 809, "vv": 809, "test_manipulation_funct": 809, "test_concat": [809, 830], "nb": 809, "liber": 809, "______________________": 809, "test_remaind": 809, "_______________________": 809, "test_operators_and_elementwise_funct": 809, "1264": 809, "1277": 809, "binary_param_assert_against_refimpl": 809, "ctx": 809, "620": 809, "binary_assert_against_refimpl": 809, "324": 809, "scalar_o": 809, "17304064": 809, "binaryparamcontext": 809, "axic42baaowcnp": 809, "rumwmabaear0": 809, "make_binary_param": 809, "numeric_dtyp": 809, "left_strat": 809, "left_sym": 809, "right_strat": 809, "right_sym": 809, "right_is_scalar": 809, "binary_param_assert_dtyp": 809, "binary_param_assert_shap": 809, "recreat": 809, "unexpectedli": 809, "discrep": [809, 828], "test_asarray_arrai": 809, "test_floor_divid": 809, "health": 809, "test_iop": 809, "__imod__": 809, "isequ": 809, "test_matrix_norm": 809, "alter": 809, "tweak": 809, "array_api_methods_to_test": 809, "test_special_cas": 809, "__ipow__": 809, "is_integ": 809, "easier": [809, 810, 811, 815, 828, 831, 843, 856, 858], "revisit": [809, 822], "_data": [810, 826, 827, 837], "organiz": [810, 813, 827], "underpin": [810, 813, 835], "programmat": [810, 813, 857], "backup": [810, 812, 813], "accident": [810, 813, 827], "absent": [810, 813], "auto": [810, 812, 813, 821, 838], "__mul__": [810, 813, 817, 822, 833, 837], "throw": [810, 815, 816, 819, 820, 837, 856], "imposs": 810, "inputs_to_native_arrai": [810, 823, 824], "outputs_to_ivy_arrai": [810, 815, 816, 822, 823, 824], "secondli": [810, 815], "__ivy_array_function__": 810, "inspir": 810, "__torch_function__": 810, "myarrai": 810, "handled_funct": 810, "notimpl": 810, "issubclass": 810, "four": [810, 815, 817, 822, 823, 830, 833, 838], "enough": [810, 814, 815, 816, 830, 837, 838, 839], "ivy_funct": 810, "my_ab": 810, "my_arrai": 810, "implicit_backend": [811, 835], "__dict__": [811, 826, 835], "ivy_original_dict": [811, 835], "fallback": 811, "live": [811, 812, 815, 846, 847, 852, 854], "scope": [811, 857, 861], "dlpack": 811, "set_dynamic_backend": 811, "unset_dynamic_backend": 811, "dynamic_backend_a": 811, "set_": 811, "unset_": 811, "backend_handl": 811, "requires_grad": 811, "memory_format": 811, "preserve_format": 811, "weren": 811, "vast": [811, 815, 856], "minor": [811, 833, 841], "fn_name_v_1p12_and_abov": 811, "fn_name_v_1p01_to_1p1": 811, "heavili": [812, 824, 841], "characterist": 812, "conf": 812, "cleanup": 812, "readm": [812, 841], "maxdepth": 812, "caption": 812, "related_work": 812, "deep_div": 812, "faq": 812, "glossari": 812, "autosummari": 812, "top_functional_toc": 812, "restructuredtext": 812, "discov": [812, 815], "ivy_toctree_caption_map": 812, "stub": 812, "unfortun": [812, 821], "linker": 812, "foo": 812, "discussion_channel_map": 812, "1000043690254946374": 812, "1000043749088436315": 812, "forum": [812, 842], "seri": [812, 815, 827, 830, 856, 858], "discussion_paragraph": 812, "discord_link": 812, "channel_link": 812, "gg": 812, "zvqdvbznqj": 812, "799879767196958751": 812, "channel_id": 812, "autoskippablemethod": 812, "skippable_method_attribut": 812, "__qualname__": 812, "autodoc": 812, "__doc__": 812, "autoivydata": 812, "mutual": [813, 823], "containerwithelementwis": 813, "__repr__": 813, "__getattr__": [813, 849], "__setattr__": [813, 849], "__contains__": 813, "__getstate__": 813, "__setstate__": 813, "unpickl": 813, "num_dim": [813, 840], "restrict": [813, 814, 827, 835, 849, 853], "enforc": [813, 837], "extern": [813, 822, 827, 830, 831], "lefthand": 813, "righthand": 813, "handle_nest": [813, 822, 823, 824, 835], "absenc": [813, 822, 856], "implicitli": [813, 825, 830, 835], "log_pr": [813, 823, 826], "intuit": [813, 830, 838, 839, 852], "chronolog": 813, "concurr": [813, 814, 823, 856], "despit": [813, 815, 816, 828, 835, 846, 853, 856], "__list__": 813, "whatsoev": [813, 823, 843, 862], "children": 813, "shallowest": 813, "deepest": 813, "rollback": 814, "incorpor": [814, 828, 838, 856], "techniqu": 814, "triplet": 814, "test_torch": [814, 828], "test_tensor": [814, 828], "test_torch_instance_arctan_": 814, "12500": 814, "daili": 814, "huge": [814, 838, 844, 846, 856, 862], "shoot": 814, "impact": [814, 830, 839, 858], "_reduce_loss": [814, 823, 826], "test_nn": 814, "test_loss": 814, "test_binary_cross_entropy_with_logit": 814, "test_cross_entropi": 814, "test_binary_cross_entropi": 814, "test_sparse_cross_entropi": 814, "test_loss_funct": 814, "test_torch_binary_cross_entropi": 814, "test_torch_cross_entropi": 814, "binary_cross_entropy_with_logit": 814, "torch_binary_cross_entropi": 814, "torch_cross_entropi": 814, "magic": 814, "readthedoc": 814, "pedagog": 814, "f_1": 814, "t_1": 814, "t_3": 814, "t_7": 814, "t_": 814, "f_m": 814, "cyclic": 814, "intellig": [814, 830, 858], "tests_fil": 814, "file_nam": [814, 830, 831], "tests_lin": 814, "correspondingli": 814, "tests_to_run": 814, "determine_tests_lin": 814, "mongodb": 814, "databas": [814, 830], "mechan": [814, 841], "secret": 814, "db": 814, "ssh_deploy_kei": 814, "suffic": [814, 824, 830], "massiv": 814, "yml": 814, "felicit": 814, "clone_map": 814, "deploy_kei": 814, "user_email": 814, "user_nam": 814, "target_branch": 814, "github_serv": 814, "deploy_key_fil": 814, "ssh_known_hosts_fil": 814, "known_host": 814, "keyscan": 814, "git_ssh_command": 814, "userknownhostsfil": 814, "email": [814, 846], "methodologi": 814, "master1": 814, "restructur": 814, "_map": 814, "t_2": 814, "t_n": 814, "index_map": 814, "test_map": 814, "snowbal": 814, "recalibr": 814, "workflow_dispatch": 814, "schedul": [814, 841, 856, 863], "cron": 814, "saturdai": 814, "night": 814, "pm": 814, "gut": 814, "lesser": [814, 819], "lol": 814, "hour": [814, 847], "cater": [814, 829], "master2": 814, "master32": 814, "synchron": 814, "runner2": 814, "corrupt": 814, "decoupl": [814, 839], "150": 814, "cycl": [814, 830], "yellow": 814, "queu": 814, "redirect": 814, "book": 814, "onrend": 814, "jo": 814, "ran": 814, "badg": 814, "clickabl": 814, "all_dtyp": 815, "all_numeric_dtyp": 815, "all_int_dtyp": 815, "all_float_dtyp": 815, "replic": [815, 825, 826, 827], "thirdli": 815, "native_float32": 815, "importantli": [815, 837, 840], "arguabl": [815, 816, 827], "jaxarrai": [815, 816, 819, 822, 826, 831, 835], "_handle_0_dim_output": 815, "subtli": [815, 826], "promote_types_frontend_nam": 815, "promote_types_of_frontend_name_input": 815, "frontend_nam": 815, "upcast": 815, "nearli": [815, 822, 824, 856], "downcast": 815, "footprint": 815, "concret": 815, "aris": [815, 821, 841, 846], "utterli": 815, "meant": [815, 817, 826], "twice": 815, "disadvantag": 815, "relax": 815, "f64": 815, "unwant": 815, "primaci": 815, "resembl": 815, "compound": 815, "infer_dtyp": [815, 816, 822, 824], "settabl": [815, 816], "handle_out_argu": [815, 816, 822, 823, 824, 826, 835], "infer_devic": [815, 816, 822, 824], "deleg": [815, 863], "shape_to_tupl": 815, "with_supported_dtyp": 815, "unment": 815, "_cast_for_unary_op": [815, 823, 826], "target_typ": 815, "syntax": [815, 845, 846, 856], "unsupported_dtyp": 815, "supported_dtypes_and_devic": 815, "with_unsupported_device_and_dtyp": 815, "globals_getter_func": 815, "f2": 815, "lack": [815, 826, 856, 863], "mandat": [815, 826, 830, 831, 846], "confus": [815, 819, 826, 833, 843, 847], "inconsist": [815, 819, 825], "is_nan": 815, "supported_dtyp": 815, "anytim": 815, "84530": 815, "unwarr": 815, "risk": [815, 862], "needlessli": 815, "bloat": 815, "undergo": [815, 841], "unsupported_devic": 815, "supported_devic": 815, "downsid": 815, "coverag": [815, 830], "undesir": 815, "accomplish": 815, "upcast_data_typ": 815, "downcast_data_typ": 815, "crosscast_data_typ": 815, "cast_data_typ": 815, "downcast_data_dtyp": 815, "vice": 815, "versa": 815, "till": 815, "crosscast": 815, "exmp1": 815, "watch": [815, 827], "handle_numpy_arrays_in_specific_backend": [815, 822], "cate": 815, "understood": 815, "consumpt": [815, 860], "dual": 816, "categor": [816, 823, 827], "210": 816, "_handle_except": [816, 819], "1013": 816, "_handle_nest": [816, 819], "905": 816, "_handle_out_argu": [816, 819], "441": 816, "_inputs_to_native_arrai": [816, 819], "new_arg": [816, 819], "new_kwarg": [816, 819], "_outputs_to_ivy_arrai": [816, 819], "358": 816, "_handle_array_funct": [816, 819], "_handle_device_shift": 816, "handle_device_shift": [816, 824], "crucial": [816, 825], "device_shifting_dev": 816, "__enter__": 816, "__exit__": 816, "mostli": [816, 826, 830], "soft_devic": 816, "eight": [817, 834], "op_nam": 817, "__r": 817, "unsurprisingli": [817, 845], "recap": [817, 839], "combinatori": 817, "okai": [817, 833, 835], "spec": [817, 818], "my_func": [817, 831], "some_flag": 817, "another_flag": 817, "jointli": 817, "5574077": 817, "1850398": 817, "5463025": 817, "8422884": 817, "91601413": 817, "9647598": 817, "3738229": 817, "1597457": 817, "0963247": 817, "9955841": 817, "3278579": 817, "asid": 817, "increasingli": [817, 849], "14254655": 817, "1578213": 817, "380515": 817, "trivial": [817, 826], "failing_fn_nam": 817, "onlin": [817, 818], "minutest": 817, "contrast": [818, 822, 827, 862], "preview": 818, "incorrectli": [818, 849], "needless": [818, 828], "renam": [818, 827], "judgment": 818, "operator_nam": 818, "succinct": 818, "docst": 818, "native_error": 819, "_combine_messag": 819, "truli": [819, 837], "wrong": [819, 821, 824, 827, 833], "198": 819, "392": 819, "_handle_array_like_without_promot": 819, "805": 819, "432": 819, "349": 819, "other_test": 819, "523": 819, "_handle_numpy_out": 819, "396": [819, 839], "_outputs_to_numpy_arrai": 819, "_inputs_to_ivy_arrays_np": 819, "ivy_arg": 819, "ivy_kwarg": 819, "453": 819, "_from_zero_dim_arrays_to_scalar": 819, "truth_value_test": 819, "visibl": 819, "unwieldi": 819, "squash": 819, "hide": [819, 849], "cleaner": [819, 838], "caught": [819, 821], "rethrow": 819, "_print_traceback_histori": 819, "error_stack": 819, "axiserror": 819, "polici": [819, 824, 830, 832], "moreov": 819, "submoodul": 820, "test_jax_transpos": 820, "manipulaiton": 820, "test_jax": [820, 828], "test_numpi": [820, 828], "test_manipul": [820, 828, 830], "preconditionnotmet": 820, "densetensor": 820, "holder_": 820, "phi": 820, "dense_tensor_impl": 820, "array_and_ax": 820, "aaegbaegaqaaaaaaaaaaaaab": 820, "black": 821, "flake8": 821, "linter": 821, "autoflak": 821, "docformatt": 821, "pydocstyl": 821, "yaml": 821, "patch1687898304": 821, "8072": 821, "3516aed563": 821, "reformat": 821, "akshai": 821, "jain": 821, "gui": 821, "cryptic": 821, "garden": 821, "utc": 821, "didn": 821, "human": 821, "intervent": 821, "typo": 821, "ui": 821, "handle_array_like_without_promot": [822, 824], "to_native_arrays_and_back": [822, 824, 835], "handle_array_funct": [822, 824], "inputs_to_native_shap": [822, 824], "rational": [822, 826, 833], "__div__": [822, 833], "484": 822, "annot": 822, "brittl": 822, "freeli": 822, "inde": [822, 833, 841, 854], "technic": [822, 826, 841, 856, 858], "original_typ": 822, "cumbersom": 822, "hinder": [822, 845], "venn": 823, "diagram": [823, 862], "light": [823, 831, 841, 843, 857, 862], "maximis": 823, "encompass": 823, "partial_mixed_handl": [823, 824, 833], "handle_partial_mixed_funct": [823, 824, 833], "fn_decor": 823, "mixed_backend_wrapp": [823, 826], "to_add": 823, "to_skip": 823, "inputs_to_ivy_arrai": [823, 824], "modif": [823, 856], "briefli": [823, 830, 838], "get_all_arrays_on_dev": 823, "outputs_to_ivy_shap": 824, "outputs_to_native_arrai": 824, "handle_view_index": [824, 826], "handle_view": [824, 826], "handle_rag": 824, "handle_backend_invalid": 824, "handle_nan": 824, "to_native_shapes_and_back": 824, "modern": [825, 845, 846, 861], "inter_func": 825, "custom_grad_fn": 825, "args1": 825, "eas": [825, 856], "program": [826, 853, 854, 856, 859, 860, 863], "speak": 826, "val_n": 826, "base_idx": 826, "_manipulation_stack": 826, "base_flat": 826, "_view_ref": 826, "_update_view": 826, "contigu": 826, "c_contigu": 826, "ascontiguousarrai": 826, "copyto": 826, "_is_vari": 826, "tensor_scatter_nd_upd": 826, "is_vari": 826, "_update_torch_view": 826, "predominantli": [826, 831], "support_native_out": [826, 835], "_scalar_output_to_0d_arrai": 826, "_wrap_fn": 826, "dim0": 826, "dim1": 826, "res_floor": 826, "extent": [826, 827], "to_out_fn": 826, "add_wrapp": 826, "paradigm": [826, 841, 856], "expans": 826, "brief": [826, 830], "weak": 826, "_torch_bas": 826, "_torch_view_ref": 826, "_torch_manipul": 826, "weakli": 826, "adequ": 826, "tf_frontend": 827, "lax": [827, 828, 833, 840, 841], "torch_frontend": [827, 828], "numpy_frontend": 827, "jax_frontend": 827, "to_ivy_arrays_and_back": [827, 828], "fidel": 827, "algebra": [827, 854, 855, 856, 859, 863], "dynamic": 827, "mimic": 827, "arithmetic_oper": 827, "handle_numpy_out": 827, "handle_numpy_dtyp": 827, "handle_numpy_cast": 827, "from_zero_dim_arrays_to_scalar": 827, "_add": 827, "same_kind": 827, "subok": [827, 828, 833], "promote_types_of_numpy_input": 827, "underscor": 827, "unhandl": 827, "trigonometric_funct": 827, "_tan": 827, "check_tensorflow_cast": 827, "raw_op": [827, 828], "map_raw_ops_alia": 827, "output_typ": 827, "kwargs_to_upd": 827, "pointwise_op": 827, "sensibl": 827, "ahead": [827, 831, 856], "reduce_logsumexp": 827, "logsumexp": 827, "trick": 827, "max_input_tensor": 827, "preferred_element_typ": 827, "languag": [827, 835, 843, 845, 847, 854, 857, 859, 860, 861, 862], "offer": [827, 839, 847, 856, 862, 863], "finer": 827, "logicaland": 827, "np_frontend": 827, "_ivy_arrai": 827, "radd": 827, "_init_data": 827, "_process_str_data": 827, "_dtype": [827, 828, 837], "_shape": [827, 837], "govern": 827, "promote_types_of_": 827, "_input": 827, "promote_types_of_torch_input": [827, 828], "handle_numpy_casting_speci": 827, "new_fn": 827, "equiv": 827, "unsaf": 827, "array_type_test": 827, "_isfinit": 827, "organis": 827, "grasp": 827, "youtub": 827, "knowledg": 828, "np_frontend_help": 828, "open_task": 828, "test_lax": 828, "test_oper": 828, "test_jax_tan": 828, "test_mathematical_funct": 828, "test_trigonometric_funct": 828, "dtypes_values_cast": 828, "dtypes_values_casting_dtyp": 828, "arr_func": 828, "get_num_positional_args_ufunc": 828, "test_numpy_tan": 828, "handle_where_and_array_bool": 828, "test_tensorflow": 828, "test_math": 828, "test_tensorflow_tan": 828, "test_pointwise_op": 828, "test_torch_tan": 828, "_fill_valu": 828, "test_glob": 828, "test_jax_ful": 828, "test_from_shape_or_valu": 828, "_input_fill_and_dtyp": 828, "dtype_and_input": 828, "dtype_to_cast": 828, "input_fill_dtyp": 828, "test_numpy_ful": 828, "test_raw_op": 828, "test_tensorflow_fil": 828, "test_creation_op": 828, "with_arrai": 828, "test_torch_ful": 828, "add_nois": 828, "all_clos": 828, "_get_dtype_and_matrix": 828, "test_torch_qr": 828, "frontend_q": 828, "frontend_r": 828, "walkthrough": 828, "comparison_op": 828, "test_comparison_op": 828, "test_torch_great": 828, "all_alias": 828, "test_ndarrai": 828, "test_numpy_instance_add__": 828, "test_tensorflow_instance_add": 828, "1e04": 828, "allow_infin": 828, "test_torch_instance_add": 828, "_arrays_idx_n_dtyp": 828, "surprisingli": 828, "closest_relevant_group": 828, "strive": [828, 830, 833, 841, 858], "tailor": 829, "clariti": [829, 830, 833, 856], "weav": 829, "thrill": 829, "brim": 829, "stand": [829, 830], "testament": 829, "landscap": 829, "forese": 829, "refin": 829, "inquiri": 829, "fixtur": 830, "hit": [830, 835, 849], "eleg": [830, 856], "unexplor": 830, "artifact": 830, "bespok": 830, "_array_or_typ": 830, "rigor": [830, 845], "test_default_int_dtyp": 830, "print_hypothesis_exampl": 830, "custom_strategi": 830, "randomis": 830, "simplist": 830, "intricaci": 830, "glanc": 830, "one_of": 830, "datum": 830, "pipe": 830, "array_or_scal": 830, "len_of_arrai": 830, "test_add": 830, "test_gpu_is_avail": 830, "pretest": 830, "snippet": [830, 850], "criterion": 830, "valid_ax": 830, "hoc": 830, "11228": 830, "268": 830, "wherev": 830, "9622": 830, "28136": 830, "6375": 830, "12720": 830, "21354": 830, "900e": 830, "57384": 830, "25687": 830, "248": 830, "test_devic": 830, "array_shap": 830, "test_lay": 830, "some_sequ": 830, "arrays_valu": 830, "36418": 830, "213": 830, "21716926": 830, "none_or_list_of_float": 830, "get_prob": 830, "103515625e": 830, "099609375": 830, "probabilist": 830, "number_positional_argu": 830, "unreproduc": 830, "x_and_linear": 830, "is_torch_backend": 830, "x_shape": [830, 835], "weight_shap": 830, "bias_shap": 830, "ivy_np": 830, "valid_float_dtyp": 830, "test_demo": 830, "failing_test": 830, "traceback": 830, "shrink": 830, "prescrib": 830, "scratch": 830, "therebi": 830, "test_gelu": 830, "test_fil": 830, "phase": [830, 841, 856], "notabl": [830, 856], "max_exampl": 830, "deadlin": 830, "weird": 830, "systemat": 830, "safeguard": 830, "inabl": 830, "test_result_typ": 830, "9090909090909091": 830, "judgement": 831, "some_namespac": 831, "some_backend": 831, "another_backend": 831, "refactor": 831, "ongo": 831, "check_fill_value_and_dtype_are_compat": 831, "_to_devic": 831, "shouldn": [831, 849], "pin": 831, "unpinn": 831, "culmin": 831, "unsett": 832, "array_significant_figur": 832, "array_decimal_valu": 832, "warning_level": 832, "nan_polici": 832, "stablest": 832, "constantli": [833, 845], "answer": [833, 837, 841], "contradict": 833, "entail": 833, "sacrif": 833, "jacfwd": 833, "jacrev": 833, "banner": 833, "expens": 833, "incredibli": [833, 838, 841, 859], "price": 833, "pai": 833, "intrus": 833, "x_beta": 833, "equip": 833, "simplif": 833, "allevi": 833, "ineffici": [833, 841, 856], "fuse": 833, "hybrid": 833, "workaround": 833, "slip": 833, "radar": 833, "stumbl": 833, "gone": [834, 846], "fulfil": 834, "syntact": [835, 840], "power_seq": 835, "_determine_backend_from_arg": 835, "importlib": 835, "_backend_dict": 835, "x_flat": 835, "wi": 835, "wi_x": 835, "wii_x": 835, "wif_x": 835, "wig_x": 835, "wio_x": 835, "wh": 835, "ht": 835, "ct": 835, "hts_list": 835, "wii_xt": 835, "wif_xt": 835, "wig_xt": 835, "wio_xt": 835, "htm1": 835, "ctm1": 835, "wh_htm1": 835, "whi_htm1": 835, "whf_htm1": 835, "whg_htm1": 835, "who_htm1": 835, "ft": 835, "ot": 835, "reliabl": 835, "scalabl": [835, 845, 861, 862], "sacrific": 835, "hear": 835, "virtu": [835, 853], "pure_ivi": 835, "pure_torch": 835, "unclean": 835, "wx": 835, "temp": 835, "ivy_func": 835, "emphas": 835, "torchscript": [835, 843, 863], "example_input": 835, "static_argnum": [835, 849], "static_argnam": [835, 849], "primit": [836, 841, 854, 856], "upcom": 836, "hierarch": [836, 838, 839, 856], "arraywithactiv": 837, "arraywithcr": 837, "arraywithdatatyp": 837, "arraywithdevic": 837, "arraywithgener": 837, "arraywithgradi": 837, "arraywithimag": 837, "arraywithlay": 837, "arraywithlinearalgebra": 837, "arraywithloss": 837, "arraywithmanipul": 837, "arraywithnorm": 837, "arraywithrandom": 837, "arraywithsearch": 837, "arraywithset": 837, "arraywithsort": 837, "arraywithstatist": 837, "arraywithutil": 837, "_init": 837, "_size": 837, "_devic": 837, "_dev_str": 837, "_pre_repr": 837, "_post_repr": 837, "framework_str": 837, "pypep8nam": 837, "immut": 837, "claim": 837, "_native_wrapp": 837, "genuin": 837, "some_method": 837, "rewritten": 837, "littl": [837, 845, 858], "wonder": [837, 845, 847], "compartment": 837, "newshap": 837, "new_shap": 837, "tidi": 837, "crystal": 837, "ton": 838, "ado": [838, 839], "soup": 838, "walk": [838, 839], "cnt": 838, "3333335": 838, "autocomplet": 838, "midwai": 838, "agent": 838, "total_spe": 838, "total_height": 838, "total_width": 838, "ag": 838, "tot": 838, "total_": 838, "total_h": 838, "cnt0": 838, "cnt1": 838, "diff_0": 838, "diff_1": 838, "config0": 838, "config1": 838, "l0": 838, "decoder__l0": 838, "decoder__l1": 838, "encoder__l0": 838, "encoder__l1": 838, "l0__b": 838, "l0__w": 838, "l1__b": 838, "l1__w": 838, "printabl": 838, "foresight": 838, "untidili": 838, "update_ag": 838, "normalize_img": 838, "img_max": 838, "reduce_max": 838, "img_min": 838, "reduce_min": 838, "img_rang": 838, "agent_posit": 838, "agent_veloc": 838, "agent_cam_front_rgb": 838, "agent_cam_front_depth": 838, "agent_cam_rear_rgb": 838, "agent_cam_rear_depth": 838, "agent_cam_lidar": 838, "camera": 838, "front_rgb": 838, "front_depth": 838, "rear_rgb": 838, "rear_depth": 838, "lidar": 838, "rgb": 838, "rear": 838, "veloc": 838, "cam": 838, "cam_max": 838, "cam_min": 838, "cam_rang": 838, "five": 838, "allud": [838, 846], "perman": 838, "straightforward": 838, "dataload": 838, "_cnt": 838, "img_": 838, "_dataset_s": 838, "_batch_siz": 838, "_count": [838, 839], "__next__": 838, "img_fnam": 838, "loaded_img": 838, "batch_slic": 838, "0145": 838, "addbackward0": 838, "_create_vari": 839, "_input_channel": 839, "_output_channel": 839, "_w_shape": 839, "_b_shape": 839, "_with_bia": 839, "764": 839, "872": 839, "211": 839, "439": 839, "nightmar": 839, "overcom": 839, "v1": 839, "key0": 839, "linear3": 839, "v2": 839, "preced": [839, 846], "_w_init": 839, "_b_init": 839, "misnom": 839, "saw": 839, "_beta1": 839, "_beta2": 839, "_epsilon": 839, "_mw": 839, "_vw": 839, "_first_pass": 839, "_should_trac": 839, "new_v": 839, "_lr": 839, "_inplac": 839, "_stop_gradi": 839, "sparse_funct": 840, "vital": [840, 845], "_linear": 840, "jax_graph": 840, "to_backend": 840, "thinli": 840, "to_haiku_modul": 840, "loss_fn_t": 840, "without_apply_rng": 840, "update_rul": 840, "tree_multimap": 840, "trax": [840, 847], "objax": [840, 847], "matur": [841, 846, 856], "doubt": 841, "grate": 841, "probe": 841, "lock": 841, "gold": 841, "dex": 841, "tricki": [841, 843], "predictor": 841, "tight": 841, "dispatch": [841, 856, 859], "ast": 841, "autodiff": 841, "shine": 841, "merci": 841, "compet": [841, 856], "parallelis": 841, "spmd": 841, "mixtur": 841, "expert": 841, "sophist": 841, "depart": 841, "hundr": 841, "thousand": 841, "broadli": [841, 862], "supplementari": 841, "reusabl": [841, 854, 856], "fanci": [841, 856], "fusion": [841, 860], "lose": 841, "pmap": 841, "eventu": 841, "supplement": 841, "backdoor": 841, "callback": 841, "door": 841, "somewhat": [841, 856], "outsourc": 841, "ivy_root": 842, "pem": 842, "api_kei": 842, "asap": 842, "nail": 843, "scientist": 843, "correl": 843, "collabor": [844, 845, 846], "consortium": [844, 846], "grown": 845, "rapidli": 845, "shareabl": 845, "outdat": 845, "newest": 845, "prototyp": [845, 856], "obsolet": [845, 847], "invent": 845, "simultan": [845, 847], "runner": 845, "principl": [845, 854, 856, 859], "2006": 845, "cloth": 845, "forgiven": 846, "eyebrow": 846, "somehow": 846, "industri": [846, 856, 858], "funni": 846, "comic": 846, "charger": 846, "instant": 846, "contrari": 846, "bumpi": 846, "road": 846, "technologi": [846, 854, 858], "pcie": 846, "motherboard": 846, "raid": 846, "bluetooth": 846, "wireless": 846, "btx": 846, "sata": 846, "tcp": 846, "ip": 846, "smtp": 846, "send": [846, 861], "gmail": 846, "outlook": 846, "innov": 846, "growth": [846, 859], "necess": 846, "2015": [846, 856], "aros": 846, "mission": [846, 858], "ourselv": [846, 862], "quansight": [846, 862], "compani": [846, 852], "apach": [846, 858, 862], "onnx": [846, 854, 862], "cupi": [846, 856, 863], "modin": 846, "spyder": 846, "octoml": [846, 862], "sponsor": 846, "lg": 846, "electron": 846, "shaw": 846, "pursuit": 846, "complianc": 846, "convinc": 846, "celebr": 846, "abund": 847, "streamlin": [847, 859], "awesom": 847, "love": 847, "slew": 847, "inevit": [847, 857], "erron": 847, "poor": 847, "spin": 847, "sake": 847, "wouldn": 847, "frantic": 847, "lucid": 847, "honk": 847, "hasn": 847, "spend": [847, 856], "sonnet": 847, "trainer": [847, 863], "quo": 847, "dopamin": 847, "ignit": 847, "catalyst": 847, "lightn": 847, "fastai": 847, "publicli": [849, 850, 851], "logger": 849, "arg_stateful_idx": 849, "kwarg_stateful_idx": 849, "include_gener": 849, "array_cach": 849, "return_backend_traced_fn": 849, "lazygraph": [849, 850, 851], "sum_j": 849, "traced_fn": 849, "impos": 849, "comp_func": 849, "trade": 849, "bake": 849, "cont": 849, "new_attribut": 849, "resnet50": 849, "breed": 849, "autoimageprocessor": [849, 850], "resnetforimageclassif": [849, 850], "traced_graph": 849, "predicted_label": 849, "debug_mod": 850, "rough": 850, "transformed_with_st": 850, "bigger": 850, "hf": 850, "tf_model": 850, "tf_input": 850, "transpile_kwarg": 851, "transpiled_func": 851, "unified_func": 851, "rwork": 852, "vendor": [852, 858], "complimentari": [852, 862], "acycl": [852, 857], "insert_numb": 853, "insert_t": 853, "scaffold": [854, 862], "heart": 854, "toolchain": [854, 859], "assembli": [854, 861, 862], "idl": 854, "middl": 854, "emit": 854, "gnu": [854, 859], "broader": 854, "heterogen": 854, "aid": 854, "coprocessor": 854, "programm": [854, 861], "gate": 854, "onednn": 854, "sit": [854, 857, 862], "tandem": 854, "possess": 854, "khrono": [855, 861], "appl": 855, "coremltool": 855, "albeit": 855, "promin": 856, "abbrevi": 856, "laboratori": 856, "proprietari": [856, 860, 861], "mathwork": 856, "commerci": 856, "1984": 856, "toolbox": 856, "mupad": 856, "simulink": 856, "graphic": [856, 860, 861], "simul": 856, "million": [856, 859], "worldwid": 856, "scienc": [856, 858], "econom": 856, "2001": 856, "od": 856, "solver": 856, "cython": 856, "friendli": 856, "2002": 856, "lua": 856, "luajit": 856, "idiap": 856, "epfl": 856, "2005": 856, "numarrai": 856, "cpython": 856, "partli": 856, "2007": 856, "forest": 856, "boost": 856, "dbscan": 856, "inbuilt": 856, "esqu": 856, "aesara": 856, "datafram": 856, "2012": 856, "polymorph": 856, "mpi": 856, "openmp": 856, "glue": 856, "jaot": 856, "nasa": 856, "cern": 856, "climat": 856, "allianc": 856, "influenti": 856, "2014": 856, "scala": 856, "ship": 856, "forgiv": 856, "decemb": 856, "announc": 856, "mainten": 856, "v7": 856, "meaning": 856, "2016": 856, "imper": 856, "amazon": 856, "traction": 856, "cognit": [856, 863], "grade": 856, "dnn": 856, "backpropag": 856, "succumb": 856, "came": 856, "monitor": 856, "practition": [856, 860, 861, 862], "hobbyist": 856, "tremend": 856, "ecosystem": 856, "gear": 856, "batteri": 856, "zygot": 856, "jl": 856, "workload": 856, "daggerflux": 856, "frontier": 856, "hessian": 856, "2018": 856, "lightweight": [856, 863], "shortcom": 856, "barrier": 856, "inexperienc": 856, "underdevelop": 856, "fanat": 856, "ounc": 856, "infanc": 856, "emerg": 856, "nich": 856, "mobil": 856, "lite": 856, "enterpris": 856, "reinvent": [856, 858], "inertia": 856, "creator": [856, 858], "paszk": 856, "hi": 856, "bulk": 856, "haskel": 856, "dataflow": 857, "trace_modul": 857, "scriptfunct": 857, "scriptmodul": 857, "fake": 857, "proxi": 857, "graphmodul": 857, "travi": 858, "oliph": 858, "leader": 858, "cornerston": 858, "numba": 858, "numfocu": 858, "pydata": 858, "confer": 858, "consult": 858, "servic": 858, "expertis": 858, "devop": 858, "mlop": 858, "dashboard": 858, "startup": 858, "mlir": [858, 859, 862], "Their": 858, "held": 858, "privileg": 858, "presum": 858, "llvm": [858, 861], "founder": 858, "tvm": [858, 862], "sustain": 858, "empow": 858, "har": 858, "burden": 858, "benchmark": 858, "precompil": 859, "executor": 859, "julia": [859, 862], "fsf": 859, "gpl": 859, "biggest": [859, 862], "throughput": 860, "gpgpu": 860, "classic": 861, "sycl": 861, "dpc": 861, "processor": 861, "maco": 861, "oneapi": 861, "ia": 861, "aka": 861, "xeon": 861, "gen9": 861, "xe": 861, "arria": 861, "gx": 861, "fpga": 861, "lofti": 862, "ambit": 862, "realm": 862, "bedrock": 862, "flux": 862, "bite": 862, "chew": 862, "eagerpi": 862, "tensorli": 862, "thinc": 862, "neuropod": 862, "fx": 862, "retrain": 862, "closer": 862, "greatli": 862, "modular": 862, "anywher": 862, "theano": 863, "plaidml": 863, "partial_svd": 863, "excel": 863, "subsystem": 863}, "objects": {"ivy.Array": [[215, 0, 1, "", "abs"], [216, 0, 1, "", "acos"], [217, 0, 1, "", "acosh"], [603, 0, 1, "", "adam_step"], [604, 0, 1, "", "adam_update"], [382, 0, 1, "", "adaptive_avg_pool1d"], [383, 0, 1, "", "adaptive_avg_pool2d"], [384, 0, 1, "", "adaptive_max_pool2d"], [218, 0, 1, "", "add"], [416, 0, 1, "", "adjoint"], [755, 0, 1, "", "all"], [523, 0, 1, "", "all_equal"], [328, 0, 1, "", "allclose"], [329, 0, 1, "", "amax"], [330, 0, 1, "", "amin"], [219, 0, 1, "", "angle"], [756, 0, 1, "", "any"], [732, 0, 1, "", "argmax"], [733, 0, 1, "", "argmin"], [741, 0, 1, "", "argsort"], [734, 0, 1, "", "argwhere"], [526, 0, 1, "", "array_equal"], [450, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [220, 0, 1, "", "asin"], [221, 0, 1, "", "asinh"], [527, 0, 1, "", "assert_supports_inplace"], [451, 0, 1, "", "associative_scan"], [147, 0, 1, "", "astype"], [222, 0, 1, "", "atan"], [223, 0, 1, "", "atan2"], [224, 0, 1, "", "atanh"], [452, 0, 1, "", "atleast_1d"], [453, 0, 1, "", "atleast_2d"], [454, 0, 1, "", "atleast_3d"], [386, 0, 1, "", "avg_pool1d"], [387, 0, 1, "", "avg_pool2d"], [388, 0, 1, "", "avg_pool3d"], [490, 0, 1, "", "batch_norm"], [417, 0, 1, "", "batched_outer"], [497, 0, 1, "", "bernoulli"], [498, 0, 1, "", "beta"], [331, 0, 1, "", "binarizer"], [684, 0, 1, "", "binary_cross_entropy"], [509, 0, 1, "", "bincount"], [225, 0, 1, "", "bitwise_and"], [226, 0, 1, "", "bitwise_invert"], [227, 0, 1, "", "bitwise_left_shift"], [228, 0, 1, "", "bitwise_or"], [229, 0, 1, "", "bitwise_right_shift"], [230, 0, 1, "", "bitwise_xor"], [306, 0, 1, "", "blackman_window"], [148, 0, 1, "", "broadcast_arrays"], [149, 0, 1, "", "broadcast_to"], [150, 0, 1, "", "can_cast"], [231, 0, 1, "", "ceil"], [290, 0, 1, "", "celu"], [654, 0, 1, "", "cholesky"], [687, 0, 1, "", "clip"], [529, 0, 1, "", "clip_matrix_norm"], [530, 0, 1, "", "clip_vector_norm"], [458, 0, 1, "", "column_stack"], [688, 0, 1, "", "concat"], [459, 0, 1, "", "concat_from_sequence"], [418, 0, 1, "", "cond"], [332, 0, 1, "", "conj"], [689, 0, 1, "", "constant_pad"], [638, 0, 1, "", "conv1d"], [639, 0, 1, "", "conv1d_transpose"], [640, 0, 1, "", "conv2d"], [641, 0, 1, "", "conv2d_transpose"], [642, 0, 1, "", "conv3d"], [643, 0, 1, "", "conv3d_transpose"], [124, 0, 1, "", "copy_array"], [333, 0, 1, "", "copysign"], [510, 0, 1, "", "corrcoef"], [232, 0, 1, "", "cos"], [233, 0, 1, "", "cosh"], [334, 0, 1, "", "count_nonzero"], [511, 0, 1, "", "cov"], [655, 0, 1, "", "cross"], [685, 0, 1, "", "cross_entropy"], [512, 0, 1, "", "cummax"], [513, 0, 1, "", "cummin"], [745, 0, 1, "", "cumprod"], [746, 0, 1, "", "cumsum"], [389, 0, 1, "", "dct"], [533, 0, 1, "", "default"], [234, 0, 1, "", "deg2rad"], [646, 0, 1, "", "depthwise_conv2d"], [656, 0, 1, "", "det"], [192, 0, 1, "", "dev"], [390, 0, 1, "", "dft"], [657, 0, 1, "", "diag"], [419, 0, 1, "", "diagflat"], [658, 0, 1, "", "diagonal"], [335, 0, 1, "", "diff"], [336, 0, 1, "", "digamma"], [499, 0, 1, "", "dirichlet"], [235, 0, 1, "", "divide"], [420, 0, 1, "", "dot"], [647, 0, 1, "", "dropout"], [391, 0, 1, "", "dropout1d"], [392, 0, 1, "", "dropout2d"], [393, 0, 1, "", "dropout3d"], [460, 0, 1, "", "dsplit"], [461, 0, 1, "", "dstack"], [158, 0, 1, "", "dtype"], [421, 0, 1, "", "eig"], [660, 0, 1, "", "eigh"], [422, 0, 1, "", "eigh_tridiagonal"], [423, 0, 1, "", "eigvals"], [661, 0, 1, "", "eigvalsh"], [534, 0, 1, "", "einops_rearrange"], [535, 0, 1, "", "einops_reduce"], [536, 0, 1, "", "einops_repeat"], [747, 0, 1, "", "einsum"], [291, 0, 1, "", "elu"], [394, 0, 1, "", "embedding"], [126, 0, 1, "", "empty_like"], [236, 0, 1, "", "equal"], [237, 0, 1, "", "erf"], [337, 0, 1, "", "erfc"], [537, 0, 1, "", "exists"], [238, 0, 1, "", "exp"], [239, 0, 1, "", "exp2"], [462, 0, 1, "", "expand"], [690, 0, 1, "", "expand_dims"], [240, 0, 1, "", "expm1"], [307, 0, 1, "", "eye_like"], [395, 0, 1, "", "fft"], [396, 0, 1, "", "fft2"], [463, 0, 1, "", "fill_diagonal"], [160, 0, 1, "", "finfo"], [338, 0, 1, "", "fix"], [464, 0, 1, "", "flatten"], [691, 0, 1, "", "flip"], [465, 0, 1, "", "fliplr"], [466, 0, 1, "", "flipud"], [339, 0, 1, "", "float_power"], [241, 0, 1, "", "floor"], [242, 0, 1, "", "floor_divide"], [340, 0, 1, "", "fmax"], [243, 0, 1, "", "fmin"], [244, 0, 1, "", "fmod"], [467, 0, 1, "", "fold"], [538, 0, 1, "", "fourier_encode"], [341, 0, 1, "", "frexp"], [128, 0, 1, "", "from_dlpack"], [131, 0, 1, "", "full_like"], [500, 0, 1, "", "gamma"], [541, 0, 1, "", "gather"], [542, 0, 1, "", "gather_nd"], [245, 0, 1, "", "gcd"], [105, 0, 1, "", "gelu"], [424, 0, 1, "", "general_inner_product"], [545, 0, 1, "", "get_num_dims"], [342, 0, 1, "", "gradient"], [607, 0, 1, "", "gradient_descent_update"], [246, 0, 1, "", "greater"], [247, 0, 1, "", "greater_equal"], [491, 0, 1, "", "group_norm"], [292, 0, 1, "", "hardshrink"], [106, 0, 1, "", "hardswish"], [293, 0, 1, "", "hardtanh"], [547, 0, 1, "", "has_nans"], [468, 0, 1, "", "heaviside"], [425, 0, 1, "", "higher_order_moment"], [442, 0, 1, "", "hinge_embedding_loss"], [514, 0, 1, "", "histogram"], [469, 0, 1, "", "hsplit"], [470, 0, 1, "", "hstack"], [443, 0, 1, "", "huber_loss"], [343, 0, 1, "", "hypot"], [471, 0, 1, "", "i0"], [399, 0, 1, "", "idct"], [400, 0, 1, "", "ifft"], [401, 0, 1, "", "ifftn"], [515, 0, 1, "", "igamma"], [163, 0, 1, "", "iinfo"], [248, 0, 1, "", "imag"], [426, 0, 1, "", "initialize_tucker"], [662, 0, 1, "", "inner"], [549, 0, 1, "", "inplace_decrement"], [550, 0, 1, "", "inplace_increment"], [551, 0, 1, "", "inplace_update"], [492, 0, 1, "", "instance_norm"], [403, 0, 1, "", "interpolate"], [663, 0, 1, "", "inv"], [553, 0, 1, "", "is_array"], [166, 0, 1, "", "is_bool_dtype"], [168, 0, 1, "", "is_float_dtype"], [170, 0, 1, "", "is_int_dtype"], [554, 0, 1, "", "is_ivy_array"], [555, 0, 1, "", "is_ivy_container"], [557, 0, 1, "", "is_native_array"], [172, 0, 1, "", "is_uint_dtype"], [344, 0, 1, "", "isclose"], [249, 0, 1, "", "isfinite"], [558, 0, 1, "", "isin"], [250, 0, 1, "", "isinf"], [251, 0, 1, "", "isnan"], [252, 0, 1, "", "isreal"], [560, 0, 1, "", "itemsize"], [444, 0, 1, "", "kl_div"], [428, 0, 1, "", "kron"], [445, 0, 1, "", "l1_loss"], [493, 0, 1, "", "l1_normalize"], [494, 0, 1, "", "l2_normalize"], [609, 0, 1, "", "lamb_update"], [610, 0, 1, "", "lars_update"], [725, 0, 1, "", "layer_norm"], [253, 0, 1, "", "lcm"], [345, 0, 1, "", "ldexp"], [107, 0, 1, "", "leaky_relu"], [346, 0, 1, "", "lerp"], [254, 0, 1, "", "less"], [255, 0, 1, "", "less_equal"], [504, 0, 1, "", "lexsort"], [347, 0, 1, "", "lgamma"], [648, 0, 1, "", "linear"], [132, 0, 1, "", "linspace"], [256, 0, 1, "", "log"], [257, 0, 1, "", "log10"], [258, 0, 1, "", "log1p"], [259, 0, 1, "", "log2"], [446, 0, 1, "", "log_poisson_loss"], [108, 0, 1, "", "log_softmax"], [260, 0, 1, "", "logaddexp"], [261, 0, 1, "", "logaddexp2"], [262, 0, 1, "", "logical_and"], [263, 0, 1, "", "logical_not"], [264, 0, 1, "", "logical_or"], [265, 0, 1, "", "logical_xor"], [294, 0, 1, "", "logit"], [295, 0, 1, "", "logsigmoid"], [133, 0, 1, "", "logspace"], [496, 0, 1, "", "lp_normalize"], [649, 0, 1, "", "lstm_update"], [430, 0, 1, "", "make_svd_non_negative"], [665, 0, 1, "", "matmul"], [472, 0, 1, "", "matricize"], [431, 0, 1, "", "matrix_exp"], [666, 0, 1, "", "matrix_norm"], [667, 0, 1, "", "matrix_power"], [668, 0, 1, "", "matrix_rank"], [669, 0, 1, "", "matrix_transpose"], [748, 0, 1, "", "max"], [404, 0, 1, "", "max_pool1d"], [405, 0, 1, "", "max_pool2d"], [406, 0, 1, "", "max_pool3d"], [407, 0, 1, "", "max_unpool1d"], [266, 0, 1, "", "maximum"], [749, 0, 1, "", "mean"], [516, 0, 1, "", "median"], [313, 0, 1, "", "mel_weight_matrix"], [134, 0, 1, "", "meshgrid"], [750, 0, 1, "", "min"], [267, 0, 1, "", "minimum"], [109, 0, 1, "", "mish"], [432, 0, 1, "", "mode_dot"], [348, 0, 1, "", "modf"], [473, 0, 1, "", "moveaxis"], [742, 0, 1, "", "msort"], [433, 0, 1, "", "multi_dot"], [650, 0, 1, "", "multi_head_attention"], [434, 0, 1, "", "multi_mode_dot"], [726, 0, 1, "", "multinomial"], [268, 0, 1, "", "multiply"], [269, 0, 1, "", "nan_to_num"], [517, 0, 1, "", "nanmean"], [518, 0, 1, "", "nanmedian"], [519, 0, 1, "", "nanmin"], [520, 0, 1, "", "nanprod"], [349, 0, 1, "", "nansum"], [135, 0, 1, "", "native_array"], [270, 0, 1, "", "negative"], [350, 0, 1, "", "nextafter"], [735, 0, 1, "", "nonzero"], [271, 0, 1, "", "not_equal"], [136, 0, 1, "", "one_hot"], [138, 0, 1, "", "ones_like"], [611, 0, 1, "", "optimizer_update"], [522, 0, 1, "", "optional_get_element"], [670, 0, 1, "", "outer"], [474, 0, 1, "", "pad"], [475, 0, 1, "", "partial_fold"], [476, 0, 1, "", "partial_tensor_to_vec"], [435, 0, 1, "", "partial_tucker"], [477, 0, 1, "", "partial_unfold"], [478, 0, 1, "", "partial_vec_to_tensor"], [692, 0, 1, "", "permute_dims"], [671, 0, 1, "", "pinv"], [501, 0, 1, "", "poisson"], [447, 0, 1, "", "poisson_nll_loss"], [272, 0, 1, "", "positive"], [273, 0, 1, "", "pow"], [296, 0, 1, "", "prelu"], [751, 0, 1, "", "prod"], [479, 0, 1, "", "put_along_axis"], [672, 0, 1, "", "qr"], [521, 0, 1, "", "quantile"], [274, 0, 1, "", "rad2deg"], [727, 0, 1, "", "randint"], [728, 0, 1, "", "random_normal"], [729, 0, 1, "", "random_uniform"], [275, 0, 1, "", "real"], [276, 0, 1, "", "reciprocal"], [356, 0, 1, "", "reduce"], [410, 0, 1, "", "reduce_window"], [110, 0, 1, "", "relu"], [297, 0, 1, "", "relu6"], [277, 0, 1, "", "remainder"], [693, 0, 1, "", "repeat"], [694, 0, 1, "", "reshape"], [175, 0, 1, "", "result_type"], [411, 0, 1, "", "rfft"], [412, 0, 1, "", "rfftn"], [695, 0, 1, "", "roll"], [480, 0, 1, "", "rot90"], [278, 0, 1, "", "round"], [653, 0, 1, "", "scaled_dot_product_attention"], [298, 0, 1, "", "scaled_tanh"], [565, 0, 1, "", "scatter_flat"], [566, 0, 1, "", "scatter_nd"], [743, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [579, 0, 1, "", "shape"], [731, 0, 1, "", "shuffle"], [111, 0, 1, "", "sigmoid"], [279, 0, 1, "", "sign"], [351, 0, 1, "", "signbit"], [300, 0, 1, "", "silu"], [280, 0, 1, "", "sin"], [352, 0, 1, "", "sinc"], [281, 0, 1, "", "sinh"], [414, 0, 1, "", "sliding_window"], [673, 0, 1, "", "slogdet"], [448, 0, 1, "", "smooth_l1_loss"], [449, 0, 1, "", "soft_margin_loss"], [481, 0, 1, "", "soft_thresholding"], [112, 0, 1, "", "softmax"], [113, 0, 1, "", "softplus"], [301, 0, 1, "", "softshrink"], [674, 0, 1, "", "solve"], [744, 0, 1, "", "sort"], [686, 0, 1, "", "sparse_cross_entropy"], [353, 0, 1, "", "sparsify_tensor"], [696, 0, 1, "", "split"], [282, 0, 1, "", "sqrt"], [283, 0, 1, "", "square"], [697, 0, 1, "", "squeeze"], [580, 0, 1, "", "stable_divide"], [581, 0, 1, "", "stable_pow"], [698, 0, 1, "", "stack"], [752, 0, 1, "", "std"], [415, 0, 1, "", "stft"], [612, 0, 1, "", "stop_gradient"], [582, 0, 1, "", "strides"], [284, 0, 1, "", "subtract"], [753, 0, 1, "", "sum"], [583, 0, 1, "", "supports_inplace_updates"], [675, 0, 1, "", "svd"], [437, 0, 1, "", "svd_flip"], [676, 0, 1, "", "svdvals"], [699, 0, 1, "", "swapaxes"], [482, 0, 1, "", "take"], [483, 0, 1, "", "take_along_axis"], [285, 0, 1, "", "tan"], [286, 0, 1, "", "tanh"], [303, 0, 1, "", "tanhshrink"], [438, 0, 1, "", "tensor_train"], [677, 0, 1, "", "tensordot"], [678, 0, 1, "", "tensorsolve"], [304, 0, 1, "", "threshold"], [305, 0, 1, "", "thresholded_relu"], [700, 0, 1, "", "tile"], [209, 0, 1, "", "to_device"], [585, 0, 1, "", "to_list"], [587, 0, 1, "", "to_numpy"], [588, 0, 1, "", "to_scalar"], [484, 0, 1, "", "top_k"], [679, 0, 1, "", "trace"], [287, 0, 1, "", "trapz"], [140, 0, 1, "", "tril"], [323, 0, 1, "", "trilu"], [485, 0, 1, "", "trim_zeros"], [141, 0, 1, "", "triu"], [288, 0, 1, "", "trunc"], [289, 0, 1, "", "trunc_divide"], [439, 0, 1, "", "truncated_svd"], [440, 0, 1, "", "tt_matrix_to_tensor"], [441, 0, 1, "", "tucker"], [486, 0, 1, "", "unfold"], [737, 0, 1, "", "unique_all"], [487, 0, 1, "", "unique_consecutive"], [738, 0, 1, "", "unique_counts"], [739, 0, 1, "", "unique_inverse"], [740, 0, 1, "", "unique_values"], [502, 0, 1, "", "unravel_index"], [324, 0, 1, "", "unsorted_segment_mean"], [325, 0, 1, "", "unsorted_segment_min"], [326, 0, 1, "", "unsorted_segment_sum"], [701, 0, 1, "", "unstack"], [601, 0, 1, "", "value_is_nan"], [680, 0, 1, "", "vander"], [754, 0, 1, "", "var"], [681, 0, 1, "", "vecdot"], [682, 0, 1, "", "vector_norm"], [683, 0, 1, "", "vector_to_skew_symmetric_matrix"], [488, 0, 1, "", "vsplit"], [489, 0, 1, "", "vstack"], [736, 0, 1, "", "where"], [354, 0, 1, "", "xlogy"], [702, 0, 1, "", "zero_pad"], [144, 0, 1, "", "zeros_like"], [355, 0, 1, "", "zeta"]], "ivy": [[622, 1, 1, "", "ArrayMode"], [618, 1, 1, "", "DefaultComplexDtype"], [619, 1, 1, "", "DefaultDevice"], [618, 1, 1, "", "DefaultDtype"], [618, 1, 1, "", "DefaultFloatDtype"], [618, 1, 1, "", "DefaultIntDtype"], [618, 1, 1, "", "DefaultUintDtype"], [379, 1, 1, "", "NativeSparseArray"], [617, 1, 1, "", "NestedSequence"], [622, 1, 1, "", "PreciseMode"], [619, 1, 1, "", "Profiler"], [379, 1, 1, "", "SparseArray"], [215, 2, 1, "", "abs"], [216, 2, 1, "", "acos"], [217, 2, 1, "", "acosh"], [623, 2, 1, "", "adam_step"], [623, 2, 1, "", "adam_update"], [382, 2, 1, "", "adaptive_avg_pool1d"], [383, 2, 1, "", "adaptive_avg_pool2d"], [384, 2, 1, "", "adaptive_max_pool2d"], [218, 2, 1, "", "add"], [369, 2, 1, "", "adjoint"], [636, 2, 1, "", "all"], [622, 2, 1, "", "all_equal"], [629, 2, 1, "", "all_nested_indices"], [365, 2, 1, "", "allclose"], [365, 2, 1, "", "amax"], [365, 2, 1, "", "amin"], [219, 2, 1, "", "angle"], [636, 2, 1, "", "any"], [617, 2, 1, "", "arange"], [385, 2, 1, "", "area_interpolate"], [622, 2, 1, "", "arg_info"], [622, 2, 1, "", "arg_names"], [632, 2, 1, "", "argmax"], [632, 2, 1, "", "argmin"], [634, 2, 1, "", "argsort"], [632, 2, 1, "", "argwhere"], [617, 2, 1, "", "array"], [622, 2, 1, "", "array_equal"], [188, 2, 1, "", "as_ivy_dev"], [618, 2, 1, "", "as_ivy_dtype"], [189, 2, 1, "", "as_native_dev"], [618, 2, 1, "", "as_native_dtype"], [371, 2, 1, "", "as_strided"], [617, 2, 1, "", "asarray"], [220, 2, 1, "", "asin"], [221, 2, 1, "", "asinh"], [622, 2, 1, "", "assert_supports_inplace"], [371, 2, 1, "", "associative_scan"], [618, 2, 1, "", "astype"], [222, 2, 1, "", "atan"], [223, 2, 1, "", "atan2"], [224, 2, 1, "", "atanh"], [371, 2, 1, "", "atleast_1d"], [371, 2, 1, "", "atleast_2d"], [371, 2, 1, "", "atleast_3d"], [386, 2, 1, "", "avg_pool1d"], [387, 2, 1, "", "avg_pool2d"], [388, 2, 1, "", "avg_pool3d"], [374, 2, 1, "", "batch_norm"], [369, 2, 1, "", "batched_outer"], [375, 2, 1, "", "bernoulli"], [375, 2, 1, "", "beta"], [365, 2, 1, "", "binarizer"], [626, 2, 1, "", "binary_cross_entropy"], [380, 2, 1, "", "bincount"], [367, 2, 1, "", "bind_custom_gradient_function"], [225, 2, 1, "", "bitwise_and"], [226, 2, 1, "", "bitwise_invert"], [227, 2, 1, "", "bitwise_left_shift"], [228, 2, 1, "", "bitwise_or"], [229, 2, 1, "", "bitwise_right_shift"], [230, 2, 1, "", "bitwise_xor"], [306, 2, 1, "", "blackman_window"], [618, 2, 1, "", "broadcast_arrays"], [371, 2, 1, "", "broadcast_shapes"], [618, 2, 1, "", "broadcast_to"], [622, 2, 1, "", "cache_fn"], [618, 2, 1, "", "can_cast"], [231, 2, 1, "", "ceil"], [290, 2, 1, "", "celu"], [618, 2, 1, "", "check_float"], [371, 2, 1, "", "check_scalar"], [625, 2, 1, "", "cholesky"], [371, 2, 1, "", "choose"], [190, 2, 1, "", "clear_cached_mem_on_dev"], [627, 2, 1, "", "clip"], [622, 2, 1, "", "clip_matrix_norm"], [622, 2, 1, "", "clip_vector_norm"], [618, 2, 1, "", "closest_valid_dtype"], [616, 2, 1, "", "cmp_is"], [616, 2, 1, "", "cmp_isnot"], [371, 2, 1, "", "column_stack"], [627, 2, 1, "", "concat"], [371, 2, 1, "", "concat_from_sequence"], [369, 2, 1, "", "cond"], [365, 2, 1, "", "conj"], [627, 2, 1, "", "constant_pad"], [622, 2, 1, "", "container_types"], [637, 2, 1, "", "conv"], [638, 2, 1, "", "conv1d"], [639, 2, 1, "", "conv1d_transpose"], [640, 2, 1, "", "conv2d"], [641, 2, 1, "", "conv2d_transpose"], [642, 2, 1, "", "conv3d"], [643, 2, 1, "", "conv3d_transpose"], [624, 2, 1, "", "conv_general_dilated"], [624, 2, 1, "", "conv_general_transpose"], [617, 2, 1, "", "copy_array"], [629, 2, 1, "", "copy_nest"], [365, 2, 1, "", "copysign"], [380, 2, 1, "", "corrcoef"], [232, 2, 1, "", "cos"], [233, 2, 1, "", "cosh"], [365, 2, 1, "", "count_nonzero"], [380, 2, 1, "", "cov"], [625, 2, 1, "", "cross"], [626, 2, 1, "", "cross_entropy"], [380, 2, 1, "", "cummax"], [380, 2, 1, "", "cummin"], [635, 2, 1, "", "cumprod"], [635, 2, 1, "", "cumsum"], [622, 2, 1, "", "current_backend_str"], [389, 2, 1, "", "dct"], [622, 2, 1, "", "default"], [618, 2, 1, "", "default_complex_dtype"], [191, 2, 1, "", "default_device"], [618, 2, 1, "", "default_dtype"], [618, 2, 1, "", "default_float_dtype"], [618, 2, 1, "", "default_int_dtype"], [618, 2, 1, "", "default_uint_dtype"], [234, 2, 1, "", "deg2rad"], [624, 2, 1, "", "depthwise_conv2d"], [625, 2, 1, "", "det"], [192, 2, 1, "", "dev"], [193, 2, 1, "", "dev_util"], [390, 2, 1, "", "dft"], [625, 2, 1, "", "diag"], [369, 2, 1, "", "diagflat"], [625, 2, 1, "", "diagonal"], [365, 2, 1, "", "diff"], [365, 2, 1, "", "digamma"], [375, 2, 1, "", "dirichlet"], [235, 2, 1, "", "divide"], [369, 2, 1, "", "dot"], [624, 2, 1, "", "dropout"], [391, 2, 1, "", "dropout1d"], [392, 2, 1, "", "dropout2d"], [393, 2, 1, "", "dropout3d"], [371, 2, 1, "", "dsplit"], [371, 2, 1, "", "dstack"], [618, 2, 1, "", "dtype"], [618, 2, 1, "", "dtype_bits"], [629, 2, 1, "", "duplicate_array_index_chains"], [615, 6, 1, "", "e"], [369, 2, 1, "", "eig"], [625, 2, 1, "", "eigh"], [369, 2, 1, "", "eigh_tridiagonal"], [369, 2, 1, "", "eigvals"], [625, 2, 1, "", "eigvalsh"], [622, 2, 1, "", "einops_rearrange"], [622, 2, 1, "", "einops_reduce"], [622, 2, 1, "", "einops_repeat"], [635, 2, 1, "", "einsum"], [291, 2, 1, "", "elu"], [394, 2, 1, "", "embedding"], [617, 2, 1, "", "empty"], [617, 2, 1, "", "empty_like"], [236, 2, 1, "", "equal"], [237, 2, 1, "", "erf"], [365, 2, 1, "", "erfc"], [623, 2, 1, "", "execute_with_gradients"], [622, 2, 1, "", "exists"], [238, 2, 1, "", "exp"], [239, 2, 1, "", "exp2"], [371, 2, 1, "", "expand"], [627, 2, 1, "", "expand_dims"], [240, 2, 1, "", "expm1"], [617, 2, 1, "", "eye"], [307, 2, 1, "", "eye_like"], [395, 2, 1, "", "fft"], [396, 2, 1, "", "fft2"], [371, 2, 1, "", "fill_diagonal"], [618, 2, 1, "", "finfo"], [365, 2, 1, "", "fix"], [371, 2, 1, "", "flatten"], [627, 2, 1, "", "flip"], [371, 2, 1, "", "fliplr"], [371, 2, 1, "", "flipud"], [365, 2, 1, "", "float_power"], [241, 2, 1, "", "floor"], [242, 2, 1, "", "floor_divide"], [365, 2, 1, "", "fmax"], [243, 2, 1, "", "fmin"], [244, 2, 1, "", "fmod"], [371, 2, 1, "", "fold"], [628, 2, 1, "", "fomaml_step"], [616, 2, 1, "", "for_loop"], [622, 2, 1, "", "fourier_encode"], [365, 2, 1, "", "frexp"], [617, 2, 1, "", "from_dlpack"], [617, 2, 1, "", "frombuffer"], [617, 2, 1, "", "full"], [617, 2, 1, "", "full_like"], [194, 2, 1, "", "function_supported_devices"], [622, 2, 1, "", "function_supported_devices_and_dtypes"], [618, 2, 1, "", "function_supported_dtypes"], [195, 2, 1, "", "function_unsupported_devices"], [622, 2, 1, "", "function_unsupported_devices_and_dtypes"], [618, 2, 1, "", "function_unsupported_dtypes"], [375, 2, 1, "", "gamma"], [622, 2, 1, "", "gather"], [622, 2, 1, "", "gather_nd"], [245, 2, 1, "", "gcd"], [614, 2, 1, "", "gelu"], [369, 2, 1, "", "general_inner_product"], [397, 2, 1, "", "generate_einsum_equation"], [622, 2, 1, "", "get_all_arrays_in_memory"], [196, 2, 1, "", "get_all_ivy_arrays_on_dev"], [398, 2, 1, "", "get_interpolate_kernel"], [622, 2, 1, "", "get_item"], [622, 2, 1, "", "get_num_dims"], [622, 2, 1, "", "get_referrers_recursive"], [197, 2, 1, "", "gpu_is_available"], [623, 2, 1, "", "grad"], [365, 2, 1, "", "gradient"], [623, 2, 1, "", "gradient_descent_update"], [246, 2, 1, "", "greater"], [247, 2, 1, "", "greater_equal"], [374, 2, 1, "", "group_norm"], [308, 2, 1, "", "hamming_window"], [198, 2, 1, "", "handle_soft_device_variable"], [309, 2, 1, "", "hann_window"], [292, 2, 1, "", "hardshrink"], [614, 2, 1, "", "hardswish"], [293, 2, 1, "", "hardtanh"], [622, 2, 1, "", "has_nans"], [371, 2, 1, "", "heaviside"], [369, 2, 1, "", "higher_order_moment"], [370, 2, 1, "", "hinge_embedding_loss"], [380, 2, 1, "", "histogram"], [371, 2, 1, "", "hsplit"], [371, 2, 1, "", "hstack"], [370, 2, 1, "", "huber_loss"], [365, 2, 1, "", "hypot"], [371, 2, 1, "", "i0"], [399, 2, 1, "", "idct"], [616, 2, 1, "", "if_else"], [400, 2, 1, "", "ifft"], [401, 2, 1, "", "ifftn"], [380, 2, 1, "", "igamma"], [618, 2, 1, "", "iinfo"], [248, 2, 1, "", "imag"], [629, 2, 1, "", "index_nest"], [310, 2, 1, "", "indices"], [615, 6, 1, "", "inf"], [618, 2, 1, "", "infer_default_dtype"], [369, 2, 1, "", "initialize_tucker"], [625, 2, 1, "", "inner"], [622, 2, 1, "", "inplace_arrays_supported"], [622, 2, 1, "", "inplace_decrement"], [622, 2, 1, "", "inplace_increment"], [622, 2, 1, "", "inplace_update"], [622, 2, 1, "", "inplace_variables_supported"], [629, 2, 1, "", "insert_into_nest_at_index"], [629, 2, 1, "", "insert_into_nest_at_indices"], [374, 2, 1, "", "instance_norm"], [402, 2, 1, "", "interp"], [403, 2, 1, "", "interpolate"], [625, 2, 1, "", "inv"], [618, 2, 1, "", "invalid_dtype"], [378, 2, 1, "", "invert_permutation"], [622, 2, 1, "", "is_array"], [618, 2, 1, "", "is_bool_dtype"], [618, 2, 1, "", "is_complex_dtype"], [618, 2, 1, "", "is_float_dtype"], [618, 2, 1, "", "is_hashable_dtype"], [618, 2, 1, "", "is_int_dtype"], [622, 2, 1, "", "is_ivy_array"], [622, 2, 1, "", "is_ivy_container"], [622, 2, 1, "", "is_ivy_nested_array"], [379, 2, 1, "", "is_ivy_sparse_array"], [622, 2, 1, "", "is_native_array"], [618, 2, 1, "", "is_native_dtype"], [379, 2, 1, "", "is_native_sparse_array"], [618, 2, 1, "", "is_uint_dtype"], [365, 2, 1, "", "isclose"], [249, 2, 1, "", "isfinite"], [622, 2, 1, "", "isin"], [250, 2, 1, "", "isinf"], [251, 2, 1, "", "isnan"], [252, 2, 1, "", "isreal"], [622, 2, 1, "", "isscalar"], [622, 2, 1, "", "itemsize"], [623, 2, 1, "", "jac"], [367, 2, 1, "", "jvp"], [311, 2, 1, "", "kaiser_bessel_derived_window"], [312, 2, 1, "", "kaiser_window"], [369, 2, 1, "", "khatri_rao"], [370, 2, 1, "", "kl_div"], [369, 2, 1, "", "kron"], [369, 2, 1, "", "kronecker"], [370, 2, 1, "", "l1_loss"], [374, 2, 1, "", "l1_normalize"], [374, 2, 1, "", "l2_normalize"], [623, 2, 1, "", "lamb_update"], [623, 2, 1, "", "lars_update"], [630, 2, 1, "", "layer_norm"], [253, 2, 1, "", "lcm"], [365, 2, 1, "", "ldexp"], [614, 2, 1, "", "leaky_relu"], [365, 2, 1, "", "lerp"], [254, 2, 1, "", "less"], [255, 2, 1, "", "less_equal"], [378, 2, 1, "", "lexsort"], [365, 2, 1, "", "lgamma"], [624, 2, 1, "", "linear"], [617, 2, 1, "", "linspace"], [636, 2, 1, "", "load"], [374, 2, 1, "", "local_response_norm"], [256, 2, 1, "", "log"], [257, 2, 1, "", "log10"], [258, 2, 1, "", "log1p"], [259, 2, 1, "", "log2"], [370, 2, 1, "", "log_poisson_loss"], [614, 2, 1, "", "log_softmax"], [260, 2, 1, "", "logaddexp"], [261, 2, 1, "", "logaddexp2"], [262, 2, 1, "", "logical_and"], [263, 2, 1, "", "logical_not"], [264, 2, 1, "", "logical_or"], [265, 2, 1, "", "logical_xor"], [294, 2, 1, "", "logit"], [295, 2, 1, "", "logsigmoid"], [617, 2, 1, "", "logspace"], [374, 2, 1, "", "lp_normalize"], [624, 2, 1, "", "lstm_update"], [625, 2, 1, "", "lu_factor"], [369, 2, 1, "", "make_svd_non_negative"], [628, 2, 1, "", "maml_step"], [629, 2, 1, "", "map"], [629, 2, 1, "", "map_nest_at_index"], [629, 2, 1, "", "map_nest_at_indices"], [622, 2, 1, "", "match_kwargs"], [625, 2, 1, "", "matmul"], [371, 2, 1, "", "matricize"], [369, 2, 1, "", "matrix_exp"], [625, 2, 1, "", "matrix_norm"], [625, 2, 1, "", "matrix_power"], [625, 2, 1, "", "matrix_rank"], [625, 2, 1, "", "matrix_transpose"], [635, 2, 1, "", "max"], [404, 2, 1, "", "max_pool1d"], [405, 2, 1, "", "max_pool2d"], [406, 2, 1, "", "max_pool3d"], [407, 2, 1, "", "max_unpool1d"], [266, 2, 1, "", "maximum"], [635, 2, 1, "", "mean"], [380, 2, 1, "", "median"], [313, 2, 1, "", "mel_weight_matrix"], [617, 2, 1, "", "meshgrid"], [635, 2, 1, "", "min"], [267, 2, 1, "", "minimum"], [614, 2, 1, "", "mish"], [369, 2, 1, "", "mode_dot"], [365, 2, 1, "", "modf"], [371, 2, 1, "", "moveaxis"], [634, 2, 1, "", "msort"], [369, 2, 1, "", "multi_dot"], [624, 2, 1, "", "multi_head_attention"], [629, 2, 1, "", "multi_index_nest"], [369, 2, 1, "", "multi_mode_dot"], [631, 2, 1, "", "multinomial"], [268, 2, 1, "", "multiply"], [622, 2, 1, "", "multiprocessing"], [615, 6, 1, "", "nan"], [269, 2, 1, "", "nan_to_num"], [380, 2, 1, "", "nanmean"], [380, 2, 1, "", "nanmedian"], [380, 2, 1, "", "nanmin"], [380, 2, 1, "", "nanprod"], [365, 2, 1, "", "nansum"], [617, 2, 1, "", "native_array"], [379, 2, 1, "", "native_sparse_array"], [379, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [314, 2, 1, "", "ndenumerate"], [315, 2, 1, "", "ndindex"], [408, 2, 1, "", "nearest_interpolate"], [270, 2, 1, "", "negative"], [629, 2, 1, "", "nested_any"], [629, 2, 1, "", "nested_argwhere"], [629, 2, 1, "", "nested_map"], [629, 2, 1, "", "nested_multi_map"], [615, 6, 1, "", "newaxis"], [365, 2, 1, "", "nextafter"], [624, 2, 1, "", "nms"], [632, 2, 1, "", "nonzero"], [271, 2, 1, "", "not_equal"], [622, 2, 1, "", "num_arrays_in_memory"], [199, 2, 1, "", "num_cpu_cores"], [200, 2, 1, "", "num_gpus"], [201, 2, 1, "", "num_ivy_arrays_on_dev"], [617, 2, 1, "", "one_hot"], [617, 2, 1, "", "ones"], [617, 2, 1, "", "ones_like"], [623, 2, 1, "", "optimizer_update"], [381, 2, 1, "", "optional_get_element"], [625, 2, 1, "", "outer"], [371, 2, 1, "", "pad"], [371, 2, 1, "", "partial_fold"], [371, 2, 1, "", "partial_tensor_to_vec"], [369, 2, 1, "", "partial_tucker"], [371, 2, 1, "", "partial_unfold"], [371, 2, 1, "", "partial_vec_to_tensor"], [202, 2, 1, "", "percent_used_mem_on_dev"], [627, 2, 1, "", "permute_dims"], [615, 6, 1, "", "pi"], [625, 2, 1, "", "pinv"], [375, 2, 1, "", "poisson"], [370, 2, 1, "", "poisson_nll_loss"], [316, 2, 1, "", "polyval"], [409, 2, 1, "", "pool"], [272, 2, 1, "", "positive"], [273, 2, 1, "", "pow"], [296, 2, 1, "", "prelu"], [622, 2, 1, "", "print_all_arrays_in_memory"], [203, 2, 1, "", "print_all_ivy_arrays_on_dev"], [635, 2, 1, "", "prod"], [618, 2, 1, "", "promote_types"], [618, 2, 1, "", "promote_types_of_inputs"], [629, 2, 1, "", "prune_empty"], [629, 2, 1, "", "prune_nest_at_index"], [629, 2, 1, "", "prune_nest_at_indices"], [371, 2, 1, "", "put_along_axis"], [625, 2, 1, "", "qr"], [380, 2, 1, "", "quantile"], [274, 2, 1, "", "rad2deg"], [631, 2, 1, "", "randint"], [317, 2, 1, "", "random_cp"], [631, 2, 1, "", "random_normal"], [318, 2, 1, "", "random_parafac2"], [319, 2, 1, "", "random_tr"], [320, 2, 1, "", "random_tt"], [321, 2, 1, "", "random_tucker"], [631, 2, 1, "", "random_uniform"], [275, 2, 1, "", "real"], [276, 2, 1, "", "reciprocal"], [366, 2, 1, "", "reduce"], [410, 2, 1, "", "reduce_window"], [614, 2, 1, "", "relu"], [297, 2, 1, "", "relu6"], [277, 2, 1, "", "remainder"], [627, 2, 1, "", "repeat"], [628, 2, 1, "", "reptile_step"], [627, 2, 1, "", "reshape"], [618, 2, 1, "", "result_type"], [411, 2, 1, "", "rfft"], [412, 2, 1, "", "rfftn"], [413, 2, 1, "", "rnn"], [624, 2, 1, "", "roi_align"], [627, 2, 1, "", "roll"], [371, 2, 1, "", "rot90"], [278, 2, 1, "", "round"], [636, 2, 1, "", "save"], [624, 2, 1, "", "scaled_dot_product_attention"], [298, 2, 1, "", "scaled_tanh"], [622, 2, 1, "", "scatter_flat"], [622, 2, 1, "", "scatter_nd"], [634, 2, 1, "", "searchsorted"], [631, 2, 1, "", "seed"], [299, 2, 1, "", "selu"], [622, 2, 1, "", "set_array_mode"], [618, 2, 1, "", "set_default_complex_dtype"], [204, 2, 1, "", "set_default_device"], [618, 2, 1, "", "set_default_dtype"], [618, 2, 1, "", "set_default_float_dtype"], [618, 2, 1, "", "set_default_int_dtype"], [618, 2, 1, "", "set_default_uint_dtype"], [622, 2, 1, "", "set_exception_trace_mode"], [622, 2, 1, "", "set_inplace_mode"], [622, 2, 1, "", "set_item"], [622, 2, 1, "", "set_min_base"], [622, 2, 1, "", "set_min_denominator"], [629, 2, 1, "", "set_nest_at_index"], [629, 2, 1, "", "set_nest_at_indices"], [622, 2, 1, "", "set_nestable_mode"], [622, 2, 1, "", "set_precise_mode"], [622, 2, 1, "", "set_queue_timeout"], [622, 2, 1, "", "set_shape_array_mode"], [622, 2, 1, "", "set_show_func_wrapper_trace_mode"], [205, 2, 1, "", "set_soft_device_mode"], [206, 2, 1, "", "set_split_factor"], [622, 2, 1, "", "set_tmp_dir"], [622, 2, 1, "", "shape"], [631, 2, 1, "", "shuffle"], [614, 2, 1, "", "sigmoid"], [279, 2, 1, "", "sign"], [365, 2, 1, "", "signbit"], [300, 2, 1, "", "silu"], [280, 2, 1, "", "sin"], [365, 2, 1, "", "sinc"], [281, 2, 1, "", "sinh"], [368, 2, 1, "", "sliding_window"], [625, 2, 1, "", "slogdet"], [370, 2, 1, "", "smooth_l1_loss"], [370, 2, 1, "", "soft_margin_loss"], [371, 2, 1, "", "soft_thresholding"], [614, 2, 1, "", "softmax"], [614, 2, 1, "", "softplus"], [301, 2, 1, "", "softshrink"], [614, 2, 1, "", "softsign"], [625, 2, 1, "", "solve"], [369, 2, 1, "", "solve_triangular"], [634, 2, 1, "", "sort"], [626, 2, 1, "", "sparse_cross_entropy"], [365, 2, 1, "", "sparsify_tensor"], [627, 2, 1, "", "split"], [207, 2, 1, "", "split_factor"], [208, 2, 1, "", "split_func_call"], [282, 2, 1, "", "sqrt"], [283, 2, 1, "", "square"], [627, 2, 1, "", "squeeze"], [622, 2, 1, "", "stable_divide"], [622, 2, 1, "", "stable_pow"], [627, 2, 1, "", "stack"], [302, 2, 1, "", "stanh"], [635, 2, 1, "", "std"], [368, 2, 1, "", "stft"], [623, 2, 1, "", "stop_gradient"], [622, 2, 1, "", "strides"], [284, 2, 1, "", "subtract"], [635, 2, 1, "", "sum"], [622, 2, 1, "", "supports_inplace_updates"], [625, 2, 1, "", "svd"], [369, 2, 1, "", "svd_flip"], [625, 2, 1, "", "svdvals"], [627, 2, 1, "", "swapaxes"], [371, 2, 1, "", "take"], [371, 2, 1, "", "take_along_axis"], [285, 2, 1, "", "tan"], [286, 2, 1, "", "tanh"], [303, 2, 1, "", "tanhshrink"], [369, 2, 1, "", "tensor_train"], [625, 2, 1, "", "tensordot"], [625, 2, 1, "", "tensorsolve"], [304, 2, 1, "", "threshold"], [305, 2, 1, "", "thresholded_relu"], [627, 2, 1, "", "tile"], [209, 2, 1, "", "to_device"], [617, 2, 1, "", "to_dlpack"], [622, 2, 1, "", "to_ivy_shape"], [622, 2, 1, "", "to_list"], [622, 2, 1, "", "to_native_shape"], [622, 2, 1, "", "to_numpy"], [622, 2, 1, "", "to_scalar"], [371, 2, 1, "", "top_k"], [210, 2, 1, "", "total_mem_on_dev"], [211, 2, 1, "", "tpu_is_available"], [625, 2, 1, "", "trace"], [849, 2, 1, "", "trace_graph"], [850, 2, 1, "", "transpile"], [287, 2, 1, "", "trapz"], [617, 2, 1, "", "tril"], [362, 2, 1, "", "tril_indices"], [362, 2, 1, "", "trilu"], [371, 2, 1, "", "trim_zeros"], [617, 2, 1, "", "triu"], [617, 2, 1, "", "triu_indices"], [288, 2, 1, "", "trunc"], [289, 2, 1, "", "trunc_divide"], [369, 2, 1, "", "truncated_svd"], [622, 2, 1, "", "try_else_none"], [616, 2, 1, "", "try_except"], [369, 2, 1, "", "tt_matrix_to_tensor"], [369, 2, 1, "", "tucker"], [618, 2, 1, "", "type_promote_arrays"], [371, 2, 1, "", "unfold"], [851, 2, 1, "", "unify"], [633, 2, 1, "", "unique_all"], [371, 2, 1, "", "unique_consecutive"], [633, 2, 1, "", "unique_counts"], [633, 2, 1, "", "unique_inverse"], [633, 2, 1, "", "unique_values"], [376, 2, 1, "", "unravel_index"], [622, 2, 1, "", "unset_array_mode"], [618, 2, 1, "", "unset_default_complex_dtype"], [212, 2, 1, "", "unset_default_device"], [618, 2, 1, "", "unset_default_dtype"], [184, 2, 1, "", "unset_default_float_dtype"], [185, 2, 1, "", "unset_default_int_dtype"], [186, 2, 1, "", "unset_default_uint_dtype"], [622, 2, 1, "", "unset_exception_trace_mode"], [622, 2, 1, "", "unset_inplace_mode"], [622, 2, 1, "", "unset_min_base"], [622, 2, 1, "", "unset_min_denominator"], [622, 2, 1, "", "unset_nestable_mode"], [622, 2, 1, "", "unset_precise_mode"], [622, 2, 1, "", "unset_queue_timeout"], [622, 2, 1, "", "unset_shape_array_mode"], [622, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [213, 2, 1, "", "unset_soft_device_mode"], [622, 2, 1, "", "unset_tmp_dir"], [362, 2, 1, "", "unsorted_segment_mean"], [362, 2, 1, "", "unsorted_segment_min"], [362, 2, 1, "", "unsorted_segment_sum"], [627, 2, 1, "", "unstack"], [214, 2, 1, "", "used_mem_on_dev"], [187, 2, 1, "", "valid_dtype"], [623, 2, 1, "", "value_and_grad"], [622, 2, 1, "", "value_is_nan"], [625, 2, 1, "", "vander"], [635, 2, 1, "", "var"], [625, 2, 1, "", "vecdot"], [625, 2, 1, "", "vector_norm"], [625, 2, 1, "", "vector_to_skew_symmetric_matrix"], [367, 2, 1, "", "vjp"], [622, 2, 1, "", "vmap"], [362, 2, 1, "", "vorbis_window"], [371, 2, 1, "", "vsplit"], [371, 2, 1, "", "vstack"], [632, 2, 1, "", "where"], [616, 2, 1, "", "while_loop"], [365, 2, 1, "", "xlogy"], [627, 2, 1, "", "zero_pad"], [617, 2, 1, "", "zeros"], [617, 2, 1, "", "zeros_like"], [365, 2, 1, "", "zeta"]], "ivy.Container": [[215, 0, 1, "", "abs"], [216, 0, 1, "", "acos"], [217, 0, 1, "", "acosh"], [603, 0, 1, "", "adam_step"], [604, 0, 1, "", "adam_update"], [382, 0, 1, "", "adaptive_avg_pool1d"], [383, 0, 1, "", "adaptive_avg_pool2d"], [384, 0, 1, "", "adaptive_max_pool2d"], [218, 0, 1, "", "add"], [416, 0, 1, "", "adjoint"], [755, 0, 1, "", "all"], [523, 0, 1, "", "all_equal"], [328, 0, 1, "", "allclose"], [329, 0, 1, "", "amax"], [330, 0, 1, "", "amin"], [219, 0, 1, "", "angle"], [756, 0, 1, "", "any"], [732, 0, 1, "", "argmax"], [733, 0, 1, "", "argmin"], [741, 0, 1, "", "argsort"], [734, 0, 1, "", "argwhere"], [526, 0, 1, "", "array_equal"], [450, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [220, 0, 1, "", "asin"], [221, 0, 1, "", "asinh"], [527, 0, 1, "", "assert_supports_inplace"], [451, 0, 1, "", "associative_scan"], [147, 0, 1, "", "astype"], [222, 0, 1, "", "atan"], [223, 0, 1, "", "atan2"], [224, 0, 1, "", "atanh"], [452, 0, 1, "", "atleast_1d"], [453, 0, 1, "", "atleast_2d"], [454, 0, 1, "", "atleast_3d"], [386, 0, 1, "", "avg_pool1d"], [387, 0, 1, "", "avg_pool2d"], [388, 0, 1, "", "avg_pool3d"], [490, 0, 1, "", "batch_norm"], [417, 0, 1, "", "batched_outer"], [497, 0, 1, "", "bernoulli"], [498, 0, 1, "", "beta"], [331, 0, 1, "", "binarizer"], [684, 0, 1, "", "binary_cross_entropy"], [509, 0, 1, "", "bincount"], [225, 0, 1, "", "bitwise_and"], [226, 0, 1, "", "bitwise_invert"], [227, 0, 1, "", "bitwise_left_shift"], [228, 0, 1, "", "bitwise_or"], [229, 0, 1, "", "bitwise_right_shift"], [230, 0, 1, "", "bitwise_xor"], [306, 0, 1, "", "blackman_window"], [148, 0, 1, "", "broadcast_arrays"], [455, 0, 1, "", "broadcast_shapes"], [149, 0, 1, "", "broadcast_to"], [150, 0, 1, "", "can_cast"], [231, 0, 1, "", "ceil"], [290, 0, 1, "", "celu"], [654, 0, 1, "", "cholesky"], [687, 0, 1, "", "clip"], [529, 0, 1, "", "clip_matrix_norm"], [530, 0, 1, "", "clip_vector_norm"], [458, 0, 1, "", "column_stack"], [688, 0, 1, "", "concat"], [459, 0, 1, "", "concat_from_sequence"], [418, 0, 1, "", "cond"], [332, 0, 1, "", "conj"], [689, 0, 1, "", "constant_pad"], [638, 0, 1, "", "conv1d"], [639, 0, 1, "", "conv1d_transpose"], [640, 0, 1, "", "conv2d"], [641, 0, 1, "", "conv2d_transpose"], [642, 0, 1, "", "conv3d"], [643, 0, 1, "", "conv3d_transpose"], [124, 0, 1, "", "copy_array"], [333, 0, 1, "", "copysign"], [510, 0, 1, "", "corrcoef"], [232, 0, 1, "", "cos"], [233, 0, 1, "", "cosh"], [334, 0, 1, "", "count_nonzero"], [511, 0, 1, "", "cov"], [655, 0, 1, "", "cross"], [685, 0, 1, "", "cross_entropy"], [512, 0, 1, "", "cummax"], [513, 0, 1, "", "cummin"], [745, 0, 1, "", "cumprod"], [746, 0, 1, "", "cumsum"], [389, 0, 1, "", "dct"], [234, 0, 1, "", "deg2rad"], [646, 0, 1, "", "depthwise_conv2d"], [656, 0, 1, "", "det"], [192, 0, 1, "", "dev"], [390, 0, 1, "", "dft"], [657, 0, 1, "", "diag"], [419, 0, 1, "", "diagflat"], [658, 0, 1, "", "diagonal"], [335, 0, 1, "", "diff"], [336, 0, 1, "", "digamma"], [499, 0, 1, "", "dirichlet"], [235, 0, 1, "", "divide"], [420, 0, 1, "", "dot"], [647, 0, 1, "", "dropout"], [391, 0, 1, "", "dropout1d"], [392, 0, 1, "", "dropout2d"], [393, 0, 1, "", "dropout3d"], [460, 0, 1, "", "dsplit"], [461, 0, 1, "", "dstack"], [158, 0, 1, "", "dtype"], [421, 0, 1, "", "eig"], [660, 0, 1, "", "eigh"], [422, 0, 1, "", "eigh_tridiagonal"], [423, 0, 1, "", "eigvals"], [661, 0, 1, "", "eigvalsh"], [534, 0, 1, "", "einops_rearrange"], [535, 0, 1, "", "einops_reduce"], [536, 0, 1, "", "einops_repeat"], [747, 0, 1, "", "einsum"], [291, 0, 1, "", "elu"], [394, 0, 1, "", "embedding"], [126, 0, 1, "", "empty_like"], [236, 0, 1, "", "equal"], [237, 0, 1, "", "erf"], [337, 0, 1, "", "erfc"], [537, 0, 1, "", "exists"], [238, 0, 1, "", "exp"], [239, 0, 1, "", "exp2"], [462, 0, 1, "", "expand"], [690, 0, 1, "", "expand_dims"], [240, 0, 1, "", "expm1"], [307, 0, 1, "", "eye_like"], [395, 0, 1, "", "fft"], [463, 0, 1, "", "fill_diagonal"], [160, 0, 1, "", "finfo"], [338, 0, 1, "", "fix"], [464, 0, 1, "", "flatten"], [691, 0, 1, "", "flip"], [465, 0, 1, "", "fliplr"], [466, 0, 1, "", "flipud"], [339, 0, 1, "", "float_power"], [241, 0, 1, "", "floor"], [242, 0, 1, "", "floor_divide"], [340, 0, 1, "", "fmax"], [243, 0, 1, "", "fmin"], [244, 0, 1, "", "fmod"], [467, 0, 1, "", "fold"], [538, 0, 1, "", "fourier_encode"], [341, 0, 1, "", "frexp"], [128, 0, 1, "", "from_dlpack"], [129, 0, 1, "", "frombuffer"], [131, 0, 1, "", "full_like"], [500, 0, 1, "", "gamma"], [541, 0, 1, "", "gather"], [542, 0, 1, "", "gather_nd"], [245, 0, 1, "", "gcd"], [105, 0, 1, "", "gelu"], [424, 0, 1, "", "general_inner_product"], [545, 0, 1, "", "get_num_dims"], [342, 0, 1, "", "gradient"], [607, 0, 1, "", "gradient_descent_update"], [246, 0, 1, "", "greater"], [247, 0, 1, "", "greater_equal"], [491, 0, 1, "", "group_norm"], [308, 0, 1, "", "hamming_window"], [309, 0, 1, "", "hann_window"], [292, 0, 1, "", "hardshrink"], [106, 0, 1, "", "hardswish"], [293, 0, 1, "", "hardtanh"], [547, 0, 1, "", "has_nans"], [468, 0, 1, "", "heaviside"], [425, 0, 1, "", "higher_order_moment"], [442, 0, 1, "", "hinge_embedding_loss"], [514, 0, 1, "", "histogram"], [469, 0, 1, "", "hsplit"], [470, 0, 1, "", "hstack"], [443, 0, 1, "", "huber_loss"], [343, 0, 1, "", "hypot"], [471, 0, 1, "", "i0"], [399, 0, 1, "", "idct"], [400, 0, 1, "", "ifft"], [401, 0, 1, "", "ifftn"], [515, 0, 1, "", "igamma"], [163, 0, 1, "", "iinfo"], [248, 0, 1, "", "imag"], [426, 0, 1, "", "initialize_tucker"], [662, 0, 1, "", "inner"], [549, 0, 1, "", "inplace_decrement"], [550, 0, 1, "", "inplace_increment"], [551, 0, 1, "", "inplace_update"], [492, 0, 1, "", "instance_norm"], [403, 0, 1, "", "interpolate"], [663, 0, 1, "", "inv"], [503, 0, 1, "", "invert_permutation"], [553, 0, 1, "", "is_array"], [166, 0, 1, "", "is_bool_dtype"], [167, 0, 1, "", "is_complex_dtype"], [168, 0, 1, "", "is_float_dtype"], [170, 0, 1, "", "is_int_dtype"], [554, 0, 1, "", "is_ivy_array"], [557, 0, 1, "", "is_native_array"], [172, 0, 1, "", "is_uint_dtype"], [344, 0, 1, "", "isclose"], [249, 0, 1, "", "isfinite"], [558, 0, 1, "", "isin"], [250, 0, 1, "", "isinf"], [251, 0, 1, "", "isnan"], [252, 0, 1, "", "isreal"], [560, 0, 1, "", "itemsize"], [311, 0, 1, "", "kaiser_bessel_derived_window"], [312, 0, 1, "", "kaiser_window"], [444, 0, 1, "", "kl_div"], [428, 0, 1, "", "kron"], [445, 0, 1, "", "l1_loss"], [493, 0, 1, "", "l1_normalize"], [494, 0, 1, "", "l2_normalize"], [609, 0, 1, "", "lamb_update"], [610, 0, 1, "", "lars_update"], [725, 0, 1, "", "layer_norm"], [253, 0, 1, "", "lcm"], [345, 0, 1, "", "ldexp"], [107, 0, 1, "", "leaky_relu"], [346, 0, 1, "", "lerp"], [254, 0, 1, "", "less"], [255, 0, 1, "", "less_equal"], [504, 0, 1, "", "lexsort"], [648, 0, 1, "", "linear"], [132, 0, 1, "", "linspace"], [256, 0, 1, "", "log"], [257, 0, 1, "", "log10"], [258, 0, 1, "", "log1p"], [259, 0, 1, "", "log2"], [446, 0, 1, "", "log_poisson_loss"], [108, 0, 1, "", "log_softmax"], [260, 0, 1, "", "logaddexp"], [261, 0, 1, "", "logaddexp2"], [262, 0, 1, "", "logical_and"], [263, 0, 1, "", "logical_not"], [264, 0, 1, "", "logical_or"], [265, 0, 1, "", "logical_xor"], [294, 0, 1, "", "logit"], [295, 0, 1, "", "logsigmoid"], [133, 0, 1, "", "logspace"], [496, 0, 1, "", "lp_normalize"], [649, 0, 1, "", "lstm_update"], [430, 0, 1, "", "make_svd_non_negative"], [665, 0, 1, "", "matmul"], [472, 0, 1, "", "matricize"], [431, 0, 1, "", "matrix_exp"], [666, 0, 1, "", "matrix_norm"], [667, 0, 1, "", "matrix_power"], [668, 0, 1, "", "matrix_rank"], [669, 0, 1, "", "matrix_transpose"], [748, 0, 1, "", "max"], [404, 0, 1, "", "max_pool1d"], [405, 0, 1, "", "max_pool2d"], [406, 0, 1, "", "max_pool3d"], [407, 0, 1, "", "max_unpool1d"], [266, 0, 1, "", "maximum"], [749, 0, 1, "", "mean"], [516, 0, 1, "", "median"], [313, 0, 1, "", "mel_weight_matrix"], [134, 0, 1, "", "meshgrid"], [750, 0, 1, "", "min"], [267, 0, 1, "", "minimum"], [109, 0, 1, "", "mish"], [432, 0, 1, "", "mode_dot"], [348, 0, 1, "", "modf"], [473, 0, 1, "", "moveaxis"], [742, 0, 1, "", "msort"], [433, 0, 1, "", "multi_dot"], [650, 0, 1, "", "multi_head_attention"], [434, 0, 1, "", "multi_mode_dot"], [726, 0, 1, "", "multinomial"], [268, 0, 1, "", "multiply"], [269, 0, 1, "", "nan_to_num"], [517, 0, 1, "", "nanmean"], [518, 0, 1, "", "nanmedian"], [519, 0, 1, "", "nanmin"], [520, 0, 1, "", "nanprod"], [349, 0, 1, "", "nansum"], [135, 0, 1, "", "native_array"], [270, 0, 1, "", "negative"], [350, 0, 1, "", "nextafter"], [735, 0, 1, "", "nonzero"], [271, 0, 1, "", "not_equal"], [136, 0, 1, "", "one_hot"], [138, 0, 1, "", "ones_like"], [611, 0, 1, "", "optimizer_update"], [522, 0, 1, "", "optional_get_element"], [670, 0, 1, "", "outer"], [474, 0, 1, "", "pad"], [475, 0, 1, "", "partial_fold"], [476, 0, 1, "", "partial_tensor_to_vec"], [435, 0, 1, "", "partial_tucker"], [477, 0, 1, "", "partial_unfold"], [478, 0, 1, "", "partial_vec_to_tensor"], [692, 0, 1, "", "permute_dims"], [671, 0, 1, "", "pinv"], [501, 0, 1, "", "poisson"], [447, 0, 1, "", "poisson_nll_loss"], [316, 0, 1, "", "polyval"], [272, 0, 1, "", "positive"], [273, 0, 1, "", "pow"], [296, 0, 1, "", "prelu"], [751, 0, 1, "", "prod"], [479, 0, 1, "", "put_along_axis"], [672, 0, 1, "", "qr"], [521, 0, 1, "", "quantile"], [274, 0, 1, "", "rad2deg"], [727, 0, 1, "", "randint"], [728, 0, 1, "", "random_normal"], [729, 0, 1, "", "random_uniform"], [275, 0, 1, "", "real"], [276, 0, 1, "", "reciprocal"], [356, 0, 1, "", "reduce"], [410, 0, 1, "", "reduce_window"], [110, 0, 1, "", "relu"], [297, 0, 1, "", "relu6"], [277, 0, 1, "", "remainder"], [693, 0, 1, "", "repeat"], [694, 0, 1, "", "reshape"], [175, 0, 1, "", "result_type"], [411, 0, 1, "", "rfft"], [412, 0, 1, "", "rfftn"], [695, 0, 1, "", "roll"], [480, 0, 1, "", "rot90"], [278, 0, 1, "", "round"], [653, 0, 1, "", "scaled_dot_product_attention"], [298, 0, 1, "", "scaled_tanh"], [565, 0, 1, "", "scatter_flat"], [566, 0, 1, "", "scatter_nd"], [743, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [731, 0, 1, "", "shuffle"], [111, 0, 1, "", "sigmoid"], [279, 0, 1, "", "sign"], [351, 0, 1, "", "signbit"], [300, 0, 1, "", "silu"], [280, 0, 1, "", "sin"], [352, 0, 1, "", "sinc"], [281, 0, 1, "", "sinh"], [414, 0, 1, "", "sliding_window"], [673, 0, 1, "", "slogdet"], [448, 0, 1, "", "smooth_l1_loss"], [449, 0, 1, "", "soft_margin_loss"], [481, 0, 1, "", "soft_thresholding"], [112, 0, 1, "", "softmax"], [113, 0, 1, "", "softplus"], [301, 0, 1, "", "softshrink"], [674, 0, 1, "", "solve"], [744, 0, 1, "", "sort"], [686, 0, 1, "", "sparse_cross_entropy"], [353, 0, 1, "", "sparsify_tensor"], [696, 0, 1, "", "split"], [282, 0, 1, "", "sqrt"], [283, 0, 1, "", "square"], [697, 0, 1, "", "squeeze"], [580, 0, 1, "", "stable_divide"], [581, 0, 1, "", "stable_pow"], [698, 0, 1, "", "stack"], [752, 0, 1, "", "std"], [415, 0, 1, "", "stft"], [612, 0, 1, "", "stop_gradient"], [582, 0, 1, "", "strides"], [284, 0, 1, "", "subtract"], [753, 0, 1, "", "sum"], [583, 0, 1, "", "supports_inplace_updates"], [675, 0, 1, "", "svd"], [437, 0, 1, "", "svd_flip"], [676, 0, 1, "", "svdvals"], [699, 0, 1, "", "swapaxes"], [482, 0, 1, "", "take"], [483, 0, 1, "", "take_along_axis"], [285, 0, 1, "", "tan"], [286, 0, 1, "", "tanh"], [303, 0, 1, "", "tanhshrink"], [438, 0, 1, "", "tensor_train"], [677, 0, 1, "", "tensordot"], [678, 0, 1, "", "tensorsolve"], [304, 0, 1, "", "threshold"], [305, 0, 1, "", "thresholded_relu"], [700, 0, 1, "", "tile"], [209, 0, 1, "", "to_device"], [585, 0, 1, "", "to_list"], [587, 0, 1, "", "to_numpy"], [588, 0, 1, "", "to_scalar"], [484, 0, 1, "", "top_k"], [679, 0, 1, "", "trace"], [287, 0, 1, "", "trapz"], [140, 0, 1, "", "tril"], [322, 0, 1, "", "tril_indices"], [323, 0, 1, "", "trilu"], [485, 0, 1, "", "trim_zeros"], [141, 0, 1, "", "triu"], [142, 0, 1, "", "triu_indices"], [288, 0, 1, "", "trunc"], [289, 0, 1, "", "trunc_divide"], [439, 0, 1, "", "truncated_svd"], [440, 0, 1, "", "tt_matrix_to_tensor"], [441, 0, 1, "", "tucker"], [486, 0, 1, "", "unfold"], [737, 0, 1, "", "unique_all"], [487, 0, 1, "", "unique_consecutive"], [738, 0, 1, "", "unique_counts"], [739, 0, 1, "", "unique_inverse"], [740, 0, 1, "", "unique_values"], [502, 0, 1, "", "unravel_index"], [324, 0, 1, "", "unsorted_segment_mean"], [325, 0, 1, "", "unsorted_segment_min"], [326, 0, 1, "", "unsorted_segment_sum"], [701, 0, 1, "", "unstack"], [601, 0, 1, "", "value_is_nan"], [680, 0, 1, "", "vander"], [754, 0, 1, "", "var"], [681, 0, 1, "", "vecdot"], [682, 0, 1, "", "vector_norm"], [683, 0, 1, "", "vector_to_skew_symmetric_matrix"], [327, 0, 1, "", "vorbis_window"], [488, 0, 1, "", "vsplit"], [489, 0, 1, "", "vstack"], [736, 0, 1, "", "where"], [354, 0, 1, "", "xlogy"], [702, 0, 1, "", "zero_pad"], [144, 0, 1, "", "zeros_like"], [355, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[46, 3, 0, "-", "activations"], [97, 3, 0, "-", "array"], [47, 3, 0, "-", "conversions"], [48, 3, 0, "-", "creation"], [49, 3, 0, "-", "data_type"], [50, 3, 0, "-", "device"], [51, 3, 0, "-", "elementwise"], [52, 3, 0, "-", "experimental"], [53, 3, 0, "-", "general"], [54, 3, 0, "-", "gradients"], [55, 3, 0, "-", "image"], [56, 3, 0, "-", "layers"], [57, 3, 0, "-", "linear_algebra"], [58, 3, 0, "-", "losses"], [59, 3, 0, "-", "manipulation"], [60, 3, 0, "-", "norms"], [61, 3, 0, "-", "random"], [62, 3, 0, "-", "searching"], [63, 3, 0, "-", "set"], [64, 3, 0, "-", "sorting"], [65, 3, 0, "-", "statistical"], [66, 3, 0, "-", "utility"], [67, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[46, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "gelu"], [46, 0, 1, "", "hardswish"], [46, 0, 1, "", "leaky_relu"], [46, 0, 1, "", "log_softmax"], [46, 0, 1, "", "mish"], [46, 0, 1, "", "relu"], [46, 0, 1, "", "sigmoid"], [46, 0, 1, "", "softmax"], [46, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[97, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[97, 5, 1, "", "T"], [97, 0, 1, "", "__abs__"], [97, 0, 1, "", "__add__"], [97, 0, 1, "", "__eq__"], [97, 0, 1, "", "__ge__"], [97, 0, 1, "", "__gt__"], [97, 0, 1, "", "__init__"], [97, 0, 1, "", "__le__"], [97, 0, 1, "", "__lt__"], [97, 0, 1, "", "__ne__"], [97, 0, 1, "", "__pow__"], [97, 0, 1, "", "__radd__"], [97, 0, 1, "", "__rrshift__"], [97, 0, 1, "", "__rshift__"], [97, 0, 1, "", "__rsub__"], [97, 0, 1, "", "__sub__"], [97, 0, 1, "", "__truediv__"], [97, 0, 1, "", "__xor__"], [97, 5, 1, "", "backend"], [97, 5, 1, "", "base"], [97, 5, 1, "", "data"], [97, 5, 1, "", "device"], [97, 5, 1, "", "dtype"], [97, 5, 1, "", "dynamic_backend"], [97, 5, 1, "", "imag"], [97, 5, 1, "", "itemsize"], [97, 5, 1, "", "mT"], [97, 5, 1, "", "ndim"], [97, 5, 1, "", "real"], [97, 5, 1, "", "shape"], [97, 5, 1, "", "size"], [97, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[47, 2, 1, "", "_array_to_new_backend"], [47, 2, 1, "", "_to_ivy"], [47, 2, 1, "", "_to_native"], [47, 2, 1, "", "_to_new_backend"], [47, 2, 1, "", "args_to_ivy"], [47, 2, 1, "", "args_to_native"], [47, 2, 1, "", "args_to_new_backend"], [47, 2, 1, "", "to_ivy"], [47, 2, 1, "", "to_native"], [47, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[48, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "asarray"], [48, 0, 1, "", "copy_array"], [48, 0, 1, "", "empty_like"], [48, 0, 1, "", "from_dlpack"], [48, 0, 1, "", "full_like"], [48, 0, 1, "", "linspace"], [48, 0, 1, "", "logspace"], [48, 0, 1, "", "meshgrid"], [48, 0, 1, "", "native_array"], [48, 0, 1, "", "one_hot"], [48, 0, 1, "", "ones_like"], [48, 0, 1, "", "tril"], [48, 0, 1, "", "triu"], [48, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[49, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "astype"], [49, 0, 1, "", "broadcast_arrays"], [49, 0, 1, "", "broadcast_to"], [49, 0, 1, "", "can_cast"], [49, 0, 1, "", "dtype"], [49, 0, 1, "", "finfo"], [49, 0, 1, "", "iinfo"], [49, 0, 1, "", "is_bool_dtype"], [49, 0, 1, "", "is_float_dtype"], [49, 0, 1, "", "is_int_dtype"], [49, 0, 1, "", "is_uint_dtype"], [49, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[50, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "dev"], [50, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[51, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "abs"], [51, 0, 1, "", "acos"], [51, 0, 1, "", "acosh"], [51, 0, 1, "", "add"], [51, 0, 1, "", "angle"], [51, 0, 1, "", "asin"], [51, 0, 1, "", "asinh"], [51, 0, 1, "", "atan"], [51, 0, 1, "", "atan2"], [51, 0, 1, "", "atanh"], [51, 0, 1, "", "bitwise_and"], [51, 0, 1, "", "bitwise_invert"], [51, 0, 1, "", "bitwise_left_shift"], [51, 0, 1, "", "bitwise_or"], [51, 0, 1, "", "bitwise_right_shift"], [51, 0, 1, "", "bitwise_xor"], [51, 0, 1, "", "ceil"], [51, 0, 1, "", "cos"], [51, 0, 1, "", "cosh"], [51, 0, 1, "", "deg2rad"], [51, 0, 1, "", "divide"], [51, 0, 1, "", "equal"], [51, 0, 1, "", "erf"], [51, 0, 1, "", "exp"], [51, 0, 1, "", "exp2"], [51, 0, 1, "", "expm1"], [51, 0, 1, "", "floor"], [51, 0, 1, "", "floor_divide"], [51, 0, 1, "", "fmin"], [51, 0, 1, "", "gcd"], [51, 0, 1, "", "greater"], [51, 0, 1, "", "greater_equal"], [51, 0, 1, "", "imag"], [51, 0, 1, "", "isfinite"], [51, 0, 1, "", "isinf"], [51, 0, 1, "", "isnan"], [51, 0, 1, "", "isreal"], [51, 0, 1, "", "lcm"], [51, 0, 1, "", "less"], [51, 0, 1, "", "less_equal"], [51, 0, 1, "", "log"], [51, 0, 1, "", "log10"], [51, 0, 1, "", "log1p"], [51, 0, 1, "", "log2"], [51, 0, 1, "", "logaddexp"], [51, 0, 1, "", "logaddexp2"], [51, 0, 1, "", "logical_and"], [51, 0, 1, "", "logical_not"], [51, 0, 1, "", "logical_or"], [51, 0, 1, "", "logical_xor"], [51, 0, 1, "", "maximum"], [51, 0, 1, "", "minimum"], [51, 0, 1, "", "multiply"], [51, 0, 1, "", "nan_to_num"], [51, 0, 1, "", "negative"], [51, 0, 1, "", "not_equal"], [51, 0, 1, "", "positive"], [51, 0, 1, "", "pow"], [51, 0, 1, "", "rad2deg"], [51, 0, 1, "", "real"], [51, 0, 1, "", "reciprocal"], [51, 0, 1, "", "remainder"], [51, 0, 1, "", "round"], [51, 0, 1, "", "sign"], [51, 0, 1, "", "sin"], [51, 0, 1, "", "sinh"], [51, 0, 1, "", "sqrt"], [51, 0, 1, "", "square"], [51, 0, 1, "", "subtract"], [51, 0, 1, "", "tan"], [51, 0, 1, "", "tanh"], [51, 0, 1, "", "trapz"], [51, 0, 1, "", "trunc"], [51, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[52, 3, 0, "-", "activations"], [52, 3, 0, "-", "conversions"], [52, 3, 0, "-", "creation"], [52, 3, 0, "-", "data_type"], [52, 3, 0, "-", "device"], [52, 3, 0, "-", "elementwise"], [52, 3, 0, "-", "general"], [52, 3, 0, "-", "gradients"], [52, 3, 0, "-", "image"], [52, 3, 0, "-", "layers"], [52, 3, 0, "-", "linear_algebra"], [52, 3, 0, "-", "losses"], [52, 3, 0, "-", "manipulation"], [52, 3, 0, "-", "norms"], [52, 3, 0, "-", "random"], [52, 3, 0, "-", "searching"], [52, 3, 0, "-", "set"], [52, 3, 0, "-", "sorting"], [52, 3, 0, "-", "statistical"], [52, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[52, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "celu"], [52, 0, 1, "", "elu"], [52, 0, 1, "", "hardshrink"], [52, 0, 1, "", "hardtanh"], [52, 0, 1, "", "logit"], [52, 0, 1, "", "logsigmoid"], [52, 0, 1, "", "prelu"], [52, 0, 1, "", "relu6"], [52, 0, 1, "", "scaled_tanh"], [52, 0, 1, "", "selu"], [52, 0, 1, "", "silu"], [52, 0, 1, "", "softshrink"], [52, 0, 1, "", "tanhshrink"], [52, 0, 1, "", "threshold"], [52, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[52, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[52, 1, 1, "", "_ArrayWithCreationExperimental"], [52, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "blackman_window"], [52, 0, 1, "", "eye_like"], [52, 0, 1, "", "mel_weight_matrix"], [52, 0, 1, "", "trilu"], [52, 0, 1, "", "unsorted_segment_mean"], [52, 0, 1, "", "unsorted_segment_min"], [52, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[52, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[52, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[52, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "allclose"], [52, 0, 1, "", "amax"], [52, 0, 1, "", "amin"], [52, 0, 1, "", "binarizer"], [52, 0, 1, "", "conj"], [52, 0, 1, "", "copysign"], [52, 0, 1, "", "count_nonzero"], [52, 0, 1, "", "diff"], [52, 0, 1, "", "digamma"], [52, 0, 1, "", "erfc"], [52, 0, 1, "", "fix"], [52, 0, 1, "", "float_power"], [52, 0, 1, "", "fmax"], [52, 0, 1, "", "fmod"], [52, 0, 1, "", "frexp"], [52, 0, 1, "", "gradient"], [52, 0, 1, "", "hypot"], [52, 0, 1, "", "isclose"], [52, 0, 1, "", "ldexp"], [52, 0, 1, "", "lerp"], [52, 0, 1, "", "lgamma"], [52, 0, 1, "", "modf"], [52, 0, 1, "", "nansum"], [52, 0, 1, "", "nextafter"], [52, 0, 1, "", "signbit"], [52, 0, 1, "", "sinc"], [52, 0, 1, "", "sparsify_tensor"], [52, 0, 1, "", "xlogy"], [52, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[52, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[52, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[52, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[52, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "adaptive_avg_pool1d"], [52, 0, 1, "", "adaptive_avg_pool2d"], [52, 0, 1, "", "adaptive_max_pool2d"], [52, 0, 1, "", "avg_pool1d"], [52, 0, 1, "", "avg_pool2d"], [52, 0, 1, "", "avg_pool3d"], [52, 0, 1, "", "dct"], [52, 0, 1, "", "dft"], [52, 0, 1, "", "embedding"], [52, 0, 1, "", "fft"], [52, 0, 1, "", "fft2"], [52, 0, 1, "", "idct"], [52, 0, 1, "", "ifft"], [52, 0, 1, "", "ifftn"], [52, 0, 1, "", "interpolate"], [52, 0, 1, "", "max_pool1d"], [52, 0, 1, "", "max_pool2d"], [52, 0, 1, "", "max_pool3d"], [52, 0, 1, "", "max_unpool1d"], [52, 0, 1, "", "reduce_window"], [52, 0, 1, "", "rfft"], [52, 0, 1, "", "rfftn"], [52, 0, 1, "", "sliding_window"], [52, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[52, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "adjoint"], [52, 0, 1, "", "batched_outer"], [52, 0, 1, "", "cond"], [52, 0, 1, "", "diagflat"], [52, 0, 1, "", "dot"], [52, 0, 1, "", "eig"], [52, 0, 1, "", "eigh_tridiagonal"], [52, 0, 1, "", "eigvals"], [52, 0, 1, "", "general_inner_product"], [52, 0, 1, "", "higher_order_moment"], [52, 0, 1, "", "initialize_tucker"], [52, 0, 1, "", "kron"], [52, 0, 1, "", "make_svd_non_negative"], [52, 0, 1, "", "matrix_exp"], [52, 0, 1, "", "mode_dot"], [52, 0, 1, "", "multi_dot"], [52, 0, 1, "", "multi_mode_dot"], [52, 0, 1, "", "partial_tucker"], [52, 0, 1, "", "svd_flip"], [52, 0, 1, "", "tensor_train"], [52, 0, 1, "", "truncated_svd"], [52, 0, 1, "", "tt_matrix_to_tensor"], [52, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[52, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "hinge_embedding_loss"], [52, 0, 1, "", "huber_loss"], [52, 0, 1, "", "kl_div"], [52, 0, 1, "", "l1_loss"], [52, 0, 1, "", "log_poisson_loss"], [52, 0, 1, "", "poisson_nll_loss"], [52, 0, 1, "", "smooth_l1_loss"], [52, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[52, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "as_strided"], [52, 0, 1, "", "associative_scan"], [52, 0, 1, "", "atleast_1d"], [52, 0, 1, "", "atleast_2d"], [52, 0, 1, "", "atleast_3d"], [52, 0, 1, "", "column_stack"], [52, 0, 1, "", "concat_from_sequence"], [52, 0, 1, "", "dsplit"], [52, 0, 1, "", "dstack"], [52, 0, 1, "", "expand"], [52, 0, 1, "", "fill_diagonal"], [52, 0, 1, "", "flatten"], [52, 0, 1, "", "fliplr"], [52, 0, 1, "", "flipud"], [52, 0, 1, "", "fold"], [52, 0, 1, "", "heaviside"], [52, 0, 1, "", "hsplit"], [52, 0, 1, "", "hstack"], [52, 0, 1, "", "i0"], [52, 0, 1, "", "matricize"], [52, 0, 1, "", "moveaxis"], [52, 0, 1, "", "pad"], [52, 0, 1, "", "partial_fold"], [52, 0, 1, "", "partial_tensor_to_vec"], [52, 0, 1, "", "partial_unfold"], [52, 0, 1, "", "partial_vec_to_tensor"], [52, 0, 1, "", "put_along_axis"], [52, 0, 1, "", "rot90"], [52, 0, 1, "", "soft_thresholding"], [52, 0, 1, "", "take"], [52, 0, 1, "", "take_along_axis"], [52, 0, 1, "", "top_k"], [52, 0, 1, "", "trim_zeros"], [52, 0, 1, "", "unfold"], [52, 0, 1, "", "unique_consecutive"], [52, 0, 1, "", "vsplit"], [52, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[52, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "batch_norm"], [52, 0, 1, "", "group_norm"], [52, 0, 1, "", "instance_norm"], [52, 0, 1, "", "l1_normalize"], [52, 0, 1, "", "l2_normalize"], [52, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[52, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "bernoulli"], [52, 0, 1, "", "beta"], [52, 0, 1, "", "dirichlet"], [52, 0, 1, "", "gamma"], [52, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[52, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[52, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[52, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[52, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[52, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "bincount"], [52, 0, 1, "", "corrcoef"], [52, 0, 1, "", "cov"], [52, 0, 1, "", "cummax"], [52, 0, 1, "", "cummin"], [52, 0, 1, "", "histogram"], [52, 0, 1, "", "igamma"], [52, 0, 1, "", "median"], [52, 0, 1, "", "nanmean"], [52, 0, 1, "", "nanmedian"], [52, 0, 1, "", "nanmin"], [52, 0, 1, "", "nanprod"], [52, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[52, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[53, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "all_equal"], [53, 0, 1, "", "array_equal"], [53, 0, 1, "", "assert_supports_inplace"], [53, 0, 1, "", "clip_matrix_norm"], [53, 0, 1, "", "clip_vector_norm"], [53, 0, 1, "", "default"], [53, 0, 1, "", "einops_rearrange"], [53, 0, 1, "", "einops_reduce"], [53, 0, 1, "", "einops_repeat"], [53, 0, 1, "", "exists"], [53, 0, 1, "", "fourier_encode"], [53, 0, 1, "", "gather"], [53, 0, 1, "", "gather_nd"], [53, 0, 1, "", "get_num_dims"], [53, 0, 1, "", "has_nans"], [53, 0, 1, "", "inplace_decrement"], [53, 0, 1, "", "inplace_increment"], [53, 0, 1, "", "inplace_update"], [53, 0, 1, "", "is_array"], [53, 0, 1, "", "is_ivy_array"], [53, 0, 1, "", "is_ivy_container"], [53, 0, 1, "", "is_native_array"], [53, 0, 1, "", "isin"], [53, 0, 1, "", "scatter_flat"], [53, 0, 1, "", "scatter_nd"], [53, 0, 1, "", "stable_divide"], [53, 0, 1, "", "stable_pow"], [53, 0, 1, "", "supports_inplace_updates"], [53, 0, 1, "", "to_file"], [53, 0, 1, "", "to_list"], [53, 0, 1, "", "to_numpy"], [53, 0, 1, "", "to_scalar"], [53, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[54, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adam_step"], [54, 0, 1, "", "adam_update"], [54, 0, 1, "", "gradient_descent_update"], [54, 0, 1, "", "lamb_update"], [54, 0, 1, "", "lars_update"], [54, 0, 1, "", "optimizer_update"], [54, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[55, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[55, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[56, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "conv1d"], [56, 0, 1, "", "conv1d_transpose"], [56, 0, 1, "", "conv2d"], [56, 0, 1, "", "conv2d_transpose"], [56, 0, 1, "", "conv3d"], [56, 0, 1, "", "conv3d_transpose"], [56, 0, 1, "", "depthwise_conv2d"], [56, 0, 1, "", "dropout"], [56, 0, 1, "", "dropout1d"], [56, 0, 1, "", "dropout2d"], [56, 0, 1, "", "dropout3d"], [56, 0, 1, "", "linear"], [56, 0, 1, "", "lstm_update"], [56, 0, 1, "", "multi_head_attention"], [56, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[57, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "cholesky"], [57, 0, 1, "", "cross"], [57, 0, 1, "", "det"], [57, 0, 1, "", "diag"], [57, 0, 1, "", "diagonal"], [57, 0, 1, "", "eig"], [57, 0, 1, "", "eigh"], [57, 0, 1, "", "eigvalsh"], [57, 0, 1, "", "inner"], [57, 0, 1, "", "inv"], [57, 0, 1, "", "matmul"], [57, 0, 1, "", "matrix_norm"], [57, 0, 1, "", "matrix_power"], [57, 0, 1, "", "matrix_rank"], [57, 0, 1, "", "matrix_transpose"], [57, 0, 1, "", "outer"], [57, 0, 1, "", "pinv"], [57, 0, 1, "", "qr"], [57, 0, 1, "", "slogdet"], [57, 0, 1, "", "solve"], [57, 0, 1, "", "svd"], [57, 0, 1, "", "svdvals"], [57, 0, 1, "", "tensordot"], [57, 0, 1, "", "tensorsolve"], [57, 0, 1, "", "trace"], [57, 0, 1, "", "vander"], [57, 0, 1, "", "vecdot"], [57, 0, 1, "", "vector_norm"], [57, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[58, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "binary_cross_entropy"], [58, 0, 1, "", "cross_entropy"], [58, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[59, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "clip"], [59, 0, 1, "", "concat"], [59, 0, 1, "", "constant_pad"], [59, 0, 1, "", "expand_dims"], [59, 0, 1, "", "flip"], [59, 0, 1, "", "permute_dims"], [59, 0, 1, "", "repeat"], [59, 0, 1, "", "reshape"], [59, 0, 1, "", "roll"], [59, 0, 1, "", "split"], [59, 0, 1, "", "squeeze"], [59, 0, 1, "", "stack"], [59, 0, 1, "", "swapaxes"], [59, 0, 1, "", "tile"], [59, 0, 1, "", "unstack"], [59, 0, 1, "", "view"], [59, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[60, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[61, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "multinomial"], [61, 0, 1, "", "randint"], [61, 0, 1, "", "random_normal"], [61, 0, 1, "", "random_uniform"], [61, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[62, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "argmax"], [62, 0, 1, "", "argmin"], [62, 0, 1, "", "argwhere"], [62, 0, 1, "", "nonzero"], [62, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[63, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "unique_all"], [63, 0, 1, "", "unique_counts"], [63, 0, 1, "", "unique_inverse"], [63, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[64, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "argsort"], [64, 0, 1, "", "msort"], [64, 0, 1, "", "searchsorted"], [64, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[65, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "cumprod"], [65, 0, 1, "", "cumsum"], [65, 0, 1, "", "einsum"], [65, 0, 1, "", "max"], [65, 0, 1, "", "mean"], [65, 0, 1, "", "min"], [65, 0, 1, "", "prod"], [65, 0, 1, "", "std"], [65, 0, 1, "", "sum"], [65, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[66, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "all"], [66, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[67, 2, 1, "", "_wrap_function"], [67, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[68, 3, 0, "-", "activations"], [69, 3, 0, "-", "base"], [98, 3, 0, "-", "container"], [70, 3, 0, "-", "conversions"], [71, 3, 0, "-", "creation"], [72, 3, 0, "-", "data_type"], [73, 3, 0, "-", "device"], [74, 3, 0, "-", "elementwise"], [75, 3, 0, "-", "experimental"], [76, 3, 0, "-", "general"], [77, 3, 0, "-", "gradients"], [78, 3, 0, "-", "image"], [79, 3, 0, "-", "layers"], [80, 3, 0, "-", "linear_algebra"], [81, 3, 0, "-", "losses"], [82, 3, 0, "-", "manipulation"], [83, 3, 0, "-", "norms"], [84, 3, 0, "-", "random"], [85, 3, 0, "-", "searching"], [86, 3, 0, "-", "set"], [87, 3, 0, "-", "sorting"], [88, 3, 0, "-", "statistical"], [89, 3, 0, "-", "utility"], [90, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[68, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "_static_gelu"], [68, 0, 1, "", "_static_hardswish"], [68, 0, 1, "", "_static_leaky_relu"], [68, 0, 1, "", "_static_log_softmax"], [68, 0, 1, "", "_static_mish"], [68, 0, 1, "", "_static_relu"], [68, 0, 1, "", "_static_sigmoid"], [68, 0, 1, "", "_static_softmax"], [68, 0, 1, "", "_static_softplus"], [68, 0, 1, "", "gelu"], [68, 0, 1, "", "hardswish"], [68, 0, 1, "", "leaky_relu"], [68, 0, 1, "", "log_softmax"], [68, 0, 1, "", "mish"], [68, 0, 1, "", "relu"], [68, 0, 1, "", "sigmoid"], [68, 0, 1, "", "softmax"], [68, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[69, 1, 1, "", "ContainerBase"], [69, 2, 1, "", "_is_jsonable"], [69, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[69, 0, 1, "", "__getitem__"], [69, 0, 1, "", "__init__"], [69, 0, 1, "", "__setitem__"], [69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [69, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [69, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [69, 0, 1, "", "_cont_concat_unify"], [69, 0, 1, "", "_cont_get_dev"], [69, 0, 1, "", "_cont_get_dtype"], [69, 0, 1, "", "_cont_get_shape"], [69, 0, 1, "", "_cont_get_shapes"], [69, 5, 1, "", "_cont_ivy"], [69, 0, 1, "", "_cont_mean_unify"], [69, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [69, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [69, 0, 1, "", "_cont_slice_keys"], [69, 0, 1, "", "_cont_sum_unify"], [69, 0, 1, "", "_get_queue_item"], [69, 0, 1, "", "cont_all_false"], [69, 0, 1, "", "cont_all_key_chains"], [69, 0, 1, "", "cont_all_true"], [69, 0, 1, "", "cont_as_bools"], [69, 0, 1, "", "cont_assert_contains_sub_container"], [69, 0, 1, "", "cont_assert_contains_sub_structure"], [69, 0, 1, "", "cont_assert_identical"], [69, 0, 1, "", "cont_assert_identical_structure"], [69, 0, 1, "", "cont_at_key_chain"], [69, 0, 1, "", "cont_at_key_chains"], [69, 0, 1, "", "cont_at_keys"], [69, 0, 1, "", "cont_combine"], [69, 0, 1, "", "cont_common_key_chains"], [69, 5, 1, "", "cont_config"], [69, 0, 1, "", "cont_contains_sub_container"], [69, 0, 1, "", "cont_contains_sub_structure"], [69, 0, 1, "", "cont_copy"], [69, 0, 1, "", "cont_create_if_absent"], [69, 0, 1, "", "cont_cutoff_at_depth"], [69, 0, 1, "", "cont_cutoff_at_height"], [69, 0, 1, "", "cont_deep_copy"], [69, 5, 1, "", "cont_dev"], [69, 5, 1, "", "cont_dev_str"], [69, 0, 1, "", "cont_diff"], [69, 5, 1, "", "cont_dtype"], [69, 0, 1, "", "cont_duplicate_array_keychains"], [69, 0, 1, "", "cont_find_sub_container"], [69, 0, 1, "", "cont_find_sub_structure"], [69, 0, 1, "", "cont_flatten_key_chain"], [69, 0, 1, "", "cont_flatten_key_chains"], [69, 0, 1, "", "cont_format_key_chains"], [69, 0, 1, "", "cont_from_disk_as_hdf5"], [69, 0, 1, "", "cont_from_disk_as_json"], [69, 0, 1, "", "cont_from_disk_as_pickled"], [69, 0, 1, "", "cont_from_flat_list"], [69, 0, 1, "", "cont_handle_inplace"], [69, 0, 1, "", "cont_has_key"], [69, 0, 1, "", "cont_has_key_chain"], [69, 0, 1, "", "cont_identical"], [69, 0, 1, "", "cont_identical_array_shapes"], [69, 0, 1, "", "cont_identical_configs"], [69, 0, 1, "", "cont_identical_structure"], [69, 0, 1, "", "cont_if_exists"], [69, 0, 1, "", "cont_inplace_update"], [69, 5, 1, "", "cont_ivy"], [69, 0, 1, "", "cont_key_chains_containing"], [69, 0, 1, "", "cont_list_join"], [69, 0, 1, "", "cont_list_stack"], [69, 0, 1, "", "cont_load"], [69, 0, 1, "", "cont_map"], [69, 0, 1, "", "cont_map_sub_conts"], [69, 5, 1, "", "cont_max_depth"], [69, 0, 1, "", "cont_multi_map"], [69, 0, 1, "", "cont_multi_map_in_function"], [69, 0, 1, "", "cont_num_arrays"], [69, 0, 1, "", "cont_overwrite_at_key_chain"], [69, 0, 1, "", "cont_overwrite_at_key_chains"], [69, 0, 1, "", "cont_prune_empty"], [69, 0, 1, "", "cont_prune_key_chain"], [69, 0, 1, "", "cont_prune_key_chains"], [69, 0, 1, "", "cont_prune_key_from_key_chains"], [69, 0, 1, "", "cont_prune_keys"], [69, 0, 1, "", "cont_prune_keys_from_key_chains"], [69, 0, 1, "", "cont_reduce"], [69, 0, 1, "", "cont_remove_key_length_limit"], [69, 0, 1, "", "cont_remove_print_limit"], [69, 0, 1, "", "cont_reshape_like"], [69, 0, 1, "", "cont_restructure"], [69, 0, 1, "", "cont_restructure_key_chains"], [69, 0, 1, "", "cont_save"], [69, 0, 1, "", "cont_set_at_key_chain"], [69, 0, 1, "", "cont_set_at_key_chains"], [69, 0, 1, "", "cont_set_at_keys"], [69, 5, 1, "", "cont_shape"], [69, 5, 1, "", "cont_shapes"], [69, 0, 1, "", "cont_show"], [69, 0, 1, "", "cont_show_sub_container"], [69, 0, 1, "", "cont_size_ordered_arrays"], [69, 0, 1, "", "cont_slice_keys"], [69, 0, 1, "", "cont_slice_via_key"], [69, 0, 1, "", "cont_sort_by_key"], [69, 0, 1, "", "cont_structural_diff"], [69, 0, 1, "", "cont_to_dict"], [69, 0, 1, "", "cont_to_disk_as_hdf5"], [69, 0, 1, "", "cont_to_disk_as_json"], [69, 0, 1, "", "cont_to_disk_as_pickled"], [69, 0, 1, "", "cont_to_flat_list"], [69, 0, 1, "", "cont_to_iterator"], [69, 0, 1, "", "cont_to_iterator_keys"], [69, 0, 1, "", "cont_to_iterator_values"], [69, 0, 1, "", "cont_to_jsonable"], [69, 0, 1, "", "cont_to_nested_list"], [69, 0, 1, "", "cont_to_raw"], [69, 0, 1, "", "cont_trim_key"], [69, 0, 1, "", "cont_try_kc"], [69, 0, 1, "", "cont_unify"], [69, 0, 1, "", "cont_unstack_conts"], [69, 0, 1, "", "cont_update_config"], [69, 0, 1, "", "cont_with_default_key_color"], [69, 0, 1, "", "cont_with_entries_as_lists"], [69, 0, 1, "", "cont_with_ivy_backend"], [69, 0, 1, "", "cont_with_key_length_limit"], [69, 0, 1, "", "cont_with_print_indent"], [69, 0, 1, "", "cont_with_print_limit"], [69, 0, 1, "", "cont_with_print_line_spacing"], [69, 5, 1, "", "dynamic_backend"], [69, 0, 1, "", "h5_file_size"], [69, 0, 1, "", "shuffle_h5_file"], [69, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[98, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[98, 0, 1, "", "__abs__"], [98, 0, 1, "", "__add__"], [98, 0, 1, "", "__eq__"], [98, 0, 1, "", "__ge__"], [98, 0, 1, "", "__gt__"], [98, 0, 1, "", "__init__"], [98, 0, 1, "", "__le__"], [98, 0, 1, "", "__lt__"], [98, 0, 1, "", "__ne__"], [98, 0, 1, "", "__pow__"], [98, 0, 1, "", "__radd__"], [98, 0, 1, "", "__rrshift__"], [98, 0, 1, "", "__rshift__"], [98, 0, 1, "", "__rsub__"], [98, 0, 1, "", "__sub__"], [98, 0, 1, "", "__truediv__"], [98, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[70, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_to_ivy"], [70, 0, 1, "", "_static_to_native"], [70, 0, 1, "", "to_ivy"], [70, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[71, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_arange"], [71, 0, 1, "", "_static_asarray"], [71, 0, 1, "", "_static_copy_array"], [71, 0, 1, "", "_static_empty"], [71, 0, 1, "", "_static_empty_like"], [71, 0, 1, "", "_static_eye"], [71, 0, 1, "", "_static_from_dlpack"], [71, 0, 1, "", "_static_full"], [71, 0, 1, "", "_static_full_like"], [71, 0, 1, "", "_static_linspace"], [71, 0, 1, "", "_static_logspace"], [71, 0, 1, "", "_static_meshgrid"], [71, 0, 1, "", "_static_native_array"], [71, 0, 1, "", "_static_one_hot"], [71, 0, 1, "", "_static_ones"], [71, 0, 1, "", "_static_ones_like"], [71, 0, 1, "", "_static_tril"], [71, 0, 1, "", "_static_triu"], [71, 0, 1, "", "_static_zeros"], [71, 0, 1, "", "_static_zeros_like"], [71, 0, 1, "", "asarray"], [71, 0, 1, "", "copy_array"], [71, 0, 1, "", "empty_like"], [71, 0, 1, "", "from_dlpack"], [71, 0, 1, "", "frombuffer"], [71, 0, 1, "", "full_like"], [71, 0, 1, "", "linspace"], [71, 0, 1, "", "logspace"], [71, 0, 1, "", "meshgrid"], [71, 0, 1, "", "native_array"], [71, 0, 1, "", "one_hot"], [71, 0, 1, "", "ones_like"], [71, 0, 1, "", "static_frombuffer"], [71, 0, 1, "", "static_triu_indices"], [71, 0, 1, "", "tril"], [71, 0, 1, "", "triu"], [71, 0, 1, "", "triu_indices"], [71, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[72, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_astype"], [72, 0, 1, "", "_static_broadcast_arrays"], [72, 0, 1, "", "_static_broadcast_to"], [72, 0, 1, "", "_static_can_cast"], [72, 0, 1, "", "_static_default_complex_dtype"], [72, 0, 1, "", "_static_default_float_dtype"], [72, 0, 1, "", "_static_dtype"], [72, 0, 1, "", "_static_finfo"], [72, 0, 1, "", "_static_function_supported_dtypes"], [72, 0, 1, "", "_static_function_unsupported_dtypes"], [72, 0, 1, "", "_static_iinfo"], [72, 0, 1, "", "_static_is_bool_dtype"], [72, 0, 1, "", "_static_is_complex_dtype"], [72, 0, 1, "", "_static_is_float_dtype"], [72, 0, 1, "", "_static_is_int_dtype"], [72, 0, 1, "", "_static_is_uint_dtype"], [72, 0, 1, "", "_static_result_type"], [72, 0, 1, "", "astype"], [72, 0, 1, "", "broadcast_arrays"], [72, 0, 1, "", "broadcast_to"], [72, 0, 1, "", "can_cast"], [72, 0, 1, "", "dtype"], [72, 0, 1, "", "finfo"], [72, 0, 1, "", "iinfo"], [72, 0, 1, "", "is_bool_dtype"], [72, 0, 1, "", "is_complex_dtype"], [72, 0, 1, "", "is_float_dtype"], [72, 0, 1, "", "is_int_dtype"], [72, 0, 1, "", "is_uint_dtype"], [72, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[73, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_dev"], [73, 0, 1, "", "_static_to_device"], [73, 0, 1, "", "dev"], [73, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[74, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_abs"], [74, 0, 1, "", "_static_acos"], [74, 0, 1, "", "_static_acosh"], [74, 0, 1, "", "_static_add"], [74, 0, 1, "", "_static_asin"], [74, 0, 1, "", "_static_asinh"], [74, 0, 1, "", "_static_atan"], [74, 0, 1, "", "_static_atan2"], [74, 0, 1, "", "_static_atanh"], [74, 0, 1, "", "_static_bitwise_and"], [74, 0, 1, "", "_static_bitwise_invert"], [74, 0, 1, "", "_static_bitwise_left_shift"], [74, 0, 1, "", "_static_bitwise_or"], [74, 0, 1, "", "_static_bitwise_right_shift"], [74, 0, 1, "", "_static_bitwise_xor"], [74, 0, 1, "", "_static_ceil"], [74, 0, 1, "", "_static_cos"], [74, 0, 1, "", "_static_cosh"], [74, 0, 1, "", "_static_deg2rad"], [74, 0, 1, "", "_static_divide"], [74, 0, 1, "", "_static_equal"], [74, 0, 1, "", "_static_erf"], [74, 0, 1, "", "_static_exp"], [74, 0, 1, "", "_static_expm1"], [74, 0, 1, "", "_static_floor"], [74, 0, 1, "", "_static_floor_divide"], [74, 0, 1, "", "_static_greater"], [74, 0, 1, "", "_static_greater_equal"], [74, 0, 1, "", "_static_isfinite"], [74, 0, 1, "", "_static_isinf"], [74, 0, 1, "", "_static_isnan"], [74, 0, 1, "", "_static_isreal"], [74, 0, 1, "", "_static_lcm"], [74, 0, 1, "", "_static_less"], [74, 0, 1, "", "_static_less_equal"], [74, 0, 1, "", "_static_log"], [74, 0, 1, "", "_static_log10"], [74, 0, 1, "", "_static_log1p"], [74, 0, 1, "", "_static_log2"], [74, 0, 1, "", "_static_logaddexp"], [74, 0, 1, "", "_static_logical_and"], [74, 0, 1, "", "_static_logical_not"], [74, 0, 1, "", "_static_logical_or"], [74, 0, 1, "", "_static_logical_xor"], [74, 0, 1, "", "_static_maximum"], [74, 0, 1, "", "_static_minimum"], [74, 0, 1, "", "_static_multiply"], [74, 0, 1, "", "_static_negative"], [74, 0, 1, "", "_static_not_equal"], [74, 0, 1, "", "_static_positive"], [74, 0, 1, "", "_static_pow"], [74, 0, 1, "", "_static_rad2deg"], [74, 0, 1, "", "_static_reciprocal"], [74, 0, 1, "", "_static_remainder"], [74, 0, 1, "", "_static_round"], [74, 0, 1, "", "_static_sign"], [74, 0, 1, "", "_static_sin"], [74, 0, 1, "", "_static_sinh"], [74, 0, 1, "", "_static_sqrt"], [74, 0, 1, "", "_static_square"], [74, 0, 1, "", "_static_subtract"], [74, 0, 1, "", "_static_tan"], [74, 0, 1, "", "_static_tanh"], [74, 0, 1, "", "_static_trapz"], [74, 0, 1, "", "_static_trunc"], [74, 0, 1, "", "_static_trunc_divide"], [74, 0, 1, "", "abs"], [74, 0, 1, "", "acos"], [74, 0, 1, "", "acosh"], [74, 0, 1, "", "add"], [74, 0, 1, "", "angle"], [74, 0, 1, "", "asin"], [74, 0, 1, "", "asinh"], [74, 0, 1, "", "atan"], [74, 0, 1, "", "atan2"], [74, 0, 1, "", "atanh"], [74, 0, 1, "", "bitwise_and"], [74, 0, 1, "", "bitwise_invert"], [74, 0, 1, "", "bitwise_left_shift"], [74, 0, 1, "", "bitwise_or"], [74, 0, 1, "", "bitwise_right_shift"], [74, 0, 1, "", "bitwise_xor"], [74, 0, 1, "", "ceil"], [74, 0, 1, "", "cos"], [74, 0, 1, "", "cosh"], [74, 0, 1, "", "deg2rad"], [74, 0, 1, "", "divide"], [74, 0, 1, "", "equal"], [74, 0, 1, "", "erf"], [74, 0, 1, "", "exp"], [74, 0, 1, "", "exp2"], [74, 0, 1, "", "expm1"], [74, 0, 1, "", "floor"], [74, 0, 1, "", "floor_divide"], [74, 0, 1, "", "fmin"], [74, 0, 1, "", "gcd"], [74, 0, 1, "", "greater"], [74, 0, 1, "", "greater_equal"], [74, 0, 1, "", "imag"], [74, 0, 1, "", "isfinite"], [74, 0, 1, "", "isinf"], [74, 0, 1, "", "isnan"], [74, 0, 1, "", "isreal"], [74, 0, 1, "", "lcm"], [74, 0, 1, "", "less"], [74, 0, 1, "", "less_equal"], [74, 0, 1, "", "log"], [74, 0, 1, "", "log10"], [74, 0, 1, "", "log1p"], [74, 0, 1, "", "log2"], [74, 0, 1, "", "logaddexp"], [74, 0, 1, "", "logaddexp2"], [74, 0, 1, "", "logical_and"], [74, 0, 1, "", "logical_not"], [74, 0, 1, "", "logical_or"], [74, 0, 1, "", "logical_xor"], [74, 0, 1, "", "maximum"], [74, 0, 1, "", "minimum"], [74, 0, 1, "", "multiply"], [74, 0, 1, "", "nan_to_num"], [74, 0, 1, "", "negative"], [74, 0, 1, "", "not_equal"], [74, 0, 1, "", "positive"], [74, 0, 1, "", "pow"], [74, 0, 1, "", "rad2deg"], [74, 0, 1, "", "real"], [74, 0, 1, "", "reciprocal"], [74, 0, 1, "", "remainder"], [74, 0, 1, "", "round"], [74, 0, 1, "", "sign"], [74, 0, 1, "", "sin"], [74, 0, 1, "", "sinh"], [74, 0, 1, "", "sqrt"], [74, 0, 1, "", "square"], [74, 0, 1, "", "static_angle"], [74, 0, 1, "", "static_exp2"], [74, 0, 1, "", "static_fmin"], [74, 0, 1, "", "static_gcd"], [74, 0, 1, "", "static_imag"], [74, 0, 1, "", "static_logaddexp2"], [74, 0, 1, "", "static_nan_to_num"], [74, 0, 1, "", "static_real"], [74, 0, 1, "", "subtract"], [74, 0, 1, "", "tan"], [74, 0, 1, "", "tanh"], [74, 0, 1, "", "trapz"], [74, 0, 1, "", "trunc"], [74, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[75, 3, 0, "-", "activations"], [75, 3, 0, "-", "conversions"], [75, 3, 0, "-", "creation"], [75, 3, 0, "-", "data_type"], [75, 3, 0, "-", "device"], [75, 3, 0, "-", "elementwise"], [75, 3, 0, "-", "general"], [75, 3, 0, "-", "gradients"], [75, 3, 0, "-", "image"], [75, 3, 0, "-", "layers"], [75, 3, 0, "-", "linear_algebra"], [75, 3, 0, "-", "losses"], [75, 3, 0, "-", "manipulation"], [75, 3, 0, "-", "norms"], [75, 3, 0, "-", "random"], [75, 3, 0, "-", "searching"], [75, 3, 0, "-", "set"], [75, 3, 0, "-", "sorting"], [75, 3, 0, "-", "statistical"], [75, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[75, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_celu"], [75, 0, 1, "", "_static_elu"], [75, 0, 1, "", "_static_hardshrink"], [75, 0, 1, "", "_static_hardtanh"], [75, 0, 1, "", "_static_scaled_tanh"], [75, 0, 1, "", "_static_silu"], [75, 0, 1, "", "_static_softshrink"], [75, 0, 1, "", "_static_tanhshrink"], [75, 0, 1, "", "_static_threshold"], [75, 0, 1, "", "celu"], [75, 0, 1, "", "elu"], [75, 0, 1, "", "hardshrink"], [75, 0, 1, "", "hardtanh"], [75, 0, 1, "", "logit"], [75, 0, 1, "", "logsigmoid"], [75, 0, 1, "", "prelu"], [75, 0, 1, "", "relu6"], [75, 0, 1, "", "scaled_tanh"], [75, 0, 1, "", "selu"], [75, 0, 1, "", "silu"], [75, 0, 1, "", "softshrink"], [75, 0, 1, "", "static_logit"], [75, 0, 1, "", "static_logsigmoid"], [75, 0, 1, "", "static_prelu"], [75, 0, 1, "", "static_relu6"], [75, 0, 1, "", "static_selu"], [75, 0, 1, "", "static_thresholded_relu"], [75, 0, 1, "", "tanhshrink"], [75, 0, 1, "", "threshold"], [75, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[75, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[75, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_trilu"], [75, 0, 1, "", "blackman_window"], [75, 0, 1, "", "eye_like"], [75, 0, 1, "", "hamming_window"], [75, 0, 1, "", "hann_window"], [75, 0, 1, "", "kaiser_bessel_derived_window"], [75, 0, 1, "", "kaiser_window"], [75, 0, 1, "", "mel_weight_matrix"], [75, 0, 1, "", "polyval"], [75, 0, 1, "", "static_blackman_window"], [75, 0, 1, "", "static_eye_like"], [75, 0, 1, "", "static_hamming_window"], [75, 0, 1, "", "static_hann_window"], [75, 0, 1, "", "static_kaiser_bessel_derived_window"], [75, 0, 1, "", "static_kaiser_window"], [75, 0, 1, "", "static_mel_weight_matrix"], [75, 0, 1, "", "static_polyval"], [75, 0, 1, "", "static_tril_indices"], [75, 0, 1, "", "static_unsorted_segment_mean"], [75, 0, 1, "", "static_unsorted_segment_min"], [75, 0, 1, "", "static_unsorted_segment_sum"], [75, 0, 1, "", "static_vorbis_window"], [75, 0, 1, "", "tril_indices"], [75, 0, 1, "", "trilu"], [75, 0, 1, "", "unsorted_segment_mean"], [75, 0, 1, "", "unsorted_segment_min"], [75, 0, 1, "", "unsorted_segment_sum"], [75, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[75, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[75, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[75, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "allclose"], [75, 0, 1, "", "amax"], [75, 0, 1, "", "amin"], [75, 0, 1, "", "binarizer"], [75, 0, 1, "", "conj"], [75, 0, 1, "", "copysign"], [75, 0, 1, "", "count_nonzero"], [75, 0, 1, "", "diff"], [75, 0, 1, "", "digamma"], [75, 0, 1, "", "erfc"], [75, 0, 1, "", "fix"], [75, 0, 1, "", "float_power"], [75, 0, 1, "", "fmax"], [75, 0, 1, "", "fmod"], [75, 0, 1, "", "frexp"], [75, 0, 1, "", "gradient"], [75, 0, 1, "", "hypot"], [75, 0, 1, "", "isclose"], [75, 0, 1, "", "ldexp"], [75, 0, 1, "", "lerp"], [75, 0, 1, "", "modf"], [75, 0, 1, "", "nansum"], [75, 0, 1, "", "nextafter"], [75, 0, 1, "", "signbit"], [75, 0, 1, "", "sinc"], [75, 0, 1, "", "sparsify_tensor"], [75, 0, 1, "", "static_allclose"], [75, 0, 1, "", "static_amax"], [75, 0, 1, "", "static_amin"], [75, 0, 1, "", "static_binarizer"], [75, 0, 1, "", "static_conj"], [75, 0, 1, "", "static_copysign"], [75, 0, 1, "", "static_count_nonzero"], [75, 0, 1, "", "static_diff"], [75, 0, 1, "", "static_digamma"], [75, 0, 1, "", "static_erfc"], [75, 0, 1, "", "static_fix"], [75, 0, 1, "", "static_float_power"], [75, 0, 1, "", "static_fmax"], [75, 0, 1, "", "static_fmod"], [75, 0, 1, "", "static_frexp"], [75, 0, 1, "", "static_gradient"], [75, 0, 1, "", "static_hypot"], [75, 0, 1, "", "static_isclose"], [75, 0, 1, "", "static_ldexp"], [75, 0, 1, "", "static_lerp"], [75, 0, 1, "", "static_modf"], [75, 0, 1, "", "static_nansum"], [75, 0, 1, "", "static_nextafter"], [75, 0, 1, "", "static_signbit"], [75, 0, 1, "", "static_sinc"], [75, 0, 1, "", "static_sparsify_tensor"], [75, 0, 1, "", "static_xlogy"], [75, 0, 1, "", "static_zeta"], [75, 0, 1, "", "xlogy"], [75, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[75, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_reduce"], [75, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[75, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[75, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[75, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_fft"], [75, 0, 1, "", "_static_sliding_window"], [75, 0, 1, "", "adaptive_avg_pool1d"], [75, 0, 1, "", "adaptive_avg_pool2d"], [75, 0, 1, "", "adaptive_max_pool2d"], [75, 0, 1, "", "avg_pool1d"], [75, 0, 1, "", "avg_pool2d"], [75, 0, 1, "", "avg_pool3d"], [75, 0, 1, "", "dct"], [75, 0, 1, "", "dft"], [75, 0, 1, "", "embedding"], [75, 0, 1, "", "fft"], [75, 0, 1, "", "idct"], [75, 0, 1, "", "ifft"], [75, 0, 1, "", "ifftn"], [75, 0, 1, "", "interpolate"], [75, 0, 1, "", "max_pool1d"], [75, 0, 1, "", "max_pool2d"], [75, 0, 1, "", "max_pool3d"], [75, 0, 1, "", "max_unpool1d"], [75, 0, 1, "", "rfft"], [75, 0, 1, "", "rfftn"], [75, 0, 1, "", "sliding_window"], [75, 0, 1, "", "static_adaptive_avg_pool1d"], [75, 0, 1, "", "static_adaptive_avg_pool2d"], [75, 0, 1, "", "static_adaptive_max_pool2d"], [75, 0, 1, "", "static_avg_pool1d"], [75, 0, 1, "", "static_avg_pool2d"], [75, 0, 1, "", "static_avg_pool3d"], [75, 0, 1, "", "static_dct"], [75, 0, 1, "", "static_dft"], [75, 0, 1, "", "static_embedding"], [75, 0, 1, "", "static_idct"], [75, 0, 1, "", "static_ifft"], [75, 0, 1, "", "static_ifftn"], [75, 0, 1, "", "static_interpolate"], [75, 0, 1, "", "static_max_pool1d"], [75, 0, 1, "", "static_max_pool2d"], [75, 0, 1, "", "static_max_pool3d"], [75, 0, 1, "", "static_max_unpool1d"], [75, 0, 1, "", "static_rfft"], [75, 0, 1, "", "static_rfftn"], [75, 0, 1, "", "static_rnn"], [75, 0, 1, "", "static_stft"], [75, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[75, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "adjoint"], [75, 0, 1, "", "batched_outer"], [75, 0, 1, "", "cond"], [75, 0, 1, "", "diagflat"], [75, 0, 1, "", "dot"], [75, 0, 1, "", "eig"], [75, 0, 1, "", "eigh_tridiagonal"], [75, 0, 1, "", "eigvals"], [75, 0, 1, "", "higher_order_moment"], [75, 0, 1, "", "initialize_tucker"], [75, 0, 1, "", "kron"], [75, 0, 1, "", "make_svd_non_negative"], [75, 0, 1, "", "matrix_exp"], [75, 0, 1, "", "mode_dot"], [75, 0, 1, "", "multi_dot"], [75, 0, 1, "", "multi_mode_dot"], [75, 0, 1, "", "partial_tucker"], [75, 0, 1, "", "static_adjoint"], [75, 0, 1, "", "static_batched_outer"], [75, 0, 1, "", "static_cond"], [75, 0, 1, "", "static_diagflat"], [75, 0, 1, "", "static_dot"], [75, 0, 1, "", "static_eig"], [75, 0, 1, "", "static_eigh_tridiagonal"], [75, 0, 1, "", "static_eigvals"], [75, 0, 1, "", "static_higher_order_moment"], [75, 0, 1, "", "static_initialize_tucker"], [75, 0, 1, "", "static_kron"], [75, 0, 1, "", "static_make_svd_non_negative"], [75, 0, 1, "", "static_matrix_exp"], [75, 0, 1, "", "static_mode_dot"], [75, 0, 1, "", "static_multi_dot"], [75, 0, 1, "", "static_multi_mode_dot"], [75, 0, 1, "", "static_partial_tucker"], [75, 0, 1, "", "static_svd_flip"], [75, 0, 1, "", "static_tensor_train"], [75, 0, 1, "", "static_truncated_svd"], [75, 0, 1, "", "static_tt_matrix_to_tensor"], [75, 0, 1, "", "static_tucker"], [75, 0, 1, "", "svd_flip"], [75, 0, 1, "", "tensor_train"], [75, 0, 1, "", "truncated_svd"], [75, 0, 1, "", "tt_matrix_to_tensor"], [75, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[75, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_hinge_embedding_loss"], [75, 0, 1, "", "_static_huber_loss"], [75, 0, 1, "", "_static_kl_div"], [75, 0, 1, "", "_static_l1_loss"], [75, 0, 1, "", "_static_log_poisson_loss"], [75, 0, 1, "", "_static_poisson_nll_loss"], [75, 0, 1, "", "_static_smooth_l1_loss"], [75, 0, 1, "", "_static_soft_margin_loss"], [75, 0, 1, "", "hinge_embedding_loss"], [75, 0, 1, "", "huber_loss"], [75, 0, 1, "", "kl_div"], [75, 0, 1, "", "l1_loss"], [75, 0, 1, "", "log_poisson_loss"], [75, 0, 1, "", "poisson_nll_loss"], [75, 0, 1, "", "smooth_l1_loss"], [75, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[75, 1, 1, "", "_ContainerWithManipulationExperimental"], [75, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_fill_diagonal"], [75, 0, 1, "", "_static_put_along_axis"], [75, 0, 1, "", "_static_take"], [75, 0, 1, "", "_static_trim_zeros"], [75, 0, 1, "", "_static_unique_consecutive"], [75, 0, 1, "", "as_strided"], [75, 0, 1, "", "associative_scan"], [75, 0, 1, "", "atleast_1d"], [75, 0, 1, "", "atleast_2d"], [75, 0, 1, "", "atleast_3d"], [75, 0, 1, "", "broadcast_shapes"], [75, 0, 1, "", "column_stack"], [75, 0, 1, "", "concat_from_sequence"], [75, 0, 1, "", "dsplit"], [75, 0, 1, "", "dstack"], [75, 0, 1, "", "expand"], [75, 0, 1, "", "fill_diagonal"], [75, 0, 1, "", "flatten"], [75, 0, 1, "", "fliplr"], [75, 0, 1, "", "flipud"], [75, 0, 1, "", "fold"], [75, 0, 1, "", "heaviside"], [75, 0, 1, "", "hsplit"], [75, 0, 1, "", "hstack"], [75, 0, 1, "", "i0"], [75, 0, 1, "", "matricize"], [75, 0, 1, "", "moveaxis"], [75, 0, 1, "", "pad"], [75, 0, 1, "", "partial_fold"], [75, 0, 1, "", "partial_tensor_to_vec"], [75, 0, 1, "", "partial_unfold"], [75, 0, 1, "", "partial_vec_to_tensor"], [75, 0, 1, "", "put_along_axis"], [75, 0, 1, "", "rot90"], [75, 0, 1, "", "soft_thresholding"], [75, 0, 1, "", "static_as_strided"], [75, 0, 1, "", "static_atleast_1d"], [75, 0, 1, "", "static_atleast_2d"], [75, 0, 1, "", "static_atleast_3d"], [75, 0, 1, "", "static_broadcast_shapes"], [75, 0, 1, "", "static_column_stack"], [75, 0, 1, "", "static_concat_from_sequence"], [75, 0, 1, "", "static_dsplit"], [75, 0, 1, "", "static_dstack"], [75, 0, 1, "", "static_expand"], [75, 0, 1, "", "static_flatten"], [75, 0, 1, "", "static_fliplr"], [75, 0, 1, "", "static_flipud"], [75, 0, 1, "", "static_fold"], [75, 0, 1, "", "static_heaviside"], [75, 0, 1, "", "static_hsplit"], [75, 0, 1, "", "static_hstack"], [75, 0, 1, "", "static_i0"], [75, 0, 1, "", "static_matricize"], [75, 0, 1, "", "static_moveaxis"], [75, 0, 1, "", "static_pad"], [75, 0, 1, "", "static_partial_fold"], [75, 0, 1, "", "static_partial_tensor_to_vec"], [75, 0, 1, "", "static_partial_unfold"], [75, 0, 1, "", "static_partial_vec_to_tensor"], [75, 0, 1, "", "static_rot90"], [75, 0, 1, "", "static_soft_thresholding"], [75, 0, 1, "", "static_take_along_axis"], [75, 0, 1, "", "static_top_k"], [75, 0, 1, "", "static_unfold"], [75, 0, 1, "", "static_vsplit"], [75, 0, 1, "", "static_vstack"], [75, 0, 1, "", "take"], [75, 0, 1, "", "take_along_axis"], [75, 0, 1, "", "top_k"], [75, 0, 1, "", "trim_zeros"], [75, 0, 1, "", "unfold"], [75, 0, 1, "", "unique_consecutive"], [75, 0, 1, "", "vsplit"], [75, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[75, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "batch_norm"], [75, 0, 1, "", "group_norm"], [75, 0, 1, "", "instance_norm"], [75, 0, 1, "", "l1_normalize"], [75, 0, 1, "", "l2_normalize"], [75, 0, 1, "", "lp_normalize"], [75, 0, 1, "", "static_batch_norm"], [75, 0, 1, "", "static_group_norm"], [75, 0, 1, "", "static_instance_norm"], [75, 0, 1, "", "static_l1_normalize"], [75, 0, 1, "", "static_l2_normalize"], [75, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[75, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "bernoulli"], [75, 0, 1, "", "beta"], [75, 0, 1, "", "dirichlet"], [75, 0, 1, "", "gamma"], [75, 0, 1, "", "poisson"], [75, 0, 1, "", "static_bernoulli"], [75, 0, 1, "", "static_beta"], [75, 0, 1, "", "static_dirichlet"], [75, 0, 1, "", "static_gamma"], [75, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[75, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "static_unravel_index"], [75, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[75, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[75, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[75, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "invert_permutation"], [75, 0, 1, "", "lexsort"], [75, 0, 1, "", "static_invert_permutation"], [75, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[75, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_cummax"], [75, 0, 1, "", "_static_cummin"], [75, 0, 1, "", "_static_nanmin"], [75, 0, 1, "", "bincount"], [75, 0, 1, "", "corrcoef"], [75, 0, 1, "", "cov"], [75, 0, 1, "", "cummax"], [75, 0, 1, "", "cummin"], [75, 0, 1, "", "histogram"], [75, 0, 1, "", "igamma"], [75, 0, 1, "", "median"], [75, 0, 1, "", "nanmean"], [75, 0, 1, "", "nanmedian"], [75, 0, 1, "", "nanmin"], [75, 0, 1, "", "nanprod"], [75, 0, 1, "", "quantile"], [75, 0, 1, "", "static_bincount"], [75, 0, 1, "", "static_corrcoef"], [75, 0, 1, "", "static_cov"], [75, 0, 1, "", "static_histogram"], [75, 0, 1, "", "static_igamma"], [75, 0, 1, "", "static_median"], [75, 0, 1, "", "static_nanmean"], [75, 0, 1, "", "static_nanmedian"], [75, 0, 1, "", "static_nanprod"], [75, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[75, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "optional_get_element"], [75, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[76, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_all_equal"], [76, 0, 1, "", "_static_array_equal"], [76, 0, 1, "", "_static_assert_supports_inplace"], [76, 0, 1, "", "_static_clip_matrix_norm"], [76, 0, 1, "", "_static_clip_vector_norm"], [76, 0, 1, "", "_static_einops_rearrange"], [76, 0, 1, "", "_static_einops_reduce"], [76, 0, 1, "", "_static_einops_repeat"], [76, 0, 1, "", "_static_exists"], [76, 0, 1, "", "_static_fourier_encode"], [76, 0, 1, "", "_static_gather"], [76, 0, 1, "", "_static_gather_nd"], [76, 0, 1, "", "_static_get_num_dims"], [76, 0, 1, "", "_static_has_nans"], [76, 0, 1, "", "_static_inplace_decrement"], [76, 0, 1, "", "_static_inplace_increment"], [76, 0, 1, "", "_static_inplace_update"], [76, 0, 1, "", "_static_is_array"], [76, 0, 1, "", "_static_is_ivy_array"], [76, 0, 1, "", "_static_is_native_array"], [76, 0, 1, "", "_static_scatter_flat"], [76, 0, 1, "", "_static_scatter_nd"], [76, 0, 1, "", "_static_stable_divide"], [76, 0, 1, "", "_static_stable_pow"], [76, 0, 1, "", "_static_supports_inplace_updates"], [76, 0, 1, "", "_static_to_list"], [76, 0, 1, "", "_static_to_numpy"], [76, 0, 1, "", "_static_to_scalar"], [76, 0, 1, "", "_static_value_is_nan"], [76, 0, 1, "", "all_equal"], [76, 0, 1, "", "array_equal"], [76, 0, 1, "", "assert_supports_inplace"], [76, 0, 1, "", "clip_matrix_norm"], [76, 0, 1, "", "clip_vector_norm"], [76, 0, 1, "", "einops_rearrange"], [76, 0, 1, "", "einops_reduce"], [76, 0, 1, "", "einops_repeat"], [76, 0, 1, "", "exists"], [76, 0, 1, "", "fourier_encode"], [76, 0, 1, "", "gather"], [76, 0, 1, "", "gather_nd"], [76, 0, 1, "", "get_num_dims"], [76, 0, 1, "", "has_nans"], [76, 0, 1, "", "inplace_decrement"], [76, 0, 1, "", "inplace_increment"], [76, 0, 1, "", "inplace_update"], [76, 0, 1, "", "is_array"], [76, 0, 1, "", "is_ivy_array"], [76, 0, 1, "", "is_native_array"], [76, 0, 1, "", "isin"], [76, 0, 1, "", "itemsize"], [76, 0, 1, "", "scatter_flat"], [76, 0, 1, "", "scatter_nd"], [76, 0, 1, "", "stable_divide"], [76, 0, 1, "", "stable_pow"], [76, 0, 1, "", "static_isin"], [76, 0, 1, "", "static_itemsize"], [76, 0, 1, "", "static_strides"], [76, 0, 1, "", "strides"], [76, 0, 1, "", "supports_inplace_updates"], [76, 0, 1, "", "to_list"], [76, 0, 1, "", "to_numpy"], [76, 0, 1, "", "to_scalar"], [76, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[77, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_stop_gradient"], [77, 0, 1, "", "adam_step"], [77, 0, 1, "", "adam_update"], [77, 0, 1, "", "gradient_descent_update"], [77, 0, 1, "", "lamb_update"], [77, 0, 1, "", "lars_update"], [77, 0, 1, "", "optimizer_update"], [77, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[78, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[78, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[79, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_conv1d"], [79, 0, 1, "", "_static_conv1d_transpose"], [79, 0, 1, "", "_static_conv2d"], [79, 0, 1, "", "_static_conv2d_transpose"], [79, 0, 1, "", "_static_conv3d"], [79, 0, 1, "", "_static_conv3d_transpose"], [79, 0, 1, "", "_static_depthwise_conv2d"], [79, 0, 1, "", "_static_dropout"], [79, 0, 1, "", "_static_dropout1d"], [79, 0, 1, "", "_static_dropout2d"], [79, 0, 1, "", "_static_dropout3d"], [79, 0, 1, "", "_static_linear"], [79, 0, 1, "", "_static_lstm_update"], [79, 0, 1, "", "_static_multi_head_attention"], [79, 0, 1, "", "_static_reduce_window"], [79, 0, 1, "", "_static_scaled_dot_product_attention"], [79, 0, 1, "", "conv1d"], [79, 0, 1, "", "conv1d_transpose"], [79, 0, 1, "", "conv2d"], [79, 0, 1, "", "conv2d_transpose"], [79, 0, 1, "", "conv3d"], [79, 0, 1, "", "conv3d_transpose"], [79, 0, 1, "", "depthwise_conv2d"], [79, 0, 1, "", "dropout"], [79, 0, 1, "", "dropout1d"], [79, 0, 1, "", "dropout2d"], [79, 0, 1, "", "dropout3d"], [79, 0, 1, "", "linear"], [79, 0, 1, "", "lstm_update"], [79, 0, 1, "", "multi_head_attention"], [79, 0, 1, "", "reduce_window"], [79, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[80, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_cholesky"], [80, 0, 1, "", "_static_cross"], [80, 0, 1, "", "_static_det"], [80, 0, 1, "", "_static_diag"], [80, 0, 1, "", "_static_diagonal"], [80, 0, 1, "", "_static_eigh"], [80, 0, 1, "", "_static_eigvalsh"], [80, 0, 1, "", "_static_inner"], [80, 0, 1, "", "_static_inv"], [80, 0, 1, "", "_static_matmul"], [80, 0, 1, "", "_static_matrix_norm"], [80, 0, 1, "", "_static_matrix_power"], [80, 0, 1, "", "_static_matrix_rank"], [80, 0, 1, "", "_static_matrix_transpose"], [80, 0, 1, "", "_static_outer"], [80, 0, 1, "", "_static_pinv"], [80, 0, 1, "", "_static_qr"], [80, 0, 1, "", "_static_slogdet"], [80, 0, 1, "", "_static_solve"], [80, 0, 1, "", "_static_svd"], [80, 0, 1, "", "_static_svdvals"], [80, 0, 1, "", "_static_tensordot"], [80, 0, 1, "", "_static_tensorsolve"], [80, 0, 1, "", "_static_trace"], [80, 0, 1, "", "_static_vander"], [80, 0, 1, "", "_static_vecdot"], [80, 0, 1, "", "_static_vector_norm"], [80, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [80, 0, 1, "", "cholesky"], [80, 0, 1, "", "cross"], [80, 0, 1, "", "det"], [80, 0, 1, "", "diag"], [80, 0, 1, "", "diagonal"], [80, 0, 1, "", "eigh"], [80, 0, 1, "", "eigvalsh"], [80, 0, 1, "", "general_inner_product"], [80, 0, 1, "", "inner"], [80, 0, 1, "", "inv"], [80, 0, 1, "", "matmul"], [80, 0, 1, "", "matrix_norm"], [80, 0, 1, "", "matrix_power"], [80, 0, 1, "", "matrix_rank"], [80, 0, 1, "", "matrix_transpose"], [80, 0, 1, "", "outer"], [80, 0, 1, "", "pinv"], [80, 0, 1, "", "qr"], [80, 0, 1, "", "slogdet"], [80, 0, 1, "", "solve"], [80, 0, 1, "", "static_general_inner_product"], [80, 0, 1, "", "svd"], [80, 0, 1, "", "svdvals"], [80, 0, 1, "", "tensordot"], [80, 0, 1, "", "tensorsolve"], [80, 0, 1, "", "trace"], [80, 0, 1, "", "vander"], [80, 0, 1, "", "vecdot"], [80, 0, 1, "", "vector_norm"], [80, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[81, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_binary_cross_entropy"], [81, 0, 1, "", "_static_cross_entropy"], [81, 0, 1, "", "_static_sparse_cross_entropy"], [81, 0, 1, "", "binary_cross_entropy"], [81, 0, 1, "", "cross_entropy"], [81, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[82, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_clip"], [82, 0, 1, "", "_static_concat"], [82, 0, 1, "", "_static_constant_pad"], [82, 0, 1, "", "_static_expand_dims"], [82, 0, 1, "", "_static_flip"], [82, 0, 1, "", "_static_permute_dims"], [82, 0, 1, "", "_static_repeat"], [82, 0, 1, "", "_static_reshape"], [82, 0, 1, "", "_static_roll"], [82, 0, 1, "", "_static_split"], [82, 0, 1, "", "_static_squeeze"], [82, 0, 1, "", "_static_stack"], [82, 0, 1, "", "_static_swapaxes"], [82, 0, 1, "", "_static_tile"], [82, 0, 1, "", "_static_unstack"], [82, 0, 1, "", "_static_zero_pad"], [82, 0, 1, "", "clip"], [82, 0, 1, "", "concat"], [82, 0, 1, "", "constant_pad"], [82, 0, 1, "", "expand_dims"], [82, 0, 1, "", "flip"], [82, 0, 1, "", "permute_dims"], [82, 0, 1, "", "repeat"], [82, 0, 1, "", "reshape"], [82, 0, 1, "", "roll"], [82, 0, 1, "", "split"], [82, 0, 1, "", "squeeze"], [82, 0, 1, "", "stack"], [82, 0, 1, "", "swapaxes"], [82, 0, 1, "", "tile"], [82, 0, 1, "", "unstack"], [82, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[83, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[84, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_multinomial"], [84, 0, 1, "", "_static_randint"], [84, 0, 1, "", "_static_random_normal"], [84, 0, 1, "", "_static_random_uniform"], [84, 0, 1, "", "_static_shuffle"], [84, 0, 1, "", "multinomial"], [84, 0, 1, "", "randint"], [84, 0, 1, "", "random_normal"], [84, 0, 1, "", "random_uniform"], [84, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[85, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_argmax"], [85, 0, 1, "", "_static_argmin"], [85, 0, 1, "", "_static_argwhere"], [85, 0, 1, "", "_static_nonzero"], [85, 0, 1, "", "_static_where"], [85, 0, 1, "", "argmax"], [85, 0, 1, "", "argmin"], [85, 0, 1, "", "argwhere"], [85, 0, 1, "", "nonzero"], [85, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[86, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_unique_all"], [86, 0, 1, "", "_static_unique_counts"], [86, 0, 1, "", "_static_unique_inverse"], [86, 0, 1, "", "_static_unique_values"], [86, 0, 1, "", "unique_all"], [86, 0, 1, "", "unique_counts"], [86, 0, 1, "", "unique_inverse"], [86, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[87, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_argsort"], [87, 0, 1, "", "_static_searchsorted"], [87, 0, 1, "", "_static_sort"], [87, 0, 1, "", "argsort"], [87, 0, 1, "", "msort"], [87, 0, 1, "", "searchsorted"], [87, 0, 1, "", "sort"], [87, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[88, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_cumprod"], [88, 0, 1, "", "_static_cumsum"], [88, 0, 1, "", "_static_min"], [88, 0, 1, "", "_static_prod"], [88, 0, 1, "", "_static_sum"], [88, 0, 1, "", "_static_var"], [88, 0, 1, "", "cumprod"], [88, 0, 1, "", "cumsum"], [88, 0, 1, "", "einsum"], [88, 0, 1, "", "max"], [88, 0, 1, "", "mean"], [88, 0, 1, "", "min"], [88, 0, 1, "", "prod"], [88, 0, 1, "", "std"], [88, 0, 1, "", "sum"], [88, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[89, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_all"], [89, 0, 1, "", "_static_any"], [89, 0, 1, "", "all"], [89, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[90, 2, 1, "", "_wrap_function"], [90, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[91, 3, 0, "-", "base"], [92, 3, 0, "-", "cp_tensor"], [93, 3, 0, "-", "parafac2_tensor"], [94, 3, 0, "-", "tr_tensor"], [95, 3, 0, "-", "tt_tensor"], [96, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[91, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[91, 0, 1, "", "__init__"], [91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "mode_dot"], [91, 0, 1, "", "norm"], [91, 0, 1, "", "to_tensor"], [91, 0, 1, "", "to_unfolded"], [91, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[92, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "cp_copy"], [92, 0, 1, "", "cp_flip_sign"], [92, 0, 1, "", "cp_lstsq_grad"], [92, 0, 1, "", "cp_mode_dot"], [92, 0, 1, "", "cp_n_param"], [92, 0, 1, "", "cp_norm"], [92, 0, 1, "", "cp_normalize"], [92, 0, 1, "", "cp_to_tensor"], [92, 0, 1, "", "cp_to_unfolded"], [92, 0, 1, "", "cp_to_vec"], [92, 0, 1, "", "mode_dot"], [92, 5, 1, "", "n_param"], [92, 0, 1, "", "norm"], [92, 0, 1, "", "normalize"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"], [92, 0, 1, "", "unfolding_dot_khatri_rao"], [92, 0, 1, "", "validate_cp_rank"], [92, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[93, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "apply_parafac2_projections"], [93, 0, 1, "", "from_CPTensor"], [93, 5, 1, "", "n_param"], [93, 0, 1, "", "parafac2_normalise"], [93, 0, 1, "", "parafac2_to_slice"], [93, 0, 1, "", "parafac2_to_slices"], [93, 0, 1, "", "parafac2_to_tensor"], [93, 0, 1, "", "parafac2_to_unfolded"], [93, 0, 1, "", "parafac2_to_vec"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"], [93, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[94, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "tr_n_param"], [94, 0, 1, "", "tr_to_tensor"], [94, 0, 1, "", "tr_to_unfolded"], [94, 0, 1, "", "tr_to_vec"], [94, 0, 1, "", "validate_tr_rank"], [94, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[95, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_tt_n_param"], [95, 0, 1, "", "index_update"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "pad_tt_rank"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolding"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tt_to_tensor"], [95, 0, 1, "", "tt_to_unfolded"], [95, 0, 1, "", "tt_to_vec"], [95, 0, 1, "", "validate_tt_rank"], [95, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[96, 1, 1, "", "TuckerTensor"], [96, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "mode_dot"], [96, 5, 1, "", "n_param"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolded"], [96, 0, 1, "", "to_vec"], [96, 0, 1, "", "tucker_copy"], [96, 0, 1, "", "tucker_mode_dot"], [96, 0, 1, "", "tucker_n_param"], [96, 0, 1, "", "tucker_normalize"], [96, 0, 1, "", "tucker_to_tensor"], [96, 0, 1, "", "tucker_to_unfolded"], [96, 0, 1, "", "tucker_to_vec"], [96, 0, 1, "", "validate_tucker_rank"], [96, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[101, 3, 0, "-", "base"], [102, 3, 0, "-", "elementwise"], [100, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[101, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[101, 0, 1, "", "__init__"], [101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "broadcast_shapes"], [101, 5, 1, "", "data"], [101, 5, 1, "", "device"], [101, 5, 1, "", "dtype"], [101, 5, 1, "", "inner_shape"], [101, 5, 1, "", "ndim"], [101, 0, 1, "", "nested_array"], [101, 5, 1, "", "nested_rank"], [101, 0, 1, "", "ragged_map"], [101, 0, 1, "", "ragged_multi_map"], [101, 0, 1, "", "ragged_multi_map_in_function"], [101, 0, 1, "", "replace_ivy_arrays"], [101, 5, 1, "", "shape"], [101, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[102, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[100, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[100, 0, 1, "", "__init__"], [100, 0, 1, "", "from_row_lengths"], [100, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[614, 3, 0, "-", "activations"], [615, 3, 0, "-", "constants"], [616, 3, 0, "-", "control_flow_ops"], [617, 3, 0, "-", "creation"], [618, 3, 0, "-", "data_type"], [619, 3, 0, "-", "device"], [620, 3, 0, "-", "elementwise"], [621, 3, 0, "-", "experimental"], [622, 3, 0, "-", "general"], [623, 3, 0, "-", "gradients"], [624, 3, 0, "-", "layers"], [625, 3, 0, "-", "linear_algebra"], [626, 3, 0, "-", "losses"], [627, 3, 0, "-", "manipulation"], [628, 3, 0, "-", "meta"], [629, 3, 0, "-", "nest"], [630, 3, 0, "-", "norms"], [631, 3, 0, "-", "random"], [632, 3, 0, "-", "searching"], [633, 3, 0, "-", "set"], [634, 3, 0, "-", "sorting"], [635, 3, 0, "-", "statistical"], [636, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[360, 3, 0, "-", "activations"], [361, 3, 0, "-", "constants"], [362, 3, 0, "-", "creation"], [363, 3, 0, "-", "data_type"], [364, 3, 0, "-", "device"], [365, 3, 0, "-", "elementwise"], [366, 3, 0, "-", "general"], [367, 3, 0, "-", "gradients"], [368, 3, 0, "-", "layers"], [369, 3, 0, "-", "linear_algebra"], [370, 3, 0, "-", "losses"], [371, 3, 0, "-", "manipulation"], [372, 3, 0, "-", "meta"], [373, 3, 0, "-", "nest"], [374, 3, 0, "-", "norms"], [375, 3, 0, "-", "random"], [376, 3, 0, "-", "searching"], [377, 3, 0, "-", "set"], [378, 3, 0, "-", "sorting"], [379, 3, 0, "-", "sparse_array"], [380, 3, 0, "-", "statistical"], [381, 3, 0, "-", "utility"]], "ivy.stateful": [[776, 3, 0, "-", "activations"], [777, 3, 0, "-", "converters"], [778, 3, 0, "-", "helpers"], [779, 3, 0, "-", "initializers"], [780, 3, 0, "-", "layers"], [781, 3, 0, "-", "losses"], [782, 3, 0, "-", "module"], [783, 3, 0, "-", "norms"], [784, 3, 0, "-", "optimizers"], [785, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[776, 1, 1, "", "ELU"], [776, 1, 1, "", "GEGLU"], [776, 1, 1, "", "GELU"], [776, 1, 1, "", "Hardswish"], [776, 1, 1, "", "LeakyReLU"], [776, 1, 1, "", "LogSigmoid"], [776, 1, 1, "", "LogSoftmax"], [776, 1, 1, "", "Logit"], [776, 1, 1, "", "Mish"], [776, 1, 1, "", "PReLU"], [776, 1, 1, "", "ReLU"], [776, 1, 1, "", "ReLU6"], [776, 1, 1, "", "SeLU"], [776, 1, 1, "", "SiLU"], [776, 1, 1, "", "Sigmoid"], [776, 1, 1, "", "Softmax"], [776, 1, 1, "", "Softplus"], [776, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[776, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[776, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[777, 1, 1, "", "ModuleConverters"], [777, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[777, 0, 1, "", "from_flax_module"], [777, 0, 1, "", "from_haiku_module"], [777, 0, 1, "", "from_keras_module"], [777, 0, 1, "", "from_paddle_module"], [777, 0, 1, "", "from_torch_module"], [777, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[778, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[779, 1, 1, "", "Constant"], [779, 1, 1, "", "FirstLayerSiren"], [779, 1, 1, "", "GlorotUniform"], [779, 1, 1, "", "Initializer"], [779, 1, 1, "", "KaimingNormal"], [779, 1, 1, "", "Ones"], [779, 1, 1, "", "RandomNormal"], [779, 1, 1, "", "Siren"], [779, 1, 1, "", "Uniform"], [779, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[779, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[779, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[779, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[779, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[779, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[779, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[780, 1, 1, "", "AdaptiveAvgPool1d"], [780, 1, 1, "", "AdaptiveAvgPool2d"], [780, 1, 1, "", "AvgPool1D"], [780, 1, 1, "", "AvgPool2D"], [780, 1, 1, "", "AvgPool3D"], [780, 1, 1, "", "Conv1D"], [780, 1, 1, "", "Conv1DTranspose"], [780, 1, 1, "", "Conv2D"], [780, 1, 1, "", "Conv2DTranspose"], [780, 1, 1, "", "Conv3D"], [780, 1, 1, "", "Conv3DTranspose"], [780, 1, 1, "", "Dct"], [780, 1, 1, "", "DepthwiseConv2D"], [780, 1, 1, "", "Dropout"], [780, 1, 1, "", "Embedding"], [780, 1, 1, "", "FFT"], [780, 1, 1, "", "IFFT"], [780, 1, 1, "", "Identity"], [780, 1, 1, "", "LSTM"], [780, 1, 1, "", "Linear"], [780, 1, 1, "", "MaxPool1D"], [780, 1, 1, "", "MaxPool2D"], [780, 1, 1, "", "MaxPool3D"], [780, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[780, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[780, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[781, 1, 1, "", "BinaryCrossEntropyLoss"], [781, 1, 1, "", "CrossEntropyLoss"], [781, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[781, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[781, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[781, 0, 1, "", "__init__"]], "ivy.stateful.module": [[782, 1, 1, "", "Module"], [782, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[782, 0, 1, "", "__call__"], [782, 0, 1, "", "__init__"], [782, 5, 1, "", "buffers"], [782, 0, 1, "", "build"], [782, 5, 1, "", "build_mode"], [782, 5, 1, "", "built"], [782, 5, 1, "", "device"], [782, 5, 1, "", "dtype"], [782, 0, 1, "", "eval"], [782, 0, 1, "", "load"], [782, 5, 1, "", "module_dict"], [782, 0, 1, "", "register_buffer"], [782, 0, 1, "", "register_parameter"], [782, 0, 1, "", "save"], [782, 0, 1, "", "save_weights"], [782, 0, 1, "", "show_graph"], [782, 5, 1, "", "state_dict"], [782, 0, 1, "", "to_device"], [782, 0, 1, "", "trace_graph"], [782, 0, 1, "", "train"], [782, 5, 1, "", "training"], [782, 5, 1, "", "v"]], "ivy.stateful.norms": [[783, 1, 1, "", "BatchNorm2D"], [783, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[783, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[783, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[784, 1, 1, "", "Adam"], [784, 1, 1, "", "AdamW"], [784, 1, 1, "", "LAMB"], [784, 1, 1, "", "LARS"], [784, 1, 1, "", "Optimizer"], [784, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "set_state"], [784, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[784, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "set_state"], [784, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "set_state"], [784, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "set_state"], [784, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "set_state"], [784, 5, 1, "", "state"]], "ivy.stateful.sequential": [[785, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[785, 0, 1, "", "__init__"]], "ivy.utils": [[786, 3, 0, "-", "assertions"], [787, 3, 0, "-", "backend"], [791, 3, 0, "-", "binaries"], [792, 3, 0, "-", "dynamic_import"], [793, 3, 0, "-", "einsum_parser"], [794, 3, 0, "-", "einsum_path_helpers"], [795, 3, 0, "-", "exceptions"], [796, 3, 0, "-", "inspection"], [797, 3, 0, "-", "logging"], [798, 3, 0, "-", "profiler"], [799, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[786, 2, 1, "", "check_all"], [786, 2, 1, "", "check_all_or_any_fn"], [786, 2, 1, "", "check_any"], [786, 2, 1, "", "check_dev_correct_formatting"], [786, 2, 1, "", "check_dimensions"], [786, 2, 1, "", "check_elem_in_list"], [786, 2, 1, "", "check_equal"], [786, 2, 1, "", "check_exists"], [786, 2, 1, "", "check_false"], [786, 2, 1, "", "check_gather_input_valid"], [786, 2, 1, "", "check_gather_nd_input_valid"], [786, 2, 1, "", "check_greater"], [786, 2, 1, "", "check_inplace_sizes_valid"], [786, 2, 1, "", "check_isinstance"], [786, 2, 1, "", "check_kernel_padding_size"], [786, 2, 1, "", "check_less"], [786, 2, 1, "", "check_one_way_broadcastable"], [786, 2, 1, "", "check_same_dtype"], [786, 2, 1, "", "check_shape"], [786, 2, 1, "", "check_shapes_broadcastable"], [786, 2, 1, "", "check_true"], [786, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[788, 3, 0, "-", "ast_helpers"], [789, 3, 0, "-", "handler"], [790, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[788, 1, 1, "", "ImportTransformer"], [788, 1, 1, "", "IvyLoader"], [788, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "impersonate_import"], [788, 0, 1, "", "visit_Import"], [788, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[788, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[789, 1, 1, "", "ContextManager"], [789, 2, 1, "", "choose_random_backend"], [789, 2, 1, "", "current_backend"], [789, 2, 1, "", "dynamic_backend_converter"], [789, 2, 1, "", "prevent_access_locally"], [789, 2, 1, "", "previous_backend"], [789, 2, 1, "", "set_backend"], [789, 2, 1, "", "set_backend_to_specific_version"], [789, 2, 1, "", "set_jax_backend"], [789, 2, 1, "", "set_mxnet_backend"], [789, 2, 1, "", "set_numpy_backend"], [789, 2, 1, "", "set_paddle_backend"], [789, 2, 1, "", "set_tensorflow_backend"], [789, 2, 1, "", "set_torch_backend"], [789, 2, 1, "", "unset_backend"], [789, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[789, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[790, 2, 1, "", "clear_sub_backends"], [790, 2, 1, "", "find_available_sub_backends"], [790, 2, 1, "", "fn_name_from_version_specific_fn_name"], [790, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [790, 2, 1, "", "set_sub_backend"], [790, 2, 1, "", "set_sub_backend_to_specific_version"], [790, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[791, 2, 1, "", "check_for_binaries"], [791, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[792, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[793, 2, 1, "", "convert_interleaved_input"], [793, 2, 1, "", "convert_subscripts"], [793, 2, 1, "", "find_output_shape"], [793, 2, 1, "", "find_output_str"], [793, 2, 1, "", "gen_unused_symbols"], [793, 2, 1, "", "get_symbol"], [793, 2, 1, "", "has_valid_einsum_chars_only"], [793, 2, 1, "", "is_valid_einsum_char"], [793, 2, 1, "", "legalise_einsum_expr"], [793, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[794, 2, 1, "", "can_dot"], [794, 2, 1, "", "compute_size_by_dict"], [794, 2, 1, "", "find_contraction"], [794, 2, 1, "", "flop_count"], [794, 2, 1, "", "greedy_path"], [794, 2, 1, "", "optimal_path"], [794, 2, 1, "", "parse_einsum_input"], [794, 2, 1, "", "parse_possible_contraction"], [794, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[795, 7, 1, "", "InplaceUpdateException"], [795, 7, 1, "", "IvyAttributeError"], [795, 7, 1, "", "IvyBackendException"], [795, 7, 1, "", "IvyBroadcastShapeError"], [795, 7, 1, "", "IvyDeviceError"], [795, 7, 1, "", "IvyDtypePromotionError"], [795, 7, 1, "", "IvyError"], [795, 7, 1, "", "IvyException"], [795, 7, 1, "", "IvyIndexError"], [795, 7, 1, "", "IvyInvalidBackendException"], [795, 7, 1, "", "IvyNotImplementedException"], [795, 7, 1, "", "IvyValueError"], [795, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[795, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[795, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[796, 2, 1, "", "add_array_specs"], [796, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[797, 2, 1, "", "set_logging_mode"], [797, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[798, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[798, 0, 1, "", "__init__"], [798, 4, 1, "", "print_stats"], [798, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[799, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[759, 3, 0, "-", "assertions"], [760, 3, 0, "-", "available_frameworks"], [761, 3, 0, "-", "function_testing"], [762, 3, 0, "-", "globals"], [763, 3, 0, "-", "hypothesis_helpers"], [768, 3, 0, "-", "multiprocessing"], [769, 3, 0, "-", "pipeline_helper"], [770, 3, 0, "-", "structs"], [771, 3, 0, "-", "test_parameter_flags"], [772, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[759, 2, 1, "", "assert_all_close"], [759, 2, 1, "", "assert_same_type"], [759, 2, 1, "", "assert_same_type_and_shape"], [759, 2, 1, "", "check_unsupported_device"], [759, 2, 1, "", "check_unsupported_device_and_dtype"], [759, 2, 1, "", "check_unsupported_dtype"], [759, 2, 1, "", "test_unsupported_function"], [759, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[761, 2, 1, "", "args_to_container"], [761, 2, 1, "", "args_to_frontend"], [761, 2, 1, "", "arrays_to_frontend"], [761, 2, 1, "", "as_lists"], [761, 2, 1, "", "convtrue"], [761, 2, 1, "", "create_args_kwargs"], [761, 2, 1, "", "flatten"], [761, 2, 1, "", "flatten_and_to_np"], [761, 2, 1, "", "flatten_frontend"], [761, 2, 1, "", "flatten_frontend_fw_to_np"], [761, 2, 1, "", "flatten_frontend_to_np"], [761, 2, 1, "", "get_frontend_ret"], [761, 2, 1, "", "get_ret_and_flattened_np_array"], [761, 2, 1, "", "gradient_incompatible_function"], [761, 2, 1, "", "gradient_test"], [761, 2, 1, "", "gradient_unsupported_dtypes"], [761, 2, 1, "", "kwargs_to_args_n_kwargs"], [761, 2, 1, "", "test_frontend_function"], [761, 2, 1, "", "test_frontend_method"], [761, 2, 1, "", "test_function"], [761, 2, 1, "", "test_function_backend_computation"], [761, 2, 1, "", "test_function_ground_truth_computation"], [761, 2, 1, "", "test_gradient_backend_computation"], [761, 2, 1, "", "test_gradient_ground_truth_computation"], [761, 2, 1, "", "test_method"], [761, 2, 1, "", "test_method_backend_computation"], [761, 2, 1, "", "test_method_ground_truth_computation"], [761, 2, 1, "", "traced_if_required"], [761, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[762, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [762, 7, 1, "", "InterruptedTest"], [762, 1, 1, "", "TestData"], [762, 2, 1, "", "setup_api_test"], [762, 2, 1, "", "setup_frontend_test"], [762, 2, 1, "", "teardown_api_test"], [762, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[762, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[762, 0, 1, "", "__init__"], [762, 4, 1, "", "fn_name"], [762, 4, 1, "", "fn_tree"], [762, 4, 1, "", "is_method"], [762, 4, 1, "", "supported_device_dtypes"], [762, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[764, 3, 0, "-", "array_helpers"], [765, 3, 0, "-", "dtype_helpers"], [766, 3, 0, "-", "general_helpers"], [767, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[764, 2, 1, "", "array_and_broadcastable_shape"], [764, 2, 1, "", "array_bools"], [764, 2, 1, "", "array_helpers_dtype_info_helper"], [764, 2, 1, "", "array_indices_axis"], [764, 2, 1, "", "array_indices_put_along_axis"], [764, 2, 1, "", "array_values"], [764, 2, 1, "", "arrays_and_axes"], [764, 2, 1, "", "arrays_for_pooling"], [764, 2, 1, "", "broadcast_shapes"], [764, 2, 1, "", "cond_data_gen_helper"], [764, 2, 1, "", "create_concatenable_arrays_dtypes"], [764, 2, 1, "", "create_nested_input"], [764, 2, 1, "", "dtype_and_values"], [764, 2, 1, "", "dtype_array_query"], [764, 2, 1, "", "dtype_array_query_val"], [764, 2, 1, "", "dtype_values_axis"], [764, 2, 1, "", "einsum_helper"], [764, 2, 1, "", "get_first_solve_batch_matrix"], [764, 2, 1, "", "get_first_solve_matrix"], [764, 2, 1, "", "get_second_solve_batch_matrix"], [764, 2, 1, "", "get_second_solve_matrix"], [764, 2, 1, "", "list_of_size"], [764, 2, 1, "", "lists"], [764, 2, 1, "", "mutually_broadcastable_shapes"], [764, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[765, 2, 1, "", "array_dtypes"], [765, 2, 1, "", "cast_filter"], [765, 2, 1, "", "cast_filter_helper"], [765, 2, 1, "", "get_castable_dtype"], [765, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[766, 7, 1, "", "BroadcastError"], [766, 2, 1, "", "apply_safety_factor"], [766, 2, 1, "", "broadcast_shapes"], [766, 2, 1, "", "embedding_helper"], [766, 2, 1, "", "general_helpers_dtype_info_helper"], [766, 2, 1, "", "get_axis"], [766, 2, 1, "", "get_bounds"], [766, 2, 1, "", "get_mean_std"], [766, 2, 1, "", "get_shape"], [766, 2, 1, "", "matrix_is_stable"], [766, 2, 1, "", "reshape_shapes"], [766, 2, 1, "", "subsets"], [766, 2, 1, "", "two_broadcastable_shapes"], [766, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[767, 2, 1, "", "floats"], [767, 2, 1, "", "ints"], [767, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[768, 2, 1, "", "backend_proc"], [768, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[769, 1, 1, "", "BackendHandler"], [769, 1, 1, "", "BackendHandlerMode"], [769, 1, 1, "", "WithBackendContext"], [769, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[769, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[769, 4, 1, "", "SetBackend"], [769, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[769, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[770, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[770, 0, 1, "", "__init__"], [770, 4, 1, "", "framework_init_module"], [770, 4, 1, "", "init_name"], [770, 4, 1, "", "ivy_init_module"], [770, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[771, 1, 1, "", "DynamicFlag"], [771, 1, 1, "", "FrontendFunctionTestFlags"], [771, 1, 1, "", "FrontendInitTestFlags"], [771, 1, 1, "", "FrontendMethodTestFlags"], [771, 1, 1, "", "FunctionTestFlags"], [771, 1, 1, "", "InitMethodTestFlags"], [771, 1, 1, "", "MethodTestFlags"], [771, 1, 1, "", "TestFlags"], [771, 2, 1, "", "build_flag"], [771, 2, 1, "", "frontend_function_flags"], [771, 2, 1, "", "frontend_init_flags"], [771, 2, 1, "", "frontend_method_flags"], [771, 2, 1, "", "function_flags"], [771, 2, 1, "", "init_method_flags"], [771, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[771, 0, 1, "", "__init__"], [771, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[771, 0, 1, "", "__init__"], [771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[771, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[772, 2, 1, "", "handle_frontend_method"], [772, 2, 1, "", "handle_frontend_test"], [772, 2, 1, "", "handle_method"], [772, 2, 1, "", "handle_test"], [772, 2, 1, "", "num_positional_args"], [772, 2, 1, "", "num_positional_args_helper"], [772, 2, 1, "", "num_positional_args_method"], [772, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 15, 26, 40, 41], "creat": [0, 38, 39, 805], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 7, 9, 15, 34, 800, 817, 822, 825, 828, 833, 849, 850, 851], "ivi": [3, 4, 5, 7, 14, 17, 25, 26, 27, 38, 39, 41, 42, 44, 800, 805, 807, 810, 812, 814, 817, 819, 825, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 842, 849, 850, 851, 862], "alexnet": 3, "instal": [3, 4, 7, 17, 38, 39, 41, 800, 842], "data": [3, 4, 5, 7, 9, 17, 26, 38, 49, 72, 103, 363, 618, 633, 737, 738, 739, 740, 815, 827, 830, 838, 841], "prepar": [3, 4, 5, 7], "infer": [3, 4, 5, 7, 824], "torch": [3, 4, 5, 7, 34, 41, 856, 857], "tensorflow": [3, 4, 5, 9, 13, 34, 41, 42, 43, 856], "jax": [3, 4, 5, 6, 8, 9, 34, 41, 856], "appendix": [3, 5], "code": [3, 17, 18, 19, 20, 27, 38, 821, 829, 831], "implement": [3, 5, 814, 825, 827, 847], "bert": 4, "dependeci": 4, "import": [4, 5, 7, 9, 17, 38, 39, 42, 792], "modul": [4, 782, 815, 816, 839, 850], "sequenc": [4, 822], "classif": 4, "model": [4, 5, 6, 7, 8, 11, 12, 13, 24, 25, 26, 27, 38, 39, 40, 41, 42, 44, 840, 841], "imag": [5, 7, 55, 78, 248, 802, 812], "segment": 5, "unet": 5, "custom": [5, 810, 812, 825, 829, 838, 841], "preprocess": 5, "load": [5, 7, 9, 757, 838], "visualis": [5, 7], "initi": [5, 7, 779, 839], "nativ": [5, 7, 810, 833], "pretrain": [5, 7], "weight": [5, 7, 838], "mask": 5, "function": [5, 17, 26, 27, 38, 39, 40, 42, 44, 104, 761, 805, 813, 815, 816, 819, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 835, 840, 841, 850], "us": [5, 7, 14, 22, 25, 42, 44, 800, 802, 805, 806, 809, 825, 828, 838, 842, 849, 850], "your": [5, 7, 807, 830], "backend": [5, 9, 17, 26, 38, 39, 41, 42, 787, 790, 805, 811, 815, 825, 831, 835, 841], "acceler": [6, 8, 9], "mmpretrain": 6, "resnet": [7, 45], "set": [7, 34, 38, 39, 63, 86, 377, 633, 806, 811, 820, 832, 842], "label": 7, "resnet34": 7, "classifi": 7, "resnet50": 7, "pytorch": [8, 9, 11, 40, 856], "xgboost": 9, "test": [9, 40, 761, 771, 772, 775, 805, 806, 807, 809, 814, 820, 828, 830], "compar": 9, "xgb_frontend": 9, "xgbclassifi": 9, "xgb": 9, "more": [9, 806, 833, 847], "exhaust": 9, "evalu": 9, "train": [9, 38, 40, 42], "time": 9, "v": [9, 21, 31, 34, 821, 841, 846, 849], "number": [9, 767, 822], "boost": 9, "round": [9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 40, 278, 829], "fraction": 9, "comparison": [9, 838], "metric": [9, 42], "guid": [10, 15], "transpil": [11, 12, 13, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 40, 44, 800, 840, 842, 850], "build": [11, 12, 13, 42, 802, 812, 835], "top": [11, 12, 13, 814], "up": [11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 40, 806, 820, 829, 842], "haiku": 12, "develop": 14, "convolut": 14, "network": [14, 39, 42, 838, 840], "tutori": [15, 42], "And": 15, "learn": [15, 16, 856], "basic": [15, 16, 38, 39, 807, 827], "write": [17, 25, 827, 830], "content": [17, 40], "handler": [17, 26, 789, 790, 835], "structur": [17, 26, 812, 825, 841], "api": [17, 26, 27, 805, 809, 813, 814, 825, 831, 835, 837, 839, 840, 842, 846, 849, 850, 851, 853, 860, 862], "state": [17, 26, 27, 839, 841, 849], "unifi": [18, 21, 22, 28, 31, 32, 33, 38, 800, 837, 847, 851, 858, 862], "trace": [19, 21, 22, 27, 679, 819], "lazi": [21, 31, 849], "eager": [21, 31, 849], "how": [22, 805, 812, 820, 829, 830], "decor": [22, 33, 819, 824, 830], "ani": [23, 24, 26, 27, 756], "librari": [23, 26, 27, 42, 44, 850], "odsc": 26, "framework": [26, 32, 38, 760, 773, 825, 828, 836, 856, 859, 862, 863], "graph": [26, 43, 857, 862], "tracer": [26, 835, 840, 842, 849, 857, 862], "quickstart": 27, "get": [27, 800, 807, 842], "familiar": 27, "0": [28, 29, 30, 31, 35, 36], "1": [29, 31, 32, 33, 34, 37, 44, 856], "compil": [29, 31, 32, 33, 39, 849, 854, 859, 861, 862], "2": [30, 33, 35, 44, 856], "select": 32, "As": 33, "3": [34, 36, 37, 44], "dynam": [34, 42, 792, 811, 841], "static": 34, "todo": [34, 807], "explain": 34, "via": 34, "why": [34, 830, 847], "mode": [34, 815, 819, 832], "i": [34, 800, 812, 833], "true": 34, "default": [34, 533], "when": [34, 800], "from": [34, 41, 842], "numpi": [34, 41, 827, 856], "fals": 34, "kornia": 35, "perceiv": 36, "stabl": 37, "diffus": 37, "oper": [38, 822, 832, 837, 841], "ml": [38, 845, 858, 862], "chang": 38, "one": 38, "line": [38, 807], "No": [38, 806, 847], "need": [38, 830], "worri": 38, "about": 38, "type": [38, 49, 72, 363, 618, 815, 823, 827, 841], "differ": 38, "them": 38, "all": [38, 755], "standalon": [38, 823], "defin": [38, 39, 40, 42], "optim": [38, 784, 839], "input": [38, 39, 822], "target": 38, "loss": [38, 58, 81, 370, 626, 781], "loop": [38, 42], "sampl": 39, "check": [39, 821, 841], "result": 39, "simpl": 39, "neural": 39, "deepmind": [40, 41], "": [40, 42, 805, 812, 829, 842], "perceiverio": [40, 41], "tabl": [40, 812, 815], "construct": [40, 838], "some": 40, "helper": [40, 763, 764, 765, 766, 767, 769, 772, 778, 788, 794, 828, 830, 831], "pipelin": [40, 42, 769, 812, 814, 830, 841], "dataset": [40, 42], "download": 40, "dataload": 40, "gpu": [41, 841], "introduct": [41, 44, 827, 828], "python3": 41, "8": 41, "setup": [41, 821], "kernel": 41, "clone": [41, 806, 814], "repo": [41, 806], "ivy_model": 41, "run": [41, 807, 809, 812, 820, 830], "end": 42, "let": 42, "we": [42, 830], "ar": 42, "mnist": 42, "thi": 42, "temporari": 42, "loader": 42, "util": [42, 66, 89, 381, 636, 774], "plot": 42, "save": [42, 758, 838], "huggingfac": 43, "deit": 43, "can": 43, "visual": 43, "displai": 43, "html": 43, "file": 43, "browser": [43, 807], "To": [44, 807], "interfac": 44, "telemetri": 44, "18": 45, "activ": [46, 68, 360, 614, 776], "convers": [47, 70, 824], "creation": [48, 71, 362, 617], "devic": [50, 73, 364, 619, 816, 822, 827], "elementwis": [51, 74, 102, 365, 620], "experiment": [52, 75, 621, 805], "gener": [53, 76, 366, 622, 766, 825, 830, 833, 849], "gradient": [54, 77, 342, 367, 623, 825], "layer": [56, 79, 368, 624, 780], "linear": [57, 80, 369, 625, 648], "algebra": [57, 80, 369, 625], "manipul": [59, 82, 371, 627], "norm": [60, 83, 374, 630, 783], "random": [61, 84, 375, 631], "search": [62, 85, 376, 632], "sort": [64, 87, 378, 634, 744], "statist": [65, 88, 380, 635], "wrap": [67, 90, 824], "base": [69, 91, 101], "cp": 92, "tensor": [92, 93, 94, 95, 96, 99], "parafac2": 93, "tr": 94, "tt": 95, "tucker": [96, 441], "arrai": [97, 100, 122, 379, 764, 809, 810, 814, 822, 837, 846, 849, 853], "contain": [98, 807, 813, 838], "factor": 99, "nest": [100, 373, 629], "class": [103, 773, 810, 819, 827, 837], "gelu": 105, "hardswish": 106, "leaky_relu": 107, "log_softmax": 108, "mish": 109, "relu": 110, "sigmoid": 111, "softmax": 112, "softplu": 113, "softsign": 114, "cmp_i": 115, "cmp_isnot": 116, "for_loop": 117, "if_els": 118, "try_except": 119, "while_loop": 120, "arang": 121, "asarrai": 123, "copy_arrai": 124, "empti": 125, "empty_lik": 126, "ey": 127, "from_dlpack": 128, "note": [128, 139, 617], "frombuff": 129, "full": [130, 828], "full_lik": 131, "linspac": 132, "logspac": 133, "meshgrid": 134, "native_arrai": 135, "one_hot": 136, "ones": 137, "ones_lik": 138, "to_dlpack": 139, "tril": 140, "triu": 141, "triu_indic": 142, "zero": 143, "zeros_lik": 144, "as_ivy_dtyp": 145, "as_native_dtyp": 146, "astyp": 147, "broadcast_arrai": 148, "broadcast_to": 149, "can_cast": 150, "check_float": 151, "closest_valid_dtyp": 152, "default_complex_dtyp": 153, "default_dtyp": 154, "default_float_dtyp": 155, "default_int_dtyp": 156, "default_uint_dtyp": 157, "dtype": [158, 765, 822], "dtype_bit": 159, "finfo": 160, "function_supported_dtyp": 161, "function_unsupported_dtyp": 162, "iinfo": 163, "infer_default_dtyp": 164, "invalid_dtyp": 165, "is_bool_dtyp": 166, "is_complex_dtyp": 167, "is_float_dtyp": 168, "is_hashable_dtyp": 169, "is_int_dtyp": 170, "is_native_dtyp": 171, "is_uint_dtyp": 172, "promote_typ": 173, "promote_types_of_input": 174, "result_typ": 175, "set_default_complex_dtyp": 176, "set_default_dtyp": 177, "set_default_float_dtyp": 178, "set_default_int_dtyp": 179, "set_default_uint_dtyp": 180, "type_promote_arrai": 181, "unset_default_complex_dtyp": 182, "unset_default_dtyp": 183, "unset_default_float_dtyp": 184, "unset_default_int_dtyp": 185, "unset_default_uint_dtyp": 186, "valid_dtyp": 187, "as_ivy_dev": 188, "as_native_dev": 189, "clear_cached_mem_on_dev": 190, "default_devic": 191, "dev": 192, "dev_util": 193, "function_supported_devic": 194, "function_unsupported_devic": 195, "get_all_ivy_arrays_on_dev": 196, "gpu_is_avail": 197, "handle_soft_device_vari": 198, "num_cpu_cor": 199, "num_gpu": 200, "num_ivy_arrays_on_dev": 201, "percent_used_mem_on_dev": 202, "print_all_ivy_arrays_on_dev": 203, "set_default_devic": 204, "set_soft_device_mod": 205, "paramet": [205, 567, 568, 573, 574, 576, 577, 619, 622, 771, 776, 832], "set_split_factor": 206, "split_factor": 207, "split_func_cal": 208, "to_devic": 209, "total_mem_on_dev": 210, "tpu_is_avail": 211, "unset_default_devic": 212, "unset_soft_device_mod": 213, "used_mem_on_dev": 214, "ab": 215, "aco": 216, "acosh": 217, "add": [218, 817, 828, 862], "angl": 219, "asin": 220, "asinh": 221, "atan": 222, "atan2": 223, "atanh": 224, "bitwise_and": 225, "bitwise_invert": 226, "bitwise_left_shift": 227, "bitwise_or": 228, "bitwise_right_shift": 229, "bitwise_xor": 230, "ceil": 231, "co": 232, "cosh": 233, "deg2rad": 234, "divid": 235, "equal": 236, "erf": 237, "exp": 238, "exp2": 239, "expm1": 240, "floor": 241, "floor_divid": 242, "fmin": 243, "fmod": 244, "gcd": 245, "greater": 246, "greater_equ": 247, "isfinit": 249, "isinf": 250, "isnan": 251, "isreal": 252, "lcm": 253, "less": 254, "less_equ": 255, "log": [256, 797, 806], "log10": 257, "log1p": 258, "log2": 259, "logaddexp": 260, "logaddexp2": 261, "logical_and": 262, "logical_not": 263, "logical_or": 264, "logical_xor": 265, "maximum": 266, "minimum": 267, "multipli": 268, "nan_to_num": 269, "neg": 270, "not_equ": 271, "posit": [272, 822], "pow": 273, "rad2deg": 274, "real": 275, "reciproc": 276, "remaind": 277, "sign": 279, "sin": 280, "sinh": 281, "sqrt": 282, "squar": 283, "subtract": 284, "tan": [285, 817, 828], "tanh": 286, "trapz": 287, "trunc": 288, "trunc_divid": 289, "celu": 290, "elu": 291, "hardshrink": 292, "hardtanh": 293, "logit": 294, "logsigmoid": 295, "prelu": 296, "relu6": 297, "scaled_tanh": 298, "selu": 299, "silu": 300, "softshrink": 301, "stanh": 302, "tanhshrink": 303, "threshold": 304, "thresholded_relu": 305, "blackman_window": 306, "eye_lik": 307, "hamming_window": 308, "hann_window": 309, "indic": 310, "kaiser_bessel_derived_window": 311, "kaiser_window": 312, "mel_weight_matrix": 313, "ndenumer": 314, "ndindex": 315, "polyv": 316, "random_cp": 317, "random_parafac2": 318, "random_tr": 319, "random_tt": 320, "random_tuck": 321, "tril_indic": 322, "trilu": 323, "unsorted_segment_mean": 324, "unsorted_segment_min": 325, "unsorted_segment_sum": 326, "vorbis_window": 327, "allclos": 328, "amax": 329, "amin": 330, "binar": 331, "conj": 332, "copysign": 333, "count_nonzero": 334, "diff": 335, "digamma": 336, "erfc": 337, "fix": [338, 805, 820], "float_pow": 339, "fmax": 340, "frexp": 341, "hypot": 343, "isclos": 344, "ldexp": 345, "lerp": 346, "lgamma": 347, "modf": 348, "nansum": 349, "nextaft": 350, "signbit": 351, "sinc": 352, "sparsify_tensor": 353, "xlogi": 354, "zeta": 355, "reduc": 356, "bind_custom_gradient_funct": 357, "jvp": 358, "vjp": 359, "constant": [361, 615], "meta": [372, 628], "spars": 379, "adaptive_avg_pool1d": 382, "adaptive_avg_pool2d": 383, "adaptive_max_pool2d": 384, "area_interpol": 385, "avg_pool1d": 386, "avg_pool2d": 387, "avg_pool3d": 388, "dct": 389, "dft": 390, "dropout1d": 391, "dropout2d": 392, "dropout3d": 393, "embed": 394, "fft": 395, "fft2": 396, "generate_einsum_equ": 397, "get_interpolate_kernel": 398, "idct": 399, "ifft": 400, "ifftn": 401, "interp": 402, "interpol": 403, "max_pool1d": 404, "max_pool2d": 405, "max_pool3d": 406, "max_unpool1d": 407, "nearest_interpol": 408, "pool": 409, "reduce_window": 410, "rfft": 411, "rfftn": 412, "rnn": 413, "sliding_window": 414, "stft": 415, "adjoint": 416, "batched_out": 417, "cond": 418, "diagflat": 419, "dot": 420, "eig": [421, 659], "eigh_tridiagon": 422, "eigval": 423, "general_inner_product": 424, "higher_order_mo": 425, "initialize_tuck": 426, "khatri_rao": 427, "kron": 428, "kroneck": 429, "make_svd_non_neg": 430, "matrix_exp": 431, "mode_dot": 432, "multi_dot": 433, "multi_mode_dot": 434, "partial_tuck": 435, "solve_triangular": 436, "svd_flip": 437, "tensor_train": 438, "truncated_svd": 439, "tt_matrix_to_tensor": 440, "hinge_embedding_loss": 442, "huber_loss": 443, "kl_div": 444, "l1_loss": 445, "log_poisson_loss": 446, "poisson_nll_loss": 447, "smooth_l1_loss": 448, "soft_margin_loss": 449, "as_strid": 450, "associative_scan": 451, "atleast_1d": 452, "atleast_2d": 453, "atleast_3d": 454, "broadcast_shap": 455, "check_scalar": 456, "choos": 457, "column_stack": 458, "concat_from_sequ": 459, "dsplit": 460, "dstack": 461, "expand": 462, "fill_diagon": 463, "flatten": 464, "fliplr": 465, "flipud": 466, "fold": 467, "heavisid": 468, "hsplit": 469, "hstack": 470, "i0": 471, "matric": 472, "moveaxi": 473, "pad": 474, "partial_fold": 475, "partial_tensor_to_vec": 476, "partial_unfold": 477, "partial_vec_to_tensor": 478, "put_along_axi": 479, "rot90": 480, "soft_threshold": 481, "take": 482, "take_along_axi": 483, "top_k": 484, "trim_zero": 485, "unfold": 486, "unique_consecut": 487, "vsplit": 488, "vstack": 489, "batch_norm": 490, "group_norm": 491, "instance_norm": 492, "l1_normal": 493, "l2_normal": 494, "local_response_norm": 495, "lp_normal": 496, "bernoulli": 497, "beta": 498, "dirichlet": 499, "gamma": 500, "poisson": 501, "unravel_index": 502, "invert_permut": 503, "lexsort": 504, "is_ivy_sparse_arrai": 505, "is_native_sparse_arrai": 506, "native_sparse_arrai": 507, "native_sparse_array_to_indices_values_and_shap": 508, "bincount": 509, "corrcoef": 510, "cov": 511, "cummax": 512, "cummin": 513, "histogram": 514, "igamma": 515, "median": 516, "nanmean": 517, "nanmedian": 518, "nanmin": 519, "nanprod": 520, "quantil": 521, "optional_get_el": 522, "all_equ": 523, "arg_info": 524, "arg_nam": 525, "array_equ": 526, "assert_supports_inplac": 527, "cache_fn": 528, "clip_matrix_norm": 529, "clip_vector_norm": 530, "container_typ": 531, "current_backend_str": 532, "einops_rearrang": 534, "einops_reduc": 535, "einops_repeat": 536, "exist": [537, 802, 829], "fourier_encod": 538, "function_supported_devices_and_dtyp": 539, "function_unsupported_devices_and_dtyp": 540, "gather": 541, "gather_nd": 542, "get_all_arrays_in_memori": 543, "get_item": 544, "get_num_dim": 545, "get_referrers_recurs": 546, "has_nan": 547, "inplace_arrays_support": 548, "inplace_decr": 549, "inplace_incr": 550, "inplace_upd": 551, "inplace_variables_support": 552, "is_arrai": 553, "is_ivy_arrai": 554, "is_ivy_contain": 555, "is_ivy_nested_arrai": 556, "is_native_arrai": 557, "isin": 558, "isscalar": 559, "items": 560, "match_kwarg": 561, "multiprocess": [562, 768], "num_arrays_in_memori": 563, "print_all_arrays_in_memori": 564, "scatter_flat": 565, "scatter_nd": 566, "set_array_mod": 567, "set_exception_trace_mod": 568, "set_inplace_mod": 569, "set_item": 570, "set_min_bas": 571, "set_min_denomin": 572, "set_nestable_mod": 573, "set_precise_mod": 574, "set_queue_timeout": 575, "set_shape_array_mod": 576, "set_show_func_wrapper_trace_mod": 577, "set_tmp_dir": 578, "shape": [579, 633, 737, 738, 739, 740, 824, 841], "stable_divid": 580, "stable_pow": 581, "stride": 582, "supports_inplace_upd": 583, "to_ivy_shap": 584, "to_list": 585, "to_native_shap": 586, "to_numpi": 587, "to_scalar": 588, "try_else_non": 589, "unset_array_mod": 590, "unset_exception_trace_mod": 591, "unset_inplace_mod": 592, "unset_min_bas": 593, "unset_min_denomin": 594, "unset_nestable_mod": 595, "unset_precise_mod": 596, "unset_queue_timeout": 597, "unset_shape_array_mod": 598, "unset_show_func_wrapper_trace_mod": 599, "unset_tmp_dir": 600, "value_is_nan": 601, "vmap": 602, "adam_step": 603, "adam_upd": 604, "execute_with_gradi": [605, 825], "grad": 606, "gradient_descent_upd": 607, "jac": 608, "lamb_upd": 609, "lars_upd": 610, "optimizer_upd": 611, "stop_gradi": 612, "value_and_grad": 613, "control": [616, 841], "flow": [616, 841], "op": 616, "depend": [633, 737, 738, 739, 740], "output": [633, 737, 738, 739, 740], "conv": 637, "conv1d": 638, "conv1d_transpos": 639, "conv2d": 640, "conv2d_transpos": 641, "conv3d": 642, "conv3d_transpos": 643, "conv_general_dil": 644, "conv_general_transpos": 645, "depthwise_conv2d": 646, "dropout": 647, "lstm_updat": 649, "multi_head_attent": 650, "nm": 651, "roi_align": 652, "scaled_dot_product_attent": 653, "choleski": 654, "cross": 655, "det": 656, "diag": 657, "diagon": 658, "eigh": 660, "eigvalsh": 661, "inner": 662, "inv": 663, "lu_factor": 664, "matmul": 665, "matrix_norm": 666, "matrix_pow": 667, "matrix_rank": 668, "matrix_transpos": 669, "outer": 670, "pinv": 671, "qr": 672, "slogdet": 673, "solv": 674, "svd": 675, "svdval": 676, "tensordot": 677, "tensorsolv": 678, "vander": 680, "vecdot": 681, "vector_norm": 682, "vector_to_skew_symmetric_matrix": 683, "binary_cross_entropi": 684, "cross_entropi": 685, "sparse_cross_entropi": 686, "clip": 687, "concat": 688, "constant_pad": 689, "expand_dim": 690, "flip": 691, "permute_dim": 692, "repeat": 693, "reshap": 694, "roll": [695, 817], "split": 696, "squeez": 697, "stack": [698, 819], "swapax": 699, "tile": 700, "unstack": 701, "zero_pad": 702, "fomaml_step": 703, "maml_step": 704, "reptile_step": 705, "all_nested_indic": 706, "copy_nest": 707, "duplicate_array_index_chain": 708, "index_nest": 709, "insert_into_nest_at_index": 710, "insert_into_nest_at_indic": 711, "map": [712, 814], "map_nest_at_index": 713, "map_nest_at_indic": 714, "multi_index_nest": 715, "nested_ani": 716, "nested_argwher": 717, "nested_map": 718, "nested_multi_map": 719, "prune_empti": 720, "prune_nest_at_index": 721, "prune_nest_at_indic": 722, "set_nest_at_index": 723, "set_nest_at_indic": 724, "layer_norm": 725, "multinomi": 726, "randint": 727, "random_norm": 728, "random_uniform": 729, "seed": 730, "shuffl": 731, "argmax": 732, "argmin": 733, "argwher": 734, "nonzero": 735, "where": [736, 805, 820], "unique_al": 737, "unique_count": 738, "unique_invers": 739, "unique_valu": 740, "argsort": 741, "msort": 742, "searchsort": 743, "cumprod": 745, "cumsum": 746, "einsum": [747, 793, 794], "max": 748, "mean": 749, "min": 750, "prod": 751, "std": 752, "sum": 753, "var": 754, "assert": [759, 786, 819], "avail": 760, "global": [762, 832], "hypothesi": [763, 806, 828, 830], "struct": 770, "flag": 771, "convert": [777, 840], "sequenti": 785, "ast": 788, "sub": 790, "binari": [791, 806], "parser": 793, "path": 794, "except": [795, 819, 824], "inspect": 796, "profil": 798, "verbos": 799, "statu": 800, "ai": 800, "start": [800, 842], "pip": [800, 842], "document": 800, "dive": [800, 808], "deeper": 800, "should": 800, "contribut": [800, 801, 805, 829], "commun": 800, "citat": 800, "doc": [802, 812], "docker": [802, 806, 807, 812, 842], "conveni": [802, 812, 823], "script": [802, 812], "hub": 802, "local": [802, 807, 821], "without": [802, 828], "error": [803, 819, 820], "handl": [803, 810, 816, 819, 824, 841], "help": [804, 807, 820], "resourc": 804, "open": 805, "task": 805, "fail": [805, 820, 830], "frontend": [805, 811, 827, 828, 840], "place": 805, "checklist": 805, "format": [805, 821, 855, 862], "extend": [805, 830, 833], "an": [805, 825], "issu": [805, 807, 821, 842], "github": [805, 806], "templat": 805, "fork": [806, 807], "pre": [806, 821], "commit": [806, 807, 814, 821], "pycharm": [806, 807, 821], "virtual": 806, "environ": 806, "miniconda": 806, "venv": 806, "interpret": 806, "window": 806, "maco": 806, "ubuntu": 806, "detail": 806, "free": 806, "wsl": 806, "codespac": 806, "The": [806, 807, 812, 825, 827, 837, 841, 846], "list": 807, "manag": 807, "who": 807, "ask": [807, 820], "With": 807, "command": 807, "pull": [807, 814], "request": [807, 814], "small": 807, "often": 807, "interact": 807, "most": 807, "out": [807, 822, 824, 826], "id": [807, 809], "deep": 808, "termin": 809, "regener": 809, "failur": 809, "skip": 809, "integr": [810, 814, 821, 829, 830], "version": [811, 831, 841], "support": [811, 815, 824, 827, 841], "builder": 812, "being": 812, "option": 812, "index": 812, "rst": 812, "partial_conf": 812, "py": 812, "prebuild": 812, "sh": 812, "extens": 812, "custom_autosummari": 812, "hide": 812, "discussion_link": 812, "skippable_funct": 812, "ivy_data": 812, "instanc": [813, 827, 828, 837], "method": [813, 827, 828, 837, 838], "special": [813, 815, 827], "nestabl": [813, 822, 823, 824], "continu": [814, 821], "push": 814, "pr": 814, "trigger": 814, "A": [814, 833], "down": 814, "view": [814, 824, 826], "store": 814, "retriev": 814, "repositori": 814, "nitti": 814, "gritti": 814, "storag": 814, "space": 814, "unifyai": 814, "determin": 814, "coverag": 814, "workflow": 814, "multipl": 814, "runner": 814, "race": 814, "condit": 814, "period": 814, "manual": 814, "dispatch": 814, "ci": 814, "dashboard": 814, "promot": [815, 827], "precis": 815, "non": [815, 833], "argument": [815, 816, 822, 824, 826, 827], "other": [815, 816], "unsupport": 815, "attribut": [815, 832], "case": [815, 838], "bug": 815, "cast": [815, 827], "superset": [815, 833], "docstr": [817, 818], "configur": [819, 828, 838], "func_wrapp": 819, "prune": 819, "handle_except": 819, "consist": [819, 830], "prerequir": 820, "common": [820, 821], "lint": [821, 829], "keyword": 822, "integ": 822, "primari": 823, "composit": 823, "mix": [823, 824, 830], "partial": [823, 824, 830], "order": 824, "wrapper": [824, 862, 863], "miscellan": 824, "overview": [825, 829], "usag": [825, 829, 833, 851], "signatur": 825, "design": [825, 831, 834], "our": 825, "polici": [825, 827], "specif": [825, 860, 861, 862], "consider": 825, "inplac": 826, "updat": 826, "copi": 826, "short": 827, "unus": 827, "rule": 827, "duplic": [827, 833], "valu": 828, "alia": 828, "formatt": 829, "functionorderingformatt": 829, "work": [829, 846, 852], "own": 830, "strategi": 830, "do": [830, 846], "effect": 830, "bonu": 830, "featur": 830, "self": 830, "explicit": 830, "test_array_funct": 830, "re": [830, 847], "navig": 831, "categor": 831, "submodul": 831, "unpin": 831, "properti": 832, "getter": 832, "setter": 832, "set_": 832, "unset_": 832, "behaviour": 833, "standard": [833, 846, 853, 862], "what": [833, 862], "balanc": 833, "effici": 833, "maxim": 833, "block": 835, "monkei": 837, "patch": 837, "represent": 838, "recurs": 838, "built": 838, "ins": 838, "access": 838, "compartment": 838, "role": 840, "faq": 841, "maintain": 841, "size": 841, "deploy": 841, "auto": 841, "differenti": 841, "replica": 841, "parallel": 841, "altern": 841, "sourc": 842, "folder": 842, "kei": 842, "question": 842, "glossari": 843, "motiv": 844, "explos": 845, "skeptic": 846, "complimentari": 846, "competit": 846, "infinit": 847, "shelf": 847, "life": 847, "One": 848, "liner": 848, "trace_graph": 849, "cach": 849, "sharp": [849, 850, 851], "bit": [849, 850, 851], "relat": 852, "infrastructur": [854, 862], "llvm": 854, "mlir": 854, "oneapi": 854, "exchang": [855, 862], "onnx": 855, "nnef": 855, "coreml": 855, "matlab": 856, "scipi": 856, "scikit": 856, "theano": 856, "panda": 856, "julia": 856, "apach": [856, 859], "spark": 856, "mllib": 856, "caff": 856, "chainer": 856, "mxnet": 856, "cntk": 856, "flux": 856, "dex": 856, "languag": 856, "tf": 857, "jaxpr": 857, "jit": 857, "fx": 857, "compani": [858, 862], "quansight": 858, "modular": 858, "octoml": 858, "multi": [859, 862], "vendor": [859, 860, 861, 862], "tvm": 859, "xla": 859, "gcc": 859, "tensorrt": 860, "cuda": 860, "icc": 861, "icx": 861, "nvcc": 861, "doe": 862, "eagerpi": 863, "kera": 863, "thinc": 863, "tensorli": 863, "neuropod": 863}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"is_bool_dtype": [[166, "is-bool-dtype"]], "ones_like": [[138, "ones-like"]], "is_int_dtype": [[170, "is-int-dtype"]], "is_uint_dtype": [[172, "is-uint-dtype"]], "astype": [[147, "astype"]], "finfo": [[160, "finfo"]], "is_complex_dtype": [[167, "is-complex-dtype"]], "unset_default_dtype": [[183, "unset-default-dtype"]], "default_dtype": [[154, "default-dtype"]], "as_ivy_dtype": [[145, "as-ivy-dtype"]], "set_default_float_dtype": [[178, "set-default-float-dtype"]], "is_native_dtype": [[171, "is-native-dtype"]], "function_supported_dtypes": [[161, "function-supported-dtypes"]], "type_promote_arrays": [[181, "type-promote-arrays"]], "is_hashable_dtype": [[169, "is-hashable-dtype"]], "dtype_bits": [[159, "dtype-bits"]], "unset_default_complex_dtype": [[182, "unset-default-complex-dtype"]], "dtype": [[158, "dtype"]], "default_uint_dtype": [[157, "default-uint-dtype"]], "zeros": [[143, "zeros"]], "closest_valid_dtype": [[152, "closest-valid-dtype"]], "to_dlpack": [[139, "to-dlpack"]], "Note": [[139, null], [128, null], [617, null], [617, null]], "zeros_like": [[144, "zeros-like"]], "infer_default_dtype": [[164, "infer-default-dtype"]], "triu": [[141, "triu"]], "triu_indices": [[142, "triu-indices"]], "set_default_dtype": [[177, "set-default-dtype"]], "as_native_dtype": [[146, "as-native-dtype"]], "tril": [[140, "tril"]], "default_complex_dtype": [[153, "default-complex-dtype"]], "promote_types": [[173, "promote-types"]], "result_type": [[175, "result-type"]], "can_cast": [[150, "can-cast"]], "invalid_dtype": [[165, "invalid-dtype"]], "default_int_dtype": [[156, "default-int-dtype"]], "check_float": [[151, "check-float"]], "default_float_dtype": [[155, "default-float-dtype"]], "is_float_dtype": [[168, "is-float-dtype"]], "set_default_uint_dtype": [[180, "set-default-uint-dtype"]], "function_unsupported_dtypes": [[162, "function-unsupported-dtypes"]], "set_default_int_dtype": [[179, "set-default-int-dtype"]], "broadcast_to": [[149, "broadcast-to"]], "set_default_complex_dtype": [[176, "set-default-complex-dtype"]], "broadcast_arrays": [[148, "broadcast-arrays"]], "promote_types_of_inputs": [[174, "promote-types-of-inputs"]], "iinfo": [[163, "iinfo"]], "ivy.unify()": [[851, "ivy-unify"]], "Unify API": [[851, "unify-api"]], "Usage": [[851, "usage"]], "Sharp bits": [[851, "sharp-bits"], [850, "sharp-bits"], [849, "sharp-bits"]], "Examples": [[851, "examples"], [850, "examples"], [849, "examples"], [822, "examples"], [800, "examples"]], "What does Ivy Add?": [[862, "what-does-ivy-add"]], "API Standards": [[862, "api-standards"], [853, "api-standards"]], "Wrapper Frameworks": [[862, "wrapper-frameworks"], [863, "wrapper-frameworks"]], "Frameworks": [[862, "frameworks"], [856, "frameworks"]], "Graph Tracers": [[862, "graph-tracers"], [857, "graph-tracers"]], "Exchange Formats": [[862, "exchange-formats"], [855, "exchange-formats"]], "Compiler Infrastructure": [[862, "compiler-infrastructure"], [854, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[862, "multi-vendor-compiler-frameworks"], [859, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[862, "vendor-specific-apis"], [860, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[862, "vendor-specific-compilers"], [861, "vendor-specific-compilers"]], "ML-Unifying Companies": [[862, "ml-unifying-companies"], [858, "ml-unifying-companies"]], "Operating Modes": [[832, "operating-modes"]], "Global Parameter Properties": [[832, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[832, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[832, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Ivy Stateful API": [[839, "ivy-stateful-api"], [26, "Ivy-Stateful-API"], [17, "Ivy-Stateful-API"]], "Modules": [[839, "modules"]], "Initializers": [[839, "initializers"], [779, "module-ivy.stateful.initializers"]], "Optimizers": [[839, "optimizers"], [784, "module-ivy.stateful.optimizers"]], "ivy.transpile()": [[850, "ivy-transpile"]], "Transpiler API": [[850, "transpiler-api"]], "Using the transpiler": [[850, "using-the-transpiler"]], "Transpiling functions": [[850, "transpiling-functions"]], "Transpiling Libraries": [[850, "transpiling-libraries"]], "Transpiling Modules": [[850, "transpiling-modules"]], "ML Explosion": [[845, "ml-explosion"]], "Ivy Container": [[838, "ivy-container"]], "Construction": [[838, "construction"]], "Representation": [[838, "representation"]], "Recursive Methods": [[838, "recursive-methods"]], "Built-ins": [[838, "built-ins"]], "Access": [[838, "access"]], "Saving and Loading": [[838, "saving-and-loading"]], "Comparisons": [[838, "comparisons"]], "Customized Representations": [[838, "customized-representations"]], "Use Cases": [[838, "use-cases"]], "Compartmentalization": [[838, "compartmentalization"]], "Configuration": [[838, "configuration"]], "Data loading": [[838, "data-loading"]], "Network weights": [[838, "network-weights"]], "Ivy Frontend Tests": [[828, "ivy-frontend-tests"]], "Introduction": [[828, "introduction"], [827, "introduction"], [41, "Introduction"]], "Frontend Test Examples": [[828, "frontend-test-examples"]], "ivy.tan()": [[828, "ivy-tan"]], "ivy.full()": [[828, "ivy-full"]], "Testing Without Using Tests Values": [[828, "testing-without-using-tests-values"]], "Alias functions": [[828, "alias-functions"]], "Frontend Instance Method Tests": [[828, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[828, "frontend-instance-method-test-examples"]], "ivy.add()": [[828, "ivy-add"]], "Hypothesis Helpers": [[828, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[828, "frontend-framework-testing-configuration"]], "Ivy Array": [[837, "ivy-array"], [810, "ivy-array"]], "The Array Class": [[837, "the-array-class"]], "Unifying Operators": [[837, "unifying-operators"]], "API Monkey Patching": [[837, "api-monkey-patching"]], "Instance Methods": [[837, "instance-methods"]], "Superset Behaviour": [[833, "superset-behaviour"]], "Extending the Standard": [[833, "extending-the-standard"]], "What is the Superset?": [[833, "what-is-the-superset"]], "A Non-Duplicate Superset": [[833, "a-non-duplicate-superset"]], "What is not the Superset?": [[833, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[833, "balancing-generalization-with-efficiency"]], "More Examples": [[833, "more-examples"]], "Maximizing Usage of Native Functionality": [[833, "maximizing-usage-of-native-functionality"]], "Building Blocks": [[835, "building-blocks"]], "Backend Functional APIs \u2705": [[835, "backend-functional-apis"]], "Ivy Functional API \u2705": [[835, "ivy-functional-api"]], "Backend Handler \u2705": [[835, "backend-handler"]], "Tracer \ud83d\udea7": [[835, "tracer"]], "FAQ": [[841, "faq"]], "Maintaining Backend Versions": [[841, "maintaining-backend-versions"]], "Dynamic Sizes": [[841, "dynamic-sizes"]], "Type and Shape Checking": [[841, "type-and-shape-checking"]], "GPU handling": [[841, "gpu-handling"]], "Model Deployment": [[841, "model-deployment"]], "Dynamic Control Flow": [[841, "dynamic-control-flow"]], "Auto-Differentiation": [[841, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[841, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[841, "support-for-functions"]], "Alternative Data Structures": [[841, "alternative-data-structures"]], "Custom Operations": [[841, "custom-operations"]], "The Pipeline": [[841, "the-pipeline"]], "State": [[841, "state"]], "Ivy as a Transpiler": [[840, "ivy-as-a-transpiler"], [26, "Ivy-as-a-Transpiler"], [27, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[840, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[840, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[840, "converting-network-models"]], "TensorRT tensorrt": [[860, "tensorrt-tensorrt"]], "CUDA cuda": [[860, "cuda-cuda"]], "One liners": [[848, "one-liners"]], "Standardization": [[846, "standardization"]], "Skepticism": [[846, "skepticism"]], "Complimentary vs Competitive": [[846, "complimentary-vs-competitive"]], "Do Standards Work?": [[846, "do-standards-work"]], "The Array API Standard": [[846, "the-array-api-standard"]], "Related Work": [[852, "related-work"]], "ONNX onnx": [[855, "onnx-onnx"]], "NNEF nnef": [[855, "nnef-nnef"]], "CoreML coreml": [[855, "coreml-coreml"]], "Ivy as a Framework": [[836, "ivy-as-a-framework"], [26, "Ivy-as-a-Framework"]], "Glossary": [[843, "glossary"]], "Apache TVM": [[859, "apache-tvm"]], "XLA": [[859, "xla"]], "GCC": [[859, "gcc"]], "Ivy Tests": [[830, "ivy-tests"], [814, "ivy-tests"]], "Testing Pipeline": [[830, "testing-pipeline"]], "Hypothesis": [[830, "id1"]], "Data Generation": [[830, "id2"]], "Writing your own strategy": [[830, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[830, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[830, "ivy-test-decorators"]], "Writing Ivy Tests": [[830, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[830, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[830, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[830, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[830, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[830, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[830, "self-consistent-and-explicit-testing"]], "test_array_function": [[830, "id4"]], "Running Ivy Tests": [[830, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[830, "re-running-failed-ivy-tests"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[829, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[829, "overview"], [825, "overview"]], "Existing Formatters": [[829, "existing-formatters"]], "FunctionOrderingFormatter": [[829, "functionorderingformatter"]], "How the Formatter Works:": [[829, "how-the-formatter-works"]], "Integration and Usage": [[829, "integration-and-usage"]], "Contribution": [[829, "contribution"]], "Round Up": [[829, "round-up"], [28, "Round-Up"], [13, "Round-Up"], [20, "Round-Up"], [31, "Round-Up"], [23, "Round-Up"], [33, "Round-Up"], [21, "Round-Up"], [27, "Round-Up"], [19, "Round-Up"], [32, "Round-Up"], [11, "Round-Up"], [30, "Round-Up"], [18, "Round-Up"], [29, "Round-Up"], [22, "Round-Up"], [17, "Round-Up"], [40, "Round-Up"]], "ICC": [[861, "id1"]], "ICX": [[861, "icx"]], "NVCC": [[861, "nvcc"]], "Navigating the Code": [[831, "navigating-the-code"]], "Categorization": [[831, "categorization"]], "Submodule Design": [[831, "submodule-design"]], "Ivy API": [[831, "ivy-api"]], "Backend API": [[831, "backend-api"]], "Submodule Helper Functions": [[831, "submodule-helper-functions"]], "Version Unpinning": [[831, "version-unpinning"]], "Quansight": [[858, "id1"]], "Modular": [[858, "id2"]], "OctoML": [[858, "id3"]], "LLVM": [[854, "id1"]], "MLIR": [[854, "id2"]], "OneAPI": [[854, "id3"]], "ivy.trace_graph()": [[849, "ivy-trace-graph"]], "Tracer API": [[849, "tracer-api"]], "Using the tracer": [[849, "using-the-tracer"]], "Eager vs lazy Compilation": [[849, "eager-vs-lazy-compilation"]], "Array caching": [[849, "array-caching"]], "Generators": [[849, "generators"]], "Stateful": [[849, "stateful"]], "Array API Standard": [[853, "id1"]], "MATLAB matlab": [[856, "matlab-matlab"]], "SciPy scipy": [[856, "scipy-scipy"]], "Torch torch": [[856, "torch-torch"]], "NumPy numpy": [[856, "numpy-numpy"]], "SciKit Learn scikit-learn": [[856, "scikit-learn-scikit-learn"]], "Theano theano": [[856, "theano-theano"]], "Pandas pandas": [[856, "pandas-pandas"]], "Julia julia": [[856, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[856, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[856, "caffe-caffe"]], "Chainer chainer": [[856, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[856, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[856, "mxnet-mxnet"]], "CNTK cntk": [[856, "cntk-cntk"]], "PyTorch pytorch": [[856, "pytorch-pytorch"]], "Flux flux": [[856, "flux-flux"]], "JAX jax": [[856, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[856, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[856, "dex-language-dex-language"]], "tf.Graph": [[857, "tf-graph"]], "Jaxpr": [[857, "jaxpr"]], "torch.jit": [[857, "torch-jit"]], "torch.fx": [[857, "torch-fx"]], "Why Unify?": [[847, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[847, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[847, "infinite-shelf-life"]], "Get Started": [[842, "get-started"]], "Installing using pip": [[842, "installing-using-pip"], [800, "installing-using-pip"]], "Docker": [[842, "docker"]], "Installing from source": [[842, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[842, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[842, "ivy-folder"]], "Setting Up the API key": [[842, "setting-up-the-api-key"]], "Issues and Questions": [[842, "issues-and-questions"]], "Design": [[834, "design"]], "EagerPy eagerpy": [[863, "eagerpy-eagerpy"]], "Keras keras": [[863, "keras-keras"]], "Thinc thinc": [[863, "thinc-thinc"]], "TensorLy tensorly": [[863, "tensorly-tensorly"]], "NeuroPod": [[863, "id1"]], "Motivation": [[844, "motivation"]], "cmp_isnot": [[116, "cmp-isnot"]], "for_loop": [[117, "for-loop"]], "one_hot": [[136, "one-hot"]], "meshgrid": [[134, "meshgrid"]], "while_loop": [[120, "while-loop"]], "cmp_is": [[115, "cmp-is"]], "Cp tensor": [[92, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Base": [[101, "module-ivy.data_classes.nested_array.base"], [91, "module-ivy.data_classes.factorized_tensor.base"], [69, "module-ivy.data_classes.container.base"]], "from_dlpack": [[128, "from-dlpack"]], "full_like": [[131, "full-like"]], "linspace": [[132, "linspace"]], "gelu": [[105, "gelu"]], "native_array": [[135, "native-array"]], "leaky_relu": [[107, "leaky-relu"]], "softsign": [[114, "softsign"]], "Tucker tensor": [[96, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Elementwise": [[102, "module-ivy.data_classes.nested_array.elementwise"], [620, "elementwise"], [365, "elementwise"], [74, "module-ivy.data_classes.container.elementwise"], [51, "module-ivy.data_classes.array.elementwise"]], "sigmoid": [[111, "sigmoid"]], "arange": [[121, "arange"]], "copy_array": [[124, "copy-array"]], "Tr tensor": [[94, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "logspace": [[133, "logspace"]], "Parafac2 tensor": [[93, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Container": [[98, "container"]], "Tt tensor": [[95, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "empty": [[125, "empty"]], "log_softmax": [[108, "log-softmax"]], "empty_like": [[126, "empty-like"]], "if_else": [[118, "if-else"]], "softmax": [[112, "softmax"]], "eye": [[127, "eye"]], "Nested array": [[100, "nested-array"]], "relu": [[110, "relu"]], "softplus": [[113, "softplus"]], "mish": [[109, "mish"]], "ones": [[137, "ones"]], "try_except": [[119, "try-except"]], "frombuffer": [[129, "frombuffer"]], "hardswish": [[106, "hardswish"]], "Functions": [[104, "functions"]], "asarray": [[123, "asarray"]], "array": [[122, "array"]], "full": [[130, "full"]], "Data classes": [[103, "data-classes"]], "Array": [[97, "array"]], "Factorized tensor": [[99, "factorized-tensor"]], "Arrays": [[810, "arrays"]], "Native Array": [[810, "native-array"]], "Array Handling": [[810, "array-handling"]], "Integrating custom classes with Ivy": [[810, "integrating-custom-classes-with-ivy"]], "Inplace Updates": [[826, "inplace-updates"]], "out argument": [[826, "out-argument"]], "copy argument": [[826, "copy-argument"]], "Views": [[826, "views"]], "Exception Handling": [[819, "exception-handling"], [824, "exception-handling"]], "Ivy Exception Class": [[819, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[819, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[819, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[819, "handle-exceptions-decorator"]], "Consistency in Errors": [[819, "consistency-in-errors"]], "Assertion Function": [[819, "assertion-function"]], "Binaries": [[791, "module-ivy.utils.binaries"]], "Setting Up": [[806, "setting-up"], [820, "setting-up"]], "Forking and cloning the repo": [[806, "forking-and-cloning-the-repo"]], "Pre-Commit": [[806, "pre-commit"]], "PyCharm": [[806, "pycharm"], [821, "pycharm"]], "Virtual environments - No Docker": [[806, "virtual-environments-no-docker"]], "Using miniconda": [[806, "using-miniconda"]], "Using venv": [[806, "using-venv"]], "Docker Interpreter with PyCharm": [[806, "docker-interpreter-with-pycharm"]], "Windows": [[806, "windows"], [806, "id6"]], "MacOS": [[806, "macos"]], "Ubuntu": [[806, "ubuntu"], [806, "id8"]], "Setting Up Testing in PyCharm": [[806, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[806, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[806, "setting-up-for-free"]], "WSL": [[806, "wsl"]], "GitHub Codespaces": [[806, "github-codespaces"]], "The Binaries": [[806, "the-binaries"]], "Error Handling": [[803, "error-handling"]], "Function Types": [[823, "function-types"]], "Primary Functions": [[823, "primary-functions"]], "Compositional Functions": [[823, "compositional-functions"]], "Mixed Functions": [[823, "mixed-functions"]], "Partial Mixed Functions": [[823, "partial-mixed-functions"]], "Standalone Functions": [[823, "standalone-functions"]], "Nestable Functions": [[823, "nestable-functions"], [813, "nestable-functions"], [822, "nestable-functions"]], "Convenience Functions": [[823, "convenience-functions"]], "Gradients": [[825, "gradients"], [623, "gradients"], [367, "gradients"], [54, "module-ivy.data_classes.array.gradients"], [77, "module-ivy.data_classes.container.gradients"]], "Example Usage of the Gradient API": [[825, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[825, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[825, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[825, "custom-gradient-functions"]], "Design of the Gradient API": [[825, "design-of-the-gradient-api"]], "Our policy on gradients": [[825, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[825, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[825, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[825, "framework-specific-considerations"]], "Contributing": [[801, "contributing"], [800, "contributing"]], "Function Wrapping": [[824, "function-wrapping"]], "Decorator order": [[824, "decorator-order"]], "Conversion Wrappers": [[824, "conversion-wrappers"]], "Inference Wrappers": [[824, "inference-wrappers"]], "Out Argument Support": [[824, "out-argument-support"]], "Nestable Support": [[824, "nestable-support"]], "Partial Mixed Function Support": [[824, "partial-mixed-function-support"]], "Shape Conversion": [[824, "shape-conversion"]], "View Handling": [[824, "view-handling"]], "Miscellaneous Wrappers": [[824, "miscellaneous-wrappers"]], "Sub backend handler": [[790, "module-ivy.utils.backend.sub_backend_handler"]], "Devices": [[816, "devices"]], "Device Module": [[816, "device-module"]], "Arguments in other Functions": [[816, "arguments-in-other-functions"], [815, "arguments-in-other-functions"]], "Device handling": [[816, "device-handling"]], "Handler": [[789, "module-ivy.utils.backend.handler"]], "Profiler": [[798, "module-ivy.utils.profiler"]], "Dynamic import": [[792, "module-ivy.utils.dynamic_import"]], "Inspection": [[796, "module-ivy.utils.inspection"]], "Continuous Integration": [[814, "continuous-integration"], [821, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[814, "commit-push-pr-triggered-testing"]], "Implementation": [[814, "implementation"]], "A Top-Down View": [[814, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[814, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[814, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[814, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[814, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[814, "determine-test-coverage-workflow"]], "Multiple Runners": [[814, "multiple-runners"]], "Race Condition": [[814, "race-condition"]], "Array API Tests": [[814, "array-api-tests"], [809, "array-api-tests"]], "Periodic Testing": [[814, "periodic-testing"]], "Manually Dispatched Workflows": [[814, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[814, "ci-pipeline"]], "Push": [[814, "push"]], "Pull Request": [[814, "pull-request"]], "Dashboard": [[814, "dashboard"]], "Building the Docs": [[802, "building-the-docs"]], "Building the Docs using Docker": [[802, "building-the-docs-using-docker"]], "Using convenience script": [[802, "using-convenience-script"]], "Using existing image on Docker Hub": [[802, "using-existing-image-on-docker-hub"]], "Building the image locally": [[802, "building-the-image-locally"]], "Building the Docs without Docker": [[802, "building-the-docs-without-docker"]], "Logging": [[797, "module-ivy.utils.logging"]], "Containers": [[813, "containers"]], "Container Instance Methods": [[813, "container-instance-methods"]], "API Instance Methods": [[813, "api-instance-methods"]], "API Special Methods": [[813, "api-special-methods"]], "Building the Docs Pipeline": [[812, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[812, "how-the-doc-builder-is-being-run"]], "The convenience script": [[812, "the-convenience-script"]], "Options": [[812, "options"]], "The Docker image": [[812, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[812, "how-ivy-s-docs-is-structured"]], "index.rst": [[812, "index-rst"]], "partial_conf.py": [[812, "partial-conf-py"]], "prebuild.sh": [[812, "prebuild-sh"]], "Custom Extensions": [[812, "custom-extensions"]], "custom_autosummary": [[812, "custom-autosummary"]], ":hide-table:": [[812, "hide-table"]], "discussion_linker": [[812, "discussion-linker"]], "skippable_function": [[812, "skippable-function"]], "ivy_data": [[812, "ivy-data"]], "Function Arguments": [[822, "function-arguments"]], "Positional and Keyword Arguments": [[822, "positional-and-keyword-arguments"]], "Input Arrays": [[822, "input-arrays"]], "out Argument": [[822, "out-argument"]], "dtype and device arguments": [[822, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[822, "numbers-in-operator-functions"]], "Integer Sequences": [[822, "integer-sequences"]], "Backend Setting": [[811, "backend-setting"]], "Dynamic Backend Setting": [[811, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[811, "backend-and-frontend-version-support"]], "Status": [[800, "status"]], "Unified AI": [[800, "unified-ai"]], "Getting started": [[800, "getting-started"]], "Installing ivy": [[800, "installing-ivy"]], "Using Ivy": [[800, "using-ivy"]], "Documentation": [[800, "documentation"]], "Diving deeper": [[800, "diving-deeper"]], "When should I use Ivy as a transpiler?": [[800, "when-should-i-use-ivy-as-a-transpiler"]], "Community": [[800, "community"]], "Citation": [[800, "citation"]], "Open Tasks": [[805, "open-tasks"]], "Fixing Failing Tests": [[805, "fixing-failing-tests"]], "How to Contribute": [[805, "how-to-contribute"]], "Frontend APIs": [[805, "frontend-apis"]], "Where to place a frontend function": [[805, "where-to-place-a-frontend-function"]], "Frontend checklist": [[805, "frontend-checklist"]], "Function Formatting": [[805, "function-formatting"]], "Formatting checklist": [[805, "formatting-checklist"]], "Ivy Experimental API": [[805, "ivy-experimental-api"]], "Extending the Ivy API": [[805, "extending-the-ivy-api"]], "Where to place a backend function": [[805, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[805, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Einsum parser": [[793, "module-ivy.utils.einsum_parser"]], "Exceptions": [[795, "module-ivy.utils.exceptions"]], "Ast helpers": [[788, "module-ivy.utils.backend.ast_helpers"]], "The Basics": [[807, "the-basics"]], "Getting Help": [[807, "getting-help"]], "ToDo List Issues": [[807, "todo-list-issues"]], "Managing Your Fork": [[807, "managing-your-fork"]], "Who To Ask": [[807, "who-to-ask"]], "With Command Line:": [[807, "with-command-line"]], "With Browser:": [[807, "with-browser"]], "Pull Requests": [[807, "pull-requests"]], "Small Commits Often": [[807, "small-commits-often"]], "Interactive Ivy Docker Container": [[807, "interactive-ivy-docker-container"]], "Running Tests Locally": [[807, "running-tests-locally"]], "With Docker": [[807, "with-docker"]], "Getting the most out of IDE": [[807, "getting-the-most-out-of-ide"]], "with PyCharm": [[807, "with-pycharm"]], "Norms": [[783, "module-ivy.stateful.norms"], [630, "norms"], [374, "norms"], [60, "module-ivy.data_classes.array.norms"], [83, "module-ivy.data_classes.container.norms"]], "Docstring Examples": [[817, "docstring-examples"]], "ivy.tan": [[817, "ivy-tan"]], "ivy.roll": [[817, "ivy-roll"]], "ivy.add": [[817, "ivy-add"]], "Backend": [[787, "backend"]], "Module": [[782, "module-ivy.stateful.module"]], "Formatting": [[821, "formatting"]], "Lint Checks": [[821, "lint-checks"], [821, "id2"]], "Setup Formatting Locally": [[821, "setup-formatting-locally"]], "Pre-commit": [[821, "pre-commit"]], "VS Code": [[821, "vs-code"]], "Common Issues with Pre-Commit": [[821, "common-issues-with-pre-commit"]], "Lint Formatting": [[821, "lint-formatting"]], "Sequential": [[785, "module-ivy.stateful.sequential"]], "Data Types": [[815, "data-types"]], "Data Type Module": [[815, "data-type-module"]], "Data Type Promotion": [[815, "data-type-promotion"]], "Precise Mode": [[815, "precise-mode"]], "Precise Promotion Table": [[815, "precise-promotion-table"]], "Non-Precise Promotion Table": [[815, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[815, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[815, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[815, "special-case"]], "Backend Data Type Bugs": [[815, "backend-data-type-bugs"]], "Data Type Casting Modes": [[815, "data-type-casting-modes"]], "Superset Data Type Support": [[815, "superset-data-type-support"]], "Fix Failing Tests:": [[820, "fix-failing-tests"]], "Prerequirement:": [[820, "prerequirement"]], "How to run tests": [[820, "how-to-run-tests"]], "Common Errors": [[820, "common-errors"]], "Where to ask for Help": [[820, "where-to-ask-for-help"]], "Ivy Frontends": [[827, "ivy-frontends"]], "The Frontend Basics": [[827, "the-frontend-basics"]], "Writing Frontend Functions": [[827, "writing-frontend-functions"]], "Short Frontend Implementations": [[827, "short-frontend-implementations"]], "Unused Arguments": [[827, "unused-arguments"]], "Supported Data Types and Devices": [[827, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[827, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[827, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[827, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[827, "frontends-duplicate-policy"]], "Helpful Resources": [[804, "helpful-resources"]], "Einsum path helpers": [[794, "module-ivy.utils.einsum_path_helpers"]], "Docstrings": [[818, "docstrings"]], "Running the Tests": [[809, "running-the-tests"]], "Using Terminal": [[809, "using-terminal"]], "Using the IDE": [[809, "using-the-ide"]], "Regenerating Test Failures": [[809, "regenerating-test-failures"]], "Test Skipping": [[809, "test-skipping"]], "Verbosity": [[799, "module-ivy.utils.verbosity"]], "Assertions": [[786, "module-ivy.utils.assertions"], [759, "module-ivy_tests.test_ivy.helpers.assertions"]], "Deep Dive": [[808, "deep-dive"]], "Function testing": [[761, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Available frameworks": [[760, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "msort": [[742, "msort"]], "Pipeline helper": [[769, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Activations": [[776, "module-ivy.stateful.activations"], [614, "activations"], [360, "activations"], [68, "module-ivy.data_classes.container.activations"], [46, "module-ivy.data_classes.array.activations"]], "Parameter": [[776, "parameter"], [776, "id1"], [573, "parameter"], [568, "parameter"], [576, "parameter"], [567, "parameter"], [577, "parameter"], [574, "parameter"], [619, "parameter"], [622, "parameter"], [622, "id1"], [622, "id2"], [622, "id3"], [622, "id4"], [622, "id5"], [205, "parameter"]], "Helpers": [[778, "module-ivy.stateful.helpers"]], "searchsorted": [[743, "searchsorted"]], "Converters": [[777, "module-ivy.stateful.converters"]], "Number helpers": [[767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Multiprocessing": [[768, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "Array helpers": [[764, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Globals": [[762, "module-ivy_tests.test_ivy.helpers.globals"]], "cumsum": [[746, "cumsum"]], "argsort": [[741, "argsort"]], "Losses": [[781, "module-ivy.stateful.losses"], [626, "losses"], [370, "losses"], [81, "module-ivy.data_classes.container.losses"], [58, "module-ivy.data_classes.array.losses"]], "unique_inverse": [[739, "unique-inverse"]], "Data-dependent output shape": [[739, null], [738, null], [737, null], [740, null], [633, null], [633, null], [633, null], [633, null]], "prod": [[751, "prod"]], "mean": [[749, "mean"]], "Structs": [[770, "module-ivy_tests.test_ivy.helpers.structs"]], "Testing": [[775, "testing"], [40, "Testing"]], "min": [[750, "min"]], "Test parameter flags": [[771, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Utils": [[774, "utils"]], "Layers": [[780, "module-ivy.stateful.layers"], [624, "layers"], [368, "layers"], [56, "module-ivy.data_classes.array.layers"], [79, "module-ivy.data_classes.container.layers"]], "var": [[754, "var"]], "sum": [[753, "sum"]], "Dtype helpers": [[765, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Framework classes": [[773, "framework-classes"]], "all": [[755, "all"]], "std": [[752, "std"]], "max": [[748, "max"]], "Testing helpers": [[772, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "save": [[758, "save"]], "any": [[756, "any"]], "Hypothesis helpers": [[763, "hypothesis-helpers"]], "cumprod": [[745, "cumprod"]], "load": [[757, "load"]], "General helpers": [[766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "unique_counts": [[738, "unique-counts"]], "einsum": [[747, "einsum"]], "sort": [[744, "sort"]], "where": [[736, "where"]], "unique_all": [[737, "unique-all"]], "unique_values": [[740, "unique-values"]], "all_nested_indices": [[706, "all-nested-indices"]], "argmax": [[732, "argmax"]], "flip": [[691, "flip"]], "set_nest_at_index": [[723, "set-nest-at-index"]], "stack": [[698, "stack"]], "prune_nest_at_index": [[721, "prune-nest-at-index"]], "insert_into_nest_at_index": [[710, "insert-into-nest-at-index"]], "nested_argwhere": [[717, "nested-argwhere"]], "squeeze": [[697, "squeeze"]], "roll": [[695, "roll"]], "layer_norm": [[725, "layer-norm"]], "prune_empty": [[720, "prune-empty"]], "multinomial": [[726, "multinomial"]], "nested_multi_map": [[719, "nested-multi-map"]], "random_uniform": [[729, "random-uniform"]], "map": [[712, "map"]], "split": [[696, "split"]], "nonzero": [[735, "nonzero"]], "randint": [[727, "randint"]], "set_nest_at_indices": [[724, "set-nest-at-indices"]], "seed": [[730, "seed"]], "copy_nest": [[707, "copy-nest"]], "fomaml_step": [[703, "fomaml-step"]], "permute_dims": [[692, "permute-dims"]], "duplicate_array_index_chains": [[708, "duplicate-array-index-chains"]], "maml_step": [[704, "maml-step"]], "multi_index_nest": [[715, "multi-index-nest"]], "map_nest_at_index": [[713, "map-nest-at-index"]], "random_normal": [[728, "random-normal"]], "nested_any": [[716, "nested-any"]], "reptile_step": [[705, "reptile-step"]], "expand_dims": [[690, "expand-dims"]], "swapaxes": [[699, "swapaxes"]], "index_nest": [[709, "index-nest"]], "insert_into_nest_at_indices": [[711, "insert-into-nest-at-indices"]], "unstack": [[701, "unstack"]], "shuffle": [[731, "shuffle"]], "map_nest_at_indices": [[714, "map-nest-at-indices"]], "argmin": [[733, "argmin"]], "repeat": [[693, "repeat"]], "tile": [[700, "tile"]], "reshape": [[694, "reshape"]], "argwhere": [[734, "argwhere"]], "nested_map": [[718, "nested-map"]], "prune_nest_at_indices": [[722, "prune-nest-at-indices"]], "zero_pad": [[702, "zero-pad"]], "linear": [[648, "linear"]], "tensorsolve": [[678, "tensorsolve"]], "matrix_rank": [[668, "matrix-rank"]], "concat": [[688, "concat"]], "vecdot": [[681, "vecdot"]], "qr": [[672, "qr"]], "clip": [[687, "clip"]], "cholesky": [[654, "cholesky"]], "solve": [[674, "solve"]], "svdvals": [[676, "svdvals"]], "matrix_transpose": [[669, "matrix-transpose"]], "lu_factor": [[664, "lu-factor"]], "scaled_dot_product_attention": [[653, "scaled-dot-product-attention"]], "inner": [[662, "inner"]], "vector_norm": [[682, "vector-norm"]], "slogdet": [[673, "slogdet"]], "diagonal": [[658, "diagonal"]], "multi_head_attention": [[650, "multi-head-attention"]], "tensordot": [[677, "tensordot"]], "binary_cross_entropy": [[684, "binary-cross-entropy"]], "eigvalsh": [[661, "eigvalsh"]], "vector_to_skew_symmetric_matrix": [[683, "vector-to-skew-symmetric-matrix"]], "diag": [[657, "diag"]], "sparse_cross_entropy": [[686, "sparse-cross-entropy"]], "det": [[656, "det"]], "matrix_power": [[667, "matrix-power"]], "trace": [[679, "trace"]], "dropout": [[647, "dropout"]], "conv_general_transpose": [[645, "conv-general-transpose"]], "vander": [[680, "vander"]], "constant_pad": [[689, "constant-pad"]], "depthwise_conv2d": [[646, "depthwise-conv2d"]], "nms": [[651, "nms"]], "outer": [[670, "outer"]], "lstm_update": [[649, "lstm-update"]], "cross": [[655, "cross"]], "eigh": [[660, "eigh"]], "eig": [[659, "eig"], [421, "eig"]], "pinv": [[671, "pinv"]], "matmul": [[665, "matmul"]], "cross_entropy": [[685, "cross-entropy"]], "inv": [[663, "inv"]], "matrix_norm": [[666, "matrix-norm"]], "conv_general_dilated": [[644, "conv-general-dilated"]], "svd": [[675, "svd"]], "roi_align": [[652, "roi-align"]], "set_nestable_mode": [[573, "set-nestable-mode"]], "match_kwargs": [[561, "match-kwargs"]], "set_exception_trace_mode": [[568, "set-exception-trace-mode"]], "stable_divide": [[580, "stable-divide"]], "scatter_flat": [[565, "scatter-flat"]], "unset_queue_timeout": [[597, "unset-queue-timeout"]], "set_queue_timeout": [[575, "set-queue-timeout"]], "set_shape_array_mode": [[576, "set-shape-array-mode"]], "isin": [[558, "isin"]], "supports_inplace_updates": [[583, "supports-inplace-updates"]], "unset_precise_mode": [[596, "unset-precise-mode"]], "multiprocessing": [[562, "multiprocessing"]], "strides": [[582, "strides"]], "set_array_mode": [[567, "set-array-mode"]], "to_scalar": [[588, "to-scalar"]], "to_list": [[585, "to-list"]], "inplace_variables_supported": [[552, "inplace-variables-supported"]], "is_ivy_array": [[554, "is-ivy-array"]], "is_ivy_container": [[555, "is-ivy-container"]], "num_arrays_in_memory": [[563, "num-arrays-in-memory"]], "is_array": [[553, "is-array"]], "isscalar": [[559, "isscalar"]], "set_item": [[570, "set-item"]], "shape": [[579, "shape"]], "set_tmp_dir": [[578, "set-tmp-dir"]], "unset_min_base": [[593, "unset-min-base"]], "unset_array_mode": [[590, "unset-array-mode"]], "to_native_shape": [[586, "to-native-shape"]], "unset_nestable_mode": [[595, "unset-nestable-mode"]], "itemsize": [[560, "itemsize"]], "set_min_denominator": [[572, "set-min-denominator"]], "print_all_arrays_in_memory": [[564, "print-all-arrays-in-memory"]], "set_inplace_mode": [[569, "set-inplace-mode"]], "set_show_func_wrapper_trace_mode": [[577, "set-show-func-wrapper-trace-mode"]], "stable_pow": [[581, "stable-pow"]], "to_ivy_shape": [[584, "to-ivy-shape"]], "unset_exception_trace_mode": [[591, "unset-exception-trace-mode"]], "is_ivy_nested_array": [[556, "is-ivy-nested-array"]], "set_min_base": [[571, "set-min-base"]], "scatter_nd": [[566, "scatter-nd"]], "set_precise_mode": [[574, "set-precise-mode"]], "try_else_none": [[589, "try-else-none"]], "unset_min_denominator": [[594, "unset-min-denominator"]], "to_numpy": [[587, "to-numpy"]], "unset_inplace_mode": [[592, "unset-inplace-mode"]], "is_native_array": [[557, "is-native-array"]], "assert_supports_inplace": [[527, "assert-supports-inplace"]], "cache_fn": [[528, "cache-fn"]], "clip_matrix_norm": [[529, "clip-matrix-norm"]], "nanprod": [[520, "nanprod"]], "inplace_decrement": [[549, "inplace-decrement"]], "has_nans": [[547, "has-nans"]], "optional_get_element": [[522, "optional-get-element"]], "igamma": [[515, "igamma"]], "histogram": [[514, "histogram"]], "einops_repeat": [[536, "einops-repeat"]], "native_sparse_array": [[507, "native-sparse-array"]], "is_native_sparse_array": [[506, "is-native-sparse-array"]], "cov": [[511, "cov"]], "native_sparse_array_to_indices_values_and_shape": [[508, "native-sparse-array-to-indices-values-and-shape"]], "all_equal": [[523, "all-equal"]], "gather_nd": [[542, "gather-nd"]], "arg_info": [[524, "arg-info"]], "default": [[533, "default"]], "median": [[516, "median"]], "current_backend_str": [[532, "current-backend-str"]], "fourier_encode": [[538, "fourier-encode"]], "einops_rearrange": [[534, "einops-rearrange"]], "bincount": [[509, "bincount"]], "get_all_arrays_in_memory": [[543, "get-all-arrays-in-memory"]], "function_unsupported_devices_and_dtypes": [[540, "function-unsupported-devices-and-dtypes"]], "inplace_arrays_supported": [[548, "inplace-arrays-supported"]], "get_referrers_recursive": [[546, "get-referrers-recursive"]], "nanmin": [[519, "nanmin"]], "get_item": [[544, "get-item"]], "arg_names": [[525, "arg-names"]], "function_supported_devices_and_dtypes": [[539, "function-supported-devices-and-dtypes"]], "array_equal": [[526, "array-equal"]], "clip_vector_norm": [[530, "clip-vector-norm"]], "gather": [[541, "gather"]], "cummin": [[513, "cummin"]], "quantile": [[521, "quantile"]], "inplace_increment": [[550, "inplace-increment"]], "get_num_dims": [[545, "get-num-dims"]], "container_types": [[531, "container-types"]], "nanmean": [[517, "nanmean"]], "einops_reduce": [[535, "einops-reduce"]], "nanmedian": [[518, "nanmedian"]], "cummax": [[512, "cummax"]], "inplace_update": [[551, "inplace-update"]], "corrcoef": [[510, "corrcoef"]], "exists": [[537, "exists"]], "soft_thresholding": [[481, "soft-thresholding"]], "dsplit": [[460, "dsplit"]], "take": [[482, "take"]], "invert_permutation": [[503, "invert-permutation"]], "heaviside": [[468, "heaviside"]], "bernoulli": [[497, "bernoulli"]], "fliplr": [[465, "fliplr"]], "fill_diagonal": [[463, "fill-diagonal"]], "top_k": [[484, "top-k"]], "partial_fold": [[475, "partial-fold"]], "group_norm": [[491, "group-norm"]], "flatten": [[464, "flatten"]], "partial_tensor_to_vec": [[476, "partial-tensor-to-vec"]], "l2_normalize": [[494, "l2-normalize"]], "is_ivy_sparse_array": [[505, "is-ivy-sparse-array"]], "dirichlet": [[499, "dirichlet"]], "unfold": [[486, "unfold"]], "flipud": [[466, "flipud"]], "vsplit": [[488, "vsplit"]], "partial_unfold": [[477, "partial-unfold"]], "pad": [[474, "pad"]], "take_along_axis": [[483, "take-along-axis"]], "batch_norm": [[490, "batch-norm"]], "hstack": [[470, "hstack"]], "lp_normalize": [[496, "lp-normalize"]], "fold": [[467, "fold"]], "expand": [[462, "expand"]], "hsplit": [[469, "hsplit"]], "partial_vec_to_tensor": [[478, "partial-vec-to-tensor"]], "i0": [[471, "i0"]], "trim_zeros": [[485, "trim-zeros"]], "put_along_axis": [[479, "put-along-axis"]], "beta": [[498, "beta"]], "unique_consecutive": [[487, "unique-consecutive"]], "matricize": [[472, "matricize"]], "dstack": [[461, "dstack"]], "moveaxis": [[473, "moveaxis"]], "rot90": [[480, "rot90"]], "poisson": [[501, "poisson"]], "l1_normalize": [[493, "l1-normalize"]], "vstack": [[489, "vstack"]], "instance_norm": [[492, "instance-norm"]], "gamma": [[500, "gamma"]], "unravel_index": [[502, "unravel-index"]], "local_response_norm": [[495, "local-response-norm"]], "lexsort": [[504, "lexsort"]], "Data type": [[618, "data-type"], [363, "module-ivy.functional.ivy.experimental.data_type"], [49, "module-ivy.data_classes.array.data_type"], [72, "module-ivy.data_classes.container.data_type"]], "Experimental": [[621, "experimental"], [52, "module-ivy.data_classes.array.experimental"], [75, "module-ivy.data_classes.container.experimental"]], "conv1d_transpose": [[639, "conv1d-transpose"]], "unset_tmp_dir": [[600, "unset-tmp-dir"]], "adam_step": [[603, "adam-step"]], "adam_update": [[604, "adam-update"]], "lamb_update": [[609, "lamb-update"]], "lars_update": [[610, "lars-update"]], "optimizer_update": [[611, "optimizer-update"]], "Set": [[633, "set"], [377, "module-ivy.functional.ivy.experimental.set"], [86, "module-ivy.data_classes.container.set"], [63, "module-ivy.data_classes.array.set"]], "conv1d": [[638, "conv1d"]], "Nest": [[629, "nest"], [373, "module-ivy.functional.ivy.experimental.nest"]], "Utility": [[636, "utility"], [381, "utility"], [89, "module-ivy.data_classes.container.utility"], [66, "module-ivy.data_classes.array.utility"]], "Device": [[619, "device"], [364, "module-ivy.functional.ivy.experimental.device"], [73, "module-ivy.data_classes.container.device"], [50, "module-ivy.data_classes.array.device"]], "Statistical": [[635, "statistical"], [380, "statistical"], [88, "module-ivy.data_classes.container.statistical"], [65, "module-ivy.data_classes.array.statistical"]], "conv2d": [[640, "conv2d"]], "vmap": [[602, "vmap"]], "Linear algebra": [[625, "linear-algebra"], [369, "linear-algebra"], [80, "module-ivy.data_classes.container.linear_algebra"], [57, "module-ivy.data_classes.array.linear_algebra"]], "execute_with_gradients": [[605, "execute-with-gradients"]], "value_is_nan": [[601, "value-is-nan"]], "Meta": [[628, "meta"], [372, "module-ivy.functional.ivy.experimental.meta"]], "conv2d_transpose": [[641, "conv2d-transpose"]], "Manipulation": [[627, "manipulation"], [371, "manipulation"], [82, "module-ivy.data_classes.container.manipulation"], [59, "module-ivy.data_classes.array.manipulation"]], "Control flow ops": [[616, "control-flow-ops"]], "Constants": [[615, "module-ivy.functional.ivy.constants"], [361, "module-ivy.functional.ivy.experimental.constants"]], "Searching": [[632, "searching"], [376, "searching"], [85, "module-ivy.data_classes.container.searching"], [62, "module-ivy.data_classes.array.searching"]], "Sorting": [[634, "sorting"], [378, "sorting"], [64, "module-ivy.data_classes.array.sorting"], [87, "module-ivy.data_classes.container.sorting"]], "Random": [[631, "random"], [375, "random"], [61, "module-ivy.data_classes.array.random"], [84, "module-ivy.data_classes.container.random"]], "General": [[622, "general"], [366, "general"], [53, "module-ivy.data_classes.array.general"], [76, "module-ivy.data_classes.container.general"]], "unset_show_func_wrapper_trace_mode": [[599, "unset-show-func-wrapper-trace-mode"]], "unset_shape_array_mode": [[598, "unset-shape-array-mode"]], "conv": [[637, "conv"]], "conv3d": [[642, "conv3d"]], "grad": [[606, "grad"]], "conv3d_transpose": [[643, "conv3d-transpose"]], "value_and_grad": [[613, "value-and-grad"]], "stop_gradient": [[612, "stop-gradient"]], "Creation": [[617, "creation"], [362, "creation"], [48, "module-ivy.data_classes.array.creation"], [71, "module-ivy.data_classes.container.creation"]], "jac": [[608, "jac"]], "gradient_descent_update": [[607, "gradient-descent-update"]], "choose": [[457, "choose"]], "kronecker": [[429, "kronecker"]], "matrix_exp": [[431, "matrix-exp"]], "kron": [[428, "kron"]], "sliding_window": [[414, "sliding-window"]], "associative_scan": [[451, "associative-scan"]], "atleast_2d": [[453, "atleast-2d"]], "atleast_1d": [[452, "atleast-1d"]], "initialize_tucker": [[426, "initialize-tucker"]], "eigh_tridiagonal": [[422, "eigh-tridiagonal"]], "tt_matrix_to_tensor": [[440, "tt-matrix-to-tensor"]], "column_stack": [[458, "column-stack"]], "dot": [[420, "dot"]], "tensor_train": [[438, "tensor-train"]], "hinge_embedding_loss": [[442, "hinge-embedding-loss"]], "mode_dot": [[432, "mode-dot"]], "cond": [[418, "cond"]], "diagflat": [[419, "diagflat"]], "svd_flip": [[437, "svd-flip"]], "huber_loss": [[443, "huber-loss"]], "as_strided": [[450, "as-strided"]], "truncated_svd": [[439, "truncated-svd"]], "kl_div": [[444, "kl-div"]], "eigvals": [[423, "eigvals"]], "make_svd_non_negative": [[430, "make-svd-non-negative"]], "l1_loss": [[445, "l1-loss"]], "concat_from_sequence": [[459, "concat-from-sequence"]], "poisson_nll_loss": [[447, "poisson-nll-loss"]], "stft": [[415, "stft"]], "batched_outer": [[417, "batched-outer"]], "partial_tucker": [[435, "partial-tucker"]], "atleast_3d": [[454, "atleast-3d"]], "broadcast_shapes": [[455, "broadcast-shapes"]], "multi_mode_dot": [[434, "multi-mode-dot"]], "khatri_rao": [[427, "khatri-rao"]], "higher_order_moment": [[425, "higher-order-moment"]], "tucker": [[441, "tucker"]], "log_poisson_loss": [[446, "log-poisson-loss"]], "multi_dot": [[433, "multi-dot"]], "solve_triangular": [[436, "solve-triangular"]], "soft_margin_loss": [[449, "soft-margin-loss"]], "check_scalar": [[456, "check-scalar"]], "general_inner_product": [[424, "general-inner-product"]], "smooth_l1_loss": [[448, "smooth-l1-loss"]], "adjoint": [[416, "adjoint"]], "Sparse array": [[379, "sparse-array"]], "rfftn": [[412, "rfftn"]], "fft2": [[396, "fft2"]], "dropout3d": [[393, "dropout3d"]], "embedding": [[394, "embedding"]], "adaptive_max_pool2d": [[384, "adaptive-max-pool2d"]], "rnn": [[413, "rnn"]], "dct": [[389, "dct"]], "ifft": [[400, "ifft"]], "avg_pool1d": [[386, "avg-pool1d"]], "dropout2d": [[392, "dropout2d"]], "get_interpolate_kernel": [[398, "get-interpolate-kernel"]], "max_unpool1d": [[407, "max-unpool1d"]], "rfft": [[411, "rfft"]], "generate_einsum_equation": [[397, "generate-einsum-equation"]], "pool": [[409, "pool"]], "reduce_window": [[410, "reduce-window"]], "avg_pool2d": [[387, "avg-pool2d"]], "idct": [[399, "idct"]], "dft": [[390, "dft"]], "adaptive_avg_pool2d": [[383, "adaptive-avg-pool2d"]], "interpolate": [[403, "interpolate"]], "fft": [[395, "fft"]], "nearest_interpolate": [[408, "nearest-interpolate"]], "ifftn": [[401, "ifftn"]], "interp": [[402, "interp"]], "avg_pool3d": [[388, "avg-pool3d"]], "area_interpolate": [[385, "area-interpolate"]], "max_pool2d": [[405, "max-pool2d"]], "max_pool1d": [[404, "max-pool1d"]], "max_pool3d": [[406, "max-pool3d"]], "dropout1d": [[391, "dropout1d"]], "adaptive_avg_pool1d": [[382, "adaptive-avg-pool1d"]], "reduce": [[356, "reduce"]], "signbit": [[351, "signbit"]], "amin": [[330, "amin"]], "float_power": [[339, "float-power"]], "bind_custom_gradient_function": [[357, "bind-custom-gradient-function"]], "sinc": [[352, "sinc"]], "tril_indices": [[322, "tril-indices"]], "binarizer": [[331, "binarizer"]], "erfc": [[337, "erfc"]], "lerp": [[346, "lerp"]], "modf": [[348, "modf"]], "vorbis_window": [[327, "vorbis-window"]], "digamma": [[336, "digamma"]], "frexp": [[341, "frexp"]], "unsorted_segment_mean": [[324, "unsorted-segment-mean"]], "isclose": [[344, "isclose"]], "allclose": [[328, "allclose"]], "vjp": [[359, "vjp"]], "hypot": [[343, "hypot"]], "amax": [[329, "amax"]], "gradient": [[342, "gradient"]], "copysign": [[333, "copysign"]], "fmax": [[340, "fmax"]], "jvp": [[358, "jvp"]], "unsorted_segment_sum": [[326, "unsorted-segment-sum"]], "lgamma": [[347, "lgamma"]], "unsorted_segment_min": [[325, "unsorted-segment-min"]], "zeta": [[355, "zeta"]], "fix": [[338, "fix"]], "conj": [[332, "conj"]], "nextafter": [[350, "nextafter"]], "ldexp": [[345, "ldexp"]], "xlogy": [[354, "xlogy"]], "count_nonzero": [[334, "count-nonzero"]], "sparsify_tensor": [[353, "sparsify-tensor"]], "trilu": [[323, "trilu"]], "diff": [[335, "diff"]], "nansum": [[349, "nansum"]], "reciprocal": [[276, "reciprocal"]], "logit": [[294, "logit"]], "kaiser_window": [[312, "kaiser-window"]], "random_tt": [[320, "random-tt"]], "prelu": [[296, "prelu"]], "selu": [[299, "selu"]], "polyval": [[316, "polyval"]], "threshold": [[304, "threshold"]], "remainder": [[277, "remainder"]], "round": [[278, "round"]], "mel_weight_matrix": [[313, "mel-weight-matrix"]], "celu": [[290, "celu"]], "thresholded_relu": [[305, "thresholded-relu"]], "eye_like": [[307, "eye-like"]], "trunc": [[288, "trunc"]], "softshrink": [[301, "softshrink"]], "subtract": [[284, "subtract"]], "sqrt": [[282, "sqrt"]], "kaiser_bessel_derived_window": [[311, "kaiser-bessel-derived-window"]], "random_tr": [[319, "random-tr"]], "tanh": [[286, "tanh"]], "relu6": [[297, "relu6"]], "trapz": [[287, "trapz"]], "silu": [[300, "silu"]], "scaled_tanh": [[298, "scaled-tanh"]], "sin": [[280, "sin"]], "tan": [[285, "tan"]], "random_parafac2": [[318, "random-parafac2"]], "stanh": [[302, "stanh"]], "tanhshrink": [[303, "tanhshrink"]], "elu": [[291, "elu"]], "indices": [[310, "indices"]], "ndindex": [[315, "ndindex"]], "square": [[283, "square"]], "hardtanh": [[293, "hardtanh"]], "blackman_window": [[306, "blackman-window"]], "random_cp": [[317, "random-cp"]], "random_tucker": [[321, "random-tucker"]], "hardshrink": [[292, "hardshrink"]], "trunc_divide": [[289, "trunc-divide"]], "sign": [[279, "sign"]], "hann_window": [[309, "hann-window"]], "hamming_window": [[308, "hamming-window"]], "ndenumerate": [[314, "ndenumerate"]], "sinh": [[281, "sinh"]], "logsigmoid": [[295, "logsigmoid"]], "log10": [[257, "log10"]], "log": [[256, "log"]], "isreal": [[252, "isreal"]], "exp": [[238, "exp"]], "maximum": [[266, "maximum"]], "multiply": [[268, "multiply"]], "logaddexp2": [[261, "logaddexp2"]], "floor": [[241, "floor"]], "logical_not": [[263, "logical-not"]], "logical_or": [[264, "logical-or"]], "erf": [[237, "erf"]], "negative": [[270, "negative"]], "logical_xor": [[265, "logical-xor"]], "lcm": [[253, "lcm"]], "positive": [[272, "positive"]], "floor_divide": [[242, "floor-divide"]], "fmin": [[243, "fmin"]], "cosh": [[233, "cosh"]], "less_equal": [[255, "less-equal"]], "logical_and": [[262, "logical-and"]], "exp2": [[239, "exp2"]], "greater_equal": [[247, "greater-equal"]], "less": [[254, "less"]], "log2": [[259, "log2"]], "real": [[275, "real"]], "bitwise_xor": [[230, "bitwise-xor"]], "rad2deg": [[274, "rad2deg"]], "gcd": [[245, "gcd"]], "expm1": [[240, "expm1"]], "deg2rad": [[234, "deg2rad"]], "fmod": [[244, "fmod"]], "ceil": [[231, "ceil"]], "isinf": [[250, "isinf"]], "log1p": [[258, "log1p"]], "logaddexp": [[260, "logaddexp"]], "not_equal": [[271, "not-equal"]], "isfinite": [[249, "isfinite"]], "imag": [[248, "imag"]], "equal": [[236, "equal"]], "cos": [[232, "cos"]], "divide": [[235, "divide"]], "nan_to_num": [[269, "nan-to-num"]], "minimum": [[267, "minimum"]], "isnan": [[251, "isnan"]], "pow": [[273, "pow"]], "greater": [[246, "greater"]], "default_device": [[191, "default-device"]], "total_mem_on_dev": [[210, "total-mem-on-dev"]], "asin": [[220, "asin"]], "angle": [[219, "angle"]], "bitwise_and": [[225, "bitwise-and"]], "atanh": [[224, "atanh"]], "used_mem_on_dev": [[214, "used-mem-on-dev"]], "atan2": [[223, "atan2"]], "unset_default_device": [[212, "unset-default-device"]], "as_native_dev": [[189, "as-native-dev"]], "acos": [[216, "acos"]], "split_factor": [[207, "split-factor"]], "unset_default_float_dtype": [[184, "unset-default-float-dtype"]], "function_unsupported_devices": [[195, "function-unsupported-devices"]], "num_ivy_arrays_on_dev": [[201, "num-ivy-arrays-on-dev"]], "set_default_device": [[204, "set-default-device"]], "bitwise_left_shift": [[227, "bitwise-left-shift"]], "gpu_is_available": [[197, "gpu-is-available"]], "atan": [[222, "atan"]], "as_ivy_dev": [[188, "as-ivy-dev"]], "unset_soft_device_mode": [[213, "unset-soft-device-mode"]], "bitwise_or": [[228, "bitwise-or"]], "tpu_is_available": [[211, "tpu-is-available"]], "set_split_factor": [[206, "set-split-factor"]], "acosh": [[217, "acosh"]], "split_func_call": [[208, "split-func-call"]], "get_all_ivy_arrays_on_dev": [[196, "get-all-ivy-arrays-on-dev"]], "abs": [[215, "abs"]], "asinh": [[221, "asinh"]], "handle_soft_device_variable": [[198, "handle-soft-device-variable"]], "dev": [[192, "dev"]], "dev_util": [[193, "dev-util"]], "print_all_ivy_arrays_on_dev": [[203, "print-all-ivy-arrays-on-dev"]], "bitwise_invert": [[226, "bitwise-invert"]], "to_device": [[209, "to-device"]], "unset_default_int_dtype": [[185, "unset-default-int-dtype"]], "percent_used_mem_on_dev": [[202, "percent-used-mem-on-dev"]], "bitwise_right_shift": [[229, "bitwise-right-shift"]], "clear_cached_mem_on_dev": [[190, "clear-cached-mem-on-dev"]], "unset_default_uint_dtype": [[186, "unset-default-uint-dtype"]], "function_supported_devices": [[194, "function-supported-devices"]], "valid_dtype": [[187, "valid-dtype"]], "num_cpu_cores": [[199, "num-cpu-cores"]], "set_soft_device_mode": [[205, "set-soft-device-mode"]], "num_gpus": [[200, "num-gpus"]], "add": [[218, "add"]], "Wrapping": [[90, "module-ivy.data_classes.container.wrapping"], [67, "module-ivy.data_classes.array.wrapping"]], "Conversions": [[47, "module-ivy.data_classes.array.conversions"], [70, "module-ivy.data_classes.container.conversions"]], "Image": [[78, "module-ivy.data_classes.container.image"], [55, "module-ivy.data_classes.array.image"]], "3.1: Stable Diffusion": [[37, "3.1:-Stable-Diffusion"]], "Basic Operations with Ivy": [[38, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[38, "Installs-\ud83d\udcbe"], [39, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[38, "Imports-\ud83d\udec3"], [39, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[38, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[38, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[38, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[38, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[38, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[38, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[38, "Set-Backend-Framework"]], "Define Model": [[38, "Define-Model"], [39, "Define-Model"]], "Create Model": [[38, "Create-Model"]], "Create Optimizer": [[38, "Create-Optimizer"]], "Input and Target": [[38, "Input-and-Target"]], "Loss Function": [[38, "Loss-Function"]], "Training Loop": [[38, "Training-Loop"]], "0.0: Unify": [[28, "0.0:-Unify"]], "Transpiling a Tensorflow model to build on top": [[13, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "End-to-End Training Pipeline in Ivy": [[42, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[42, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[42, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[42, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[42, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[42, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[42, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[42, "Plotting-the-training-metrics"]], "Save the trained Model": [[42, "Save-the-trained-Model"]], "ODSC Ivy Demo": [[26, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[26, "Ivy-Backend-Handler"], [17, "Ivy-Backend-Handler"]], "Data Structures": [[26, "Data-Structures"], [17, "Data-Structures"]], "Ivy Functional API": [[26, "Ivy-Functional-API"], [17, "Ivy-Functional-API"]], "Graph Tracer": [[26, "Graph-Tracer"]], "Any function": [[26, "Any-function"], [27, "Any-function"]], "Any library": [[26, "Any-library"], [27, "Any-library"]], "Any model": [[26, "Any-model"], [27, "Any-model"]], "Transpile code": [[20, "Transpile-code"]], "1.0: Lazy vs Eager": [[31, "1.0:-Lazy-vs-Eager"]], "Unify": [[31, "Unify"], [33, "Unify"], [21, "Unify"], [32, "Unify"], [22, "Unify"]], "Compile": [[31, "Compile"], [33, "Compile"], [32, "Compile"]], "Transpile": [[31, "Transpile"], [33, "Transpile"], [21, "Transpile"], [32, "Transpile"], [22, "Transpile"]], "Compilation of a Basic Function": [[39, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[39, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[39, "Function-compilation-\ud83d\udee0"]], "Set backend": [[39, "Set-backend"]], "Sample input": [[39, "Sample-input"]], "Define function to compile": [[39, "Define-function-to-compile"]], "Compile the function": [[39, "Compile-the-function"]], "Check results": [[39, "Check-results"], [39, "id1"]], "Compiling simple neural network \ud83e\udde0": [[39, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[39, "Create-model"]], "Define input": [[39, "Define-input"]], "Compile network": [[39, "Compile-network"]], "Examples and Demos": [[2, "examples-and-demos"], [15, "examples-and-demos"]], "Transpile any library": [[23, "Transpile-any-library"]], "Developing a convolutional network using Ivy": [[14, "Developing-a-convolutional-network-using-Ivy"]], "1.2: As a Decorator": [[33, "1.2:-As-a-Decorator"]], "Transpiling a haiku model to build on top": [[12, "Transpiling-a-haiku-model-to-build-on-top"]], "Lazy vs Eager": [[21, "Lazy-vs-Eager"]], "Trace": [[21, "Trace"], [22, "Trace"]], "Quickstart": [[27, "Quickstart"]], "Get familiar with Ivy": [[27, "Get-familiar-with-Ivy"]], "Functional API": [[27, "Functional-API"]], "Stateful API": [[27, "Stateful-API"]], "Tracing code": [[27, "Tracing-code"]], "HuggingFace Tensorflow DeiT": [[43, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[43, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Tutorials And Examples": [[15, "tutorials-and-examples"]], "Learn the basics": [[15, "learn-the-basics"], [16, "learn-the-basics"]], "Guides": [[15, "guides"], [10, "guides"]], "Accelerating PyTorch models with JAX": [[8, "Accelerating-PyTorch-models-with-JAX"]], "Ivy as a Transpiler Introduction": [[44, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[44, "To-use-the-transpiler:"]], "Transpiler Interface": [[44, "Transpiler-Interface"]], "Telemetry": [[44, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[44, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[44, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[44, "3.-Transpile-Models-\ud83c\udf10"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Installation": [[3, "Installation"], [7, "Installation"]], "Data Preparation": [[3, "Data-Preparation"], [4, "Data-Preparation"], [7, "Data-Preparation"], [5, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Deepmind PerceiverIO on GPU": [[41, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[41, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[41, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[41, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[41, "Run-the-demo..."]], "\u2026with torch backend": [[41, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[41, "....with-tensorflow-backend"]], "\u2026with jax backend": [[41, "...with-jax-backend"]], "\u2026with numpy backend": [[41, "...with-numpy-backend"]], "Trace code": [[19, "Trace-code"]], "1.3: Dynamic vs Static": [[34, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[34, "Dynamic"]], "Static": [[34, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[34, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "1.1: Framework Selection": [[32, "1.1:-Framework-Selection"]], "Transpiling a PyTorch model to build on top": [[11, "Transpiling-a-PyTorch-model-to-build-on-top"]], "0.2: Transpile": [[30, "0.2:-Transpile"]], "Accelerating XGBoost with JAX": [[9, "Accelerating-XGBoost-with-JAX"]], "Imports": [[9, "Imports"], [7, "Imports"], [5, "Imports"]], "Tests": [[9, "Tests"]], "Loading the Data": [[9, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[9, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[9, "JAX-backend"]], "Tensorflow backend": [[9, "Tensorflow-backend"]], "PyTorch backend": [[9, "PyTorch-backend"]], "More exhaustive example": [[9, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[9, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[9, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[9, "Comparison-of-Metrics"]], "Using Ivy ResNet": [[7, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[7, "Prepare-the-set-of-labels"]], "Load the image example \ud83d\uddbc\ufe0f": [[7, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [5, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[7, "Visualise-image"], [5, "Visualise-image"]], "Model Inference ResNet34": [[7, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[7, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[7, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [7, "id1"]], "Model Inference ResNet50": [[7, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[7, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Unify code": [[18, "Unify-code"]], "Write a model using Ivy": [[25, "Write-a-model-using-Ivy"]], "0.1: Compile": [[29, "0.1:-Compile"]], "How to use decorators": [[22, "How-to-use-decorators"]], "Accelerating MMPreTrain models with JAX": [[6, "Accelerating-MMPreTrain-models-with-JAX"]], "Resnet 18": [[45, "Resnet-18"]], "Transpile any model": [[24, "Transpile-any-model"]], "Round up": [[24, "Round-up"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "2.0: Kornia": [[35, "2.0:-Kornia"]], "Write Ivy code": [[17, "Write-Ivy-code"]], "Contents": [[17, "Contents"]], "Installing Ivy": [[17, "Installing-Ivy"]], "Importing Ivy": [[17, "Importing-Ivy"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[40, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[40, "Table-of-Contents"]], "Defining the model": [[40, "Defining-the-model"]], "Model construction": [[40, "Model-construction"]], "Some helper functions": [[40, "Some-helper-functions"]], "Transpiling the model": [[40, "Transpiling-the-model"]], "PyTorch pipeline": [[40, "PyTorch-pipeline"]], "Dataset download": [[40, "Dataset-download"]], "DataLoader": [[40, "DataLoader"]], "Training": [[40, "Training"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "3.0: Perceiver": [[36, "3.0:-Perceiver"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[46, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[46, "module-ivy.data_classes.array.activations"], [47, "module-ivy.data_classes.array.conversions"], [48, "module-ivy.data_classes.array.creation"], [49, "module-ivy.data_classes.array.data_type"], [50, "module-ivy.data_classes.array.device"], [51, "module-ivy.data_classes.array.elementwise"], [52, "module-ivy.data_classes.array.experimental"], [52, "module-ivy.data_classes.array.experimental.activations"], [52, "module-ivy.data_classes.array.experimental.conversions"], [52, "module-ivy.data_classes.array.experimental.creation"], [52, "module-ivy.data_classes.array.experimental.data_type"], [52, "module-ivy.data_classes.array.experimental.device"], [52, "module-ivy.data_classes.array.experimental.elementwise"], [52, "module-ivy.data_classes.array.experimental.general"], [52, "module-ivy.data_classes.array.experimental.gradients"], [52, "module-ivy.data_classes.array.experimental.image"], [52, "module-ivy.data_classes.array.experimental.layers"], [52, "module-ivy.data_classes.array.experimental.linear_algebra"], [52, "module-ivy.data_classes.array.experimental.losses"], [52, "module-ivy.data_classes.array.experimental.manipulation"], [52, "module-ivy.data_classes.array.experimental.norms"], [52, "module-ivy.data_classes.array.experimental.random"], [52, "module-ivy.data_classes.array.experimental.searching"], [52, "module-ivy.data_classes.array.experimental.set"], [52, "module-ivy.data_classes.array.experimental.sorting"], [52, "module-ivy.data_classes.array.experimental.statistical"], [52, "module-ivy.data_classes.array.experimental.utility"], [53, "module-ivy.data_classes.array.general"], [54, "module-ivy.data_classes.array.gradients"], [55, "module-ivy.data_classes.array.image"], [56, "module-ivy.data_classes.array.layers"], [57, "module-ivy.data_classes.array.linear_algebra"], [58, "module-ivy.data_classes.array.losses"], [59, "module-ivy.data_classes.array.manipulation"], [60, "module-ivy.data_classes.array.norms"], [61, "module-ivy.data_classes.array.random"], [62, "module-ivy.data_classes.array.searching"], [63, "module-ivy.data_classes.array.set"], [64, "module-ivy.data_classes.array.sorting"], [65, "module-ivy.data_classes.array.statistical"], [66, "module-ivy.data_classes.array.utility"], [67, "module-ivy.data_classes.array.wrapping"], [68, "module-ivy.data_classes.container.activations"], [69, "module-ivy.data_classes.container.base"], [70, "module-ivy.data_classes.container.conversions"], [71, "module-ivy.data_classes.container.creation"], [72, "module-ivy.data_classes.container.data_type"], [73, "module-ivy.data_classes.container.device"], [74, "module-ivy.data_classes.container.elementwise"], [75, "module-ivy.data_classes.container.experimental"], [75, "module-ivy.data_classes.container.experimental.activations"], [75, "module-ivy.data_classes.container.experimental.conversions"], [75, "module-ivy.data_classes.container.experimental.creation"], [75, "module-ivy.data_classes.container.experimental.data_type"], [75, "module-ivy.data_classes.container.experimental.device"], [75, "module-ivy.data_classes.container.experimental.elementwise"], [75, "module-ivy.data_classes.container.experimental.general"], [75, "module-ivy.data_classes.container.experimental.gradients"], [75, "module-ivy.data_classes.container.experimental.image"], [75, "module-ivy.data_classes.container.experimental.layers"], [75, "module-ivy.data_classes.container.experimental.linear_algebra"], [75, "module-ivy.data_classes.container.experimental.losses"], [75, "module-ivy.data_classes.container.experimental.manipulation"], [75, "module-ivy.data_classes.container.experimental.norms"], [75, "module-ivy.data_classes.container.experimental.random"], [75, "module-ivy.data_classes.container.experimental.searching"], [75, "module-ivy.data_classes.container.experimental.set"], [75, "module-ivy.data_classes.container.experimental.sorting"], [75, "module-ivy.data_classes.container.experimental.statistical"], [75, "module-ivy.data_classes.container.experimental.utility"], [76, "module-ivy.data_classes.container.general"], [77, "module-ivy.data_classes.container.gradients"], [78, "module-ivy.data_classes.container.image"], [79, "module-ivy.data_classes.container.layers"], [80, "module-ivy.data_classes.container.linear_algebra"], [81, "module-ivy.data_classes.container.losses"], [82, "module-ivy.data_classes.container.manipulation"], [83, "module-ivy.data_classes.container.norms"], [84, "module-ivy.data_classes.container.random"], [85, "module-ivy.data_classes.container.searching"], [86, "module-ivy.data_classes.container.set"], [87, "module-ivy.data_classes.container.sorting"], [88, "module-ivy.data_classes.container.statistical"], [89, "module-ivy.data_classes.container.utility"], [90, "module-ivy.data_classes.container.wrapping"], [91, "module-ivy.data_classes.factorized_tensor.base"], [92, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [93, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [94, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [96, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [97, "module-ivy.data_classes.array.array"], [98, "module-ivy.data_classes.container.container"], [100, "module-ivy.data_classes.nested_array.nested_array"], [101, "module-ivy.data_classes.nested_array.base"], [102, "module-ivy.data_classes.nested_array.elementwise"], [360, "module-ivy.functional.ivy.experimental.activations"], [361, "module-ivy.functional.ivy.experimental.constants"], [362, "module-ivy.functional.ivy.experimental.creation"], [363, "module-ivy.functional.ivy.experimental.data_type"], [364, "module-ivy.functional.ivy.experimental.device"], [365, "module-ivy.functional.ivy.experimental.elementwise"], [366, "module-ivy.functional.ivy.experimental.general"], [367, "module-ivy.functional.ivy.experimental.gradients"], [368, "module-ivy.functional.ivy.experimental.layers"], [369, "module-ivy.functional.ivy.experimental.linear_algebra"], [370, "module-ivy.functional.ivy.experimental.losses"], [371, "module-ivy.functional.ivy.experimental.manipulation"], [372, "module-ivy.functional.ivy.experimental.meta"], [373, "module-ivy.functional.ivy.experimental.nest"], [374, "module-ivy.functional.ivy.experimental.norms"], [375, "module-ivy.functional.ivy.experimental.random"], [376, "module-ivy.functional.ivy.experimental.searching"], [377, "module-ivy.functional.ivy.experimental.set"], [378, "module-ivy.functional.ivy.experimental.sorting"], [379, "module-ivy.functional.ivy.experimental.sparse_array"], [380, "module-ivy.functional.ivy.experimental.statistical"], [381, "module-ivy.functional.ivy.experimental.utility"], [614, "module-ivy.functional.ivy.activations"], [615, "module-ivy.functional.ivy.constants"], [616, "module-ivy.functional.ivy.control_flow_ops"], [617, "module-ivy.functional.ivy.creation"], [618, "module-ivy.functional.ivy.data_type"], [619, "module-ivy.functional.ivy.device"], [620, "module-ivy.functional.ivy.elementwise"], [621, "module-ivy.functional.ivy.experimental"], [622, "module-ivy.functional.ivy.general"], [623, "module-ivy.functional.ivy.gradients"], [624, "module-ivy.functional.ivy.layers"], [625, "module-ivy.functional.ivy.linear_algebra"], [626, "module-ivy.functional.ivy.losses"], [627, "module-ivy.functional.ivy.manipulation"], [628, "module-ivy.functional.ivy.meta"], [629, "module-ivy.functional.ivy.nest"], [630, "module-ivy.functional.ivy.norms"], [631, "module-ivy.functional.ivy.random"], [632, "module-ivy.functional.ivy.searching"], [633, "module-ivy.functional.ivy.set"], [634, "module-ivy.functional.ivy.sorting"], [635, "module-ivy.functional.ivy.statistical"], [636, "module-ivy.functional.ivy.utility"], [759, "module-ivy_tests.test_ivy.helpers.assertions"], [760, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [761, "module-ivy_tests.test_ivy.helpers.function_testing"], [762, "module-ivy_tests.test_ivy.helpers.globals"], [763, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [764, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [765, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [768, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [769, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [770, "module-ivy_tests.test_ivy.helpers.structs"], [771, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [772, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [776, "module-ivy.stateful.activations"], [777, "module-ivy.stateful.converters"], [778, "module-ivy.stateful.helpers"], [779, "module-ivy.stateful.initializers"], [780, "module-ivy.stateful.layers"], [781, "module-ivy.stateful.losses"], [782, "module-ivy.stateful.module"], [783, "module-ivy.stateful.norms"], [784, "module-ivy.stateful.optimizers"], [785, "module-ivy.stateful.sequential"], [786, "module-ivy.utils.assertions"], [787, "module-ivy.utils.backend"], [788, "module-ivy.utils.backend.ast_helpers"], [789, "module-ivy.utils.backend.handler"], [790, "module-ivy.utils.backend.sub_backend_handler"], [791, "module-ivy.utils.binaries"], [792, "module-ivy.utils.dynamic_import"], [793, "module-ivy.utils.einsum_parser"], [794, "module-ivy.utils.einsum_path_helpers"], [795, "module-ivy.utils.exceptions"], [796, "module-ivy.utils.inspection"], [797, "module-ivy.utils.logging"], [798, "module-ivy.utils.profiler"], [799, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[46, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[47, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[47, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[48, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[48, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[49, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[49, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[50, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[50, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[50, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[50, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[50, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[51, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[51, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[52, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[52, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[52, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[52, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[52, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[52, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[52, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[52, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[52, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[52, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[52, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[52, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[52, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[52, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[52, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[52, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[52, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[52, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[52, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[52, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[52, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[52, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[52, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[52, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[52, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[52, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[52, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[52, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[52, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[52, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[52, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[52, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[52, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[52, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[52, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[52, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[52, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[52, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[52, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[52, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[52, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[52, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[52, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[52, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[52, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[52, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[52, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[52, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[52, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[52, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[52, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[52, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[52, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[52, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[52, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[52, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[53, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[53, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[54, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[54, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[55, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[55, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[55, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[56, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[56, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[57, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[57, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[58, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[58, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[58, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[58, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[58, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[58, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[59, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[59, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[60, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[60, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[60, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[60, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[61, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[61, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[61, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[61, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[61, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[61, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[61, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[61, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[62, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[62, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[63, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[63, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[63, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[63, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[63, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[63, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[63, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[64, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[64, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[65, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[65, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[66, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[66, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[66, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[66, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[66, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[67, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[67, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[67, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[68, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[68, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[69, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[69, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[69, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[69, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[69, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[69, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[69, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[69, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[70, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[70, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[71, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[71, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[72, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[72, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[73, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[73, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[73, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[73, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[73, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[73, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[73, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[74, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[74, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[75, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[75, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[75, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[75, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[75, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[75, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[75, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[75, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[75, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[75, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[75, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[75, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[75, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[75, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[75, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[75, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[75, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[75, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[75, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[75, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[75, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[75, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[75, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[75, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[75, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[75, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[75, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[75, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[75, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[75, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[75, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[75, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[75, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[75, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[75, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[75, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[75, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[75, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[75, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[75, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[75, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[75, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[75, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[75, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[75, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[75, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[75, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[75, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[75, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[75, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[75, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[75, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[75, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[75, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[75, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[75, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[75, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[76, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[76, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[77, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[77, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[78, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[78, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[78, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[79, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[79, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[80, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[80, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[81, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[81, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[82, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[82, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[83, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[83, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[83, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[83, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[84, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[84, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[84, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[85, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[85, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[86, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[86, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[86, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[86, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[86, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[86, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[86, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[86, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[86, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[86, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[86, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[87, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[87, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[88, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[88, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[89, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[89, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[90, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[90, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[90, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[91, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[91, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[92, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[92, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[93, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[93, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[94, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[94, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[95, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[96, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[96, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[97, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[97, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[97, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[97, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[98, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[98, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[98, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[100, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[100, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[100, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[100, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[100, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[101, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[101, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[102, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[102, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[102, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[102, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[105, "ivy.gelu"], [614, "ivy.gelu"]], "gelu() (ivy.array method)": [[105, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[105, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[106, "ivy.hardswish"], [614, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[106, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[106, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[107, "ivy.leaky_relu"], [614, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[107, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[107, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[108, "ivy.log_softmax"], [614, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[108, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[108, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[109, "ivy.mish"], [614, "ivy.mish"]], "mish() (ivy.array method)": [[109, "ivy.Array.mish"]], "mish() (ivy.container method)": [[109, "ivy.Container.mish"]], "relu() (in module ivy)": [[110, "ivy.relu"], [614, "ivy.relu"]], "relu() (ivy.array method)": [[110, "ivy.Array.relu"]], "relu() (ivy.container method)": [[110, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[111, "ivy.sigmoid"], [614, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[111, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[111, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[112, "ivy.softmax"], [614, "ivy.softmax"]], "softmax() (ivy.array method)": [[112, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[112, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[113, "ivy.softplus"], [614, "ivy.softplus"]], "softplus() (ivy.array method)": [[113, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[113, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[114, "ivy.softsign"], [614, "ivy.softsign"]], "cmp_is() (in module ivy)": [[115, "ivy.cmp_is"], [616, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[116, "ivy.cmp_isnot"], [616, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[117, "ivy.for_loop"], [616, "ivy.for_loop"]], "if_else() (in module ivy)": [[118, "ivy.if_else"], [616, "ivy.if_else"]], "try_except() (in module ivy)": [[119, "ivy.try_except"], [616, "ivy.try_except"]], "while_loop() (in module ivy)": [[120, "ivy.while_loop"], [616, "ivy.while_loop"]], "arange() (in module ivy)": [[121, "ivy.arange"], [617, "ivy.arange"]], "array() (in module ivy)": [[122, "ivy.array"], [617, "ivy.array"]], "asarray() (in module ivy)": [[123, "ivy.asarray"], [617, "ivy.asarray"]], "asarray() (ivy.array method)": [[123, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[123, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[124, "ivy.copy_array"], [617, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[124, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[124, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[125, "ivy.empty"], [617, "ivy.empty"]], "empty_like() (in module ivy)": [[126, "ivy.empty_like"], [617, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[126, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[126, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[127, "ivy.eye"], [617, "ivy.eye"]], "from_dlpack() (in module ivy)": [[128, "ivy.from_dlpack"], [617, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[128, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[128, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[129, "ivy.frombuffer"], [617, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[129, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[130, "ivy.full"], [617, "ivy.full"]], "full_like() (in module ivy)": [[131, "ivy.full_like"], [617, "ivy.full_like"]], "full_like() (ivy.array method)": [[131, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[131, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[132, "ivy.linspace"], [617, "ivy.linspace"]], "linspace() (ivy.array method)": [[132, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[132, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[133, "ivy.logspace"], [617, "ivy.logspace"]], "logspace() (ivy.array method)": [[133, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[133, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[134, "ivy.meshgrid"], [617, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[134, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[134, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[135, "ivy.native_array"], [617, "ivy.native_array"]], "native_array() (ivy.array method)": [[135, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[135, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[136, "ivy.one_hot"], [617, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[136, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[136, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[137, "ivy.ones"], [617, "ivy.ones"]], "ones_like() (in module ivy)": [[138, "ivy.ones_like"], [617, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[138, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[138, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[139, "ivy.to_dlpack"], [617, "ivy.to_dlpack"]], "tril() (in module ivy)": [[140, "ivy.tril"], [617, "ivy.tril"]], "tril() (ivy.array method)": [[140, "ivy.Array.tril"]], "tril() (ivy.container method)": [[140, "ivy.Container.tril"]], "triu() (in module ivy)": [[141, "ivy.triu"], [617, "ivy.triu"]], "triu() (ivy.array method)": [[141, "ivy.Array.triu"]], "triu() (ivy.container method)": [[141, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[142, "ivy.triu_indices"], [617, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[142, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[143, "ivy.zeros"], [617, "ivy.zeros"]], "zeros_like() (in module ivy)": [[144, "ivy.zeros_like"], [617, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[144, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[144, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[145, "ivy.as_ivy_dtype"], [618, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[146, "ivy.as_native_dtype"], [618, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[147, "ivy.astype"], [618, "ivy.astype"]], "astype() (ivy.array method)": [[147, "ivy.Array.astype"]], "astype() (ivy.container method)": [[147, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[148, "ivy.broadcast_arrays"], [618, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[148, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[148, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[149, "ivy.broadcast_to"], [618, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[149, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[149, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[150, "ivy.can_cast"], [618, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[150, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[150, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[151, "ivy.check_float"], [618, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[152, "ivy.closest_valid_dtype"], [618, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[153, "ivy.default_complex_dtype"], [618, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[154, "ivy.default_dtype"], [618, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[155, "ivy.default_float_dtype"], [618, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[156, "ivy.default_int_dtype"], [618, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[157, "ivy.default_uint_dtype"], [618, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[158, "ivy.dtype"], [618, "ivy.dtype"]], "dtype() (ivy.array method)": [[158, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[158, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[159, "ivy.dtype_bits"], [618, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[160, "ivy.finfo"], [618, "ivy.finfo"]], "finfo() (ivy.array method)": [[160, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[160, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[161, "ivy.function_supported_dtypes"], [618, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[162, "ivy.function_unsupported_dtypes"], [618, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[163, "ivy.iinfo"], [618, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[163, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[163, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[164, "ivy.infer_default_dtype"], [618, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[165, "ivy.invalid_dtype"], [618, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[166, "ivy.is_bool_dtype"], [618, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[166, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[166, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[167, "ivy.is_complex_dtype"], [618, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[167, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[168, "ivy.is_float_dtype"], [618, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[168, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[168, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[169, "ivy.is_hashable_dtype"], [618, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[170, "ivy.is_int_dtype"], [618, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[170, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[170, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[171, "ivy.is_native_dtype"], [618, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[172, "ivy.is_uint_dtype"], [618, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[172, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[172, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[173, "ivy.promote_types"], [618, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[174, "ivy.promote_types_of_inputs"], [618, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[175, "ivy.result_type"], [618, "ivy.result_type"]], "result_type() (ivy.array method)": [[175, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[175, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[176, "ivy.set_default_complex_dtype"], [618, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[177, "ivy.set_default_dtype"], [618, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[178, "ivy.set_default_float_dtype"], [618, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[179, "ivy.set_default_int_dtype"], [618, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[180, "ivy.set_default_uint_dtype"], [618, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[181, "ivy.type_promote_arrays"], [618, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[182, "ivy.unset_default_complex_dtype"], [618, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[183, "ivy.unset_default_dtype"], [618, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[184, "ivy.unset_default_float_dtype"], [618, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[185, "ivy.unset_default_int_dtype"], [618, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[186, "ivy.unset_default_uint_dtype"], [618, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[187, "ivy.valid_dtype"], [618, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[188, "ivy.as_ivy_dev"], [619, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[189, "ivy.as_native_dev"], [619, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[190, "ivy.clear_cached_mem_on_dev"], [619, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[191, "ivy.default_device"], [619, "ivy.default_device"]], "dev() (in module ivy)": [[192, "ivy.dev"], [619, "ivy.dev"]], "dev() (ivy.array method)": [[192, "ivy.Array.dev"]], "dev() (ivy.container method)": [[192, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[193, "ivy.dev_util"], [619, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[194, "ivy.function_supported_devices"], [619, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[195, "ivy.function_unsupported_devices"], [619, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[196, "ivy.get_all_ivy_arrays_on_dev"], [619, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[197, "ivy.gpu_is_available"], [619, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[198, "ivy.handle_soft_device_variable"], [619, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[199, "ivy.num_cpu_cores"], [619, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[200, "ivy.num_gpus"], [619, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[201, "ivy.num_ivy_arrays_on_dev"], [619, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[202, "ivy.percent_used_mem_on_dev"], [619, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[203, "ivy.print_all_ivy_arrays_on_dev"], [619, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[204, "ivy.set_default_device"], [619, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[205, "ivy.set_soft_device_mode"], [619, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[206, "ivy.set_split_factor"], [619, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[207, "ivy.split_factor"], [619, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[208, "ivy.split_func_call"], [619, "ivy.split_func_call"]], "to_device() (in module ivy)": [[209, "ivy.to_device"], [619, "ivy.to_device"]], "to_device() (ivy.array method)": [[209, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[209, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[210, "ivy.total_mem_on_dev"], [619, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[211, "ivy.tpu_is_available"], [619, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[212, "ivy.unset_default_device"], [619, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[213, "ivy.unset_soft_device_mode"], [619, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[214, "ivy.used_mem_on_dev"], [619, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[215, "ivy.abs"], [620, "ivy.abs"]], "abs() (ivy.array method)": [[215, "ivy.Array.abs"]], "abs() (ivy.container method)": [[215, "ivy.Container.abs"]], "acos() (in module ivy)": [[216, "ivy.acos"], [620, "ivy.acos"]], "acos() (ivy.array method)": [[216, "ivy.Array.acos"]], "acos() (ivy.container method)": [[216, "ivy.Container.acos"]], "acosh() (in module ivy)": [[217, "ivy.acosh"], [620, "ivy.acosh"]], "acosh() (ivy.array method)": [[217, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[217, "ivy.Container.acosh"]], "add() (in module ivy)": [[218, "ivy.add"], [620, "ivy.add"]], "add() (ivy.array method)": [[218, "ivy.Array.add"]], "add() (ivy.container method)": [[218, "ivy.Container.add"]], "angle() (in module ivy)": [[219, "ivy.angle"], [620, "ivy.angle"]], "angle() (ivy.array method)": [[219, "ivy.Array.angle"]], "angle() (ivy.container method)": [[219, "ivy.Container.angle"]], "asin() (in module ivy)": [[220, "ivy.asin"], [620, "ivy.asin"]], "asin() (ivy.array method)": [[220, "ivy.Array.asin"]], "asin() (ivy.container method)": [[220, "ivy.Container.asin"]], "asinh() (in module ivy)": [[221, "ivy.asinh"], [620, "ivy.asinh"]], "asinh() (ivy.array method)": [[221, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[221, "ivy.Container.asinh"]], "atan() (in module ivy)": [[222, "ivy.atan"], [620, "ivy.atan"]], "atan() (ivy.array method)": [[222, "ivy.Array.atan"]], "atan() (ivy.container method)": [[222, "ivy.Container.atan"]], "atan2() (in module ivy)": [[223, "ivy.atan2"], [620, "ivy.atan2"]], "atan2() (ivy.array method)": [[223, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[223, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[224, "ivy.atanh"], [620, "ivy.atanh"]], "atanh() (ivy.array method)": [[224, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[224, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[225, "ivy.bitwise_and"], [620, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[225, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[225, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[226, "ivy.bitwise_invert"], [620, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[226, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[226, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[227, "ivy.bitwise_left_shift"], [620, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[227, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[227, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[228, "ivy.bitwise_or"], [620, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[228, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[228, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[229, "ivy.bitwise_right_shift"], [620, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[229, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[229, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[230, "ivy.bitwise_xor"], [620, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[230, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[230, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[231, "ivy.ceil"], [620, "ivy.ceil"]], "ceil() (ivy.array method)": [[231, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[231, "ivy.Container.ceil"]], "cos() (in module ivy)": [[232, "ivy.cos"], [620, "ivy.cos"]], "cos() (ivy.array method)": [[232, "ivy.Array.cos"]], "cos() (ivy.container method)": [[232, "ivy.Container.cos"]], "cosh() (in module ivy)": [[233, "ivy.cosh"], [620, "ivy.cosh"]], "cosh() (ivy.array method)": [[233, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[233, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[234, "ivy.deg2rad"], [620, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[234, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[234, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[235, "ivy.divide"], [620, "ivy.divide"]], "divide() (ivy.array method)": [[235, "ivy.Array.divide"]], "divide() (ivy.container method)": [[235, "ivy.Container.divide"]], "equal() (in module ivy)": [[236, "ivy.equal"], [620, "ivy.equal"]], "equal() (ivy.array method)": [[236, "ivy.Array.equal"]], "equal() (ivy.container method)": [[236, "ivy.Container.equal"]], "erf() (in module ivy)": [[237, "ivy.erf"], [620, "ivy.erf"]], "erf() (ivy.array method)": [[237, "ivy.Array.erf"]], "erf() (ivy.container method)": [[237, "ivy.Container.erf"]], "exp() (in module ivy)": [[238, "ivy.exp"], [620, "ivy.exp"]], "exp() (ivy.array method)": [[238, "ivy.Array.exp"]], "exp() (ivy.container method)": [[238, "ivy.Container.exp"]], "exp2() (in module ivy)": [[239, "ivy.exp2"], [620, "ivy.exp2"]], "exp2() (ivy.array method)": [[239, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[239, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[240, "ivy.expm1"], [620, "ivy.expm1"]], "expm1() (ivy.array method)": [[240, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[240, "ivy.Container.expm1"]], "floor() (in module ivy)": [[241, "ivy.floor"], [620, "ivy.floor"]], "floor() (ivy.array method)": [[241, "ivy.Array.floor"]], "floor() (ivy.container method)": [[241, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[242, "ivy.floor_divide"], [620, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[242, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[242, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[243, "ivy.fmin"], [620, "ivy.fmin"]], "fmin() (ivy.array method)": [[243, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[243, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[244, "ivy.fmod"], [620, "ivy.fmod"]], "fmod() (ivy.array method)": [[244, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[244, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[245, "ivy.gcd"], [620, "ivy.gcd"]], "gcd() (ivy.array method)": [[245, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[245, "ivy.Container.gcd"]], "greater() (in module ivy)": [[246, "ivy.greater"], [620, "ivy.greater"]], "greater() (ivy.array method)": [[246, "ivy.Array.greater"]], "greater() (ivy.container method)": [[246, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[247, "ivy.greater_equal"], [620, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[247, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[247, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[248, "ivy.imag"], [620, "ivy.imag"]], "imag() (ivy.array method)": [[248, "ivy.Array.imag"]], "imag() (ivy.container method)": [[248, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[249, "ivy.isfinite"], [620, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[249, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[249, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[250, "ivy.isinf"], [620, "ivy.isinf"]], "isinf() (ivy.array method)": [[250, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[250, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[251, "ivy.isnan"], [620, "ivy.isnan"]], "isnan() (ivy.array method)": [[251, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[251, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[252, "ivy.isreal"], [620, "ivy.isreal"]], "isreal() (ivy.array method)": [[252, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[252, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[253, "ivy.lcm"], [620, "ivy.lcm"]], "lcm() (ivy.array method)": [[253, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[253, "ivy.Container.lcm"]], "less() (in module ivy)": [[254, "ivy.less"], [620, "ivy.less"]], "less() (ivy.array method)": [[254, "ivy.Array.less"]], "less() (ivy.container method)": [[254, "ivy.Container.less"]], "less_equal() (in module ivy)": [[255, "ivy.less_equal"], [620, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[255, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[255, "ivy.Container.less_equal"]], "log() (in module ivy)": [[256, "ivy.log"], [620, "ivy.log"]], "log() (ivy.array method)": [[256, "ivy.Array.log"]], "log() (ivy.container method)": [[256, "ivy.Container.log"]], "log10() (in module ivy)": [[257, "ivy.log10"], [620, "ivy.log10"]], "log10() (ivy.array method)": [[257, "ivy.Array.log10"]], "log10() (ivy.container method)": [[257, "ivy.Container.log10"]], "log1p() (in module ivy)": [[258, "ivy.log1p"], [620, "ivy.log1p"]], "log1p() (ivy.array method)": [[258, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[258, "ivy.Container.log1p"]], "log2() (in module ivy)": [[259, "ivy.log2"], [620, "ivy.log2"]], "log2() (ivy.array method)": [[259, "ivy.Array.log2"]], "log2() (ivy.container method)": [[259, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[260, "ivy.logaddexp"], [620, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[260, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[260, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[261, "ivy.logaddexp2"], [620, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[261, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[261, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[262, "ivy.logical_and"], [620, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[262, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[262, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[263, "ivy.logical_not"], [620, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[263, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[263, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[264, "ivy.logical_or"], [620, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[264, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[264, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[265, "ivy.logical_xor"], [620, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[265, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[265, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[266, "ivy.maximum"], [620, "ivy.maximum"]], "maximum() (ivy.array method)": [[266, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[266, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[267, "ivy.minimum"], [620, "ivy.minimum"]], "minimum() (ivy.array method)": [[267, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[267, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[268, "ivy.multiply"], [620, "ivy.multiply"]], "multiply() (ivy.array method)": [[268, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[268, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[269, "ivy.nan_to_num"], [620, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[269, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[269, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[270, "ivy.negative"], [620, "ivy.negative"]], "negative() (ivy.array method)": [[270, "ivy.Array.negative"]], "negative() (ivy.container method)": [[270, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[271, "ivy.not_equal"], [620, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[271, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[271, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[272, "ivy.positive"], [620, "ivy.positive"]], "positive() (ivy.array method)": [[272, "ivy.Array.positive"]], "positive() (ivy.container method)": [[272, "ivy.Container.positive"]], "pow() (in module ivy)": [[273, "ivy.pow"], [620, "ivy.pow"]], "pow() (ivy.array method)": [[273, "ivy.Array.pow"]], "pow() (ivy.container method)": [[273, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[274, "ivy.rad2deg"], [620, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[274, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[274, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[275, "ivy.real"], [620, "ivy.real"]], "real() (ivy.array method)": [[275, "ivy.Array.real"]], "real() (ivy.container method)": [[275, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[276, "ivy.reciprocal"], [620, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[276, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[276, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[277, "ivy.remainder"], [620, "ivy.remainder"]], "remainder() (ivy.array method)": [[277, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[277, "ivy.Container.remainder"]], "round() (in module ivy)": [[278, "ivy.round"], [620, "ivy.round"]], "round() (ivy.array method)": [[278, "ivy.Array.round"]], "round() (ivy.container method)": [[278, "ivy.Container.round"]], "sign() (in module ivy)": [[279, "ivy.sign"], [620, "ivy.sign"]], "sign() (ivy.array method)": [[279, "ivy.Array.sign"]], "sign() (ivy.container method)": [[279, "ivy.Container.sign"]], "sin() (in module ivy)": [[280, "ivy.sin"], [620, "ivy.sin"]], "sin() (ivy.array method)": [[280, "ivy.Array.sin"]], "sin() (ivy.container method)": [[280, "ivy.Container.sin"]], "sinh() (in module ivy)": [[281, "ivy.sinh"], [620, "ivy.sinh"]], "sinh() (ivy.array method)": [[281, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[281, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[282, "ivy.sqrt"], [620, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[282, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[282, "ivy.Container.sqrt"]], "square() (in module ivy)": [[283, "ivy.square"], [620, "ivy.square"]], "square() (ivy.array method)": [[283, "ivy.Array.square"]], "square() (ivy.container method)": [[283, "ivy.Container.square"]], "subtract() (in module ivy)": [[284, "ivy.subtract"], [620, "ivy.subtract"]], "subtract() (ivy.array method)": [[284, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[284, "ivy.Container.subtract"]], "tan() (in module ivy)": [[285, "ivy.tan"], [620, "ivy.tan"]], "tan() (ivy.array method)": [[285, "ivy.Array.tan"]], "tan() (ivy.container method)": [[285, "ivy.Container.tan"]], "tanh() (in module ivy)": [[286, "ivy.tanh"], [620, "ivy.tanh"]], "tanh() (ivy.array method)": [[286, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[286, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[287, "ivy.trapz"], [620, "ivy.trapz"]], "trapz() (ivy.array method)": [[287, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[287, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[288, "ivy.trunc"], [620, "ivy.trunc"]], "trunc() (ivy.array method)": [[288, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[288, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[289, "ivy.trunc_divide"], [620, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[289, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[289, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[290, "ivy.celu"], [360, "ivy.celu"]], "celu() (ivy.array method)": [[290, "ivy.Array.celu"]], "celu() (ivy.container method)": [[290, "ivy.Container.celu"]], "elu() (in module ivy)": [[291, "ivy.elu"], [360, "ivy.elu"]], "elu() (ivy.array method)": [[291, "ivy.Array.elu"]], "elu() (ivy.container method)": [[291, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[292, "ivy.hardshrink"], [360, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[292, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[292, "ivy.Container.hardshrink"]], "hardtanh() (in module ivy)": [[293, "ivy.hardtanh"], [360, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[293, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[293, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[294, "ivy.logit"], [360, "ivy.logit"]], "logit() (ivy.array method)": [[294, "ivy.Array.logit"]], "logit() (ivy.container method)": [[294, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[295, "ivy.logsigmoid"], [360, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[295, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[295, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[296, "ivy.prelu"], [360, "ivy.prelu"]], "prelu() (ivy.array method)": [[296, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[296, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[297, "ivy.relu6"], [360, "ivy.relu6"]], "relu6() (ivy.array method)": [[297, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[297, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[298, "ivy.scaled_tanh"], [360, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[298, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[298, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[299, "ivy.selu"], [360, "ivy.selu"]], "selu() (ivy.array method)": [[299, "ivy.Array.selu"]], "selu() (ivy.container method)": [[299, "ivy.Container.selu"]], "silu() (in module ivy)": [[300, "ivy.silu"], [360, "ivy.silu"]], "silu() (ivy.array method)": [[300, "ivy.Array.silu"]], "silu() (ivy.container method)": [[300, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[301, "ivy.softshrink"], [360, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[301, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[301, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[302, "ivy.stanh"], [360, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[303, "ivy.tanhshrink"], [360, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[303, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[303, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[304, "ivy.threshold"], [360, "ivy.threshold"]], "threshold() (ivy.array method)": [[304, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[304, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[305, "ivy.thresholded_relu"], [360, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[305, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[305, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[306, "ivy.blackman_window"], [362, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[306, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[306, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[307, "ivy.eye_like"], [362, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[307, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[307, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[308, "ivy.hamming_window"], [362, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[308, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[309, "ivy.hann_window"], [362, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[309, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[310, "ivy.indices"], [362, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[311, "ivy.kaiser_bessel_derived_window"], [362, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[311, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[312, "ivy.kaiser_window"], [362, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[312, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[313, "ivy.mel_weight_matrix"], [362, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[313, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[313, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[314, "ivy.ndenumerate"], [362, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[315, "ivy.ndindex"], [362, "ivy.ndindex"]], "polyval() (in module ivy)": [[316, "ivy.polyval"], [362, "ivy.polyval"]], "polyval() (ivy.container method)": [[316, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[317, "ivy.random_cp"], [362, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[318, "ivy.random_parafac2"], [362, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[319, "ivy.random_tr"], [362, "ivy.random_tr"]], "random_tt() (in module ivy)": [[320, "ivy.random_tt"], [362, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[321, "ivy.random_tucker"], [362, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[322, "ivy.tril_indices"], [362, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[322, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[323, "ivy.trilu"], [362, "ivy.trilu"]], "trilu() (ivy.array method)": [[323, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[323, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[324, "ivy.unsorted_segment_mean"], [362, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[324, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[324, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[325, "ivy.unsorted_segment_min"], [362, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[325, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[325, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[326, "ivy.unsorted_segment_sum"], [362, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[326, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[326, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[327, "ivy.vorbis_window"], [362, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[327, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[328, "ivy.allclose"], [365, "ivy.allclose"]], "allclose() (ivy.array method)": [[328, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[328, "ivy.Container.allclose"]], "amax() (in module ivy)": [[329, "ivy.amax"], [365, "ivy.amax"]], "amax() (ivy.array method)": [[329, "ivy.Array.amax"]], "amax() (ivy.container method)": [[329, "ivy.Container.amax"]], "amin() (in module ivy)": [[330, "ivy.amin"], [365, "ivy.amin"]], "amin() (ivy.array method)": [[330, "ivy.Array.amin"]], "amin() (ivy.container method)": [[330, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[331, "ivy.binarizer"], [365, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[331, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[331, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[332, "ivy.conj"], [365, "ivy.conj"]], "conj() (ivy.array method)": [[332, "ivy.Array.conj"]], "conj() (ivy.container method)": [[332, "ivy.Container.conj"]], "copysign() (in module ivy)": [[333, "ivy.copysign"], [365, "ivy.copysign"]], "copysign() (ivy.array method)": [[333, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[333, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[334, "ivy.count_nonzero"], [365, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[334, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[334, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[335, "ivy.diff"], [365, "ivy.diff"]], "diff() (ivy.array method)": [[335, "ivy.Array.diff"]], "diff() (ivy.container method)": [[335, "ivy.Container.diff"]], "digamma() (in module ivy)": [[336, "ivy.digamma"], [365, "ivy.digamma"]], "digamma() (ivy.array method)": [[336, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[336, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[337, "ivy.erfc"], [365, "ivy.erfc"]], "erfc() (ivy.array method)": [[337, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[337, "ivy.Container.erfc"]], "fix() (in module ivy)": [[338, "ivy.fix"], [365, "ivy.fix"]], "fix() (ivy.array method)": [[338, "ivy.Array.fix"]], "fix() (ivy.container method)": [[338, "ivy.Container.fix"]], "float_power() (in module ivy)": [[339, "ivy.float_power"], [365, "ivy.float_power"]], "float_power() (ivy.array method)": [[339, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[339, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[340, "ivy.fmax"], [365, "ivy.fmax"]], "fmax() (ivy.array method)": [[340, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[340, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[341, "ivy.frexp"], [365, "ivy.frexp"]], "frexp() (ivy.array method)": [[341, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[341, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[342, "ivy.gradient"], [365, "ivy.gradient"]], "gradient() (ivy.array method)": [[342, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[342, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[343, "ivy.hypot"], [365, "ivy.hypot"]], "hypot() (ivy.array method)": [[343, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[343, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[344, "ivy.isclose"], [365, "ivy.isclose"]], "isclose() (ivy.array method)": [[344, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[344, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[345, "ivy.ldexp"], [365, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[345, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[345, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[346, "ivy.lerp"], [365, "ivy.lerp"]], "lerp() (ivy.array method)": [[346, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[346, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[347, "ivy.lgamma"], [365, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[347, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[348, "ivy.modf"], [365, "ivy.modf"]], "modf() (ivy.array method)": [[348, "ivy.Array.modf"]], "modf() (ivy.container method)": [[348, "ivy.Container.modf"]], "nansum() (in module ivy)": [[349, "ivy.nansum"], [365, "ivy.nansum"]], "nansum() (ivy.array method)": [[349, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[349, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[350, "ivy.nextafter"], [365, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[350, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[350, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[351, "ivy.signbit"], [365, "ivy.signbit"]], "signbit() (ivy.array method)": [[351, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[351, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[352, "ivy.sinc"], [365, "ivy.sinc"]], "sinc() (ivy.array method)": [[352, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[352, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[353, "ivy.sparsify_tensor"], [365, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[353, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[353, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[354, "ivy.xlogy"], [365, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[354, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[354, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[355, "ivy.zeta"], [365, "ivy.zeta"]], "zeta() (ivy.array method)": [[355, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[355, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[356, "ivy.reduce"], [366, "ivy.reduce"]], "reduce() (ivy.array method)": [[356, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[356, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[357, "ivy.bind_custom_gradient_function"], [367, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[358, "ivy.jvp"], [367, "ivy.jvp"]], "vjp() (in module ivy)": [[359, "ivy.vjp"], [367, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[360, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[361, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[362, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[363, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[364, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[365, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[366, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[367, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[368, "ivy.adaptive_avg_pool1d"], [382, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[368, "ivy.adaptive_avg_pool2d"], [383, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[368, "ivy.adaptive_max_pool2d"], [384, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[368, "ivy.area_interpolate"], [385, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[368, "ivy.avg_pool1d"], [386, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[368, "ivy.avg_pool2d"], [387, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[368, "ivy.avg_pool3d"], [388, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[368, "ivy.dct"], [389, "ivy.dct"]], "dft() (in module ivy)": [[368, "ivy.dft"], [390, "ivy.dft"]], "dropout1d() (in module ivy)": [[368, "ivy.dropout1d"], [391, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[368, "ivy.dropout2d"], [392, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[368, "ivy.dropout3d"], [393, "ivy.dropout3d"]], "embedding() (in module ivy)": [[368, "ivy.embedding"], [394, "ivy.embedding"]], "fft() (in module ivy)": [[368, "ivy.fft"], [395, "ivy.fft"]], "fft2() (in module ivy)": [[368, "ivy.fft2"], [396, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[368, "ivy.generate_einsum_equation"], [397, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[368, "ivy.get_interpolate_kernel"], [398, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[368, "ivy.idct"], [399, "ivy.idct"]], "ifft() (in module ivy)": [[368, "ivy.ifft"], [400, "ivy.ifft"]], "ifftn() (in module ivy)": [[368, "ivy.ifftn"], [401, "ivy.ifftn"]], "interp() (in module ivy)": [[368, "ivy.interp"], [402, "ivy.interp"]], "interpolate() (in module ivy)": [[368, "ivy.interpolate"], [403, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[368, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[368, "ivy.max_pool1d"], [404, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[368, "ivy.max_pool2d"], [405, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[368, "ivy.max_pool3d"], [406, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[368, "ivy.max_unpool1d"], [407, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[368, "ivy.nearest_interpolate"], [408, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[368, "ivy.pool"], [409, "ivy.pool"]], "reduce_window() (in module ivy)": [[368, "ivy.reduce_window"], [410, "ivy.reduce_window"]], "rfft() (in module ivy)": [[368, "ivy.rfft"], [411, "ivy.rfft"]], "rfftn() (in module ivy)": [[368, "ivy.rfftn"], [412, "ivy.rfftn"]], "rnn() (in module ivy)": [[368, "ivy.rnn"], [413, "ivy.rnn"]], "sliding_window() (in module ivy)": [[368, "ivy.sliding_window"], [414, "ivy.sliding_window"]], "stft() (in module ivy)": [[368, "ivy.stft"], [415, "ivy.stft"]], "adjoint() (in module ivy)": [[369, "ivy.adjoint"], [416, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[369, "ivy.batched_outer"], [417, "ivy.batched_outer"]], "cond() (in module ivy)": [[369, "ivy.cond"], [418, "ivy.cond"]], "diagflat() (in module ivy)": [[369, "ivy.diagflat"], [419, "ivy.diagflat"]], "dot() (in module ivy)": [[369, "ivy.dot"], [420, "ivy.dot"]], "eig() (in module ivy)": [[369, "ivy.eig"], [421, "ivy.eig"], [625, "ivy.eig"], [659, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[369, "ivy.eigh_tridiagonal"], [422, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[369, "ivy.eigvals"], [423, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[369, "ivy.general_inner_product"], [424, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[369, "ivy.higher_order_moment"], [425, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[369, "ivy.initialize_tucker"], [426, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[369, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[369, "ivy.khatri_rao"], [427, "ivy.khatri_rao"]], "kron() (in module ivy)": [[369, "ivy.kron"], [428, "ivy.kron"]], "kronecker() (in module ivy)": [[369, "ivy.kronecker"], [429, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[369, "ivy.make_svd_non_negative"], [430, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[369, "ivy.matrix_exp"], [431, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[369, "ivy.mode_dot"], [432, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[369, "ivy.multi_dot"], [433, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[369, "ivy.multi_mode_dot"], [434, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[369, "ivy.partial_tucker"], [435, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[369, "ivy.solve_triangular"], [436, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[369, "ivy.svd_flip"], [437, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[369, "ivy.tensor_train"], [438, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[369, "ivy.truncated_svd"], [439, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[369, "ivy.tt_matrix_to_tensor"], [440, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[369, "ivy.tucker"], [441, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[370, "ivy.hinge_embedding_loss"], [442, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[370, "ivy.huber_loss"], [443, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[370, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[370, "ivy.kl_div"], [444, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[370, "ivy.l1_loss"], [445, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[370, "ivy.log_poisson_loss"], [446, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[370, "ivy.poisson_nll_loss"], [447, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[370, "ivy.smooth_l1_loss"], [448, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[370, "ivy.soft_margin_loss"], [449, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[371, "ivy.as_strided"], [450, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[371, "ivy.associative_scan"], [451, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[371, "ivy.atleast_1d"], [452, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[371, "ivy.atleast_2d"], [453, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[371, "ivy.atleast_3d"], [454, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[371, "ivy.broadcast_shapes"], [455, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[371, "ivy.check_scalar"], [456, "ivy.check_scalar"]], "choose() (in module ivy)": [[371, "ivy.choose"], [457, "ivy.choose"]], "column_stack() (in module ivy)": [[371, "ivy.column_stack"], [458, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[371, "ivy.concat_from_sequence"], [459, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[371, "ivy.dsplit"], [460, "ivy.dsplit"]], "dstack() (in module ivy)": [[371, "ivy.dstack"], [461, "ivy.dstack"]], "expand() (in module ivy)": [[371, "ivy.expand"], [462, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[371, "ivy.fill_diagonal"], [463, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[371, "ivy.flatten"], [464, "ivy.flatten"]], "fliplr() (in module ivy)": [[371, "ivy.fliplr"], [465, "ivy.fliplr"]], "flipud() (in module ivy)": [[371, "ivy.flipud"], [466, "ivy.flipud"]], "fold() (in module ivy)": [[371, "ivy.fold"], [467, "ivy.fold"]], "heaviside() (in module ivy)": [[371, "ivy.heaviside"], [468, "ivy.heaviside"]], "hsplit() (in module ivy)": [[371, "ivy.hsplit"], [469, "ivy.hsplit"]], "hstack() (in module ivy)": [[371, "ivy.hstack"], [470, "ivy.hstack"]], "i0() (in module ivy)": [[371, "ivy.i0"], [471, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[371, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[371, "ivy.matricize"], [472, "ivy.matricize"]], "moveaxis() (in module ivy)": [[371, "ivy.moveaxis"], [473, "ivy.moveaxis"]], "pad() (in module ivy)": [[371, "ivy.pad"], [474, "ivy.pad"]], "partial_fold() (in module ivy)": [[371, "ivy.partial_fold"], [475, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[371, "ivy.partial_tensor_to_vec"], [476, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[371, "ivy.partial_unfold"], [477, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[371, "ivy.partial_vec_to_tensor"], [478, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[371, "ivy.put_along_axis"], [479, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[371, "ivy.rot90"], [480, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[371, "ivy.soft_thresholding"], [481, "ivy.soft_thresholding"]], "take() (in module ivy)": [[371, "ivy.take"], [482, "ivy.take"]], "take_along_axis() (in module ivy)": [[371, "ivy.take_along_axis"], [483, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[371, "ivy.top_k"], [484, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[371, "ivy.trim_zeros"], [485, "ivy.trim_zeros"]], "unfold() (in module ivy)": [[371, "ivy.unfold"], [486, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[371, "ivy.unique_consecutive"], [487, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[371, "ivy.vsplit"], [488, "ivy.vsplit"]], "vstack() (in module ivy)": [[371, "ivy.vstack"], [489, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[372, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[373, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[374, "ivy.batch_norm"], [490, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[374, "ivy.group_norm"], [491, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[374, "ivy.instance_norm"], [492, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[374, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[374, "ivy.l1_normalize"], [493, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[374, "ivy.l2_normalize"], [494, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[374, "ivy.local_response_norm"], [495, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[374, "ivy.lp_normalize"], [496, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[375, "ivy.bernoulli"], [497, "ivy.bernoulli"]], "beta() (in module ivy)": [[375, "ivy.beta"], [498, "ivy.beta"]], "dirichlet() (in module ivy)": [[375, "ivy.dirichlet"], [499, "ivy.dirichlet"]], "gamma() (in module ivy)": [[375, "ivy.gamma"], [500, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[375, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[375, "ivy.poisson"], [501, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[376, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[376, "ivy.unravel_index"], [502, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[377, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[378, "ivy.invert_permutation"], [503, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[378, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[378, "ivy.lexsort"], [504, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[379, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[379, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[379, "ivy.is_ivy_sparse_array"], [505, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[379, "ivy.is_native_sparse_array"], [506, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[379, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[379, "ivy.native_sparse_array"], [507, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[379, "ivy.native_sparse_array_to_indices_values_and_shape"], [508, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[380, "ivy.bincount"], [509, "ivy.bincount"]], "corrcoef() (in module ivy)": [[380, "ivy.corrcoef"], [510, "ivy.corrcoef"]], "cov() (in module ivy)": [[380, "ivy.cov"], [511, "ivy.cov"]], "cummax() (in module ivy)": [[380, "ivy.cummax"], [512, "ivy.cummax"]], "cummin() (in module ivy)": [[380, "ivy.cummin"], [513, "ivy.cummin"]], "histogram() (in module ivy)": [[380, "ivy.histogram"], [514, "ivy.histogram"]], "igamma() (in module ivy)": [[380, "ivy.igamma"], [515, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[380, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[380, "ivy.median"], [516, "ivy.median"]], "nanmean() (in module ivy)": [[380, "ivy.nanmean"], [517, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[380, "ivy.nanmedian"], [518, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[380, "ivy.nanmin"], [519, "ivy.nanmin"]], "nanprod() (in module ivy)": [[380, "ivy.nanprod"], [520, "ivy.nanprod"]], "quantile() (in module ivy)": [[380, "ivy.quantile"], [521, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[381, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[381, "ivy.optional_get_element"], [522, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[382, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[382, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[383, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[383, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[384, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[384, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[386, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[386, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[387, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[387, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[388, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[388, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[389, "ivy.Array.dct"]], "dct() (ivy.container method)": [[389, "ivy.Container.dct"]], "dft() (ivy.array method)": [[390, "ivy.Array.dft"]], "dft() (ivy.container method)": [[390, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[391, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[391, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[392, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[392, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[393, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[393, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[394, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[394, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[395, "ivy.Array.fft"]], "fft() (ivy.container method)": [[395, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[396, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[399, "ivy.Array.idct"]], "idct() (ivy.container method)": [[399, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[400, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[400, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[401, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[401, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[403, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[403, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[404, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[404, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[405, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[405, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[406, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[406, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[407, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[407, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[410, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[410, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[411, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[411, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[412, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[412, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[414, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[414, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[415, "ivy.Array.stft"]], "stft() (ivy.container method)": [[415, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[416, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[416, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[417, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[417, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[418, "ivy.Array.cond"]], "cond() (ivy.container method)": [[418, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[419, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[419, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[420, "ivy.Array.dot"]], "dot() (ivy.container method)": [[420, "ivy.Container.dot"]], "eig() (ivy.array method)": [[421, "ivy.Array.eig"], [659, "ivy.Array.eig"]], "eig() (ivy.container method)": [[421, "ivy.Container.eig"], [659, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[422, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[422, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[423, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[423, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[424, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[424, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[425, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[425, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[426, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[426, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[428, "ivy.Array.kron"]], "kron() (ivy.container method)": [[428, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[430, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[430, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[431, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[431, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[432, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[432, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[433, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[433, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[434, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[434, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[435, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[435, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[437, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[437, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[438, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[438, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[439, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[439, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[440, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[440, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[441, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[441, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[442, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[442, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[443, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[443, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[444, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[444, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[445, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[445, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[446, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[446, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[447, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[447, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[448, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[448, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[449, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[449, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[450, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[450, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[451, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[451, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[452, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[452, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[453, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[453, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[454, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[454, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[455, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[458, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[458, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[459, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[459, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[460, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[460, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[461, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[461, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[462, "ivy.Array.expand"]], "expand() (ivy.container method)": [[462, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[463, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[463, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[464, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[464, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[465, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[465, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[466, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[466, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[467, "ivy.Array.fold"]], "fold() (ivy.container method)": [[467, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[468, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[468, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[469, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[469, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[470, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[470, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[471, "ivy.Array.i0"]], "i0() (ivy.container method)": [[471, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[472, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[472, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[473, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[473, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[474, "ivy.Array.pad"]], "pad() (ivy.container method)": [[474, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[475, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[475, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[476, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[476, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[477, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[477, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[478, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[478, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[479, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[479, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[480, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[480, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[481, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[481, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[482, "ivy.Array.take"]], "take() (ivy.container method)": [[482, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[483, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[483, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[484, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[484, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[485, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[485, "ivy.Container.trim_zeros"]], "unfold() (ivy.array method)": [[486, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[486, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[487, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[487, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[488, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[488, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[489, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[489, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[490, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[490, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[491, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[491, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[492, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[492, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[493, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[493, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[494, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[494, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[496, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[496, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[497, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[497, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[498, "ivy.Array.beta"]], "beta() (ivy.container method)": [[498, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[499, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[499, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[500, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[500, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[501, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[501, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[502, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[502, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[503, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[504, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[504, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[509, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[509, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[510, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[510, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[511, "ivy.Array.cov"]], "cov() (ivy.container method)": [[511, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[512, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[512, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[513, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[513, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[514, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[514, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[515, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[515, "ivy.Container.igamma"]], "median() (ivy.array method)": [[516, "ivy.Array.median"]], "median() (ivy.container method)": [[516, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[517, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[517, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[518, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[518, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[519, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[519, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[520, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[520, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[521, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[521, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[522, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[522, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[523, "ivy.all_equal"], [622, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[523, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[523, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[524, "ivy.arg_info"], [622, "ivy.arg_info"]], "arg_names() (in module ivy)": [[525, "ivy.arg_names"], [622, "ivy.arg_names"]], "array_equal() (in module ivy)": [[526, "ivy.array_equal"], [622, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[526, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[526, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[527, "ivy.assert_supports_inplace"], [622, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[527, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[527, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[528, "ivy.cache_fn"], [622, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[529, "ivy.clip_matrix_norm"], [622, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[529, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[529, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[530, "ivy.clip_vector_norm"], [622, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[530, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[530, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[531, "ivy.container_types"], [622, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[532, "ivy.current_backend_str"], [622, "ivy.current_backend_str"]], "default() (in module ivy)": [[533, "ivy.default"], [622, "ivy.default"]], "default() (ivy.array method)": [[533, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[534, "ivy.einops_rearrange"], [622, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[534, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[534, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[535, "ivy.einops_reduce"], [622, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[535, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[535, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[536, "ivy.einops_repeat"], [622, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[536, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[536, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[537, "ivy.exists"], [622, "ivy.exists"]], "exists() (ivy.array method)": [[537, "ivy.Array.exists"]], "exists() (ivy.container method)": [[537, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[538, "ivy.fourier_encode"], [622, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[538, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[538, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[539, "ivy.function_supported_devices_and_dtypes"], [622, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[540, "ivy.function_unsupported_devices_and_dtypes"], [622, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[541, "ivy.gather"], [622, "ivy.gather"]], "gather() (ivy.array method)": [[541, "ivy.Array.gather"]], "gather() (ivy.container method)": [[541, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[542, "ivy.gather_nd"], [622, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[542, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[542, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[543, "ivy.get_all_arrays_in_memory"], [622, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[544, "ivy.get_item"], [622, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[545, "ivy.get_num_dims"], [622, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[545, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[545, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[546, "ivy.get_referrers_recursive"], [622, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[547, "ivy.has_nans"], [622, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[547, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[547, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[548, "ivy.inplace_arrays_supported"], [622, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[549, "ivy.inplace_decrement"], [622, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[549, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[549, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[550, "ivy.inplace_increment"], [622, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[550, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[550, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[551, "ivy.inplace_update"], [622, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[551, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[551, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[552, "ivy.inplace_variables_supported"], [622, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[553, "ivy.is_array"], [622, "ivy.is_array"]], "is_array() (ivy.array method)": [[553, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[553, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[554, "ivy.is_ivy_array"], [622, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[554, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[554, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[555, "ivy.is_ivy_container"], [622, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[555, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[556, "ivy.is_ivy_nested_array"], [622, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[557, "ivy.is_native_array"], [622, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[557, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[557, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[558, "ivy.isin"], [622, "ivy.isin"]], "isin() (ivy.array method)": [[558, "ivy.Array.isin"]], "isin() (ivy.container method)": [[558, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[559, "ivy.isscalar"], [622, "ivy.isscalar"]], "itemsize() (in module ivy)": [[560, "ivy.itemsize"], [622, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[560, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[560, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[561, "ivy.match_kwargs"], [622, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[562, "ivy.multiprocessing"], [622, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[563, "ivy.num_arrays_in_memory"], [622, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[564, "ivy.print_all_arrays_in_memory"], [622, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[565, "ivy.scatter_flat"], [622, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[565, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[565, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[566, "ivy.scatter_nd"], [622, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[566, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[566, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[567, "ivy.set_array_mode"], [622, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[568, "ivy.set_exception_trace_mode"], [622, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[569, "ivy.set_inplace_mode"], [622, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[570, "ivy.set_item"], [622, "ivy.set_item"]], "set_min_base() (in module ivy)": [[571, "ivy.set_min_base"], [622, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[572, "ivy.set_min_denominator"], [622, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[573, "ivy.set_nestable_mode"], [622, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[574, "ivy.set_precise_mode"], [622, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[575, "ivy.set_queue_timeout"], [622, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[576, "ivy.set_shape_array_mode"], [622, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[577, "ivy.set_show_func_wrapper_trace_mode"], [622, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[578, "ivy.set_tmp_dir"], [622, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[579, "ivy.shape"], [622, "ivy.shape"]], "shape() (ivy.array method)": [[579, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[580, "ivy.stable_divide"], [622, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[580, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[580, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[581, "ivy.stable_pow"], [622, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[581, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[581, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[582, "ivy.strides"], [622, "ivy.strides"]], "strides() (ivy.array method)": [[582, "ivy.Array.strides"]], "strides() (ivy.container method)": [[582, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[583, "ivy.supports_inplace_updates"], [622, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[583, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[583, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[584, "ivy.to_ivy_shape"], [622, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[585, "ivy.to_list"], [622, "ivy.to_list"]], "to_list() (ivy.array method)": [[585, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[585, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[586, "ivy.to_native_shape"], [622, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[587, "ivy.to_numpy"], [622, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[587, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[587, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[588, "ivy.to_scalar"], [622, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[588, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[588, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[589, "ivy.try_else_none"], [622, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[590, "ivy.unset_array_mode"], [622, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[591, "ivy.unset_exception_trace_mode"], [622, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[592, "ivy.unset_inplace_mode"], [622, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[593, "ivy.unset_min_base"], [622, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[594, "ivy.unset_min_denominator"], [622, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[595, "ivy.unset_nestable_mode"], [622, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[596, "ivy.unset_precise_mode"], [622, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[597, "ivy.unset_queue_timeout"], [622, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[598, "ivy.unset_shape_array_mode"], [622, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[599, "ivy.unset_show_func_wrapper_trace_mode"], [622, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[600, "ivy.unset_tmp_dir"], [622, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[601, "ivy.value_is_nan"], [622, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[601, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[601, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[602, "ivy.vmap"], [622, "ivy.vmap"]], "adam_step() (in module ivy)": [[603, "ivy.adam_step"], [623, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[603, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[603, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[604, "ivy.adam_update"], [623, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[604, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[604, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[605, "ivy.execute_with_gradients"], [623, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[606, "ivy.grad"], [623, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[607, "ivy.gradient_descent_update"], [623, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[607, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[607, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[608, "ivy.jac"], [623, "ivy.jac"]], "lamb_update() (in module ivy)": [[609, "ivy.lamb_update"], [623, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[609, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[609, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[610, "ivy.lars_update"], [623, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[610, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[610, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[611, "ivy.optimizer_update"], [623, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[611, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[611, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[612, "ivy.stop_gradient"], [623, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[612, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[612, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[613, "ivy.value_and_grad"], [623, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[614, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[615, "ivy.e"]], "inf (in module ivy)": [[615, "ivy.inf"]], "ivy.functional.ivy.constants": [[615, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[615, "ivy.nan"]], "newaxis (in module ivy)": [[615, "ivy.newaxis"]], "pi (in module ivy)": [[615, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[616, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[617, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[617, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[618, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[618, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[618, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[618, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[618, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[618, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[619, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[619, "ivy.Profiler"]], "ivy.functional.ivy.device": [[619, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[620, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[621, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[622, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[622, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[622, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[623, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[624, "ivy.conv"], [637, "ivy.conv"]], "conv1d() (in module ivy)": [[624, "ivy.conv1d"], [638, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[624, "ivy.conv1d_transpose"], [639, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[624, "ivy.conv2d"], [640, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[624, "ivy.conv2d_transpose"], [641, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[624, "ivy.conv3d"], [642, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[624, "ivy.conv3d_transpose"], [643, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[624, "ivy.conv_general_dilated"], [644, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[624, "ivy.conv_general_transpose"], [645, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[624, "ivy.depthwise_conv2d"], [646, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[624, "ivy.dropout"], [647, "ivy.dropout"]], "ivy.functional.ivy.layers": [[624, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[624, "ivy.linear"], [648, "ivy.linear"]], "lstm_update() (in module ivy)": [[624, "ivy.lstm_update"], [649, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[624, "ivy.multi_head_attention"], [650, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[624, "ivy.nms"], [651, "ivy.nms"]], "roi_align() (in module ivy)": [[624, "ivy.roi_align"], [652, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[624, "ivy.scaled_dot_product_attention"], [653, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[625, "ivy.cholesky"], [654, "ivy.cholesky"]], "cross() (in module ivy)": [[625, "ivy.cross"], [655, "ivy.cross"]], "det() (in module ivy)": [[625, "ivy.det"], [656, "ivy.det"]], "diag() (in module ivy)": [[625, "ivy.diag"], [657, "ivy.diag"]], "diagonal() (in module ivy)": [[625, "ivy.diagonal"], [658, "ivy.diagonal"]], "eigh() (in module ivy)": [[625, "ivy.eigh"], [660, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[625, "ivy.eigvalsh"], [661, "ivy.eigvalsh"]], "inner() (in module ivy)": [[625, "ivy.inner"], [662, "ivy.inner"]], "inv() (in module ivy)": [[625, "ivy.inv"], [663, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[625, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[625, "ivy.lu_factor"], [664, "ivy.lu_factor"]], "matmul() (in module ivy)": [[625, "ivy.matmul"], [665, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[625, "ivy.matrix_norm"], [666, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[625, "ivy.matrix_power"], [667, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[625, "ivy.matrix_rank"], [668, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[625, "ivy.matrix_transpose"], [669, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[625, "ivy.outer"], [670, "ivy.outer"]], "pinv() (in module ivy)": [[625, "ivy.pinv"], [671, "ivy.pinv"]], "qr() (in module ivy)": [[625, "ivy.qr"], [672, "ivy.qr"]], "slogdet() (in module ivy)": [[625, "ivy.slogdet"], [673, "ivy.slogdet"]], "solve() (in module ivy)": [[625, "ivy.solve"], [674, "ivy.solve"]], "svd() (in module ivy)": [[625, "ivy.svd"], [675, "ivy.svd"]], "svdvals() (in module ivy)": [[625, "ivy.svdvals"], [676, "ivy.svdvals"]], "tensordot() (in module ivy)": [[625, "ivy.tensordot"], [677, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[625, "ivy.tensorsolve"], [678, "ivy.tensorsolve"]], "trace() (in module ivy)": [[625, "ivy.trace"], [679, "ivy.trace"]], "vander() (in module ivy)": [[625, "ivy.vander"], [680, "ivy.vander"]], "vecdot() (in module ivy)": [[625, "ivy.vecdot"], [681, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[625, "ivy.vector_norm"], [682, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[625, "ivy.vector_to_skew_symmetric_matrix"], [683, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[626, "ivy.binary_cross_entropy"], [684, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[626, "ivy.cross_entropy"], [685, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[626, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[626, "ivy.sparse_cross_entropy"], [686, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[627, "ivy.clip"], [687, "ivy.clip"]], "concat() (in module ivy)": [[627, "ivy.concat"], [688, "ivy.concat"]], "constant_pad() (in module ivy)": [[627, "ivy.constant_pad"], [689, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[627, "ivy.expand_dims"], [690, "ivy.expand_dims"]], "flip() (in module ivy)": [[627, "ivy.flip"], [691, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[627, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[627, "ivy.permute_dims"], [692, "ivy.permute_dims"]], "repeat() (in module ivy)": [[627, "ivy.repeat"], [693, "ivy.repeat"]], "reshape() (in module ivy)": [[627, "ivy.reshape"], [694, "ivy.reshape"]], "roll() (in module ivy)": [[627, "ivy.roll"], [695, "ivy.roll"]], "split() (in module ivy)": [[627, "ivy.split"], [696, "ivy.split"]], "squeeze() (in module ivy)": [[627, "ivy.squeeze"], [697, "ivy.squeeze"]], "stack() (in module ivy)": [[627, "ivy.stack"], [698, "ivy.stack"]], "swapaxes() (in module ivy)": [[627, "ivy.swapaxes"], [699, "ivy.swapaxes"]], "tile() (in module ivy)": [[627, "ivy.tile"], [700, "ivy.tile"]], "unstack() (in module ivy)": [[627, "ivy.unstack"], [701, "ivy.unstack"]], "zero_pad() (in module ivy)": [[627, "ivy.zero_pad"], [702, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[628, "ivy.fomaml_step"], [703, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[628, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[628, "ivy.maml_step"], [704, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[628, "ivy.reptile_step"], [705, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[629, "ivy.all_nested_indices"], [706, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[629, "ivy.copy_nest"], [707, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[629, "ivy.duplicate_array_index_chains"], [708, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[629, "ivy.index_nest"], [709, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[629, "ivy.insert_into_nest_at_index"], [710, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[629, "ivy.insert_into_nest_at_indices"], [711, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[629, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[629, "ivy.map"], [712, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[629, "ivy.map_nest_at_index"], [713, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[629, "ivy.map_nest_at_indices"], [714, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[629, "ivy.multi_index_nest"], [715, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[629, "ivy.nested_any"], [716, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[629, "ivy.nested_argwhere"], [717, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[629, "ivy.nested_map"], [718, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[629, "ivy.nested_multi_map"], [719, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[629, "ivy.prune_empty"], [720, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[629, "ivy.prune_nest_at_index"], [721, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[629, "ivy.prune_nest_at_indices"], [722, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[629, "ivy.set_nest_at_index"], [723, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[629, "ivy.set_nest_at_indices"], [724, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[630, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[630, "ivy.layer_norm"], [725, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[631, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[631, "ivy.multinomial"], [726, "ivy.multinomial"]], "randint() (in module ivy)": [[631, "ivy.randint"], [727, "ivy.randint"]], "random_normal() (in module ivy)": [[631, "ivy.random_normal"], [728, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[631, "ivy.random_uniform"], [729, "ivy.random_uniform"]], "seed() (in module ivy)": [[631, "ivy.seed"], [730, "ivy.seed"]], "shuffle() (in module ivy)": [[631, "ivy.shuffle"], [731, "ivy.shuffle"]], "argmax() (in module ivy)": [[632, "ivy.argmax"], [732, "ivy.argmax"]], "argmin() (in module ivy)": [[632, "ivy.argmin"], [733, "ivy.argmin"]], "argwhere() (in module ivy)": [[632, "ivy.argwhere"], [734, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[632, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[632, "ivy.nonzero"], [735, "ivy.nonzero"]], "where() (in module ivy)": [[632, "ivy.where"], [736, "ivy.where"]], "ivy.functional.ivy.set": [[633, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[633, "ivy.unique_all"], [737, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[633, "ivy.unique_counts"], [738, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[633, "ivy.unique_inverse"], [739, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[633, "ivy.unique_values"], [740, "ivy.unique_values"]], "argsort() (in module ivy)": [[634, "ivy.argsort"], [741, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[634, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[634, "ivy.msort"], [742, "ivy.msort"]], "searchsorted() (in module ivy)": [[634, "ivy.searchsorted"], [743, "ivy.searchsorted"]], "sort() (in module ivy)": [[634, "ivy.sort"], [744, "ivy.sort"]], "cumprod() (in module ivy)": [[635, "ivy.cumprod"], [745, "ivy.cumprod"]], "cumsum() (in module ivy)": [[635, "ivy.cumsum"], [746, "ivy.cumsum"]], "einsum() (in module ivy)": [[635, "ivy.einsum"], [747, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[635, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[635, "ivy.max"], [748, "ivy.max"]], "mean() (in module ivy)": [[635, "ivy.mean"], [749, "ivy.mean"]], "min() (in module ivy)": [[635, "ivy.min"], [750, "ivy.min"]], "prod() (in module ivy)": [[635, "ivy.prod"], [751, "ivy.prod"]], "std() (in module ivy)": [[635, "ivy.std"], [752, "ivy.std"]], "sum() (in module ivy)": [[635, "ivy.sum"], [753, "ivy.sum"]], "var() (in module ivy)": [[635, "ivy.var"], [754, "ivy.var"]], "all() (in module ivy)": [[636, "ivy.all"], [755, "ivy.all"]], "any() (in module ivy)": [[636, "ivy.any"], [756, "ivy.any"]], "ivy.functional.ivy.utility": [[636, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[636, "ivy.load"], [757, "ivy.load"]], "save() (in module ivy)": [[636, "ivy.save"], [758, "ivy.save"]], "conv1d() (ivy.array method)": [[638, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[638, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[639, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[639, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[640, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[640, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[641, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[641, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[642, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[642, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[643, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[643, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[646, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[646, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[647, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[647, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[648, "ivy.Array.linear"]], "linear() (ivy.container method)": [[648, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[649, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[649, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[650, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[650, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[653, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[653, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[654, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[654, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[655, "ivy.Array.cross"]], "cross() (ivy.container method)": [[655, "ivy.Container.cross"]], "det() (ivy.array method)": [[656, "ivy.Array.det"]], "det() (ivy.container method)": [[656, "ivy.Container.det"]], "diag() (ivy.array method)": [[657, "ivy.Array.diag"]], "diag() (ivy.container method)": [[657, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[658, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[658, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[660, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[660, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[661, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[661, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[662, "ivy.Array.inner"]], "inner() (ivy.container method)": [[662, "ivy.Container.inner"]], "inv() (ivy.array method)": [[663, "ivy.Array.inv"]], "inv() (ivy.container method)": [[663, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[665, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[665, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[666, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[666, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[667, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[667, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[668, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[668, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[669, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[669, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[670, "ivy.Array.outer"]], "outer() (ivy.container method)": [[670, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[671, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[671, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[672, "ivy.Array.qr"]], "qr() (ivy.container method)": [[672, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[673, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[673, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[674, "ivy.Array.solve"]], "solve() (ivy.container method)": [[674, "ivy.Container.solve"]], "svd() (ivy.array method)": [[675, "ivy.Array.svd"]], "svd() (ivy.container method)": [[675, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[676, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[676, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[677, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[677, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[678, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[678, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[679, "ivy.Array.trace"]], "trace() (ivy.container method)": [[679, "ivy.Container.trace"]], "vander() (ivy.array method)": [[680, "ivy.Array.vander"]], "vander() (ivy.container method)": [[680, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[681, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[681, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[682, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[682, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[683, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[683, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[684, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[684, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[685, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[685, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[686, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[686, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[687, "ivy.Array.clip"]], "clip() (ivy.container method)": [[687, "ivy.Container.clip"]], "concat() (ivy.array method)": [[688, "ivy.Array.concat"]], "concat() (ivy.container method)": [[688, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[689, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[689, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[690, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[690, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[691, "ivy.Array.flip"]], "flip() (ivy.container method)": [[691, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[692, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[692, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[693, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[693, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[694, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[694, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[695, "ivy.Array.roll"]], "roll() (ivy.container method)": [[695, "ivy.Container.roll"]], "split() (ivy.array method)": [[696, "ivy.Array.split"]], "split() (ivy.container method)": [[696, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[697, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[697, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[698, "ivy.Array.stack"]], "stack() (ivy.container method)": [[698, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[699, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[699, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[700, "ivy.Array.tile"]], "tile() (ivy.container method)": [[700, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[701, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[701, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[702, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[702, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[725, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[725, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[726, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[726, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[727, "ivy.Array.randint"]], "randint() (ivy.container method)": [[727, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[728, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[728, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[729, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[729, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[731, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[731, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[732, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[732, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[733, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[733, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[734, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[734, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[735, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[735, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[736, "ivy.Array.where"]], "where() (ivy.container method)": [[736, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[737, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[737, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[738, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[738, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[739, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[739, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[740, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[740, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[741, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[741, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[742, "ivy.Array.msort"]], "msort() (ivy.container method)": [[742, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[743, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[743, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[744, "ivy.Array.sort"]], "sort() (ivy.container method)": [[744, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[745, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[745, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[746, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[746, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[747, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[747, "ivy.Container.einsum"]], "max() (ivy.array method)": [[748, "ivy.Array.max"]], "max() (ivy.container method)": [[748, "ivy.Container.max"]], "mean() (ivy.array method)": [[749, "ivy.Array.mean"]], "mean() (ivy.container method)": [[749, "ivy.Container.mean"]], "min() (ivy.array method)": [[750, "ivy.Array.min"]], "min() (ivy.container method)": [[750, "ivy.Container.min"]], "prod() (ivy.array method)": [[751, "ivy.Array.prod"]], "prod() (ivy.container method)": [[751, "ivy.Container.prod"]], "std() (ivy.array method)": [[752, "ivy.Array.std"]], "std() (ivy.container method)": [[752, "ivy.Container.std"]], "sum() (ivy.array method)": [[753, "ivy.Array.sum"]], "sum() (ivy.container method)": [[753, "ivy.Container.sum"]], "var() (ivy.array method)": [[754, "ivy.Array.var"]], "var() (ivy.container method)": [[754, "ivy.Container.var"]], "all() (ivy.array method)": [[755, "ivy.Array.all"]], "all() (ivy.container method)": [[755, "ivy.Container.all"]], "any() (ivy.array method)": [[756, "ivy.Array.any"]], "any() (ivy.container method)": [[756, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[759, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[759, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[760, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[761, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[761, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[762, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[762, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[762, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[762, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[762, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[763, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[764, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[764, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[765, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[765, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[765, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[765, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[765, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[765, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[768, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[768, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[768, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[769, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[769, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[770, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[770, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[771, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[771, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[772, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[772, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[776, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[776, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[776, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[776, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[776, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[776, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[776, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[776, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[776, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[776, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[776, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[776, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[776, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[776, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[776, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[776, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[776, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[776, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[776, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[776, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[777, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[777, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[777, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[777, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[777, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[777, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[777, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[777, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[777, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[778, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[778, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[779, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[779, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[779, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[779, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[779, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[779, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[779, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[779, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[779, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[779, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[779, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[779, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[779, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[779, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[779, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[779, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[780, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[780, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[780, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[780, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[780, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[780, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[780, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[780, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[780, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[780, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[780, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[780, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[780, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[780, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[780, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[780, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[780, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[780, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[780, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[780, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[780, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[780, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[780, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[780, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[780, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[780, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[780, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[781, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[781, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[781, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[781, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[781, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[781, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[781, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[782, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[782, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[782, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[782, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[782, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[782, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[783, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[783, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[783, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[783, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[783, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[784, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[784, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[784, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[784, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[784, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[784, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[784, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[784, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[784, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[784, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[784, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[784, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[784, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[784, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[784, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[784, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[784, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[784, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[785, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[785, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[785, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[786, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[786, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[787, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[788, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[788, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[788, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[788, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[788, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[788, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[788, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[788, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[788, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[788, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[788, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[789, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[789, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[789, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[790, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[790, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[791, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[791, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[791, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[792, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[792, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[793, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[793, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[794, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[794, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[795, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[795, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[795, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[795, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[795, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[795, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[795, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[795, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[795, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[795, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[795, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[795, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[795, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[795, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[795, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[795, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[795, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[795, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[795, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[795, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[795, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[795, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[795, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[795, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[795, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[795, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[796, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[796, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[796, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[797, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[797, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[797, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[798, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[798, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[798, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[798, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[798, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[799, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[799, "module-ivy.utils.verbosity"]], "automatic code conversions": [[843, "term-Automatic-Code-Conversions"]], "backend handler": [[843, "term-Backend-Handler"]], "compositional functions": [[843, "term-Compositional-Functions"]], "convenience functions": [[843, "term-Convenience-Functions"]], "framework": [[843, "term-Framework"]], "framework handler": [[843, "term-Framework-Handler"]], "graph compiler": [[843, "term-Graph-Compiler"]], "ivy array": [[843, "term-Ivy-Array"]], "ivy backends": [[843, "term-Ivy-Backends"]], "ivy compiler": [[843, "term-Ivy-Compiler"]], "ivy container": [[843, "term-Ivy-Container"]], "ivy frontends": [[843, "term-Ivy-Frontends"]], "ivy functional api": [[843, "term-Ivy-Functional-API"]], "ivy tracer": [[843, "term-Ivy-Tracer"]], "ivy transpiler": [[843, "term-Ivy-Transpiler"]], "mixed functions": [[843, "term-Mixed-Functions"]], "native array": [[843, "term-Native-Array"]], "nestable functions": [[843, "term-Nestable-Functions"]], "pipeline": [[843, "term-Pipeline"]], "primary functions": [[843, "term-Primary-Functions"]], "standalone functions": [[843, "term-Standalone-Functions"]], "submodule helper functions": [[843, "term-Submodule-Helper-Functions"]], "built-in function": [[849, "ivy.trace_graph"], [850, "ivy.transpile"], [851, "ivy.unify"]], "ivy.trace_graph()": [[849, "ivy.trace_graph"]], "ivy.transpile()": [[850, "ivy.transpile"]], "ivy.unify()": [[851, "ivy.unify"]]}})