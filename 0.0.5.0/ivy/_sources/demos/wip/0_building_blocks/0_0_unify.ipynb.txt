{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "file: \"unify_existing_code/0_building_blocks/0_0_unify.ipynb\"\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# 0.0: Unify"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "In this example, we unify a simple `torch` function `normalize`. We then show how this newly unified `normalize` function can be used alongside *any* ML framework!"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "::::: {#colab-button}\n",
    "[![Open in Colab]({{< var remote_badge.colab >}})](https://colab.research.google.com/github/unifyai/demos/blob/main/{{< meta file >}})\n",
    "[![GitHub]({{< var remote_badge.github >}})](https://github.com/unifyai/demos/blob/main/{{< meta file >}})\n",
    ":::::"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "Firstly, let's import the dependencies and define the `torch` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import ivy\n",
    "import torch\n",
    "\n",
    "def normalize(x, mean, std):\n",
    "    return torch.div(torch.sub(x, mean), std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "Now, let's unify the function!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "normalize = ivy.unify(normalize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "And that's it! The `normalize` function can now be used with **any ML framework**. It's as simple as that!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "So, let's give it a try!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# import numpy\n",
    "import numpy as np\n",
    "\n",
    "# create random numpy arrays for testing\n",
    "x = np.randon.uniform(size=10)\n",
    "mean = np.mean(x)\n",
    "std = np.std(x)\n",
    "\n",
    "# numpy\n",
    "print(normalize(x, mean, std))\n",
    "\n",
    "# jax\n",
    "import jax.numpy as jnp\n",
    "x_ = jnp.array(x)\n",
    "mean_ = jnp.array(mean)\n",
    "std_ = jnp.array(std)\n",
    "print(normalize(x_, mean_, std_))\n",
    "\n",
    "# tensorflow\n",
    "import tensorflow as tf\n",
    "x_ = tf.constant(x)\n",
    "mean_ = tf.constant(mean)\n",
    "std_ = tf.constant(std)\n",
    "print(normalize(x_, mean_, std_))\n",
    "\n",
    "# torch\n",
    "x_ = torch.tensor(x)\n",
    "mean_ = torch.tensor(mean)\n",
    "std_ = torch.tensor(std)\n",
    "print(normalize(x_, mean_, std_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "We can see that the new `normalize` function can operate with any ML framework. `ivy.unify` is able to detect that the original `normalize` function is implemented in `torch` by using the `inspection` module. `ivy.unify` then converts the framework-specific `torch` implementation into a framework-agnostic `ivy` implementation, which is compatible with all frameworks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Round Up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "That's it, you can now unify ML code! However, there are several other important topics to master before you're ready to unify ML code like a pro ðŸ¥·. Next, we'll be learning how to make our unified Ivy code [run much more efficiently]()! âš¡"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
