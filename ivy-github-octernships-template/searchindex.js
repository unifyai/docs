Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "ndenumerate", "ndindex", "tril_indices", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "kron", "matrix_exp", "multi_dot", "log_poisson_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "heaviside", "hsplit", "hstack", "i0", "moveaxis", "pad", "put_along_axis", "rot90", "take_along_axis", "top_k", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanquantile", "quantile", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 677, 691, 714], "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 83, 84, 86, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 119, 121, 122, 123, 126, 127, 129, 130, 132, 133, 134, 135, 141, 142, 143, 144, 145, 147, 148, 149, 150, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 448, 450, 453, 454, 458, 459, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 649, 650, 654, 659, 660, 661, 662, 663, 664, 665, 666, 671, 674, 680, 681, 682, 684, 685, 686, 687, 689, 690, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 715, 716, 717, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "transpil": [0, 1, 689, 703, 710, 716, 717, 718, 726, 727, 732, 738, 739], "ar": [0, 1, 2, 4, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 48, 49, 71, 86, 88, 91, 96, 150, 155, 157, 162, 186, 188, 189, 192, 196, 217, 218, 222, 227, 228, 232, 234, 239, 240, 241, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 278, 283, 286, 289, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 304, 305, 306, 308, 311, 312, 314, 315, 321, 322, 323, 324, 327, 332, 334, 342, 347, 348, 356, 357, 358, 365, 366, 367, 368, 373, 374, 381, 383, 387, 388, 389, 390, 391, 401, 406, 407, 408, 410, 411, 414, 415, 416, 431, 436, 440, 451, 452, 460, 470, 481, 491, 503, 505, 506, 508, 509, 510, 511, 513, 515, 517, 518, 519, 533, 534, 536, 537, 539, 543, 544, 545, 549, 550, 552, 555, 559, 560, 564, 565, 566, 571, 572, 575, 579, 581, 591, 596, 601, 602, 603, 611, 612, 613, 616, 617, 618, 619, 621, 623, 642, 644, 647, 648, 649, 650, 654, 660, 661, 664, 667, 668, 674, 677, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739], "publicli": [0, 2], "avail": [0, 2, 10, 33, 145, 151, 153, 154, 165, 302, 374, 423, 505, 508, 648, 680, 682, 690, 691, 697, 698, 699, 700, 702, 703, 710, 712, 715, 725, 726, 737, 738], "yet": [0, 2, 292, 294, 295, 303, 304, 308, 312, 689, 690, 725], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 296, 309, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 510, 515, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 601, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 680, 682, 683, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 725, 732, 733, 734, 736], "certain": [0, 1, 2, 26, 71, 87, 88, 503, 690, 691, 693, 699, 706, 712, 715, 725, 736], "part": [0, 2, 5, 8, 9, 31, 32, 37, 48, 57, 60, 94, 95, 96, 202, 206, 229, 261, 282, 293, 296, 300, 302, 311, 348, 373, 410, 500, 503, 506, 511, 544, 545, 644, 663, 664, 680, 686, 689, 691, 693, 696, 699, 704, 706, 709, 710, 712, 713, 715, 717, 718, 722, 724, 725, 730, 732, 737, 738, 739], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 114, 117, 120, 121, 122, 124, 128, 129, 143, 146, 156, 162, 163, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 462, 467, 468, 469, 470, 472, 474, 475, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 592, 596, 597, 602, 603, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 650, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "doc": [0, 2, 32, 96, 261, 293, 403, 503, 680, 685, 688, 689, 692, 701, 702, 704, 705, 712, 717, 720, 721], "won": [0, 2, 683, 684, 690, 691, 697, 699, 722, 726], "t": [0, 1, 2, 9, 13, 24, 32, 36, 47, 48, 276, 290, 296, 298, 300, 348, 439, 470, 491, 508, 509, 510, 515, 534, 535, 598, 662, 680, 683, 684, 686, 687, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 704, 707, 708, 709, 712, 713, 715, 717, 719, 720, 721, 722, 725, 726, 730, 732, 734], "work": [0, 1, 2, 9, 32, 311, 410, 515, 597, 598, 602, 607, 608, 680, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 709, 710, 711, 712, 713, 716, 717, 719, 721, 722, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "expect": [0, 2, 9, 14, 15, 32, 38, 128, 196, 240, 299, 321, 342, 413, 504, 506, 508, 512, 554, 568, 660, 661, 662, 664, 680, 684, 691, 693, 699, 700, 703, 704, 707, 709, 711, 712, 715, 725, 726], "now": [0, 2, 662, 663, 664, 680, 684, 690, 693, 694, 695, 696, 697, 698, 699, 700, 705, 707, 710, 711, 712, 713, 715, 719, 720, 722, 724, 725, 732], "when": [0, 1, 2, 4, 5, 6, 8, 9, 14, 15, 18, 19, 22, 26, 28, 29, 31, 32, 37, 38, 41, 42, 45, 49, 91, 101, 172, 189, 194, 196, 212, 222, 227, 240, 241, 245, 291, 299, 300, 302, 305, 306, 311, 321, 334, 348, 374, 381, 383, 388, 408, 410, 439, 455, 462, 468, 503, 504, 506, 508, 510, 511, 512, 513, 515, 517, 518, 521, 523, 536, 552, 557, 568, 569, 570, 578, 590, 591, 600, 601, 602, 611, 612, 613, 616, 617, 619, 620, 632, 634, 636, 638, 647, 650, 660, 661, 662, 663, 664, 665, 671, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 722, 725, 730, 732, 735, 736, 737, 738], "we": [0, 1, 2, 9, 14, 15, 24, 32, 37, 38, 47, 290, 298, 302, 377, 422, 470, 491, 492, 494, 499, 508, 509, 511, 512, 552, 568, 660, 664, 671, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 732, 733, 737, 738], "call": [0, 2, 9, 24, 26, 29, 32, 47, 49, 67, 121, 122, 162, 300, 311, 352, 408, 462, 476, 491, 492, 494, 502, 505, 508, 509, 511, 515, 557, 590, 596, 600, 601, 644, 660, 662, 663, 664, 666, 671, 680, 683, 689, 691, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 719, 720, 721, 722, 725, 732, 733, 736], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 114, 117, 120, 124, 128, 129, 159, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 270, 272, 277, 281, 286, 291, 293, 296, 299, 300, 301, 302, 305, 306, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 330, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 353, 355, 356, 357, 358, 360, 361, 363, 369, 372, 373, 374, 375, 378, 379, 381, 382, 383, 387, 388, 390, 393, 394, 399, 400, 401, 402, 403, 404, 405, 408, 415, 417, 418, 426, 429, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 448, 454, 457, 466, 470, 474, 475, 476, 488, 491, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 596, 609, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 649, 650, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 680, 683, 684, 686, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 735, 736, 738, 739], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 687, 688, 690, 692, 693, 695, 697, 699, 700, 702, 704, 705, 706, 707, 709, 715, 716, 723, 725, 726, 727, 728, 739], "function": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 114, 115, 116, 117, 120, 121, 122, 124, 128, 129, 146, 148, 149, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 311, 312, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 338, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 452, 453, 454, 457, 460, 462, 464, 467, 468, 469, 470, 472, 474, 475, 476, 481, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 645, 647, 648, 649, 650, 654, 658, 661, 664, 671, 676, 680, 682, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 709, 716, 718, 719, 720, 721, 723, 724, 727, 729, 730, 731, 732, 733, 738, 739], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 129, 141, 143, 145, 146, 148, 149, 151, 153, 156, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 332, 334, 335, 336, 337, 338, 341, 342, 345, 346, 347, 348, 352, 353, 356, 357, 358, 360, 361, 365, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 453, 454, 455, 462, 466, 467, 468, 470, 472, 474, 475, 476, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 654, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 674, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "alwai": [0, 5, 6, 9, 10, 16, 28, 29, 32, 39, 73, 101, 172, 222, 273, 296, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 439, 504, 506, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 649, 680, 689, 690, 691, 694, 695, 697, 699, 702, 704, 705, 706, 709, 710, 711, 712, 713, 715, 717, 725], "small": [0, 2, 8, 9, 14, 17, 31, 32, 37, 40, 189, 196, 222, 223, 265, 278, 296, 305, 381, 382, 383, 506, 511, 516, 552, 555, 557, 609, 661, 665, 680, 690, 698, 701, 706, 711, 715, 717, 721, 725, 733], "perform": [0, 2, 5, 9, 13, 14, 22, 23, 28, 32, 33, 36, 37, 45, 46, 58, 62, 87, 88, 159, 167, 189, 222, 243, 270, 289, 296, 297, 299, 302, 309, 311, 321, 322, 323, 324, 326, 327, 331, 332, 340, 355, 394, 402, 403, 422, 423, 424, 437, 438, 439, 455, 464, 500, 503, 505, 506, 508, 510, 511, 514, 515, 521, 522, 533, 535, 559, 561, 566, 587, 588, 589, 597, 598, 629, 630, 639, 640, 642, 662, 684, 693, 694, 695, 697, 699, 700, 701, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 720, 725, 729, 732, 733, 734, 735, 736, 737, 739], "hit": [0, 712, 717], "due": [0, 2, 222, 232, 506, 683, 686, 690, 693, 698, 703, 709, 710, 732], "ad": [0, 9, 16, 32, 39, 47, 189, 222, 265, 278, 296, 305, 381, 382, 383, 467, 468, 506, 508, 511, 513, 544, 545, 574, 662, 667, 680, 683, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 721, 725, 731, 732], "python": [0, 9, 18, 32, 41, 71, 156, 168, 196, 231, 306, 387, 388, 389, 390, 391, 488, 503, 505, 506, 508, 517, 610, 611, 612, 613, 615, 671, 674, 681, 682, 683, 688, 690, 691, 693, 696, 697, 698, 699, 703, 710, 712, 717, 719, 720, 725, 727, 729, 732, 733, 734, 738, 739], "wrap": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 302, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 464, 467, 468, 469, 470, 472, 474, 475, 485, 487, 489, 490, 493, 495, 496, 497, 498, 508, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 644, 680, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 705, 706, 709, 710, 712, 717, 719, 722, 725, 727, 728, 732, 733, 738, 739], "overhead": [0, 725, 735], "becom": [0, 9, 32, 273, 296, 302, 358, 513, 571, 671, 682, 684, 691, 697, 701, 703, 709, 725], "increasingli": [0, 701], "notic": [0, 689, 694, 698, 704, 712, 715], "larg": [0, 8, 9, 31, 32, 172, 189, 196, 222, 223, 311, 401, 506, 511, 557, 690, 691, 698, 720, 732], "model": [0, 2, 189, 222, 506, 680, 720, 721, 727, 730, 731, 732, 733, 734, 735, 736, 738, 739], "multipl": [0, 8, 9, 14, 17, 22, 23, 26, 31, 32, 33, 34, 37, 39, 40, 45, 46, 84, 183, 207, 214, 220, 221, 222, 224, 299, 300, 302, 309, 320, 327, 330, 332, 352, 361, 369, 379, 394, 411, 449, 489, 490, 493, 495, 497, 498, 503, 506, 508, 509, 510, 511, 513, 516, 518, 521, 522, 525, 526, 527, 528, 538, 547, 549, 550, 571, 574, 579, 580, 609, 616, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 662, 680, 684, 689, 691, 694, 695, 697, 701, 703, 704, 706, 709, 710, 711, 712, 715, 717, 725, 730, 731, 732, 739], "improv": [0, 684, 691, 699, 705, 706, 715, 717, 727, 730, 732, 734, 735], "remov": [0, 2, 14, 26, 37, 511, 513, 514, 515, 542, 549, 563, 581, 587, 588, 604, 677, 680, 689, 695, 696, 698, 699, 702, 706, 712, 715, 722, 732], "extra": [0, 2, 26, 49, 67, 488, 502, 508, 694, 699, 701, 707, 709, 710, 711, 715, 717, 729, 734], "around": [0, 26, 49, 302, 373, 374, 691, 694, 696, 700, 705, 706, 710, 713, 719, 725, 727, 730, 732, 739], "each": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 26, 29, 31, 32, 33, 34, 36, 37, 39, 42, 43, 45, 48, 49, 56, 57, 59, 60, 61, 63, 67, 89, 102, 114, 117, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 249, 251, 252, 256, 262, 263, 267, 273, 277, 281, 286, 288, 291, 293, 296, 299, 300, 302, 306, 309, 311, 317, 318, 319, 322, 323, 324, 327, 335, 336, 337, 338, 341, 342, 347, 348, 356, 357, 358, 360, 361, 366, 367, 368, 369, 371, 372, 373, 378, 379, 387, 394, 399, 400, 401, 402, 403, 404, 411, 414, 422, 429, 430, 446, 469, 488, 490, 491, 493, 495, 496, 497, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 515, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 543, 544, 545, 549, 551, 552, 553, 555, 557, 558, 559, 564, 573, 577, 579, 580, 582, 584, 586, 596, 603, 610, 619, 621, 622, 624, 630, 631, 638, 647, 649, 662, 665, 666, 667, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 722, 724, 725, 728, 729, 733, 735, 738], "take": [0, 2, 9, 14, 16, 22, 32, 39, 67, 68, 70, 91, 184, 229, 236, 247, 291, 299, 302, 318, 326, 331, 336, 365, 376, 402, 403, 502, 503, 506, 510, 511, 513, 514, 536, 549, 553, 578, 589, 629, 647, 654, 661, 662, 674, 680, 684, 685, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 709, 710, 711, 712, 715, 717, 719, 721, 722, 725, 726, 729, 730, 738], "ani": [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 23, 24, 28, 30, 31, 32, 33, 46, 47, 48, 49, 67, 68, 70, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 104, 105, 120, 124, 128, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 250, 253, 261, 267, 270, 291, 293, 296, 299, 300, 302, 305, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 342, 348, 364, 373, 381, 382, 383, 401, 404, 407, 408, 411, 421, 422, 423, 424, 425, 429, 433, 435, 437, 441, 443, 444, 461, 468, 475, 476, 482, 488, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 596, 597, 599, 600, 607, 609, 613, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 642, 645, 649, 658, 659, 661, 662, 664, 665, 666, 667, 671, 674, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "framework": [0, 2, 4, 10, 119, 141, 151, 154, 165, 420, 436, 440, 470, 473, 504, 505, 508, 515, 592, 642, 644, 648, 654, 659, 666, 671, 682, 683, 684, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 712, 713, 715, 716, 717, 719, 722, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736], "specif": [0, 2, 7, 9, 10, 30, 32, 33, 129, 160, 163, 196, 217, 218, 227, 306, 391, 422, 423, 424, 450, 504, 505, 506, 508, 511, 513, 514, 517, 520, 521, 544, 545, 561, 582, 587, 588, 589, 610, 627, 632, 633, 634, 636, 644, 663, 664, 671, 676, 680, 682, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 703, 704, 705, 706, 709, 710, 711, 712, 713, 715, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 739], "backend": [0, 2, 4, 5, 9, 10, 14, 26, 32, 33, 37, 48, 79, 115, 116, 119, 141, 148, 149, 151, 154, 165, 300, 346, 348, 408, 415, 427, 428, 436, 439, 440, 450, 470, 473, 503, 504, 505, 508, 511, 559, 642, 644, 645, 648, 649, 651, 653, 659, 664, 666, 670, 671, 682, 688, 690, 691, 692, 693, 694, 698, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 718, 719, 722, 727, 732, 735, 738, 739], "composit": [0, 115, 116, 148, 149, 241, 300, 350, 427, 428, 504, 505, 506, 508, 648, 650, 689, 692, 694, 695, 697, 699, 700, 707, 709, 710, 711, 712, 715, 717, 721, 722, 725, 727, 733], "both": [0, 2, 5, 8, 9, 10, 13, 14, 28, 31, 32, 33, 36, 37, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 104, 120, 124, 127, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 267, 268, 270, 273, 278, 293, 296, 299, 300, 302, 306, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 368, 373, 387, 401, 404, 429, 433, 435, 437, 446, 475, 498, 499, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 662, 680, 689, 691, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 709, 710, 712, 715, 717, 719, 720, 721, 722, 724, 725, 732, 735, 737, 738, 739], "produc": [0, 9, 10, 13, 32, 36, 247, 250, 255, 291, 293, 510, 537, 647, 689, 699, 704, 709, 711, 712, 713, 733, 735], "simplifi": [0, 674, 683, 703, 710, 717, 718, 721, 728, 730, 731, 732, 735, 738, 739], "execut": [0, 68, 70, 476, 502, 505, 508, 690, 691, 696, 697, 698, 699, 700, 701, 703, 707, 709, 712, 715, 717, 719, 722, 725, 727, 728, 732, 733, 734, 735, 736, 738], "comput": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 20, 22, 25, 26, 31, 32, 33, 34, 36, 37, 38, 45, 58, 62, 162, 172, 179, 182, 184, 189, 190, 191, 196, 197, 198, 200, 201, 207, 208, 209, 216, 217, 218, 219, 221, 222, 225, 230, 231, 245, 254, 257, 258, 262, 263, 267, 271, 274, 276, 277, 281, 283, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 309, 311, 317, 318, 319, 320, 321, 326, 327, 330, 331, 332, 335, 336, 337, 338, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 368, 371, 377, 381, 383, 393, 401, 402, 403, 404, 405, 406, 407, 408, 410, 416, 417, 418, 461, 482, 489, 491, 492, 494, 498, 499, 505, 506, 508, 509, 510, 511, 512, 513, 515, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 538, 539, 543, 544, 545, 548, 549, 550, 552, 554, 556, 558, 559, 561, 563, 565, 566, 568, 569, 570, 574, 596, 621, 622, 623, 624, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 644, 649, 662, 665, 680, 683, 684, 690, 697, 698, 699, 706, 708, 710, 712, 714, 715, 717, 720, 725, 727, 728, 730, 732, 733, 735, 736, 738], "compos": [0, 9, 32, 299, 313, 314, 315, 660, 690, 697, 710, 712, 725, 732, 739], "from": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 71, 73, 81, 83, 84, 85, 86, 89, 90, 93, 96, 98, 104, 122, 128, 129, 145, 150, 155, 161, 162, 188, 196, 197, 224, 228, 229, 236, 240, 253, 261, 262, 263, 268, 271, 273, 274, 276, 277, 288, 293, 296, 299, 302, 306, 311, 322, 323, 324, 338, 342, 361, 369, 373, 375, 376, 378, 379, 387, 388, 389, 390, 391, 402, 403, 421, 429, 430, 432, 452, 462, 472, 488, 490, 491, 495, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 524, 532, 533, 539, 542, 559, 563, 564, 565, 572, 575, 578, 581, 587, 588, 589, 591, 602, 603, 604, 610, 611, 612, 613, 617, 620, 621, 623, 629, 630, 635, 636, 637, 638, 639, 640, 642, 644, 647, 648, 649, 650, 654, 659, 660, 661, 662, 664, 666, 671, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739], "onli": [0, 2, 5, 8, 9, 14, 16, 18, 26, 28, 31, 32, 37, 39, 41, 48, 88, 127, 128, 157, 217, 218, 223, 229, 271, 276, 296, 299, 300, 302, 306, 311, 321, 334, 348, 356, 357, 358, 365, 387, 388, 404, 416, 503, 504, 505, 506, 508, 510, 511, 513, 515, 517, 518, 520, 521, 536, 549, 556, 559, 575, 578, 590, 591, 597, 598, 600, 601, 602, 607, 608, 611, 612, 613, 616, 617, 627, 633, 636, 645, 647, 648, 650, 662, 664, 666, 674, 680, 682, 685, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 725, 731, 732, 733, 738, 739], "which": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 106, 112, 114, 117, 119, 122, 129, 141, 146, 150, 155, 157, 160, 161, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 306, 309, 311, 321, 322, 323, 324, 326, 327, 331, 332, 341, 342, 345, 348, 353, 356, 357, 358, 360, 374, 375, 376, 377, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 421, 422, 423, 424, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 445, 446, 451, 452, 453, 454, 467, 468, 470, 472, 474, 475, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 533, 534, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 549, 550, 552, 553, 554, 556, 557, 558, 559, 563, 565, 566, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 585, 586, 595, 596, 597, 598, 603, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 676, 680, 682, 683, 684, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739], "result": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 101, 103, 128, 129, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 355, 360, 363, 365, 366, 367, 368, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 417, 418, 422, 423, 424, 429, 430, 439, 446, 453, 454, 489, 490, 491, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 593, 596, 597, 599, 603, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 654, 668, 678, 680, 689, 691, 693, 694, 696, 697, 698, 699, 701, 702, 705, 708, 709, 710, 711, 712, 713, 717, 720, 725, 733, 735], "code": [0, 2, 7, 8, 26, 30, 31, 49, 163, 209, 311, 408, 415, 423, 424, 439, 453, 470, 505, 508, 510, 511, 513, 532, 551, 552, 553, 582, 678, 680, 682, 683, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 739], "all": [0, 2, 4, 5, 9, 10, 13, 14, 16, 18, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 39, 41, 46, 47, 71, 84, 91, 94, 95, 96, 150, 157, 189, 193, 221, 222, 261, 270, 293, 296, 299, 300, 302, 311, 332, 341, 342, 348, 373, 378, 407, 411, 414, 431, 451, 452, 467, 474, 475, 488, 491, 503, 505, 506, 508, 509, 510, 511, 513, 514, 515, 517, 518, 522, 533, 535, 536, 539, 552, 557, 558, 561, 566, 575, 579, 581, 587, 588, 589, 590, 591, 592, 601, 602, 603, 604, 610, 613, 618, 642, 644, 647, 648, 649, 650, 660, 661, 662, 668, 671, 676, 680, 682, 683, 684, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739], "don": [0, 24, 47, 680, 684, 689, 690, 691, 698, 699, 704, 708, 712, 715, 721, 725], "contribut": [0, 9, 32, 311, 404, 686, 688, 689, 690, 691, 696, 704, 710, 717, 726, 736], "output": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 101, 103, 128, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 296, 298, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 360, 363, 365, 366, 367, 368, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 416, 417, 418, 422, 423, 424, 426, 430, 439, 446, 453, 454, 455, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 603, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 661, 662, 674, 680, 687, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 719, 721, 722, 725, 727, 733], "print": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 101, 102, 103, 104, 106, 112, 113, 114, 115, 116, 119, 121, 122, 124, 129, 141, 142, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 259, 260, 261, 265, 267, 280, 281, 286, 289, 291, 293, 296, 299, 300, 301, 302, 305, 311, 317, 318, 319, 320, 322, 323, 325, 327, 330, 332, 335, 336, 337, 338, 340, 342, 346, 348, 352, 353, 359, 360, 370, 373, 374, 375, 376, 377, 380, 384, 385, 386, 401, 402, 403, 404, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 449, 452, 453, 454, 457, 458, 459, 462, 465, 466, 467, 470, 472, 474, 475, 476, 479, 480, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 537, 538, 539, 540, 542, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 557, 559, 560, 561, 563, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 660, 671, 674, 678, 680, 690, 691, 697, 701, 711, 712, 714, 717, 719, 720, 721], "statement": [0, 2, 698, 709, 712, 715, 725], "logger": 0, "etc": [0, 5, 9, 18, 20, 24, 28, 32, 41, 47, 79, 87, 88, 91, 299, 306, 327, 332, 342, 387, 388, 390, 391, 503, 517, 519, 610, 611, 612, 613, 621, 622, 623, 624, 647, 650, 661, 662, 663, 664, 665, 666, 667, 684, 689, 690, 691, 693, 694, 695, 696, 697, 699, 701, 703, 705, 710, 711, 712, 713, 717, 719, 720, 725, 727, 730, 732, 738], "ha": [0, 1, 5, 9, 14, 16, 20, 22, 26, 29, 32, 33, 37, 39, 43, 45, 89, 145, 169, 189, 192, 194, 196, 206, 222, 224, 227, 229, 232, 234, 235, 239, 262, 263, 293, 299, 301, 302, 311, 334, 353, 376, 378, 400, 402, 403, 405, 435, 503, 505, 506, 510, 511, 513, 518, 519, 521, 536, 549, 550, 558, 559, 561, 563, 566, 574, 581, 619, 622, 623, 624, 629, 630, 633, 635, 636, 637, 638, 647, 650, 660, 671, 682, 683, 684, 689, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 721, 722, 724, 725, 728, 731, 732, 734, 735, 738], "": [0, 1, 2, 5, 9, 10, 11, 14, 22, 32, 34, 37, 45, 67, 89, 94, 95, 115, 116, 145, 148, 149, 161, 196, 231, 265, 267, 276, 278, 284, 287, 289, 296, 297, 299, 300, 301, 302, 305, 306, 311, 314, 315, 321, 327, 332, 342, 346, 353, 366, 367, 373, 381, 382, 383, 391, 401, 410, 427, 428, 448, 469, 470, 490, 492, 493, 494, 495, 497, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 515, 521, 525, 527, 529, 531, 541, 552, 559, 560, 566, 602, 636, 638, 648, 660, 661, 662, 663, 664, 665, 666, 667, 671, 680, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 731, 732, 733, 735, 736, 737, 738], "likewis": [0, 2, 680, 691, 697, 699, 702, 705, 706, 710, 715, 720, 738], "redund": [0, 680, 699, 703, 710], "oper": [0, 5, 6, 8, 9, 10, 13, 26, 28, 29, 31, 32, 33, 36, 49, 87, 88, 129, 159, 167, 172, 174, 183, 186, 189, 196, 211, 213, 222, 223, 227, 231, 234, 239, 247, 262, 263, 290, 291, 293, 298, 299, 313, 314, 315, 317, 318, 319, 325, 326, 327, 331, 335, 336, 337, 338, 340, 341, 342, 415, 422, 423, 424, 470, 503, 504, 505, 506, 508, 510, 511, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 561, 563, 635, 637, 647, 650, 662, 680, 682, 689, 690, 692, 693, 694, 697, 699, 700, 701, 702, 703, 706, 709, 710, 712, 715, 717, 720, 721, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739], "origin": [0, 2, 9, 14, 16, 22, 26, 32, 37, 39, 45, 48, 49, 177, 202, 229, 302, 311, 372, 402, 403, 407, 408, 410, 506, 511, 513, 521, 550, 578, 579, 630, 644, 649, 671, 680, 684, 689, 690, 691, 695, 696, 698, 699, 707, 709, 710, 711, 717, 732, 733], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 117, 120, 121, 122, 124, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 296, 299, 300, 302, 309, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 503, 504, 506, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 600, 601, 602, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 661, 662, 671, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739], "increas": [0, 9, 14, 16, 32, 37, 39, 302, 311, 373, 404, 511, 513, 515, 564, 573, 586, 602, 649, 682, 699, 703, 710, 713, 715, 732], "its": [0, 4, 6, 9, 16, 26, 29, 32, 33, 39, 57, 60, 68, 102, 107, 108, 109, 110, 111, 162, 189, 222, 241, 247, 291, 299, 302, 311, 338, 378, 404, 426, 473, 500, 502, 504, 505, 506, 508, 511, 513, 515, 549, 574, 578, 579, 583, 596, 644, 660, 680, 689, 690, 694, 698, 699, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 722, 725, 727, 731, 732, 738], "overal": [0, 510, 533, 697, 699, 700, 702, 722, 728, 730, 731, 732], "obj": [0, 2, 72, 73, 503], "none": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 124, 126, 129, 139, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 434, 435, 437, 438, 439, 441, 442, 445, 450, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 673, 680, 693, 694, 695, 697, 698, 699, 700, 701, 703, 705, 706, 709, 710, 711, 712, 713, 715, 717, 719, 721, 722], "arg_stateful_idx": [0, 663, 664], "kwarg_stateful_idx": [0, 663, 664], "include_gener": 0, "true": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 73, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 112, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 141, 145, 146, 148, 149, 153, 156, 157, 158, 159, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 453, 454, 455, 457, 460, 461, 463, 464, 466, 467, 468, 470, 472, 474, 475, 477, 481, 482, 484, 485, 487, 490, 491, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 648, 649, 650, 660, 662, 663, 664, 665, 666, 668, 671, 674, 678, 680, 690, 695, 697, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 711, 712, 714, 715, 717, 720, 721, 722], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 73, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 146, 151, 153, 156, 157, 159, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 340, 341, 344, 345, 347, 348, 349, 350, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 449, 453, 454, 455, 457, 460, 461, 463, 464, 466, 467, 468, 470, 472, 474, 475, 477, 481, 482, 484, 485, 487, 490, 491, 493, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 600, 601, 602, 603, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 647, 648, 649, 650, 654, 658, 659, 660, 662, 663, 664, 666, 668, 671, 674, 675, 678, 680, 690, 693, 695, 698, 699, 700, 701, 703, 709, 710, 711, 712, 714, 715, 717, 720, 721, 722], "static_argnum": [0, 717], "static_argnam": [0, 717], "arg": [0, 2, 4, 26, 51, 67, 152, 162, 476, 502, 503, 505, 508, 642, 644, 658, 659, 662, 664, 668, 671, 674, 678, 680, 694, 699, 700, 703, 708, 709, 710, 715, 717, 721], "kwarg": [0, 2, 4, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 152, 302, 373, 449, 476, 503, 505, 508, 642, 644, 658, 659, 662, 664, 671, 678, 680, 694, 699, 700, 703, 706, 709, 710, 715, 717, 721], "callabl": [0, 2, 9, 10, 24, 26, 32, 33, 36, 47, 67, 68, 70, 74, 75, 76, 77, 78, 115, 116, 148, 149, 162, 289, 297, 299, 302, 341, 355, 373, 412, 416, 421, 423, 427, 428, 449, 476, 488, 492, 494, 499, 502, 503, 504, 505, 508, 509, 514, 515, 587, 588, 589, 596, 597, 598, 600, 601, 602, 603, 642, 645, 654, 666, 675, 697, 703, 708, 710, 717], "set": [0, 2, 4, 9, 10, 13, 14, 19, 21, 22, 26, 32, 33, 36, 37, 42, 44, 45, 60, 70, 94, 96, 130, 131, 132, 133, 134, 145, 158, 159, 160, 161, 162, 177, 261, 269, 283, 285, 289, 293, 296, 297, 299, 300, 302, 311, 321, 345, 349, 365, 373, 377, 401, 406, 407, 408, 410, 411, 415, 422, 439, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 470, 478, 500, 502, 503, 504, 505, 506, 508, 510, 511, 515, 517, 518, 520, 521, 533, 537, 539, 550, 552, 555, 558, 559, 590, 597, 600, 601, 602, 607, 608, 614, 616, 617, 621, 623, 624, 625, 628, 636, 638, 644, 647, 648, 649, 650, 654, 660, 661, 662, 666, 671, 677, 682, 685, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 709, 710, 711, 712, 713, 715, 717, 719, 720, 726, 730, 731, 732, 733, 734, 736, 739], "them": [0, 2, 416, 452, 508, 647, 662, 680, 681, 682, 683, 684, 687, 689, 691, 693, 694, 695, 696, 697, 698, 699, 703, 704, 707, 709, 710, 711, 712, 714, 717, 719, 720, 721, 725, 727, 729, 730, 732, 734, 738], "If": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 71, 72, 73, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 129, 145, 161, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 266, 267, 269, 270, 271, 273, 277, 278, 283, 284, 286, 287, 288, 289, 293, 296, 297, 299, 300, 301, 302, 305, 306, 311, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 332, 334, 335, 336, 337, 342, 346, 348, 353, 356, 357, 358, 360, 361, 363, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 445, 446, 453, 454, 457, 467, 468, 470, 472, 474, 475, 487, 488, 491, 493, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 533, 534, 536, 537, 538, 539, 541, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 602, 603, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 660, 661, 662, 664, 665, 671, 680, 682, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 722, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "specifi": [0, 2, 3, 5, 6, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 32, 33, 36, 37, 38, 39, 41, 42, 45, 46, 55, 57, 60, 71, 80, 85, 87, 92, 94, 95, 97, 101, 103, 150, 155, 157, 161, 162, 163, 231, 265, 278, 283, 296, 299, 300, 301, 302, 306, 311, 317, 318, 319, 321, 327, 332, 342, 348, 353, 354, 365, 374, 375, 388, 399, 401, 402, 403, 406, 407, 410, 412, 429, 430, 432, 435, 448, 457, 488, 500, 503, 504, 505, 506, 508, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 536, 537, 539, 541, 542, 544, 545, 550, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 579, 581, 582, 585, 586, 595, 597, 598, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 619, 622, 623, 624, 625, 629, 630, 631, 635, 637, 639, 640, 650, 658, 660, 662, 690, 692, 696, 699, 700, 705, 706, 707, 709, 710, 711, 712, 717, 720, 721, 738], "eagerli": [0, 2, 680], "otherwis": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 71, 73, 79, 84, 86, 87, 88, 91, 93, 98, 101, 102, 104, 105, 107, 108, 109, 110, 111, 120, 124, 128, 129, 145, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 248, 249, 251, 252, 253, 265, 266, 267, 269, 270, 271, 277, 278, 284, 286, 287, 288, 289, 291, 296, 299, 302, 305, 317, 318, 319, 322, 323, 324, 356, 357, 358, 360, 361, 363, 365, 366, 367, 369, 372, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 400, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 445, 446, 453, 454, 467, 468, 470, 472, 474, 475, 476, 487, 491, 493, 498, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 518, 519, 520, 521, 522, 524, 525, 526, 527, 533, 534, 536, 537, 538, 539, 540, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 559, 563, 565, 566, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 603, 610, 611, 612, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 647, 648, 662, 664, 665, 671, 680, 691, 694, 697, 699, 700, 701, 706, 707, 709, 712, 717], "happen": [0, 2, 241, 506, 680, 684, 690, 691, 700, 709, 712, 720], "lazili": [0, 2, 680], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 453, 454, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 648, 649, 650, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 674, 676, 680, 689, 694, 702, 703, 705, 706, 710, 711, 712, 713, 717, 719, 720, 724, 733], "creat": [0, 1, 2, 5, 8, 9, 18, 26, 28, 31, 32, 37, 41, 71, 72, 73, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 223, 253, 261, 293, 299, 302, 306, 317, 318, 319, 340, 354, 373, 374, 387, 388, 389, 390, 391, 472, 488, 499, 503, 506, 508, 509, 517, 554, 610, 611, 612, 613, 615, 644, 654, 659, 661, 662, 663, 664, 665, 666, 667, 683, 685, 686, 690, 691, 694, 695, 696, 698, 699, 700, 703, 706, 707, 709, 710, 711, 712, 715, 717, 718, 721, 723, 724, 727, 732, 733, 738], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 117, 119, 129, 141, 145, 157, 160, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 356, 357, 358, 360, 361, 363, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 420, 422, 423, 424, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 445, 448, 450, 453, 454, 457, 467, 468, 469, 470, 472, 474, 475, 476, 487, 489, 490, 491, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 597, 600, 601, 602, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 648, 654, 659, 661, 664, 666, 667, 674, 678, 689, 690, 691, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 715, 717, 722, 725, 732, 738], "list": [0, 4, 5, 6, 8, 9, 10, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 84, 86, 89, 90, 91, 93, 98, 102, 104, 117, 121, 122, 129, 145, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 251, 252, 253, 265, 266, 267, 269, 270, 271, 272, 273, 276, 277, 278, 284, 285, 286, 287, 288, 289, 296, 299, 300, 302, 309, 317, 318, 319, 321, 322, 323, 324, 335, 336, 337, 338, 348, 356, 357, 358, 359, 360, 361, 369, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 393, 401, 402, 403, 404, 411, 413, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 431, 433, 435, 437, 438, 439, 441, 442, 445, 449, 453, 454, 467, 468, 470, 472, 473, 474, 475, 476, 487, 488, 493, 498, 503, 504, 505, 506, 508, 510, 511, 513, 515, 516, 519, 520, 524, 525, 526, 527, 528, 529, 532, 533, 534, 536, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 561, 563, 568, 569, 570, 571, 572, 575, 578, 579, 580, 581, 582, 585, 586, 590, 591, 592, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 629, 630, 633, 635, 636, 638, 639, 640, 642, 644, 647, 648, 649, 650, 654, 659, 660, 662, 668, 674, 688, 689, 690, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 709, 710, 711, 712, 713, 717, 720, 721, 722, 725, 732, 733, 738], "instanc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 114, 117, 120, 121, 122, 124, 129, 146, 158, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 296, 299, 300, 302, 305, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 335, 336, 337, 338, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 463, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 503, 504, 505, 506, 508, 509, 510, 512, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 654, 659, 686, 689, 690, 691, 693, 694, 695, 699, 701, 702, 703, 705, 706, 707, 708, 709, 712, 720, 721, 722, 727, 733], "consid": [0, 9, 14, 20, 32, 37, 96, 217, 218, 261, 265, 268, 278, 293, 296, 300, 311, 348, 401, 503, 506, 511, 519, 541, 552, 621, 622, 623, 624, 649, 661, 682, 683, 694, 695, 698, 699, 706, 708, 713, 715, 718, 719, 720, 729, 733, 737, 739], "dure": [0, 7, 11, 22, 26, 30, 34, 45, 163, 299, 322, 323, 324, 476, 489, 490, 495, 505, 508, 509, 510, 511, 514, 521, 533, 549, 587, 588, 589, 636, 638, 660, 663, 664, 665, 666, 690, 697, 699, 700, 703, 706, 707, 709, 710, 711, 712, 715, 725, 732, 733, 738], "posit": [0, 4, 8, 9, 10, 14, 15, 16, 31, 32, 33, 37, 38, 39, 82, 84, 96, 114, 169, 170, 171, 175, 178, 189, 196, 203, 204, 210, 212, 222, 223, 230, 231, 235, 236, 240, 253, 261, 265, 268, 278, 293, 296, 300, 302, 345, 372, 416, 426, 488, 501, 503, 504, 506, 508, 511, 512, 513, 517, 518, 522, 538, 541, 563, 568, 574, 579, 614, 619, 639, 640, 644, 647, 654, 659, 680, 689, 691, 693, 697, 710, 712, 713, 720, 724, 734], "argument": [0, 2, 4, 5, 8, 9, 10, 14, 26, 27, 31, 32, 33, 49, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 261, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 335, 336, 337, 338, 348, 373, 401, 404, 408, 412, 413, 415, 416, 421, 423, 424, 429, 433, 435, 437, 439, 449, 453, 454, 470, 475, 476, 488, 498, 503, 504, 506, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 596, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 648, 654, 659, 662, 663, 664, 671, 674, 676, 680, 682, 689, 692, 693, 694, 695, 696, 697, 701, 702, 704, 706, 711, 712, 713, 715, 717, 719, 720, 727, 732], "keyword": [0, 2, 4, 5, 9, 26, 32, 49, 89, 223, 302, 311, 373, 401, 413, 416, 449, 476, 503, 506, 508, 515, 521, 596, 637, 642, 644, 648, 663, 664, 674, 689, 694, 697, 699, 700, 709, 710, 711, 712, 713, 715, 720], "str": [0, 2, 4, 5, 9, 10, 13, 14, 15, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 89, 91, 93, 98, 99, 102, 104, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 121, 122, 124, 126, 129, 130, 131, 132, 133, 134, 141, 142, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 299, 300, 301, 302, 305, 311, 317, 318, 319, 321, 322, 323, 324, 326, 327, 331, 332, 335, 336, 337, 338, 340, 341, 342, 344, 348, 353, 356, 357, 358, 360, 365, 375, 376, 377, 381, 382, 383, 384, 385, 386, 388, 390, 401, 402, 403, 404, 410, 411, 412, 414, 415, 417, 418, 420, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 450, 453, 454, 456, 465, 467, 468, 470, 472, 474, 475, 487, 491, 498, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 596, 597, 607, 610, 611, 612, 613, 615, 618, 621, 622, 623, 625, 629, 630, 631, 633, 635, 636, 638, 639, 640, 644, 645, 647, 648, 652, 654, 662, 664, 665, 674, 699, 700, 703, 706, 709, 710, 713, 717, 722], "current": [0, 10, 26, 49, 67, 115, 116, 119, 136, 137, 138, 139, 140, 141, 147, 148, 149, 150, 155, 157, 300, 302, 346, 347, 373, 427, 428, 431, 436, 440, 451, 452, 470, 502, 504, 505, 508, 511, 515, 543, 590, 600, 601, 644, 648, 660, 664, 671, 677, 680, 684, 687, 689, 690, 691, 693, 695, 697, 698, 699, 700, 703, 704, 706, 709, 710, 711, 712, 715, 717, 722, 724, 725, 732, 738, 739], "bool": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 72, 73, 79, 84, 85, 86, 87, 88, 89, 91, 93, 98, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 137, 141, 145, 146, 148, 149, 151, 153, 156, 157, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 265, 266, 267, 269, 271, 277, 278, 283, 284, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 311, 317, 318, 319, 321, 322, 323, 324, 334, 335, 336, 337, 340, 348, 353, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 369, 372, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 457, 466, 467, 468, 470, 472, 474, 475, 487, 490, 491, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 533, 534, 536, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 559, 563, 564, 566, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 600, 601, 602, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 649, 662, 665, 666, 674, 678, 699, 701, 703, 709, 710, 712, 713, 715, 717, 722], "includ": [0, 2, 5, 8, 9, 10, 14, 19, 22, 23, 26, 28, 31, 32, 33, 37, 42, 45, 46, 71, 72, 73, 87, 88, 90, 96, 169, 193, 197, 198, 199, 202, 204, 207, 215, 223, 236, 241, 254, 257, 258, 261, 262, 264, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 282, 283, 284, 285, 287, 288, 293, 299, 311, 317, 318, 319, 344, 347, 349, 366, 367, 368, 371, 372, 389, 391, 392, 400, 404, 406, 407, 410, 435, 487, 503, 506, 508, 511, 515, 517, 518, 521, 522, 543, 564, 566, 590, 613, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 650, 661, 662, 665, 676, 680, 683, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 709, 710, 711, 712, 713, 715, 717, 724, 725, 729, 730, 732, 734, 737, 738, 739], "creation": [0, 9, 26, 32, 49, 696, 699, 700, 705, 707, 710, 711, 712, 713, 717, 732, 734, 738], "constant": [0, 9, 16, 17, 32, 39, 40, 301, 302, 353, 373, 513, 515, 516, 573, 596, 609, 661, 663, 664, 665, 680, 706, 711, 713, 721, 722, 725], "appear": [0, 302, 366, 367, 488, 508, 690, 691, 693, 710, 715], "whether": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 72, 73, 84, 86, 91, 93, 98, 101, 102, 104, 107, 108, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 141, 145, 146, 148, 149, 151, 153, 156, 157, 159, 162, 163, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 296, 299, 301, 302, 311, 317, 318, 319, 321, 322, 323, 324, 340, 353, 355, 356, 357, 358, 360, 361, 363, 365, 366, 367, 369, 372, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 453, 454, 455, 456, 457, 460, 461, 463, 464, 466, 467, 468, 470, 472, 474, 475, 481, 482, 485, 487, 490, 491, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 521, 522, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 548, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 600, 601, 602, 603, 607, 608, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 642, 644, 659, 662, 663, 664, 665, 666, 674, 680, 685, 689, 690, 694, 697, 699, 701, 705, 706, 709, 710, 712, 714, 715], "appli": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 296, 297, 299, 300, 301, 302, 305, 311, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 334, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 500, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 554, 555, 556, 557, 559, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 599, 602, 603, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 649, 650, 658, 662, 665, 680, 685, 687, 689, 690, 691, 694, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 715, 719, 720, 721, 722, 723, 725, 727, 733], "nativ": [0, 2, 4, 5, 7, 10, 27, 30, 33, 48, 51, 90, 99, 100, 106, 107, 108, 109, 110, 111, 125, 128, 143, 144, 145, 146, 156, 164, 168, 439, 441, 445, 452, 473, 503, 504, 505, 508, 644, 654, 659, 671, 680, 689, 695, 699, 703, 706, 707, 709, 710, 711, 712, 717, 719, 720, 727, 730, 739], "e": [0, 5, 9, 14, 18, 20, 21, 22, 24, 31, 32, 37, 41, 44, 45, 47, 48, 79, 88, 89, 92, 93, 96, 100, 129, 142, 169, 170, 171, 175, 177, 178, 181, 183, 185, 189, 190, 192, 195, 196, 202, 203, 210, 211, 212, 213, 220, 221, 222, 223, 225, 227, 229, 231, 232, 235, 236, 240, 246, 261, 293, 299, 300, 306, 311, 317, 318, 321, 335, 336, 337, 338, 352, 387, 388, 389, 390, 391, 402, 403, 501, 503, 504, 505, 506, 510, 511, 513, 515, 517, 519, 520, 521, 536, 539, 544, 545, 549, 550, 552, 555, 558, 559, 560, 563, 566, 574, 582, 593, 597, 598, 599, 602, 607, 608, 611, 612, 613, 621, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 662, 674, 680, 683, 684, 685, 686, 689, 690, 691, 692, 693, 695, 697, 699, 703, 708, 710, 712, 717, 720, 725, 726, 727, 728], "tf": [0, 2, 680, 694, 695, 699, 700, 705, 709, 710, 712, 713, 715, 717, 722, 725, 727, 732], "after": [0, 2, 9, 10, 11, 13, 17, 26, 32, 33, 34, 36, 40, 135, 236, 284, 296, 299, 300, 302, 321, 322, 323, 324, 341, 352, 364, 373, 439, 490, 493, 495, 496, 497, 504, 506, 508, 509, 510, 515, 516, 523, 524, 525, 526, 528, 530, 532, 533, 601, 609, 666, 671, 680, 686, 689, 690, 691, 693, 695, 696, 698, 699, 701, 703, 705, 708, 712, 716, 726, 732], "union": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 445, 446, 448, 449, 453, 454, 457, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 661, 666, 667, 694, 697, 699, 700, 701, 703, 705, 706, 709, 713, 715, 717, 722], "intiter": [0, 4, 10, 16, 24, 26, 33, 39, 47, 49, 67, 68, 70, 162, 259, 260, 293, 302, 373, 411, 449, 502, 505, 508, 513, 515, 573, 577, 584, 586, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 605, 606, 608, 674, 684, 695, 697, 717, 720], "For": [0, 1, 5, 9, 14, 20, 32, 37, 71, 89, 169, 170, 171, 172, 174, 175, 176, 177, 178, 185, 186, 187, 189, 190, 192, 194, 195, 196, 203, 204, 205, 210, 211, 212, 213, 214, 217, 222, 224, 225, 227, 231, 232, 233, 234, 235, 236, 239, 240, 242, 262, 263, 267, 286, 293, 296, 302, 358, 373, 503, 506, 511, 513, 519, 521, 557, 559, 563, 571, 582, 621, 622, 623, 624, 632, 634, 635, 637, 648, 659, 682, 683, 684, 686, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 719, 720, 721, 722, 724, 725, 729, 730, 733, 738, 739], "jax": [0, 2, 3, 9, 10, 20, 25, 33, 55, 57, 60, 276, 296, 311, 410, 439, 470, 488, 500, 508, 519, 621, 622, 623, 624, 658, 671, 680, 683, 684, 688, 689, 690, 691, 693, 695, 699, 700, 703, 705, 708, 709, 710, 711, 712, 713, 715, 717, 719, 722, 725, 733, 735, 738, 739], "jit": [0, 717, 725, 732], "tupl": [0, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 72, 73, 84, 86, 90, 91, 93, 96, 98, 102, 103, 104, 115, 116, 117, 121, 122, 128, 129, 135, 145, 148, 149, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 256, 260, 261, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 296, 298, 299, 300, 302, 305, 306, 307, 309, 311, 317, 318, 319, 321, 322, 323, 324, 326, 331, 332, 335, 336, 337, 338, 340, 341, 342, 347, 348, 356, 357, 358, 359, 360, 369, 373, 375, 376, 377, 378, 381, 383, 384, 385, 386, 388, 389, 391, 392, 393, 401, 402, 403, 404, 406, 407, 408, 411, 414, 415, 417, 418, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 457, 467, 468, 469, 470, 472, 473, 474, 475, 487, 488, 489, 490, 491, 493, 495, 498, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 559, 561, 562, 563, 566, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 593, 595, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 610, 611, 612, 613, 615, 618, 619, 621, 622, 623, 624, 625, 626, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 661, 662, 664, 674, 694, 699, 705, 706, 709, 711, 712, 717, 720, 721, 725], "dict": [0, 2, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 115, 116, 117, 121, 122, 129, 145, 148, 149, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 302, 321, 322, 323, 324, 356, 357, 358, 360, 373, 375, 376, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 412, 414, 415, 417, 418, 422, 423, 424, 426, 427, 428, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 449, 453, 454, 467, 468, 470, 472, 474, 475, 487, 498, 504, 505, 508, 515, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 590, 591, 593, 596, 597, 598, 599, 601, 602, 603, 607, 608, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 644, 645, 659, 662, 664, 671, 694, 697, 720, 721, 727], "returntype": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 648, 649, 650, 653, 654, 661, 662, 664, 668, 671, 674, 675, 678, 680, 686, 689, 690, 691, 692, 693, 694, 697, 700, 701, 702, 703, 705, 707, 709, 711, 712, 713, 715, 717, 719, 720, 732, 733, 736], "lazygraph": [0, 2], "modul": [0, 24, 26, 47, 49, 292, 294, 295, 303, 304, 308, 312, 450, 508, 644, 658, 659, 660, 662, 663, 665, 667, 670, 671, 680, 684, 687, 690, 694, 695, 696, 703, 706, 709, 710, 712, 717, 718, 720, 722, 724, 725, 732, 733, 735], "moduletyp": [0, 2], "A": [0, 1, 2, 5, 6, 9, 10, 16, 18, 22, 23, 26, 29, 31, 32, 33, 36, 37, 39, 41, 43, 46, 49, 67, 68, 70, 82, 90, 96, 102, 143, 162, 224, 226, 230, 253, 261, 262, 263, 265, 275, 278, 282, 283, 293, 296, 299, 300, 302, 305, 306, 311, 327, 341, 348, 352, 360, 363, 375, 377, 381, 382, 383, 384, 387, 388, 389, 390, 391, 399, 408, 410, 414, 416, 437, 438, 467, 468, 469, 472, 499, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 515, 517, 521, 522, 533, 542, 544, 547, 548, 553, 554, 558, 559, 571, 574, 576, 580, 582, 590, 593, 595, 597, 598, 599, 600, 601, 605, 606, 607, 608, 610, 611, 612, 613, 615, 621, 631, 639, 640, 642, 644, 645, 647, 648, 649, 650, 654, 660, 661, 678, 681, 682, 683, 684, 688, 689, 690, 692, 697, 699, 700, 703, 705, 706, 710, 711, 712, 717, 720, 725, 727, 732, 733], "non": [0, 2, 6, 8, 9, 14, 18, 19, 22, 23, 29, 31, 32, 37, 41, 42, 45, 46, 84, 101, 119, 128, 197, 217, 218, 223, 269, 274, 296, 300, 302, 311, 348, 357, 358, 404, 407, 503, 504, 506, 511, 515, 517, 518, 521, 522, 539, 540, 550, 552, 559, 561, 565, 566, 603, 612, 616, 617, 618, 619, 632, 633, 634, 635, 636, 638, 639, 640, 661, 663, 664, 666, 694, 697, 699, 701, 717, 732], "initi": [0, 2, 13, 26, 36, 49, 510, 535, 659, 660, 662, 663, 664, 666, 667, 680, 683, 691, 695, 699, 700, 711, 712, 717, 732, 738, 739], "object": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 79, 83, 84, 105, 114, 117, 125, 128, 163, 221, 388, 491, 503, 504, 505, 509, 515, 517, 593, 595, 597, 598, 599, 605, 606, 607, 608, 615, 644, 645, 651, 652, 653, 659, 662, 663, 664, 671, 674, 680, 694, 695, 697, 698, 707, 710, 711, 712, 715, 719, 722, 732, 738], "forward": [0, 9, 32, 299, 321, 326, 327, 331, 332, 342, 659, 661, 663, 664, 666, 680, 690, 695, 702, 708, 712, 713, 715, 722, 724, 725, 732, 733], "pass": [0, 2, 8, 9, 24, 26, 31, 32, 47, 49, 67, 68, 70, 106, 128, 143, 162, 177, 223, 302, 305, 306, 311, 365, 381, 383, 387, 407, 408, 439, 502, 504, 505, 506, 508, 514, 587, 588, 642, 644, 648, 654, 659, 663, 664, 666, 667, 671, 674, 678, 680, 689, 691, 693, 694, 695, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 725, 730], "same": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 48, 61, 71, 81, 86, 88, 89, 91, 93, 94, 95, 96, 98, 101, 102, 103, 114, 117, 162, 169, 170, 171, 172, 174, 176, 180, 182, 185, 189, 195, 196, 202, 222, 224, 226, 229, 231, 232, 233, 242, 246, 253, 261, 262, 263, 267, 273, 288, 291, 293, 296, 299, 300, 302, 305, 307, 309, 311, 317, 318, 319, 335, 336, 337, 338, 340, 341, 342, 347, 360, 373, 376, 381, 383, 392, 394, 399, 400, 401, 402, 403, 404, 405, 410, 446, 498, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 563, 565, 572, 575, 576, 578, 579, 581, 582, 587, 588, 603, 613, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 647, 648, 649, 662, 674, 680, 682, 684, 686, 690, 691, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 719, 721, 722, 725, 729, 731, 738, 739], "copi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 26, 28, 29, 30, 31, 32, 33, 39, 72, 73, 79, 83, 101, 163, 223, 302, 354, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 457, 467, 474, 475, 503, 504, 505, 506, 508, 513, 515, 520, 574, 575, 576, 578, 580, 581, 583, 585, 591, 626, 628, 690, 691, 693, 695, 698, 699, 702, 710, 711, 717, 724, 725], "everi": [0, 2, 5, 9, 10, 32, 33, 85, 86, 246, 276, 291, 296, 299, 302, 335, 336, 337, 378, 411, 503, 508, 686, 689, 691, 693, 695, 696, 698, 699, 701, 704, 705, 706, 707, 709, 710, 711, 712, 717, 719, 721, 732], "method": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 101, 102, 103, 104, 114, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 503, 504, 506, 508, 509, 512, 515, 518, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 559, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 601, 602, 603, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 644, 654, 660, 661, 662, 663, 664, 689, 691, 693, 694, 695, 698, 699, 700, 701, 702, 705, 712, 713, 717, 718, 721, 722, 725, 733, 739], "To": [0, 1, 2, 196, 301, 353, 462, 506, 508, 661, 686, 689, 690, 693, 694, 695, 696, 699, 701, 703, 704, 706, 707, 710, 711, 712, 713, 720, 721, 722], "you": [0, 1, 2, 9, 10, 32, 33, 48, 49, 302, 311, 363, 408, 429, 430, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 536, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "need": [0, 1, 2, 9, 10, 16, 32, 33, 39, 299, 300, 311, 321, 326, 327, 331, 347, 408, 417, 418, 439, 508, 510, 511, 513, 515, 536, 543, 571, 574, 601, 648, 680, 684, 686, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 715, 717, 719, 720, 724, 725, 728, 732, 733, 734, 738], "correspond": [0, 2, 6, 8, 9, 10, 13, 16, 19, 20, 22, 26, 29, 31, 32, 36, 39, 45, 49, 102, 114, 117, 177, 227, 241, 262, 272, 273, 293, 296, 299, 300, 302, 305, 311, 321, 327, 338, 342, 344, 347, 348, 349, 366, 367, 374, 381, 382, 383, 402, 403, 467, 488, 504, 506, 508, 510, 511, 513, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 539, 543, 544, 550, 557, 558, 578, 579, 610, 616, 617, 621, 622, 623, 624, 629, 630, 635, 636, 637, 638, 644, 647, 649, 674, 680, 689, 691, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 708, 710, 712, 715, 717, 732], "input": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 143, 145, 146, 159, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 453, 454, 455, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 648, 654, 658, 661, 662, 664, 665, 674, 693, 694, 695, 697, 699, 700, 701, 702, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 725, 733, 736], "let": [0, 2, 10, 22, 33, 169, 170, 171, 172, 175, 178, 187, 190, 192, 194, 203, 204, 205, 210, 212, 225, 233, 235, 236, 240, 429, 430, 506, 508, 511, 521, 563, 633, 635, 636, 637, 638, 680, 684, 686, 689, 694, 696, 697, 699, 700, 701, 702, 703, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 739], "start": [0, 1, 2, 5, 9, 26, 28, 32, 36, 71, 84, 87, 88, 280, 289, 296, 297, 299, 302, 341, 365, 503, 649, 660, 674, 680, 685, 686, 689, 690, 691, 692, 698, 699, 701, 702, 704, 705, 710, 712, 715, 716, 717, 719, 720, 721, 724, 725, 732, 738], "simpl": [0, 2, 9, 32, 311, 401, 649, 662, 680, 682, 689, 690, 691, 694, 696, 697, 699, 700, 701, 702, 706, 709, 710, 712, 713, 715, 719, 721, 722, 725, 727, 731, 732, 733, 734], "import": [0, 1, 2, 9, 20, 24, 28, 32, 47, 143, 144, 148, 158, 160, 311, 401, 505, 514, 519, 589, 624, 654, 671, 680, 683, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 707, 708, 709, 710, 711, 712, 713, 717, 719, 720, 722, 725, 728, 730, 732, 735, 736, 738], "set_backend": [0, 2, 8, 10, 24, 31, 33, 116, 125, 143, 144, 158, 160, 173, 415, 439, 504, 505, 508, 514, 589, 671, 680, 693, 695, 699, 700, 706, 707, 708, 717, 719, 722], "torch": [0, 2, 5, 10, 14, 24, 33, 37, 79, 116, 143, 144, 158, 160, 232, 415, 439, 470, 503, 504, 505, 506, 508, 511, 514, 559, 589, 644, 659, 671, 680, 690, 691, 693, 694, 695, 696, 698, 699, 700, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 719, 720, 722, 725, 727, 738], "def": [0, 2, 8, 31, 67, 173, 416, 502, 508, 514, 515, 589, 596, 674, 680, 689, 690, 693, 694, 697, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 715, 717, 719, 720, 721, 722], "fn": [0, 9, 26, 29, 32, 51, 74, 75, 76, 77, 78, 115, 116, 148, 149, 152, 302, 355, 412, 427, 428, 476, 503, 504, 505, 508, 515, 596, 597, 598, 600, 601, 602, 642, 644, 668, 671, 675, 676, 678, 700, 703, 709, 710, 717], "x": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 71, 72, 73, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 121, 122, 124, 129, 145, 146, 150, 155, 156, 157, 161, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 264, 266, 267, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 365, 370, 371, 372, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 457, 458, 459, 462, 465, 466, 467, 469, 470, 472, 474, 475, 476, 487, 488, 490, 491, 492, 494, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 593, 596, 597, 598, 599, 600, 601, 602, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 662, 665, 668, 671, 674, 678, 680, 689, 694, 695, 697, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 715, 717, 719, 720, 721, 722], "y": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 79, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 101, 102, 103, 112, 114, 117, 129, 142, 146, 150, 155, 156, 157, 161, 163, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 265, 271, 277, 278, 279, 280, 281, 286, 287, 289, 291, 293, 296, 299, 300, 301, 302, 305, 311, 318, 320, 322, 323, 327, 330, 332, 336, 344, 348, 350, 352, 353, 360, 362, 370, 373, 376, 377, 380, 384, 385, 386, 394, 400, 401, 402, 403, 404, 407, 410, 411, 414, 417, 418, 421, 422, 424, 425, 426, 429, 430, 431, 435, 437, 438, 439, 441, 442, 445, 446, 451, 457, 458, 459, 462, 465, 466, 467, 470, 472, 474, 475, 476, 479, 480, 483, 486, 487, 488, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 529, 532, 533, 534, 538, 539, 540, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 557, 559, 560, 561, 563, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 593, 596, 597, 599, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 678, 680, 695, 697, 700, 701, 708, 710, 711, 712, 713, 715, 717, 719], "z": [0, 5, 8, 9, 10, 14, 15, 18, 20, 22, 28, 31, 32, 33, 37, 38, 39, 41, 45, 48, 49, 87, 88, 90, 91, 150, 172, 173, 177, 179, 182, 184, 189, 200, 201, 204, 205, 206, 208, 209, 214, 216, 218, 219, 220, 221, 229, 238, 245, 246, 267, 291, 296, 301, 311, 353, 359, 360, 370, 400, 401, 404, 410, 414, 426, 429, 430, 437, 438, 454, 466, 467, 476, 488, 503, 505, 506, 508, 511, 512, 513, 515, 517, 518, 519, 521, 539, 549, 554, 555, 559, 566, 568, 569, 570, 571, 593, 597, 599, 607, 611, 612, 613, 616, 621, 631, 632, 634, 635, 636, 661, 680, 695, 697, 700, 701, 717, 719], "k": [0, 5, 9, 13, 14, 18, 28, 31, 32, 36, 37, 41, 67, 82, 94, 95, 96, 216, 253, 261, 293, 300, 302, 306, 309, 311, 345, 375, 377, 387, 388, 389, 390, 391, 394, 404, 414, 502, 503, 508, 510, 511, 515, 517, 518, 537, 541, 549, 550, 556, 558, 559, 560, 563, 598, 611, 612, 613, 619, 680, 692, 693, 710, 711, 717, 728, 732], "j": [0, 5, 8, 9, 14, 22, 28, 31, 32, 37, 70, 91, 170, 171, 172, 173, 175, 178, 187, 189, 192, 194, 202, 210, 212, 216, 222, 233, 235, 236, 239, 240, 267, 296, 299, 300, 311, 326, 327, 331, 342, 343, 347, 349, 410, 414, 502, 503, 506, 508, 511, 521, 543, 563, 631, 691, 692, 696, 728], "concat": [0, 10, 16, 26, 39, 162, 426, 505, 508, 513, 586, 711, 715, 717], "sum_j": 0, "sum": [0, 2, 8, 9, 10, 13, 14, 15, 22, 26, 31, 32, 33, 36, 37, 38, 45, 48, 49, 162, 172, 214, 238, 263, 283, 293, 296, 300, 301, 311, 341, 346, 353, 407, 408, 423, 453, 454, 505, 506, 508, 510, 511, 512, 521, 533, 537, 550, 559, 563, 566, 568, 569, 570, 630, 631, 661, 663, 674, 680, 697, 699, 706, 708, 709, 710, 717], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 101, 102, 103, 104, 108, 112, 113, 114, 117, 122, 124, 129, 145, 146, 150, 154, 155, 157, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 451, 453, 454, 457, 466, 467, 468, 469, 470, 472, 474, 475, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 654, 660, 661, 662, 663, 664, 665, 666, 667, 671, 674, 680, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 715, 716, 717, 719, 720, 721, 722, 725], "2": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 101, 102, 103, 104, 108, 112, 114, 122, 124, 129, 145, 146, 147, 150, 153, 155, 157, 160, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 309, 311, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 389, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 451, 453, 454, 457, 466, 467, 469, 470, 472, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 649, 650, 658, 661, 662, 671, 674, 680, 690, 691, 693, 695, 696, 697, 698, 699, 701, 703, 705, 706, 708, 709, 710, 711, 712, 716, 717, 719, 720, 721, 722, 725, 738, 739], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 72, 73, 82, 84, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 101, 102, 103, 104, 108, 112, 114, 122, 124, 129, 143, 145, 146, 157, 160, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 322, 325, 326, 327, 330, 331, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 389, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 453, 454, 466, 467, 472, 475, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 650, 662, 674, 680, 689, 690, 693, 694, 695, 697, 698, 699, 701, 703, 708, 711, 712, 717, 719, 720, 721, 722, 739], "4": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 62, 63, 70, 71, 72, 73, 79, 82, 84, 86, 87, 88, 89, 90, 91, 93, 96, 98, 102, 103, 104, 112, 114, 117, 122, 124, 129, 146, 147, 155, 160, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 259, 260, 261, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 286, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 322, 323, 325, 326, 327, 330, 331, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 356, 357, 358, 360, 361, 362, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 389, 391, 392, 394, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 417, 418, 421, 422, 423, 424, 426, 429, 430, 432, 435, 437, 438, 439, 446, 453, 454, 467, 469, 470, 472, 476, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 563, 564, 566, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 650, 661, 662, 666, 674, 680, 684, 689, 690, 695, 696, 697, 698, 699, 701, 708, 711, 712, 715, 717, 719, 720, 721, 722, 732, 738, 739], "compiled_fn": 0, "In": [0, 2, 7, 10, 16, 30, 33, 39, 156, 163, 164, 168, 172, 189, 190, 196, 204, 205, 222, 225, 231, 233, 299, 305, 322, 323, 324, 381, 383, 412, 439, 505, 506, 508, 511, 513, 517, 557, 578, 613, 680, 682, 684, 686, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 724, 725, 728, 730, 732, 733, 735, 738], "case": [0, 2, 4, 5, 9, 10, 16, 22, 26, 28, 32, 33, 39, 49, 73, 89, 115, 116, 143, 148, 149, 156, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 203, 204, 205, 210, 211, 212, 213, 214, 217, 222, 225, 227, 231, 232, 233, 234, 235, 236, 239, 240, 242, 274, 276, 286, 296, 299, 302, 305, 306, 322, 323, 324, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 381, 383, 389, 432, 439, 453, 454, 455, 503, 504, 505, 506, 508, 511, 513, 515, 521, 557, 563, 574, 575, 576, 578, 580, 581, 583, 585, 593, 599, 632, 633, 634, 635, 636, 637, 638, 647, 663, 664, 666, 680, 683, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 719, 721, 722, 725, 731, 735], "would": [0, 1, 5, 7, 9, 16, 28, 30, 32, 39, 58, 62, 73, 163, 299, 302, 326, 331, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 500, 505, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 649, 680, 683, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 705, 707, 709, 710, 711, 712, 713, 715, 716, 717, 719, 721, 722, 725, 732, 738], "can": [0, 1, 2, 5, 6, 9, 10, 14, 16, 18, 20, 28, 29, 32, 33, 37, 39, 41, 43, 57, 60, 72, 73, 88, 90, 104, 143, 160, 161, 162, 247, 250, 291, 299, 305, 306, 309, 311, 321, 334, 360, 381, 388, 389, 394, 401, 446, 488, 491, 500, 503, 504, 505, 508, 509, 510, 511, 513, 517, 536, 542, 549, 559, 563, 578, 582, 611, 612, 613, 621, 644, 647, 648, 649, 650, 654, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 738, 739], "observ": [0, 9, 32, 311, 400, 401, 691, 703, 717, 734], "As": [0, 2, 20, 24, 47, 519, 621, 622, 623, 624, 680, 682, 689, 690, 691, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 709, 710, 711, 712, 715, 719, 720, 721, 725, 732, 737], "variabl": [0, 1, 9, 10, 11, 17, 26, 32, 33, 34, 40, 67, 68, 70, 306, 311, 389, 400, 401, 415, 439, 440, 441, 442, 445, 470, 490, 491, 493, 495, 496, 497, 502, 508, 509, 511, 514, 516, 558, 587, 588, 589, 609, 644, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 691, 695, 699, 702, 705, 708, 709, 712, 713, 717, 720, 721, 722, 725, 733], "calcul": [0, 8, 9, 10, 15, 22, 26, 31, 32, 33, 37, 38, 45, 49, 169, 170, 171, 172, 173, 174, 175, 176, 177, 186, 187, 189, 192, 193, 194, 210, 211, 212, 213, 214, 215, 220, 221, 222, 227, 234, 235, 236, 238, 239, 240, 276, 286, 296, 299, 300, 302, 305, 311, 317, 318, 319, 348, 373, 381, 383, 408, 446, 506, 508, 511, 512, 521, 545, 554, 557, 568, 569, 570, 632, 633, 634, 635, 636, 637, 638, 647, 649, 661, 662, 665, 683, 689, 702, 717], "valu": [0, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 63, 67, 68, 70, 71, 82, 85, 86, 87, 88, 91, 96, 101, 118, 122, 128, 161, 162, 169, 170, 171, 172, 174, 176, 177, 178, 185, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 247, 252, 253, 259, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 275, 276, 278, 279, 281, 284, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 310, 311, 321, 334, 341, 345, 348, 364, 368, 373, 374, 376, 377, 378, 381, 383, 387, 388, 390, 391, 397, 399, 402, 403, 404, 407, 408, 410, 415, 417, 418, 419, 421, 426, 429, 430, 432, 434, 437, 438, 439, 446, 453, 454, 457, 458, 459, 462, 470, 475, 479, 480, 483, 486, 487, 488, 489, 490, 491, 495, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 541, 544, 545, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 566, 571, 572, 573, 577, 578, 586, 587, 588, 592, 594, 595, 596, 597, 598, 603, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 642, 644, 647, 648, 649, 650, 653, 660, 661, 662, 663, 664, 665, 666, 690, 691, 693, 696, 697, 699, 700, 701, 702, 703, 705, 706, 709, 710, 712, 714, 715, 717, 719, 725, 732, 733], "wa": [0, 2, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 285, 286, 287, 288, 289, 296, 322, 323, 324, 356, 357, 358, 360, 375, 376, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 476, 487, 493, 498, 506, 508, 515, 521, 522, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 671, 680, 683, 691, 693, 698, 701, 706, 708, 710, 717, 719, 731, 732, 734], "like": [0, 2, 5, 8, 9, 16, 28, 31, 32, 36, 39, 44, 88, 105, 128, 173, 193, 199, 202, 215, 233, 270, 273, 285, 296, 299, 300, 302, 309, 311, 341, 342, 347, 357, 358, 365, 393, 394, 410, 503, 504, 506, 511, 513, 517, 520, 543, 578, 613, 626, 680, 683, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 724, 725, 732, 737], "were": [0, 26, 29, 117, 121, 122, 196, 506, 691, 699, 703, 704, 708, 709, 711, 712, 713, 715, 717, 732, 733, 738], "exclud": [0, 22, 32, 45, 71, 96, 261, 293, 402, 403, 503, 517, 613, 629, 647, 650, 671, 701, 717], "process": [0, 156, 168, 505, 683, 684, 685, 690, 691, 696, 697, 698, 704, 706, 708, 710, 711, 712, 715, 717, 722, 730, 731, 732, 735, 736, 738, 739], "tensor": [0, 2, 5, 8, 9, 10, 13, 15, 16, 18, 26, 28, 31, 32, 33, 36, 37, 38, 39, 41, 79, 87, 88, 91, 96, 112, 128, 220, 221, 247, 250, 261, 266, 291, 293, 296, 299, 302, 311, 317, 318, 321, 325, 334, 335, 336, 337, 365, 407, 453, 454, 503, 504, 506, 508, 510, 511, 512, 513, 517, 533, 535, 536, 548, 561, 568, 578, 580, 610, 662, 671, 680, 682, 694, 695, 699, 700, 705, 706, 709, 710, 711, 712, 713, 715, 717, 719, 720, 722, 725, 727, 729, 730, 733, 735, 736, 739], "shape": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 157, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 266, 267, 268, 270, 273, 275, 277, 279, 280, 281, 282, 286, 288, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 331, 332, 334, 335, 336, 337, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 363, 372, 373, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 400, 401, 402, 403, 404, 417, 418, 422, 423, 424, 426, 429, 430, 433, 439, 446, 453, 454, 463, 471, 473, 484, 488, 489, 490, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 625, 626, 628, 629, 630, 631, 633, 635, 636, 638, 639, 640, 644, 647, 649, 661, 662, 665, 674, 680, 691, 697, 699, 700, 701, 702, 703, 705, 709, 710, 711, 712, 713, 714, 717, 719, 720, 721, 722], "indic": [0, 5, 9, 10, 13, 14, 16, 17, 19, 20, 21, 26, 28, 29, 32, 33, 36, 37, 39, 40, 42, 43, 44, 72, 73, 91, 94, 96, 117, 121, 122, 233, 261, 276, 293, 296, 299, 300, 302, 307, 309, 317, 318, 319, 321, 325, 326, 327, 331, 332, 335, 336, 337, 338, 342, 348, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 379, 392, 393, 394, 414, 429, 430, 432, 453, 454, 457, 488, 491, 492, 503, 506, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 524, 526, 527, 528, 529, 532, 536, 552, 566, 574, 575, 576, 578, 579, 580, 581, 583, 585, 590, 593, 595, 597, 598, 599, 601, 605, 606, 607, 608, 609, 610, 616, 617, 618, 619, 621, 623, 625, 627, 628, 644, 645, 647, 649, 660, 662, 663, 664, 668, 674, 676, 698, 705, 708, 710, 722], "trace": [0, 2, 10, 14, 26, 33, 37, 441, 442, 445, 456, 464, 478, 485, 508, 511, 680, 693, 699, 714, 717, 725, 727, 733, 738], "doesn": [0, 439, 508, 662, 690, 695, 697, 698, 699, 700, 701, 704, 708, 712, 715, 717, 725, 730], "impos": 0, "addit": [0, 7, 9, 10, 17, 30, 32, 33, 40, 68, 70, 163, 172, 232, 311, 400, 405, 422, 423, 424, 488, 502, 505, 506, 508, 514, 516, 589, 609, 662, 689, 690, 691, 695, 699, 701, 702, 704, 706, 708, 709, 710, 712, 713, 715, 719, 720, 722, 732, 733, 734, 738], "restrict": [0, 697, 698, 710, 717, 729], "datatyp": [0, 5, 26, 28, 73, 86, 90, 106, 127, 131, 503, 504, 642, 713], "out": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 112, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 359, 360, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 422, 423, 424, 426, 429, 430, 439, 449, 453, 454, 489, 490, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 654, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "differ": [0, 1, 2, 8, 9, 10, 14, 22, 26, 32, 33, 45, 48, 49, 57, 60, 114, 172, 189, 196, 197, 222, 238, 265, 270, 273, 274, 278, 296, 299, 302, 311, 332, 342, 366, 367, 375, 402, 403, 410, 429, 430, 500, 504, 506, 508, 510, 511, 513, 521, 533, 534, 546, 557, 572, 582, 629, 630, 635, 637, 638, 664, 680, 682, 683, 684, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 725, 729, 730, 731, 732, 735, 738, 739], "b": [0, 3, 8, 9, 10, 13, 14, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 72, 73, 79, 84, 85, 86, 88, 91, 93, 98, 101, 102, 103, 104, 112, 122, 124, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 299, 300, 302, 306, 309, 311, 317, 318, 319, 320, 322, 323, 326, 330, 331, 332, 335, 336, 337, 341, 346, 348, 350, 352, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 385, 386, 388, 389, 391, 392, 394, 401, 402, 403, 404, 406, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 446, 453, 454, 467, 470, 474, 475, 487, 489, 490, 491, 493, 495, 497, 498, 500, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 540, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 674, 680, 681, 684, 685, 691, 692, 693, 695, 697, 698, 701, 706, 708, 711, 716, 717, 718, 720, 721, 722, 723, 728], "new": [0, 1, 9, 10, 11, 16, 17, 26, 28, 32, 33, 34, 37, 39, 40, 80, 83, 85, 86, 91, 92, 93, 97, 98, 135, 178, 224, 226, 230, 265, 268, 278, 283, 296, 302, 311, 354, 360, 372, 374, 408, 422, 423, 424, 426, 429, 430, 432, 453, 454, 458, 465, 467, 468, 474, 490, 493, 495, 496, 497, 503, 504, 506, 508, 509, 513, 515, 516, 546, 554, 574, 578, 582, 595, 607, 608, 609, 659, 662, 665, 666, 671, 680, 682, 683, 684, 685, 689, 690, 691, 692, 694, 695, 697, 698, 699, 701, 702, 704, 707, 709, 710, 711, 712, 713, 715, 716, 719, 722, 724, 727, 730, 734, 738, 739], "run": [0, 2, 9, 11, 32, 34, 305, 381, 383, 489, 490, 495, 509, 514, 587, 588, 589, 644, 645, 662, 663, 664, 665, 674, 680, 686, 687, 689, 690, 692, 694, 695, 698, 700, 701, 703, 704, 705, 707, 710, 711, 717, 718, 719, 720, 721, 722, 724, 725, 726, 730, 732, 733, 734, 735, 737, 738, 739], "under": [0, 2, 301, 353, 674, 680, 689, 690, 692, 693, 700, 701, 702, 704, 710, 711, 712, 715, 716, 717, 720, 722, 725, 732, 735, 739], "hood": [0, 2, 680, 692, 700, 701, 704, 710, 712, 715, 716, 717, 720, 722, 739], "track": [0, 515, 602, 660, 663, 664, 690, 691, 693, 708, 709, 732], "befor": [0, 2, 9, 13, 14, 16, 20, 22, 26, 32, 36, 37, 159, 162, 167, 299, 302, 311, 326, 331, 341, 366, 367, 373, 402, 403, 505, 510, 511, 513, 514, 515, 519, 521, 523, 524, 525, 526, 528, 530, 532, 536, 537, 549, 566, 572, 587, 588, 602, 621, 622, 623, 624, 629, 630, 635, 637, 660, 671, 674, 689, 690, 691, 693, 694, 696, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 717, 720, 725, 732], "instead": [0, 2, 8, 9, 14, 31, 32, 37, 143, 231, 256, 293, 299, 311, 335, 336, 337, 401, 404, 505, 506, 511, 552, 647, 689, 690, 691, 693, 696, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 715, 717, 719, 720, 725, 730, 732, 738, 739], "allow": [0, 2, 9, 32, 87, 227, 311, 404, 408, 449, 503, 506, 508, 520, 627, 647, 648, 649, 650, 660, 663, 664, 678, 680, 683, 686, 689, 691, 694, 695, 698, 699, 703, 704, 707, 708, 709, 710, 711, 712, 715, 717, 719, 725, 727, 730, 732, 736, 737], "dynam": [0, 513, 578, 671, 692, 698, 699, 700, 709, 710, 714, 717, 732, 736], "done": [0, 2, 511, 545, 688, 689, 690, 691, 693, 696, 698, 700, 701, 704, 709, 710, 712, 720, 732], "first": [0, 1, 2, 5, 8, 9, 14, 16, 18, 19, 20, 22, 28, 31, 32, 33, 37, 39, 41, 43, 45, 48, 49, 67, 68, 87, 88, 96, 127, 135, 145, 172, 177, 179, 181, 182, 183, 184, 190, 196, 197, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 218, 219, 222, 225, 227, 238, 239, 247, 253, 261, 262, 263, 265, 274, 276, 277, 278, 284, 287, 288, 291, 293, 296, 299, 300, 302, 309, 311, 321, 346, 347, 348, 350, 361, 365, 371, 373, 375, 378, 388, 390, 394, 402, 403, 404, 410, 414, 502, 503, 504, 505, 506, 508, 510, 511, 513, 514, 515, 518, 519, 520, 521, 536, 539, 542, 543, 544, 546, 549, 554, 556, 557, 559, 561, 565, 578, 579, 582, 583, 587, 588, 589, 590, 591, 600, 601, 603, 615, 616, 617, 621, 622, 623, 626, 627, 629, 630, 644, 661, 662, 663, 664, 666, 671, 680, 682, 683, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 701, 704, 705, 706, 707, 709, 710, 712, 715, 717, 719, 720, 722, 730, 732, 733, 737], "invok": [0, 2, 9, 299, 321, 680, 704, 706], "onc": [0, 1, 14, 18, 37, 41, 162, 300, 347, 505, 511, 517, 543, 544, 545, 559, 610, 684, 689, 690, 691, 697, 698, 699, 700, 701, 704, 709, 710, 712, 715, 717, 720, 725], "been": [0, 1, 10, 18, 33, 41, 145, 232, 422, 423, 424, 505, 506, 508, 517, 610, 674, 689, 691, 693, 695, 697, 698, 699, 700, 702, 703, 705, 706, 709, 712, 717, 719, 724, 725, 727, 732, 739], "directli": [0, 1, 2, 515, 602, 680, 684, 691, 693, 694, 697, 698, 699, 700, 702, 704, 706, 707, 709, 710, 711, 713, 714, 717, 719, 721, 722, 724, 725, 736, 737, 738], "here": [0, 2, 232, 506, 680, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 724, 725, 732, 733], "eager_graph": [0, 2, 680], "doe": [0, 8, 9, 10, 16, 26, 31, 32, 39, 96, 184, 223, 225, 233, 261, 293, 300, 301, 311, 347, 353, 407, 408, 439, 503, 506, 508, 511, 513, 543, 580, 642, 683, 689, 691, 692, 695, 698, 699, 701, 702, 704, 705, 706, 709, 710, 711, 712, 715, 717, 719, 720, 725, 727, 728, 732, 733, 739], "lazy_graph": [0, 2, 680], "up": [0, 9, 10, 32, 33, 299, 302, 321, 334, 367, 446, 508, 510, 533, 660, 682, 683, 684, 685, 686, 689, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "enabl": [0, 9, 14, 26, 37, 49, 299, 301, 321, 353, 511, 552, 680, 683, 690, 691, 694, 697, 699, 706, 707, 708, 709, 710, 712, 713, 716, 718, 720, 722, 725, 727, 730, 731, 732, 733, 734, 735, 738, 739], "delai": [0, 691], "until": [0, 683, 691, 709, 717, 725, 739], "have": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 114, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 266, 267, 275, 277, 279, 280, 281, 282, 286, 288, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 331, 332, 334, 335, 336, 337, 340, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 357, 358, 360, 361, 363, 375, 377, 384, 385, 386, 387, 388, 390, 391, 392, 394, 401, 402, 403, 404, 408, 417, 418, 422, 423, 424, 429, 430, 439, 453, 454, 489, 490, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 658, 659, 660, 661, 662, 664, 665, 666, 667, 674, 680, 681, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "necessari": [0, 2, 5, 9, 16, 28, 32, 39, 73, 189, 222, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 461, 482, 506, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 680, 690, 694, 695, 697, 701, 709, 710, 712, 714, 715], "particularli": [0, 691, 720, 725, 730], "librari": [0, 7, 20, 30, 163, 194, 196, 212, 217, 218, 240, 505, 506, 511, 519, 521, 544, 545, 621, 622, 623, 624, 632, 633, 634, 636, 680, 682, 683, 684, 685, 687, 689, 690, 693, 722, 723, 725, 727, 728, 729, 730, 732, 736, 739], "where": [0, 5, 8, 9, 10, 14, 16, 18, 19, 22, 23, 26, 28, 31, 32, 33, 37, 39, 41, 42, 45, 46, 85, 86, 89, 91, 96, 177, 187, 189, 192, 194, 196, 197, 206, 211, 212, 213, 220, 221, 222, 227, 229, 233, 235, 239, 245, 247, 261, 262, 263, 274, 278, 285, 291, 293, 296, 299, 300, 302, 305, 306, 311, 313, 314, 315, 321, 326, 327, 331, 347, 348, 356, 357, 358, 368, 373, 381, 382, 383, 387, 388, 390, 391, 401, 410, 439, 453, 488, 503, 506, 508, 510, 511, 513, 515, 517, 518, 521, 522, 536, 539, 543, 544, 548, 550, 552, 554, 555, 556, 559, 560, 563, 565, 571, 573, 574, 576, 582, 586, 601, 610, 611, 612, 613, 618, 619, 636, 638, 639, 640, 661, 665, 680, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 699, 700, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 720, 721, 722, 725, 726, 730, 739], "feasibl": [0, 683, 689, 698], "provid": [0, 2, 5, 9, 10, 14, 16, 19, 22, 23, 26, 28, 32, 33, 37, 39, 42, 45, 46, 67, 89, 91, 107, 108, 109, 110, 111, 119, 129, 141, 145, 241, 300, 302, 305, 311, 346, 361, 369, 379, 381, 383, 410, 421, 453, 454, 502, 503, 504, 505, 506, 508, 510, 511, 513, 518, 521, 522, 536, 551, 554, 565, 574, 575, 582, 616, 636, 638, 639, 640, 648, 662, 666, 671, 680, 682, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 719, 721, 724, 725, 730, 731, 732, 733, 734, 735, 736, 739], "valid": [0, 9, 13, 23, 32, 36, 46, 106, 299, 300, 317, 318, 319, 335, 336, 337, 338, 340, 341, 352, 442, 504, 508, 510, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 574, 582, 639, 640, 647, 648, 662, 674, 690, 695, 699, 701, 704, 708, 711, 712, 733], "look": [0, 680, 682, 686, 689, 690, 691, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 717, 719, 721, 722, 726, 728, 732], "find": [0, 1, 14, 20, 26, 37, 511, 515, 519, 552, 592, 621, 622, 623, 624, 674, 680, 682, 685, 688, 689, 690, 691, 693, 696, 698, 708, 712, 715, 717, 720, 727], "abl": [0, 26, 690, 691, 693, 699, 706, 709, 710, 713, 717, 722, 735, 738], "through": [0, 9, 32, 177, 311, 407, 408, 506, 515, 593, 599, 664, 674, 680, 685, 688, 689, 691, 692, 695, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 720, 721, 722, 724, 730, 732, 733, 734], "flag": [0, 2, 26, 145, 311, 401, 505, 510, 536, 644, 654, 665, 691, 699, 700, 709, 710, 711, 712], "reduc": [0, 9, 10, 14, 19, 22, 23, 26, 32, 33, 37, 42, 45, 46, 162, 283, 296, 297, 311, 406, 407, 408, 410, 423, 505, 508, 511, 518, 521, 522, 556, 616, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 674, 698, 703, 710, 715, 717, 719, 730, 734, 735, 736], "time": [0, 1, 2, 9, 11, 14, 20, 32, 34, 43, 84, 270, 296, 299, 302, 311, 327, 332, 373, 375, 401, 490, 495, 503, 509, 510, 511, 513, 514, 518, 519, 533, 535, 549, 584, 587, 588, 589, 616, 617, 621, 622, 662, 663, 664, 682, 683, 684, 689, 690, 691, 695, 697, 698, 699, 701, 705, 706, 707, 709, 710, 712, 713, 717, 720, 722, 725, 730, 732, 733, 736, 737, 738], "comp_func": 0, "default": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 121, 122, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 145, 146, 148, 149, 153, 156, 157, 158, 160, 161, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 418, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 441, 442, 445, 446, 449, 450, 453, 454, 457, 462, 466, 467, 468, 470, 472, 474, 475, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 600, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 674, 689, 690, 691, 695, 696, 699, 700, 701, 702, 703, 705, 706, 710, 712, 715, 717, 721, 727, 732], "follow": [0, 9, 10, 11, 13, 14, 20, 26, 32, 33, 34, 36, 37, 84, 117, 162, 172, 189, 196, 222, 224, 231, 232, 299, 302, 305, 321, 334, 363, 373, 374, 381, 383, 437, 438, 439, 467, 468, 490, 493, 495, 496, 497, 503, 504, 505, 506, 508, 509, 510, 511, 515, 519, 536, 537, 550, 556, 566, 596, 602, 621, 622, 623, 624, 662, 666, 680, 682, 683, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 729, 732, 735], "show": [0, 456, 464, 485, 508, 660, 680, 689, 690, 691, 696, 698, 701, 704, 709, 710, 712, 714, 724, 725, 732], "simpler": [0, 689, 691, 704, 733, 739], "obtain": [0, 299, 338, 510, 536, 649, 710], "howev": [0, 14, 37, 196, 239, 240, 305, 381, 383, 506, 511, 557, 559, 671, 683, 689, 690, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 715, 717, 719, 720, 721, 722, 725, 731, 732, 738], "desir": [0, 6, 7, 9, 19, 26, 29, 30, 32, 42, 101, 103, 104, 163, 311, 407, 410, 504, 505, 511, 518, 561, 618, 661, 662, 682, 691, 695, 698, 699, 710, 717, 732], "below": [0, 2, 5, 14, 37, 45, 94, 95, 96, 196, 206, 229, 261, 267, 293, 296, 503, 506, 511, 542, 563, 638, 680, 685, 689, 690, 692, 693, 697, 698, 699, 700, 701, 703, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 728, 730, 735, 737], "ultim": 0, "trade": 0, "off": [0, 13, 14, 36, 37, 322, 323, 324, 510, 511, 533, 542, 563, 661, 662, 684, 690, 700, 716, 738], "between": [0, 2, 8, 9, 10, 13, 14, 15, 16, 20, 26, 31, 32, 36, 38, 39, 49, 71, 114, 177, 190, 225, 227, 241, 265, 278, 280, 296, 299, 300, 301, 302, 311, 322, 323, 324, 335, 336, 337, 346, 353, 373, 410, 503, 504, 506, 510, 512, 513, 515, 517, 519, 533, 554, 568, 569, 570, 574, 582, 596, 611, 622, 623, 624, 648, 666, 682, 694, 695, 701, 705, 706, 707, 709, 710, 711, 712, 715, 716, 718, 719, 720, 722, 724, 728, 729, 731, 732, 733, 738], "memori": [0, 5, 9, 16, 28, 32, 39, 73, 89, 144, 156, 162, 164, 168, 302, 311, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 408, 432, 452, 503, 505, 508, 510, 513, 535, 574, 575, 576, 578, 580, 581, 583, 585, 680, 698, 699, 700, 709, 710, 715, 717, 723, 725, 732, 734, 735, 736], "store": [0, 6, 10, 14, 16, 26, 29, 33, 37, 39, 103, 299, 300, 342, 346, 426, 508, 511, 513, 563, 580, 644, 645, 662, 663, 664, 687, 691, 694, 695, 697, 702, 707, 709, 710, 711, 717, 719, 720, 721, 727], "thei": [0, 9, 14, 18, 20, 26, 37, 41, 43, 127, 241, 273, 296, 504, 506, 511, 514, 517, 519, 564, 587, 588, 610, 621, 642, 667, 680, 688, 689, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 715, 717, 719, 720, 721, 722, 725, 729, 732, 734, 735, 738, 739], "By": [0, 9, 15, 16, 22, 23, 32, 38, 39, 45, 46, 236, 264, 276, 283, 293, 296, 299, 301, 309, 311, 321, 353, 394, 401, 404, 506, 511, 512, 513, 521, 522, 539, 565, 568, 577, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 690, 695, 699, 701, 703, 706, 708, 709, 710, 717, 721, 722], "choos": [0, 7, 19, 20, 30, 163, 189, 196, 217, 218, 222, 505, 506, 518, 519, 521, 620, 621, 622, 623, 624, 632, 633, 634, 636, 689, 690, 691, 712, 718, 722], "node": [0, 2, 26, 33, 415, 470, 515, 600, 601, 661, 670, 683, 696, 697, 710, 733], "bake": 0, "randint": [0, 13, 18, 20, 36, 41, 517, 519, 532, 535, 621, 699], "0": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 79, 82, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 112, 114, 117, 118, 122, 124, 129, 142, 145, 147, 150, 155, 156, 157, 158, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 309, 311, 317, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 353, 355, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 416, 417, 418, 421, 422, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 449, 451, 453, 454, 457, 462, 466, 467, 470, 472, 474, 475, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 549, 550, 551, 552, 553, 555, 557, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 674, 680, 690, 691, 693, 695, 697, 698, 699, 700, 701, 702, 703, 708, 709, 710, 711, 712, 713, 717, 719, 720, 721, 722, 725], "100": [0, 5, 8, 28, 31, 33, 36, 88, 96, 183, 223, 236, 261, 278, 293, 296, 299, 322, 323, 430, 438, 454, 503, 506, 508, 511, 515, 547, 596, 680, 683, 684, 698, 699, 712, 720, 721, 722, 725], "size": [0, 9, 10, 13, 14, 16, 18, 19, 26, 32, 33, 36, 37, 39, 41, 42, 48, 49, 84, 87, 160, 161, 162, 255, 262, 263, 264, 269, 283, 289, 293, 296, 297, 299, 300, 302, 305, 306, 309, 311, 313, 314, 315, 316, 317, 318, 334, 335, 336, 338, 339, 348, 361, 377, 382, 383, 389, 394, 406, 407, 408, 410, 448, 453, 503, 505, 508, 510, 511, 513, 517, 518, 522, 537, 539, 542, 546, 550, 554, 556, 559, 565, 574, 579, 580, 581, 610, 616, 619, 639, 640, 647, 649, 650, 662, 680, 709, 711, 712, 715, 720], "rand": [0, 674, 680], "And": [0, 29, 680, 696, 704, 712], "final": [0, 2, 5, 10, 32, 33, 70, 87, 88, 299, 342, 426, 502, 503, 508, 510, 536, 689, 691, 693, 694, 695, 696, 698, 699, 701, 702, 706, 708, 709, 710, 715, 716, 720, 728, 738], "__setattr__": [0, 697], "__getattr__": [0, 697], "arbitrari": [0, 2, 5, 6, 9, 26, 29, 89, 102, 129, 356, 357, 358, 491, 503, 504, 509, 705, 706, 708, 709, 710, 712, 721, 725, 733, 738], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 84, 93, 98, 114, 117, 130, 132, 133, 192, 229, 267, 296, 310, 311, 318, 319, 347, 407, 408, 413, 422, 426, 439, 449, 470, 503, 504, 505, 506, 508, 510, 512, 515, 516, 535, 537, 543, 554, 559, 568, 584, 590, 591, 602, 609, 624, 635, 636, 644, 645, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 674, 678, 680, 689, 695, 696, 697, 699, 700, 701, 702, 705, 707, 708, 711, 712, 715, 717, 718, 720, 721, 722, 723, 724, 725, 727, 730, 732, 733, 739], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 112, 114, 115, 116, 117, 120, 121, 122, 124, 126, 129, 146, 148, 149, 150, 155, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 298, 299, 300, 301, 302, 305, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 457, 460, 462, 467, 468, 469, 470, 472, 474, 475, 481, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 597, 598, 599, 602, 603, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 653, 654, 660, 662, 663, 664, 666, 667, 671, 674, 680, 682, 686, 687, 689, 690, 692, 693, 694, 695, 696, 698, 699, 701, 702, 705, 706, 707, 708, 709, 712, 714, 715, 716, 717, 718, 721, 725, 726, 727, 732, 733, 738], "cont_deep_copi": [0, 26, 720], "some": [0, 2, 26, 34, 194, 196, 212, 299, 322, 323, 324, 489, 490, 493, 495, 496, 497, 505, 506, 509, 515, 601, 662, 680, 683, 684, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 724, 725, 726, 727, 728, 729, 731, 732, 733, 738, 739], "still": [0, 2, 14, 26, 37, 511, 559, 683, 689, 691, 694, 695, 699, 702, 703, 704, 709, 710, 712, 715, 721, 725, 729, 732, 738], "develop": [0, 2, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 696, 698, 713, 724, 725, 727, 730, 731, 732, 733, 734, 737, 738, 739], "account": [0, 9, 16, 32, 39, 236, 302, 365, 506, 513, 578, 661, 674, 690, 698, 702, 710, 713], "point": [0, 6, 8, 9, 14, 18, 20, 22, 29, 31, 32, 37, 41, 45, 71, 72, 73, 80, 82, 85, 92, 93, 97, 101, 114, 118, 122, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 202, 203, 204, 205, 210, 211, 212, 213, 214, 222, 224, 225, 227, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 253, 255, 280, 281, 284, 286, 293, 296, 299, 300, 306, 311, 322, 323, 324, 347, 387, 388, 389, 390, 391, 401, 402, 403, 410, 501, 503, 504, 506, 511, 517, 518, 519, 520, 521, 538, 540, 543, 544, 545, 547, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 566, 612, 613, 619, 621, 622, 623, 624, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 671, 684, 689, 690, 691, 693, 694, 695, 696, 698, 701, 702, 705, 709, 710, 712, 713, 715, 717, 719, 720, 724, 738], "wip": [0, 704], "ll": [0, 1, 2, 680, 684, 685, 689, 690, 691, 696, 701, 704, 708, 709, 720], "soon": [0, 689, 691, 698, 699, 723, 725], "control": [0, 9, 32, 96, 244, 261, 291, 293, 299, 302, 322, 323, 324, 376, 503, 511, 541, 660, 697, 699, 700, 708, 709, 710, 711, 715, 719, 720, 724, 727, 732, 738], "flow": [0, 697, 724, 732, 733], "built": [0, 71, 503, 662, 663, 664, 680, 690, 691, 696, 697, 712, 718, 726, 727, 731, 732, 736], "moment": [0, 2, 11, 34, 489, 490, 495, 509, 666, 689, 695, 725], "condit": [0, 19, 32, 42, 68, 300, 344, 502, 515, 518, 600, 601, 620, 649, 693, 699, 701, 703, 706, 707, 709, 712, 724], "branch": [0, 177, 189, 192, 194, 222, 234, 235, 236, 239, 506, 690, 691, 693, 698, 704, 725, 732], "loop": [0, 24, 47, 67, 70, 502, 514, 587, 588, 589, 680, 695, 700, 725], "regist": [0, 691], "correctli": [0, 2, 9, 14, 19, 32, 37, 42, 269, 296, 311, 407, 408, 410, 511, 518, 550, 616, 689, 690, 691, 694, 697, 699, 701, 703, 704, 705, 711, 712, 715, 721, 725], "while": [0, 1, 9, 13, 26, 32, 36, 49, 70, 91, 128, 196, 197, 217, 218, 274, 296, 299, 300, 342, 352, 400, 502, 503, 504, 506, 510, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 621, 633, 636, 645, 682, 683, 689, 690, 691, 694, 695, 696, 698, 699, 700, 701, 704, 705, 708, 709, 710, 711, 712, 713, 715, 719, 721, 722, 725, 732, 738, 739], "your": [0, 1, 2, 680, 683, 684, 685, 686, 688, 689, 690, 693, 695, 696, 698, 702, 704, 708, 710, 713, 715, 720, 721, 725, 726, 732], "depend": [0, 5, 6, 10, 14, 20, 21, 29, 37, 44, 45, 68, 79, 101, 169, 170, 171, 174, 175, 176, 177, 186, 187, 189, 192, 194, 210, 211, 212, 213, 222, 224, 227, 234, 235, 239, 240, 286, 296, 300, 347, 470, 502, 503, 504, 506, 508, 511, 518, 520, 543, 544, 556, 557, 558, 559, 620, 625, 628, 638, 680, 683, 686, 687, 689, 690, 691, 696, 699, 702, 707, 709, 710, 711, 712, 715, 717, 725, 726, 730, 732, 733], "chang": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 302, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 500, 506, 513, 515, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 591, 602, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 644, 680, 684, 686, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 710, 711, 712, 713, 714, 715, 717, 721, 725, 726, 735, 738], "number": [0, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 71, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 102, 107, 108, 109, 110, 111, 113, 114, 117, 120, 121, 122, 124, 126, 129, 153, 154, 155, 169, 170, 171, 172, 173, 175, 177, 178, 185, 187, 189, 190, 192, 194, 195, 196, 202, 203, 204, 206, 210, 212, 220, 221, 222, 223, 224, 225, 227, 229, 231, 232, 233, 235, 236, 240, 242, 250, 261, 262, 263, 265, 267, 268, 269, 270, 278, 283, 291, 293, 296, 299, 300, 302, 305, 311, 332, 342, 344, 347, 356, 357, 358, 373, 375, 377, 378, 381, 382, 383, 399, 401, 402, 403, 404, 426, 433, 451, 467, 468, 475, 487, 488, 501, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 517, 518, 519, 521, 522, 523, 530, 531, 533, 536, 539, 543, 544, 545, 552, 557, 559, 563, 564, 565, 568, 571, 573, 574, 576, 577, 579, 580, 582, 584, 586, 587, 588, 589, 610, 614, 619, 621, 622, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 654, 660, 661, 662, 665, 680, 681, 682, 690, 691, 697, 698, 699, 700, 701, 708, 709, 712, 713, 714, 715, 717, 720], "underli": [0, 9, 16, 32, 39, 179, 182, 184, 219, 302, 365, 506, 511, 513, 557, 578, 697, 709, 715, 732], "piec": [0, 691, 694, 706, 707, 717, 728, 730], "insid": [0, 14, 37, 49, 302, 377, 511, 552, 645, 690, 691, 694, 697, 699, 700, 706, 707, 712, 713, 738], "said": [0, 649, 684, 713], "other": [0, 2, 6, 8, 9, 10, 16, 22, 26, 29, 31, 32, 33, 39, 45, 48, 49, 71, 91, 102, 128, 189, 194, 196, 212, 221, 222, 266, 270, 296, 302, 360, 374, 411, 412, 503, 504, 506, 508, 517, 521, 572, 582, 613, 636, 638, 680, 683, 686, 689, 690, 691, 693, 694, 697, 698, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 738, 739], "numpi": [0, 2, 8, 9, 10, 22, 31, 32, 33, 96, 125, 143, 173, 233, 261, 293, 311, 401, 408, 415, 439, 467, 470, 474, 503, 504, 505, 506, 508, 521, 631, 642, 644, 671, 674, 680, 682, 683, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 703, 705, 709, 711, 712, 713, 715, 717, 719, 722, 726, 727, 734, 739], "len": [0, 5, 9, 14, 32, 37, 89, 256, 293, 299, 311, 332, 342, 410, 503, 511, 564, 680, 697, 698, 703, 709, 710, 712, 719, 722], "incorrectli": [0, 702], "There": [0, 292, 294, 295, 303, 304, 308, 312, 649, 680, 682, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 706, 708, 710, 711, 714, 717, 720, 725, 733, 734, 738, 739], "succe": [0, 690], "hide": 0, "shouldn": [0, 713], "realli": [0, 690, 697, 725, 737, 738], "check": [0, 4, 6, 10, 14, 26, 29, 33, 37, 105, 106, 115, 116, 119, 121, 122, 123, 126, 141, 148, 149, 156, 168, 415, 425, 427, 428, 435, 441, 442, 443, 444, 445, 460, 470, 481, 487, 504, 505, 508, 511, 515, 544, 545, 552, 590, 591, 600, 601, 602, 642, 649, 660, 674, 680, 687, 688, 689, 690, 691, 693, 697, 698, 701, 703, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 726], "recommend": [0, 217, 218, 231, 506, 521, 633, 636, 690, 695, 696, 704, 707, 708], "nois": [0, 2, 680], "anoth": [0, 2, 83, 102, 104, 503, 504, 680, 683, 689, 690, 691, 695, 697, 699, 700, 703, 704, 706, 709, 710, 712, 717, 719, 722, 727, 732, 738], "right": [0, 14, 26, 37, 49, 65, 66, 181, 183, 236, 277, 296, 299, 302, 333, 366, 422, 502, 506, 508, 511, 520, 559, 564, 627, 685, 689, 690, 691, 692, 693, 701, 715, 720], "feel": [0, 1, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 680, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "free": [0, 1, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 680, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "open": [0, 1, 2, 10, 18, 41, 71, 503, 517, 611, 613, 680, 682, 683, 684, 685, 690, 691, 696, 699, 702, 710, 711, 715, 724, 730, 731, 732, 734, 735], "issu": [0, 661, 684, 685, 688, 690, 693, 695, 698, 699, 700, 701, 703, 710, 712, 713, 715, 717, 721, 725], "minim": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 702, 709, 711, 715, 717, 730, 738], "resnet50": 0, "hug": 0, "face": [0, 690, 704, 708, 715, 717, 732, 738], "classifi": [0, 2, 680], "breed": 0, "cat": [0, 2, 711, 715, 717, 722], "transform": [0, 2, 9, 13, 32, 36, 299, 320, 321, 326, 327, 330, 331, 332, 342, 510, 534, 647, 650, 662, 680, 707, 712, 722, 724, 727, 730, 732, 733, 734], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 26, 680, 720, 723], "load_dataset": [0, 2], "download": [0, 2, 690, 712], "imag": [0, 2, 8, 9, 13, 31, 32, 36, 48, 169, 170, 171, 172, 175, 178, 187, 190, 192, 194, 203, 204, 205, 210, 212, 225, 232, 233, 235, 236, 240, 299, 317, 318, 334, 335, 336, 338, 422, 506, 508, 510, 523, 524, 525, 526, 527, 530, 531, 532, 662, 680, 686, 690, 715, 717, 718, 720, 722, 724, 726, 732], "huggingfac": [0, 2], "test": [0, 2, 8, 10, 23, 31, 33, 46, 70, 120, 124, 203, 204, 205, 206, 229, 299, 322, 323, 324, 446, 502, 504, 506, 508, 522, 639, 640, 642, 645, 648, 680, 684, 688, 689, 692, 696, 699, 701, 703, 704, 707, 710, 713, 725, 726, 732], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 683, 732, 737, 739], "resnet": [0, 2], "50": [0, 2, 9, 22, 31, 32, 33, 188, 228, 284, 296, 299, 300, 327, 346, 350, 424, 430, 437, 438, 454, 467, 506, 508, 511, 515, 518, 521, 547, 554, 591, 593, 619, 631, 647, 650, 708, 719], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 9, 17, 18, 32, 40, 41, 286, 296, 299, 305, 311, 320, 321, 326, 327, 330, 331, 332, 342, 381, 382, 383, 384, 385, 386, 401, 404, 513, 516, 517, 572, 582, 609, 610, 612, 661, 662, 665, 680, 689, 709, 710, 715, 720, 730], "feed": [0, 162, 505, 732, 733], "itself": [0, 8, 223, 412, 476, 506, 508, 515, 602, 682, 690, 691, 693, 696, 697, 698, 699, 703, 704, 709, 710, 721, 724, 725, 731, 732, 733, 738], "without": [0, 20, 26, 462, 476, 508, 513, 515, 519, 578, 591, 621, 622, 623, 624, 647, 650, 674, 691, 694, 695, 697, 698, 699, 700, 701, 703, 705, 706, 710, 712, 713, 715, 719, 720, 721, 724, 725, 729, 732, 733, 734, 738], "pytorch": [0, 2, 232, 506, 666, 680, 683, 684, 688, 689, 694, 699, 700, 703, 705, 706, 709, 710, 711, 715, 717, 722, 725, 727, 733, 735, 736, 738, 739], "no_grad": 0, "logit": [0, 9, 15, 32, 38, 291, 306, 387, 390, 512, 568, 570, 658, 680], "With": [0, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 72, 73, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 101, 102, 103, 104, 106, 112, 113, 114, 117, 124, 129, 130, 131, 132, 133, 143, 146, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 253, 255, 267, 269, 275, 278, 279, 280, 282, 283, 286, 291, 293, 296, 299, 300, 302, 311, 320, 322, 323, 330, 344, 345, 346, 348, 349, 352, 365, 366, 367, 368, 371, 372, 373, 375, 377, 378, 392, 401, 402, 403, 404, 406, 407, 408, 410, 411, 415, 416, 417, 418, 421, 422, 423, 424, 425, 429, 430, 433, 435, 437, 438, 439, 453, 454, 467, 470, 472, 474, 475, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 537, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 563, 564, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 683, 684, 690, 701, 710, 712, 715, 717, 732, 735], "compiled_graph": 0, "our": [0, 24, 47, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 649, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 703, 704, 707, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 722, 725, 737, 738], "predicted_label": 0, "argmax": [0, 19, 42, 518, 680, 710], "item": [0, 4, 10, 24, 26, 28, 31, 32, 33, 84, 108, 145, 199, 215, 223, 270, 272, 285, 419, 429, 430, 434, 467, 468, 503, 504, 505, 508, 515, 522, 595, 596, 597, 598, 602, 607, 608, 641, 663, 664, 680, 689, 697, 699, 717, 719, 720, 722], "config": [0, 26, 515, 603, 680, 686, 690, 693, 696, 698, 704, 711, 720, 733], "id2label": 0, "us": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 55, 88, 91, 101, 113, 115, 116, 127, 128, 148, 149, 151, 156, 160, 161, 162, 163, 165, 168, 174, 182, 210, 211, 213, 214, 216, 217, 218, 220, 221, 223, 232, 236, 241, 254, 255, 257, 258, 276, 279, 280, 283, 293, 296, 299, 300, 302, 305, 306, 307, 309, 311, 317, 318, 319, 321, 322, 323, 324, 325, 327, 332, 334, 335, 336, 337, 340, 342, 346, 348, 365, 368, 373, 381, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 408, 410, 427, 428, 437, 438, 449, 458, 459, 461, 467, 468, 479, 480, 482, 489, 490, 495, 496, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 521, 534, 536, 537, 542, 544, 552, 560, 566, 568, 577, 578, 579, 583, 587, 588, 589, 590, 592, 593, 599, 600, 601, 603, 610, 611, 612, 613, 615, 616, 617, 618, 621, 623, 631, 645, 647, 648, 649, 650, 654, 659, 660, 661, 662, 663, 664, 665, 666, 671, 674, 678, 684, 685, 686, 688, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 724, 725, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "compil": [1, 2, 240, 506, 644, 654, 663, 664, 666, 680, 697, 710, 713, 715, 716, 718, 725, 726, 727, 728, 731, 732, 733, 736, 739], "grant": [1, 680], "pilot": [1, 680, 688], "access": [1, 2, 26, 680, 689, 690, 691, 698, 699, 704, 709, 710, 732, 734, 736], "user": [1, 223, 240, 302, 373, 506, 660, 662, 663, 664, 674, 680, 682, 683, 686, 690, 691, 692, 694, 695, 697, 698, 699, 700, 703, 707, 708, 709, 710, 712, 714, 715, 716, 717, 725, 726, 730, 732, 738, 739], "join": [1, 16, 26, 32, 39, 360, 513, 572, 582, 680], "waitlist": [1, 680], "want": [1, 2, 9, 24, 32, 47, 189, 222, 302, 363, 506, 660, 664, 680, 683, 685, 687, 689, 690, 691, 696, 698, 703, 704, 706, 707, 708, 709, 712, 715, 720, 721, 722, 725, 726], "get": [1, 2, 7, 14, 26, 30, 37, 48, 112, 113, 114, 117, 145, 146, 147, 150, 156, 161, 164, 168, 413, 431, 452, 469, 504, 505, 508, 511, 515, 566, 592, 660, 661, 662, 674, 680, 684, 685, 688, 689, 690, 692, 698, 699, 700, 706, 707, 708, 709, 710, 711, 712, 717, 718, 719, 720, 721, 727, 732, 738], "one": [1, 2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 71, 79, 89, 91, 92, 93, 102, 104, 162, 183, 189, 196, 197, 214, 220, 221, 222, 241, 247, 255, 256, 265, 269, 274, 275, 278, 279, 280, 282, 283, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 311, 320, 322, 326, 327, 330, 331, 334, 343, 344, 356, 357, 358, 365, 366, 367, 371, 372, 381, 382, 383, 387, 392, 402, 403, 406, 407, 408, 410, 411, 449, 453, 454, 456, 472, 474, 475, 487, 489, 490, 493, 495, 497, 498, 503, 504, 505, 506, 508, 509, 510, 511, 513, 516, 518, 519, 521, 524, 525, 526, 527, 528, 529, 532, 546, 549, 550, 554, 556, 565, 566, 574, 575, 576, 579, 581, 585, 609, 616, 619, 621, 622, 623, 624, 629, 631, 647, 649, 665, 668, 671, 677, 680, 683, 684, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 719, 720, 722, 725, 732, 733, 735, 738], "directori": [1, 465, 486, 505, 508, 686, 687, 689, 690, 691, 696, 698, 710, 712], "keep": [1, 2, 16, 26, 39, 513, 585, 688, 689, 690, 691, 693, 695, 696, 697, 698, 703, 709, 710, 712, 713, 715, 720, 722, 726], "locat": [1, 91, 311, 402, 503, 517, 520, 610, 627, 689, 691, 695, 696, 700, 710, 711, 712, 713, 730], "ivy_root": 1, "environ": [1, 680, 685, 686, 691, 724, 726, 732, 734], "path": [1, 644, 654, 670, 690, 696, 709, 710, 711, 732], "either": [1, 2, 8, 9, 10, 13, 22, 26, 31, 32, 33, 36, 37, 57, 60, 68, 83, 84, 169, 170, 171, 172, 177, 187, 189, 190, 192, 194, 196, 203, 204, 210, 211, 212, 213, 214, 222, 231, 233, 234, 236, 239, 240, 266, 286, 296, 299, 311, 320, 330, 340, 341, 402, 403, 421, 441, 449, 450, 457, 476, 500, 502, 503, 506, 508, 510, 511, 514, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 549, 554, 557, 561, 587, 588, 589, 629, 630, 635, 637, 649, 660, 662, 663, 664, 671, 689, 690, 691, 695, 697, 699, 700, 701, 702, 703, 704, 706, 709, 710, 711, 712, 715, 717, 720, 725, 732], "manual": [1, 515, 590, 600, 601, 689, 690, 691, 699, 704, 712, 721], "automat": [1, 684, 689, 690, 691, 692, 695, 696, 698, 699, 700, 704, 706, 709, 712, 715, 716, 718, 721, 722, 727, 732, 735, 739], "past": [1, 691, 693, 711, 712, 732], "content": [1, 9, 26, 32, 311, 408, 689, 691, 696, 700, 709, 717, 720], "pem": 1, "file": [1, 10, 26, 465, 486, 508, 664, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 706, 710, 711, 712, 713, 717, 720, 728, 731, 732, 733], "refer": [1, 9, 16, 22, 23, 32, 34, 39, 45, 46, 82, 96, 194, 212, 253, 261, 285, 293, 296, 299, 300, 302, 327, 332, 342, 345, 365, 489, 490, 503, 506, 509, 511, 513, 521, 522, 539, 541, 565, 578, 636, 638, 639, 640, 662, 680, 688, 689, 690, 691, 693, 694, 696, 698, 699, 705, 706, 707, 708, 709, 710, 711, 712, 725, 727, 732], "equival": [1, 2, 14, 37, 71, 183, 196, 217, 218, 231, 232, 302, 378, 503, 506, 511, 552, 555, 558, 566, 671, 709, 710, 715, 720, 722], "echo": [1, 690, 698], "n": [1, 2, 5, 8, 9, 13, 14, 16, 18, 19, 22, 23, 31, 32, 36, 37, 39, 41, 42, 45, 46, 48, 89, 94, 95, 96, 169, 239, 241, 261, 270, 293, 296, 299, 300, 302, 305, 306, 309, 311, 313, 314, 315, 320, 321, 326, 327, 330, 331, 332, 340, 341, 342, 348, 349, 358, 361, 364, 369, 375, 379, 381, 382, 383, 387, 388, 389, 390, 391, 394, 401, 410, 503, 506, 510, 511, 513, 515, 517, 518, 521, 522, 523, 524, 525, 526, 528, 530, 532, 539, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 563, 564, 565, 566, 573, 574, 576, 582, 586, 598, 611, 612, 613, 619, 633, 635, 636, 637, 638, 639, 640, 662, 665, 674, 680, 692, 696, 698, 712], "api_kei": 1, "bug": [1, 196, 506, 680, 689, 691, 696, 704, 710, 712], "pleas": [1, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "rais": [1, 5, 9, 10, 16, 18, 20, 23, 26, 28, 32, 33, 39, 41, 43, 46, 73, 103, 192, 227, 273, 296, 299, 302, 306, 311, 332, 342, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 374, 375, 379, 388, 407, 408, 415, 432, 439, 458, 468, 470, 476, 479, 504, 506, 508, 511, 513, 517, 518, 519, 521, 522, 549, 551, 565, 574, 575, 576, 578, 580, 581, 582, 583, 585, 611, 612, 613, 619, 624, 632, 634, 639, 640, 642, 649, 663, 664, 666, 680, 683, 691, 693, 695, 699, 700, 703, 709, 710, 713, 714, 717, 719], "github": [1, 680, 682, 686, 687, 688, 691, 693, 698, 699, 701, 702, 704, 712, 726], "add": [1, 8, 9, 17, 24, 26, 31, 32, 40, 47, 48, 49, 289, 297, 299, 341, 449, 476, 506, 508, 511, 516, 521, 563, 609, 637, 644, 654, 662, 665, 680, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 712, 713, 715, 717, 719, 725, 728, 730, 732], "label": [1, 15, 38, 301, 353, 512, 568, 569, 570, 680, 689, 693, 710, 716, 717, 718, 722, 732], "accordingli": [1, 14, 19, 20, 22, 23, 37, 42, 45, 46, 89, 189, 194, 196, 212, 222, 236, 503, 506, 511, 518, 519, 521, 522, 566, 617, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 710, 717], "member": [1, 683, 689, 691, 710], "team": [1, 680, 685, 689, 690, 691, 710, 734], "back": [1, 9, 16, 32, 39, 302, 365, 455, 477, 508, 510, 513, 536, 578, 661, 663, 664, 666, 683, 690, 694, 699, 700, 703, 707, 708, 714, 716, 725, 730, 734], "asap": 1, "haven": [1, 732], "found": [1, 14, 16, 20, 26, 32, 37, 39, 43, 49, 150, 311, 360, 402, 505, 515, 542, 549, 582, 601, 621, 660, 686, 689, 690, 691, 694, 695, 696, 697, 699, 700, 702, 704, 706, 707, 709, 710, 734], "ask": [1, 680, 684, 689, 690, 701, 717, 719, 725], "suggest": [1, 689, 690, 691, 696, 699, 704, 708, 710, 712, 713, 714], "someth": [1, 680, 691, 695, 704, 713, 720, 721, 725, 738], "help": [1, 412, 508, 521, 637, 661, 680, 685, 686, 687, 689, 690, 694, 695, 696, 697, 698, 699, 701, 704, 707, 709, 710, 712, 713, 719, 720, 721, 723, 727, 728, 732, 734, 738], "post": [1, 17, 40, 516, 609, 690, 708, 722], "forum": [1, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "discord": [1, 48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "server": [1, 680, 690, 691, 696, 732], "convert": [2, 4, 5, 8, 26, 27, 28, 31, 72, 73, 90, 99, 100, 142, 143, 144, 145, 156, 164, 168, 188, 228, 302, 307, 356, 357, 358, 392, 455, 471, 473, 474, 475, 477, 503, 504, 505, 506, 508, 511, 515, 567, 591, 602, 603, 644, 671, 674, 680, 684, 689, 694, 695, 707, 708, 710, 712, 714, 717, 725, 727, 730, 731, 738], "written": [2, 10, 680, 682, 690, 693, 694, 702, 704, 705, 709, 710, 713, 717, 719, 722, 725, 730, 732, 736, 738, 739], "choic": [2, 22, 45, 521, 636, 638, 680, 684, 690, 698, 709, 710, 720, 732, 739], "preserv": [2, 9, 10, 11, 26, 32, 33, 34, 49, 299, 302, 311, 334, 356, 357, 358, 366, 367, 408, 439, 498, 508, 509, 513, 575, 647, 706, 712, 722, 725], "logic": [2, 23, 46, 153, 189, 190, 216, 217, 218, 222, 225, 505, 506, 522, 639, 640, 689, 694, 698, 699, 700, 703, 707, 708, 709, 710, 712, 715, 719], "target": [2, 144, 301, 353, 505, 662, 664, 670, 680, 690, 692, 695, 704, 711, 716, 720, 721, 722, 728, 730, 731, 732, 735, 737, 738], "optim": [2, 11, 34, 301, 353, 413, 497, 508, 509, 514, 587, 588, 589, 661, 680, 684, 699, 709, 715, 718, 720, 722, 724, 730, 731, 732, 733, 734, 735, 736, 739], "tool": [2, 680, 681, 684, 690, 691, 701, 704, 718, 722, 724, 725, 730, 731, 732, 733, 735, 738, 739], "make": [2, 671, 680, 683, 684, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 719, 720, 722, 726, 730, 732, 733, 734, 735, 738, 739], "ml": [2, 680, 681, 683, 684, 685, 688, 710, 716, 717, 718, 720, 721, 722, 724, 728, 729, 730, 731, 732, 735, 737, 739], "relat": [2, 196, 506, 680, 686, 688, 689, 690, 691, 703, 710, 712, 713, 714, 715, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "project": [2, 510, 536, 662, 680, 682, 683, 684, 687, 689, 690, 691, 694, 695, 696, 712, 721, 724, 725, 728, 730, 732, 735, 739], "independ": [2, 9, 18, 32, 41, 172, 189, 222, 232, 306, 387, 506, 511, 517, 539, 558, 610, 680, 693, 699, 701, 707, 717, 722, 730], "research": [2, 680, 682, 724, 732, 739], "deploi": [2, 680, 698, 727, 730, 731, 732, 734, 738], "system": [2, 511, 558, 680, 690, 691, 695, 698, 699, 725, 730, 732, 735, 737, 739], "build": [2, 20, 26, 519, 621, 622, 623, 624, 662, 663, 664, 680, 683, 685, 686, 690, 692, 698, 699, 706, 708, 716, 718, 721, 722, 725, 727, 730, 732, 734, 737, 738, 739], "block": [2, 300, 350, 680, 691, 697, 699, 703, 706, 712, 716, 718, 722, 725, 727, 737, 739], "neural": [2, 510, 658, 662, 680, 724, 728, 730, 731, 732, 736, 738, 739], "network": [2, 510, 534, 658, 660, 661, 662, 663, 664, 680, 683, 697, 706, 717, 721, 724, 728, 730, 731, 732, 736, 738, 739], "layer": [2, 9, 17, 26, 32, 40, 516, 535, 536, 609, 659, 660, 661, 663, 664, 665, 666, 667, 680, 682, 702, 710, 713, 715, 717, 718, 721, 730, 732, 736, 739], "activ": [2, 9, 10, 13, 24, 32, 36, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 244, 248, 249, 251, 252, 470, 510, 536, 537, 661, 680, 686, 690, 691, 699, 704, 713, 714, 721, 732, 735], "train": [2, 9, 11, 13, 32, 34, 36, 299, 305, 322, 323, 324, 381, 383, 489, 490, 495, 509, 510, 533, 536, 537, 661, 662, 665, 680, 684, 697, 700, 706, 720, 721, 722, 723, 724, 725, 727, 730, 731, 736, 738, 739], "pipelin": [2, 680, 682, 687, 692, 693, 694, 711, 713, 722, 727, 732, 733, 738], "publish": [2, 680, 684, 725], "ex": [2, 647, 648, 649, 650, 654, 698], "haiku": [2, 659, 680, 684, 722, 732], "latest": [2, 8, 31, 104, 192, 202, 203, 218, 311, 401, 504, 506, 511, 513, 521, 557, 586, 636, 662, 680, 689, 690, 691, 695, 698, 702, 713, 725, 726, 737], "integr": [2, 6, 8, 9, 29, 31, 32, 101, 241, 282, 296, 311, 404, 504, 506, 680, 688, 690, 692, 707, 730, 732, 734, 735, 736], "kornia": [2, 680], "advantag": [2, 680, 691, 706, 709, 710, 726, 732], "featur": [2, 9, 32, 299, 313, 314, 315, 322, 323, 324, 661, 662, 680, 689, 690, 691, 694, 695, 698, 705, 713, 715, 720, 725, 732, 733, 734, 738], "tensorflow": [2, 8, 9, 10, 31, 32, 96, 143, 173, 261, 293, 300, 348, 470, 503, 505, 508, 642, 654, 671, 680, 683, 684, 688, 689, 690, 691, 693, 695, 698, 699, 700, 705, 709, 710, 711, 712, 713, 715, 717, 722, 725, 727, 730, 733, 735, 736, 738, 739], "deploy": [2, 690, 731, 734, 735, 738, 739], "definit": [2, 8, 14, 31, 37, 241, 506, 511, 538, 680, 691, 694, 699, 706, 719], "job": [2, 680, 696, 698], "graph": [2, 20, 519, 621, 622, 623, 624, 654, 663, 664, 680, 684, 697, 706, 710, 715, 718, 725, 727, 728, 732, 735], "leverag": [2, 680, 690, 706, 709, 730, 732], "frontend": [2, 456, 508, 644, 645, 648, 651, 654, 680, 688, 691, 692, 698, 699, 703, 708, 712, 715, 716, 718, 727, 732], "link": [2, 680, 686, 689, 690, 691, 696, 698, 699, 704, 710, 728, 730], "swap": [2, 16, 39, 513, 583, 671], "replac": [2, 8, 10, 16, 18, 26, 31, 33, 39, 41, 82, 223, 253, 293, 453, 454, 457, 503, 506, 508, 513, 517, 571, 610, 647, 683, 691, 696, 697, 699, 700, 707, 710, 712, 719, 722, 725, 739], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 649, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 689, 690, 691, 693, 694, 696, 697, 698, 710, 731, 732, 733, 734, 735], "debug_mod": 2, "params_v": [2, 680], "must": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 251, 252, 253, 255, 262, 263, 266, 267, 268, 270, 273, 275, 277, 279, 280, 281, 282, 286, 288, 291, 293, 296, 299, 300, 301, 302, 305, 306, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 340, 342, 343, 344, 345, 347, 350, 351, 352, 353, 356, 357, 358, 360, 361, 363, 365, 366, 367, 369, 372, 375, 376, 377, 379, 384, 385, 386, 387, 388, 390, 391, 394, 401, 402, 403, 404, 410, 417, 418, 422, 423, 424, 429, 430, 432, 439, 453, 454, 488, 489, 490, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 661, 662, 666, 668, 682, 684, 686, 688, 689, 690, 691, 693, 694, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 721, 722, 733, 739], "unless": [2, 5, 9, 14, 28, 32, 91, 222, 265, 278, 283, 296, 503, 506, 511, 552, 695, 700, 709, 725], "explicitli": [2, 511, 544, 545, 561, 644, 662, 663, 664, 693, 694, 695, 697, 699, 702, 703, 706, 707, 708, 709, 711, 712, 717, 725, 732], "nn": [2, 89, 503, 680, 706, 711, 715, 722, 733], "kera": [2, 659, 680, 684, 738], "hk": [2, 680, 722], "trainabl": [2, 659, 663, 664, 667, 680, 702, 718, 720, 721], "transpile_kwarg": 2, "It": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 101, 103, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 266, 267, 275, 277, 279, 280, 281, 282, 286, 291, 293, 296, 299, 300, 301, 302, 305, 306, 311, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 331, 332, 334, 335, 336, 337, 340, 343, 344, 345, 350, 351, 352, 353, 360, 363, 375, 381, 384, 385, 386, 387, 388, 390, 391, 401, 402, 403, 404, 417, 418, 422, 423, 424, 429, 430, 439, 453, 454, 455, 489, 490, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 558, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 589, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 625, 628, 629, 630, 633, 635, 636, 638, 639, 640, 661, 662, 680, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 707, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 730, 732, 733, 735, 736, 737, 738, 739], "alia": [2, 501, 651, 689, 710], "similar": [2, 231, 506, 510, 536, 662, 682, 689, 690, 697, 698, 699, 700, 703, 704, 706, 707, 708, 710, 711, 712, 713, 720, 725, 728, 729, 730, 731, 738], "instantli": [2, 680], "proper": [2, 680, 689, 710], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 117, 118, 120, 121, 122, 124, 126, 127, 128, 129, 135, 145, 146, 150, 155, 157, 159, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 457, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 602, 603, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 649, 654, 661, 662, 667, 671, 674, 676, 680, 689, 690, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 725, 727, 730, 731, 732, 734, 738, 739], "snippet": [2, 712], "test_fn": [2, 70, 502, 645, 680], "x1": [2, 6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 44, 48, 49, 52, 102, 112, 128, 135, 155, 172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 197, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 218, 219, 220, 221, 222, 225, 227, 231, 238, 243, 253, 265, 268, 273, 274, 275, 277, 279, 284, 287, 293, 296, 302, 311, 368, 401, 411, 414, 504, 505, 506, 508, 511, 518, 520, 539, 546, 549, 554, 558, 561, 562, 565, 620, 627, 644, 668, 680, 693, 699, 701, 703, 705, 709, 710], "effici": [2, 14, 37, 301, 353, 511, 552, 680, 690, 691, 697, 706, 707, 709, 712, 717, 720, 725, 732, 734, 735], "ret": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 457, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 659, 660, 664, 666, 671, 676, 680, 699, 700, 702, 703, 708, 709, 710, 711, 713, 717, 722], "entir": [2, 9, 22, 23, 26, 32, 33, 45, 46, 162, 192, 194, 234, 235, 299, 302, 311, 322, 323, 324, 373, 404, 435, 505, 506, 521, 522, 632, 633, 634, 635, 636, 637, 638, 639, 640, 662, 683, 684, 689, 690, 691, 693, 694, 697, 699, 701, 703, 709, 710, 711, 712, 715, 717, 720, 721, 722, 725, 732, 738, 739], "just": [2, 14, 22, 37, 96, 261, 293, 503, 511, 521, 552, 631, 654, 662, 680, 683, 684, 690, 691, 693, 695, 698, 699, 700, 701, 702, 706, 707, 709, 710, 711, 712, 717, 719, 720, 725, 732, 733, 738], "line": [2, 239, 506, 680, 684, 690, 693, 694, 695, 698, 700, 701, 703, 710, 712, 715, 718, 719, 720, 721, 723, 735], "request": [2, 9, 153, 306, 391, 505, 680, 684, 685, 689, 701, 704, 713, 715], "jnp": [2, 680, 699, 700, 703, 705, 709, 713, 717, 722], "pil": [2, 680], "jax_kornia": [2, 680], "url": [2, 680], "http": [2, 8, 31, 34, 96, 104, 192, 202, 203, 218, 261, 293, 311, 401, 489, 490, 503, 504, 506, 509, 511, 513, 521, 557, 586, 636, 680, 686, 687, 690, 693, 696, 698, 699, 702, 726], "cocodataset": [2, 680], "org": [2, 8, 31, 34, 96, 104, 192, 202, 203, 218, 261, 293, 311, 401, 489, 490, 503, 504, 506, 509, 511, 513, 521, 557, 586, 636, 680, 702], "train2017": [2, 680], "000000000034": [2, 680], "jpg": [2, 680], "raw_img": [2, 680], "stream": [2, 7, 30, 163, 505, 680, 736], "raw": [2, 26, 680, 702, 733], "format": [2, 7, 10, 22, 25, 26, 27, 30, 63, 112, 146, 299, 310, 340, 397, 422, 500, 504, 505, 508, 510, 521, 522, 523, 524, 526, 527, 528, 530, 531, 631, 641, 642, 680, 692, 698, 699, 700, 701, 702, 703, 710, 713, 717, 719, 720, 728, 730, 732, 733], "img": [2, 680, 720], "transpos": [2, 9, 13, 14, 26, 32, 36, 37, 48, 300, 343, 400, 510, 511, 523, 525, 527, 529, 530, 531, 549, 553, 555, 561, 649, 662, 680, 709, 719, 722], "expand_dim": [2, 16, 39, 510, 513, 532, 680, 710, 717, 720], "255": [2, 13, 32, 36, 183, 506, 532, 680], "version": [2, 3, 9, 32, 55, 240, 269, 271, 296, 311, 406, 410, 488, 506, 508, 511, 544, 545, 644, 671, 680, 682, 683, 684, 690, 691, 696, 698, 699, 702, 709, 711, 717, 738, 739], "enhanc": [2, 680], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 71, 72, 73, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 102, 103, 104, 108, 112, 114, 122, 124, 129, 146, 155, 160, 163, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 257, 258, 264, 267, 269, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 293, 296, 297, 299, 300, 302, 307, 309, 311, 317, 318, 319, 320, 322, 323, 325, 326, 327, 330, 331, 335, 336, 337, 338, 340, 341, 342, 346, 347, 349, 354, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 385, 386, 389, 391, 392, 394, 399, 401, 402, 403, 404, 405, 406, 408, 410, 415, 416, 417, 418, 421, 422, 423, 424, 426, 429, 430, 432, 435, 437, 438, 439, 453, 454, 457, 467, 469, 470, 472, 476, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 559, 560, 561, 563, 564, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 615, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 662, 674, 680, 689, 690, 691, 693, 695, 697, 698, 701, 703, 705, 708, 711, 712, 719, 720, 721], "last": [2, 5, 9, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 32, 36, 37, 38, 39, 44, 45, 46, 48, 87, 88, 91, 145, 253, 270, 293, 296, 299, 301, 302, 309, 311, 327, 332, 342, 353, 365, 373, 394, 402, 403, 503, 505, 510, 511, 512, 513, 518, 520, 521, 522, 535, 536, 539, 542, 554, 563, 565, 569, 570, 572, 575, 578, 579, 580, 582, 616, 617, 625, 627, 628, 629, 630, 639, 640, 662, 671, 680, 684, 691, 693, 695, 696, 699, 701, 709, 711, 712, 715, 717, 725, 732], "least": [2, 8, 9, 14, 31, 32, 189, 207, 222, 299, 302, 311, 326, 331, 356, 357, 358, 364, 366, 401, 506, 511, 518, 549, 619, 680, 691, 694, 698, 699, 700, 701, 706, 709, 712], "support": [2, 7, 9, 10, 14, 30, 32, 33, 37, 96, 115, 119, 141, 148, 163, 172, 189, 196, 217, 218, 222, 232, 247, 261, 276, 291, 293, 296, 299, 300, 334, 347, 415, 427, 436, 439, 440, 470, 503, 504, 505, 506, 508, 510, 511, 534, 543, 544, 545, 548, 550, 559, 566, 642, 648, 666, 671, 674, 682, 683, 684, 686, 689, 690, 691, 693, 694, 700, 701, 702, 705, 706, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 722, 726, 727, 729, 731, 732, 735, 737, 738, 739], "timm": [2, 680], "pretrain": [2, 680], "mlp_encod": [2, 680], "create_model": [2, 680], "mixer_b16_224": [2, 680], "num_class": [2, 680, 722], "randn": [2, 680], "224": [2, 680], "encod": [2, 10, 15, 33, 38, 426, 508, 512, 568, 680, 683, 720], "__init__": [2, 26, 48, 49, 50, 51, 645, 651, 652, 653, 658, 661, 662, 663, 664, 665, 666, 667, 670, 671, 674, 675, 678, 680, 689, 694, 695, 699, 703, 710, 713, 717, 719, 720, 721, 722], "self": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 112, 114, 117, 120, 121, 122, 124, 126, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 510, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 666, 674, 680, 691, 694, 697, 703, 710, 711, 717, 719, 720, 721, 722], "1000": [2, 5, 28, 88, 503, 680, 720], "super": [2, 9, 32, 300, 348, 680, 703, 706, 717, 720, 721, 722], "fc": [2, 680, 721], "linear": [2, 9, 10, 13, 25, 32, 33, 36, 55, 57, 59, 60, 63, 248, 249, 251, 252, 280, 291, 296, 299, 302, 311, 334, 373, 409, 410, 426, 449, 500, 508, 510, 515, 536, 558, 597, 647, 649, 650, 661, 662, 680, 697, 702, 706, 707, 709, 710, 712, 715, 717, 720, 721, 722, 730, 731, 732, 735], "output_s": [2, 9, 32, 299, 313, 314, 315, 662, 680], "with_bia": [2, 662, 680, 721], "__call__": [2, 644, 662, 663, 664, 680], "_forward_classifi": [2, 680], "standard": [2, 8, 14, 17, 18, 22, 31, 40, 41, 45, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 97, 98, 104, 114, 117, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 267, 296, 311, 401, 488, 503, 504, 506, 508, 511, 513, 516, 517, 518, 519, 520, 521, 522, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 572, 574, 575, 576, 578, 579, 581, 582, 586, 609, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 649, 661, 665, 674, 680, 681, 692, 693, 694, 697, 699, 702, 705, 709, 712, 713, 725, 728, 730, 731, 734, 735, 737], "rng_kei": [2, 680], "random": [2, 9, 13, 26, 32, 36, 387, 388, 389, 390, 391, 510, 533, 610, 611, 612, 613, 614, 615, 647, 649, 661, 674, 680, 689, 700, 711, 712, 713, 722, 724, 732], "prngkei": [2, 680, 722], "42": [2, 3, 18, 25, 34, 41, 63, 183, 299, 320, 330, 489, 493, 500, 506, 509, 511, 516, 517, 521, 550, 554, 609, 610, 611, 612, 613, 614, 629, 631, 680, 717, 722], "uniform": [2, 9, 18, 32, 41, 311, 404, 517, 610, 611, 613, 661, 680, 721, 739], "kei": [2, 4, 9, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 117, 121, 122, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 309, 322, 323, 324, 360, 375, 377, 381, 383, 384, 385, 386, 388, 394, 401, 402, 403, 404, 411, 412, 414, 415, 417, 418, 419, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 508, 510, 514, 515, 524, 525, 526, 527, 533, 534, 536, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 587, 588, 593, 599, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 647, 648, 653, 659, 660, 662, 666, 680, 696, 697, 698, 706, 709, 710, 711, 712, 720, 726, 732, 735, 739], "dtype": [2, 5, 6, 9, 10, 13, 14, 18, 19, 22, 28, 29, 31, 32, 33, 36, 37, 41, 42, 45, 48, 50, 51, 52, 71, 72, 73, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 157, 223, 253, 254, 255, 256, 257, 258, 264, 267, 269, 283, 293, 296, 299, 306, 311, 320, 330, 342, 387, 388, 389, 390, 391, 401, 402, 403, 404, 407, 410, 426, 427, 428, 430, 439, 448, 474, 503, 504, 505, 508, 510, 511, 514, 515, 517, 518, 520, 521, 522, 526, 533, 550, 566, 589, 590, 611, 612, 613, 616, 617, 618, 627, 628, 629, 630, 635, 637, 639, 640, 642, 644, 647, 649, 650, 661, 662, 664, 665, 667, 668, 680, 693, 695, 699, 700, 701, 703, 706, 707, 709, 710, 711, 712, 713, 717, 719], "float32": [2, 5, 6, 10, 13, 28, 29, 33, 36, 45, 88, 91, 93, 98, 99, 100, 104, 108, 109, 112, 113, 114, 115, 118, 121, 122, 124, 129, 132, 138, 202, 229, 264, 273, 293, 296, 299, 311, 320, 330, 342, 404, 439, 474, 503, 504, 506, 508, 510, 511, 514, 526, 528, 529, 532, 557, 559, 560, 566, 589, 644, 647, 648, 680, 699, 701, 711, 712, 713], "forward_classifi": [2, 680], "param": [2, 26, 33, 49, 412, 429, 430, 508, 668, 680, 722], "init": [2, 661, 680, 693, 722], "rng": [2, 680, 722], "mention": [2, 683, 689, 690, 691, 694, 695, 701, 705, 706, 709, 710, 712, 715, 732], "abov": [2, 5, 8, 9, 14, 18, 25, 31, 32, 37, 41, 63, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 253, 261, 267, 270, 291, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 332, 335, 336, 337, 338, 342, 347, 348, 373, 401, 404, 429, 433, 435, 437, 439, 475, 498, 500, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 611, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 715, 717, 719, 720, 721, 722, 732, 737], "exactli": [2, 239, 506, 682, 684, 697, 698, 699, 700, 701, 703, 712, 715], "wai": [2, 680, 682, 683, 687, 688, 690, 693, 694, 695, 696, 698, 699, 700, 709, 710, 711, 712, 715, 719, 720, 721, 722, 725, 726, 734, 738, 739], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 649, 712], "rough": 2, "edg": [2, 9, 16, 32, 39, 299, 302, 311, 334, 373, 404, 513, 571, 573, 586, 650, 693, 712, 732, 734, 738], "These": [2, 9, 32, 300, 302, 311, 347, 372, 401, 510, 511, 536, 543, 544, 680, 682, 683, 684, 686, 688, 689, 690, 691, 693, 697, 699, 701, 702, 705, 706, 709, 710, 712, 717, 718, 720, 721, 722, 725, 727, 732, 736, 738, 739], "subclass": [2, 707, 710, 715], "within": [2, 4, 9, 32, 71, 265, 278, 296, 299, 335, 336, 337, 356, 357, 358, 503, 517, 613, 680, 689, 691, 694, 698, 699, 710, 711, 712, 721, 725, 728, 729, 733], "sequenti": [2, 680, 696, 697, 721], "more": [2, 9, 14, 16, 20, 32, 37, 39, 43, 55, 57, 60, 71, 102, 194, 196, 212, 227, 289, 297, 300, 301, 302, 343, 344, 352, 353, 356, 357, 358, 360, 375, 500, 503, 504, 506, 511, 513, 519, 542, 548, 549, 552, 555, 557, 559, 566, 575, 582, 621, 622, 623, 624, 649, 680, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 730, 731, 732, 733, 734, 735, 738, 739], "complex": [2, 3, 8, 9, 14, 25, 29, 31, 32, 37, 55, 57, 60, 92, 93, 107, 121, 130, 136, 169, 170, 171, 172, 173, 174, 175, 178, 186, 187, 189, 190, 192, 194, 202, 203, 204, 205, 206, 210, 211, 212, 213, 222, 224, 227, 229, 232, 233, 234, 235, 236, 239, 240, 267, 296, 299, 300, 321, 332, 342, 343, 347, 348, 349, 467, 500, 503, 504, 506, 508, 511, 518, 521, 543, 544, 545, 550, 557, 559, 561, 563, 566, 619, 635, 637, 648, 658, 686, 689, 696, 699, 701, 710, 712, 713, 715, 720, 721, 722, 725, 727, 728, 730, 732, 734, 738, 739], "should": [2, 3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 58, 62, 70, 89, 91, 94, 95, 103, 128, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 253, 275, 279, 280, 281, 282, 286, 290, 291, 293, 296, 298, 299, 302, 306, 311, 322, 323, 324, 326, 331, 372, 373, 387, 388, 401, 402, 403, 416, 439, 488, 490, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 530, 531, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 563, 565, 566, 578, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 629, 630, 631, 632, 633, 634, 635, 637, 638, 644, 645, 649, 658, 659, 660, 661, 662, 664, 665, 666, 667, 674, 681, 683, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 728, 729, 732, 734, 739], "util": [2, 9, 32, 147, 505, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 686, 690, 696, 700, 703, 706, 709, 712, 713, 717, 730, 738, 739], "requir": [2, 8, 9, 26, 31, 32, 223, 236, 240, 300, 302, 347, 348, 373, 506, 511, 513, 543, 544, 545, 582, 647, 654, 659, 686, 687, 689, 690, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 712, 713, 715, 717, 719, 725, 732, 738], "state": [2, 13, 36, 136, 137, 138, 139, 140, 222, 477, 481, 483, 484, 504, 506, 508, 510, 535, 645, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 680, 683, 690, 696, 699, 700, 702, 703, 704, 705, 710, 712, 716, 717, 718, 720, 724, 738, 739], "mean": [2, 9, 10, 13, 15, 16, 18, 22, 24, 26, 28, 32, 33, 36, 38, 39, 41, 45, 47, 84, 162, 269, 296, 299, 300, 301, 302, 305, 306, 311, 327, 332, 345, 353, 360, 365, 373, 381, 383, 388, 407, 408, 423, 491, 492, 494, 499, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 517, 521, 525, 527, 528, 529, 532, 533, 541, 568, 578, 587, 588, 589, 596, 611, 612, 647, 649, 650, 661, 662, 665, 680, 690, 691, 692, 693, 695, 697, 699, 700, 701, 706, 708, 709, 710, 712, 713, 715, 717, 719, 720, 721, 722, 724, 725, 727, 729, 732], "transformed_with_st": 2, "map": [2, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 117, 121, 122, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 296, 299, 322, 323, 324, 356, 357, 358, 360, 375, 376, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 488, 493, 498, 508, 515, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 597, 598, 602, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 694, 697, 699, 705, 706, 710, 712, 713, 720, 724, 725, 727, 733], "convolut": [2, 9, 13, 32, 36, 299, 319, 337, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 649, 662, 730, 732], "c": [2, 5, 9, 10, 11, 13, 16, 22, 28, 29, 31, 32, 33, 34, 36, 37, 39, 43, 45, 61, 72, 73, 88, 91, 114, 117, 172, 183, 189, 190, 210, 211, 222, 225, 233, 240, 299, 300, 302, 305, 311, 313, 314, 315, 326, 331, 343, 344, 346, 347, 349, 352, 356, 357, 358, 365, 381, 382, 383, 403, 414, 422, 423, 424, 433, 437, 438, 475, 489, 490, 493, 495, 496, 497, 500, 503, 504, 506, 508, 509, 510, 511, 513, 515, 518, 519, 521, 524, 525, 526, 527, 528, 529, 543, 545, 547, 578, 582, 590, 593, 597, 598, 599, 601, 602, 607, 608, 619, 624, 630, 631, 636, 638, 665, 674, 681, 683, 684, 685, 690, 692, 695, 696, 697, 701, 706, 708, 716, 717, 718, 720, 725, 727, 728, 732, 736, 737, 739], "h": [2, 9, 10, 13, 32, 33, 36, 299, 318, 319, 336, 337, 422, 424, 508, 510, 515, 523, 526, 527, 528, 529, 530, 531, 532, 593, 597, 599, 602, 607, 692, 696, 697, 698, 728], "w": [2, 9, 10, 11, 13, 26, 31, 32, 33, 34, 36, 216, 276, 290, 296, 298, 299, 300, 317, 318, 319, 321, 335, 336, 337, 338, 349, 400, 422, 424, 467, 489, 490, 491, 493, 495, 496, 497, 508, 509, 510, 515, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 596, 680, 692, 708, 717, 720, 721], "bigger": 2, "permut": [2, 16, 39, 48, 309, 393, 513, 576, 583], "infer": [2, 5, 9, 10, 13, 16, 28, 32, 33, 36, 39, 71, 73, 81, 85, 86, 90, 93, 98, 107, 108, 109, 110, 111, 253, 306, 389, 433, 466, 503, 504, 508, 510, 513, 533, 578, 671, 692, 695, 699, 700, 712, 717, 722, 730, 731, 734, 736], "correct": [2, 22, 45, 135, 504, 513, 521, 571, 636, 638, 644, 680, 689, 691, 692, 697, 698, 699, 700, 703, 705, 706, 709, 711, 712], "mind": [2, 689, 694, 695, 697, 712, 726], "well": [2, 33, 301, 353, 435, 508, 511, 558, 649, 680, 687, 689, 691, 696, 698, 699, 703, 709, 710, 711, 712, 721, 722, 724, 731, 732, 733, 737], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 318, 319, 422, 426, 559, 584], "_arraywithactiv": [3, 48], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 88, 96, 128, 192, 193, 210, 211, 212, 213, 227, 261, 266, 269, 273, 280, 293, 296, 299, 309, 341, 393, 458, 468, 479, 503, 504, 506, 508, 511, 513, 519, 521, 550, 574, 621, 622, 623, 624, 631, 645, 648, 651, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 675, 678, 680, 690, 691, 693, 697, 698, 699, 703, 705, 707, 708, 709, 711, 712, 713, 714, 715, 717, 724, 732, 737, 739], "abc": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 51, 425, 508, 515, 608, 660, 661, 666, 674, 719], "_abc_impl": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], "_abc_data": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], "gelu": [3, 25, 500, 658, 680], "approxim": [3, 8, 9, 14, 25, 31, 32, 37, 55, 170, 171, 174, 175, 176, 177, 186, 187, 192, 194, 196, 210, 211, 212, 213, 227, 234, 235, 239, 240, 241, 276, 286, 296, 301, 353, 500, 506, 511, 552, 555, 658, 702, 710], "variant": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 114, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 555, 556, 557, 559, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 694, 701, 702, 715], "simpli": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 98, 102, 103, 104, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 489, 490, 493, 495, 496, 497, 498, 506, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 557, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 680, 689, 690, 691, 694, 695, 696, 698, 699, 700, 701, 702, 705, 706, 709, 710, 711, 712, 715, 717, 721, 722, 725, 727, 733, 738], "docstr": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 103, 104, 114, 117, 121, 122, 129, 146, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 311, 317, 318, 319, 320, 322, 323, 324, 326, 330, 331, 332, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 453, 454, 467, 468, 469, 470, 472, 474, 475, 487, 488, 489, 490, 493, 495, 496, 497, 498, 503, 504, 506, 508, 511, 513, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 688, 689, 692, 696, 704, 705, 706, 710, 713], "write": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 101, 103, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 257, 258, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 285, 286, 291, 293, 296, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 350, 351, 352, 353, 360, 363, 364, 365, 366, 367, 368, 371, 372, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 401, 402, 403, 404, 405, 406, 407, 408, 410, 417, 418, 422, 423, 424, 429, 430, 439, 453, 454, 489, 490, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 609, 610, 611, 612, 613, 615, 617, 618, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 645, 680, 684, 688, 689, 691, 692, 693, 695, 696, 698, 699, 701, 702, 703, 706, 709, 711, 713, 717, 719, 722, 732, 739], "broadcast": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 249, 251, 252, 253, 266, 267, 268, 269, 273, 275, 277, 279, 280, 281, 282, 286, 291, 293, 296, 299, 300, 301, 302, 305, 306, 311, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 331, 332, 334, 335, 336, 337, 340, 343, 344, 345, 350, 351, 353, 359, 360, 363, 375, 377, 381, 384, 385, 386, 387, 388, 390, 391, 401, 402, 403, 404, 407, 408, 410, 417, 418, 422, 423, 424, 429, 430, 439, 453, 454, 489, 490, 493, 495, 496, 497, 498, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 590, 609, 610, 611, 612, 613, 615, 616, 617, 618, 620, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 674, 697, 699, 701, 702, 703, 712, 713, 717], "element": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 79, 85, 86, 94, 95, 96, 112, 114, 117, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 261, 262, 263, 265, 266, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 296, 299, 300, 302, 311, 322, 323, 324, 327, 332, 335, 336, 337, 341, 342, 346, 347, 348, 356, 357, 358, 365, 366, 367, 368, 371, 377, 378, 399, 400, 402, 403, 404, 405, 406, 407, 414, 417, 418, 429, 430, 446, 448, 467, 468, 470, 474, 475, 500, 503, 506, 508, 510, 511, 513, 515, 517, 518, 519, 520, 521, 522, 533, 539, 541, 543, 544, 549, 554, 556, 557, 559, 563, 571, 574, 575, 576, 577, 578, 579, 580, 581, 590, 593, 599, 610, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 647, 649, 662, 702, 711, 712, 715, 717, 736], "wise": [3, 8, 9, 14, 25, 31, 32, 37, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 169, 170, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 230, 231, 238, 243, 244, 246, 248, 249, 251, 252, 265, 266, 271, 272, 273, 274, 277, 278, 279, 280, 284, 285, 287, 288, 291, 296, 299, 300, 302, 322, 323, 324, 346, 362, 368, 370, 371, 380, 500, 506, 513, 539, 571, 666, 715], "exampl": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 72, 73, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 317, 318, 319, 320, 322, 323, 325, 326, 327, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 389, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 559, 561, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 654, 671, 674, 678, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 706, 707, 709, 710, 712, 713, 717, 719, 720, 721, 722, 724, 725, 729, 730, 733, 735, 738, 739], "6": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 21, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 57, 62, 67, 72, 73, 85, 86, 89, 90, 93, 98, 102, 103, 104, 112, 114, 168, 169, 171, 172, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 251, 252, 253, 267, 269, 276, 277, 279, 280, 281, 283, 289, 291, 293, 296, 297, 299, 300, 302, 307, 309, 311, 320, 322, 325, 326, 330, 331, 335, 338, 341, 342, 346, 349, 350, 354, 356, 357, 358, 361, 365, 366, 369, 370, 372, 373, 374, 375, 376, 379, 380, 389, 391, 392, 394, 399, 401, 402, 403, 404, 406, 408, 410, 415, 417, 418, 421, 422, 423, 429, 430, 437, 438, 439, 454, 467, 469, 470, 472, 476, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 537, 539, 540, 541, 542, 544, 545, 546, 549, 550, 551, 554, 557, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 601, 602, 608, 609, 610, 611, 612, 613, 615, 616, 617, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 647, 661, 680, 690, 693, 695, 697, 698, 701, 708, 712, 715, 717, 719, 720, 721], "138": [3, 55, 500], "165": [3, 55, 500, 510, 534], "hardswish": [3, 25, 500, 658], "leaky_relu": [3, 25, 500, 648], "alpha": [3, 8, 9, 25, 31, 32, 52, 57, 172, 238, 244, 254, 291, 293, 300, 306, 348, 388, 389, 390, 500, 506, 658, 705, 710, 711], "complex_mod": [3, 25, 55, 57, 60, 500, 658], "float": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 45, 48, 57, 63, 71, 72, 73, 80, 82, 84, 85, 86, 87, 88, 92, 93, 97, 101, 105, 109, 114, 118, 122, 128, 129, 132, 138, 147, 156, 160, 161, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 250, 252, 253, 254, 255, 257, 258, 265, 266, 272, 273, 278, 280, 281, 284, 285, 286, 288, 289, 291, 293, 296, 297, 299, 300, 302, 305, 306, 311, 322, 323, 324, 341, 344, 347, 348, 364, 381, 382, 383, 386, 387, 388, 389, 390, 391, 401, 402, 403, 404, 410, 416, 417, 418, 426, 435, 458, 459, 462, 467, 468, 487, 489, 490, 493, 495, 496, 497, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 533, 536, 537, 538, 540, 543, 544, 545, 547, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 566, 568, 569, 570, 587, 588, 589, 596, 609, 612, 613, 619, 621, 622, 623, 624, 629, 630, 632, 633, 634, 635, 636, 637, 638, 644, 647, 648, 650, 658, 661, 662, 665, 666, 693, 697, 699, 702, 703, 705, 706, 708, 709, 711, 712, 713, 715, 717, 719, 721], "slope": [3, 9, 25, 32, 57, 244, 247, 291, 500, 658], "neg": [3, 8, 9, 14, 16, 18, 23, 25, 31, 32, 37, 39, 41, 46, 57, 60, 71, 82, 84, 96, 189, 196, 203, 204, 222, 223, 227, 231, 236, 253, 261, 262, 293, 300, 306, 345, 391, 500, 503, 506, 511, 513, 517, 522, 539, 541, 559, 563, 565, 566, 572, 574, 575, 579, 612, 639, 640, 647, 649, 658, 697, 709], "section": [3, 9, 20, 32, 57, 299, 302, 332, 342, 361, 369, 379, 519, 621, 622, 623, 624, 680, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 716, 720, 721, 728, 735, 738], "liter": [3, 9, 14, 25, 32, 37, 55, 57, 60, 299, 302, 320, 330, 334, 373, 500, 511, 520, 550, 566, 627, 658, 715], "split": [3, 9, 16, 25, 26, 32, 39, 55, 57, 60, 160, 161, 162, 275, 282, 302, 361, 369, 379, 422, 449, 500, 505, 508, 510, 513, 523, 530, 531, 583, 644, 658, 662, 680, 685, 691, 698, 716, 717, 725, 739], "magnitud": [3, 25, 55, 57, 60, 169, 172, 189, 196, 222, 500, 506, 511, 559, 560, 658], "how": [3, 9, 25, 32, 55, 57, 60, 189, 222, 302, 374, 376, 500, 506, 658, 660, 661, 662, 663, 664, 680, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 728, 732], "handl": [3, 7, 9, 25, 26, 30, 32, 49, 55, 57, 60, 142, 143, 144, 145, 146, 150, 155, 156, 164, 168, 174, 186, 211, 227, 233, 234, 239, 302, 374, 376, 500, 505, 506, 511, 521, 563, 635, 637, 658, 666, 692, 697, 698, 699, 704, 705, 706, 708, 709, 710, 711, 712, 714, 715, 721, 729, 739], "data": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 55, 57, 60, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 141, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 247, 253, 254, 255, 256, 257, 258, 262, 263, 264, 266, 281, 286, 291, 293, 296, 299, 300, 302, 306, 310, 311, 322, 323, 324, 340, 345, 347, 374, 376, 387, 388, 389, 390, 391, 397, 401, 402, 403, 407, 410, 426, 439, 441, 442, 445, 470, 500, 503, 505, 506, 508, 510, 511, 513, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 533, 534, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 572, 575, 576, 578, 579, 581, 582, 586, 611, 612, 613, 615, 616, 617, 619, 620, 625, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 647, 648, 649, 650, 654, 661, 662, 664, 668, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 700, 702, 705, 706, 707, 709, 711, 713, 715, 717, 719, 727, 732, 733, 734, 736, 737, 738], "leaki": [3, 25, 57, 500, 658], "relu": [3, 9, 24, 25, 32, 57, 247, 248, 252, 291, 500, 658, 680, 711, 720, 721], "39": [3, 8, 9, 14, 18, 25, 31, 32, 34, 37, 41, 57, 175, 210, 212, 214, 244, 291, 299, 311, 318, 320, 337, 340, 402, 489, 500, 506, 509, 511, 521, 546, 554, 612, 631], "85": [3, 9, 18, 25, 31, 32, 34, 36, 41, 49, 57, 174, 183, 184, 228, 244, 250, 291, 311, 402, 467, 493, 500, 506, 508, 509, 510, 517, 534, 611, 612, 613], "17": [3, 9, 14, 25, 31, 32, 33, 34, 36, 37, 41, 49, 57, 58, 88, 172, 189, 214, 222, 289, 299, 302, 317, 318, 326, 327, 330, 331, 335, 336, 338, 341, 365, 423, 438, 489, 491, 500, 503, 506, 508, 509, 510, 511, 515, 517, 524, 533, 534, 542, 546, 598, 611, 612, 613, 615, 697], "log_softmax": [3, 25, 500], "axi": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 58, 62, 87, 88, 91, 162, 236, 241, 269, 270, 276, 283, 296, 299, 301, 302, 305, 309, 311, 320, 321, 327, 330, 332, 342, 353, 355, 360, 361, 362, 365, 366, 367, 369, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 394, 399, 402, 403, 404, 406, 407, 408, 409, 410, 422, 429, 488, 500, 503, 505, 506, 508, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 532, 539, 542, 550, 565, 566, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 615, 616, 617, 621, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 649, 662, 663, 668, 697, 699, 701, 703, 705, 706, 709, 710, 712, 715, 717, 719, 722, 724], "ax": [3, 9, 14, 16, 19, 22, 23, 25, 32, 37, 39, 42, 45, 46, 48, 51, 58, 62, 162, 269, 270, 283, 289, 296, 297, 299, 302, 305, 311, 327, 332, 342, 372, 373, 375, 384, 406, 407, 408, 410, 422, 488, 505, 508, 511, 513, 518, 521, 522, 539, 550, 558, 561, 562, 566, 573, 575, 576, 579, 581, 583, 586, 616, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 649, 662, 699, 701, 712, 713, 717, 719], "along": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 44, 45, 46, 58, 62, 67, 87, 88, 162, 236, 239, 241, 262, 263, 269, 270, 283, 289, 293, 296, 297, 299, 301, 302, 305, 311, 320, 326, 327, 330, 331, 332, 342, 353, 360, 361, 362, 366, 367, 373, 374, 377, 384, 385, 386, 402, 403, 404, 406, 407, 408, 410, 422, 429, 502, 503, 505, 506, 508, 511, 512, 513, 514, 517, 518, 520, 521, 522, 539, 554, 563, 565, 566, 568, 569, 570, 572, 575, 576, 577, 579, 580, 582, 584, 585, 587, 588, 589, 615, 616, 617, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 662, 680, 689, 692, 701, 709, 713, 715, 717, 732], "98": [3, 11, 18, 25, 31, 34, 41, 58, 184, 187, 235, 493, 500, 506, 509, 511, 515, 518, 521, 554, 591, 602, 611, 613, 620, 631], "37": [3, 8, 9, 25, 31, 32, 36, 48, 58, 175, 183, 232, 235, 239, 307, 341, 392, 506, 510, 511, 515, 517, 534, 551, 598, 612, 698], "35": [3, 13, 14, 25, 31, 32, 36, 37, 41, 58, 177, 236, 299, 320, 330, 506, 510, 511, 518, 521, 534, 539, 546, 612, 620, 631], "0719": [3, 25, 58], "62": [3, 25, 31, 41, 58, 207, 235, 506, 516, 517, 609, 611, 613], "221": [3, 58], "7": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 60, 71, 72, 73, 87, 90, 91, 108, 114, 117, 147, 169, 172, 175, 179, 180, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 214, 217, 219, 220, 221, 222, 224, 225, 226, 228, 229, 232, 233, 234, 236, 239, 240, 242, 243, 244, 246, 248, 249, 251, 252, 253, 255, 258, 265, 267, 269, 270, 276, 277, 278, 280, 282, 283, 289, 291, 293, 296, 297, 299, 300, 301, 302, 307, 311, 317, 318, 319, 320, 325, 326, 330, 331, 335, 338, 340, 341, 342, 346, 351, 353, 356, 357, 358, 361, 365, 369, 370, 372, 373, 374, 375, 376, 379, 380, 389, 391, 392, 399, 402, 403, 405, 406, 410, 415, 417, 418, 422, 423, 426, 437, 438, 439, 446, 453, 454, 467, 470, 489, 490, 492, 493, 494, 495, 497, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 527, 529, 532, 533, 534, 537, 539, 540, 541, 542, 545, 546, 549, 551, 554, 557, 559, 560, 561, 563, 564, 568, 569, 570, 571, 574, 575, 580, 582, 583, 585, 590, 591, 598, 602, 609, 610, 611, 612, 613, 615, 620, 621, 623, 625, 626, 628, 629, 630, 631, 633, 635, 637, 638, 647, 690, 691, 695, 697, 698, 701, 706, 708, 709, 712], "82": [3, 8, 34, 41, 58, 175, 311, 402, 489, 509, 612, 613], "mish": [3, 25, 500, 658], "30340147": [3, 59, 500], "86509842": [3, 25, 59, 500], "sigmoid": [3, 9, 25, 32, 246, 291, 306, 387, 500, 658, 717, 720, 721], "269": [3, 61], "731": [3, 61], "881": [3, 8, 31, 61, 175, 188, 228, 506], "softmax": [3, 13, 24, 25, 36, 500, 510, 536, 537, 658, 680], "422": [3, 62, 500], "155": [3, 36, 62, 500, 510, 534], "softplu": [3, 25, 500, 658, 715], "beta": [3, 9, 17, 25, 32, 40, 63, 254, 257, 258, 293, 300, 306, 348, 389, 390, 500, 516, 609, 715], "threshold": [3, 8, 9, 25, 31, 32, 63, 220, 221, 252, 266, 291, 296, 500, 506, 715], "3461": [3, 25, 63, 500], "6491": [3, 25, 63, 500], "535": [3, 25, 63, 500, 703], "22": [3, 8, 9, 10, 18, 22, 25, 32, 33, 36, 41, 58, 63, 184, 192, 299, 300, 307, 311, 317, 318, 320, 335, 336, 337, 338, 341, 346, 392, 402, 423, 454, 487, 500, 506, 510, 511, 515, 518, 521, 533, 534, 542, 547, 554, 598, 608, 611, 612, 613, 620, 630, 631, 690, 697, 703], "09": [3, 8, 34, 41, 63, 227, 237, 489, 500, 506, 509, 612], "31": [3, 8, 9, 31, 32, 33, 36, 41, 58, 63, 88, 183, 214, 222, 299, 311, 319, 320, 402, 417, 500, 503, 506, 508, 612, 613, 720], "55": [3, 32, 41, 63, 183, 242, 311, 402, 437, 506, 508, 511, 517, 521, 547, 554, 612, 613, 631, 693], "13": [3, 8, 9, 13, 14, 18, 22, 31, 32, 33, 34, 36, 39, 41, 45, 48, 63, 117, 147, 172, 184, 187, 196, 207, 227, 236, 276, 283, 289, 296, 299, 302, 319, 320, 330, 335, 341, 361, 365, 369, 379, 391, 402, 403, 417, 418, 422, 423, 438, 459, 467, 489, 500, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 518, 519, 521, 524, 525, 533, 534, 542, 546, 554, 560, 585, 589, 602, 611, 612, 613, 620, 621, 629, 630, 631, 697, 701, 710], "collect": [4, 26, 27, 500, 505, 508, 509, 510, 512, 515, 516, 517, 603, 658, 662, 663, 665, 666, 690, 698, 703, 707, 708, 711, 712, 724, 730, 732, 735], "accept": [4, 5, 8, 9, 14, 27, 31, 32, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 261, 267, 270, 271, 290, 293, 296, 298, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 408, 415, 423, 424, 429, 433, 435, 437, 439, 453, 470, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 689, 690, 691, 694, 697, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 719, 727, 730], "_to_ivi": 4, "_to_n": 4, "inplac": [4, 10, 26, 33, 413, 415, 436, 439, 440, 457, 508, 515, 597, 598, 602, 607, 608, 653, 654, 659, 666, 692, 694, 701, 705, 707, 710, 715, 719, 721], "to_ignor": [4, 24, 47, 515, 601, 602], "args_to_ivi": 4, "include_deriv": [4, 27, 515, 591, 602, 644], "form": [4, 5, 14, 26, 28, 37, 72, 73, 90, 94, 95, 255, 267, 293, 296, 300, 302, 347, 362, 370, 373, 380, 412, 471, 473, 503, 508, 510, 511, 515, 538, 540, 542, 543, 544, 545, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 591, 602, 647, 661, 683, 685, 689, 706, 712, 715, 721, 722, 732, 733, 738], "nest": [4, 26, 27, 49, 51, 192, 444, 472, 488, 491, 506, 508, 509, 514, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 660, 663, 664, 666, 694, 696, 697, 706, 708, 713, 720, 721, 725, 727, 732], "unchang": [4, 8, 299, 302, 342, 365, 510, 533], "recurs": [4, 26, 27, 115, 116, 148, 149, 427, 428, 504, 505, 508, 515, 590, 591, 600, 601, 602, 690, 693, 696, 697, 706, 709, 721, 725], "deriv": [4, 5, 9, 11, 27, 28, 32, 34, 81, 86, 93, 98, 253, 257, 271, 293, 296, 489, 490, 493, 494, 495, 496, 497, 503, 509, 514, 515, 589, 591, 602, 664, 666, 667, 699, 700, 719, 721], "word": [4, 71, 503, 517, 613, 659, 662, 697, 709, 710, 727], "args_to_n": [4, 709], "cont_inplac": 4, "updat": [4, 10, 11, 26, 33, 34, 439, 453, 454, 457, 489, 490, 493, 495, 496, 497, 508, 509, 510, 514, 515, 533, 535, 587, 588, 589, 597, 598, 602, 607, 608, 654, 659, 665, 666, 671, 680, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 705, 707, 708, 710, 711, 712, 715, 717, 719, 720, 722, 725], "place": [4, 5, 8, 9, 10, 14, 16, 26, 28, 30, 31, 32, 33, 39, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 256, 261, 265, 267, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 287, 288, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 365, 373, 374, 388, 401, 404, 408, 415, 423, 424, 429, 433, 435, 437, 438, 439, 453, 470, 475, 498, 503, 504, 505, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 666, 680, 686, 688, 691, 692, 693, 696, 697, 698, 700, 701, 702, 705, 706, 710, 711, 712, 713, 715, 722, 727, 734], "ignor": [4, 5, 9, 26, 32, 89, 299, 300, 322, 323, 324, 348, 503, 510, 511, 515, 536, 548, 601, 602, 666, 696, 698, 701, 712, 725, 738], "decid": [4, 26, 515, 590, 591, 600, 601, 602, 680, 689, 690, 699, 715], "go": [4, 9, 36, 299, 341, 515, 590, 591, 600, 601, 602, 680, 685, 686, 689, 690, 691, 692, 695, 696, 698, 699, 701, 704, 710, 711, 712, 713, 716, 720, 725, 728, 732, 733, 737, 739], "deeper": [4, 515, 590, 591, 600, 601, 602, 682, 691, 692, 712, 716], "to_ivi": [4, 27, 515, 603, 709], "leaf": [4, 26, 45, 515, 600, 601, 603, 630, 697, 706, 720], "nativearrai": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 72, 73, 79, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 117, 120, 121, 122, 124, 126, 128, 129, 135, 145, 146, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 296, 297, 299, 300, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 431, 432, 433, 435, 437, 438, 439, 442, 445, 446, 448, 453, 454, 455, 457, 466, 467, 468, 469, 470, 472, 474, 475, 477, 487, 489, 490, 491, 493, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 597, 598, 599, 602, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 667, 694, 697, 701, 703, 705, 706, 707, 709, 710, 713, 714, 717, 719, 727], "manner": [4, 27, 515, 602, 682, 690, 700, 702, 706, 710, 713, 720, 724, 725, 728, 730, 738, 739], "travers": [4, 27, 515, 602, 697, 699, 703, 717], "lowest": [4, 9, 18, 27, 32, 41, 311, 404, 515, 517, 602, 611, 706, 725, 727, 729, 733, 737], "leav": [4, 27, 29, 31, 32, 33, 36, 37, 39, 45, 49, 114, 117, 189, 245, 246, 360, 365, 384, 385, 386, 402, 403, 408, 426, 472, 513, 515, 529, 537, 542, 559, 573, 577, 582, 584, 585, 590, 591, 600, 601, 602, 603, 629, 630, 674, 680, 689, 697, 698, 699, 701, 702, 705, 706, 709, 710, 712, 720, 721], "search": [4, 9, 27, 32, 616, 617, 654, 682, 688, 690, 697, 701, 712, 713], "to_n": [4, 27, 717], "mayb": [4, 680, 690, 698, 717, 719], "_arraywithcr": [5, 48], "asarrai": [5, 9, 10, 21, 28, 32, 33, 44, 72, 309, 393, 394, 422, 433, 437, 438, 467, 503, 508, 510, 519, 520, 524, 622, 626, 703, 707, 710, 711], "devic": [5, 9, 18, 26, 28, 32, 41, 48, 50, 51, 52, 71, 72, 73, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 168, 253, 261, 293, 306, 363, 387, 388, 390, 391, 413, 427, 428, 503, 508, 517, 610, 611, 612, 613, 642, 644, 645, 659, 661, 662, 663, 664, 665, 666, 667, 668, 671, 680, 683, 691, 692, 695, 699, 703, 706, 707, 711, 712, 713, 715, 717, 722, 725, 726, 727, 731, 732, 734, 735, 736, 737], "ndarrai": [5, 9, 10, 28, 32, 72, 73, 90, 299, 302, 311, 342, 374, 407, 408, 474, 503, 508, 671, 674, 689, 694, 699, 700, 703, 705, 709, 710, 711, 713, 715, 717, 719, 722, 727], "boolean": [5, 6, 8, 9, 10, 16, 19, 22, 26, 28, 29, 31, 32, 33, 39, 42, 45, 48, 49, 68, 70, 72, 73, 79, 85, 101, 117, 119, 121, 122, 125, 141, 151, 159, 165, 179, 180, 181, 182, 183, 184, 216, 217, 218, 219, 278, 296, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 411, 414, 432, 435, 436, 440, 441, 442, 443, 444, 445, 446, 455, 457, 460, 461, 463, 464, 487, 502, 503, 504, 505, 506, 508, 513, 514, 515, 518, 521, 574, 575, 576, 578, 580, 581, 583, 585, 587, 588, 600, 618, 619, 620, 632, 634, 647, 648, 649, 650, 654, 665, 697, 699, 710, 712, 715], "never": [5, 9, 16, 28, 32, 39, 73, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 691, 699, 709, 710, 712], "valueerror": [5, 9, 16, 28, 32, 39, 43, 73, 299, 302, 332, 342, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 374, 375, 379, 432, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 624, 675, 703], "reus": [5, 9, 16, 28, 32, 39, 73, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 703, 712, 737], "exist": [5, 9, 10, 16, 26, 28, 32, 39, 73, 302, 356, 357, 358, 360, 361, 363, 365, 366, 367, 369, 372, 375, 379, 421, 432, 508, 513, 572, 574, 575, 576, 578, 580, 581, 583, 585, 666, 668, 680, 682, 683, 689, 690, 693, 695, 701, 702, 706, 707, 709, 710, 712, 715, 717, 725, 727, 730, 732, 735, 738], "buffer": [5, 9, 16, 28, 32, 39, 73, 84, 302, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 503, 508, 513, 574, 575, 576, 578, 580, 581, 583, 585, 709, 725], "possibl": [5, 9, 16, 28, 32, 39, 73, 196, 239, 299, 302, 321, 356, 357, 358, 361, 363, 365, 366, 367, 369, 372, 375, 379, 432, 449, 506, 508, 510, 513, 521, 533, 574, 575, 576, 578, 580, 581, 583, 585, 632, 634, 677, 680, 683, 685, 689, 690, 691, 693, 696, 697, 699, 701, 702, 704, 706, 708, 709, 710, 711, 712, 715, 717, 720, 724, 725, 730, 732, 738], "nativedtyp": [5, 6, 9, 13, 14, 18, 19, 22, 28, 32, 37, 41, 42, 45, 71, 72, 73, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 123, 125, 127, 131, 141, 253, 254, 255, 256, 257, 258, 264, 269, 283, 293, 296, 306, 311, 387, 388, 389, 390, 391, 401, 402, 403, 404, 407, 503, 504, 510, 511, 517, 518, 520, 521, 533, 566, 611, 612, 613, 616, 617, 627, 629, 630, 635, 637, 661, 699, 700, 705, 713, 717], "nativedevic": [5, 7, 9, 18, 28, 30, 32, 41, 71, 72, 73, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 143, 144, 145, 146, 147, 150, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 253, 261, 293, 306, 387, 388, 390, 391, 503, 505, 517, 610, 611, 612, 613, 661, 666, 667, 699, 700, 703, 705, 713], "interpret": [5, 9, 28, 32, 72, 73, 84, 90, 311, 401, 503, 698, 733], "9": [5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 48, 49, 55, 71, 72, 73, 90, 107, 108, 109, 110, 111, 114, 117, 170, 172, 174, 175, 178, 179, 180, 183, 189, 190, 196, 203, 209, 210, 211, 217, 218, 220, 221, 222, 225, 227, 228, 232, 233, 236, 237, 238, 243, 245, 248, 249, 271, 272, 276, 282, 283, 289, 291, 296, 297, 299, 302, 309, 311, 317, 318, 319, 320, 325, 326, 330, 331, 335, 336, 338, 340, 341, 350, 356, 357, 358, 361, 365, 369, 374, 375, 377, 379, 389, 391, 394, 403, 418, 422, 423, 424, 426, 429, 437, 438, 441, 442, 445, 453, 454, 467, 469, 489, 490, 491, 495, 500, 503, 504, 506, 508, 509, 510, 511, 513, 515, 517, 518, 519, 520, 521, 524, 525, 526, 529, 532, 533, 534, 539, 540, 542, 545, 546, 549, 550, 551, 554, 557, 559, 560, 561, 563, 564, 571, 575, 579, 580, 582, 583, 585, 590, 591, 596, 598, 601, 602, 610, 611, 612, 613, 615, 620, 621, 623, 625, 626, 628, 630, 631, 633, 635, 637, 638, 647, 666, 697, 701, 708, 712, 720, 721, 728], "39999998": [5, 72, 73, 503, 519, 622], "5999999": [5, 36, 72, 73, 503, 510, 533, 537], "0999999": [5, 22, 72, 73, 280, 296, 503, 633], "10000038": [5, 72, 73, 503], "np": [5, 8, 9, 31, 32, 33, 72, 73, 79, 90, 125, 202, 206, 299, 300, 326, 331, 343, 467, 503, 504, 506, 508, 515, 596, 644, 671, 674, 680, 689, 694, 699, 700, 703, 705, 709, 710, 711, 712, 713, 715, 717, 719, 720, 722, 727], "order": [5, 9, 10, 13, 14, 16, 20, 21, 26, 32, 36, 37, 39, 43, 44, 48, 49, 72, 73, 89, 96, 177, 196, 239, 261, 276, 293, 296, 300, 302, 305, 309, 344, 347, 348, 349, 352, 365, 366, 367, 371, 377, 381, 382, 383, 394, 503, 506, 510, 511, 513, 514, 518, 519, 520, 524, 525, 526, 527, 528, 529, 532, 543, 544, 550, 559, 560, 564, 566, 575, 578, 587, 588, 619, 621, 622, 623, 624, 625, 627, 628, 644, 660, 664, 665, 667, 680, 682, 689, 690, 691, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 720, 722, 725, 728, 731, 732, 733, 735, 738], "90786433e": [5, 72, 73, 503], "310": [5, 72, 73, 503], "copy_arrai": [5, 28, 503], "to_ivy_arrai": [5, 28, 79, 503], "empty_lik": [5, 28, 300, 346, 503], "deafult": [5, 19, 42, 81, 503, 518, 616], "uniniti": [5, 80, 81, 503, 704], "from_dlpack": [5, 28, 503], "full_lik": [5, 28, 503, 713], "fill_valu": [5, 9, 19, 28, 32, 42, 85, 86, 201, 209, 306, 391, 503, 506, 518, 619, 668, 699, 711, 713], "scalar": [5, 8, 9, 10, 14, 25, 28, 31, 32, 33, 37, 57, 86, 91, 172, 193, 238, 250, 267, 268, 270, 273, 276, 278, 280, 285, 291, 296, 300, 302, 348, 356, 357, 358, 368, 475, 487, 503, 506, 508, 511, 566, 699, 708, 710, 725, 732], "fill": [5, 8, 9, 18, 19, 26, 28, 31, 32, 41, 42, 80, 85, 86, 88, 91, 92, 93, 97, 98, 223, 253, 293, 302, 306, 364, 376, 388, 390, 391, 503, 506, 517, 518, 611, 619, 661, 689, 711], "equal": [5, 6, 8, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 41, 44, 48, 49, 82, 84, 85, 86, 92, 93, 101, 181, 183, 187, 192, 194, 203, 204, 225, 227, 232, 235, 236, 240, 262, 263, 265, 278, 293, 296, 299, 302, 305, 311, 321, 361, 369, 379, 384, 385, 386, 404, 411, 414, 488, 503, 504, 506, 508, 511, 512, 513, 517, 518, 519, 520, 521, 542, 551, 552, 555, 557, 563, 568, 571, 573, 578, 580, 586, 613, 619, 621, 622, 623, 624, 625, 628, 633, 635, 636, 637, 638, 654, 661, 662, 696, 697, 699, 701, 703, 711, 712], "000123": [5, 86, 503], "ones": [5, 9, 11, 13, 18, 26, 28, 32, 36, 41, 82, 86, 91, 93, 98, 148, 149, 185, 253, 293, 489, 503, 505, 506, 509, 510, 528, 529, 611, 612, 613, 648, 680, 689, 694, 698, 701, 705, 706, 712, 719, 720, 732], "linspac": [5, 28, 71, 503, 680, 705, 715, 717, 739], "stop": [5, 11, 28, 34, 71, 87, 88, 162, 455, 490, 493, 495, 496, 497, 498, 503, 505, 508, 509, 514, 515, 587, 588, 589, 601, 666, 705, 708, 715, 717, 725, 732], "num": [5, 28, 87, 88, 503, 647, 691, 705, 717], "endpoint": [5, 28, 87, 88, 503, 661, 705], "logspac": [5, 28, 503, 717], "10": [5, 8, 9, 10, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 71, 86, 87, 88, 171, 179, 180, 183, 187, 194, 199, 201, 207, 209, 211, 222, 228, 235, 236, 241, 246, 265, 268, 273, 275, 276, 278, 279, 280, 282, 283, 289, 296, 299, 302, 311, 317, 318, 319, 320, 330, 335, 336, 338, 340, 341, 342, 358, 361, 365, 369, 375, 379, 399, 402, 403, 406, 408, 410, 422, 423, 424, 426, 429, 430, 432, 437, 438, 446, 454, 457, 462, 467, 469, 480, 483, 495, 503, 506, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 527, 533, 540, 542, 546, 547, 549, 550, 551, 554, 559, 560, 561, 575, 580, 581, 582, 583, 585, 596, 598, 601, 602, 609, 610, 611, 612, 613, 619, 621, 627, 629, 630, 631, 632, 634, 635, 637, 638, 647, 649, 666, 680, 683, 690, 693, 697, 698, 699, 701, 708, 711, 712, 717, 719, 720, 737], "rang": [5, 9, 22, 28, 32, 71, 87, 88, 236, 300, 311, 348, 402, 403, 404, 422, 488, 503, 506, 508, 519, 521, 621, 629, 630, 635, 637, 647, 649, 650, 661, 680, 699, 703, 706, 712, 717, 720, 721, 722, 732, 738], "log": [5, 8, 9, 14, 28, 31, 32, 37, 88, 212, 214, 227, 245, 246, 281, 287, 291, 296, 301, 306, 353, 387, 503, 506, 557, 647, 649, 650, 658, 691, 697, 698, 701, 706, 709, 710, 711, 712, 714, 715, 717, 720], "space": [5, 8, 9, 10, 28, 31, 32, 33, 71, 87, 88, 241, 276, 296, 422, 426, 503, 506, 508, 683, 715], "sequenc": [5, 9, 13, 14, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 86, 88, 91, 93, 98, 102, 104, 117, 121, 122, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 256, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 291, 293, 297, 299, 300, 302, 306, 311, 314, 315, 322, 323, 324, 326, 327, 331, 332, 334, 341, 342, 352, 354, 356, 357, 358, 360, 361, 362, 369, 370, 372, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 401, 402, 403, 404, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 449, 453, 454, 467, 468, 470, 472, 474, 475, 487, 488, 491, 492, 493, 498, 503, 506, 508, 509, 510, 511, 513, 515, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 536, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 566, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 585, 586, 590, 597, 607, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 662, 665, 667, 691, 698, 699, 700, 701, 703, 712, 713, 715, 717, 722, 724, 735], "gener": [5, 8, 9, 13, 18, 24, 28, 31, 32, 36, 41, 47, 71, 87, 88, 96, 104, 189, 192, 202, 203, 218, 222, 231, 255, 259, 260, 261, 293, 306, 311, 389, 401, 503, 504, 506, 510, 511, 513, 517, 521, 533, 557, 561, 564, 586, 610, 611, 613, 614, 636, 647, 650, 654, 666, 674, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 702, 703, 705, 706, 709, 710, 711, 713, 716, 717, 719, 721, 722, 724, 725, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738], "relev": [5, 28, 88, 503, 666, 680, 683, 689, 690, 691, 694, 697, 698, 699, 701, 707, 708, 711, 712, 720, 726, 730, 737, 738], "sampl": [5, 8, 9, 18, 22, 28, 31, 32, 41, 45, 87, 88, 241, 299, 306, 322, 323, 324, 334, 387, 388, 389, 390, 391, 503, 506, 517, 521, 610, 611, 612, 613, 636, 638, 662, 711, 712], "on_valu": [5, 28, 88, 91, 503], "off_valu": [5, 28, 88, 91, 503], "cuda": [5, 9, 18, 28, 32, 41, 87, 88, 91, 142, 143, 144, 158, 160, 306, 387, 388, 390, 391, 503, 505, 517, 610, 611, 612, 613, 661, 662, 663, 664, 665, 666, 667, 680, 717, 725, 727, 737], "cpu": [5, 7, 9, 18, 28, 30, 32, 41, 71, 82, 85, 87, 88, 91, 92, 93, 98, 142, 143, 145, 146, 147, 148, 153, 156, 158, 160, 163, 164, 166, 168, 306, 387, 388, 390, 391, 503, 505, 511, 517, 548, 610, 611, 612, 613, 644, 661, 662, 663, 664, 665, 666, 667, 680, 690, 691, 696, 700, 710, 712, 725, 730, 732, 735, 737], "evenli": [5, 8, 9, 13, 16, 26, 28, 31, 36, 39, 71, 87, 88, 241, 299, 341, 503, 506, 510, 513, 523, 524, 525, 526, 528, 530, 532, 580], "descript": [5, 8, 9, 14, 31, 32, 37, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 429, 433, 435, 437, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 689, 691, 702, 708, 709], "hint": [5, 8, 9, 14, 31, 32, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 429, 433, 435, 437, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 689, 694, 702, 705, 706, 709, 710, 713], "assum": [5, 8, 9, 10, 13, 14, 15, 26, 31, 32, 33, 36, 37, 38, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 253, 267, 270, 286, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 429, 433, 435, 437, 446, 475, 498, 503, 504, 506, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 662, 674, 680, 690, 693, 695, 698, 699, 702, 711, 712, 715, 719, 720, 725], "simplic": [5, 8, 9, 14, 31, 32, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 429, 433, 435, 437, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 702, 715, 721, 724], "nestabl": [5, 8, 9, 14, 31, 32, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 261, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 408, 415, 423, 424, 429, 433, 435, 437, 439, 453, 470, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 689, 692, 701, 702, 709, 712, 727], "therefor": [5, 8, 9, 14, 31, 32, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 104, 120, 124, 128, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 253, 261, 267, 270, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 322, 323, 324, 330, 335, 336, 337, 338, 348, 373, 401, 404, 408, 415, 423, 424, 429, 433, 435, 437, 439, 453, 470, 475, 498, 503, 504, 506, 508, 509, 510, 511, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 609, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 682, 686, 689, 691, 693, 694, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 719, 721, 725, 729, 732, 738], "01": [5, 9, 10, 11, 32, 33, 34, 37, 41, 88, 214, 232, 233, 258, 278, 293, 299, 320, 330, 331, 426, 467, 489, 490, 495, 503, 506, 508, 509, 511, 514, 517, 545, 589, 612, 613, 647, 695, 722], "02": [5, 11, 17, 18, 31, 34, 41, 88, 174, 175, 214, 299, 320, 330, 331, 467, 489, 490, 495, 503, 506, 508, 509, 512, 516, 517, 568, 609, 612, 613, 711], "03": [5, 8, 11, 31, 34, 41, 88, 187, 212, 467, 490, 495, 503, 506, 508, 509, 511, 512, 547, 568, 612], "04": [5, 11, 25, 29, 34, 57, 58, 88, 114, 194, 458, 489, 490, 495, 500, 503, 504, 506, 508, 509, 647, 690, 712], "05": [5, 8, 9, 11, 17, 31, 32, 34, 40, 88, 214, 258, 265, 278, 293, 296, 305, 381, 382, 383, 437, 458, 479, 489, 490, 495, 503, 506, 508, 509, 511, 516, 550, 609, 642, 647, 661, 665, 711, 712], "464": [5, 8, 41, 88, 176, 177, 506], "15888336": [5, 88], "2154": [5, 88], "43469003": [5, 88], "10000": [5, 28, 88, 503], "meshgrid": [5, 28, 503], "spars": [5, 15, 28, 38, 89, 256, 293, 503, 512, 570], "index": [5, 9, 10, 16, 19, 20, 21, 26, 28, 32, 33, 39, 42, 43, 44, 82, 89, 158, 253, 259, 260, 262, 263, 293, 299, 302, 307, 309, 311, 321, 327, 365, 374, 376, 392, 393, 402, 410, 412, 430, 432, 453, 454, 457, 501, 503, 505, 508, 513, 515, 518, 519, 520, 578, 582, 592, 593, 594, 597, 598, 599, 605, 607, 616, 617, 619, 621, 622, 623, 625, 627, 648, 662, 676, 697, 698, 703, 706, 707, 708, 709, 711, 712, 719, 732], "xy": [5, 28, 89, 503], "dimension": [5, 8, 9, 14, 16, 19, 22, 23, 26, 28, 31, 32, 37, 39, 45, 46, 48, 71, 82, 84, 89, 96, 241, 261, 293, 299, 300, 302, 311, 326, 327, 331, 332, 342, 345, 356, 357, 358, 364, 365, 399, 410, 503, 506, 511, 513, 518, 521, 522, 539, 540, 546, 549, 552, 554, 555, 565, 566, 580, 616, 617, 619, 632, 633, 634, 635, 636, 637, 638, 639, 640, 706, 708, 712, 715, 717, 729, 732, 739], "repres": [5, 8, 9, 13, 14, 31, 32, 36, 37, 70, 89, 91, 113, 171, 172, 175, 178, 187, 189, 196, 222, 235, 239, 240, 256, 262, 263, 276, 293, 296, 299, 300, 302, 305, 306, 309, 341, 350, 373, 381, 382, 383, 387, 393, 400, 502, 503, 504, 506, 510, 511, 533, 534, 546, 554, 557, 558, 649, 661, 665, 694, 715, 719, 729, 730, 733], "grid": [5, 89, 256, 293, 503, 701, 712, 724], "coordin": [5, 8, 19, 31, 32, 42, 89, 96, 177, 239, 259, 260, 261, 276, 293, 307, 392, 503, 506, 518, 619], "numer": [5, 6, 8, 9, 10, 14, 18, 19, 22, 29, 31, 32, 33, 37, 41, 42, 44, 48, 49, 89, 101, 169, 172, 185, 189, 194, 195, 196, 203, 204, 205, 208, 217, 218, 222, 224, 225, 226, 227, 231, 232, 233, 237, 238, 242, 243, 306, 311, 388, 401, 458, 459, 467, 468, 479, 480, 503, 504, 506, 508, 511, 517, 518, 521, 539, 546, 549, 554, 557, 559, 561, 563, 565, 611, 612, 613, 615, 616, 617, 619, 620, 625, 632, 635, 637, 647, 648, 649, 650, 661, 699, 708, 710, 711, 712, 713, 714, 715, 717, 721, 729, 732, 738], "conserv": [5, 89, 503], "cartesian": [5, 89, 503], "matrix": [5, 9, 10, 13, 14, 32, 33, 36, 37, 48, 89, 94, 95, 96, 261, 293, 300, 311, 344, 347, 348, 351, 352, 401, 411, 417, 503, 508, 510, 511, 534, 538, 540, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 567, 649, 661, 662, 689, 699, 706, 710, 730, 732], "ij": [5, 22, 89, 503, 521, 631], "zero": [5, 6, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 28, 29, 31, 32, 34, 36, 37, 41, 42, 45, 46, 57, 59, 60, 61, 79, 80, 82, 84, 89, 91, 92, 93, 94, 95, 98, 101, 102, 170, 171, 172, 174, 175, 176, 177, 178, 181, 183, 184, 186, 187, 188, 189, 194, 195, 196, 203, 204, 205, 206, 212, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 248, 249, 252, 253, 268, 269, 270, 272, 280, 283, 285, 286, 287, 291, 293, 296, 299, 300, 302, 309, 311, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 341, 342, 346, 348, 352, 368, 372, 373, 393, 402, 403, 418, 422, 429, 449, 489, 490, 495, 496, 497, 498, 500, 503, 504, 506, 508, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 537, 538, 540, 545, 547, 548, 549, 550, 551, 552, 553, 555, 557, 565, 566, 573, 574, 575, 576, 578, 579, 586, 609, 611, 612, 613, 616, 617, 618, 619, 621, 622, 623, 624, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 661, 662, 666, 684, 694, 697, 699, 700, 701, 705, 707, 708, 711, 717, 720, 721, 731], "vector": [5, 9, 10, 13, 14, 32, 33, 36, 37, 89, 299, 300, 302, 306, 311, 321, 347, 373, 389, 401, 418, 422, 439, 488, 503, 508, 510, 511, 534, 536, 539, 543, 544, 546, 549, 554, 559, 560, 564, 565, 566, 567, 662, 724, 732], "respect": [5, 8, 9, 11, 14, 31, 32, 34, 37, 89, 169, 172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 200, 201, 208, 209, 214, 216, 218, 219, 222, 225, 231, 235, 238, 239, 245, 276, 290, 291, 296, 298, 302, 305, 355, 381, 383, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 506, 509, 510, 511, 514, 523, 530, 531, 539, 556, 559, 587, 588, 589, 644, 647, 661, 688, 689, 690, 691, 694, 695, 697, 698, 699, 700, 701, 705, 706, 708, 709, 710, 712, 713, 714, 728, 738], "effect": [5, 9, 11, 22, 32, 34, 45, 89, 299, 301, 334, 353, 489, 497, 503, 509, 510, 521, 536, 636, 638, 647, 650, 683, 689, 694, 697, 698, 702, 705, 709, 711, 715, 725], "rank": [5, 9, 14, 16, 23, 32, 37, 39, 46, 51, 89, 302, 311, 373, 410, 503, 511, 513, 518, 522, 539, 541, 550, 552, 556, 558, 563, 565, 566, 573, 574, 582, 585, 586, 619, 639, 640], "length": [5, 9, 15, 16, 26, 32, 38, 39, 49, 71, 84, 89, 250, 254, 257, 258, 264, 270, 291, 293, 296, 299, 302, 306, 309, 321, 326, 327, 330, 331, 332, 342, 373, 376, 389, 394, 488, 503, 508, 510, 511, 512, 513, 519, 536, 559, 560, 568, 578, 621, 647, 660, 662, 712, 720], "ni": [5, 89, 503], "xi": [5, 89, 503], "native_arrai": [5, 6, 8, 28, 30, 31, 32, 33, 44, 55, 58, 86, 89, 91, 93, 98, 101, 102, 103, 104, 112, 117, 124, 146, 155, 163, 179, 183, 184, 188, 189, 190, 192, 196, 200, 201, 208, 209, 217, 222, 225, 228, 231, 236, 289, 302, 373, 375, 377, 411, 441, 442, 445, 474, 500, 503, 504, 505, 506, 508, 510, 511, 512, 513, 517, 518, 521, 522, 524, 525, 532, 537, 540, 545, 551, 552, 560, 561, 563, 566, 568, 570, 571, 578, 610, 619, 628, 634, 637, 639, 644, 653, 671, 711, 712], "one_hot": [5, 28, 503, 680, 722], "depth": [5, 9, 13, 28, 32, 36, 91, 299, 302, 334, 362, 422, 434, 503, 508, 510, 515, 528, 529, 602, 660, 664, 691, 698, 720, 721, 722, 724, 726], "scatter": [5, 10, 28, 33, 91, 453, 454, 503, 508, 696, 709, 715, 739], "defin": [5, 9, 10, 14, 28, 32, 33, 37, 61, 91, 94, 95, 96, 172, 189, 196, 222, 223, 231, 233, 236, 245, 254, 257, 258, 261, 262, 263, 267, 291, 293, 296, 299, 300, 302, 311, 334, 346, 373, 375, 404, 437, 438, 457, 500, 503, 506, 508, 511, 521, 539, 544, 545, 558, 632, 633, 634, 636, 680, 689, 690, 694, 695, 698, 699, 702, 705, 708, 710, 711, 712, 713, 719, 721, 725, 727, 729, 730, 731, 732, 733, 736, 738, 739], "hot": [5, 28, 91, 503, 680], "dimens": [5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 58, 62, 91, 94, 95, 256, 262, 263, 269, 270, 276, 283, 289, 293, 296, 297, 299, 300, 301, 302, 305, 306, 309, 311, 313, 314, 315, 317, 318, 319, 321, 326, 327, 331, 335, 336, 337, 338, 341, 343, 344, 347, 353, 356, 357, 358, 365, 375, 381, 382, 383, 389, 391, 394, 404, 406, 407, 408, 410, 422, 423, 424, 426, 433, 466, 469, 488, 500, 503, 508, 510, 511, 512, 513, 514, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 565, 566, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 587, 588, 589, 615, 616, 617, 619, 621, 622, 623, 624, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 649, 662, 665, 701, 703, 708, 710, 711, 712, 715, 717, 720], "overrid": [5, 9, 28, 32, 91, 311, 401, 503, 694, 696], "ones_lik": [5, 28, 503, 695, 722], "tril": [5, 28, 503], "m": [5, 9, 14, 18, 31, 32, 37, 41, 48, 89, 94, 95, 96, 216, 261, 293, 299, 300, 302, 306, 321, 347, 358, 366, 367, 375, 387, 388, 389, 390, 391, 503, 511, 515, 517, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 598, 611, 612, 613, 680, 686, 690, 691, 692, 698, 717], "whose": [5, 8, 9, 10, 14, 16, 20, 22, 28, 31, 32, 33, 37, 39, 43, 45, 48, 86, 94, 95, 171, 175, 178, 186, 187, 188, 227, 228, 234, 235, 239, 240, 241, 275, 279, 280, 282, 286, 300, 302, 347, 372, 378, 416, 470, 503, 506, 508, 511, 513, 519, 521, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 566, 575, 579, 621, 622, 623, 630, 631, 649, 702, 712], "innermost": [5, 14, 37, 94, 95, 300, 347, 503, 511, 538, 540, 542, 543, 544, 545, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563], "two": [5, 9, 14, 20, 32, 33, 37, 48, 49, 68, 71, 82, 89, 94, 95, 96, 127, 135, 183, 197, 198, 232, 261, 265, 274, 275, 277, 278, 280, 282, 288, 293, 296, 299, 300, 302, 311, 327, 345, 346, 347, 352, 357, 373, 375, 377, 401, 410, 414, 502, 503, 504, 506, 508, 511, 513, 519, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 565, 583, 621, 622, 623, 624, 647, 649, 662, 684, 689, 690, 693, 694, 699, 700, 701, 702, 706, 710, 711, 712, 715, 716, 720, 722, 729, 737], "mxn": [5, 14, 37, 94, 95, 503, 511, 542, 550, 552, 553, 555, 556, 560, 563], "matric": [5, 14, 32, 37, 48, 89, 94, 95, 300, 302, 347, 352, 364, 503, 510, 511, 534, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 564, 649, 706, 724, 732], "diagon": [5, 9, 14, 32, 37, 82, 94, 95, 96, 253, 261, 293, 300, 302, 345, 348, 364, 503, 511, 541, 563], "main": [5, 9, 14, 32, 37, 82, 94, 95, 96, 253, 261, 293, 300, 302, 345, 364, 503, 511, 541, 542, 563, 689, 690, 693, 696, 697, 707, 709, 730, 732, 733, 738], "lower": [5, 8, 9, 14, 18, 31, 32, 37, 41, 82, 94, 220, 253, 261, 293, 311, 404, 405, 410, 503, 506, 511, 517, 538, 544, 545, 552, 613, 649, 660, 661, 680, 691, 699, 701, 710, 712, 717, 725, 727, 728, 729, 730, 732, 733, 738, 739], "triangular": [5, 14, 37, 94, 95, 96, 261, 293, 503, 511, 538, 544, 545, 552, 556], "alloc": [5, 6, 29, 94, 95, 101, 503, 504, 689, 691, 725], "triu": [5, 28, 503], "upper": [5, 9, 14, 18, 32, 37, 41, 82, 95, 96, 253, 293, 311, 404, 503, 511, 517, 538, 544, 545, 556, 613, 660, 709, 712], "zeros_lik": [5, 28, 101, 218, 489, 490, 493, 495, 497, 503, 504, 506, 509, 513, 571, 710, 715], "data_typ": [6, 9, 29, 32, 131, 504, 696, 699, 712, 713], "_arraywithdatatyp": [6, 48], "astyp": [6, 13, 29, 36, 504, 510, 526, 528, 529, 532, 680, 699, 709, 710, 715], "irrespect": [6, 14, 29, 37, 101, 504, 511, 559, 697, 709, 719, 739], "promot": [6, 8, 9, 14, 29, 31, 32, 37, 44, 48, 49, 101, 104, 127, 128, 129, 135, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 189, 192, 194, 196, 210, 211, 212, 213, 214, 219, 222, 227, 231, 234, 235, 236, 237, 238, 239, 240, 243, 273, 281, 286, 296, 311, 401, 461, 482, 504, 506, 508, 511, 513, 521, 538, 539, 546, 547, 549, 550, 551, 552, 554, 555, 557, 558, 565, 566, 572, 582, 625, 633, 636, 647, 648, 693, 702, 703, 706, 714], "rule": [6, 8, 9, 14, 29, 31, 32, 37, 101, 104, 127, 128, 129, 178, 189, 222, 224, 231, 233, 241, 243, 302, 311, 363, 401, 504, 506, 511, 513, 538, 539, 546, 551, 554, 558, 572, 649, 674, 693, 694, 697, 698, 699, 701, 704, 705, 706, 708, 712, 715, 733], "cast": [6, 8, 9, 14, 22, 29, 31, 37, 101, 104, 129, 223, 311, 402, 403, 504, 506, 511, 521, 566, 629, 630, 635, 637, 648, 706, 711, 717], "nan": [6, 8, 9, 10, 20, 22, 29, 31, 32, 33, 101, 169, 170, 171, 172, 174, 175, 176, 177, 178, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 203, 204, 205, 210, 211, 212, 213, 214, 217, 222, 223, 225, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 242, 245, 265, 274, 278, 283, 286, 291, 296, 311, 399, 400, 407, 408, 435, 487, 501, 504, 506, 508, 519, 521, 522, 621, 622, 623, 624, 632, 633, 634, 636, 637, 638, 639, 640, 647, 650, 693, 699, 702, 708, 713, 714], "infin": [6, 8, 10, 14, 29, 31, 37, 101, 169, 170, 171, 172, 175, 176, 177, 178, 185, 186, 187, 189, 190, 192, 194, 195, 196, 203, 204, 210, 211, 212, 213, 214, 217, 222, 223, 225, 227, 231, 232, 234, 235, 236, 239, 240, 242, 286, 296, 435, 501, 504, 506, 508, 511, 521, 522, 557, 566, 632, 634, 639, 640, 693, 702], "implement": [6, 7, 9, 20, 21, 29, 30, 32, 37, 44, 101, 115, 116, 129, 148, 149, 163, 169, 170, 171, 174, 175, 176, 177, 186, 187, 189, 192, 194, 196, 210, 211, 212, 213, 222, 224, 227, 231, 234, 235, 239, 240, 286, 296, 300, 311, 346, 347, 407, 408, 427, 428, 504, 505, 506, 508, 510, 511, 519, 520, 521, 536, 543, 544, 545, 554, 563, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 648, 650, 671, 680, 689, 692, 693, 694, 695, 697, 699, 700, 702, 703, 705, 706, 707, 709, 711, 712, 713, 715, 717, 719, 720, 721, 722, 724, 725, 727, 729, 730, 731, 732, 735, 738, 739], "match": [6, 9, 26, 29, 32, 101, 196, 231, 268, 270, 296, 299, 302, 342, 374, 376, 449, 504, 506, 508, 511, 544, 545, 550, 566, 642, 689, 694, 696, 697, 701, 711, 733, 738], "newli": [6, 29, 101, 416, 504, 508, 691, 695, 698, 709, 712], "float64": [6, 9, 18, 22, 28, 29, 31, 32, 33, 41, 45, 71, 84, 85, 101, 104, 108, 109, 114, 115, 118, 119, 124, 125, 129, 131, 132, 138, 141, 223, 273, 296, 311, 401, 448, 503, 504, 508, 511, 517, 544, 545, 550, 566, 612, 613, 630, 644, 647, 648, 699, 711, 712], "broadcast_arrai": [6, 29, 504], "against": [6, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 102, 221, 240, 265, 266, 269, 278, 296, 311, 407, 408, 410, 446, 504, 506, 508, 511, 518, 549, 550, 552, 555, 616, 682, 712, 717, 725, 732], "x2": [6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 48, 49, 52, 102, 128, 135, 155, 172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 197, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 218, 219, 220, 221, 222, 225, 227, 231, 238, 243, 265, 268, 273, 274, 275, 277, 279, 284, 287, 296, 302, 311, 368, 401, 411, 504, 505, 506, 508, 511, 518, 539, 546, 549, 554, 558, 561, 562, 565, 620, 644, 668, 693, 699, 701, 703, 705, 709, 710], "x3": [6, 10, 102, 411, 504, 508], "mix": [6, 8, 29, 31, 33, 38, 41, 48, 49, 102, 115, 116, 129, 148, 149, 179, 182, 183, 184, 189, 190, 196, 200, 201, 208, 209, 219, 222, 225, 231, 311, 408, 425, 427, 428, 429, 430, 439, 472, 475, 504, 505, 506, 508, 510, 511, 512, 513, 516, 521, 524, 526, 529, 532, 534, 537, 538, 561, 568, 570, 571, 609, 631, 633, 636, 648, 650, 689, 692, 699, 700, 701, 709, 715, 717, 727, 732, 736, 738], "broadcast_to": [6, 29, 504, 699], "can_cast": [6, 29, 504, 699, 706, 710], "occur": [6, 8, 20, 29, 31, 43, 104, 223, 239, 504, 506, 518, 519, 616, 617, 621, 622, 623, 624, 693, 698, 700, 703, 714], "accord": [6, 10, 16, 22, 29, 39, 45, 104, 114, 172, 183, 189, 196, 222, 233, 299, 302, 342, 373, 429, 432, 453, 454, 504, 506, 508, 511, 513, 521, 565, 573, 586, 636, 638, 649, 668, 674, 689, 690, 693, 699, 704, 706, 710, 712], "as_n": [6, 7, 26, 29, 30, 107, 108, 109, 110, 111, 112, 118, 145, 146, 158, 504, 505, 699], "int32": [6, 9, 10, 18, 19, 22, 29, 32, 33, 41, 42, 82, 87, 93, 98, 101, 104, 106, 108, 110, 112, 115, 117, 118, 122, 125, 129, 133, 137, 139, 157, 250, 291, 307, 311, 392, 402, 403, 404, 430, 439, 474, 503, 504, 505, 508, 517, 518, 521, 611, 612, 613, 617, 629, 630, 635, 637, 647, 648, 699, 710, 712, 717], "finfo": [6, 29, 504, 712], "inform": [6, 11, 29, 34, 114, 117, 412, 498, 504, 508, 509, 514, 589, 680, 688, 689, 690, 691, 693, 697, 698, 703, 707, 709, 711, 712, 735], "about": [6, 29, 114, 117, 504, 680, 684, 687, 688, 689, 690, 691, 692, 693, 696, 698, 699, 700, 704, 705, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 725, 733, 734, 737], "8": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 55, 85, 86, 90, 93, 98, 107, 109, 110, 111, 114, 147, 164, 172, 174, 175, 179, 180, 183, 185, 187, 193, 196, 200, 201, 207, 208, 209, 214, 217, 218, 220, 221, 222, 227, 228, 231, 232, 233, 236, 237, 240, 241, 242, 248, 249, 251, 253, 265, 273, 276, 278, 279, 280, 283, 289, 291, 293, 296, 299, 300, 302, 311, 317, 318, 319, 320, 325, 326, 330, 331, 335, 336, 338, 340, 341, 346, 350, 354, 356, 357, 358, 361, 365, 369, 370, 374, 375, 376, 377, 379, 380, 389, 391, 403, 406, 407, 410, 415, 416, 418, 422, 423, 426, 429, 433, 437, 438, 439, 441, 442, 445, 448, 453, 454, 457, 467, 469, 470, 489, 492, 494, 497, 499, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 524, 528, 529, 532, 533, 534, 536, 540, 541, 542, 545, 546, 549, 550, 551, 554, 557, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 575, 582, 583, 585, 591, 598, 602, 610, 611, 612, 613, 615, 620, 621, 623, 625, 626, 628, 630, 631, 633, 635, 637, 638, 647, 650, 662, 690, 697, 698, 701, 708, 712, 716, 720], "14": [6, 8, 9, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 101, 114, 117, 170, 175, 177, 184, 188, 214, 218, 222, 228, 235, 243, 272, 299, 300, 302, 311, 317, 318, 319, 320, 330, 337, 340, 341, 344, 361, 365, 369, 379, 402, 467, 489, 504, 506, 508, 509, 510, 511, 513, 515, 519, 521, 524, 525, 527, 529, 533, 542, 546, 554, 563, 585, 602, 611, 612, 613, 621, 630, 631, 697, 701, 712], "resolut": [6, 29, 114, 504, 691], "1e": [6, 9, 11, 14, 15, 17, 29, 32, 34, 37, 38, 40, 114, 265, 278, 296, 305, 381, 382, 383, 458, 459, 467, 479, 480, 489, 490, 495, 497, 504, 508, 509, 511, 512, 516, 559, 568, 569, 570, 609, 642, 644, 663, 665, 666, 680, 697, 706, 709, 711, 721, 722], "06": [6, 18, 31, 34, 55, 114, 171, 187, 299, 320, 330, 495, 500, 504, 509, 613, 642, 644, 712, 720], "min": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 94, 96, 114, 117, 221, 261, 262, 293, 300, 348, 423, 453, 454, 467, 503, 504, 506, 508, 511, 521, 550, 556, 559, 560, 566, 680], "4028235e": [6, 114, 504], "38": [6, 9, 31, 32, 41, 114, 239, 284, 296, 299, 311, 318, 337, 340, 341, 402, 504, 506, 511, 551, 647, 701], "max": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 114, 117, 220, 299, 300, 317, 318, 319, 335, 336, 337, 338, 340, 348, 417, 418, 423, 439, 453, 454, 504, 506, 508, 511, 521, 550, 552, 555, 647, 662, 666, 698, 710, 712], "iinfo": [6, 29, 504], "integ": [6, 8, 9, 13, 14, 16, 18, 22, 23, 26, 31, 32, 33, 36, 37, 39, 41, 45, 46, 48, 49, 71, 85, 117, 118, 124, 128, 129, 133, 169, 179, 180, 181, 182, 183, 184, 185, 195, 196, 207, 219, 224, 227, 231, 232, 242, 243, 262, 263, 269, 272, 273, 293, 296, 299, 302, 306, 309, 311, 326, 331, 341, 361, 369, 373, 379, 387, 388, 389, 390, 391, 393, 394, 399, 401, 402, 403, 408, 410, 432, 448, 457, 488, 503, 504, 506, 508, 510, 511, 513, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 532, 539, 541, 551, 565, 566, 580, 610, 611, 612, 613, 614, 615, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 654, 662, 691, 697, 699, 708, 711, 712, 717, 719], "119": [6, 117], "122": [6, 117, 187, 506], "int8": [6, 18, 28, 29, 41, 84, 110, 115, 117, 118, 122, 250, 291, 503, 504, 611, 647, 648, 699, 712], "128": [6, 8, 13, 29, 31, 36, 49, 117, 193, 299, 320, 330, 422, 432, 504, 506, 508, 510, 511, 525, 527, 532, 554, 680], "127": [6, 9, 14, 29, 32, 117, 286, 296, 504, 511, 546], "12": [6, 8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 40, 41, 45, 48, 49, 117, 172, 174, 179, 183, 184, 187, 189, 190, 191, 209, 222, 225, 232, 235, 242, 243, 257, 258, 276, 279, 280, 293, 296, 299, 302, 311, 317, 318, 319, 320, 322, 326, 327, 335, 336, 340, 341, 342, 361, 365, 369, 379, 391, 402, 408, 418, 422, 423, 454, 459, 467, 480, 506, 508, 510, 511, 513, 515, 516, 517, 518, 519, 521, 524, 528, 533, 534, 542, 546, 550, 554, 560, 561, 563, 575, 579, 581, 583, 585, 602, 609, 611, 612, 613, 620, 621, 629, 630, 631, 635, 637, 647, 690, 695, 697, 699, 701, 708], "54": [6, 8, 13, 31, 32, 36, 41, 117, 186, 187, 192, 207, 236, 242, 254, 293, 299, 311, 320, 330, 402, 506, 510, 511, 521, 534, 551, 554, 611, 612, 613, 631, 698, 701], "1220": [6, 117], "int16": [6, 9, 18, 22, 29, 41, 104, 108, 110, 115, 117, 124, 139, 250, 291, 311, 402, 403, 504, 521, 611, 629, 630, 635, 637, 647, 648, 699, 710, 712, 717], "32768": [6, 29, 117], "32767": [6, 29, 117], "is_bool_dtyp": [6, 29, 504], "is_float_dtyp": [6, 29, 504, 713], "see": [6, 8, 14, 19, 20, 22, 23, 31, 32, 37, 42, 45, 46, 48, 49, 55, 57, 60, 71, 83, 87, 96, 103, 122, 129, 172, 177, 179, 181, 182, 183, 184, 189, 190, 194, 196, 200, 201, 208, 209, 212, 214, 216, 218, 219, 222, 225, 227, 231, 238, 243, 261, 293, 300, 344, 500, 503, 504, 506, 511, 518, 519, 521, 522, 539, 552, 555, 558, 565, 566, 617, 621, 622, 623, 624, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 682, 685, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 704, 705, 706, 710, 711, 712, 715, 717, 719, 720, 724, 725, 728], "is_int_dtyp": [6, 29, 504, 711, 713], "is_uint_dtyp": [6, 29, 504, 711, 713], "result_typ": [6, 29, 504, 699], "arrays_and_dtyp": [6, 29, 129, 504], "involv": [6, 29, 129, 172, 189, 196, 222, 227, 504, 506, 683, 685, 692, 698, 699, 701, 711, 715, 722, 732, 738], "_arraywithdevic": [7, 48], "dev": [7, 26, 30, 150, 157, 505, 690, 700, 706, 719, 721], "to_devic": [7, 30, 145, 505, 680], "move": [7, 9, 30, 32, 96, 159, 163, 167, 261, 293, 302, 372, 503, 505, 680, 691, 700, 713], "__dlpack__": [7, 30, 83, 163, 503, 505], "mai": [7, 8, 9, 14, 20, 21, 30, 31, 37, 44, 48, 49, 71, 83, 163, 189, 190, 196, 201, 209, 217, 218, 222, 223, 225, 240, 327, 421, 503, 505, 506, 508, 511, 519, 520, 521, 557, 566, 621, 622, 623, 624, 625, 628, 632, 633, 634, 636, 647, 684, 688, 689, 690, 691, 693, 697, 698, 699, 703, 706, 707, 708, 710, 711, 712, 715, 718, 719, 721, 739], "caveat": [7, 30, 163, 301, 353, 505], "portabl": [7, 30, 163, 505, 680, 730], "_arraywithelementwis": [8, 48], "ab": [8, 14, 24, 31, 47, 48, 49, 227, 265, 278, 296, 506, 511, 515, 550, 560, 566, 598, 601, 644, 674, 694, 699, 707, 710, 712], "absolut": [8, 9, 14, 24, 26, 31, 32, 37, 48, 169, 233, 265, 278, 281, 296, 300, 348, 506, 511, 550, 551, 552, 557, 642, 644, 647, 649, 650, 685, 690], "aco": [8, 31, 506], "real": [8, 9, 22, 31, 32, 45, 48, 57, 60, 92, 93, 169, 170, 171, 172, 174, 175, 176, 177, 178, 187, 189, 190, 192, 194, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 219, 222, 224, 225, 227, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 271, 281, 296, 299, 300, 321, 342, 347, 348, 500, 503, 506, 511, 518, 521, 543, 544, 545, 550, 557, 559, 560, 563, 566, 619, 632, 634, 635, 636, 637, 697, 734], "invers": [8, 9, 14, 31, 32, 37, 170, 171, 174, 175, 176, 177, 178, 299, 309, 321, 330, 332, 393, 506, 511, 547, 551, 555, 668, 699, 724], "cosin": [8, 31, 170, 171, 186, 187, 255, 293, 299, 320, 330, 506, 662], "57": [8, 9, 31, 32, 147, 170, 171, 174, 175, 177, 184, 187, 188, 228, 244, 505, 506], "69": [8, 34, 41, 170, 212, 299, 320, 330, 493, 506, 509, 511, 550, 551, 612, 712, 720], "acosh": [8, 31, 115, 116, 504, 506], "area": [8, 9, 31, 32, 36, 171, 175, 178, 299, 334, 341, 506, 683, 709, 715, 723, 728], "hyperbol": [8, 31, 171, 175, 178, 187, 235, 239, 240, 506], "sector": [8, 31, 171, 175, 178, 506, 683], "32": [8, 9, 18, 31, 32, 36, 37, 41, 48, 49, 57, 113, 171, 183, 184, 193, 207, 229, 232, 233, 267, 296, 299, 300, 311, 318, 319, 320, 330, 340, 341, 346, 402, 422, 438, 500, 504, 506, 508, 510, 511, 517, 518, 521, 525, 527, 528, 529, 532, 534, 549, 554, 611, 612, 613, 620, 631, 647, 650, 680, 698, 708, 720, 737], "99": [8, 11, 29, 31, 41, 85, 171, 186, 467, 493, 503, 506, 508, 509, 515, 521, 602, 612, 631], "second": [8, 9, 11, 14, 16, 20, 31, 32, 33, 34, 37, 39, 43, 48, 49, 68, 96, 127, 135, 172, 177, 179, 181, 182, 183, 184, 190, 196, 197, 198, 199, 200, 201, 207, 208, 209, 214, 215, 216, 218, 219, 222, 225, 227, 238, 261, 265, 274, 276, 277, 278, 284, 287, 288, 293, 296, 300, 302, 309, 311, 346, 347, 348, 350, 375, 378, 388, 390, 394, 401, 404, 414, 462, 483, 489, 490, 495, 502, 503, 504, 506, 508, 509, 511, 513, 514, 515, 519, 539, 542, 543, 544, 546, 549, 554, 556, 557, 559, 561, 565, 582, 583, 588, 591, 621, 622, 623, 666, 684, 690, 693, 696, 699, 701, 704, 709, 710, 712, 714, 719, 737], "compat": [8, 14, 16, 19, 22, 23, 31, 37, 39, 42, 45, 46, 48, 49, 103, 172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 200, 201, 208, 209, 214, 216, 218, 219, 222, 225, 227, 231, 238, 243, 504, 506, 511, 513, 518, 521, 522, 539, 552, 555, 558, 561, 565, 566, 578, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 683, 695, 705, 710, 711, 713, 717, 725], "multipli": [8, 9, 13, 22, 31, 32, 36, 172, 238, 279, 299, 300, 334, 352, 402, 403, 506, 510, 521, 533, 629, 635, 691, 694, 695, 697, 701], "determin": [8, 9, 14, 16, 20, 23, 26, 31, 32, 33, 37, 44, 46, 48, 49, 82, 104, 106, 113, 119, 120, 121, 122, 124, 125, 126, 141, 151, 153, 154, 165, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 189, 192, 194, 196, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 219, 222, 227, 231, 234, 235, 236, 237, 238, 239, 240, 243, 281, 286, 296, 299, 300, 311, 334, 348, 401, 411, 414, 435, 436, 440, 441, 442, 443, 444, 445, 470, 487, 503, 504, 505, 506, 508, 511, 513, 514, 519, 522, 538, 539, 540, 542, 546, 547, 549, 551, 552, 554, 555, 557, 558, 563, 565, 566, 572, 587, 588, 589, 621, 622, 623, 624, 625, 639, 640, 649, 654, 661, 665, 682, 697, 699, 700, 702, 706, 710, 712, 714, 715], "15": [8, 9, 10, 14, 18, 22, 28, 29, 31, 32, 33, 36, 37, 39, 41, 45, 49, 86, 114, 172, 179, 183, 189, 200, 207, 208, 214, 222, 231, 232, 233, 276, 289, 296, 297, 299, 300, 302, 311, 317, 318, 335, 337, 340, 341, 346, 361, 365, 369, 379, 402, 418, 422, 423, 426, 437, 438, 462, 467, 483, 503, 504, 506, 508, 510, 511, 513, 515, 517, 518, 519, 521, 524, 534, 542, 545, 546, 547, 554, 560, 561, 579, 585, 590, 602, 611, 612, 619, 621, 629, 630, 631, 644, 690, 698, 701, 708, 735], "angl": [8, 31, 177, 187, 235, 240, 277, 296, 506, 724], "deg": [8, 31, 173, 506], "radian": [8, 9, 31, 32, 170, 173, 174, 176, 177, 186, 188, 228, 234, 239, 286, 296, 506, 702], "degre": [8, 9, 22, 31, 32, 45, 173, 188, 228, 302, 375, 506, 521, 636, 638, 731], "1j": [8, 31, 32, 173, 174, 186, 187, 192, 194, 206, 229, 234, 235, 239, 267, 467, 506, 508], "2j": [8, 9, 31, 32, 173, 202, 267, 299, 326, 331, 506], "3j": [8, 9, 31, 32, 173, 206, 229, 267, 296, 506], "35619449": [8, 173, 506], "78539816": [8, 173, 506], "135": [8, 173, 417, 506, 508], "45": [8, 9, 22, 31, 32, 34, 36, 41, 49, 173, 177, 189, 232, 233, 284, 296, 299, 311, 320, 330, 341, 402, 408, 489, 495, 506, 509, 511, 513, 521, 554, 580, 612, 613, 631, 647], "asin": [8, 31, 506], "sine": [8, 31, 174, 175, 234, 235, 506], "927": [8, 31, 174], "asinh": [8, 31, 174, 506], "atan": [8, 31, 506], "tangent": [8, 31, 176, 177, 178, 239, 240, 506, 702], "785": [8, 31, 176, 177, 506], "atan2": [8, 31, 506], "quotient": [8, 31, 177, 189, 196, 506], "245": [8, 36, 177, 510, 533, 534], "68": [8, 41, 58, 85, 177, 299, 320, 330, 500, 503, 506, 516, 609, 612, 613], "588": [8, 177, 506], "inf": [8, 9, 10, 14, 31, 32, 33, 37, 177, 194, 203, 204, 205, 206, 210, 211, 223, 245, 281, 291, 296, 300, 311, 344, 404, 435, 487, 501, 506, 508, 511, 550, 566, 647, 650, 699, 708], "36": [8, 9, 13, 22, 32, 33, 37, 177, 232, 233, 276, 296, 299, 311, 320, 330, 402, 422, 423, 506, 508, 511, 515, 521, 534, 551, 554, 564, 601, 631], "75": [8, 9, 31, 32, 33, 36, 41, 87, 175, 177, 189, 202, 255, 275, 276, 293, 296, 341, 410, 424, 437, 467, 503, 506, 508, 511, 515, 517, 524, 547, 554, 598, 613], "52": [8, 31, 33, 34, 41, 177, 187, 189, 311, 402, 422, 423, 438, 489, 506, 508, 509, 510, 511, 521, 534, 554, 613, 631, 674], "719": [8, 177, 506], "197": [8, 177, 506], "atanh": [8, 31, 506], "549": [8, 31, 36, 178, 506, 510, 534], "47": [8, 9, 14, 18, 31, 32, 33, 34, 36, 41, 178, 236, 299, 311, 318, 336, 337, 402, 422, 423, 493, 506, 508, 509, 510, 511, 517, 534, 546, 612, 613], "bitwise_and": [8, 31, 506], "11": [8, 9, 10, 13, 14, 18, 22, 31, 32, 33, 36, 37, 39, 41, 45, 49, 172, 176, 179, 194, 231, 232, 238, 280, 296, 299, 300, 302, 317, 318, 330, 335, 336, 338, 340, 341, 349, 361, 365, 369, 371, 379, 402, 403, 416, 422, 423, 429, 438, 454, 506, 508, 510, 511, 512, 513, 515, 517, 518, 519, 521, 524, 525, 533, 534, 542, 545, 546, 547, 549, 550, 554, 559, 560, 568, 570, 575, 580, 581, 583, 585, 596, 598, 608, 611, 612, 613, 620, 621, 629, 630, 631, 638, 697, 698, 699, 701, 708], "bitwise_invert": [8, 31, 506], "bitiwse_invert": [8, 180], "bitwise_left_shift": [8, 31, 506], "bitwise_or": [8, 31, 506], "bitwise_right_shift": [8, 31, 48, 506], "64": [8, 9, 13, 31, 32, 33, 36, 37, 41, 45, 49, 113, 183, 193, 227, 236, 237, 273, 296, 299, 320, 330, 422, 423, 495, 504, 506, 508, 509, 510, 511, 515, 521, 525, 527, 529, 532, 551, 554, 564, 598, 602, 612, 631, 635, 680, 690, 720, 721, 737], "16": [8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 48, 49, 117, 183, 212, 232, 239, 273, 276, 280, 296, 299, 302, 311, 317, 318, 320, 326, 330, 331, 335, 336, 338, 341, 365, 402, 408, 423, 426, 448, 467, 499, 504, 506, 508, 509, 510, 511, 513, 515, 517, 518, 521, 532, 534, 538, 542, 545, 546, 554, 560, 585, 598, 602, 611, 612, 613, 620, 630, 631, 647, 650, 680, 691, 701, 720], "bitwise_xor": [8, 31, 48, 506], "89": [8, 18, 29, 31, 32, 41, 49, 117, 184, 504, 506, 511, 521, 561, 612, 613, 637], "51": [8, 9, 31, 32, 33, 41, 184, 222, 235, 320, 506, 613, 647], "18": [8, 9, 18, 31, 32, 36, 37, 41, 45, 58, 184, 189, 231, 235, 244, 276, 296, 299, 302, 320, 326, 330, 331, 335, 338, 341, 365, 500, 506, 511, 517, 521, 528, 542, 549, 554, 611, 612, 613, 630, 631, 635, 697, 701], "19": [8, 9, 18, 31, 32, 36, 37, 41, 175, 184, 212, 222, 239, 299, 300, 302, 311, 319, 320, 331, 335, 338, 341, 346, 365, 402, 506, 511, 515, 517, 520, 542, 550, 563, 601, 611, 612, 613, 628, 701], "26": [8, 9, 17, 18, 32, 33, 34, 41, 184, 189, 235, 299, 300, 320, 352, 437, 489, 506, 508, 509, 510, 511, 515, 516, 521, 532, 542, 554, 561, 591, 609, 611, 612, 631], "27": [8, 9, 14, 18, 31, 32, 36, 37, 41, 45, 183, 184, 187, 227, 235, 236, 273, 296, 299, 320, 330, 438, 506, 508, 511, 515, 521, 549, 554, 564, 591, 598, 612, 631, 635, 647], "23": [8, 9, 14, 18, 28, 31, 32, 33, 36, 41, 86, 184, 187, 204, 205, 206, 229, 231, 232, 233, 235, 242, 267, 268, 296, 299, 311, 317, 318, 320, 330, 335, 336, 337, 338, 341, 402, 408, 503, 506, 510, 511, 515, 518, 529, 542, 546, 550, 560, 591, 598, 602, 611, 612, 613, 620, 680, 698, 712, 717], "20": [8, 9, 13, 18, 22, 31, 32, 33, 36, 37, 41, 45, 184, 188, 192, 228, 232, 236, 276, 278, 280, 296, 299, 317, 319, 335, 338, 341, 422, 429, 430, 432, 454, 457, 467, 506, 508, 511, 517, 518, 521, 524, 525, 535, 542, 547, 550, 554, 561, 611, 619, 620, 629, 630, 631, 635, 637, 680, 698, 715, 719], "74": [8, 41, 184, 214, 506, 511, 551], "41": [8, 9, 14, 31, 32, 33, 36, 37, 58, 176, 184, 222, 236, 299, 307, 311, 318, 336, 341, 392, 402, 417, 418, 500, 506, 508, 511, 521, 538, 546, 637], "59": [8, 184, 311, 402], "24": [8, 9, 14, 22, 31, 32, 33, 36, 37, 41, 48, 184, 192, 207, 209, 222, 232, 233, 236, 276, 279, 296, 299, 311, 317, 319, 320, 330, 335, 336, 337, 338, 341, 402, 422, 423, 506, 508, 511, 515, 521, 524, 542, 550, 554, 591, 602, 611, 612, 613, 629, 631, 644, 703, 720], "ceil": [8, 9, 31, 32, 71, 299, 317, 318, 319, 335, 336, 337, 340, 503, 506, 662, 709], "round": [8, 9, 31, 32, 172, 185, 189, 195, 196, 222, 236, 242, 243, 272, 296, 506, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "co": [8, 10, 31, 187, 192, 194, 235, 426, 506, 508, 683, 688, 699, 717, 724], "express": [8, 9, 31, 32, 170, 174, 176, 177, 186, 188, 228, 234, 239, 286, 296, 506, 668, 702, 710, 717, 722, 732, 733], "416": [8, 186, 506], "540": [8, 186], "990": [8, 186], "cosh": [8, 31, 186, 506], "76": [8, 22, 29, 31, 32, 41, 117, 171, 187, 235, 330, 504, 506, 511, 515, 521, 561, 598, 612, 631], "81": [8, 14, 29, 31, 37, 41, 117, 187, 212, 237, 311, 402, 504, 506, 511, 515, 517, 521, 546, 551, 564, 598, 613, 631, 712], "deg2rad": [8, 31, 506], "convers": [8, 9, 32, 188, 228, 455, 464, 508, 684, 689, 695, 716, 718, 722, 724, 725, 727, 731, 738], "90": [8, 9, 31, 32, 184, 188, 228, 232, 302, 311, 375, 402, 506, 511, 521, 554, 631, 683], "180": [8, 31, 188, 228, 506], "270": [8, 31, 188, 228, 506], "360": [8, 31, 188, 228, 506, 698], "71": [8, 31, 36, 188, 228, 341, 506], "28": [8, 13, 17, 31, 32, 33, 36, 37, 41, 45, 188, 212, 228, 299, 300, 320, 330, 346, 408, 437, 489, 506, 508, 509, 510, 511, 516, 521, 525, 527, 529, 532, 534, 554, 609, 611, 612, 613, 631, 635, 680], "divid": [8, 9, 10, 16, 26, 31, 32, 39, 48, 49, 196, 305, 381, 382, 383, 467, 506, 508, 513, 580, 694, 697, 701, 704, 712], "dividend": [8, 31, 189, 196, 231, 243, 506], "divisor": [8, 9, 11, 22, 31, 32, 34, 45, 189, 196, 199, 200, 231, 243, 299, 302, 317, 318, 319, 361, 369, 379, 489, 490, 495, 506, 509, 521, 636, 638, 662, 666], "375": [8, 190, 225], "erf": [8, 31, 506], "exponenti": [8, 9, 31, 32, 191, 192, 194, 214, 227, 249, 291, 300, 351, 506], "gauss": [8, 31, 191, 506], "error": [8, 9, 13, 26, 31, 32, 36, 55, 191, 239, 311, 408, 500, 506, 510, 511, 521, 537, 557, 560, 632, 634, 649, 663, 664, 666, 677, 684, 688, 690, 691, 693, 694, 695, 698, 699, 700, 701, 704, 705, 710, 712, 713, 714, 719, 725, 732], "328": [8, 191, 239, 506], "677": [8, 191, 506], "842": [8, 191, 239, 506], "exp": [8, 9, 31, 32, 61, 194, 214, 227, 246, 291, 299, 326, 331, 500, 506, 511, 557, 708, 710], "evalu": [8, 9, 26, 31, 32, 192, 194, 210, 211, 212, 213, 217, 224, 226, 233, 237, 281, 300, 302, 352, 371, 499, 506, 509, 515, 522, 600, 601, 639, 640, 691, 697, 699, 706, 707, 732], "71828198": [8, 31, 192], "38905573": [8, 31, 192], "08553696": [8, 31, 192, 506], "exp2": [8, 31, 506], "power": [8, 9, 10, 14, 31, 32, 33, 37, 48, 49, 183, 192, 193, 227, 264, 273, 293, 296, 458, 468, 479, 506, 508, 511, 515, 551, 564, 596, 661, 714, 719, 720, 721, 732, 734, 738], "expm1": [8, 31, 506, 699], "244": [8, 194, 680], "918": [8, 194], "48": [8, 9, 31, 32, 33, 34, 41, 57, 171, 194, 236, 299, 318, 319, 320, 330, 336, 337, 340, 437, 489, 493, 500, 506, 508, 509, 511, 515, 521, 554, 591, 612, 631], "_": [8, 26, 31, 34, 104, 192, 194, 202, 203, 218, 311, 401, 422, 489, 490, 504, 506, 508, 509, 511, 513, 515, 521, 557, 560, 586, 597, 636, 686, 689, 702, 707, 709, 712, 720], "147": [8, 194, 506], "floor": [8, 9, 31, 32, 183, 196, 299, 317, 318, 319, 321, 335, 336, 337, 340, 506, 662, 709], "floor_divid": [8, 31, 506, 654], "fmin": [8, 31, 506], "minimum": [8, 9, 10, 16, 19, 22, 31, 32, 33, 39, 42, 45, 169, 197, 224, 262, 273, 293, 296, 302, 311, 373, 399, 403, 458, 459, 467, 468, 479, 480, 506, 508, 513, 518, 521, 571, 617, 632, 634, 647, 649, 650, 654, 714, 729, 735, 739], "gcd": [8, 31, 506], "greater": [8, 9, 13, 16, 18, 31, 32, 36, 41, 48, 49, 84, 170, 171, 174, 175, 177, 178, 181, 183, 189, 195, 196, 210, 212, 227, 231, 233, 235, 236, 240, 241, 242, 266, 296, 299, 321, 326, 331, 503, 506, 510, 511, 513, 517, 537, 539, 551, 581, 613, 649, 691, 711], "greater_equ": [8, 31, 48, 49, 214, 506], "imaginari": [8, 31, 48, 57, 60, 92, 93, 170, 171, 172, 187, 189, 190, 192, 194, 202, 222, 224, 225, 232, 235, 236, 240, 267, 296, 300, 348, 500, 503, 506, 518, 619, 701], "4j": [8, 31, 202, 506], "6j": [8, 9, 31, 202, 206, 267, 506], "isfinit": [8, 31, 506, 710], "out_i": [8, 31, 203, 204, 205, 206, 229, 506], "self_i": [8, 31, 203, 204, 205, 206, 229], "finit": [8, 31, 169, 170, 171, 172, 175, 177, 178, 187, 189, 190, 192, 194, 196, 203, 204, 210, 212, 222, 223, 225, 227, 231, 235, 236, 240, 506], "isinf": [8, 31, 506], "detect_posit": [8, 31, 204, 506], "detect_neg": [8, 31, 204, 506], "detect": [8, 26, 31, 204, 506, 515, 590, 601, 689, 690, 695, 697, 698, 704, 712, 720, 721], "isnan": [8, 31, 506], "isreal": [8, 31, 506], "5j": [8, 31, 32, 206, 229, 267, 296, 506], "lcm": [8, 31, 506, 699], "common": [8, 9, 26, 31, 128, 199, 207, 268, 273, 296, 504, 506, 682, 689, 690, 696, 699, 700, 701, 706, 707, 710, 713, 715, 725, 729, 732, 739], "21": [8, 9, 10, 18, 28, 31, 32, 36, 37, 41, 45, 48, 88, 117, 172, 175, 177, 183, 184, 207, 222, 283, 299, 300, 311, 317, 320, 330, 335, 338, 341, 342, 344, 402, 454, 503, 504, 506, 511, 512, 515, 521, 542, 554, 570, 596, 611, 612, 629, 630, 631, 703, 708], "60": [8, 22, 31, 33, 41, 45, 173, 207, 430, 438, 454, 467, 488, 506, 508, 511, 515, 521, 554, 593, 611, 629, 631, 635, 698], "less": [8, 9, 14, 18, 22, 31, 32, 37, 41, 48, 49, 170, 171, 174, 177, 178, 185, 189, 196, 210, 211, 212, 213, 227, 231, 233, 236, 285, 296, 299, 311, 320, 321, 330, 401, 404, 506, 511, 517, 521, 550, 551, 552, 555, 566, 613, 636, 638, 662, 683, 690, 691, 697, 699, 701, 703, 705, 710, 712, 715, 716, 717, 732, 734], "less_equ": [8, 31, 48, 49, 506, 703], "61": [8, 9, 14, 31, 32, 34, 38, 41, 175, 210, 212, 237, 320, 489, 506, 509, 510, 511, 512, 532, 546, 568, 570, 613], "log10": [8, 31, 506], "logarithm": [8, 31, 192, 210, 211, 212, 213, 214, 271, 281, 296, 506, 511, 557], "602": [8, 211, 506], "699": [8, 211, 506], "log1p": [8, 31, 506, 708], "693": [8, 31, 62, 175, 212, 500, 506, 512, 570], "001": [8, 9, 17, 29, 32, 34, 114, 212, 229, 267, 278, 296, 490, 504, 506, 509, 516, 609, 647, 720, 721], "0953": [8, 31, 210, 212, 506], "log2": [8, 31, 215, 506], "logaddexp": [8, 31, 506], "logaddexp2": [8, 31, 506], "169925": [8, 31, 215, 506], "logical_and": [8, 31, 506, 710, 715, 739], "logical_not": [8, 31, 506, 699], "logical_or": [8, 31, 506, 739], "conform": [8, 14, 31, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 97, 98, 104, 114, 117, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 267, 296, 311, 401, 503, 504, 506, 511, 513, 518, 519, 520, 521, 522, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 572, 574, 575, 576, 578, 579, 581, 582, 586, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 702, 704], "api": [8, 14, 31, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 97, 98, 104, 114, 117, 127, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 267, 296, 311, 401, 503, 504, 506, 511, 513, 518, 519, 520, 521, 522, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 572, 574, 575, 576, 578, 579, 581, 582, 586, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 681, 682, 690, 691, 692, 694, 696, 699, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 715, 716, 718, 720, 725, 726, 727, 728, 730, 732, 734, 737, 739], "extens": [8, 14, 31, 71, 72, 73, 80, 81, 82, 83, 85, 86, 87, 89, 92, 93, 94, 95, 97, 98, 104, 114, 117, 129, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 267, 296, 311, 401, 503, 504, 506, 511, 513, 518, 519, 520, 521, 522, 538, 539, 540, 541, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 572, 574, 575, 576, 578, 579, 581, 582, 586, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 680, 686, 688, 690, 691, 702, 704, 712, 729, 732, 739], "api_specif": [8, 31, 104, 192, 202, 203, 218, 504, 506, 513, 521, 586, 636, 702], "array_api": [8, 31, 104, 192, 202, 203, 218, 504, 506, 511, 513, 521, 557, 586, 636, 702], "html": [8, 31, 96, 104, 192, 202, 203, 218, 261, 293, 311, 401, 503, 504, 506, 511, 513, 521, 557, 586, 636, 683, 702], "logical_xor": [8, 31, 506], "maximum": [8, 9, 10, 11, 16, 19, 22, 26, 31, 32, 33, 34, 39, 42, 45, 49, 162, 274, 296, 299, 302, 311, 315, 325, 373, 402, 404, 417, 418, 426, 495, 505, 506, 508, 509, 511, 513, 515, 518, 521, 550, 571, 602, 616, 632, 634, 647, 649, 650, 654, 691, 701, 709, 720, 739], "use_wher": [8, 31, 220, 221, 506], "formula": [8, 9, 31, 189, 211, 213, 220, 221, 222, 280, 296, 305, 381, 383, 506], "clip": [8, 9, 16, 31, 32, 33, 39, 220, 221, 302, 374, 376, 417, 418, 506, 508, 513, 697, 706, 708, 709, 720, 722], "than": [8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 26, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 48, 49, 71, 84, 114, 162, 170, 171, 174, 175, 177, 178, 181, 183, 185, 189, 195, 196, 210, 211, 212, 213, 220, 222, 227, 231, 233, 235, 236, 240, 241, 242, 247, 265, 266, 278, 285, 296, 299, 300, 302, 311, 320, 321, 326, 327, 330, 331, 332, 342, 343, 344, 366, 367, 402, 403, 404, 441, 442, 445, 461, 482, 503, 504, 505, 506, 508, 510, 511, 513, 517, 518, 519, 521, 537, 539, 549, 550, 551, 552, 555, 566, 571, 575, 581, 613, 619, 622, 623, 624, 629, 630, 635, 636, 637, 638, 662, 683, 686, 691, 693, 697, 698, 699, 701, 703, 709, 710, 711, 712, 713, 714, 715, 717, 720, 721, 722, 725, 726, 729, 730, 731, 732, 738, 739], "exce": [8, 9, 32, 221, 302, 377, 506], "product": [8, 9, 13, 14, 22, 31, 32, 36, 37, 45, 222, 300, 311, 346, 350, 352, 402, 403, 506, 510, 511, 521, 536, 537, 539, 546, 549, 554, 561, 565, 629, 630, 631, 635, 636, 689, 717, 732, 734], "30": [8, 9, 32, 33, 41, 45, 49, 222, 276, 284, 296, 299, 320, 330, 341, 392, 422, 424, 429, 430, 437, 438, 454, 462, 467, 506, 508, 511, 515, 521, 547, 554, 599, 611, 612, 630, 631, 635, 649, 661, 698], "56": [8, 9, 13, 18, 31, 32, 36, 88, 222, 236, 239, 242, 299, 320, 330, 489, 503, 506, 509, 510, 511, 515, 521, 525, 527, 529, 534, 554, 590, 612, 631, 701], "nan_to_num": [8, 31, 506], "posinf": [8, 31, 223, 506], "neginf": [8, 31, 223, 506], "veri": [8, 31, 223, 265, 278, 296, 506, 511, 557, 649, 682, 683, 688, 689, 690, 691, 696, 697, 699, 700, 701, 703, 705, 706, 709, 710, 711, 712, 713, 715, 718, 720, 721, 722, 725, 728, 729, 730, 732, 733, 734, 737, 738, 739], "5e": [8, 11, 31, 32, 223, 284, 495, 506, 509], "not_equ": [8, 31, 48, 49, 506], "pow": [8, 31, 48, 49, 506, 693], "expon": [8, 9, 10, 32, 33, 227, 273, 275, 279, 296, 468, 506, 508, 511, 551], "25": [8, 10, 14, 15, 18, 22, 25, 31, 32, 33, 36, 37, 40, 41, 45, 48, 49, 63, 87, 172, 173, 183, 189, 191, 202, 207, 222, 227, 230, 232, 235, 236, 237, 242, 255, 293, 301, 311, 341, 353, 402, 410, 437, 438, 454, 467, 503, 506, 508, 511, 512, 515, 516, 521, 524, 538, 542, 547, 564, 569, 591, 598, 602, 609, 611, 612, 613, 630, 631, 633, 638, 697, 708], "rad2deg": [8, 31, 506], "286": [8, 32, 228], "458": [8, 228], "573": [8, 228, 506], "hand": [8, 680, 693, 699, 700, 704, 706, 712, 725], "reciproc": [8, 31, 506], "333": [8, 31, 189, 230, 418, 506, 508], "remaind": [8, 9, 16, 26, 31, 32, 39, 198, 506, 513, 580, 693, 709], "modulu": [8, 31, 231, 506, 709], "sign": [8, 9, 14, 20, 22, 31, 32, 37, 71, 169, 170, 171, 172, 175, 177, 178, 183, 187, 189, 192, 194, 196, 222, 224, 231, 235, 236, 240, 268, 296, 311, 402, 403, 503, 506, 511, 519, 521, 557, 621, 622, 623, 624, 629, 630, 635, 637, 683, 690, 717, 722], "x2_i": [8, 31, 172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 200, 201, 208, 209, 214, 216, 218, 219, 222, 225, 227, 231, 238, 506, 693], "decim": [8, 31, 232, 506, 714], "94": [8, 11, 18, 31, 32, 34, 41, 156, 232, 233, 330, 493, 505, 509, 613], "256": [8, 232, 233, 510, 525, 527, 529, 647], "0001": [8, 232, 233, 647, 650, 666], "67": [8, 10, 14, 31, 33, 36, 41, 48, 184, 187, 192, 232, 233, 235, 242, 311, 341, 402, 422, 423, 467, 492, 494, 506, 508, 509, 511, 546, 613], "678": [8, 232, 233], "33": [8, 18, 22, 31, 33, 34, 36, 175, 176, 183, 232, 299, 311, 318, 340, 341, 402, 418, 467, 493, 506, 508, 509, 510, 511, 515, 521, 533, 534, 554, 608, 611, 631, 638, 647, 650], "np_variant": [8, 31, 233, 506], "sin": [8, 10, 31, 187, 192, 194, 235, 426, 506, 508, 694, 717], "841": [8, 25, 31, 55, 234, 500, 506], "909": [8, 31, 33, 234, 506], "141": [8, 31, 101, 234, 504, 506], "sinh": [8, 31, 234, 506], "63": [8, 25, 31, 36, 37, 63, 228, 235, 236, 299, 311, 320, 330, 341, 402, 506, 511, 515, 521, 538, 554, 591, 602, 631], "232": [8, 31, 235, 506], "sqrt": [8, 9, 31, 32, 299, 321, 326, 327, 331, 332, 506, 661, 680], "squar": [8, 9, 14, 31, 32, 37, 236, 300, 311, 347, 351, 401, 491, 492, 494, 499, 506, 509, 511, 515, 538, 540, 541, 543, 544, 545, 547, 551, 557, 558, 559, 564, 596, 680], "root": [8, 31, 236, 506, 660, 687, 690, 691, 696, 710, 720], "73": [8, 37, 236, 311, 402, 511, 517, 538, 612, 712], "44": [8, 9, 18, 31, 32, 41, 175, 222, 232, 236, 237, 268, 296, 299, 319, 320, 506, 510, 511, 515, 518, 521, 533, 554, 598, 611, 612, 620, 631], "subtract": [8, 31, 48, 49, 84, 302, 373, 503, 506, 694, 697, 701], "tan": [8, 31, 413, 506, 508, 702, 705, 706, 709, 710, 717], "tanh": [8, 31, 239, 506, 658, 717], "762": [8, 31, 240, 506], "964": [8, 31, 240, 506], "trapz": [8, 31, 506], "dx": [8, 31, 241, 506], "apart": [8, 31, 241, 506], "singl": [8, 18, 26, 31, 41, 241, 278, 296, 300, 306, 352, 388, 475, 487, 491, 506, 508, 509, 510, 517, 519, 536, 611, 612, 613, 621, 647, 662, 684, 689, 690, 691, 693, 698, 701, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 720, 721, 722, 725], "trapezoid": [8, 31, 241, 506], "trunc": [8, 31, 506], "025": [8, 242, 506, 514, 589], "trunc_divid": [8, 31, 506], "_arraywithactivationsexperiment": [9, 48], "elu": [9, 32, 291, 658], "scaler": [9, 32, 244, 291, 647, 650, 712], "ep": [9, 14, 17, 32, 37, 40, 114, 245, 291, 300, 305, 348, 381, 382, 383, 504, 511, 516, 552, 555, 609, 665], "outpu": [9, 32, 245, 291], "clamp": [9, 32, 245, 291, 722], "elementwis": [9, 17, 32, 40, 245, 247, 288, 291, 511, 516, 564, 609, 706, 713, 717], "19722438": [9, 32, 245, 291], "38629448": [9, 32, 245, 291], "38629436": [9, 32, 245, 291], "logsigmoid": [9, 32, 291, 658], "31326175": [9, 25, 246, 291], "126928": [9, 32, 246], "01814993": [9, 246], "00004578": [9, 246], "57888985": [9, 246], "31326169": [9, 32, 246, 291], "69314718": [9, 14, 25, 32, 37, 246, 281, 291, 296, 511, 557], "01104775": [9, 246], "prelu": [9, 32, 291, 658], "f": [9, 16, 32, 39, 247, 291, 302, 365, 513, 515, 578, 593, 597, 598, 599, 602, 607, 608, 680, 684, 685, 691, 692, 697, 698, 717, 720, 728], "unidirect": [9, 247, 291], "smaller": [9, 16, 22, 32, 39, 247, 265, 278, 291, 296, 299, 311, 327, 332, 342, 401, 402, 403, 422, 508, 513, 521, 571, 579, 629, 630, 635, 637, 680, 691, 703, 717], "relu6": [9, 32, 291, 658], "rectifi": [9, 25, 32, 57, 59, 60, 248, 251, 252, 291, 500], "unit": [9, 25, 32, 55, 57, 58, 59, 60, 61, 62, 63, 244, 248, 249, 251, 252, 291, 384, 385, 500, 680, 690, 693, 699, 710, 711, 712, 725, 733, 736], "selu": [9, 32, 291, 658], "scale": [9, 13, 17, 32, 34, 36, 40, 57, 160, 161, 249, 276, 291, 296, 299, 300, 305, 316, 322, 323, 324, 332, 342, 350, 381, 382, 383, 496, 500, 505, 509, 510, 516, 533, 536, 537, 609, 647, 649, 650, 661, 662, 666, 732, 734], "11133075": [9, 249, 291], "05070102": [9, 32, 249, 291], "10140204": [9, 249, 291], "15210295": [9, 249, 291], "20280409": [9, 249, 291], "25350523": [9, 249, 291], "30420589": [9, 249, 291], "35490704": [9, 249, 291], "silu": [9, 32, 291, 658], "26894143": [9, 251], "73105854": [9, 32, 251], "thresholded_relu": [9, 32, 291], "custom": [9, 32, 252, 290, 291, 298, 647, 674, 683, 687, 698, 703, 707, 711, 712, 715, 721, 732, 736, 737, 738], "_arraywithconversionsexperiment": [9, 48], "_arraywithcreationexperiment": [9, 48], "eye_lik": [9, 32, 293], "elsewher": [9, 32, 82, 253, 293, 503, 518, 620, 690], "unsorted_segment_min": [9, 32, 293], "segment_id": [9, 32, 262, 263, 293, 668], "num_seg": [9, 32, 262, 263, 293, 668], "given": [9, 10, 15, 16, 18, 26, 32, 33, 34, 38, 39, 41, 48, 49, 71, 80, 87, 88, 107, 108, 109, 110, 111, 123, 128, 147, 156, 158, 160, 161, 162, 164, 168, 241, 262, 265, 269, 270, 276, 277, 278, 280, 283, 293, 296, 299, 300, 301, 302, 305, 306, 311, 317, 318, 319, 320, 325, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 342, 348, 353, 354, 355, 362, 363, 364, 370, 377, 380, 384, 385, 386, 387, 388, 389, 390, 391, 401, 402, 403, 404, 430, 453, 454, 463, 489, 490, 493, 495, 496, 497, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 567, 568, 569, 570, 571, 574, 575, 576, 577, 579, 580, 584, 585, 597, 598, 607, 608, 611, 612, 613, 615, 627, 628, 629, 630, 642, 647, 648, 649, 650, 654, 658, 659, 661, 662, 664, 665, 666, 667, 668, 674, 683, 684, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 721, 724, 729, 734, 735, 738, 739], "segment": [9, 32, 262, 263, 293, 696, 701], "id": [9, 32, 145, 262, 263, 293, 505, 663, 664, 680, 686, 688, 690, 694, 696, 697, 704, 708, 712, 726], "drop": [9, 32, 262, 293, 301, 302, 353, 376, 661, 662, 690, 725], "gather": [9, 10, 32, 33, 262, 263, 293, 430, 432, 508, 739], "th": [9, 32, 262, 263, 270, 293, 296, 300, 311, 345, 410], "identifi": [9, 32, 262, 263, 293, 693, 698, 712, 715], "total": [9, 22, 26, 32, 45, 49, 84, 164, 262, 263, 269, 293, 296, 503, 505, 518, 521, 619, 636, 638, 680, 684, 685, 691, 699, 700, 701, 712, 715, 720, 721, 725], "distinct": [9, 20, 32, 262, 263, 293, 519, 621, 622, 623, 624, 683, 690, 697, 702, 708, 709, 710, 716, 732], "unsorted_segment_sum": [9, 32, 293], "_arraywithdata_typeexperiment": [9, 48], "_arraywithdeviceexperiment": [9, 48], "_arraywithelementwiseexperiment": [9, 48], "allclos": [9, 32, 296], "rtol": [9, 14, 32, 37, 265, 278, 296, 511, 552, 555, 642, 644, 711], "atol": [9, 14, 32, 37, 265, 278, 296, 511, 552, 642, 644, 711], "08": [9, 22, 32, 41, 175, 265, 278, 296, 299, 320, 330, 506, 612, 613, 638, 642, 647, 704], "equal_nan": [9, 32, 265, 278, 296], "rel": [9, 11, 14, 16, 21, 28, 32, 34, 37, 39, 44, 48, 86, 265, 278, 296, 301, 311, 353, 401, 490, 493, 495, 496, 497, 509, 511, 513, 520, 542, 552, 555, 563, 575, 579, 625, 628, 642, 644, 691, 698, 711, 715, 732, 734], "toler": [9, 14, 32, 37, 265, 278, 296, 300, 348, 511, 552, 555, 642, 644, 693, 711, 732], "compar": [9, 10, 20, 21, 26, 32, 33, 44, 265, 278, 296, 411, 414, 508, 519, 520, 621, 622, 623, 624, 625, 628, 644, 680, 695, 701, 703, 711, 712, 715, 720, 728, 730, 732, 738, 739], "altern": [9, 32, 265, 271, 275, 277, 278, 279, 280, 282, 283, 284, 287, 288, 296, 680, 689, 690, 696, 709, 720, 735], "1e10": [9, 265, 278, 296], "00001e10": [9, 265, 278, 296], "00001e": [9, 265, 296], "005": [9, 265, 278, 296], "binar": [9, 32, 296], "outcom": [9, 32, 266, 276, 296], "comparison": [9, 32, 190, 225, 266, 296, 301, 353, 506, 511, 560, 703], "conj": [9, 32, 187, 192, 194, 235, 236, 240, 296, 506], "conjug": [9, 14, 32, 37, 267, 296, 299, 300, 306, 321, 343, 348, 389, 511, 549, 553, 561], "copysign": [9, 32, 296], "unsign": [9, 22, 32, 268, 296, 311, 402, 403, 521, 629, 630, 635, 637, 648, 699, 717], "count_nonzero": [9, 32, 296], "keepdim": [9, 14, 16, 19, 22, 23, 26, 32, 37, 39, 42, 45, 46, 269, 283, 289, 296, 297, 311, 406, 407, 408, 409, 410, 511, 513, 518, 521, 522, 550, 566, 585, 616, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 703, 710, 717], "count": [9, 16, 20, 23, 28, 32, 39, 43, 46, 84, 155, 269, 296, 302, 311, 378, 399, 404, 503, 505, 511, 513, 519, 522, 539, 565, 572, 575, 621, 622, 639, 640, 696, 697, 701, 720], "flatten": [9, 10, 14, 16, 19, 20, 32, 33, 37, 39, 42, 43, 269, 283, 296, 300, 302, 311, 345, 372, 376, 378, 399, 406, 407, 408, 410, 422, 426, 508, 511, 513, 518, 519, 546, 554, 566, 572, 577, 579, 616, 617, 621, 622, 623, 624, 642, 644, 660, 680, 709, 715], "left": [9, 14, 19, 21, 32, 37, 42, 44, 65, 66, 181, 196, 269, 283, 289, 296, 297, 299, 300, 302, 311, 333, 347, 366, 406, 407, 408, 410, 422, 502, 506, 508, 511, 518, 520, 543, 544, 550, 559, 564, 616, 627, 690, 691, 693, 696, 698, 699, 701], "diff": [9, 26, 32, 296, 701, 709], "prepend": [9, 32, 270, 296, 511, 513, 549, 574, 690], "append": [9, 14, 26, 32, 181, 270, 296, 506, 511, 513, 542, 549, 574, 680, 698, 712, 717, 720], "differenc": [9, 32, 270, 296], "taken": [9, 14, 32, 37, 270, 296, 299, 342, 511, 542, 689, 698, 710, 713, 722, 733], "prior": [9, 32, 270, 296, 306, 389, 511, 561, 703, 713], "expand": [9, 10, 16, 32, 33, 270, 296, 302, 426, 508, 513, 574, 697], "direct": [9, 32, 270, 275, 279, 284, 287, 296, 299, 302, 332, 342, 366, 367, 375, 520, 628, 689, 694, 696, 710, 715, 721, 722, 724, 728, 732, 733, 736], "except": [9, 10, 16, 18, 23, 26, 32, 33, 37, 41, 46, 103, 270, 296, 306, 311, 388, 407, 408, 421, 439, 456, 470, 476, 504, 508, 511, 513, 517, 518, 522, 555, 572, 574, 582, 611, 612, 613, 619, 639, 640, 642, 645, 664, 680, 691, 692, 693, 694, 698, 699, 700, 702, 705, 709, 710, 713, 714, 715, 719, 725], "discret": [9, 32, 270, 296, 299, 320, 321, 326, 327, 330, 331, 332, 342, 512, 569, 662], "digamma": [9, 32, 296], "7549271": [9, 271, 296], "92278427": [9, 32, 271, 296], "9988394": [9, 271, 296], "fix": [9, 32, 296, 510, 536, 680, 690, 691, 693, 699, 704, 712, 713], "nearest": [9, 32, 172, 189, 222, 232, 272, 296, 299, 311, 334, 410, 506, 715], "toward": [9, 16, 32, 39, 196, 243, 272, 284, 296, 302, 311, 375, 404, 506, 513, 579, 680, 686, 690, 717, 728, 732], "float_pow": [9, 32, 296], "125": [9, 14, 37, 183, 273, 296, 506, 511, 564], "fmax": [9, 32, 296], "fmod": [9, 32, 506], "divis": [9, 10, 11, 32, 33, 34, 183, 189, 196, 198, 231, 233, 243, 302, 361, 459, 467, 480, 489, 490, 495, 506, 508, 509, 510, 523, 530, 531, 666, 706, 714], "frexp": [9, 32, 296], "next": [9, 32, 114, 275, 279, 284, 287, 296, 504, 661, 663, 664, 666, 684, 686, 689, 690, 691, 695, 699, 701, 702, 704, 707, 718, 719, 720, 732, 734], "represent": [9, 10, 26, 32, 33, 49, 99, 100, 114, 117, 142, 143, 169, 172, 179, 182, 184, 189, 196, 219, 222, 224, 239, 256, 275, 279, 284, 287, 293, 296, 412, 472, 501, 504, 505, 506, 508, 647, 649, 650, 662, 724, 730, 731, 733, 737, 738], "gradient": [9, 32, 162, 290, 296, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 505, 514, 587, 588, 589, 644, 654, 666, 680, 692, 713, 720, 721, 724, 725, 732], "edge_ord": [9, 32, 276, 296], "r": [9, 14, 26, 32, 37, 276, 290, 296, 298, 491, 509, 511, 513, 556, 585, 690, 691, 692, 708, 711], "estim": [9, 32, 276, 296, 311, 401], "boundari": [9, 18, 32, 41, 276, 296, 299, 334, 517, 613, 732], "note": [9, 10, 14, 16, 20, 32, 37, 39, 84, 96, 128, 196, 231, 232, 239, 261, 276, 293, 296, 299, 300, 302, 321, 347, 365, 504, 506, 510, 511, 513, 519, 521, 536, 543, 544, 557, 559, 578, 582, 622, 624, 633, 662, 686, 689, 690, 691, 694, 699, 701, 702, 704, 709, 710, 711, 712, 713, 715], "over": [9, 14, 22, 23, 24, 29, 32, 36, 37, 45, 46, 47, 67, 259, 260, 276, 283, 293, 296, 299, 302, 309, 311, 313, 314, 315, 318, 327, 332, 336, 340, 341, 342, 355, 365, 374, 376, 394, 404, 488, 502, 508, 511, 516, 517, 521, 522, 539, 550, 561, 563, 565, 566, 609, 613, 632, 633, 634, 635, 636, 637, 638, 639, 640, 662, 665, 671, 674, 680, 682, 684, 690, 691, 695, 701, 702, 708, 709, 711, 713, 717, 719, 725, 730, 732], "partial": [9, 26, 32, 115, 116, 148, 149, 276, 296, 311, 408, 427, 428, 494, 504, 505, 508, 509, 511, 548, 648, 650, 663, 664, 691, 696, 715], "diment": [9, 276, 296], "40": [9, 10, 31, 32, 33, 41, 45, 49, 183, 187, 207, 236, 276, 296, 299, 318, 320, 330, 336, 422, 424, 429, 430, 454, 467, 488, 491, 506, 508, 509, 511, 515, 521, 547, 554, 599, 612, 631, 635, 680, 698], "80": [9, 32, 276, 296, 300, 311, 352, 402, 511, 515, 521, 554, 601, 631, 683], "72": [9, 18, 32, 34, 194, 276, 296, 299, 320, 330, 493, 506, 509, 511, 521, 554, 612, 631], "33333333": [9, 32, 230, 276, 296, 506], "hypot": [9, 32, 296], "hypotenus": [9, 277, 296], "4031": [9, 277, 296], "8102": [9, 277, 296], "isclos": [9, 32, 296, 693], "hold": [9, 10, 14, 22, 32, 37, 45, 265, 278, 283, 296, 311, 361, 379, 402, 403, 408, 453, 454, 508, 511, 521, 550, 630, 645, 680, 720, 733], "ldexp": [9, 32, 296], "lerp": [9, 32, 296], "end": [9, 32, 71, 177, 233, 280, 296, 302, 365, 373, 374, 503, 506, 660, 680, 690, 691, 695, 698, 709, 713, 715, 716, 724, 725, 730, 735], "weight": [9, 11, 13, 15, 32, 34, 36, 38, 255, 280, 293, 296, 299, 311, 325, 399, 401, 404, 489, 490, 493, 495, 496, 497, 509, 510, 512, 514, 534, 535, 536, 537, 568, 589, 649, 661, 662, 664, 666, 680, 697, 706, 712, 717, 721, 722, 731], "interpol": [9, 32, 280, 296, 299, 311, 409, 410, 510, 536, 715, 732], "lgamma": [9, 296], "45373654": [9, 281, 296], "6477685": [9, 281, 296], "modf": [9, 32, 296], "fraction": [9, 32, 282, 296, 311, 410, 510, 533], "nansum": [9, 32, 296], "accumul": [9, 32, 283, 296], "nextaft": [9, 32, 296], "0e": [9, 11, 32, 34, 284, 296, 495, 509], "4013e": [9, 32, 284, 296], "4028e": [9, 32, 284, 296], "signbit": [9, 32, 296], "sinc": [9, 32, 296, 680, 683, 690, 691, 693, 694, 695, 697, 698, 699, 700, 703, 709, 710, 725, 732, 738], "637": [9, 32, 286, 296], "212": [9, 13, 32, 286, 296, 534], "0909": [9, 32, 286, 296], "xlogi": [9, 32, 296], "0986": [9, 32, 287, 296], "3863": [9, 32, 287, 296], "0000": [9, 32, 254, 255, 258, 287, 293, 296, 300, 302, 351, 368], "zeta": [9, 32, 296], "q": [9, 13, 14, 32, 36, 37, 288, 296, 300, 311, 347, 409, 410, 510, 511, 515, 537, 543, 544, 556, 598, 690, 691, 692, 711, 725], "0369": [9, 32, 288, 296], "2021": [9, 32, 288, 296, 680], "_arraywithgeneralexperiment": [9, 48], "init_valu": [9, 32, 36, 289, 297, 299, 341], "act": [9, 32, 289, 297, 691, 701, 714, 725, 739], "reduct": [9, 10, 15, 23, 26, 32, 33, 36, 38, 46, 289, 297, 299, 301, 341, 353, 423, 453, 454, 508, 512, 522, 568, 569, 570, 639, 640, 663, 699, 706, 709, 712, 719], "_arraywithgradientsexperiment": [9, 48], "_arraywithimageexperiment": [9, 48], "_arraywithlayersexperiment": [9, 48], "adaptive_avg_pool1d": [9, 32, 299], "1d": [9, 32, 299, 302, 311, 313, 320, 322, 324, 330, 356, 374, 376, 401, 662], "adapt": [9, 32, 34, 299, 313, 314, 315, 496, 509, 662, 666, 683], "averag": [9, 11, 15, 32, 34, 38, 299, 301, 311, 313, 314, 317, 318, 319, 353, 401, 489, 490, 495, 509, 510, 512, 514, 536, 568, 587, 588, 661, 662], "pool": [9, 32, 36, 299, 313, 314, 315, 317, 318, 319, 335, 336, 337, 338, 341, 662, 690], "signal": [9, 32, 299, 313, 314, 315, 320, 321, 330, 662, 731, 732], "sever": [9, 32, 299, 313, 314, 315, 690, 691, 713, 725, 730, 736], "plane": [9, 32, 189, 192, 194, 222, 234, 235, 236, 239, 299, 302, 313, 314, 315, 375, 506], "l_in": [9, 32, 299, 313], "batch": [9, 10, 14, 26, 32, 33, 37, 160, 161, 299, 305, 313, 314, 315, 321, 334, 381, 382, 383, 426, 429, 430, 488, 505, 508, 510, 511, 514, 516, 534, 536, 548, 566, 587, 588, 589, 609, 662, 665, 680, 697, 706, 711, 720, 730], "spatial": [9, 13, 32, 36, 299, 305, 313, 314, 315, 334, 341, 381, 382, 383, 510, 523, 524, 525, 526, 528, 530, 532, 665, 724], "Will": [9, 32, 299, 313, 314, 315, 660, 671, 725], "l_out": [9, 32, 299, 313], "adaptive_avg_pool2d": [9, 32, 299], "2d": [9, 32, 253, 293, 299, 302, 311, 314, 315, 322, 323, 357, 364, 401, 662, 680, 706, 710, 715], "h_in": [9, 32, 299, 314, 315], "w_in": [9, 32, 299, 314, 315], "s_0": [9, 32, 299, 314, 315], "s_1": [9, 32, 299, 314, 315], "adaptive_max_pool2d": [9, 32, 299], "avg_pool1d": [9, 32, 299], "kernel": [9, 13, 32, 36, 299, 317, 318, 319, 335, 336, 337, 338, 510, 535, 717, 725, 732, 735, 736], "stride": [9, 13, 32, 33, 36, 48, 299, 302, 317, 318, 319, 335, 336, 337, 338, 340, 341, 354, 508, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 662, 709, 713, 732], "pad": [9, 13, 16, 32, 36, 39, 299, 302, 317, 318, 319, 320, 321, 326, 327, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 426, 508, 510, 513, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 573, 586, 649, 662, 680], "data_format": [9, 13, 32, 36, 299, 305, 317, 318, 319, 322, 323, 324, 335, 336, 337, 338, 340, 381, 382, 383, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 647, 662, 665, 680], "nwc": [9, 13, 32, 36, 299, 317, 322, 335, 338, 510, 523, 524, 525, 530, 531, 662], "count_include_pad": [9, 32, 299, 317, 318, 319, 662], "ceil_mod": [9, 32, 299, 317, 318, 319, 335, 336, 337, 340, 662], "batch_siz": [9, 13, 18, 32, 36, 41, 299, 317, 318, 319, 335, 336, 337, 338, 510, 517, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 610, 680, 720], "d_in": [9, 13, 32, 36, 299, 317, 318, 319, 321, 326, 327, 331, 335, 336, 337, 338, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532], "window": [9, 13, 32, 36, 254, 255, 257, 258, 264, 293, 299, 317, 318, 319, 321, 335, 336, 337, 338, 340, 341, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 662, 686, 691, 737], "slide": [9, 13, 32, 36, 299, 317, 318, 319, 335, 336, 337, 338, 341, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 662], "algorithm": [9, 13, 25, 32, 36, 55, 299, 317, 318, 319, 334, 335, 336, 337, 338, 511, 524, 526, 527, 528, 529, 532, 557, 662, 699, 710, 715, 725, 732, 734, 736], "per": [9, 13, 32, 36, 299, 317, 318, 319, 335, 336, 337, 338, 510, 524, 526, 527, 528, 529, 532, 536, 662, 691, 698, 710, 720], "ncw": [9, 13, 32, 36, 299, 317, 322, 323, 335, 338, 510, 523, 524, 525, 530, 531, 662], "arang": [9, 14, 22, 32, 37, 87, 299, 300, 317, 318, 319, 326, 331, 335, 336, 337, 338, 340, 344, 352, 367, 449, 488, 503, 508, 511, 514, 521, 550, 566, 589, 631, 680, 699, 709, 739], "reshap": [9, 13, 14, 16, 26, 32, 36, 37, 39, 299, 300, 302, 317, 318, 319, 322, 335, 336, 337, 338, 340, 344, 352, 365, 488, 508, 510, 511, 513, 526, 528, 532, 550, 566, 680, 709, 710, 712, 715, 717, 719, 722], "avg_pool2d": [9, 32, 299], "nhwc": [9, 13, 32, 36, 299, 318, 323, 336, 340, 510, 523, 526, 527, 530, 531, 532, 662], "divisor_overrid": [9, 32, 299, 318, 319, 662], "nchw": [9, 13, 32, 36, 299, 318, 323, 336, 340, 510, 523, 526, 527, 530, 531, 532, 662, 680], "kernel_s": [9, 32, 299, 317, 318, 319, 662, 668], "max_pool2d": [9, 32, 299, 318], "46": [9, 18, 32, 36, 41, 88, 212, 233, 254, 293, 299, 318, 336, 337, 503, 506, 515, 591, 611, 612], "avg_pool3d": [9, 32, 299], "ndhwc": [9, 13, 32, 36, 299, 319, 324, 337, 510, 523, 528, 529, 530, 531, 662], "d": [9, 10, 13, 14, 16, 28, 32, 33, 36, 37, 39, 61, 88, 96, 129, 172, 189, 190, 222, 225, 261, 293, 299, 300, 302, 306, 309, 317, 318, 319, 326, 331, 335, 336, 337, 338, 340, 345, 346, 352, 358, 361, 363, 366, 369, 376, 379, 387, 393, 414, 500, 503, 504, 506, 510, 511, 513, 515, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 541, 542, 546, 550, 554, 564, 580, 593, 597, 598, 599, 602, 607, 608, 680, 683, 684, 685, 690, 692, 695, 696, 697, 708, 712, 715, 720, 728], "volum": [9, 13, 32, 36, 299, 319, 321, 326, 327, 331, 337, 510, 528, 529, 686], "filter": [9, 13, 32, 36, 257, 258, 293, 299, 319, 337, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 649, 662, 680, 695, 698], "ncdhw": [9, 13, 32, 36, 299, 319, 324, 337, 510, 523, 528, 529, 530, 531, 662], "43": [9, 41, 49, 183, 299, 300, 311, 319, 346, 402, 506, 517, 518, 612, 613, 620], "dct": [9, 32, 299, 662, 720], "norm": [9, 10, 14, 32, 33, 37, 299, 300, 320, 321, 325, 326, 327, 330, 331, 332, 342, 344, 348, 384, 385, 386, 417, 418, 439, 508, 511, 550, 566, 609, 662, 666, 713], "lenght": [9, 32, 254, 257, 258, 264, 299, 320, 662], "truncat": [9, 32, 299, 320, 326, 330, 331, 332, 342, 456, 508, 660, 662, 703, 720], "larger": [9, 16, 22, 32, 39, 45, 114, 299, 320, 327, 330, 332, 342, 504, 513, 521, 571, 579, 636, 638, 662, 712, 715, 739], "ortho": [9, 32, 299, 320, 321, 326, 327, 330, 331, 332, 342, 662], "102": [9, 32, 41, 320, 611], "406": [9, 32, 320, 417, 508], "dft": [9, 32, 299], "onesid": [9, 32, 299, 321], "dft_length": [9, 32, 299, 321], "backward": [9, 23, 32, 46, 231, 299, 321, 326, 327, 331, 332, 342, 506, 511, 522, 539, 565, 639, 640, 662, 713, 725], "fourier": [9, 32, 299, 321, 326, 327, 331, 332, 342, 426, 508], "fft": [9, 32, 299, 321, 327, 342, 662, 689, 732], "n_fft": [9, 299, 321], "becaus": [9, 299, 321, 690, 691, 694, 695, 696, 697, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 715, 717, 721, 722, 725, 732, 735, 738], "satisfi": [9, 299, 300, 321, 348, 701], "symmetri": [9, 299, 321], "fast": [9, 299, 321, 732], "rfft": [9, 32, 299, 321, 342], "batch_idx": [9, 299, 321], "signal_dim1": [9, 299, 321], "signal_dim2": [9, 299, 321], "signal_dimn": [9, 299, 321], "signal_dim": [9, 299, 321], "embed": [9, 32, 299, 510, 536, 649, 662, 732], "max_norm": [9, 10, 32, 33, 299, 325, 417, 418, 508, 662], "dim": [9, 26, 28, 32, 91, 253, 293, 299, 302, 316, 326, 327, 328, 331, 339, 365, 503, 510, 523, 530, 531, 649, 662, 680, 699, 710, 711, 715], "ifft": [9, 32, 299, 326, 332], "pi": [9, 32, 235, 239, 299, 326, 331, 501, 506], "44509285e": [9, 32, 299, 326], "14423775e": [9, 32, 299, 326], "17j": [9, 32, 299, 326, 331], "00000000e": [9, 32, 33, 299, 320, 326, 330, 331], "00": [9, 10, 32, 33, 37, 194, 299, 320, 326, 330, 331, 426, 506, 508, 511, 512, 545, 568, 647, 704, 712], "11483250e": [9, 32, 299, 326], "16j": [9, 32, 299, 326, 331], "33486982e": [9, 32, 299, 326], "22464680e": [9, 32, 299, 326], "95799250e": [9, 32, 299, 326], "66951701e": [9, 32, 299, 326], "fft2": [9, 299], "crop": [9, 32, 299, 327, 332, 342], "repeat": [9, 10, 16, 32, 33, 39, 299, 311, 327, 332, 401, 424, 508, 513, 514, 584, 589, 674, 686, 691, 694, 695, 701, 702, 709, 712], "vari": [9, 20, 240, 327, 422, 506, 508, 519, 622, 623, 624, 697, 701, 710, 712, 719], "20477401j": [9, 299, 327], "0614962j": [9, 299, 327], "idct": [9, 32, 299], "79": [9, 10, 32, 33, 36, 41, 48, 184, 189, 299, 320, 330, 341, 417, 418, 506, 508, 613], "49862671": [9, 32, 299, 320, 330], "70": [9, 32, 33, 299, 320, 330, 430, 454, 511, 521, 554, 631, 683], "37691498": [9, 32, 299, 320, 330], "00390816": [9, 32, 299, 320, 330], "58938599": [9, 32, 299, 320, 330], "92713165": [9, 32, 299, 320, 330], "078475": [9, 32, 299, 320, 330], "19664812": [9, 32, 299, 320, 330], "95411837": [9, 32, 299, 320, 330], "30636606e": [9, 32, 299, 331], "43029718e": [9, 32, 299, 331], "18j": [9, 32, 299, 326, 331], "53080850e": [9, 32, 299, 331], "58689626e": [9, 32, 299, 331], "24474906e": [9, 32, 299, 331], "91858728e": [9, 32, 299, 331], "01435406e": [9, 32, 299, 331], "ifftn": [9, 32, 299], "combin": [9, 26, 32, 49, 299, 311, 332, 342, 401, 427, 428, 508, 511, 539, 549, 691, 694, 697, 698, 699, 701, 703, 706, 712, 722, 732], "explain": [9, 32, 299, 332, 342, 680, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 712, 713, 715, 717, 718, 719, 720, 721, 722, 728, 735, 738], "24730653": [9, 32, 299, 332], "90832391j": [9, 32, 299, 332], "49495562": [9, 32, 299, 332], "9039565j": [9, 32, 299, 332], "98193269": [9, 32, 299, 332], "49560517j": [9, 32, 299, 332], "93280757": [9, 32, 299, 332], "48075343j": [9, 32, 299, 332], "28526384": [9, 32, 299, 332], "3351205j": [9, 32, 299, 332], "2343787": [9, 32, 299, 332], "83528011j": [9, 32, 299, 332], "18791352": [9, 32, 299, 332], "30690572j": [9, 32, 299, 332], "82115787": [9, 32, 299, 332], "96195183j": [9, 32, 299, 332], "44719226": [9, 32, 299, 332], "72654048j": [9, 32, 299, 332], "51476765": [9, 299, 332], "66160417j": [9, 299, 332], "04319742": [9, 299, 332], "05411636j": [9, 299, 332], "015561": [9, 299, 332], "04216015j": [9, 299, 332], "06310689": [9, 299, 332], "05347854j": [9, 299, 332], "13392983": [9, 299, 332], "16052352j": [9, 299, 332], "08371392": [9, 299, 332], "17252843j": [9, 299, 332], "0031429": [9, 299, 332], "05421245j": [9, 299, 332], "10446617": [9, 299, 332], "17747098j": [9, 299, 332], "05344324": [9, 299, 332], "07972424j": [9, 299, 332], "8344667": [9, 32, 299, 332], "98222595j": [9, 32, 299, 332], "48472244": [9, 32, 299, 332], "30233797j": [9, 32, 299, 332], "mode": [9, 14, 26, 32, 37, 159, 162, 167, 172, 189, 222, 299, 302, 329, 334, 342, 373, 374, 376, 455, 456, 460, 461, 463, 464, 477, 478, 481, 482, 484, 485, 505, 506, 508, 511, 556, 662, 677, 686, 690, 691, 692, 697, 700, 701, 715, 725, 732, 735], "scale_factor": [9, 32, 299, 334, 715], "recompute_scale_factor": [9, 32, 299, 334, 715], "align_corn": [9, 32, 299, 334, 715], "antialia": [9, 32, 299, 334, 715], "down": [9, 32, 299, 302, 334, 367, 660, 690, 712, 727, 732, 738], "channel": [9, 10, 13, 32, 33, 36, 48, 49, 299, 305, 322, 323, 324, 334, 381, 382, 383, 422, 426, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 658, 659, 661, 662, 664, 665, 666, 667, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "height": [9, 10, 13, 32, 33, 36, 299, 334, 422, 508, 510, 526, 527, 528, 529, 532, 660, 720], "width": [9, 10, 13, 32, 33, 36, 299, 300, 302, 311, 334, 348, 373, 404, 422, 508, 510, 524, 525, 526, 527, 528, 529, 532, 536], "bilinear": [9, 32, 299, 334, 715], "trilinear": [9, 32, 299, 334, 715], "nearest_exact": [9, 32, 299, 334, 715], "tf_area": [9, 32, 299, 334, 715], "bicub": [9, 32, 299, 334, 715], "mitchellcub": [9, 32, 299, 334, 715], "lanczos3": [9, 32, 299, 334, 715], "lanczos5": [9, 32, 299, 334, 715], "gaussian": [9, 32, 55, 299, 334, 500, 715], "overwrit": [9, 26, 32, 162, 299, 334, 505, 691, 709, 710, 717], "corner": [9, 32, 299, 334, 690, 691, 710], "pixel": [9, 32, 299, 334], "align": [9, 26, 32, 299, 300, 334, 345, 690, 698, 710, 717, 719, 727, 738], "thu": [9, 32, 183, 196, 227, 231, 239, 240, 299, 300, 334, 347, 506, 511, 543, 544, 686, 689, 698, 703, 707, 710, 713], "antialias": [9, 32, 299, 334], "downsampl": [9, 32, 299, 334], "resiz": [9, 32, 299, 334, 715], "max_pool1d": [9, 32, 299, 338], "dilat": [9, 13, 32, 36, 299, 302, 335, 336, 337, 340, 341, 373, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 662], "dilaton": [9, 32, 299, 335, 336, 337], "ensur": [9, 10, 32, 33, 299, 335, 336, 337, 439, 508, 642, 680, 689, 690, 691, 694, 699, 701, 703, 704, 705, 707, 709, 710, 711, 712, 713, 726, 732], "cover": [9, 32, 299, 335, 336, 337, 680, 689, 693, 694, 696, 701, 702, 706, 707, 712, 715, 716], "max_pool3d": [9, 32, 299], "reduce_window": [9, 36, 299], "window_dimens": [9, 36, 299, 341], "window_strid": [9, 36, 299, 341], "base_dil": [9, 36, 299, 341], "window_dil": [9, 36, 299, 341], "string": [9, 10, 13, 26, 32, 36, 99, 100, 112, 119, 141, 142, 143, 144, 145, 147, 156, 163, 164, 168, 250, 291, 299, 300, 302, 341, 348, 373, 403, 420, 504, 505, 508, 510, 511, 523, 524, 525, 526, 528, 530, 532, 545, 644, 648, 660, 674, 695, 696, 698, 699, 700, 703, 710, 717, 720], "low": [9, 13, 18, 36, 41, 299, 341, 510, 517, 523, 524, 525, 526, 528, 530, 532, 611, 613, 649, 697, 703, 709, 710, 715, 717, 728, 730, 732, 733, 734, 736, 738], "high": [9, 13, 18, 36, 41, 299, 341, 461, 508, 510, 517, 523, 524, 525, 526, 528, 530, 532, 611, 613, 649, 684, 689, 703, 708, 710, 720, 727, 728, 729, 730, 731, 732, 736, 738, 739], "pair": [9, 13, 36, 177, 196, 259, 288, 293, 296, 299, 332, 341, 342, 506, 510, 511, 523, 524, 525, 526, 528, 530, 532, 537, 539], "give": [9, 13, 36, 128, 299, 341, 504, 510, 513, 523, 524, 525, 526, 528, 530, 532, 578, 660, 661, 680, 684, 686, 690, 691, 692, 695, 698, 699, 701, 702, 704, 705, 712, 732, 736], "rfftn": [9, 32, 299], "linear_algebra": [9, 14, 32, 37, 511, 713], "_arraywithlinearalgebraexperiment": [9, 48], "adjoint": [9, 14, 32, 37, 300, 511, 547, 558, 559, 647], "cond": [9, 32, 68, 300, 502, 725], "p": [9, 10, 14, 32, 33, 37, 89, 193, 300, 305, 344, 386, 417, 418, 503, 506, 508, 511, 515, 550, 566, 598, 662, 680, 690, 691, 692], "933034373659268": [9, 344], "diagflat": [9, 32, 300, 350, 351], "offset": [9, 14, 17, 28, 32, 37, 40, 84, 300, 305, 345, 381, 382, 383, 503, 511, 516, 542, 563, 609, 653], "padding_valu": [9, 32, 300, 345], "right_left": [9, 32, 300, 345], "num_row": [9, 32, 300, 345], "num_col": [9, 32, 300, 345], "eig": [9, 14, 32, 300, 511, 544, 545], "37228132": [9, 32, 300, 347, 349, 543], "82456484": [9, 347, 543], "41597356": [9, 347, 543], "56576746": [9, 347, 543], "90937671": [9, 347, 543], "eigh_tridiagon": [9, 32, 300], "eigvals_onli": [9, 32, 300, 348], "select": [9, 22, 32, 45, 300, 302, 311, 348, 352, 376, 402, 403, 521, 629, 630, 689, 690, 691, 698, 709, 712, 717, 719, 722, 725, 732, 735, 736], "select_rang": [9, 32, 300, 348], "tol": [9, 32, 300, 348], "eigenvalu": [9, 14, 32, 37, 300, 347, 348, 349, 511, 543, 544, 545, 552], "eigenvector": [9, 32, 300, 347, 348, 511, 543, 544], "v": [9, 13, 21, 28, 32, 36, 44, 88, 187, 192, 194, 235, 300, 302, 348, 364, 506, 510, 514, 520, 537, 589, 627, 644, 660, 662, 663, 664, 665, 666, 667, 680, 686, 687, 690, 691, 692, 696, 717, 720, 721, 722], "interv": [9, 18, 23, 32, 41, 46, 71, 87, 88, 94, 300, 311, 348, 404, 503, 511, 513, 517, 522, 539, 565, 571, 574, 582, 611, 613, 639, 640], "togeth": [9, 26, 32, 265, 278, 296, 300, 348, 667, 680, 683, 694, 697, 699, 709, 710, 712, 713, 715, 721, 722, 725, 730, 732, 733, 738], "cluster": [9, 32, 300, 348, 725, 732], "converg": [9, 32, 300, 348, 684], "li": [9, 32, 300, 311, 348, 410, 682], "_2": [9, 32, 300, 348], "machin": [9, 14, 32, 37, 114, 117, 300, 348, 504, 511, 552, 555, 683, 690, 693, 706, 724, 727, 730, 732, 734, 735, 736, 737, 738], "precis": [9, 14, 32, 37, 114, 202, 222, 229, 236, 273, 296, 300, 311, 348, 401, 461, 482, 504, 506, 508, 511, 544, 545, 550, 557, 559, 560, 566, 698, 699, 710, 714, 715, 736], "eig_val": [9, 32, 300, 348], "decreas": [9, 32, 300, 348, 649], "eig_vector": [9, 32, 300, 348], "38196": [9, 348], "61803": [9, 348], "eigval": [9, 32, 300], "kron": [9, 32, 300, 351, 739], "matrix_exp": [9, 32, 300], "7183": [9, 32, 300, 351], "3891": [9, 32, 300, 351], "multi_dot": [9, 32, 300], "49": [9, 18, 32, 36, 37, 236, 299, 300, 311, 320, 330, 341, 352, 402, 506, 521, 564, 612, 631], "148": [9, 31, 32, 192, 300, 352], "loss": [9, 353, 461, 482, 508, 568, 569, 570, 680, 698, 699, 706, 710, 713, 714, 720, 721, 722, 732, 739], "_arraywithlossesexperiment": [9, 48], "manipul": [9, 32, 682, 709, 710, 713, 715, 717, 722, 724, 732], "_arraywithmanipulationexperiment": [9, 48], "as_strid": [9, 32, 302], "nativeshap": [9, 13, 16, 18, 32, 39, 41, 72, 73, 80, 85, 92, 97, 302, 306, 354, 363, 387, 388, 389, 390, 391, 454, 466, 471, 473, 503, 508, 510, 513, 517, 523, 525, 527, 529, 531, 578, 611, 612, 613, 705, 707], "byte": [9, 10, 28, 32, 33, 48, 84, 302, 354, 448, 503, 508, 737, 738], "associative_scan": [9, 32, 302], "revers": [9, 10, 14, 22, 32, 37, 45, 48, 49, 302, 311, 355, 366, 367, 402, 403, 421, 508, 511, 513, 521, 564, 575, 629, 630, 689, 697, 698, 699, 701, 702, 709, 710, 715, 722, 725], "associ": [9, 14, 32, 37, 172, 222, 302, 311, 355, 404, 506, 511, 552, 555, 567, 644, 691, 699, 706, 707, 710, 711, 712, 725], "scan": [9, 32, 302, 355, 725], "atleast_1d": [9, 32, 302], "ari": [9, 32, 302, 356, 357, 358, 361, 369, 379], "cannot": [9, 239, 356, 357, 358, 506, 691, 693, 695, 699, 710, 717, 722, 738], "ndim": [9, 14, 19, 37, 42, 48, 51, 302, 356, 357, 358, 488, 508, 511, 518, 556, 559, 619, 697, 706, 712], "made": [9, 16, 32, 300, 302, 350, 356, 357, 358, 582, 683, 686, 689, 691, 693, 694, 697, 698, 703, 704, 708, 709, 710, 713, 715, 717, 719, 732], "a1": [9, 33, 356, 357, 358, 414], "a2": [9, 356, 357, 358], "atleast_2d": [9, 32, 302], "atleast_3d": [9, 32, 302], "view": [9, 16, 32, 48, 83, 302, 358, 372, 375, 503, 690, 691, 703, 732], "three": [9, 89, 302, 358, 503, 690, 691, 697, 698, 699, 701, 710, 712, 715, 716, 717, 733, 738], "concat_from_sequ": [9, 32, 302], "input_sequ": [9, 32, 302, 360], "new_axi": [9, 32, 302, 360, 722], "concaten": [9, 10, 16, 32, 37, 302, 360, 422, 426, 508, 510, 513, 536, 554, 572, 711, 715, 717, 720], "insert": [9, 19, 32, 42, 302, 360, 513, 515, 518, 520, 574, 595, 616, 627, 698, 704], "do": [9, 10, 26, 32, 33, 189, 222, 231, 302, 311, 360, 408, 410, 439, 506, 508, 515, 590, 597, 600, 601, 602, 607, 680, 684, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 717, 719, 720, 721, 722, 725, 727, 733, 738, 739], "stack": [9, 14, 16, 26, 32, 37, 39, 48, 94, 95, 300, 302, 347, 360, 362, 370, 380, 456, 464, 485, 503, 508, 511, 513, 515, 540, 542, 543, 544, 545, 547, 549, 551, 552, 553, 555, 556, 557, 559, 560, 563, 590, 600, 601, 662, 680, 688, 693, 695, 709, 717, 728, 730, 737, 738], "dsplit": [9, 32, 302], "indices_or_sect": [9, 32, 302, 361, 369, 379], "3rd": [9, 32, 302, 361], "dstack": [9, 32, 302], "fill_diagon": [9, 32, 302], "fill_diag": [9, 364], "start_dim": [9, 32, 302, 365, 680], "end_dim": [9, 32, 302, 365, 680], "read": [9, 16, 26, 28, 32, 39, 84, 302, 365, 503, 513, 578, 689, 690, 696, 698, 712, 714, 715, 732], "fastest": [9, 16, 32, 39, 300, 302, 352, 365, 513, 578], "slowest": [9, 16, 32, 39, 302, 365, 513, 578], "fortran": [9, 16, 32, 39, 302, 365, 513, 578, 732, 736], "layout": [9, 16, 32, 39, 302, 365, 513, 578, 695, 709, 710, 715], "fliplr": [9, 32, 302, 709], "flip": [9, 16, 32, 39, 180, 302, 366, 367, 506, 513, 709, 719, 720, 722], "diag": [9, 14, 32, 37, 302, 366, 367, 511, 544, 717], "flipud": [9, 32, 302, 709], "heavisid": [9, 32, 302], "step": [9, 11, 28, 32, 34, 71, 87, 302, 368, 489, 490, 493, 495, 496, 497, 503, 509, 514, 587, 588, 589, 660, 666, 680, 684, 686, 689, 690, 691, 694, 695, 697, 698, 699, 700, 701, 708, 710, 712, 717, 720, 721, 722, 724, 732], "5000": [9, 302, 368, 511, 547], "hsplit": [9, 32, 302], "horizont": [9, 32, 302, 369, 422, 508], "hstack": [9, 32, 302], "vstack": [9, 32, 302, 370], "i0": [9, 32, 302, 311, 404], "modifi": [9, 26, 32, 302, 311, 371, 373, 374, 408, 689, 690, 691, 693, 695, 696, 699, 700, 702, 704, 706, 709, 711, 712, 713, 717], "bessel": [9, 22, 32, 45, 257, 293, 302, 371, 521, 636, 638], "kind": [9, 22, 32, 114, 117, 118, 227, 311, 371, 402, 403, 408, 504, 506, 521, 629, 630, 635, 637, 647, 648, 688, 710, 712, 715, 717, 725], "26606588": [9, 32, 302, 371], "2795853": [9, 32, 302, 371], "88079259": [9, 32, 302, 371], "moveaxi": [9, 32, 302], "destin": [9, 32, 302, 372], "unstack": [9, 16, 26, 39, 372, 513, 697, 717, 720, 739], "reorder": [9, 16, 32, 39, 302, 372, 422, 508, 513, 575], "uniqu": [9, 10, 20, 32, 33, 43, 302, 372, 373, 378, 446, 508, 514, 515, 519, 587, 588, 589, 592, 596, 621, 622, 623, 624, 649, 680, 682, 693, 697, 706, 710, 711, 715, 725, 735], "pad_width": [9, 16, 32, 39, 302, 373, 513, 573, 586], "stat_length": [9, 32, 302, 373], "constant_valu": [9, 32, 302, 373], "end_valu": [9, 32, 302, 373], "reflect_typ": [9, 32, 302, 373], "even": [9, 32, 189, 222, 227, 232, 302, 311, 373, 401, 506, 683, 684, 690, 691, 693, 698, 699, 700, 702, 705, 706, 709, 710, 711, 715, 719, 720, 721, 722, 725, 738], "rot90": [9, 32, 302, 709], "rotat": [9, 32, 302, 375, 724], "take_along_axi": [9, 32, 302], "extract": [9, 32, 302, 376, 710, 713, 728, 732, 733, 738], "One": [9, 10, 16, 18, 32, 33, 39, 41, 302, 356, 357, 358, 373, 376, 423, 508, 513, 517, 578, 611, 694, 697, 699, 701, 706, 711, 712, 717, 719, 720], "bound": [9, 32, 302, 374, 376, 647, 703, 710, 712, 717, 738], "arr": [9, 10, 29, 32, 122, 302, 374, 376, 454, 504, 695, 699, 700], "top_k": [9, 32, 302], "largest": [9, 26, 32, 114, 117, 302, 377, 504, 511, 550, 559, 724], "sort": [9, 20, 26, 32, 43, 49, 241, 300, 302, 311, 347, 377, 394, 408, 506, 511, 519, 543, 544, 559, 560, 621, 625, 626, 627, 649, 680, 688, 698, 713], "top": [9, 16, 32, 302, 377, 422, 508, 572, 660, 680, 690, 691, 699, 710, 712, 715, 720, 721, 732, 736], "retun": [9, 32, 302, 377], "smallest": [9, 26, 32, 114, 117, 185, 302, 377, 504, 506, 511, 550, 647, 649, 650], "name": [9, 14, 20, 24, 37, 43, 47, 196, 300, 302, 347, 377, 378, 412, 413, 506, 508, 511, 519, 543, 544, 548, 556, 557, 559, 564, 621, 622, 623, 644, 648, 654, 664, 671, 673, 689, 690, 691, 695, 696, 697, 698, 701, 702, 703, 705, 710, 711, 712, 713, 714, 715, 717, 720, 722, 732], "unique_consecut": [9, 32, 302], "vsplit": [9, 32, 302], "vertic": [9, 32, 302, 379, 380, 422, 508, 691], "_arraywithnormsexperiment": [9, 48], "batch_norm": [9, 32, 305], "varianc": [9, 22, 32, 45, 305, 381, 383, 521, 638, 661, 665], "momentum": [9, 32, 305, 381, 383, 665, 683], "nsc": [9, 32, 305, 381, 382, 383, 665], "braodcast": [9, 32, 305, 381], "present": [9, 26, 32, 267, 296, 305, 381, 382, 383, 682, 689, 691, 697, 699, 700, 705, 709, 717, 729, 730, 739], "avoid": [9, 32, 189, 194, 196, 212, 222, 302, 305, 358, 381, 382, 383, 416, 461, 482, 506, 508, 649, 650, 690, 691, 695, 696, 697, 698, 699, 703, 707, 710, 712, 713, 714, 715, 732], "running_mean": [9, 32, 305, 381, 383, 665], "running_var": [9, 32, 305, 381, 383, 665], "nc": [9, 32, 305, 381, 382, 383, 665], "group_norm": [9, 32, 305], "num_group": [9, 32, 305, 382], "group": [9, 32, 302, 305, 378, 382, 510, 515, 523, 530, 531, 592, 693, 697, 699, 706, 710, 711, 728, 731, 737], "separ": [9, 10, 32, 305, 382, 510, 536, 691, 694, 697, 698, 712, 717, 719, 720, 733, 737], "instance_norm": [9, 32, 305], "l1_normal": [9, 32, 305], "l1": [9, 14, 37, 305, 384, 511, 566, 697, 720], "whole": [9, 305, 384, 385, 386, 691, 696, 704], "33333334": [9, 305, 384, 386, 491, 509, 510, 511, 532, 566], "33333337": [9, 87, 305, 384, 491, 503, 509], "28571439": [9, 305, 384], "l2_normal": [9, 32, 305, 386], "l2": [9, 14, 37, 305, 385, 386, 511, 566, 662, 697], "44721359": [9, 32, 305, 385, 386], "89442718": [9, 32, 305, 385, 386], "60000002": [9, 45, 49, 305, 385, 386, 633], "80000001": [9, 305, 385, 386], "lp_normal": [9, 32, 305], "lp": [9, 305, 386], "_arraywithrandomexperiment": [9, 48], "bernoulli": [9, 32, 299, 306, 322, 323, 324], "seed": [9, 13, 18, 20, 26, 32, 36, 41, 306, 387, 388, 389, 390, 391, 510, 517, 519, 533, 610, 611, 612, 613, 615, 621, 654, 659, 661, 707, 711, 712], "probabl": [9, 13, 15, 18, 32, 36, 38, 41, 299, 306, 311, 322, 323, 324, 387, 401, 404, 408, 510, 512, 517, 533, 536, 537, 568, 610, 649, 661, 662, 680, 684, 712, 726], "event": [9, 32, 306, 387, 712], "entri": [9, 16, 26, 32, 39, 43, 87, 302, 306, 366, 367, 387, 503, 513, 515, 580, 603, 621, 690, 698, 712, 732], "parameter": [9, 18, 32, 41, 306, 387, 388, 390, 391, 517, 610, 612, 613], "distribut": [9, 15, 18, 32, 38, 41, 299, 301, 306, 322, 323, 324, 353, 387, 388, 389, 390, 391, 512, 517, 568, 569, 570, 610, 611, 612, 613, 615, 661, 662, 663, 664, 689, 690, 698, 700, 725, 732, 735], "prob": [9, 13, 32, 36, 41, 299, 306, 322, 323, 324, 387, 510, 517, 533, 610, 662, 680], "odd": [9, 32, 227, 302, 306, 373, 387, 506, 688, 693], "g": [9, 18, 20, 22, 24, 32, 41, 47, 100, 129, 142, 189, 202, 222, 229, 232, 299, 306, 311, 335, 337, 387, 388, 389, 390, 391, 402, 403, 504, 505, 506, 511, 515, 517, 519, 521, 544, 545, 550, 557, 559, 560, 566, 593, 597, 599, 602, 607, 611, 612, 613, 621, 622, 623, 624, 629, 630, 632, 634, 635, 637, 661, 684, 685, 689, 690, 692, 693, 695, 696, 697, 708, 710, 712, 717, 725, 727, 728], "drawn": [9, 18, 32, 41, 306, 387, 388, 389, 390, 391, 517, 610, 611, 612, 613, 647, 648, 649, 661, 712], "dirichlet": [9, 32, 306], "shuffl": [9, 18, 26, 32, 41, 389, 517], "10598304": [9, 306, 389], "21537054": [9, 306, 389], "67864642": [9, 306, 389], "48006698": [9, 306, 389], "07472073": [9, 306, 389], "44521229": [9, 306, 389], "55479872": [9, 306, 389], "05426367": [9, 306, 389], "39093761": [9, 306, 389], "19531053": [9, 306, 389], "51675832": [9, 306, 389], "28793114": [9, 306, 389], "12315625": [9, 306, 389], "29823365": [9, 306, 389], "5786101": [9, 306, 389], "15564976": [9, 306, 389], "50542368": [9, 306, 389], "33892656": [9, 306, 389], "1325352": [9, 306, 389], "44439589": [9, 306, 389], "42306891": [9, 306, 389], "gamma": [9, 17, 32, 40, 271, 281, 296, 306, 311, 405, 516, 609], "poisson": [9, 32, 301, 306, 353], "rate": [9, 11, 32, 34, 299, 306, 340, 391, 490, 493, 495, 496, 497, 509, 514, 587, 588, 589, 666, 698], "paramt": [9, 391, 515, 597, 607], "lam": [9, 32, 306, 391], "_arraywithsearchingexperiment": [9, 48], "unravel_index": [9, 32, 307], "unravel": [9, 32, 307, 392], "_arraywithsetexperiment": [9, 48], "_arraywithsortingexperiment": [9, 48], "lexsort": [9, 32, 309], "indirectli": [9, 32, 309, 394], "column": [9, 14, 32, 37, 82, 96, 261, 293, 300, 302, 309, 311, 347, 364, 366, 367, 370, 394, 400, 401, 503, 511, 543, 544, 550, 556, 558, 559, 564, 661], "statist": [9, 32, 47, 302, 373, 665, 678, 689, 699, 712, 713, 732], "_arraywithstatisticalexperiment": [9, 48], "bincount": [9, 32, 311], "minlength": [9, 32, 311, 399], "alreadi": [9, 14, 26, 32, 37, 185, 195, 222, 232, 242, 302, 311, 357, 358, 373, 399, 408, 506, 511, 546, 554, 674, 680, 689, 690, 691, 695, 697, 699, 700, 705, 709, 710, 715, 725, 726, 732, 734, 739], "bin": [9, 32, 311, 399, 404, 686, 690, 691, 693, 697], "corrcoef": [9, 32, 311], "rowvar": [9, 32, 311, 400, 401], "row": [9, 32, 82, 96, 261, 293, 302, 309, 311, 367, 380, 394, 400, 401, 503, 511, 517, 518, 550, 558, 559, 564, 610, 619, 661], "relationship": [9, 32, 400, 661], "cov": [9, 32, 311], "bia": [9, 13, 32, 36, 40, 311, 401, 449, 508, 510, 516, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 609, 662, 706, 712, 717, 721], "ddof": [9, 32, 311, 401], "fweight": [9, 32, 311, 401], "aweight": [9, 32, 311, 401], "overridden": [9, 32, 311, 401, 666, 694], "unbias": [9, 22, 32, 45, 311, 401, 521, 638], "frequenc": [9, 10, 32, 33, 311, 401, 426, 508, 691], "typic": [9, 32, 265, 278, 296, 311, 401, 520, 627, 662, 693, 706, 731, 739], "assign": [9, 32, 311, 401, 689, 691, 695, 699, 709, 719], "covari": [9, 32, 311, 401], "cummax": [9, 32, 311], "exclus": [9, 10, 22, 26, 32, 33, 45, 71, 311, 402, 403, 441, 442, 445, 503, 508, 517, 521, 611, 629, 630, 697, 699, 706, 722, 736, 738], "cumul": [9, 22, 32, 45, 311, 402, 403, 521, 629, 630, 724], "int64": [9, 18, 19, 21, 22, 29, 41, 42, 44, 45, 92, 104, 110, 113, 115, 117, 121, 122, 126, 133, 250, 256, 291, 293, 309, 311, 394, 402, 403, 503, 504, 518, 520, 521, 611, 616, 617, 618, 627, 629, 630, 635, 637, 647, 648, 699, 710, 712, 717], "uint64": [9, 22, 111, 116, 118, 119, 129, 131, 134, 250, 291, 311, 402, 403, 504, 521, 629, 630, 635, 637, 647, 648, 699, 712, 717], "uint16": [9, 22, 106, 111, 116, 117, 126, 250, 291, 311, 402, 403, 504, 521, 629, 630, 635, 637, 647, 648, 699, 710, 712, 717], "bit": [9, 22, 113, 114, 117, 180, 181, 183, 311, 402, 403, 504, 506, 521, 629, 630, 635, 637, 688, 689, 690, 697, 698, 699, 701, 706, 717, 719, 738], "uint32": [9, 22, 111, 116, 117, 118, 140, 250, 291, 311, 402, 403, 504, 521, 629, 630, 635, 637, 647, 648, 699, 712, 717], "resolv": [9, 22, 196, 311, 402, 403, 506, 513, 521, 574, 629, 630, 635, 637, 691, 696, 699, 704, 717], "cummin": [9, 32, 311], "histogram": [9, 32, 311], "extend_lower_interv": [9, 32, 311, 404], "extend_upper_interv": [9, 32, 311, 404], "densiti": [9, 32, 311, 404], "monoton": [9, 32, 311, 404], "rightmost": [9, 32, 311, 404], "extend": [9, 32, 302, 311, 373, 404, 695, 696, 702, 703, 705, 710, 713, 725, 729, 732, 738], "c1": [9, 32, 311, 404, 697], "ff": [9, 32, 311, 404], "i_": [9, 32, 311, 404], "c_": [9, 32, 311, 404], "igamma": [9, 32, 311], "incomplet": [9, 32, 311, 405, 691], "3614": [9, 32, 311, 405], "2085": [9, 32, 311, 405], "median": [9, 32, 302, 311, 373, 408], "nanmean": [9, 32, 311], "anyth": [9, 32, 311, 407, 408, 691, 703, 712, 713, 732, 733], "sub": [9, 14, 16, 26, 27, 31, 32, 33, 37, 39, 49, 221, 300, 302, 311, 348, 361, 369, 379, 407, 408, 511, 513, 514, 542, 580, 587, 588, 589, 660, 689, 691, 692, 697, 703, 710, 711, 712, 719, 720, 721, 728], "6666666666666665": [9, 32, 311, 407], "nanmedian": [9, 32, 311], "overwrite_input": [9, 32, 311, 408], "save": [9, 26, 32, 311, 408, 465, 486, 505, 508, 522, 664, 684, 686, 690, 698, 704, 712, 725, 731], "treat": [9, 26, 32, 227, 283, 296, 302, 311, 376, 408, 506, 644, 708, 712, 718, 722], "undefin": [9, 32, 302, 311, 373, 408, 703, 708], "fulli": [9, 32, 311, 408, 662, 680, 684, 694, 699, 705, 708, 715, 717, 718, 719, 720, 721, 722, 725, 730, 731, 732, 738, 739], "quantil": [9, 32, 311], "inclus": [9, 32, 71, 311, 410, 503, 517, 611, 685, 695, 709, 715], "higher": [9, 32, 302, 311, 356, 357, 358, 410, 661, 699, 709, 716, 717, 722, 725, 729, 732, 733, 736, 738, 739], "midpoint": [9, 32, 311, 410], "surround": [9, 32, 311, 410, 715], "whichev": [9, 32, 311, 410], "_arraywithutilityexperiment": [9, 48], "_arraywithgener": [10, 48], "all_equ": [10, 33, 508], "equality_matrix": [10, 33, 411, 508], "array_equ": [10, 33, 508], "assert_supports_inplac": [10, 33, 508], "ivybackendexcept": [10, 33, 415, 439, 508, 675, 694, 700, 703], "clip_matrix_norm": [10, 33, 508], "downscal": [10, 33, 417, 418, 439, 508], "894": [10, 33, 417, 418, 508, 516, 609], "clip_vector_norm": [10, 33, 508], "default_v": [10, 421, 508], "catch_except": [10, 421, 508], "rev": [10, 421, 508], "with_cal": [10, 421, 508], "catch": [10, 421, 508, 707, 712], "might": [10, 128, 421, 504, 508, 689, 690, 691, 698, 699, 701, 704, 707, 710, 712, 713, 715, 717, 719, 720, 727], "els": [10, 18, 31, 41, 107, 108, 109, 110, 111, 123, 229, 233, 306, 388, 421, 425, 504, 506, 508, 515, 517, 600, 603, 611, 612, 613, 642, 674, 680, 689, 691, 693, 695, 699, 700, 703, 706, 709, 710, 711, 712, 713, 715, 717, 719, 721, 722, 725, 733], "einops_rearrang": [10, 33, 508], "pattern": [10, 33, 422, 423, 424, 508, 684, 699, 702], "axes_length": [10, 33, 422, 423, 424, 508], "re": [10, 19, 42, 162, 422, 505, 508, 511, 513, 518, 561, 579, 618, 620, 681, 682, 683, 685, 689, 690, 691, 692, 693, 699, 708, 709, 710, 711, 713, 715, 719, 722, 725, 732], "arrang": [10, 422, 508], "rearrang": [10, 33, 422, 424, 508], "einop": [10, 33, 422, 423, 424, 508, 683], "einops_reduc": [10, 33, 508], "prod": [10, 22, 33, 45, 423, 508, 521, 647, 699, 701, 717], "einops_repeat": [10, 33, 508], "fourier_encod": [10, 33, 508], "max_freq": [10, 33, 426, 508], "num_band": [10, 33, 426, 508], "band": [10, 33, 426, 508], "linearli": [10, 33, 426, 508, 511, 558], "oppos": [10, 33, 426, 508, 699], "geometr": [10, 33, 426, 508, 511, 564], "seper": [10, 426, 508, 701, 711, 712], "0000000e": [10, 33, 426, 508], "2246468e": [10, 33, 426, 508], "4492936e": [10, 426, 508], "6739404e": [10, 33, 426, 508], "batch_dim": [10, 33, 429, 430, 508, 668], "gather_nd": [10, 33, 508], "get_num_dim": [10, 33, 508], "as_arrai": [10, 33, 433, 466, 508, 668], "has_nan": [10, 33, 508], "include_inf": [10, 33, 435, 487, 508], "inplace_decr": [10, 33, 508], "val": [10, 26, 31, 33, 202, 437, 438, 439, 457, 458, 459, 506, 508, 699, 709, 719], "decrement": [10, 33, 437, 508], "inplace_incr": [10, 33, 508], "increment": [10, 33, 438, 508, 691, 732], "inplace_upd": [10, 33, 508, 659, 709], "ensure_in_backend": [10, 33, 439, 508, 709], "keep_input_dtyp": [10, 33, 439, 508, 709], "is_arrai": [10, 33, 508, 709, 710], "rather": [10, 26, 33, 71, 162, 441, 442, 445, 503, 505, 508, 683, 691, 693, 697, 699, 702, 710, 711, 712, 713, 722, 725, 728, 731, 732], "is_ivy_arrai": [10, 33, 508, 709, 719], "is_ivy_contain": [10, 508], "is_native_arrai": [10, 33, 125, 442, 504, 508, 719], "isin": [10, 33, 508], "test_el": [10, 33, 446, 508], "assume_uniqu": [10, 33, 446, 508], "invert": [10, 33, 180, 446, 506, 508, 511, 551], "speed": [10, 33, 446, 508, 682, 712, 735], "scatter_flat": [10, 33, 508], "occupi": [10, 114, 117, 453, 454, 504, 508], "scatter_nd": [10, 33, 508, 715, 719], "empti": [10, 26, 33, 71, 250, 291, 302, 373, 417, 454, 503, 508, 511, 515, 521, 522, 563, 566, 604, 635, 637, 639, 640, 689, 690, 694, 696, 699, 700, 709], "stable_divid": [10, 33, 508, 706], "denomin": [10, 17, 33, 40, 459, 467, 480, 508, 516, 609, 665, 706, 714, 725, 729], "min_denomin": [10, 33, 459, 467, 480, 508, 714], "global": [10, 26, 33, 49, 107, 108, 109, 110, 111, 160, 161, 162, 458, 459, 462, 467, 468, 479, 480, 483, 504, 505, 508, 654, 665, 671, 690, 694, 695, 698, 699, 700, 703, 706, 710, 717, 732], "_min_denomin": [10, 467, 508], "stable_pow": [10, 33, 508], "min_bas": [10, 33, 458, 468, 479, 508, 665, 714], "stabl": [10, 21, 33, 44, 96, 261, 293, 309, 394, 458, 459, 467, 468, 479, 480, 503, 508, 520, 625, 628, 649, 690, 695, 699, 710, 714, 717, 725], "supports_inplace_upd": [10, 33, 508], "to_fil": 10, "fid": 10, "sep": 10, "format_": 10, "text": [10, 689, 691, 696, 701, 702], "binari": [10, 13, 15, 36, 38, 179, 182, 184, 219, 239, 301, 353, 506, 510, 512, 533, 568], "filenam": [10, 664, 670, 720], "txt": [10, 690, 693, 696], "recov": [10, 703, 710], "appropri": [10, 19, 24, 42, 47, 172, 189, 196, 222, 265, 278, 296, 506, 518, 616, 689, 690, 691, 703, 707, 712], "to_list": [10, 33, 508], "to_numpi": [10, 33, 508, 680, 711, 720], "address": [10, 474, 508, 684, 689, 691, 693, 694, 717, 728, 730, 732, 738], "to_scalar": [10, 33, 508], "value_is_nan": [10, 33, 508], "92": [10, 41, 487, 497, 509, 511, 540, 612, 613], "_arraywithgradi": [11, 48], "adam_step": [11, 34, 509], "mw": [11, 34, 489, 490, 509, 721], "vw": [11, 34, 489, 490, 509, 721], "beta1": [11, 34, 413, 489, 490, 495, 508, 509, 666, 721], "beta2": [11, 34, 413, 489, 490, 495, 508, 509, 666, 721], "999": [11, 31, 34, 240, 489, 490, 495, 497, 506, 509, 666, 721], "epsilon": [11, 14, 15, 34, 37, 38, 413, 489, 490, 495, 508, 509, 511, 512, 552, 555, 568, 569, 570, 663, 665, 666, 697, 706, 709, 721], "07": [11, 15, 31, 34, 38, 41, 177, 210, 214, 233, 299, 330, 479, 489, 490, 492, 493, 494, 495, 506, 508, 509, 512, 569, 570, 612, 663, 666, 721], "cost": [11, 34, 489, 490, 493, 495, 496, 497, 509, 514, 587, 588, 589, 715, 730], "dc": [11, 34, 489, 490, 493, 495, 496, 497, 509], "dw": [11, 34, 489, 490, 493, 495, 496, 497, 509], "forget": [11, 34, 489, 490, 495, 509, 666, 680, 699], "factor": [11, 13, 14, 34, 36, 37, 160, 161, 162, 299, 332, 342, 489, 490, 495, 496, 505, 509, 510, 511, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 647, 649, 650, 661, 662, 666, 683, 703], "adam": [11, 34, 413, 489, 490, 495, 508, 509, 666, 680, 720, 721, 722, 732], "prevent": [11, 34, 489, 490, 495, 509, 510, 521, 533, 637, 661, 666, 689, 691, 698, 699, 703, 709, 710, 713], "delta": [11, 34, 489, 509], "dcdw": [11, 34, 489, 490, 493, 495, 496, 509], "adam_step_delta": [11, 34, 489, 509], "2020105": [11, 489, 509], "22187898": [11, 489, 509], "24144873": [11, 489, 509], "10000002": [11, 45, 244, 291, 489, 633], "20000005": [11, 244, 291, 489], "00300002": [11, 489], "00800002": [11, 489], "adam_upd": [11, 34, 509, 721], "lr": [11, 34, 413, 490, 493, 495, 496, 497, 508, 509, 666, 720, 721], "mw_tm1": [11, 34, 490, 495, 509], "vw_tm1": [11, 34, 490, 495, 509], "stop_gradi": [11, 34, 162, 413, 490, 493, 495, 496, 497, 505, 508, 509, 514, 587, 588, 589, 666, 721], "learn": [11, 34, 422, 490, 493, 495, 496, 497, 508, 509, 514, 587, 588, 589, 666, 680, 682, 683, 685, 688, 689, 690, 692, 693, 704, 706, 708, 716, 724, 727, 730, 734, 735, 736, 737, 738, 739], "previou": [11, 34, 136, 137, 138, 139, 140, 290, 298, 477, 479, 480, 481, 483, 484, 486, 490, 495, 504, 508, 509, 661, 677, 691, 693, 695, 698, 700, 705, 710, 712, 715, 722, 725, 735], "ws_new": [11, 34, 490, 495, 496, 497, 509], "updated_weight": [11, 34, 490, 509], "92558753": [11, 490], "92558873": [11, 490, 509], "92558718": [11, 490, 509], "00000063e": [11, 34, 490, 509], "00000016e": [11, 34, 490, 509], "00000086e": [11, 34, 490, 509], "gradient_descent_upd": [11, 34, 509, 514, 587, 588, 589], "descent": [11, 34, 493, 509, 666, 721, 732], "new_weight": [11, 34, 493, 495, 509, 720], "95": [11, 14, 18, 25, 34, 36, 41, 55, 341, 489, 493, 497, 500, 509, 511, 517, 546, 612, 613], "97": [11, 31, 34, 41, 175, 493, 506, 509, 612], "96": [11, 31, 32, 33, 41, 186, 207, 239, 299, 320, 422, 423, 493, 506, 508, 509, 511, 521, 554, 613, 631], "lamb_upd": [11, 34, 509], "max_trust_ratio": [11, 34, 495, 509, 666], "decay_lambda": [11, 34, 495, 496, 509, 666], "trust": [11, 34, 495, 509, 666], "ratio": [11, 34, 495, 509, 666], "decai": [11, 34, 495, 496, 509, 666], "lamb": [11, 34, 495, 509, 666, 721], "784": [11, 495, 509], "78": [11, 184, 233, 495, 506, 509, 511, 517, 521, 554, 612, 631], "lars_upd": [11, 34, 509], "lar": [11, 34, 496, 509, 666, 721], "optimizer_upd": [11, 34, 509], "effective_grad": [11, 34, 497, 509], "3e": [11, 34, 497, 509], "preserve_typ": [11, 34, 498, 509], "_arraywithimag": [12, 48], "_arraywithlay": [13, 48], "conv1d": [13, 36, 510, 662], "filter_format": [13, 36, 510, 523, 524, 526, 527, 528, 530], "channel_last": [13, 36, 510, 523, 524, 526, 527, 528, 530, 531, 647], "x_dilat": [13, 36, 510, 523, 524, 526, 527, 528, 530], "fw": [13, 36, 311, 401, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 644, 690, 712], "d_out": [13, 36, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531], "channel_first": [13, 36, 510, 523, 524, 526, 527, 528, 530, 531], "wio": [13, 510, 523, 524, 525, 530], "conv1d_transpos": [13, 36, 510], "output_shap": [13, 36, 510, 523, 525, 527, 529, 531, 662], "conv2d": [13, 36, 510, 527, 662, 680], "fh": [13, 36, 510, 515, 523, 526, 527, 528, 529, 530, 531, 532, 602], "hwio": [13, 510, 523, 524, 526, 530], "conv2d_transpos": [13, 36, 510], "random_norm": [13, 14, 18, 36, 37, 41, 422, 508, 510, 511, 517, 525, 527, 528, 529, 532, 535, 559, 680], "std": [13, 18, 22, 36, 41, 45, 306, 388, 510, 517, 521, 525, 527, 528, 529, 532, 611, 612, 680, 701], "conv3d": [13, 36, 510, 529, 662], "fd": [13, 36, 510, 523, 528, 529, 530, 531], "conv3d_transpos": [13, 36, 510], "depthwise_conv2d": [13, 36, 510], "dropout": [13, 36, 299, 322, 323, 324, 510, 536, 537, 662, 720], "noise_shap": [13, 36, 510, 533], "droput": [13, 533], "turn": [13, 36, 322, 323, 324, 510, 533, 662, 684, 690, 697, 700, 701, 710, 712], "reproduc": [13, 36, 510, 533, 647, 648, 649, 650, 654, 693], "mask": [13, 36, 432, 508, 510, 533, 536, 537, 715], "42857146": [13, 510, 533], "85714293": [13, 510, 533], "28571415": [13, 36, 510, 533], "71428585": [13, 36, 510, 533], "14285755": [13, 36, 510, 533], "5714283": [13, 510, 533], "4285717": [13, 36, 510, 533], "8571434": [13, 36, 510, 533], "2857151": [13, 510, 533], "dropout1d": [13, 36, 299], "droput1d": [13, 322, 323], "dropout2d": [13, 36, 299], "dropout3d": [13, 36, 299], "droput3d": [13, 324], "outer_batch_shap": [13, 36, 510, 534], "inner_batch_shap": [13, 36, 510, 534], "in_featur": [13, 36, 510, 534, 712], "out_featur": [13, 36, 510, 534, 712], "84": [13, 22, 31, 41, 117, 147, 212, 504, 505, 511, 516, 521, 534, 554, 609, 612, 613, 631], "133": [13, 418, 508, 534], "134": [13, 511, 534, 551], "lstm_updat": [13, 36, 510, 717], "init_h": [13, 36, 510, 535, 717], "init_c": [13, 36, 510, 535, 717], "recurrent_kernel": [13, 36, 510, 535, 717], "recurrent_bia": [13, 36, 510, 535, 717], "cell": [13, 36, 510, 535, 662, 698, 717], "batch_shap": [13, 18, 28, 36, 41, 82, 91, 503, 510, 511, 517, 535, 536, 537, 567, 610, 662, 715, 717, 719], "hidden": [13, 36, 510, 535, 662, 696, 703, 717, 721], "recurr": [13, 36, 510, 535, 717, 732, 736], "timestep": [13, 36, 510, 535, 536, 662, 717], "h_i": [13, 36, 535], "c_i": [13, 36, 535], "rc": [13, 36, 535], "multi_head_attent": [13, 36, 510, 709], "num_head": [13, 36, 510, 536, 662], "attention_mask": [13, 36, 510, 536], "in_proj_weight": [13, 36, 510, 536], "q_proj_weight": [13, 36, 510, 536], "k_proj_weight": [13, 36, 510, 536], "v_proj_weight": [13, 36, 510, 536], "out_proj_weight": [13, 36, 510, 536], "in_proj_bia": [13, 36, 510, 536], "out_proj_bia": [13, 36, 510, 536], "is_caus": [13, 36, 510, 536, 537], "return_attention_weight": [13, 36, 510, 536], "average_attention_weight": [13, 36, 510, 536], "key_chain": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 112, 114, 117, 120, 121, 122, 124, 126, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 356, 357, 358, 360, 362, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 401, 402, 403, 404, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "to_appli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 112, 114, 117, 120, 121, 122, 124, 126, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 356, 357, 358, 360, 362, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 401, 402, 403, 404, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 515, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "prune_unappli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 112, 114, 117, 120, 121, 122, 124, 126, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 352, 356, 357, 358, 360, 362, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 401, 402, 403, 404, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 515, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "map_sequ": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 112, 114, 117, 120, 121, 122, 124, 126, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 257, 258, 261, 264, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 352, 356, 357, 358, 360, 362, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 401, 402, 403, 404, 410, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "scaled_dot_product_attent": [13, 36, 510], "dropout_p": [13, 36, 510, 537], "queri": [13, 26, 36, 147, 161, 432, 457, 505, 508, 510, 536, 537, 662, 697, 699, 719, 732], "num_queri": [13, 36, 510, 536, 537], "feat_dim": [13, 36, 510, 537], "num_kei": [13, 36, 510, 536, 537], "causal": [13, 36, 510, 536, 537], "attent": [13, 36, 510, 536, 537, 662, 683, 691, 694], "applic": [13, 36, 510, 511, 515, 521, 536, 537, 563, 596, 597, 598, 602, 603, 635, 637, 680, 690, 698, 699, 700, 707, 721, 729, 730, 732, 734, 736, 738], "dot": [13, 32, 36, 300, 352, 510, 511, 536, 537, 565, 680, 690, 698], "score": [13, 36, 510, 537, 680], "40000001": [13, 25, 48, 49, 57, 60, 244, 291, 500, 510, 519, 537, 622], "29999995": [13, 244, 291, 510, 519, 537, 622], "19994521": [13, 510, 537], "09994531": [13, 510, 537], "30000019": [13, 510, 537], "_arraywithlinearalgebra": [14, 48], "choleski": [14, 37, 511, 709], "symmetr": [14, 32, 37, 254, 255, 257, 258, 293, 300, 302, 347, 373, 511, 538, 543, 544, 545, 567, 697], "u": [14, 28, 37, 88, 511, 515, 538, 545, 559, 598, 680, 683, 685, 690, 691, 692, 697, 698, 704, 706, 707, 709, 710, 711, 712, 713, 715, 721, 725], "l": [14, 31, 37, 216, 300, 347, 511, 538, 543, 544, 545, 549, 563, 691, 692], "625": [14, 32, 275, 511, 538], "cross": [14, 15, 37, 38, 511, 512, 568, 569, 570, 680, 698, 699], "vif": [14, 37, 539], "det": [14, 37, 511, 557, 698], "axis1": [14, 16, 37, 39, 511, 513, 542, 563, 583], "axis2": [14, 37, 511, 542, 563], "eigh": [14, 37, 300, 347, 511, 543], "uplo": [14, 37, 511, 544, 545], "eigvalsh": [14, 37, 511], "inner": [14, 28, 37, 51, 91, 300, 347, 503, 511, 514, 543, 544, 549, 587, 588, 589, 689, 709], "array_lik": [14, 37, 299, 302, 342, 374, 511, 546, 554], "ident": [14, 26, 82, 150, 432, 457, 503, 505, 508, 511, 515, 546, 551, 603, 662, 682, 684, 697, 706, 707, 710, 711, 713, 715, 719, 720, 725, 727], "53": [14, 18, 31, 36, 108, 164, 194, 341, 492, 494, 504, 505, 509, 511, 516, 546, 609, 613], "83": [14, 36, 41, 236, 299, 311, 320, 330, 341, 402, 506, 510, 511, 534, 546, 612], "3d": [14, 32, 299, 322, 323, 358, 511, 546, 662, 706, 715, 724], "29": [14, 31, 33, 34, 36, 41, 177, 311, 341, 402, 422, 423, 491, 495, 506, 508, 509, 511, 546, 611, 612, 613], "109": [14, 511, 546], "105": [14, 36, 510, 511, 512, 533, 534, 546, 554, 568], "149": [14, 511, 546], "171": [14, 511, 546, 647], "143": [14, 31, 49, 239, 506, 511, 546, 701], "173": [14, 511, 546], "203": [14, 31, 178, 511, 516, 546, 609], "233": [14, 511, 546], "inv": [14, 37, 511], "matmul": [14, 37, 488, 508, 511, 559, 695, 712, 713, 717], "transpose_a": [14, 37, 511, 549], "transpose_b": [14, 37, 511, 549], "adjoint_a": [14, 37, 511, 549], "adjoint_b": [14, 37, 511, 549], "detail": [14, 16, 20, 32, 37, 39, 43, 55, 57, 60, 83, 300, 344, 360, 500, 503, 519, 542, 549, 555, 559, 582, 621, 622, 623, 624, 680, 689, 691, 693, 695, 696, 697, 698, 704, 705, 706, 707, 710, 711, 712, 713, 714, 717, 719, 720, 721, 734, 738], "matrix_norm": [14, 37, 511], "ord": [14, 37, 511, 550, 566], "fro": [14, 37, 511, 550], "nuc": [14, 37, 511, 550], "matrix_pow": [14, 37, 511], "matrix_rank": [14, 37, 511], "hermitian": [14, 37, 300, 347, 348, 511, 543, 544, 545, 552, 559], "singular": [14, 37, 511, 550, 552, 555, 559, 560, 649, 699], "largest_singular_valu": [14, 37, 511, 552, 555], "full": [14, 36, 37, 114, 201, 209, 301, 353, 456, 464, 478, 485, 503, 504, 506, 508, 510, 511, 525, 527, 528, 529, 552, 556, 558, 559, 644, 648, 654, 680, 683, 684, 690, 691, 696, 699, 702, 703, 705, 706, 710, 712, 715, 717, 725, 730, 732, 738], "defici": [14, 511, 552], "matrix_transpos": [14, 37, 511, 719], "outer": [14, 37, 511, 514, 587, 588, 589, 689], "pinv": [14, 37, 511], "pseudo": [14, 37, 511, 555, 708], "99999988": [14, 37, 511, 555], "qr": [14, 37, 511, 711], "decomposit": [14, 37, 511, 538, 544, 548, 556, 559, 689, 739], "orthonorm": [14, 37, 511, 556, 559], "lead": [14, 26, 37, 49, 196, 506, 511, 556, 559, 649, 683, 684, 698, 699, 701, 713, 725], "complet": [14, 26, 37, 511, 556, 648, 683, 689, 690, 691, 693, 694, 697, 698, 701, 703, 710, 711, 712, 715, 719, 720, 730], "namedtupl": [14, 20, 37, 43, 300, 302, 347, 378, 511, 519, 543, 544, 556, 557, 559, 621, 622, 623], "field": [14, 20, 37, 43, 300, 302, 347, 378, 511, 519, 543, 544, 556, 557, 559, 621, 622, 623, 680, 698, 724, 730, 738], "those": [14, 16, 26, 32, 37, 39, 71, 128, 189, 222, 376, 488, 503, 504, 506, 508, 511, 513, 515, 518, 556, 559, 571, 592, 619, 682, 689, 690, 691, 694, 697, 698, 699, 707, 709, 710, 711, 712, 715, 729], "slogdet": [14, 37, 511], "logabsdet": [14, 37, 511, 557], "natur": [14, 37, 192, 210, 211, 212, 213, 232, 281, 296, 506, 511, 557, 683, 694, 701, 703, 711, 724], "098611": [14, 511, 557], "solv": [14, 37, 511, 680, 690, 693, 710, 718, 724, 734], "svd": [14, 37, 511, 560], "compute_uv": [14, 37, 511, 559], "full_matric": [14, 37, 511, 559], "svf": [14, 559], "vh": [14, 37, 511, 559], "significantli": [14, 37, 511, 559, 682, 698, 730], "faster": [14, 37, 511, 559, 688, 727, 734, 737], "reconstruct": [14, 20, 43, 302, 378, 511, 519, 559, 621, 623, 711], "close": [14, 194, 212, 232, 506, 511, 513, 559, 574, 689, 690, 691, 699, 702, 710, 715, 732], "reconstructed_x": [14, 511, 559], "svdval": [14, 37, 511], "tensordot": [14, 37, 511, 699], "tensorsolv": [14, 37, 511], "vander": [14, 37, 511], "vandermond": [14, 37, 511, 564], "vecdot": [14, 37, 511], "vector_norm": [14, 37, 511], "singleton": [14, 19, 22, 23, 37, 42, 45, 46, 511, 513, 518, 521, 522, 566, 574, 581, 617, 632, 633, 634, 635, 636, 637, 638, 639, 640, 717], "mathemat": [14, 37, 172, 177, 189, 194, 196, 212, 222, 501, 506, 511, 550, 566, 699, 710, 715, 732, 738], "manhattan": [14, 37, 511, 566], "euclidean": [14, 37, 511, 566], "7416575": [14, 37, 511, 566], "vector_to_skew_symmetric_matrix": [14, 37, 511], "_arraywithloss": [15, 48], "binary_cross_entropi": [15, 38, 512, 698], "pred": [15, 38, 301, 353, 512, 568, 569, 570, 680, 697, 706, 709], "from_logit": [15, 38, 512, 568, 663], "pos_weight": [15, 38, 512, 568], "predict": [15, 38, 301, 353, 512, 568, 569, 570, 680], "amount": [15, 38, 164, 505, 512, 568, 569, 570, 690, 698, 700, 711], "smooth": [15, 38, 512, 568, 569, 570, 708], "No": [15, 38, 301, 353, 512, 568, 691, 698, 699, 732], "crossentropi": [15, 38, 512, 568], "entropi": [15, 38, 512, 568, 569, 570, 680], "357": [15, 38, 512, 568, 570], "223": [15, 38, 512, 568, 570], "cross_entropi": [15, 38, 512, 570, 680, 697, 706, 709], "3862944": [15, 512, 569], "sparse_cross_entropi": [15, 38, 512], "_arraywithmanipul": [16, 48], "x_min": [16, 39, 513, 571, 722], "x_max": [16, 39, 513, 571, 722], "constant_pad": [16, 39, 513], "before_1": [16, 39, 302, 373, 513, 573, 586], "after_1": [16, 39, 302, 373, 513, 573, 586], "before_n": [16, 39, 302, 373, 513, 573, 586], "after_n": [16, 39, 302, 373, 513, 573, 586], "permute_dim": [16, 39, 513], "repetit": [16, 39, 513, 577, 584, 715], "fit": [16, 39, 513, 577, 689, 710, 717, 728, 729, 732], "flat": [16, 26, 39, 307, 392, 453, 508, 513, 577, 660], "allowzero": [16, 39, 513, 578], "remain": [16, 19, 32, 39, 42, 172, 189, 190, 196, 204, 205, 222, 225, 231, 233, 299, 322, 323, 324, 342, 506, 513, 515, 518, 578, 596, 619, 691, 698, 701, 703, 713, 715, 725], "roll": [16, 39, 513, 705], "shift": [16, 28, 39, 49, 86, 96, 181, 183, 261, 293, 503, 506, 513, 579, 690, 691, 700, 701, 705], "restor": [16, 39, 513, 579, 704], "num_or_size_split": [16, 26, 39, 513, 580, 717], "with_remaind": [16, 26, 39, 513, 580], "mani": [16, 26, 39, 96, 261, 293, 503, 513, 580, 660, 680, 682, 683, 684, 689, 690, 691, 694, 695, 697, 698, 699, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 715, 717, 719, 720, 725, 728, 732, 735, 738, 739], "squeez": [16, 39, 513, 732], "squeezabl": [16, 513, 581], "document": [16, 196, 488, 506, 508, 582, 685, 687, 688, 691, 696, 698, 699, 701, 709, 710, 711, 712, 720, 722], "swapax": [16, 39, 513], "axis0": [16, 39, 513, 583], "swap_ax": [16, 583], "tile": [16, 33, 39, 424, 513], "unpack": [16, 39, 513, 585, 711, 712], "zero_pad": [16, 39, 513], "_arraywithnorm": [17, 48], "layer_norm": [17, 40, 516], "normalized_idx": [17, 40, 516, 609], "new_std": [17, 40, 516, 609, 665], "learnabl": [17, 40, 514, 516, 589, 609, 662, 665, 722], "deviat": [17, 18, 22, 40, 41, 45, 516, 517, 521, 609, 612, 636, 649, 661, 665, 684, 693], "0976": [17, 516, 609], "3452": [17, 516, 609], "2740": [17, 516, 609], "1047": [17, 516, 609], "5886": [17, 516, 609], "2732": [17, 516, 609], "7696": [17, 516, 609, 647], "7024": [17, 516, 609], "2518": [17, 516, 609], "826": [17, 516, 609], "178": [17, 516, 609], "981": [17, 516, 609], "831": [17, 516, 609], "421": [17, 516, 609], "_arraywithrandom": [18, 48], "multinomi": [18, 41, 306, 389, 517], "population_s": [18, 41, 517, 610], "num_sampl": [18, 41, 517, 610], "unnorm": [18, 41, 517, 610, 712], "popul": [18, 22, 26, 41, 45, 517, 521, 610, 636, 638, 699, 700, 709, 712, 717, 738], "draw": [18, 41, 306, 387, 389, 391, 517, 610, 612, 613, 647, 648, 649, 650, 654, 661, 689, 693, 711, 712], "ve": [18, 41, 517, 610, 689, 690, 691, 712, 715, 716, 719, 727], "highest": [18, 41, 517, 611, 699], "half": [18, 41, 71, 236, 503, 506, 517, 611, 613, 715], "235": [18, 612], "float16": [18, 29, 41, 84, 106, 108, 109, 114, 116, 250, 273, 291, 296, 503, 504, 511, 566, 612, 613, 647, 648, 699, 710, 712], "807": [18, 612], "random_uniform": [18, 41, 517, 700, 703, 712, 717, 721], "86": [18, 32, 41, 299, 311, 330, 402, 489, 509, 612, 613], "_arraywithsearch": [19, 48], "select_last_index": [19, 42, 518, 616, 617], "occurr": [19, 302, 311, 378, 399, 518, 519, 616, 617, 621], "argmin": [19, 42, 518], "output_dtyp": [19, 42, 518, 617], "across": [19, 26, 33, 42, 48, 160, 161, 189, 196, 222, 240, 305, 383, 414, 435, 469, 505, 506, 508, 510, 515, 518, 533, 536, 596, 616, 617, 662, 689, 693, 699, 701, 703, 705, 706, 708, 712, 715, 730, 732, 737], "argwher": [19, 42, 518], "nonzero": [19, 42, 170, 171, 172, 175, 178, 187, 189, 192, 194, 196, 222, 235, 240, 506, 518], "as_tupl": [19, 42, 518, 619], "fewer": [19, 42, 518, 619], "yield": [19, 259, 260, 293, 302, 373, 518, 620, 680, 698], "_arraywithset": [20, 48], "unique_al": [20, 43, 519], "by_valu": [20, 43, 519, 621], "inverse_indic": [20, 43, 302, 378, 519, 621, 623], "unique_count": [20, 43, 519], "unique_invers": [20, 43, 519], "unique_valu": [20, 43, 519], "admonit": [20, 624], "henc": [20, 172, 267, 296, 506, 513, 519, 574, 621, 622, 623, 624, 671, 690, 697, 698, 699, 709, 712], "dask": [20, 519, 621, 622, 623, 624, 683], "difficult": [20, 519, 621, 622, 623, 624, 691, 693, 699, 712, 725], "know": [20, 519, 621, 622, 623, 624, 684, 687, 689, 691, 707, 711, 712, 715, 733], "omit": [20, 232, 506, 519, 621, 622, 623, 624, 705, 709, 710], "x_i": [20, 22, 31, 169, 170, 171, 174, 175, 176, 178, 180, 185, 186, 187, 192, 194, 195, 202, 203, 204, 205, 206, 210, 211, 212, 213, 217, 224, 229, 232, 233, 234, 235, 236, 237, 239, 240, 242, 267, 286, 296, 506, 519, 521, 621, 622, 623, 624, 632, 633, 634, 636, 637, 638, 661, 702], "x_j": [20, 519, 621, 622, 623, 624], "impli": [20, 519, 621, 622, 623, 624, 712], "behavior": [20, 189, 196, 222, 227, 231, 506, 519, 621, 622, 623, 624, 689, 696, 697, 698, 699, 706, 709, 710, 711, 712, 715, 717, 725, 729], "could": [20, 519, 621, 622, 623, 624, 683, 684, 689, 690, 691, 693, 698, 699, 701, 707, 709, 710, 711, 712, 717, 719, 720, 721, 732, 737, 738], "typeerror": [20, 43, 519, 624, 719], "_arraywithsort": [21, 48], "argsort": [21, 44, 520, 627, 710], "descend": [21, 44, 511, 520, 559, 560, 625, 628], "ascend": [21, 44, 309, 394, 520, 625, 627], "stabil": [21, 44, 467, 468, 508, 520, 625, 628, 699, 708, 713, 715], "maintain": [21, 44, 520, 625, 628, 682, 691, 693, 704, 709, 711, 712, 731], "msort": [21, 44, 520], "searchsort": [21, 44, 520, 648], "side": [21, 44, 277, 296, 520, 627, 662, 674, 690, 691, 696], "sorter": [21, 44, 520, 627], "ret_dtyp": [21, 44, 520, 627], "_arraywithstatist": [22, 48], "cumprod": [22, 45, 521, 710, 722], "120": [22, 45, 49, 511, 554, 629, 680], "cumsum": [22, 45, 521, 699], "einsum": [22, 45, 521], "equat": [22, 32, 45, 254, 293, 511, 521, 558, 631, 674, 698, 732], "operand": [22, 32, 36, 169, 170, 171, 172, 174, 175, 176, 177, 178, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 203, 204, 205, 210, 211, 212, 213, 214, 222, 225, 227, 231, 232, 233, 234, 235, 236, 239, 240, 242, 286, 289, 296, 297, 299, 341, 506, 511, 521, 557, 563, 631, 632, 634, 635, 637, 674, 694, 697, 702, 710], "describ": [22, 32, 172, 189, 190, 222, 225, 227, 306, 309, 391, 394, 506, 510, 521, 536, 631, 635, 637, 687, 689, 691, 696, 698, 709, 710, 712, 717, 722, 732], "contract": [22, 511, 521, 561, 631], "seq": [22, 521, 631, 647], "consist": [22, 26, 189, 196, 222, 300, 347, 506, 511, 521, 543, 544, 631, 663, 664, 682, 693, 694, 698, 699, 704, 709, 717, 733], "ii": [22, 45, 521, 631, 691], "jk": [22, 521, 631], "ik": [22, 521, 631], "66": [22, 32, 33, 34, 184, 299, 330, 422, 423, 493, 506, 508, 509, 511, 521, 554, 631], "104": [22, 511, 521, 554, 631], "126": [22, 55, 228, 500, 506, 511, 521, 551, 631], "510": [22, 521, 631], "special": [22, 37, 48, 49, 169, 170, 171, 172, 174, 175, 176, 177, 178, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 203, 204, 205, 210, 211, 212, 213, 214, 217, 222, 225, 227, 231, 232, 233, 234, 235, 236, 239, 240, 242, 286, 296, 506, 511, 521, 557, 563, 632, 633, 634, 635, 636, 637, 638, 647, 648, 649, 650, 654, 661, 689, 693, 694, 696, 698, 701, 702, 703, 704, 705, 709, 711, 712, 713, 715, 732, 733, 734], "arithmet": [22, 45, 183, 189, 222, 506, 521, 633, 710], "propag": [22, 183, 506, 521, 632, 633, 634, 636, 637, 638, 708], "04999995": [22, 633], "freedom": [22, 45, 521, 636, 638, 695], "adjust": [22, 45, 521, 636, 638, 671], "constitut": [22, 45, 521, 636, 638, 706, 717, 733], "commonli": [22, 45, 521, 636, 638, 703, 706, 708], "81649661": [22, 521, 636], "var": [22, 45, 47, 67, 68, 69, 70, 502, 514, 521, 587, 588, 668, 690, 701, 717], "6666665": [22, 638, 720], "667": [22, 33, 189, 418, 467, 506, 508, 638], "_arraywithutil": [23, 48], "AND": [23, 46, 179, 190, 216, 506, 522, 639], "invalid": [23, 46, 511, 513, 522, 565, 574, 639, 640, 647, 690, 699], "OR": [23, 46, 182, 218, 225, 506, 522, 640, 690, 691, 708], "_wrap_funct": [24, 47, 696, 706, 707], "function_nam": [24, 47, 689, 713], "new_funct": [24, 47, 696], "add_ivy_array_instance_method": 24, "cl": [24, 47], "shown": [24, 26, 47, 206, 229, 267, 296, 506, 689, 690, 691, 693, 696, 698, 699, 701, 703, 704, 705, 710, 711, 712, 713, 714, 717, 719, 725], "toi": [24, 47], "arrayexampl": 24, "hasattr": [24, 47], "_containerwithactiv": [25, 49], "dict_in": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "queue": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 462, 483, 508, 714, 720], "queue_load_s": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "container_combine_method": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "list_join": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "queue_timeout": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 462, 483, 508, 714], "print_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "key_length_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "print_ind": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "print_line_spac": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "ivyh": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "default_key_color": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "green": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 679, 689, 690, 691], "keyword_color_dict": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "rebuild_child_contain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "types_to_iteratively_nest": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "alphabetical_kei": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "dynamic_backend": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 664, 695, 714], "containerbas": [25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 697], "static": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 79, 319, 332, 337, 375, 382, 470, 503, 554, 659, 664, 710, 714, 725, 731, 732, 733], "_static_gelu": 25, "exact": [25, 26, 55, 299, 301, 334, 339, 353, 519, 621, 623, 649, 690, 691, 693, 701, 717], "formul": [25, 55], "chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 117, 121, 122, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 322, 323, 324, 360, 375, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 514, 515, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 587, 588, 592, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 660, 667, 694, 697, 708, 710, 721, 722, 725, 732], "skip": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 322, 323, 324, 356, 357, 358, 360, 375, 376, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 515, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 603, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 648, 674, 696, 706, 712], "prune": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 84, 86, 91, 93, 98, 102, 104, 117, 121, 122, 129, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 265, 266, 267, 269, 271, 277, 278, 284, 286, 287, 288, 289, 322, 323, 324, 356, 357, 358, 360, 375, 376, 377, 381, 383, 384, 385, 386, 388, 401, 402, 403, 404, 411, 414, 415, 417, 418, 422, 423, 424, 426, 429, 430, 433, 435, 437, 438, 439, 441, 442, 445, 453, 454, 467, 468, 470, 472, 474, 475, 487, 493, 498, 515, 524, 525, 526, 527, 533, 534, 537, 538, 539, 544, 545, 546, 547, 549, 550, 552, 554, 556, 557, 563, 568, 569, 570, 571, 575, 578, 579, 580, 581, 582, 585, 586, 603, 604, 605, 606, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 638, 639, 640, 645, 648, 698], "static_gelu": 25, "185": 25, "046": 25, "_static_hardswish": 25, "_static_leaky_relu": 25, "static_leaky_relu": 25, "38999999": [25, 32, 57, 244, 291], "_static_log_softmax": 25, "static_log_softmax": 25, "371": [25, 58], "_static_mish": 25, "static_mish": 25, "30883577": [25, 59, 500], "28903052": [25, 59, 500], "10714479": [25, 59, 500], "_static_relu": 25, "static_relu": 25, "_static_sigmoid": 25, "static_sigmoid": 25, "2689414": [25, 61, 62, 500], "7310586": [25, 61, 62, 500], "88079703": [25, 61, 500], "62245935": [25, 61], "4750208": [25, 61], "_static_softmax": 25, "static_softmax": 25, "72844321": [25, 62], "19852395": [25, 62], "07303288": [25, 62], "_static_softplu": 25, "revert": [25, 63, 500], "static_softplu": 25, "53499615": 25, "42036411": 25, "948": [25, 63], "166": [25, 55, 500], "159": [25, 55, 500, 510, 534], "__getitem__": [26, 697], "slice": [26, 33, 96, 261, 293, 302, 374, 376, 429, 430, 432, 457, 503, 508, 515, 599, 732], "dictionari": [26, 43, 49, 161, 491, 505, 509, 624, 644, 694, 698, 699, 706, 710, 720, 725], "multiprocess": [26, 49, 508, 720, 725], "asynchron": [26, 49, 732], "wait": [26, 49, 462, 508, 680, 689, 691, 698, 710], "arriv": [26, 49, 462, 508, 715], "cont_list_join": [26, 49], "timeout": [26, 49, 462, 483, 508, 714], "limit": [26, 49, 114, 117, 417, 418, 504, 508, 513, 571, 647, 649, 650, 661, 668, 680, 690, 691, 696, 698, 701, 703, 710, 712, 715, 720, 725, 731, 732, 733], "whitespac": [26, 49], "indent": [26, 49, 720], "newlin": [26, 49, 702], "color": [26, 49, 679], "termin": [26, 49, 690, 691, 697, 704, 717, 720], "termcolor": [26, 49], "rebuild": [26, 49, 686], "constructor": [26, 49, 413, 508, 644, 659, 667, 699, 700, 719], "kept": [26, 49, 514, 587, 588, 691, 709, 713], "structur": [26, 29, 49, 114, 117, 419, 508, 515, 603, 660, 680, 689, 691, 694, 697, 706, 711, 712, 713, 720, 721, 731, 732], "alphabet": [26, 49], "__setitem__": [26, 694, 697, 719], "_cont_at_key_chains_input_as_dict": 26, "current_chain": 26, "ignore_key_error": 26, "_cont_at_key_chains_input_as_seq": 26, "_cont_call_static_method_with_flexible_arg": 26, "static_method": 26, "kw": 26, "self_idx": 26, "_cont_concat_unifi": 26, "_cont_get_dev": 26, "_cont_get_shap": 26, "properti": [26, 48, 51, 664, 666, 693, 697, 706, 711, 712, 719, 720, 721, 738], "_cont_ivi": 26, "_cont_mean_unifi": 26, "_1": 26, "_cont_prune_key_chains_input_as_dict": 26, "return_cont": 26, "_cont_prune_key_chains_input_as_seq": 26, "_cont_slice_kei": 26, "key_slic": 26, "_cont_sum_unifi": 26, "_get_queue_item": 26, "cont_all_fals": 26, "assert_is_bool": 26, "assert": [26, 415, 508, 654, 692, 693, 706, 709, 710, 711, 712, 713, 719, 720], "cont_all_key_chain": 26, "include_empti": 26, "cont_all_tru": [26, 697, 720], "cont_as_bool": 26, "cont_assert_contains_sub_contain": 26, "sub_cont": 26, "screen": [26, 689, 690, 720], "cont_assert_contains_sub_structur": 26, "check_shap": [26, 668], "cont_assert_ident": 26, "check_typ": 26, "same_arrai": [26, 720], "arrays_equ": 26, "cont_assert_identical_structur": 26, "build_cal": 26, "assert_and_assign": 26, "further": [26, 649, 683, 684, 691, 693, 694, 698, 701, 703, 705, 706, 709, 710, 712, 716, 717, 720, 721, 737, 738], "being": [26, 47, 48, 51, 71, 302, 373, 462, 503, 508, 511, 545, 644, 650, 660, 661, 680, 683, 684, 690, 691, 693, 694, 695, 697, 699, 700, 701, 705, 707, 709, 710, 711, 712, 713, 715, 717, 720, 724, 725, 728, 730, 731, 732, 733, 738, 739], "strucutr": 26, "congruent": 26, "cont_at_key_chain": 26, "ignore_non": 26, "cont_at_kei": 26, "substr": 26, "try": [26, 476, 508, 661, 671, 680, 681, 683, 684, 689, 690, 691, 693, 694, 697, 698, 699, 703, 704, 709, 711, 717, 719, 725], "cont_combin": 26, "prioriti": [26, 671, 691, 709], "most": [26, 28, 91, 300, 347, 461, 482, 503, 508, 511, 543, 544, 677, 680, 683, 688, 689, 690, 694, 697, 698, 699, 700, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 725, 732, 733, 735, 736, 738, 739], "duplic": [26, 515, 592, 695, 702, 707, 708, 711, 721, 738], "configur": [26, 161, 505, 515, 603, 686, 690, 691, 696, 698, 699, 704], "container_rightmost": 26, "cont_common_key_chain": 26, "cont_config": 26, "cont_contains_sub_contain": 26, "cont_contains_sub_structur": 26, "cont_copi": [26, 720], "cont_create_if_abs": 26, "noth": [26, 715, 738], "cont_cutoff_at_depth": 26, "depth_cutoff": 26, "summari": [26, 118, 419, 434, 504, 508, 690, 691, 712], "cont_cutoff_at_height": 26, "height_cutoff": 26, "deep": [26, 422, 508, 680, 682, 685, 687, 688, 689, 691, 693, 696, 697, 699, 704, 708, 711, 716, 719, 720, 730, 732, 735, 736, 738, 739], "intern": [26, 50, 51, 52, 515, 590, 600, 601, 661, 662, 663, 664, 665, 667, 694, 697, 700, 702, 709, 711, 712, 714], "cont_dev": 26, "belong": [26, 689, 693, 721], "cont_dev_str": 26, "cont_diff": [26, 720], "diff_kei": 26, "detect_key_diff": 26, "detect_value_diff": 26, "detect_shape_diff": 26, "share": [26, 135, 504, 647, 648, 680, 683, 695, 697, 701, 706, 708, 710, 711, 712, 715, 717, 730, 731, 738], "among": [26, 684, 698, 712, 715, 732], "container0": 26, "cont_duplicate_array_keychain": 26, "cont_find_sub_contain": 26, "sub_cont_to_find": 26, "exsit": 26, "cont_find_sub_structur": 26, "sub_struc_to_find": 26, "cont_flatten_key_chain": [26, 720], "__": [26, 701, 720], "above_height": [26, 720], "below_depth": [26, 720], "cont_format_key_chain": 26, "format_fn": 26, "cont_from_disk_as_hdf5": [26, 720], "h5_obj_or_filepath": 26, "slice_obj": 26, "load": [26, 664, 680, 712, 725, 731, 738], "disk": [26, 664, 720, 731], "h5py": 26, "hdf5": [26, 664, 720], "filepath": [26, 522, 641, 691, 693], "h5": 26, "cont_from_disk_as_json": [26, 720], "json_filepath": 26, "json": [26, 686, 690, 720], "cont_from_disk_as_pickl": [26, 720], "pickle_filepath": 26, "pickl": [26, 664, 697, 720], "cont_from_flat_list": 26, "flat_list": 26, "hierarchi": [26, 689, 720, 728, 738], "cont_handle_inplac": 26, "prime": [26, 699], "overwritten": [26, 694, 695], "cont_has_kei": 26, "query_kei": 26, "somewher": [26, 698], "cont_has_key_chain": 26, "cont_ident": [26, 720], "cont_identical_array_shap": 26, "regardless": [26, 684, 685, 699, 703, 719, 722], "cont_identical_config": 26, "cont_identical_structur": 26, "cont_if_exist": 26, "cont_inplace_upd": 26, "cont_ivi": 26, "cont_key_chains_contain": 26, "sub_str": 26, "cont_list_stack": [26, 720], "cont_load": 26, "cont_map": [26, 697, 720], "func": [26, 162, 290, 298, 416, 488, 491, 492, 494, 499, 505, 508, 509, 515, 603, 644, 689, 693, 694, 701, 703, 708, 709], "cont_map_sub_cont": 26, "include_self": 26, "possibi": 26, "cont_max_depth": 26, "cont_multi_map": 26, "map_nest": 26, "assert_ident": 26, "leftmost": [26, 515, 603], "cont_multi_map_in_funct": 26, "cont_num_arrai": 26, "cont_overwrite_at_key_chain": 26, "target_dict": 26, "return_dict": 26, "cont_prune_empti": 26, "keep_non": 26, "cont_prune_key_chain": 26, "key1": [26, 680, 721], "key2": [26, 680], "key3": 26, "cont_prune_key_from_key_chain": 26, "cont_prune_kei": 26, "cont_prune_keys_from_key_chain": 26, "cont_reduc": 26, "cont_remove_key_length_limit": 26, "cont_remove_print_limit": 26, "cont_reshape_lik": 26, "leading_shap": 26, "cont_restructur": 26, "keep_orig": 26, "old": [26, 690, 695, 709], "cont_restructure_key_chain": 26, "keychain_map": 26, "cont_sav": 26, "cont_set_at_key_chain": 26, "cont_set_at_kei": 26, "cont_shap": [26, 510, 528], "attribut": [26, 114, 115, 116, 117, 148, 149, 157, 427, 428, 504, 505, 508, 645, 695, 696, 697, 699, 702, 703, 706, 707, 709, 710, 715, 718, 719, 720, 721], "cont_show": 26, "cont_show_sub_contain": 26, "sub_cont_or_keychain": 26, "cont_size_ordered_arrai": 26, "keychain": [26, 32, 266, 356, 357, 358, 376], "cont_slice_kei": 26, "all_depth": 26, "cont_slice_via_kei": 26, "slice_kei": 26, "cont_sort_by_kei": 26, "cont_structural_diff": 26, "cont_to_dict": 26, "cont_to_disk_as_hdf5": [26, 720], "starting_index": 26, "max_batch_s": 26, "later": [26, 416, 508, 689, 704, 709, 712, 713, 732], "cont_to_disk_as_json": [26, 720], "cont_to_disk_as_pickl": [26, 720], "cont_to_flat_list": 26, "cont_to_iter": [26, 697], "leaf_keys_onli": 26, "cont_to_iterator_kei": 26, "cont_to_iterator_valu": 26, "cont_to_json": 26, "cont_to_nested_list": 26, "cont_to_raw": 26, "cont_trim_kei": 26, "max_length": 26, "trim": 26, "cont_try_kc": 26, "cont_unifi": 26, "unifi": [26, 162, 505, 681, 683, 692, 693, 694, 699, 703, 707, 708, 710, 715, 717, 725, 728, 729, 730, 732, 736, 739], "concatten": [26, 162, 505], "cont_unstack_cont": 26, "dim_siz": 26, "cont_update_config": 26, "cont_with_default_key_color": 26, "cont_with_entries_as_list": 26, "cont_with_ivy_backend": 26, "ivy_backend": [26, 711], "cont_with_key_length_limit": [26, 720], "cont_with_print_ind": [26, 720], "cont_with_print_limit": [26, 720], "cont_with_print_line_spac": 26, "h5_file_s": 26, "shuffle_h5_fil": 26, "seed_valu": [26, 517, 614], "split_cont": 26, "constitu": [26, 722], "_is_json": 26, "_repr": 26, "_containerwithconvers": [27, 49], "_static_to_ivi": 27, "_static_to_n": 27, "_containerwithcr": [28, 49], "_static_arang": 28, "_static_asarrai": 28, "_static_copy_arrai": 28, "_static_empti": 28, "_static_empty_lik": 28, "_static_ey": 28, "n_row": [28, 32, 82, 96, 261, 293, 503], "n_col": [28, 32, 82, 96, 261, 293, 503], "_static_from_dlpack": 28, "_static_ful": 28, "_static_full_lik": 28, "static_full_lik": 28, "2324": [28, 86, 503], "234": [28, 31, 86, 108, 191, 242, 503, 504, 506, 510, 534, 647], "123": [28, 29, 86, 117, 425, 503, 508, 712], "_static_linspac": 28, "_static_logspac": 28, "static_logspac": 28, "15443469": [28, 88], "64158883": [28, 88], "_static_meshgrid": 28, "_static_native_arrai": 28, "_static_one_hot": 28, "static_one_hot": 28, "_static_on": 28, "_static_ones_lik": 28, "_static_tril": 28, "_static_triu": 28, "_static_zero": 28, "_static_zeros_lik": 28, "frombuff": [28, 503], "expos": [28, 84, 419, 503, 508, 680, 682, 698, 717, 721], "interfac": [28, 84, 503, 683, 719, 722, 725, 727, 728, 729, 730, 731, 732, 736, 739], "x00": [28, 84, 503], "xf0": [28, 84, 503], "x01": [28, 84, 503], "x02": [28, 84, 503], "x03": [28, 84, 503], "x04": [28, 84, 503], "x05": [28, 84], "5443469": [28, 88, 503], "static_frombuff": 28, "static_triu_indic": 28, "triu_indic": [28, 503], "_containerwithdatatyp": [29, 49], "_static_astyp": 29, "718": [29, 31, 101, 218, 504], "618": [29, 31, 101, 218, 504], "static_astyp": 29, "_static_broadcast_arrai": 29, "static_broadcast_arrai": 29, "_static_broadcast_to": 29, "static_broadcast_to": 29, "_static_can_cast": 29, "from_": [29, 104, 504], "static_can_cast": 29, "_static_default_complex_dtyp": 29, "complex_dtyp": [29, 107, 130, 504], "_static_default_float_dtyp": 29, "float_dtyp": [29, 109, 132, 504], "_static_dtyp": 29, "_static_finfo": 29, "inquir": [29, 114, 117], "static_finfo": 29, "55040e": [29, 114, 504], "7976931348623157e": [29, 114, 504], "308": [29, 114, 504, 647, 712], "_static_function_supported_dtyp": 29, "_static_function_unsupported_dtyp": 29, "_static_iinfo": 29, "1800": [29, 117, 504], "1084": 29, "40000": 29, "static_iinfo": 29, "2147483648": [29, 117, 504], "2147483647": [29, 117, 504], "_static_is_bool_dtyp": 29, "dtype_in": [29, 99, 100, 113, 119, 120, 121, 122, 123, 124, 125, 126, 141, 504], "_static_is_complex_dtyp": 29, "is_complex_dtyp": [29, 504, 713], "roughli": [29, 690, 693, 735], "static_is_complex_dtyp": 29, "complex64": [29, 107, 121, 130, 136, 202, 229, 250, 291, 504, 506, 511, 557, 559, 560, 648, 699], "_static_is_float_dtyp": 29, "static_is_float_dtyp": 29, "_static_is_int_dtyp": 29, "_static_is_uint_dtyp": 29, "_static_result_typ": 29, "static_result_typ": 29, "broadcats": [29, 102], "_containerwithdevic": [30, 49], "_static_dev": 30, "static_dev": 30, "_static_to_devic": 30, "static_to_devic": 30, "contaion": [30, 146], "_containerwithelementwis": [31, 49], "_static_ab": 31, "static_ab": 31, "_static_aco": 31, "static_aco": 31, "_static_acosh": 31, "static_acosh": 31, "_static_add": 31, "static_add": [31, 52], "_static_asin": 31, "static_asin": 31, "524": [31, 174, 506], "412": [31, 36, 174, 506], "201": [31, 32, 174, 320, 506], "_static_asinh": 31, "static_asinh": 31, "_static_atan": 31, "static_atan": 31, "_static_atan2": 31, "static_atan2": 31, "915": [31, 177, 506], "983": [31, 177, 506], "978": [31, 177, 506], "696": [31, 41, 177, 506, 612], "993": [31, 177, 506], "_static_atanh": 31, "static_atanh": 31, "_static_bitwise_and": 31, "static_bitwise_and": 31, "_static_bitwise_invert": 31, "static_bitwise_invert": 31, "_static_bitwise_left_shift": 31, "_static_bitwise_or": 31, "static_bitwise_or": 31, "_static_bitwise_right_shift": 31, "static_bitwise_right_shift": 31, "_static_bitwise_xor": 31, "static_bitwise_xor": 31, "_static_ceil": 31, "static_ceil": 31, "_static_co": 31, "static_co": 31, "_static_cosh": 31, "static_cosh": 31, "34": [31, 32, 33, 41, 117, 184, 187, 214, 235, 299, 311, 341, 408, 422, 423, 504, 506, 508, 510, 511, 517, 534, 551, 612, 613, 700], "_static_deg2rad": 31, "static_deg2rad": 31, "0262": [31, 188, 228, 506], "873": [31, 188, 228, 506], "_static_divid": 31, "static_divid": 31, "_static_equ": 31, "static_equ": 31, "_static_erf": 31, "static_erf": 31, "27632612": [31, 191], "934008": [31, 191], "99999928": [31, 191], "91903949": [31, 191], "_static_exp": 31, "static_exp": 31, "59814835": [31, 192, 506], "4131622": [31, 192], "_static_expm1": 31, "thefunct": [31, 191], "areal": 31, "static_expm1": 31, "71828175": [31, 192, 506], "38905621": [31, 192, 506], "59815216": 31, "_static_floor": 31, "static_floor": 31, "_static_floor_divid": 31, "static_floor_divid": 31, "_static_great": 31, "static_great": 31, "_static_greater_equ": 31, "static_greater_equ": 31, "_static_isfinit": 31, "999999999999": [31, 203, 506], "static_isfinit": 31, "_static_isinf": 31, "static_isinf": 31, "_static_isnan": 31, "static_isnan": 31, "_static_isr": 31, "0j": [31, 32, 92, 93, 170, 171, 172, 175, 178, 187, 192, 194, 206, 210, 212, 229, 233, 235, 236, 240, 267, 296, 503, 506, 511, 557], "23j": [31, 32], "9j": [31, 32], "static_isr": 31, "_static_lcm": 31, "1080": [31, 207], "1550": [31, 207], "130": [31, 207], "_static_less": 31, "static_less": 31, "_static_less_equ": 31, "static_less_equ": 31, "_static_log": 31, "static_log": 31, "_static_log10": 31, "static_log10": 31, "898": [31, 211, 506], "0414": [31, 211, 506], "_static_log1p": 31, "static_log1p": 31, "_static_log2": 31, "_static_logaddexp": 31, "static_logaddexp": 31, "_static_logical_and": 31, "static_logical_and": 31, "_static_logical_not": 31, "static_logical_not": 31, "_static_logical_or": 31, "static_logical_or": 31, "_static_logical_xor": 31, "static_logical_xor": 31, "_static_maximum": 31, "static_maximum": 31, "_static_minimum": 31, "static_minimum": 31, "_static_multipli": 31, "static_multipli": 31, "_static_neg": 31, "static_neg": 31, "_static_not_equ": 31, "static_not_equ": 31, "_static_posit": 31, "static_posit": 31, "_static_pow": 31, "static_pow": 31, "_static_rad2deg": 31, "static_rad2deg": 31, "5160": 31, "10300": [31, 228, 506], "15500": 31, "20600": 31, "2860": [31, 228], "_static_reciproc": 31, "recirpoc": [31, 230], "static_reciproc": 31, "_static_remaind": 31, "static_remaind": 31, "_static_round": 31, "thevfunct": 31, "300": [31, 33, 36, 232, 299, 322, 323, 430, 454, 506, 508, 511, 547, 712], "527": [31, 232, 506], "static_round": 31, "301": [31, 232, 506], "_static_sign": 31, "static_sign": 31, "_static_sin": 31, "static_sin": 31, "757": [31, 234, 506], "959": [31, 194, 234, 506], "279": [31, 234, 299, 320, 330, 417, 506, 508], "_static_sinh": 31, "static_sinh": 31, "835": [31, 235], "347": [31, 235], "721": [31, 235], "_static_sqrt": 31, "93": [31, 33, 41, 147, 236, 422, 423, 505, 508, 612, 613], "static_sqrt": 31, "_static_squar": 31, "static_squar": 31, "_static_subtract": 31, "static_subtract": 31, "_static_tan": 31, "static_tan": 31, "_static_tanh": 31, "static_tanh": 31, "995": [31, 240, 506], "9999": 31, "_static_trapz": 31, "static_trapz": 31, "_static_trunc": 31, "static_trunc": 31, "_static_trunc_divid": 31, "75j": [31, 173, 202], "01317055": [31, 173], "05634501": [31, 173], "115": [31, 173, 228, 506], "3461759": [31, 173], "524111": [31, 173], "644": [31, 174, 506, 721], "305": [31, 36, 174, 506], "351": [31, 188, 228], "00613": [31, 188], "0154": [31, 188], "403": [31, 192], "428772": [31, 192], "649": [31, 194], "220": [31, 194], "865": [31, 194], "metho": [31, 201, 213], "7j": [31, 32, 206, 229, 267, 296, 506], "956": [31, 212], "08746284": [31, 215], "32192809": [31, 215], "nuner": [31, 222], "65": [31, 34, 41, 183, 222, 437, 489, 506, 508, 509, 511, 521, 554, 612, 613, 631, 698], "000": [31, 223, 647, 698], "413": [31, 228], "took": [31, 229], "335": [31, 32, 229, 267], "345j": [31, 32, 229, 267], "static_angl": 31, "static_exp2": 31, "static_fmin": 31, "static_gcd": 31, "static_imag": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_r": 31, "_containerwithactivationexperiment": [32, 49], "_static_elu": 32, "static_elu": 32, "_static_silu": 32, "static_silu": 32, "27777028": [32, 251], "23947507": [32, 251], "0900332": [32, 251], "contan": [32, 245], "19722462": [32, 245], "84729779": [32, 245], "31326163": [32, 246], "46328258": [32, 246], "51301527": [32, 246], "79813886": [32, 246], "22856998": [32, 249], "42028043": [32, 249], "31868932": [32, 249], "static_logit": 32, "static_logsigmoid": 32, "34115386": 32, "64439666": 32, "24115384": 32, "55435526": 32, "07888974": 32, "00741899": 32, "26328245": 32, "00012302": 32, "static_prelu": 32, "static_relu6": 32, "static_selu": 32, "static_thresholded_relu": 32, "_containerwithconversionexperiment": [32, 49], "_containerwithcreationexperiment": [32, 49], "hamming_window": [32, 293], "period": [32, 235, 239, 254, 255, 257, 258, 293, 299, 333, 506, 691], "coeffici": [32, 254, 293, 511, 558], "ham": [32, 254, 293], "8000": [32, 254, 293], "2000": [32, 254, 293, 680], "4180": [32, 254], "8180": [32, 254], "hann_window": [32, 293], "hann": [32, 255, 293], "7500": [32, 255], "3455": [32, 255], "9045": [32, 255], "kaiser_bessel_derived_window": [32, 293], "suitabl": [32, 257, 258, 293, 520, 627, 649, 690, 691, 697, 713, 732], "spectral": [32, 257, 258, 293], "analysi": [32, 257, 258, 293, 732, 733], "design": [32, 196, 257, 258, 293, 506, 680, 682, 683, 692, 696, 698, 699, 709, 710, 711, 715, 717, 719, 725, 728, 730, 732, 735, 736, 737], "kaiser": [32, 257, 258, 293], "70710677": [32, 257, 385, 386], "18493208": [32, 257, 293], "9827513": [32, 257, 293], "kaiser_window": [32, 293], "static_kaiser_window": [32, 258], "2049": [32, 258], "8712": [32, 258], "0367": [32, 258, 293], "7753": [32, 258], "static_eye_lik": 32, "static_hamming_window": 32, "static_hann_window": 32, "window_length": [32, 254, 257, 258, 264, 293], "static_hann": 32, "static_kaiser_bessel_derived_window": 32, "static_tril_indic": 32, "static_unsorted_segment_min": 32, "static_unsorted_segment_sum": 32, "static_vorbis_window": 32, "vorbis_window": [32, 293], "vorbi": [32, 264, 293], "38268343": [32, 264], "92387953": [32, 264], "14943586": [32, 264, 293], "51644717": [32, 264], "85631905": [32, 264], "98877142": [32, 264], "tril_indic": [32, 293], "_containerwithdata_typeexperiment": [32, 49], "_containerwithdeviceexperiment": [32, 49], "_containerwithelementwiseexperiment": [32, 49], "0003": [32, 265, 511, 547, 647, 650], "0006": [32, 265, 288], "2345j": [32, 267], "5772": [32, 271], "9635": [32, 271], "4228": [32, 271], "9228": [32, 271], "mantissa": [32, 275, 296], "frist": [32, 276, 296], "coord": [32, 276], "6055": [32, 277], "160": [32, 279], "10240": [32, 279], "60000038": [32, 280, 296], "0707": [32, 286, 296], "0579": [32, 286, 296], "static_allclos": 32, "static_binar": 32, "static_conj": 32, "static_copysign": 32, "static_count_nonzero": 32, "static_diff": 32, "static_digamma": 32, "57721537": 32, "96351004": 32, "static_fix": 32, "static_float_pow": 32, "static_fmax": 32, "static_fmod": 32, "static_frexp": 32, "static_gradi": 32, "static_hypot": 32, "static_isclos": 32, "static_ldexp": 32, "static_lerp": 32, "90000057": [32, 280, 296], "80000019": [32, 280, 296], "70000076": [32, 280, 296], "55000019": [32, 280, 296], "05000019": [32, 280, 296], "static_modf": 32, "static_nansum": 32, "static_nextaft": 32, "static_signbit": 32, "static_sinc": 32, "636": 32, "090": 32, "070": 32, "057": 32, "static_xlogi": 32, "static_zeta": 32, "0244": [32, 288], "_containerwithgeneralexperiment": [32, 49], "_static_reduc": 32, "static_reduc": 32, "_containerwithgradientsexperiment": [32, 49], "_containerwithimageexperiment": [32, 49], "_containerwithlayersexperiment": [32, 49], "_static_fft": 32, "static_fft": 32, "673": [32, 320], "0507": [32, 320], "79711437": [32, 299, 320, 330], "94867325": [32, 299, 320, 330], "74089146": [32, 299, 320, 330], "25980937": [32, 299, 320, 330], "64958102": [32, 299, 320, 330], "2442648": [32, 299, 320, 330], "247306": [32, 332], "908323j": [32, 332], "494955": [32, 332], "90395j": [32, 332], "static_adaptive_avg_pool1d": 32, "static_adaptive_avg_pool2d": 32, "static_adaptive_max_pool2d": 32, "static_avg_pool1d": 32, "static_avg_pool2d": 32, "static_avg_pool3d": 32, "static_dct": 32, "132": 32, "182": 32, "242": 32, "253": [32, 235, 506], "515": [32, 517, 612], "467": 32, "static_dft": 32, "static_embed": 32, "static_idct": 32, "93732834": [32, 299, 320], "75048852": [32, 299, 320], "29723358": [32, 299, 330], "6950531": 32, "93914509": 32, "88008738": 32, "18951225": 32, "06697273": [32, 299, 330], "57439804": 32, "68861485": [32, 299, 330], "41308832": [32, 299, 330], "0700836": 32, "2449036": 32, "285": 32, "6711426": 32, "514": 32, "501709": 32, "4924011": 32, "static_ifft": 32, "static_ifftn": 32, "static_interpol": 32, "static_max_pool1d": 32, "static_max_pool2d": 32, "max_pool2dd": 32, "static_max_pool3d": 32, "static_rfftn": 32, "_containerwithlinearalgebraexperiment": [32, 49], "933034": [32, 300, 344], "eigenvealu": [32, 347, 543], "xx": [32, 347, 349, 543], "37228107": [32, 347, 543], "3722816": [32, 347, 543], "8245648": [32, 347, 543], "41597357": [32, 347, 543], "56576747": [32, 347, 543], "9093767": [32, 347, 543], "56155": [32, 348], "82842": [32, 348], "450": [32, 350], "static_adjoint": 32, "static_cond": 32, "static_diagflat": 32, "static_eig": 32, "static_eigh_tridiagon": 32, "static_eigv": 32, "static_kron": 32, "kroneck": [32, 300, 350], "static_matrix_exp": 32, "static_multi_dot": 32, "regular": [32, 300, 311, 352, 405, 511, 548, 690, 710, 732], "_containerwithmanipulationexperiment": [32, 49], "_static_fill_diagon": 32, "_static_unique_consecut": 32, "atleast": [32, 302, 356, 357, 358, 700], "ary1": [32, 302, 356, 357, 358], "ary2": [32, 302, 356, 357, 358], "broadcast_shap": [32, 51, 302, 647], "static_concat_from_sequ": [32, 360], "30192195": [32, 371], "static_as_strid": 32, "static_atleast_1d": 32, "static_atleast_2d": 32, "static_atleast_3d": 32, "static_broadcast_shap": 32, "static_dsplit": 32, "static_dstack": 32, "static_expand": 32, "static_flatten": 32, "static_fliplr": 32, "static_flipud": 32, "static_heavisid": 32, "static_hsplit": 32, "static_hstack": 32, "static_i0": 32, "static_moveaxi": 32, "static_pad": 32, "static_rot90": 32, "static_take_along_axi": 32, "static_top_k": 32, "static_vsplit": 32, "static_vstack": 32, "_containerwithnormsexperiment": [32, 49], "16903085": [32, 385, 386], "50709254": [32, 385, 386], "84515423": [32, 385, 386], "44183609": [32, 385, 386], "56807494": [32, 385, 386], "69431382": [32, 385, 386], "static_batch_norm": 32, "static_group_norm": 32, "static_instance_norm": 32, "static_l1_norm": 32, "static_l2_norm": 32, "static_lp_norm": 32, "12500000": 32, "37500000": 32, "62500000": 32, "27500000": 32, "35000000": 32, "42500000": 32, "0000000": 32, "5000000": 32, "2500000": 32, "_containerwithrandomexperiment": [32, 49], "43643127": [32, 389], "32325703": [32, 389], "24031169": [32, 389], "34251311": [32, 389], "31692529": [32, 389], "3405616": [32, 389], "5319725": [32, 389], "22458365": [32, 389], "24344385": [32, 389], "26588406": [32, 389], "61075421": [32, 389], "12336174": [32, 389], "51142915": [32, 389], "25041268": [32, 389], "23815817": [32, 389], "64042903": [32, 389], "25763214": [32, 389], "10193883": [32, 389], "31624692": [32, 389], "46567987": [32, 389], "21807321": [32, 389], "37677699": [32, 389], "39914594": [32, 389], "22407707": [32, 389], "static_bernoulli": 32, "static_beta": 32, "static_dirichlet": 32, "static_gamma": 32, "static_poisson": 32, "_containerwithsearchingexperiment": [32, 49], "static_unravel_index": 32, "_containerwithsetexperiment": [32, 49], "_containerwithsortingexperiment": [32, 49], "invert_permut": [32, 309], "static_invert_permut": 32, "static_lexsort": [32, 44], "_containerwithstatisticalexperiment": [32, 49], "_static_cummax": 32, "static_cummax": 32, "_static_cummin": 32, "todo": [32, 403, 689, 699, 710], "static_cummin": 32, "func_nam": [32, 404, 689, 701, 702, 706, 710], "static_bincount": 32, "static_corrcoef": 32, "static_cov": [32, 311, 401], "static_histogram": 32, "static_igamma": 32, "static_median": 32, "static_nanmean": 32, "static_nanmedian": 32, "static_quantil": 32, "_containerwithutilityexperiment": [32, 49], "_containerwithgener": [33, 49], "_static_all_equ": 33, "static_all_equ": 33, "_static_array_equ": 33, "x0": [33, 414, 508, 701], "level": [33, 414, 660, 680, 684, 685, 689, 691, 697, 699, 703, 706, 708, 709, 710, 714, 715, 716, 717, 720, 721, 722, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739], "a0": [33, 414], "static_array_equ": 33, "_static_assert_supports_inplac": 33, "_static_clip_matrix_norm": 33, "static_clip_matrix_norm": 33, "849": [33, 417, 418, 508], "_static_clip_vector_norm": 33, "static_clip_vector_norm": 33, "_static_einops_rearrang": 33, "static_einops_rearrang": 33, "_static_einops_reduc": 33, "static_einops_reduc": 33, "29333329": [33, 423, 508], "53000069": [33, 423, 508], "39666676": [33, 423, 508], "20666695": [33, 423, 508], "_static_einops_repeat": 33, "static_einops_repeat": 33, "_static_fourier_encod": 33, "static_fourier_encod": 33, "classivi": [33, 513, 519, 580, 622], "89858720e": 33, "79717439e": 33, "_static_gath": 33, "static_gath": 33, "_static_gather_nd": 33, "200": [33, 36, 183, 299, 322, 323, 430, 454, 506, 508, 674, 720], "400": [33, 36, 299, 322, 323, 430, 454, 508, 511, 547], "500": [33, 36, 299, 322, 323, 430, 508], "static_gather_nd": 33, "_static_get_num_dim": 33, "static_get_num_dim": 33, "_static_has_nan": 33, "leafwis": 33, "static_has_nan": 33, "_static_inplace_decr": 33, "_static_inplace_incr": 33, "_static_inplace_upd": 33, "_static_is_arrai": 33, "static_is_arrai": 33, "_static_is_ivy_arrai": 33, "static_is_ivy_arrai": 33, "_static_is_native_arrai": 33, "static_is_native_arrai": 33, "_static_scatter_flat": 33, "ref": [33, 37, 208, 222, 225, 231, 238, 506, 513, 582, 690, 709], "_static_scatter_nd": 33, "static_scatter_nd": 33, "_static_stable_divid": 33, "22222222": 33, "11111111": 33, "857": [33, 467, 508], "444": 33, "_static_stable_pow": 33, "_static_supports_inplace_upd": 33, "_static_to_list": 33, "static_to_list": 33, "_static_to_numpi": 33, "static_to_numpi": 33, "_static_to_scalar": 33, "static_to_scalar": 33, "_static_value_is_nan": 33, "452": 33, "static_value_is_nan": 33, "833": [33, 418], "600": [33, 36, 299, 322, 323, 430, 698], "700": [33, 430], "items": [33, 48, 508], "static_isin": 33, "static_items": 33, "complex128": [33, 107, 108, 121, 130, 136, 250, 291, 448, 504, 508, 511, 544, 545, 550, 566, 647, 648, 699], "static_strid": 33, "425": [33, 487], "_containerwithgradi": [34, 49], "_static_stop_gradi": 34, "static_stop_gradi": 34, "87": [34, 36, 183, 212, 311, 341, 402, 489, 506, 509, 647], "976": [34, 240, 489, 506, 509], "49e": [34, 489, 509], "74e": [34, 489, 509], "95e": [34, 489, 509], "024": [34, 489, 509], "096": [34, 489, 509], "216": [34, 37, 489, 509, 564], "384": [34, 489, 509], "626": [34, 489, 509], "en": [34, 489, 490, 509, 698], "wikipedia": [34, 489, 490, 509], "wiki": [34, 489, 490, 509], "stochastic_gradient_desc": [34, 489, 490, 509], "01099": [34, 490], "01003": [34, 490, 509], "01015": [34, 490, 509], "99936122": [34, 490, 509], "99936116": [34, 490, 509], "99936128": [34, 490, 509], "99936104": [34, 490, 509], "w_new": [34, 493, 509], "88": [34, 41, 57, 184, 311, 402, 493, 500, 506, 509, 511, 517, 521, 554, 613, 631], "708": [34, 495, 509], "445": [34, 495, 509], "6e": [34, 495, 509], "00036": [34, 495, 509], "00016": [34, 495, 509], "00049": [34, 495, 509], "layerwis": [34, 496, 509], "_containerwithimag": [35, 49], "_containerwithlay": [36, 49], "_static_conv1d": 36, "static_conv1d": 36, "_static_conv1d_transpos": 36, "static_conv1d_transpos": 36, "112": [36, 511, 521, 525, 554, 631], "_static_conv2d": 36, "ey": [36, 503, 510, 526, 532, 715, 722], "static_conv2d": 36, "_static_conv2d_transpos": 36, "static_conv2d_transpos": 36, "_static_conv3d": 36, "fdfh": [36, 528], "static_conv3d": 36, "_static_conv3d_transpos": 36, "static_conv3d_transpos": 36, "_static_depthwise_conv2d": 36, "inp": [36, 510, 532], "static_depthwise_conv2d": 36, "_static_dropout": 36, "static_dropout": 36, "_static_dropout1d": 36, "static_dropout1d": 36, "_static_dropout2d": 36, "_static_dropout3d": 36, "_static_linear": 36, "278": [36, 510, 533, 534], "static_linear": 36, "352": [36, 510, 534, 703], "195": 36, "_static_lstm_upd": 36, "_static_multi_head_attent": 36, "_static_reduce_window": 36, "_static_scaled_dot_product_attent": 36, "static_scaled_dot_product_attent": 36, "39999962": [36, 510, 533, 534], "19999695": [36, 534], "11600018": [36, 534], "88399887": [36, 534], "196": [36, 510, 534], "306": [36, 510, 534], "91": [36, 41, 184, 341, 506, 510, 511, 517, 521, 534, 554, 612, 631], "19999981": [36, 510, 533, 537], "59249449": [36, 510, 537], "68226194": [36, 510, 537], "4000001": [36, 510, 533, 537], "19603825": [36, 510, 537], "9960382": [36, 510, 537], "26894283": [36, 510, 537], "40236187": [36, 510, 537], "39999437": [36, 510, 537], "59999037": [36, 510, 537], "35046196": [36, 510, 537], "54282808": [36, 510, 537], "39989519": [36, 510, 537], "5998764": [36, 510, 537], "_containerwithlinearalgebra": [37, 49], "_static_choleski": 37, "static_choleski": 37, "577": [37, 511, 538], "707": [37, 511, 538], "static_rol": [37, 39], "_static_cross": 37, "static_cross": 37, "_static_det": 37, "_static_diag": 37, "_static_diagon": 37, "static_diagon": 37, "_static_eigh": 37, "_static_eigvalsh": 37, "static_eigvalsh": 37, "51572949": [37, 511, 545], "17091519": [37, 511, 545], "3448143": [37, 511, 545], "88178420e": [37, 511, 545], "35898387e": [37, 511, 545], "46410179e": [37, 511, 545], "_static_inn": 37, "static_inn": 37, "_static_inv": 37, "static_inv": 37, "_static_matmul": 37, "matul": 37, "static_matmul": 37, "_static_matrix_norm": 37, "deimens": 37, "static_matrix_norm": 37, "_static_matrix_pow": 37, "_static_matrix_rank": 37, "static_matrix_rank": 37, "_static_matrix_transpos": 37, "static_matrix_transpos": 37, "_static_out": 37, "n1": [37, 89, 503], "n2": [37, 89, 503], "static_out": [37, 554], "_static_pinv": 37, "static_pinv": 37, "0426": 37, "0964": 37, "0605": 37, "1368": 37, "_static_qr": 37, "_static_slogdet": 37, "static_slogdet": 37, "6931472": 37, "0986123": 37, "_static_solv": 37, "_static_svd": 37, "static_svd": 37, "au": 37, "aS": 37, "avh": 37, "bu": [37, 683], "bvh": 37, "_static_svdv": 37, "_static_tensordot": 37, "_static_tensorsolv": 37, "_static_trac": 37, "static_trac": 37, "_static_vand": 37, "static_vand": 37, "343": [37, 232, 506, 564], "512": [37, 510, 525, 564, 680], "729": [37, 564, 721], "_static_vecdot": 37, "_static_vector_norm": 37, "static_vector_norm": 37, "77359247": [37, 566], "_static_vector_to_skew_symmetric_matrix": 37, "09861231": [37, 511, 557], "3475602": [37, 559], "93765765": [37, 559], "58776021": [37, 559], "10416126": [37, 559], "80644298": [37, 559], "87024701": [37, 559], "48127627": [37, 559], "79101127": [37, 559], "98288572": [37, 559], "68917423": [37, 559], "_containerwithloss": [38, 49], "_static_binary_cross_entropi": 38, "static_binary_cross_entropi": 38, "511": [38, 512, 568, 570], "_static_cross_entropi": 38, "static_cross_entropi": 38, "20397282": 38, "83258148": 38, "60943794": [38, 511, 557], "_static_sparse_cross_entropi": 38, "static_sparse_cross_entropi": 38, "5108256": [38, 569], "609438": [38, 569], "_containerwithmanipul": [39, 49], "_static_clip": 39, "static_clip": 39, "_static_concat": 39, "_static_constant_pad": 39, "static_constant_pad": 39, "_static_expand_dim": 39, "static_expand_dim": 39, "container_axi": [39, 513, 574], "_static_flip": 39, "static_flip": 39, "_static_permute_dim": 39, "static_permute_dim": 39, "_static_repeat": 39, "static_repeat": 39, "_static_reshap": 39, "static_reshap": 39, "_static_rol": 39, "positivclip": 39, "_static_split": 39, "static_split": 39, "_static_squeez": 39, "static_squeez": 39, "_static_stack": 39, "leavv": 39, "static_stack": 39, "_static_swapax": 39, "_static_til": 39, "static_til": 39, "_static_unstack": 39, "static_unstack": 39, "_static_zero_pad": 39, "repreat": [39, 577], "_containerwithnorm": [40, 49], "34198591": [40, 516, 609], "04274819": [40, 516, 609], "29923761": [40, 516, 609], "24053511": [40, 516, 609], "62221265": [40, 609], "20277636": [40, 609], "41943574": [40, 609], "83710337": [40, 609], "_containerwithrandom": [41, 49], "_static_multinomi": 41, "_static_randint": 41, "static_randint": 41, "_static_random_norm": 41, "static_random_norm": 41, "651": 41, "_static_random_uniform": 41, "static_random_uniform": 41, "481": 41, "0999": 41, "_static_shuffl": 41, "static_shuffl": 41, "431": [41, 612], "274": [41, 612], "_containerwithsearch": [42, 49], "_static_argmax": 42, "static_argmax": 42, "_static_argmin": 42, "static_argmin": 42, "_static_argwher": 42, "static_argwher": 42, "_static_nonzero": 42, "_static_wher": 42, "static_wher": 42, "_containerwithset": [43, 49], "_static_unique_al": 43, "static_unique_al": 43, "_static_unique_count": 43, "static_unique_count": 43, "_static_unique_invers": 43, "static_unique_invers": 43, "_static_unique_valu": 43, "_containerwithsort": [44, 49], "_static_argsort": 44, "static_argsort": 44, "_static_searchsort": 44, "_static_sort": 44, "static_sort": 44, "static_msort": 44, "_containerwithstatist": [45, 49], "_static_cumprod": 45, "static_cumprod": 45, "_static_cumsum": 45, "static_cumsum": 45, "_static_prod": 45, "static_prod": 45, "11000001": [45, 635], "23100001": [45, 635], "30800003": [45, 521, 635], "_static_sum": 45, "_static_var": 45, "static_var": 45, "12666667": [45, 521, 638], "11555555": [45, 521, 638], "respectv": [45, 636], "81649649": [45, 636], "94280904": [45, 636], "509902": [45, 521, 636], "2472192": [45, 636], "44948983": [45, 636], "41421354": [45, 636], "contian": [45, 638], "6666667": [45, 638], "_containerwithutil": [46, 49], "_static_al": 46, "static_al": 46, "_static_ani": 46, "static_ani": 46, "add_ivy_container_instance_method": 47, "containerexampl": 47, "__abs__": [48, 49], "__add__": [48, 49, 694, 697, 701, 702, 705, 710, 711, 719], "__eq__": [48, 49], "__ge__": [48, 49], "__gt__": [48, 49, 715], "__le__": [48, 49], "__lt__": [48, 49], "__ne__": [48, 49], "__pow__": [48, 49, 719], "69678056": 48, "59876156": 48, "82660675": 48, "__radd__": [48, 49, 701, 702, 710], "__rrshift__": [48, 49], "__rshift__": [48, 49], "__rsub__": [48, 49], "__sub__": [48, 49, 694, 697, 701, 705, 719], "__truediv__": [48, 49, 694, 697, 701], "__xor__": [48, 49], "referenc": [48, 703, 709], "hardwar": [48, 51, 683, 690, 715, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738], "resid": [48, 51, 513, 574, 710, 717, 721], "mt": [48, 719], "hopefulli": [48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724], "overview": [48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 696, 698, 712, 716, 724], "submodul": [48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 660, 661, 662, 664, 665, 666, 667, 689, 690, 691, 693, 696, 698, 700, 706, 707, 712, 716, 717, 721, 727], "question": [48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 658, 659, 661, 662, 664, 665, 666, 667, 680, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "reach": [48, 49, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 602, 658, 659, 661, 662, 664, 665, 666, 667, 682, 683, 684, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "eq": 49, "ge": 49, "gt": [49, 711, 717], "le": 49, "lt": 49, "ne": 49, "75979435": 49, "52153397": 49, "13532257": 49, "rshift": 49, "truediv": 49, "66666669": [49, 305, 386, 491, 509], "nested_arrai": [50, 51, 52, 696], "nestedarrai": 50, "nested_rank": [50, 51, 52], "inner_shap": [50, 51, 52], "nestedarraybas": [50, 51, 52], "classmethod": [50, 51], "from_row_length": 50, "row_length": 50, "from_row_split": 50, "row_split": 50, "ragged_map": 51, "ragged_multi_map": 51, "ragged_arrai": 51, "ragged_multi_map_in_funct": 51, "replace_ivy_arrai": 51, "unbind": 51, "nestedarrayelementwis": 52, "func_wrapp": [55, 57, 60, 500, 700, 710, 714], "handle_complex_input": [55, 57, 60, 500], "strictli": [57, 60, 196, 500, 506, 705, 709], "behaviour": [57, 60, 223, 500, 506, 688, 691, 692, 693, 694, 697, 699, 700, 702, 703, 705, 709, 710, 712, 713, 719], "24000001": [57, 500], "703": [58, 500], "683": [58, 500], "408": [58, 500], "313": [58, 500], "437": [58, 500], "40337825": [59, 500], "56114835": [59, 500], "20788449": [59, 500], "0768": [62, 500], "231": [62, 500], "body_fn": [67, 68, 70, 502], "bodi": [67, 70, 502, 693, 712], "lst": [67, 502], "orelse_fn": [68, 502], "lambda": [68, 70, 421, 491, 492, 494, 499, 502, 508, 509, 511, 515, 544, 597, 598, 602, 680, 689, 706, 707, 708, 711, 715, 717, 720], "body1": [69, 502], "body2": [69, 502], "repeatedli": [70, 502, 515, 599, 698, 712], "continu": [70, 236, 502, 506, 680, 683, 684, 688, 689, 690, 692, 693, 709, 712, 725, 732], "chosen": [71, 177, 503, 506, 518, 620, 689, 698, 710], "ml_framework": [71, 503], "distanc": [71, 503], "adjac": [71, 503], "nestedsequ": [72, 73, 503], "typevar": [72, 73, 503], "supportsbufferprotocol": [72, 73, 503], "static_copy_arrai": [79, 503], "intdtyp": [82, 93, 98, 110, 121, 126, 133, 139, 250, 291, 503, 504], "interchang": [83, 503, 513, 583], "plu": [84, 503], "x00b": [84, 503], "x00d": [84, 503], "x00e": [84, 503], "66666663": [87, 503], "41588834": [88, 503], "7827941": [88, 503], "6227766": [88, 503], "23413252": [88, 503], "n3": [89, 503], "similarli": [89, 96, 172, 261, 293, 503, 506, 695, 699, 710, 715, 719, 738], "xv": [89, 503], "yv": [89, 503], "x_nativ": [90, 503, 709], "y_nativ": [90, 503], "z_nativ": [90, 503], "compon": [92, 93, 170, 171, 172, 175, 178, 187, 189, 190, 192, 194, 222, 224, 225, 232, 235, 236, 239, 240, 267, 296, 503, 506, 518, 619, 680, 683, 717, 728, 733, 735], "d_type": [92, 503], "col": [96, 261, 293, 503], "retain": [96, 261, 293, 491, 503, 509, 708, 727], "primari": [96, 115, 116, 148, 149, 261, 293, 309, 394, 427, 428, 503, 504, 505, 508, 648, 650, 689, 692, 695, 699, 707, 709, 710, 712, 715, 725, 727], "purpos": [96, 194, 212, 261, 293, 503, 506, 511, 557, 691, 692, 694, 697, 698, 701, 703, 705, 706, 707, 710, 712, 715, 716, 719, 727, 731, 733, 736, 737, 738], "upward": [96, 261, 293, 503], "downward": [96, 261, 293, 503], "2xn": [96, 261, 293, 503], "subarrai": [96, 261, 293, 503], "incompat": [103, 504], "uint8": [104, 111, 115, 126, 129, 134, 140, 250, 291, 504, 647, 648, 699, 712], "closest": [106, 185, 195, 196, 232, 242, 302, 374, 504, 506, 712, 715], "xtype": [106, 504], "ytype": [106, 504], "native_uint16": [106, 504], "complexdtyp": [107, 121, 130, 504], "set_default_complex_dtyp": [107, 136, 504], "4294": [107, 109, 504], "967346": [107, 109, 504], "set_default_dtyp": [108, 137, 504, 699, 706], "floatdtyp": [109, 132, 504], "set_default_float_dtyp": [109, 118, 130, 138, 504, 699], "int_dtyp": [110, 133, 504], "set_default_int_dtyp": [110, 118, 139, 504, 699], "4294967346": [110, 111, 504], "uint_dtyp": [111, 134, 504], "uint": [111, 126, 134, 140, 504, 699, 711], "uintdtyp": [111, 126, 134, 140, 504], "set_default_uint_dtyp": [111, 118, 140, 504], "native_bool": [113, 504], "followng": [114, 504], "ieee": [114, 172, 189, 194, 212, 222, 231, 236, 239, 501, 504, 506, 683], "754": [114, 172, 189, 194, 212, 222, 231, 236, 239, 501, 504, 506, 683], "smallest_norm": [114, 504], "bfloat16": [115, 504, 647, 648, 699, 710, 712, 713], "unsupport": [116, 149, 428, 504, 505, 508, 642, 645, 690, 710], "encapsul": [117, 504, 698], "314": [117, 229, 267, 296, 504, 506], "9223372036854775808": [117, 504], "9223372036854775807": [117, 504], "65535": [117, 504], "4294967295": [117, 504], "un": [119, 504, 699, 717], "native_uint8": [119, 504], "hashabl": [123, 504], "type1": [127, 504], "type2": [127, 504], "array_api_promot": [127, 128, 504, 647, 648], "unexpect": [128, 196, 504, 506, 699], "default_complex_dtyp": [130, 504], "default_dtype_stack": [131, 137, 504], "unset_default_dtyp": [131, 504], "native_uint64": [131, 504], "default_float_dtyp": [132, 504, 699], "default_int_dtyp": [133, 139, 504, 699], "default_uint_dtyp": [134, 140, 504], "ret1": [135, 504], "ret2": [135, 504], "reset": [136, 137, 138, 139, 140, 166, 167, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 504, 505, 508, 700], "default_complex_dtype_stack": [136, 504], "default_float_dtype_stack": [138, 504], "native_float16": [141, 504], "unmodifi": [143, 505, 695, 699], "tpu": [143, 149, 160, 165, 505, 700, 732, 735], "clear": [144, 505, 680, 682, 683, 684, 689, 691, 695, 699, 700, 701, 710, 715, 717, 719, 732], "cach": [144, 416, 505, 508, 671, 704, 706, 709, 712], "gpu": [145, 147, 148, 151, 154, 156, 158, 160, 161, 164, 166, 168, 505, 680, 690, 691, 698, 700, 719, 726, 730, 732, 735, 736, 737], "aliv": [150, 155, 157, 431, 451, 452, 505, 508, 700], "139740789224448": [150, 505], "core": [153, 505, 682, 690, 700, 712, 722, 730, 731, 732, 733, 737, 739], "physic": [153, 505], "default_devic": [155, 158, 159, 160, 166, 167, 505, 700, 703], "process_specif": [156, 168, 505], "percentag": [156, 505], "ram": [156, 164, 168, 505], "alon": [156, 168, 505, 680, 686, 704, 712], "036902561555": [156, 505], "7024003467681645": [156, 505], "as_native_dev": [156, 505], "7095597456708771": [156, 505], "attr_onli": [157, 505], "soft_device_mod": [159, 167, 505], "rtype": [159, 300, 346, 455, 456, 460, 461, 463, 464, 505, 508], "chunk": [160, 161, 162, 505], "codebas": [160, 161, 505, 684, 685, 692, 699, 704, 709, 710, 712, 713, 716], "split_factor": [160, 505, 703], "max_chunk_s": [162, 505], "chunk_siz": [162, 505], "input_ax": [162, 505], "output_ax": [162, 505], "usag": [162, 505, 683, 699, 709, 712, 717, 725, 735], "fed": [162, 505, 721], "fist": [162, 505], "gb": [164, 168, 505, 690], "66700032": [164, 505], "589934592": [164, 505], "set_default_devic": [166, 505, 700], "set_soft_device_mod": [167, 505, 700], "219563008": [168, 505], "902400346": [168, 505], "525205504": [168, 505], "na": [169, 506, 712], "noqa": [169, 236, 299, 335, 506, 512, 568, 662, 671, 711], "princip": [170, 174, 176, 286, 296, 506], "domain": [170, 171, 174, 175, 176, 177, 186, 187, 192, 194, 210, 211, 213, 234, 235, 236, 239, 240, 286, 296, 506, 702, 730, 732], "codomain": [170, 171, 174, 175, 176, 177, 186, 187, 192, 194, 210, 211, 213, 234, 235, 236, 239, 240, 286, 296, 506, 702], "\u03c0": [170, 174, 176, 177, 501, 506], "3\u03c0": [170, 177, 506], "unspecifi": [170, 171, 175, 178, 187, 192, 194, 196, 227, 231, 235, 236, 240, 300, 347, 506, 511, 513, 543, 544, 582, 709], "\u03c0j": [171, 175, 178, 210, 212, 506], "3\u03c0j": [171, 210, 212, 506], "x1_i": [172, 177, 179, 181, 182, 183, 184, 189, 190, 196, 200, 201, 208, 209, 214, 216, 218, 219, 222, 225, 227, 231, 238, 506, 693], "neither": [172, 189, 196, 222, 506, 511, 561, 698, 710, 715], "nor": [172, 189, 196, 222, 506, 698, 710, 736], "2019": [172, 189, 194, 212, 222, 506, 732, 735], "too": [172, 189, 196, 222, 506, 661, 689, 690, 691, 693, 699, 703, 713, 725], "overflow": [172, 189, 196, 506, 511, 521, 557, 637, 688, 699], "commut": [172, 506], "tabl": [172, 189, 222, 461, 482, 506, 508, 647, 648, 662, 699, 710, 714, 732], "dj": [172, 189, 222, 506], "bj": [172, 189, 222, 267, 296, 506], "invlov": [172, 506], "z1": [172, 506], "z2": [172, 506], "yj": [173, 506], "nanj": [175, 506], "809": [175, 506], "199": [175, 506], "569": [175, 506], "733": [175, 506], "notat": [177, 506, 521, 631, 698], "denot": [177, 506, 664], "quadrant": [177, 506], "rai": [177, 506, 683], "bitwis": [179, 182, 184, 219, 506], "170": [183, 506], "243": [183, 506], "225": [183, 506], "xor": [184, 219, 506], "77": [184, 506, 511, 521, 554, 631], "654": [186, 506], "ci": [187, 192, 194, 235, 506, 693, 699, 704, 711, 712, 725], "368": [187, 506], "670": [187, 506], "202": [187, 506, 693], "548": [187, 506], "1490": [187, 506], "57079633": [188, 506], "14159265": [188, 506], "71238898": [188, 506], "28318531": [188, 506], "02617994": [188, 506], "87266463": [188, 506], "01919862": [188, 506], "03839725": [188, 506], "05759586": [188, 506], "07679449": [188, 506], "09599311": [188, 506], "11519173": [188, 506], "35081118": [188, 506], "88139129": [188, 506], "underflow": [189, 196, 506, 511, 557, 699], "textbook": [189, 222, 506], "frac": [189, 211, 213, 233, 235, 239, 299, 305, 326, 327, 331, 332, 381, 383, 506], "ac": [189, 222, 506, 674], "bd": [189, 222, 506], "bc": [189, 222, 506, 674], "versu": [189, 222, 227, 506], "riemann": [189, 222, 506], "sphere": [189, 222, 506], "c99": [189, 222, 506], "infinit": [189, 222, 236, 506], "usual": [189, 222, 506, 674, 690, 693, 699, 710, 712, 715], "interest": [189, 222, 506, 689, 691], "unlik": [189, 222, 506, 683, 693, 698, 701, 737, 739], "698": [189, 506], "truth": [190, 200, 201, 208, 209, 225, 506, 642, 644, 710, 712], "cut": [192, 194, 234, 235, 236, 239, 506, 682, 738], "08553692": [192, 506], "567": [192, 506], "00344786": [192, 506], "76297021": [192, 506], "197948": [192, 506], "53253174": [192, 506], "accur": [194, 212, 506, 511, 557, 707], "fdlibm": [194, 212, 506], "compliant": [194, 212, 217, 218, 506, 521, 632, 633, 634, 636], "potenti": [194, 212, 506, 680, 689, 690, 698, 699, 710, 716, 735], "632": [194, 506], "20e": [194, 506], "72e": [194, 506, 647], "greatest": [195, 196, 199, 506], "introduc": [196, 506, 513, 519, 579, 621, 682, 697, 698, 699, 711, 712, 715, 720], "via": [196, 506, 515, 600, 601, 691, 693, 697, 699, 700, 709, 713, 715, 717, 719, 720, 724, 732], "pep": [196, 506, 705], "238": [196, 506], "goal": [196, 506, 680, 683, 689, 732, 738], "disambigu": [196, 506, 708], "former": [196, 506, 699, 702, 710], "latter": [196, 506, 693, 695, 699, 702, 710], "overload": [196, 506, 712], "led": [196, 506, 693, 734], "subtl": [196, 506, 699, 738], "ambigu": [196, 506], "semant": [196, 231, 506, 682, 717, 722, 733], "ill": [196, 506, 649], "diverg": [196, 506], "prefer": [196, 506, 680, 690, 697, 703, 707, 710, 726, 732], "surpris": [196, 506, 725], "arrau": [202, 506], "log_": [211, 213, 506], "742": [212, 506], "hanl": [213, 506], "NOT": [217, 506, 674, 689], "particular": [217, 506, 648, 690, 691, 693, 695, 698, 699, 701, 707, 709, 710, 712, 713, 728, 732, 738], "cdot": [222, 506], "negat": [224, 267, 296, 506], "omplex": [225, 506], "carefulli": [227, 506, 661, 710, 730, 735], "52095687": [227, 506], "92457771": [227, 506], "49372482": [227, 506], "22738838": [227, 506], "156": [227, 506, 647], "5877228": [227, 506], "189": [228, 506], "252": [228, 506], "315": [228, 506], "378": [228, 506], "1150": [228, 506], "2890": [228, 506], "172": [228, 506], "229": [228, 506], "487": [228, 506, 510, 534], "344": [228, 506], "355j": [229, 267, 296, 506], "55j": [229, 267, 296, 506], "That": [231, 301, 353, 506, 674, 690, 691, 694, 712, 719, 720, 721, 733], "primarili": [231, 506, 689, 697, 732], "reason": [231, 240, 506, 683, 689, 691, 693, 694, 697, 698, 699, 700, 701, 706, 709, 710, 712, 713, 715, 717, 719, 738], "counterpart": [232, 506, 697, 707], "deliber": [232, 506, 715], "imprecis": [232, 506], "5654": [232, 506], "034": [232, 506], "433": [232, 492, 494, 506, 509], "known": [233, 506, 661, 693, 698, 699, 710, 712], "signum": [233, 506], "x_": [233, 506], "operatornam": [233, 235, 506, 511, 544], "begin": [233, 302, 373, 506, 515, 590, 601, 660, 690, 693, 698, 711], "textrm": [233, 506], "932": [234, 506], "746": [234, 506], "443": [234, 506], "657": [234, 418, 506, 508], "indistinguish": [236, 506], "convent": [236, 506, 511, 521, 549, 631, 682, 695, 705, 713, 724, 738], "infti": [236, 506], "32455532": [236, 506], "89897949": [236, 506], "169": [236, 506], "analyt": [239, 506, 732, 734, 738], "math": [239, 506, 709, 710, 711, 722, 730], "pole": [239, 506], "546": [239, 506, 510, 534], "916": [239, 506, 512, 568], "996": [239, 506], "histor": [240, 506], "stem": [240, 506, 709], "older": [240, 506], "patch": [240, 506, 699, 732], "advis": [240, 506, 710], "462": [240, 506], "604": [240, 506], "984": [240, 506], "997": [240, 506], "0375": [242, 506], "032": [242, 506], "57258511": [244, 291], "69999999": [244, 291, 499, 509], "90928203": [244, 291], "98772264": [244, 291], "99591321": [244, 291], "99863964": [244, 291], "69880581": [244, 291], "18126924": [244, 291], "20141329": [246, 291], "40318608": [246, 291], "48683619": [246, 291], "46328247": [246, 291], "59813893": [246, 291], "43748799": [246, 291], "parametr": [247, 291, 693, 712, 732], "6705687": [249, 291], "52016652": [249, 291], "40560818": [249, 291], "45630932": [249, 291], "doubl": [250, 291], "2689": [251, 291], "7310": [251, 291], "7615": [251, 291], "2784": [251, 291], "7168": [251, 291], "8708": [251, 291], "4374": [251, 291], "1379": [251, 291], "0089": [251, 291], "y1": [253, 293], "0800": [254, 293], "3979": [254, 293], "9121": [254, 293], "5400": [254, 293], "han": [255, 293], "taper": [255, 293], "dens": [256, 293, 662, 680], "ith": [256, 293], "00726415": [257, 293], "9999736": [257, 293], "2773e": [258, 293], "0172e": [258, 293], "9294e": [258, 293], "4149": [258, 293], "9138": [258, 293], "5529": [258, 293], "multidimension": [259, 260, 293, 732], "complementari": [264, 293, 730, 738], "38268346": [264, 293], "38268352": [264, 293], "8563191": [264, 293], "14943568": [264, 293], "much": [265, 278, 296, 661, 683, 689, 690, 691, 694, 697, 699, 709, 710, 711, 713, 714, 715, 717, 719, 720, 730, 732, 738, 739], "arrrai": [267, 296], "position": [273, 296], "inexact": [273, 296], "decompos": [275, 282, 296, 710], "triangl": [277, 296], "999999e": [278, 296], "65999985": [280, 296], "52000046": [280, 296], "1500001": [280, 296, 423, 508], "11259177": [281, 296], "3574118": [281, 296], "20097363": [281, 296], "Not": [283, 296, 300, 349, 501, 695, 703, 711, 720, 721, 725], "suppli": [285, 296, 302, 373, 674, 694, 696, 712], "217234": [286, 296], "hurwitz": [288, 296], "custom_grad_func": [290, 298], "bind": [290, 298, 689, 708, 731, 732], "upstream": [290, 298, 690, 691, 693, 708], "sequence_length": 291, "ndenumer": 293, "ndindex": 293, "bind_custom_gradient_funct": [298, 708], "area_interpol": 299, "division_overrid": [299, 317], "avg": [299, 317, 319, 340], "dimensio": [299, 318], "tranform": [299, 320, 330], "01823380e": [299, 320, 330], "15385818e": [299, 320, 330], "36371466e": [299, 320, 330], "38763905e": [299, 320, 330], "60722279e": [299, 320, 330], "80319249e": [299, 320, 330], "05617893e": [299, 320, 330], "21500000e": [299, 320, 330], "24000015e": [299, 320, 330], "90734863e": [299, 320, 330], "10000420e": [299, 320, 330], "15899994e": [299, 320, 330], "24000053e": [299, 320, 330], "81469727e": [299, 320, 330], "09999847e": [299, 320, 330], "4135742": [299, 320, 330], "6779785": [299, 320, 330], "3770599": [299, 320, 330], "114": [299, 320, 330], "8719864": [299, 320, 330], "72109985": [299, 320, 330], "52869415": [299, 320, 330], "79182434": [299, 320, 330], "72489166": [299, 320, 330], "container_n": [299, 320, 330], "container_typ": [299, 320, 330, 508], "container_norm": [299, 320, 330], "1580677": [299, 320], "89422607": [299, 320], "86190414": [299, 320], "00041008": [299, 320], "75149155": [299, 320], "97056389": [299, 320], "87819386": [299, 320], "89381361": [299, 320], "50000000e": [299, 320, 330, 647], "22044605e": [299, 320, 330], "randomli": [299, 322, 323, 324, 510, 533, 647, 648, 649, 650, 654, 662], "ed": [299, 322, 323, 324], "rest": [299, 302, 322, 323, 324, 361, 690, 696, 698, 700, 712, 722, 734], "4d": [299, 323, 324], "5d": [299, 324, 662], "emb": [299, 325], "51285338": [299, 325], "87183261": [299, 325], "2308116": [299, 325], "02733949e": [299, 326], "00j": [299, 326], "49660576e": [299, 326], "68178638e": [299, 326], "01j": [299, 326, 331], "98912367e": [299, 326], "21802426e": [299, 326, 331], "04549134e": [299, 326, 331], "82842712e": [299, 326, 331], "86902654e": [299, 326, 331], "25501143e": [299, 326, 331], "32978028e": [299, 326, 331], "52068201e": [299, 326, 331], "71158374e": [299, 326, 331], "generate_einsum_equ": 299, "get_interpolate_kernel": 299, "27279224e": [299, 330], "44232273e": [299, 330], "70464332e": [299, 330], "73454881e": [299, 330], "00902849e": [299, 330], "10039906e": [299, 330], "07022366e": [299, 330], "69506073": [299, 330], "93914604": [299, 330], "88008881": [299, 330], "18951607": [299, 330], "57439613": [299, 330], "15318303e": [299, 331], "15148591e": [299, 331], "19j": [299, 331], "25000000e": [299, 331], "35378602e": [299, 331], "02j": [299, 331], "65404249e": [299, 331], "17611649e": [299, 331], "24320230e": [299, 331], "79344813e": [299, 331], "22374531e": [299, 331], "45929364e": [299, 331], "14208718e": [299, 331], "07177031e": [299, 331], "what": [299, 332, 342, 649, 680, 683, 684, 686, 691, 692, 697, 698, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 716, 717, 719, 720, 721, 722, 724, 725, 728, 733, 734, 737], "indexerror": [299, 332, 342, 513, 574, 675, 703], "interp": [299, 715], "xp": [299, 333, 693], "fp": [299, 333], "nd": [299, 334], "bicubic_tensorflow": [299, 334, 715], "max_unpool1d": 299, "unpool": [299, 338], "pool_result": [299, 338], "unpool_result": [299, 338], "nearest_interpol": 299, "input_shap": [299, 339, 680], "window_shap": [299, 340], "pool_typ": [299, 340], "99038106j": [299, 342], "33012702": [299, 342], "23205081j": [299, 342], "33012702j": [299, 342], "superdiagon": [300, 345, 511, 541], "subdiagon": [300, 345, 511, 541], "eigendecomposit": [300, 347, 511, 543, 544], "qlq\u1d40": [300, 347, 511, 543, 544], "orthogon": [300, 347, 511, 543, 544], "behav": [300, 347, 511, 543, 693, 703, 707, 709, 710, 711, 719, 733], "tridiagon": [300, 348], "38196602": [300, 348], "61803389": [300, 348], "35048741": [300, 348], "56710052": [300, 348], "06693714": [300, 348], "74234426": [300, 348], "56155282": [300, 348], "56155276": [300, 348], "82842714": [300, 348], "82842731": [300, 348], "necessarili": [300, 349, 694, 697], "log_poisson_loss": 301, "compute_full_loss": [301, 353, 663], "likelihood": [301, 353], "assumpt": [301, 353], "minu": [301, 353], "term": [301, 353, 510, 535, 662, 680, 682, 691, 697, 717, 727, 732], "plai": [301, 353, 680, 690, 694, 710, 712, 722, 732, 735], "factori": [301, 353], "stirl": [301, 353], "favor": [301, 353], "28402555": [301, 353], "03402555": [301, 353], "1573164": [301, 353], "whilst": [302, 356, 357, 358, 722, 727, 732], "ary3": [302, 358], "third": [302, 362, 378, 511, 519, 559, 621, 696, 709, 725, 731, 732, 738], "tall": [302, 364], "horizot": [302, 370], "shortcut": [302, 373, 690], "linear_ramp": [302, 373], "reflect": [302, 373, 686, 691, 694, 709, 712], "ramp": [302, 373], "mirror": [302, 373, 689, 732], "signatur": [302, 311, 373, 401, 683, 699, 700, 701, 702, 705, 709, 712, 713, 715, 729, 738], "padding_func": [302, 373], "iaxis_pad_width": [302, 373], "iaxi": [302, 373], "style": [302, 373, 518, 619, 691, 704, 732], "unalt": [302, 373], "put_along_axi": 302, "put": [302, 374, 680, 689, 712, 725, 738], "elimin": [302, 378, 690], "consecut": [302, 378], "batch_mean": [305, 381, 383], "batch_var": [305, 381, 383], "running_vari": [305, 381, 383], "42857143": [305, 386], "5714286": [305, 386], "distrubut": [306, 387], "paramter": [306, 387], "seen": [306, 389, 671, 682, 683, 698, 699, 701, 703, 710, 712, 717, 719, 720, 738], "multivari": [306, 389], "bayesian": [306, 389], "supposedli": [309, 393], "indirect": [309, 394], "secondari": [309, 394], "is_ivy_sparse_arrai": 310, "is_native_sparse_arrai": 310, "native_sparse_arrai": 310, "coo_indic": [310, 397], "crow_indic": [310, 397], "col_indic": [310, 397], "ccol_indic": [310, 397], "row_indic": [310, 397], "dense_shap": [310, 397], "native_sparse_array_to_indices_values_and_shap": 310, "nativesparsearrai": 310, "sparsearrai": 310, "linalg": [311, 401, 511, 557, 689, 709, 711], "66666667": [311, 401], "aw": [311, 401, 683], "48447205": [311, 401], "c0": [311, 404], "ck": [311, 404], "i1": [311, 404], "c2": [311, 404], "nanquantil": 311, "nearest_jax": [311, 410], "idx": [412, 508, 680, 700, 719], "inspect": [412, 508], "retriev": [412, 508, 691, 710], "receiv": [413, 449, 508, 514, 587, 588, 589, 662, 691, 699, 700, 712, 715], "compile_on_next_step": [413, 508, 663, 664, 666, 721], "decor": [416, 508, 647, 649, 654, 693, 694, 697, 699, 700, 706, 709, 710, 711, 715], "recalcul": [416, 508], "my_sum": [416, 508], "val1": [416, 508], "val2": [416, 508], "cached_sum": [416, 508], "line_eq": [416, 508], "slp": [416, 508], "itc": [416, 508], "cached_line_eq": [416, 508], "0353": [417, 508], "424": [417, 508], "58": [417, 508], "176": [417, 508], "339": [417, 508], "271": [417, 508], "168": [417, 508], "391": [417, 508], "417": [418, 508], "583": [418, 508], "0667": [418, 508], "267": [418, 508], "131": [418, 508], "263": [418, 508], "394": [418, 508, 517, 615], "526": [418, 508], "788": [418, 508], "public": [419, 508, 698, 708, 719, 735], "default_str": [421, 508], "46999979": [422, 508], "66000009": [422, 508], "93000001": [422, 508], "29000092": [422, 508], "33999991": [422, 508], "6400001": [422, 508], "96000004": [422, 508], "36000013": [422, 508], "51999998": [422, 508], "67000008": [422, 508], "30000001": [422, 508, 519, 622], "suppos": [422, 508, 699, 712], "960": [422, 508], "1280": [422, 508, 680], "3600": [422, 508], "bottom": [422, 508, 689, 690, 698, 738], "h1": [422, 508], "w1": [422, 508], "40499985": [423, 508], "61000061": [423, 508], "incas": [427, 428, 508, 648], "max_depth": [434, 508, 515, 602], "seen_set": [434, 508], "local_set": [434, 508], "thrown": [439, 508, 694, 700, 703, 704, 725], "ivyexcept": [439, 470, 508, 675, 700, 703, 707, 709, 710, 713], "allow_dupl": [449, 508], "best": [449, 508, 680, 685, 688, 689, 690, 691, 692, 698, 699, 703, 712, 713, 726, 735, 736], "o": [449, 508, 680, 690, 692, 698, 717, 726], "context": [450, 508, 690, 691, 695, 699, 700, 701], "fork": [450, 508, 685, 693, 698], "forkserv": [450, 508], "spawn": [450, 508], "consol": [452, 508, 691, 704, 712, 719], "garbag": [452, 508], "collector": [452, 508], "get_all_arrays_in_memori": [452, 508], "array_mod": [455, 477, 508, 714], "exept": [456, 508], "exception_trace_mod": [456, 478, 508, 714], "infus": [457, 508], "nestable_mod": [460, 481, 508, 714], "effeci": [461, 482, 508, 714], "wider": [461, 482, 508, 714, 738], "promtion": [461, 508], "precise_mod": [461, 482, 508, 714], "shape_array_mod": [463, 484, 508, 714], "show_func_wrapper_trace_mod": [464, 485, 508, 714], "tmp_dr": [465, 508], "temporari": [465, 486, 508, 689, 699, 714], "tmp_dir": [465, 486, 508, 714], "tmp": [465, 486, 508], "my_tmp": [465, 508], "49999999999975": [467, 508], "5015015015010504": [467, 508], "000444502911705e": [467, 508], "9999999999995j": [467, 508], "isn": [470, 508, 691, 707, 709, 720, 725, 734], "possibli": [472, 508, 712, 725], "100000023841858": [472, 508], "200000047683716": [472, 508], "299999952316284": [472, 508], "400000095367432": [472, 508], "599999904632568": [472, 508], "dictionai": [476, 508], "__name__": [476, 508, 680, 703], "hemant": [476, 508], "set_array_mod": [477, 508, 714], "unset_shape_array_mod": [477, 508], "previous": [478, 508, 671, 690, 695, 706, 708, 712, 717], "set_exception_trace_mod": [478, 508, 703], "set_min_bas": [479, 508], "set_min_denomin": [480, 508], "set_nestable_mod": [481, 508], "set_precise_mod": [482, 508], "set_queue_timeout": [483, 508], "set_shape_array_mod": [484, 508], "set_show_func_wrapper_trace_mod": [485, 508, 703], "set_tmp_dir": [486, 508], "my_dir": [486, 508], "451": [487, 508], "in_ax": [488, 508], "out_ax": [488, 508], "thereof": [488, 508], "fun": [488, 508, 515, 601, 698], "summaris": [488, 508], "grad": [489, 509, 666, 680, 708, 720, 721, 722], "99999998": [489, 509], "09999998": [489, 509], "19999998": [489, 509], "00000001": [489, 509], "00300001": [489, 509], "00800001": [489, 509], "0125": [489, 509], "17294501": [489, 509], "15770318": [489, 509], "20863818": [489, 509], "90000075": [490, 509], "90000164": [490, 509], "9000032": [490, 509], "50000012e": [490, 509], "92558754": [490, 509], "92558694": [490, 509], "92558682": [490, 509], "92558861": [490, 509], "60000025e": [490, 509], "01024": [490, 509], "retain_grad": [491, 509], "xs_grad_idx": [491, 509, 644, 708], "ret_grad_idx": [491, 509, 644, 708], "func_ret": [491, 509, 708], "666666": [491, 509], "333332": [491, 509], "66666675": [491, 499, 509], "argnum": [492, 509], "grad_fn": [492, 499, 509, 720], "933": [492, 494, 509], "jacobian": [494, 509, 725, 732], "jac_fn": [494, 509], "639": [495, 509], "361": [495, 509], "value_grad": [499, 509], "42333412": [499, 509], "5333333": [499, 509], "93333334": [499, 509], "43333334": [499, 509], "0666666": [499, 509], "718281828459045": 501, "euler": [501, 724], "141592653589793": 501, "newaxi": 501, "cast_bool": 502, "cmp_i": 502, "cmp_isnot": 502, "for_loop": 502, "if_els": 502, "try_except": 502, "while_loop": 502, "asarray_handle_nest": 503, "asarray_infer_devic": 503, "asarray_infer_dtyp": 503, "asarray_inputs_to_native_shap": 503, "asarray_to_native_arrays_and_back": 503, "as_ivy_dtyp": [504, 710], "as_native_dtyp": 504, "check_float": 504, "closest_valid_dtyp": 504, "default_dtyp": [504, 699, 706], "dtype_bit": 504, "function_supported_dtyp": [504, 699, 712], "function_unsupported_dtyp": [504, 699], "infer_default_dtyp": 504, "invalid_dtyp": [504, 699], "is_hashable_dtyp": 504, "is_native_dtyp": 504, "promote_typ": [504, 699], "promote_types_of_input": [504, 699, 709], "type_promote_arrai": [504, 699], "unset_default_complex_dtyp": 504, "unset_default_float_dtyp": 504, "unset_default_int_dtyp": 504, "unset_default_uint_dtyp": 504, "valid_dtyp": 504, "defaultcomplexdtyp": 504, "defaultdtyp": 504, "defaultfloatdtyp": 504, "defaultintdtyp": 504, "defaultuintdtyp": 504, "as_ivy_dev": [505, 719], "clear_cached_mem_on_dev": 505, "dev_util": [505, 700], "function_supported_devic": 505, "function_unsupported_devic": 505, "get_all_ivy_arrays_on_dev": [505, 700], "gpu_is_avail": [505, 680], "handle_soft_device_vari": [505, 700], "num_cpu_cor": [505, 700], "num_gpu": [505, 700, 712], "num_ivy_arrays_on_dev": 505, "percent_used_mem_on_dev": 505, "print_all_ivy_arrays_on_dev": 505, "set_split_factor": [505, 703], "split_func_cal": 505, "total_mem_on_dev": [505, 700], "tpu_is_avail": 505, "unset_default_devic": [505, 700], "unset_soft_device_mod": [505, 700], "used_mem_on_dev": 505, "defaultdevic": [505, 700], "profil": 505, "save_dir": 505, "arg_info": 508, "arg_nam": 508, "cache_fn": [508, 706], "current_backend_str": [508, 712, 717, 719], "function_supported_devices_and_dtyp": 508, "function_unsupported_devices_and_dtyp": 508, "get_item": [508, 709], "get_referrers_recurs": 508, "inplace_arrays_support": 508, "inplace_variables_support": 508, "is_ivy_nested_arrai": 508, "isscalar": 508, "match_kwarg": 508, "num_arrays_in_memori": 508, "print_all_arrays_in_memori": 508, "set_item": 508, "to_ivy_shap": 508, "to_native_shap": 508, "try_else_non": 508, "unset_array_mod": [508, 714], "unset_exception_trace_mod": 508, "unset_min_bas": 508, "unset_min_denomin": 508, "unset_nestable_mod": 508, "unset_precise_mod": 508, "unset_queue_timeout": 508, "unset_show_func_wrapper_trace_mod": 508, "unset_tmp_dir": 508, "vmap": [508, 725, 732], "arraymod": 508, "manag": [508, 680, 684, 685, 695, 699, 700, 709, 725, 734, 736], "precisemod": 508, "execute_with_gradi": [509, 680, 720, 721, 722, 725], "jac": 509, "value_and_grad": [509, 708], "conv": [510, 662, 715], "feature_group_count": [510, 523, 530, 531], "oiw": [510, 523, 524, 530], "oihw": [510, 523, 526, 530], "oidhw": [510, 523, 527, 528, 530], "dhwio": [510, 523, 524, 527, 528, 530], "258": [510, 525, 527, 529], "conv_general_dil": [510, 710], "conv_general_transpos": 510, "depthwis": [510, 532, 649, 662], "overfit": [510, 533], "1428566": [510, 533], "49000001": [510, 533], "55599999": [510, 533], "21000004": [510, 533], "incom": [510, 534], "666": [510, 511, 534, 550], "4269": [510, 534], "911": [510, 534, 703], "157": [510, 534], "753": [510, 534], "101": [510, 511, 515, 534, 547, 596], "545": [510, 517, 534, 613], "547": [510, 534, 700], "124": [510, 534], "852": [510, 534], "963": [510, 534], "98495483": [510, 534], "0293808": [510, 534], "0159359": [510, 534], "74752808": [510, 534], "20942307": [510, 534], "108": [510, 521, 534, 631], "3205719": [510, 534], "long": [510, 535, 690, 691, 698, 699, 701, 703, 710, 717, 732], "short": [510, 535, 691, 699, 717, 721], "unrol": [510, 535, 717, 720], "lstm": [510, 535, 662, 717, 732], "multi": [510, 511, 536, 539, 649, 662, 701, 716, 725, 728, 730, 732, 736], "head": [510, 536, 662, 680, 688, 690, 698, 710], "paper": [510, 536, 680, 684], "vaswani": [510, 536], "et": [510, 511, 536, 559], "al": [510, 536], "2017": [510, 536], "attend": [510, 536], "num_attention_head": [510, 536], "key_dim": [510, 536, 662], "value_dim": [510, 536, 662], "Then": [510, 536, 687, 689, 690, 691, 695, 696, 698, 704, 707, 709, 712, 713, 725], "query_dim": [510, 536], "measur": [510, 536, 662], "new_": [510, 536], "attention_weight": [510, 536], "alongsid": [510, 536, 683], "attenion_weight": [510, 536], "out_feat_dim": [510, 536], "23333359": [510, 537], "03946018": [510, 537], "0280633": [510, 537], "29981947": [510, 537], "29981089": [510, 537], "06345534": [510, 537], "9634552": [510, 537], "19336844": [510, 537], "09336829": [510, 537], "axisa": [511, 539], "axisb": [511, 539], "axisc": [511, 539], "293": [511, 540], "46997": [511, 540], "futur": [511, 544, 545, 680, 682, 684, 690, 691, 698, 699, 712, 713, 715, 719, 725, 738], "45033181e": [511, 545], "02829754e": [511, 545], "54220343e": [511, 545], "12647155e": [511, 545], "38447177e": [511, 545], "56155300e": [511, 545], "26794919": [511, 545], "7320509": [511, 545], "0012": [511, 547], "00342": [511, 547], "000565": [511, 547], "0104": [511, 547], "000981": [511, 547], "00282": [511, 547], "000766": [511, 547], "0322": [511, 547], "00237": [511, 547], "000151": [511, 547], "00101": [511, 547], "00019": [511, 547], "0214": [511, 547], "00171": [511, 547], "0107": [511, 547], "0167": [511, 547], "0472": [511, 547], "0536": [511, 547], "0177": [511, 547], "000429": [511, 547], "00762": [511, 547], "lu_factor": 511, "pivot": [511, 548], "lu": [511, 548], "frobeniu": [511, 550], "nuclear": [511, 550], "induc": [511, 550], "ranl": [511, 550], "47722558": [511, 550], "776": [511, 550], "6000004": [511, 550], "118": [511, 551], "moor": [511, 555], "penros": [511, 555], "deteremin": [511, 557], "logsabsdet": [511, 557], "although": [511, 557, 694, 697, 710, 715, 730, 732], "again": [511, 557, 683, 684, 691, 694, 695, 696, 697, 701, 703, 704, 709, 710, 712, 713, 715, 720, 722, 725, 737, 738], "subject": [511, 557], "solut": [511, 558, 680, 690, 691, 697, 699, 711, 712, 715, 730, 734], "ordin": [511, 558, 724], "usvh": [511, 559], "cetera": [511, 559], "86217213": [511, 560], "31816804": [511, 560], "615": [511, 560], "ss": [511, 560], "25994301": [511, 560], "16403675": [511, 560], "61529762": [511, 560], "51231241": [511, 560], "39777088": [511, 560], "15413129": [511, 560], "1029852": [511, 560], "01383495": [511, 560], "86647356": [511, 560], "7786541": [511, 560], "55970621": [511, 560], "16857576": [511, 560], "86412698": [511, 560], "37566757": [511, 560], "88477993": [511, 560], "95925522": [511, 560], "6444726": [511, 560], "54687881": [511, 560], "16134834": [511, 560], "35037804": [511, 560], "31025076": [511, 560], "35769391": [511, 560], "transposit": [511, 561], "success": [511, 521, 563, 635, 637, 683, 698], "0x": [511, 564], "Such": [511, 564, 706, 712], "progress": [511, 564, 690, 691, 722], "alexandr": [511, 564], "theophil": [511, 564], "9000001": [511, 566], "64158917": [511, 566], "skew": [511, 567], "6666193": [512, 568], "67164493e": [512, 568], "05471958e": [512, 568], "32684899e": [512, 568], "30496836e": [512, 568], "e501": [512, 568, 662], "05393649": [512, 568], "49992943": [512, 568], "83330965": [512, 568], "35667497": [512, 569], "35667494": [512, 570], "79329094": [512, 570], "512926": [512, 570], "outsid": [513, 571, 582, 700, 706, 719, 737], "honor": [513, 578], "beyond": [513, 579, 702, 710, 738], "famili": [513, 582], "intxx": [513, 582], "floatxx": [513, 582], "construct": [513, 584, 662, 665, 666, 667, 717, 721, 722, 730, 732, 739], "rep": [513, 584], "fomaml_step": 514, "inner_cost_fn": [514, 587, 588, 589], "outer_cost_fn": [514, 587, 588], "inner_grad_step": [514, 587, 588, 589], "inner_learning_r": [514, 587, 588, 589], "inner_optimization_step": [514, 587, 588, 589], "inner_batch_fn": [514, 587, 588], "outer_batch_fn": [514, 587, 588], "average_across_step": [514, 587, 588], "inner_v": [514, 587, 588], "keep_inner_v": [514, 587, 588], "outer_v": [514, 587, 588], "keep_outer_v": [514, 587, 588], "return_inner_v": [514, 587, 588, 589], "num_task": [514, 587, 588, 589], "maml": [514, 587, 588], "task": [514, 587, 588, 589, 680, 685, 691, 710, 711, 724, 732, 738, 739], "0x7f158fec5ca0": [514, 587, 588, 589], "maml_step": 514, "vanilla": [514, 588, 721, 732], "recev": [514, 588], "reptile_step": 514, "cost_fn": [514, 589], "reptil": [514, 589], "_variabl": [514, 589], "batch_in": [514, 589], "latent": [514, 589], "4485182": [514, 589], "139": [514, 589], "9569855": [514, 589], "9880483": [514, 589], "01766968": [514, 589], "02197957": [514, 589], "02197981": [514, 589], "all_nested_indic": 515, "include_nest": [515, 590], "_index": [515, 590, 601], "_base": [515, 590, 600, 601, 709], "extra_nest_typ": [515, 590, 591, 600, 601, 602], "themselv": [515, 590, 697, 699, 700, 702, 706, 710, 721, 729, 738], "far": [515, 590, 601, 700, 701, 718, 737, 738], "copy_nest": 515, "to_mut": [515, 591, 602], "deepli": [515, 591, 725, 732], "mutabl": [515, 591, 597, 598, 602, 607, 608, 695], "copied_nest": [515, 591], "1337": [515, 591, 602], "duplicate_array_index_chain": 515, "index_nest": [515, 706], "insert_into_nest_at_index": 515, "insert_into_nest_at_indic": 515, "onto": [515, 596, 602, 681, 682, 732], "special_squar": [515, 596], "6666666666666667": [515, 596], "special_pow": [515, 596], "linear_model": [515, 596], "map_nest_at_index": 515, "shallow": [515, 597, 598, 602, 607, 608], "_result": [515, 597, 607], "placehold": [515, 597, 602, 607, 662, 691, 694, 705, 727], "hh": [515, 597, 602], "map_nest_at_indic": 515, "ub": [515, 598], "tb": [515, 598], "multi_index_nest": 515, "nested_ani": 515, "check_nest": [515, 600, 601], "conditon": [515, 600, 601], "nested_argwher": 515, "stop_after_n_found": [515, 601], "nested_indic": [515, 601], "nested_map": [515, 706], "_depth": [515, 602], "_tuple_check_fn": [515, 602], "_list_check_fn": [515, 602], "_dict_check_fn": [515, 602], "wherebi": [515, 602, 689, 729], "ah": [515, 602], "bh": [515, 602], "ch": [515, 602], "dh": [515, 602, 693], "eh": [515, 602], "gh": [515, 602, 690], "ih": [515, 602], "1338": [515, 602], "nested_multi_map": 515, "index_chain": [515, 603], "nest0": [515, 603], "ivy_arrai": [515, 603, 694, 710], "unappli": [515, 603], "prune_empti": 515, "prune_nest_at_index": 515, "prune_nest_at_indic": 515, "set_nest_at_index": 515, "set_nest_at_indic": 515, "111": [515, 608], "xyz": [515, 608], "pqr": [515, 608], "mini": [516, 609, 662, 665], "uniformli": [517, 611, 613], "22346112": [517, 612], "0922": [517, 612], "49671414": [517, 612], "1382643": [517, 612], "64768857": [517, 612], "5230298": [517, 612], "23415337": [517, 612], "23413695": [517, 612], "9213753": [517, 612], "12818667": [517, 612], "799": [517, 612], "469": [517, 612], "287": [517, 612], "0366": [517, 612], "26431865": [517, 613], "475": [517, 613], "878": [517, 613], "861": [517, 613], "929": [517, 613], "789": [517, 613], "519": [517, 613], "0435": [517, 613], "381": [517, 613], "4608004": [517, 613], "8458502": [517, 613], "67270088": [517, 613], "31128597": [517, 613], "zeroel": [518, 619], "major": [518, 619, 683, 699, 700, 711, 712, 725, 729, 732], "guarante": [519, 621, 623, 684, 694, 699, 709, 725], "aggreg": [519, 621, 698], "fourth": [519, 621], "1141": [519, 621], "8101": [519, 621], "9298": [519, 621], "8460": [519, 621], "2119": [519, 621], "3519": [519, 621], "6252": [519, 621], "4033": [519, 621], "7443": [519, 621], "2577": [519, 621], "3707": [519, 621], "0545": [519, 621], "3238": [519, 621], "5944": [519, 621], "0775": [519, 621], "4327": [519, 621], "62519997": [519, 621], "40329999": [519, 621], "59439999": [519, 621], "74430001": [519, 621], "81010002": [519, 621], "84600002": [519, 621], "92979997": [519, 621], "einstein": [521, 631, 674], "summat": [521, 631, 674], "117": [521, 631], "sentinel": [521, 632, 634], "90000004": [521, 633], "intend": [521, 637, 645, 661, 693, 705, 708, 730, 732, 736, 737], "07472222": [521, 638], "00666667": [521, 638], "08966666": [521, 638], "simplicit": [522, 639, 640], "meta": [587, 588, 589, 694, 713, 732], "ivy_test": [642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 689, 690, 691, 693, 696, 698, 711], "test_ivi": [642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 689, 690, 691, 696, 698, 711, 712], "helper": [642, 644, 645, 652, 653, 680, 696, 699, 703, 720, 727], "assert_all_clos": [642, 711], "ret_np": [642, 644, 711], "ret_from_gt_np": [642, 711], "ground_truth_backend": [642, 644, 645, 653, 654, 711], "ground": [642, 644, 682, 710, 712], "mark": [642, 689, 691, 693, 712, 717], "fail": [642, 689, 690, 691, 693, 698, 699, 701, 704, 707, 709, 710, 711], "assert_same_type_and_shap": 642, "this_key_chain": 642, "check_unsupported_devic": 642, "input_devic": 642, "all_as_kwargs_np": [642, 644], "presenc": [642, 697, 709], "check_unsupported_device_and_dtyp": 642, "input_dtyp": [642, 644, 653, 711, 712], "check_unsupported_dtyp": 642, "test_unsupported_funct": 642, "value_test": 642, "ret_np_flat": 642, "ret_np_from_gt_flat": 642, "ret_from_np_gt_flat": 642, "function_test": 644, "args_to_contain": 644, "array_arg": [644, 706], "args_to_frontend": 644, "frontend_array_fn": 644, "arrays_to_frontend": 644, "as_list": 644, "compiled_if_requir": 644, "test_compil": [644, 653, 654], "convtru": 644, "nativeclass": 644, "counter": [644, 721], "create_args_kwarg": 644, "args_np": 644, "arg_np_val": 644, "args_idx": 644, "kwargs_np": 644, "kwarg_np_val": 644, "kwargs_idx": 644, "test_flag": [644, 711, 712], "on_devic": [644, 653, 711], "flatten_and_to_np": 644, "flatten_frontend": 644, "flatten_frontend_to_np": 644, "get_frontend_ret": 644, "frontend_fn": 644, "as_ivy_arrai": 644, "get_ret_and_flattened_np_arrai": 644, "backend_to_test": [644, 711], "gradient_incompatible_funct": 644, "gradient_test": [644, 712], "rtol_": 644, "atol_": [644, 711], "gradient_unsupported_dtyp": 644, "kwargs_to_args_n_kwarg": 644, "num_positional_arg": [644, 653, 654, 711, 712], "port": [644, 684], "test_frontend_funct": [644, 711], "fn_tree": [644, 645, 654, 710, 711, 712], "test_valu": [644, 711, 712], "all_alias": [644, 711], "alias": [644, 654, 689, 710, 711], "namespac": [644, 689, 699, 707, 710, 711, 713, 717, 722], "test_frontend_method": [644, 711], "init_input_dtyp": [644, 711], "method_input_dtyp": [644, 711], "init_flag": [644, 711, 712], "method_flag": [644, 653, 711, 712], "init_all_as_kwargs_np": [644, 711], "method_all_as_kwargs_np": [644, 711], "frontend_method_data": [644, 711], "consum": [644, 697, 698, 705, 711, 712], "init_as_variable_flag": [644, 654], "dictat": [644, 694, 701, 705, 709], "init_num_positional_arg": [644, 654], "init_native_array_flag": 644, "with_v": 644, "ret_gt": 644, "test_funct": [644, 690, 691, 698, 711, 712], "fn_name": [644, 645, 654, 695, 711, 712], "return_flat_np_arrai": 644, "functiontestflag": [644, 653], "with_out": [644, 653, 711, 712], "instance_method": [644, 653, 712], "as_vari": [644, 653, 711, 712], "as_variable_flag": [644, 654], "native_array_flag": [644, 654], "container_flag": [644, 653, 654], "test_method": 644, "class_nam": 644, "method_nam": [644, 652, 654, 711], "init_with_v": 644, "method_with_v": 644, "test_gradi": [644, 653, 654], "method_as_variable_flag": [644, 654], "method_num_positional_arg": [644, 654], "method_native_array_flag": 644, "method_container_flag": [644, 654], "tthe": 644, "wrap_frontend_function_arg": 644, "holder": 645, "current_frontend_config": 645, "0x7f1584773e40": 645, "interruptedtest": 645, "test_interrup": 645, "baseexcept": 645, "tri": [645, 699], "testdata": 645, "supported_device_dtyp": 645, "is_method": 645, "setup_api_test": 645, "test_data": 645, "setup_frontend_test": 645, "teardown_api_test": 645, "teardown_frontend_test": 645, "hypothesis_help": [647, 648, 649, 650], "array_help": 647, "array_and_broadcastable_shap": 647, "searchstrategi": [647, 648, 649, 650, 653, 654, 712], "array_bool": [647, 712], "min_valu": [647, 648, 649, 650, 711, 712], "max_valu": [647, 648, 649, 650, 711, 712], "strategi": [647, 648, 649, 650, 654, 689, 711], "array_indices_axi": 647, "array_dtyp": [647, 648, 712], "indices_dtyp": 647, "get_dtyp": [647, 648, 711, 712], "disable_random_axi": 647, "axis_zero": 647, "allow_inf": [647, 650, 711, 712], "min_num_dim": [647, 649, 711, 712], "max_num_dim": [647, 649, 711, 712], "min_dim_s": [647, 649, 711, 712], "max_dim_s": [647, 649, 711], "first_dimension_onli": 647, "indices_same_dim": 647, "valid_bound": 647, "hypothesi": [647, 649, 654, 689, 691, 693, 698, 707], "65536": 647, "44758124e": [647, 712], "array_indices_put_along_axi": 647, "values_dtyp": 647, "array_valu": [647, 712], "abs_smallest_v": [647, 649, 650], "allow_nan": [647, 650, 712], "allow_subnorm": [647, 650, 712], "exclude_min": [647, 650, 712], "exclude_max": [647, 650], "large_abs_safety_factor": [647, 649, 650, 711, 712], "small_abs_safety_factor": [647, 649, 650, 711], "safety_factor_scal": [647, 649, 650, 711, 712], "subnorm": [647, 650], "safeti": [647, 649, 650, 732], "0002": [647, 650], "get_shap": [647, 649, 711, 712], "1806": 647, "36912": 647, "6955": 647, "59576": 647, "1025": 647, "arrays_and_ax": 647, "available_dtyp": [647, 648, 711, 712], "allow_non": [647, 649, 711, 712], "return_dtyp": 647, "force_int_axi": 647, "26e": 647, "10e": 647, "24322108": 647, "26446279e": 647, "96046448e": 647, "008": 647, "17549435e": 647, "038": 647, "06541027e": 647, "13725760e": 647, "07143888": 647, "arrays_for_pool": 647, "min_dim": 647, "max_dim": 647, "min_sid": 647, "max_sid": 647, "explicit_or_str_pad": 647, "only_explicit_pad": 647, "return_dil": 647, "mixed_fn_compo": [647, 648, 649, 650, 712], "return_data_format": 647, "cond_data_gen_help": 647, "create_nested_input": 647, "leaf_valu": 647, "dtype_and_valu": [647, 711, 712], "num_arrai": [647, 648, 711, 712], "shared_dtyp": [647, 648, 711], "ret_shap": 647, "array_api_dtyp": [647, 648], "shape_kei": 647, "37915": 647, "6322": 647, "26765": 647, "12413": 647, "26986": 647, "34665": 647, "000e": 647, "711e": 647, "100e": 647, "955e": [647, 712], "40817": 647, "56193": 647, "29200": 647, "5851": 647, "9746": 647, "9604645e": 647, "192": [647, 674], "103": 647, "41795": 647, "1170789994": 647, "44251": 647, "44209": 647, "433075925": 647, "24791": 647, "24691": 647, "24892": 647, "16711": 647, "972": 647, "15357": 647, "72057594037927936": 647, "dtype_array_queri": 647, "allow_mask": 647, "allow_neg_step": 647, "dtype_array_query_v": 647, "dtype_values_axi": [647, 712], "min_axi": 647, "max_axi": 647, "valid_axi": 647, "allow_neg_ax": 647, "min_axes_s": 647, "max_axes_s": 647, "force_tuple_axi": 647, "29788": 647, "62222885e": 647, "68281172e": 647, "257j": 647, "40129846e": 647, "90000000e": 647, "63426649e": 647, "91931887e": 647, "29488e": 647, "14361019e": 647, "12445": 647, "einsum_help": 647, "get_first_solve_matrix": 647, "get_second_solve_matrix": 647, "list_of_s": 647, "st": [647, 693, 711, 712], "sampled_from": [647, 711, 712], "min_siz": [647, 649, 654, 712], "max_siz": [647, 649, 654, 712], "size_bound": [647, 712], "00001": 647, "999999999999999": 647, "9394938006792373": 647, "mutually_broadcastable_shap": 647, "num_shap": 647, "base_shap": 647, "dtype_help": 648, "univers": [648, 682, 710], "get_castable_dtyp": 648, "castabl": 648, "prune_funct": 648, "intersect": [648, 698, 712, 724], "signed_integ": 648, "real_and_complex": 648, "float_and_complex": 648, "general_help": 649, "apply_safety_factor": 649, "embedding_help": 649, "get_axi": [649, 712], "allow_neg": 649, "sort_valu": 649, "force_tupl": 649, "force_int": 649, "assertionerror": [649, 693, 703, 711, 712], "get_bound": [649, 712], "get_mean_std": 649, "matrix_is_st": 649, "cond_limit": 649, "instabl": [649, 699], "computation": [649, 690], "heavi": [649, 690, 710, 711, 715, 733], "prone": 649, "thumb": 649, "But": [649, 697, 698, 702, 704, 707, 715, 722], "perfectli": [649, 684], "gradual": 649, "strong": [649, 683, 725, 732], "collinear": 649, "reshape_shap": [649, 712], "subset": [649, 694, 698, 702, 705, 708, 710, 712, 717, 732], "x_and_filt": 649, "number_help": 650, "arbitrarili": [650, 720], "safety_factor": 650, "pipeline_help": 651, "withbackendcontext": 651, "get_frontend_config": 651, "update_backend": [651, 711], "frontendmethoddata": 652, "ivy_init_modul": 652, "framework_init_modul": 652, "init_nam": 652, "test_parameter_flag": 653, "frontendfunctiontestflag": 653, "generate_frontend_arrai": [653, 654], "testflag": 653, "apply_flag": 653, "args_to_iter": 653, "frontendmethodtestflag": 653, "initmethodtestflag": 653, "methodtestflag": 653, "build_flag": 653, "frontend_function_flag": 653, "frontend_method_flag": 653, "function_flag": 653, "init_method_flag": 653, "testing_help": 654, "handle_frontend_method": [654, 711, 712], "class_tre": [654, 711], "init_tre": [654, 711], "init_native_arrai": 654, "_as_varaible_strategi": 654, "method_native_arrai": 654, "_given_kwarg": 654, "wrapper": [654, 694, 696, 697, 699, 703, 706, 709, 710, 719, 727, 728, 732], "handle_frontend_test": [654, 711, 712], "number_positional_arg": [654, 711], "test_with_out": [654, 711], "test_inplac": 654, "handle_method": [654, 712], "method_tre": [654, 711, 712], "_gradient_strategi": 654, "_compile_strategi": 654, "handle_test": [654, 712], "test_instance_method": 654, "num_positional_args_method": 654, "geglu": 658, "leakyrelu": 658, "logsoftmax": 658, "moduleconvert": [659, 664], "from_flax_modul": 659, "native_modul": 659, "params_fx": 659, "rng_seed": 659, "constructor_arg": 659, "constructor_kwarg": 659, "instance_arg": 659, "instance_kwarg": 659, "flax": [659, 684, 722, 725, 732], "from_haiku_modul": 659, "params_hk": 659, "from_keras_modul": 659, "from_paddle_modul": 659, "paddl": [659, 671, 689, 690], "from_torch_modul": 659, "dedic": [659, 705, 715, 719, 721], "to_ivy_modul": [659, 722], "native_module_class": 659, "modulehelp": [660, 664], "check_submod_ret": 660, "expected_submod_ret": [660, 664], "get_mod_kei": 660, "top_mod": 660, "explicit": [660, 690, 697, 699, 708, 709, 710, 711, 717, 725, 732], "mod_depth": 660, "mod_height": 660, "mod_with_top_mod_key_chain": 660, "flatten_key_chain": 660, "iimedi": 660, "parent": [660, 689, 698, 719], "show_mod_in_top_mod": 660, "upper_depth": 660, "lower_depth": 660, "coverag": [660, 699, 712], "prompt": [660, 689, 691], "show_structur": 660, "this_repr": 660, "show_v_in_top_v": 660, "perspect": 660, "top_v": 660, "sub_mod": 660, "show_v": 660, "comopos": 660, "enumer": [660, 680], "track_submod_call_ord": [660, 664], "track_submod_ret": [660, 664], "v_with_top_v_key_chain": 660, "create_vari": [661, 721], "var_shap": [661, 721], "fan_out": [661, 721], "fan_in": [661, 721], "rectangular": 661, "firstlayersiren": 661, "siren": 661, "distribt": 661, "glorotuniform": [661, 662, 721], "glorot": 661, "xavier": 661, "neuron": 661, "w_1x_1": 661, "w_2x_2": 661, "w_nx_n": 661, "w_i": 661, "vanish": 661, "explod": [661, 681, 682], "big": [661, 685, 725, 732], "pick": 661, "abstract": [661, 666, 682, 697, 699, 709, 710, 712, 715, 721, 725, 730, 732, 734, 735, 739], "kaimingnorm": 661, "fan_mod": [661, 721], "kaim": 661, "he": 661, "center": 661, "negative_slop": 661, "fan": 661, "propog": 661, "fan_sum": [661, 721], "proport": 661, "Ones": 661, "randomnorm": 661, "stddev": 661, "w0": 661, "gain": [661, 691, 693, 716, 721, 732], "wlim": 661, "predefin": 661, "initialz": 661, "fan_avg": 661, "adaptiveavgpool1d": 662, "adaptiveavgpool2d": 662, "avgpool1d": 662, "implicit": [662, 697, 702, 710, 712, 717, 732], "avgpool2d": 662, "avgpool3d": 662, "input_channel": [662, 680, 717, 721], "output_channel": [662, 680, 721], "filter_s": 662, "weight_initi": [662, 721], "bias_initi": [662, 721], "conv1dtranspos": 662, "filter_shap": 662, "conv2dtranspos": 662, "conv3dtranspos": 662, "depthwiseconv2d": 662, "num_channel": 662, "bernoul": 662, "num_embed": 662, "embedding_dim": 662, "padding_idx": 662, "lookup": 662, "num_embeddingss": 662, "whenev": [662, 691, 695, 698, 699, 703, 709, 712, 714, 720], "encount": [662, 689, 699, 703, 712], "renorm": 662, "insensit": 662, "num_lay": 662, "return_sequ": 662, "return_st": 662, "get_initial_st": 662, "connect": [662, 683, 690, 721, 722, 730], "maxpool1d": 662, "maxpool2d": [662, 680], "maxpool3d": 662, "multiheadattent": 662, "embed_dim": 662, "head_dim": 662, "dropout_r": 662, "use_proj_bia": 662, "attention_ax": 662, "build_mod": [662, 663, 664], "on_init": [662, 664], "parallel": [662, 696, 732, 736, 737], "binarycrossentropyloss": 663, "store_var": [663, 664], "fallback_to_non_compil": [663, 664, 666], "fall": [663, 664, 666, 689, 699, 716], "with_partial_v": [663, 664], "crossentropyloss": 663, "logpoissonloss": 663, "modulemeta": 664, "submod_depth": 664, "submods_to_track": 664, "varibl": 664, "temporarili": [664, 693], "from_cal": 664, "trigger": [664, 689, 704], "successfulli": [664, 690, 694], "built_": 664, "compile_kwarg": 664, "_unified_ivy_graph": 664, "_call": 664, "save_weight": 664, "weights_path": 664, "show_graph": 664, "randomness_factor": 664, "save_to_disk": 664, "notebook": 664, "with_edge_label": 664, "with_arg_label": 664, "with_output_label": 664, "output_connected_onli": 664, "highlight_subgraph": 664, "fname": [664, 720], "batchnorm2d": 665, "num_featur": 665, "affin": 665, "track_running_stat": 665, "trail": 665, "layernorm": 665, "normalized_shap": 665, "elementwise_affin": 665, "set_stat": [666, 721], "init_on_first_step": 666, "ignore_miss": 666, "privat": [666, 710, 712], "_step": [666, 721], "miss": [666, 689, 690, 694, 697, 698, 701, 710, 712, 715], "sgd": [666, 732], "stochast": [666, 732], "sub_modul": 667, "check_al": 668, "messag": [668, 675, 679, 683, 690, 691, 698, 701, 703, 704, 710, 717, 719], "check_all_or_any_fn": 668, "check_ani": 668, "check_dev_correct_format": 668, "check_dimens": 668, "check_elem_in_list": [668, 706, 709, 710], "elem": 668, "check_equ": [668, 710], "check_exist": 668, "check_fals": 668, "check_fill_value_and_dtype_are_compat": [668, 713], "check_gather_input_valid": 668, "check_gather_nd_input_valid": 668, "check_great": 668, "allow_equ": [668, 703], "check_inplace_sizes_valid": [668, 709], "check_isinst": 668, "allowed_typ": 668, "check_kernel_padding_s": 668, "padding_s": 668, "check_less": [668, 703], "check_one_way_broadcast": 668, "check_same_dtyp": 668, "check_shapes_broadcast": 668, "check_tru": 668, "check_unsorted_segment_min_valid_param": 668, "ast_help": 670, "importtransform": 670, "nodetransform": 670, "impersonate_import": 670, "tree": [670, 686, 699], "local_ivy_id": 670, "visit_import": 670, "visit_importfrom": 670, "ivyload": 670, "loader": [670, 680, 720, 725], "exec_modul": 670, "ivypathfind": 670, "metapathfind": 670, "find_spec": 670, "fullnam": 670, "contextmanag": 671, "choose_random_backend": 671, "convert_from_numpy_to_target_backend": 671, "variable_id": 671, "numpy_obj": 671, "convert_from_source_backend_to_numpi": 671, "current_backend": [671, 689, 703, 706, 711, 713, 717], "global_backend": 671, "py": [671, 680, 689, 690, 691, 693, 695, 698, 699, 700, 702, 703, 704, 705, 706, 710, 711, 712, 713, 717, 719, 721, 722], "fn_name_from_version_specific_fn_nam": 671, "prevent_access_loc": 671, "previous_backend": [671, 695], "unset": [671, 695, 717], "op": [671, 713, 717, 725], "eagertensor": [671, 711], "subsequ": [671, 690, 694, 698, 699, 701, 705, 706, 709, 712, 721, 733], "Or": [671, 680, 687, 709, 720], "jaxlib": [671, 690, 694, 699, 700, 705, 713, 717, 719], "xla_extens": [671, 694, 699, 700, 705, 713, 717, 719], "arrayimpl": 671, "set_backend_to_specific_vers": 671, "set_jax_backend": 671, "set_mxnet_backend": 671, "mxnet": [671, 683, 689, 690, 739], "mx": 671, "set_numpy_backend": 671, "set_paddle_backend": 671, "set_tensorflow_backend": 671, "set_torch_backend": 671, "unset_backend": [671, 695], "with_backend": 671, "sub_backend_handl": 672, "available_sub_backend": 672, "clear_sub_backend": 672, "find_available_sub_backend": 672, "sub_backends_loc": 672, "set_sub_backend": 672, "sub_backend_str": 672, "unset_sub_backend": 672, "dynamic_import": 673, "import_modul": [673, 717], "packag": [673, 680, 686, 690, 698, 710, 725, 726, 732, 734], "einsum_pars": 674, "convert_interleaved_input": 674, "interleav": 674, "convert_subscript": 674, "old_sub": 674, "symbol_map": 674, "subscript": 674, "oe": 674, "ellipsi": 674, "find_output_shap": 674, "find_output_str": 674, "canon": 674, "gen_unused_symbol": 674, "symbol": [674, 689, 690, 732, 733], "abd": 674, "get_symbol": 674, "letter": 674, "resort": 674, "unicod": 674, "charact": [674, 683, 710], "chr": 674, "surrog": 674, "\u0155": 674, "20000": 674, "\u4eac": 674, "has_valid_einsum_chars_onli": 674, "einsum_str": 674, "abaz": 674, "\u00f6ver": 674, "is_valid_einsum_char": 674, "\u01f5": 674, "legalise_einsum_expr": 674, "reproduct": 674, "pars": [674, 696, 701, 725], "intak": 674, "contract_path": 674, "parse_einsum_input": 674, "einsum_eqn": 674, "legalis": 674, "legalise_einsum_eqn": 674, "za": 674, "xza": 674, "xz": 674, "possibly_convert_to_numpi": 674, "thing": [674, 682, 683, 684, 688, 689, 690, 691, 695, 710, 712, 715, 719, 720, 732], "everyth": [674, 680, 684, 689, 690, 691, 692, 698, 701, 709, 710, 711, 712, 718, 725, 726], "myshap": 674, "__main__": 674, "0x10f850710": 674, "invalidbackendexcept": 675, "include_backend": [675, 703], "ivyattributeerror": [675, 703], "attributeerror": [675, 703, 719], "ivybroadcastshapeerror": [675, 703], "ivydeviceerror": 675, "ivydtypepromotionerror": [675, 703], "ivyerror": [675, 680, 703], "ivyindexerror": [675, 703], "ivynotimplementedexcept": [675, 703], "notimplementederror": 675, "ivyvalueerror": [675, 703], "handle_except": [675, 705, 707], "add_array_spec": 676, "fn_array_spec": 676, "set_logging_mod": 677, "debug": [677, 690, 691, 697, 698, 708, 712, 715, 720, 732], "info": [677, 680, 696, 702, 704], "unset_logging_mod": 677, "recent": [677, 682, 683, 690, 691, 712], "print_stat": 678, "viz": 678, "visual": [678, 680, 690, 710, 712, 725, 732, 734, 737], "snakeviz": 678, "bonu": 678, "cprofil": 678, "cprint": [679, 717], "straight": [680, 698, 710, 712, 719], "awai": [680, 730, 732], "dive": [680, 685, 687, 688, 689, 691, 693, 697, 699, 704, 711, 716, 719, 720, 725, 738], "grow": [680, 732], "guid": [680, 685, 689, 690, 691, 696, 704, 710, 738], "own": [680, 683, 684, 690, 693, 698, 699, 702, 703, 709, 710, 713, 717, 725, 727, 728, 731, 732, 737, 738], "variou": [680, 691, 693, 698, 699, 702, 703, 705, 707, 708, 710, 711, 712, 724, 726, 727, 728, 730, 731, 732, 735, 738], "perk": [680, 694, 697], "essenti": [680, 682, 683, 689, 695, 697, 700, 701, 706, 709, 710, 711, 738], "mainli": [680, 689, 692, 708, 710, 712, 718, 720, 727, 732], "handler": [680, 716, 718, 722, 727], "behind": [680, 692, 705, 712, 716, 718], "scene": [680, 681, 682, 692, 716, 718, 732], "facilit": [680, 706], "agnost": [680, 694, 705, 717, 719, 722, 725, 738, 739], "mse_loss": 680, "jax_ms": 680, "tf_mse": 680, "np_mse": 680, "torch_ms": 680, "regressor": 680, "input_dim": 680, "output_dim": 680, "_build": 680, "linear0": [680, 720, 721], "linear1": [680, 720, 721], "_forward": [680, 702, 717, 720, 721], "easili": [680, 683, 690, 694, 698, 710, 715, 720, 721, 722, 725, 732, 738, 739], "favorit": 680, "n_training_exampl": 680, "loss_fn": [680, 720, 721, 722], "epoch": 680, "5f": 680, "finish": [680, 685, 689, 690, 692], "usabl": [680, 705, 713], "topic": [680, 707, 719, 732], "mechan": [680, 698, 723, 725], "vision": [680, 686, 723, 728, 738], "robot": [680, 723], "reinforc": [680, 724], "gym": 680, "builder": [680, 687, 723, 725, 727], "trainer": [680, 684, 723, 725, 739], "break": [680, 695, 699, 705, 713, 725], "highli": [680, 732], "flexibl": [680, 697, 699, 705, 708, 713, 715, 732], "everyon": [680, 684, 685, 689, 690, 691, 725], "plan": [680, 724, 726], "interoper": [680, 683, 729, 730, 732, 735], "easiest": [680, 687, 690, 726], "command": [680, 687, 690, 693, 696, 698, 704, 726], "python3": [680, 686, 690, 691], "pre": [680, 686, 689, 712, 722, 725, 726, 732], "pull": [680, 684, 685, 686, 689, 690, 693, 701, 704, 713, 715, 725, 726], "unifyai": [680, 686, 687, 690, 691, 696, 726], "sweat_smil": 680, "git": [680, 686, 687, 688, 690, 691, 693, 696, 698, 704, 712, 726], "clone": [680, 686, 687, 691, 726], "com": [680, 686, 687, 690, 693, 696, 698, 699, 726], "cd": [680, 686, 687, 690, 691, 726], "page": [680, 689, 690, 691, 696, 698, 718, 719, 722, 723, 726], "instruct": [680, 689, 690, 693, 703, 704, 711, 712, 726, 730, 733, 736, 738], "video": [680, 685, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 726, 730], "tutori": [680, 691, 710, 726], "quit": [680, 691, 694, 701, 702, 706, 707, 712, 715, 732, 738], "lot": [680, 683, 684, 698, 699, 707, 712, 725, 731], "jax_fn": 680, "jax_x": 680, "torch_x": 680, "torch_fn": 680, "focus": [680, 713, 724, 730, 731, 732, 738, 739], "architectur": [680, 690, 722, 725, 730, 731, 732, 735, 736, 737], "orient": [680, 724], "contributor": [680, 685, 689, 690, 691, 710, 716, 732], "nuanc": 680, "background": [680, 690, 696, 732, 734], "contextualis": 680, "problem": [680, 683, 691, 693, 694, 695, 700, 710, 719, 728, 734, 738], "explos": [680, 681, 683], "why": [680, 681, 683, 691, 709, 719], "adher": [680, 682, 683, 693, 699, 702, 705, 715, 717, 722, 728, 729, 738], "lastli": [680, 694], "paint": [680, 682, 717], "pictur": [680, 682, 689, 717], "role": [680, 691, 710, 718, 733, 735, 739], "wide": [680, 691, 712, 730, 732], "demo": [680, 686, 724], "showcas": [680, 724], "shorter": [680, 719], "ensp": 680, "eff_encod": 680, "efficientnet_v2": 680, "efficientnetv2b0": 680, "include_top": 680, "imagenet": 680, "torch_eff_encod": 680, "customiz": [680, 696], "script": [680, 686, 690, 691, 698, 701, 717, 725, 732], "deepmind_perceiver_io": 680, "perceiver_backbon": 680, "dummy_input": 680, "backbon": [680, 717, 720], "perceiverioclassifi": 680, "max_pool": 680, "1024": 680, "sm_framework": 680, "segmentation_model": 680, "sm": 680, "torch_sm": 680, "metric": [680, 725], "iou_scor": 680, "rax": 680, "torch_rax": 680, "poly1_softmax_loss": 680, "madmom": 680, "madmon": 680, "torch_madmom": 680, "freq": 680, "audio": 680, "hz2midi": 680, "reduce_mean": [680, 720, 721, 722], "torch_loss": 680, "output_dens": 680, "maxpooling1d": 680, "pool_siz": 680, "tf_kornia": 680, "sharp": 680, "tf_rax": 680, "tf_madmom": 680, "tf_loss": 680, "hk_eff_encod": 680, "dummy_x": 680, "jax_sm": 680, "jax_madmom": 680, "jax_loss": 680, "jax_enable_x64": 680, "np_kornia": 680, "np_sm": 680, "np_rax": 680, "np_loss": 680, "yourself": [680, 689, 691, 704, 712, 715, 724], "anyon": [680, 683, 685, 691, 698, 725, 738], "classif": [680, 732], "ivynet": 680, "h_w": 680, "extractor": 680, "image_height": 680, "image_width": 680, "favourit": [680, 690], "pure": [680, 702, 705, 710, 715, 719, 722, 725, 732, 738, 739], "generate_batch": 680, "dataset_s": 680, "y_train": 680, "num_correct": 680, "y_pred": 680, "hyperparam": 680, "num_epoch": 680, "model_nam": 680, "epoch_loss": 680, "running_loss": 680, "training_accuraci": 680, "train_loss": 680, "train_correct": 680, "train_loop": 680, "tqdm": 680, "xbatch": 680, "ybatch": 680, "ybatch_encod": 680, "loss_prob": 680, "batch_loss": 680, "set_descript": 680, "set_postfix": 680, "accuracy_percentag": 680, "naverag": 680, "6f": 680, "plot": [680, 732], "_train_summari": 680, "csv": 680, "writer": 680, "writerow": 680, "prepar": [680, 698], "folder": [680, 686, 690, 691, 693, 696, 698, 706, 710, 712, 713, 714], "believ": [680, 683, 691], "feedback": [680, 698], "welcom": [680, 685, 690, 691], "appreci": 680, "amaz": 680, "acceler": [680, 710, 730, 734, 735, 736, 737], "journei": [680, 685], "achiev": [680, 698, 699, 707, 712, 715, 720, 722, 727], "ambiti": 680, "season": 680, "perfect": [680, 724], "idea": [680, 684, 686, 689, 713, 718, 724, 731], "fellow": 680, "twitter": 680, "sneak": 680, "peek": 680, "certainli": [680, 683, 738], "great": [680, 683, 684, 691, 712, 717, 719, 738], "stai": [680, 698], "credit": 680, "accompani": 680, "articl": [680, 704], "lenton2021ivi": 680, "titl": [680, 689, 691, 696], "templat": [680, 696, 702, 712], "inter": [680, 711], "author": [680, 689, 691, 730, 734], "lenton": 680, "daniel": 680, "pardo": 680, "fabio": 680, "falck": 680, "fabian": 680, "jame": 680, "stephen": 680, "clark": 680, "ronald": 680, "journal": 680, "arxiv": 680, "preprint": 680, "2102": 680, "02886": 680, "year": [680, 682, 684, 693, 725, 732], "huge": [681, 683, 698, 720, 732, 738], "collabor": [681, 682, 683], "consortium": [681, 683], "grown": 682, "consider": [682, 689, 701, 705, 715, 729, 730], "especi": [682, 690, 695, 732], "rapidli": 682, "repo": [682, 686, 688, 691, 693, 696, 698, 699, 711, 712], "wonder": [682, 684, 719], "evolv": [682, 732], "shareabl": 682, "hinder": [682, 705], "outdat": 682, "matter": [682, 701], "month": [682, 690], "rigor": [682, 712], "newest": 682, "softwar": [682, 683, 690, 691, 730, 735, 736, 737], "rapid": [682, 683, 690, 732], "prototyp": [682, 732], "vital": [682, 722], "signific": [682, 683, 714, 725, 732], "bottleneck": 682, "quickli": [682, 684, 690, 691, 698, 720, 721, 732, 739], "obsolet": [682, 684], "constantli": [682, 715], "invent": 682, "wheel": 682, "simultan": [682, 684], "modern": [682, 683, 708, 737], "scalabl": [682, 717, 737, 738], "languag": [682, 684, 710, 717, 727, 730, 733, 735, 736, 737, 738], "front": [682, 710, 716, 717, 720, 730, 732], "runner": 682, "littl": [682, 719, 734], "principl": [682, 730, 732, 735], "almost": [682, 688, 697, 711, 718, 720], "syntax": [682, 683, 699, 732], "unsurprisingli": [682, 701], "fundament": [682, 698, 710, 715, 717, 732], "2006": 682, "cloth": 682, "central": [683, 689, 704, 715, 738], "forgiven": 683, "eyebrow": 683, "somehow": 683, "industri": [683, 732, 734], "wors": 683, "funni": 683, "comic": 683, "strip": 683, "easi": [683, 690, 691, 694, 695, 697, 706, 708, 711, 712, 715, 730, 732, 738, 739], "charger": 683, "instant": 683, "mandat": [683, 699, 709, 712, 713], "adopt": [683, 691, 694, 705, 715, 731, 732, 737], "despit": [683, 697, 699, 700, 711, 717, 729, 732], "bring": [683, 693, 712, 717, 718, 727], "benefit": [683, 684, 690, 694, 697, 709, 715, 719, 720, 725, 730, 734, 737], "unrel": [683, 691], "contrari": 683, "bumpi": 683, "road": 683, "allud": [683, 720], "technologi": [683, 730, 734], "thank": [683, 720], "bio": [683, 690], "pcie": 683, "motherboard": 683, "raid": 683, "storag": [683, 720], "virtual": [683, 686, 691, 710, 735, 736], "bluetooth": 683, "wireless": 683, "exchang": [683, 688, 728, 730], "btx": 683, "sata": 683, "host": [683, 687, 698, 725, 737], "websit": [683, 690, 693], "tcp": 683, "ip": 683, "commun": [683, 685, 689, 690, 691, 725, 731, 732, 734], "smtp": 683, "send": [683, 737], "gmail": [683, 698], "outlook": 683, "pop": [683, 690], "email": [683, 698], "live": [683, 684, 695, 696, 699, 728, 730], "did": [683, 689, 696, 722, 738], "aris": [683, 699, 704, 725], "substanti": [683, 691, 694, 699, 712, 732], "innov": 683, "growth": [683, 735], "necess": 683, "parti": [683, 696, 725, 731, 732, 738], "engag": [683, 685, 691], "regard": [683, 688, 697, 710, 711, 715], "2015": [683, 732], "frame": [683, 724, 732], "matur": [683, 725, 732], "preced": [683, 721], "aros": 683, "effort": [683, 685, 689, 725, 728, 732, 738], "stage": [683, 685, 691, 692, 696, 712, 732], "mission": [683, 734], "At": [683, 689, 690, 693, 712, 713, 732], "ourselv": [683, 738], "quansight": [683, 738], "compani": [683, 728], "organ": [683, 694, 697, 706, 710, 713, 727], "panda": 683, "scipi": [683, 689, 734, 739], "conda": [683, 690, 734], "apach": [683, 734, 738], "onnx": [683, 730, 738], "scikit": 683, "jupyt": [683, 734], "cupi": [683, 732, 739], "net": [683, 684, 717, 722], "sympi": 683, "modin": 683, "spyder": 683, "googl": [683, 698], "octoml": [683, 738], "sponsor": 683, "lg": 683, "electron": 683, "shaw": 683, "intel": [683, 690, 730, 737], "promis": 683, "pursuit": 683, "unif": [683, 685, 719, 728, 738], "clearli": [683, 689, 691, 701, 711, 712, 736], "thought": [683, 690, 691, 705, 730], "care": [683, 691, 700, 710, 715, 722], "gone": [683, 716], "excit": [683, 685, 692], "complianc": 683, "hope": [683, 725, 738], "suit": [683, 690, 692, 693, 698, 712, 720, 724, 727, 732, 738], "motiv": [683, 719], "convinc": 683, "celebr": 683, "encourag": [683, 704, 724, 725], "foundat": [683, 735], "happi": [684, 690, 725], "abund": 684, "better": [684, 686, 689, 692, 710, 711, 713, 715, 716, 719, 720, 721, 735], "streamlin": [684, 735], "workflow": [684, 689, 691, 695, 699, 708, 710, 720, 723, 727, 731, 738, 739], "week": [684, 691], "sai": [684, 689, 690, 707, 719], "deepmind": 684, "releas": [684, 689, 690, 699, 713, 715, 725, 732, 738], "awesom": 684, "love": 684, "perceiverio": 684, "slew": 684, "rush": 684, "inevit": [684, 733], "often": [684, 688, 693, 703, 705, 706, 710, 712, 725, 733, 736, 739], "erron": 684, "poor": 684, "repositori": [684, 686, 687, 690, 691, 692, 693], "confus": [684, 699, 703, 709, 715, 727], "hour": [684, 698], "spent": 684, "spin": 684, "discuss": [684, 689, 691, 696, 699, 700, 709, 710, 712, 715, 718, 719, 720, 725, 728, 733], "sake": 684, "few": [684, 688, 689, 691, 697, 699, 700, 705, 706, 708, 709, 712, 715, 717, 718, 719, 720, 721, 723, 732, 734], "wouldn": 684, "nice": [684, 712, 732], "frantic": 684, "lucid": 684, "honk": 684, "understand": [684, 686, 688, 689, 690, 691, 692, 693, 696, 701, 702, 705, 711, 716, 728, 738], "hasn": 684, "spend": [684, 732], "torchvis": 684, "sonnet": 684, "statu": [684, 689, 698, 704], "quo": 684, "dopamin": 684, "ignit": 684, "catalyst": 684, "lightn": 684, "fastai": 684, "trax": [684, 722], "objax": [684, 722], "offer": [684, 706, 710, 721, 732, 738, 739], "strongli": [685, 690, 710, 738, 739], "skill": [685, 734], "veteran": 685, "beginn": [685, 732], "aspect": [685, 708, 720, 732], "board": [685, 696], "basic": [685, 689, 701, 712], "local": [685, 686, 690, 693, 696, 706, 711, 712], "resourc": [685, 689, 690, 698], "slightli": [686, 697, 710, 717, 721], "setup": [686, 690, 691, 696, 698], "mech": [686, 687], "grasp": [686, 710], "dir": [686, 720], "mutual": [686, 697, 706], "venv": 686, "ivy_dev": [686, 690, 691], "bat": [686, 690, 691], "mac": [686, 690, 691], "linux": [686, 690, 691, 735, 737], "instal": [686, 687, 690, 691, 695, 696, 704, 724], "edit": [686, 689, 690, 691, 704], "pip": [686, 690, 696, 704, 724], "immedi": [686, 690], "ivy_robot": [686, 724], "docker": [686, 688], "desktop": [686, 690], "my": [686, 698], "mount": [686, 687, 691], "rm": [686, 687, 691], "pwd": [686, 687], "pycharm": [686, 712], "vscode": [686, 690], "devcontain": [686, 690], "remot": [686, 690, 693, 704], "codespac": 686, "good": [686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 717, 718, 721], "commit": [686, 689, 693, 701, 712], "make_doc": 687, "sh": [687, 690, 691, 693, 698], "ssh": [687, 698], "make_docs_without_dock": [687, 696], "sphinx": [687, 696], "resours": 688, "climb": 688, "steep": 688, "curv": 688, "realpython": 688, "pyn": 688, "platform": [688, 730, 734, 736], "stuck": [688, 689], "spell": 688, "though": [688, 689, 691, 699, 700, 702, 706, 709, 710, 715, 720, 725], "sound": [688, 698, 716], "peopl": [688, 690, 691, 692, 732, 734], "action": [688, 698, 701, 704, 712], "frequent": [689, 691, 695, 732], "outlin": [689, 690, 691, 692, 697, 699, 702, 706, 709, 710, 712], "broad": [689, 734], "individu": [689, 691, 693, 695, 699, 706, 710, 732, 735, 738, 739], "explan": [689, 690, 691, 697, 702, 705, 710, 713, 719], "focu": [689, 708, 730, 731, 734, 739], "pypi": [689, 690, 713, 725], "familiar": [689, 690], "sure": [689, 690, 691, 693, 698, 703, 710, 711, 712, 715, 726], "aforement": 689, "categori": [689, 693, 694, 697, 699, 703, 710, 713, 716], "arraywithelementwis": [689, 694, 719], "containerwithmanipul": 689, "thorough": [689, 702, 705, 712], "comment": [689, 690, 691, 693, 699, 704, 710, 715], "add_reformatting_checklist_": 689, "category_nam": [689, 699, 700, 702, 705, 706], "pr": [689, 691, 693, 704, 710, 711, 712], "autom": [689, 698, 704, 712, 727, 734], "bot": [689, 704], "markdown": [689, 696], "patient": [689, 690], "emoji": 689, "legend": 689, "review": [689, 691, 698, 701, 710, 713], "checkbox": [689, 690], "proce": [689, 690], "elabor": 689, "struggl": 689, "assigne": 689, "status": 689, "refrain": 689, "mindspor": 689, "subsect": [689, 690, 691, 693, 698], "verifi": [689, 699, 700, 710, 712, 713], "assess": [689, 715], "merg": [689, 691, 693, 698, 710, 732], "composition": 689, "pend": 689, "helpfulli": [689, 715, 730], "problemat": [689, 690], "unimpl": 689, "issue_link": 689, "alias_nam": 689, "push": [689, 691, 693, 711, 712, 738], "liner": 689, "meanwhil": [689, 698], "reselect": 689, "placement": 689, "categoris": [689, 693, 710], "faithfulli": 689, "creation_routin": [689, 711], "indexing_routin": 689, "ma": 689, "manipulation_routin": 689, "mathematical_funct": [689, 710], "sorting_searching_count": 689, "ufunc": [689, 710], "matrix_and_vector_product": 689, "matrix_eigenvalu": 689, "norms_and_other_numb": 689, "solving_equations_and_inverting_matric": 689, "seem": [689, 690, 715, 721, 722, 725, 732], "gleam": 689, "uncom": 689, "test_numpy_inn": 689, "test_frontend": [689, 698, 711], "unsur": [689, 712], "explor": [689, 690, 691, 699, 715, 718, 722, 724, 732, 735], "confirm": 689, "worri": [689, 690, 704], "readi": [689, 690], "analyz": [689, 727], "relevant_submodul": 689, "invit": [689, 710, 715], "roadmap": [689, 698], "think": [689, 691, 698, 701, 715, 733], "deem": [689, 710], "subtask": 689, "funcion": 689, "defer": [689, 694, 699, 700, 706, 709, 710, 712, 738], "clearer": [689, 703, 711, 720], "backend_nam": [689, 695, 699, 700, 702, 705, 706, 707], "approach": [689, 690, 691, 694, 697, 699, 706, 710, 712, 713, 715, 719, 720, 725, 729, 736, 738], "implementaion": 689, "compost": 689, "sometim": [689, 690, 691, 693, 699, 706, 710, 712, 715], "standalon": [689, 694, 712, 727, 728, 733, 738, 739], "conveni": [689, 699, 700, 705, 711, 718, 720, 721, 727, 738], "rare": [689, 700, 725, 737], "come": [689, 690, 691, 694, 698, 710, 714, 715, 721, 723, 727, 732], "tab": [689, 690, 698, 720], "click": [689, 690, 691, 698, 702, 704, 718], "button": [689, 690, 691], "centr": 689, "predetermin": 689, "report": [689, 712], "superset": [689, 692, 709, 725], "reserv": 689, "interact": [689, 731, 732, 737], "submit": [689, 704], "your_usernam": 690, "your_fold": 690, "enter": [690, 691, 694, 699, 700, 705, 707], "sync": [690, 693], "nutshel": [690, 705], "hook": [690, 704], "lint": 690, "attempt": [690, 714, 725], "properli": [690, 692, 703, 704, 710, 712], "cours": [690, 691, 693, 694, 701, 709, 710, 715, 720, 725, 737, 738], "whatev": [690, 697, 725], "elig": 690, "student": 690, "licenc": 690, "remind": 690, "licens": [690, 735], "expir": 690, "profession": 690, "trial": 690, "jetbrain": 690, "bui": [690, 738], "paid": 690, "pace": 690, "person": [690, 691], "experi": [690, 703, 712, 718, 720, 725], "abil": [690, 715, 718, 725, 732], "perhap": [690, 719, 720, 721, 725, 738], "icon": [690, 691], "panel": 690, "palett": 690, "ctrl": [690, 691], "On": [690, 699, 700, 704, 710, 712, 715, 718, 722], "m1": 690, "optional_m1_1": 690, "optional_m1_2": 690, "builtin": [690, 719, 721], "cmd": 690, "virtualenv": 690, "tick": [690, 691, 698], "paddlepaddl": 690, "wget": 690, "nz2": 690, "archiv": 690, "openssl": 690, "libssl1": 690, "1_1": 690, "1f": 690, "1ubuntu2": 690, "19_amd64": 690, "deb": 690, "sudo": 690, "dpkg": 690, "array_api_test": [690, 691, 693], "test_array_api": [690, 691, 693, 712], "mitig": [690, 738], "conflict": [690, 691, 698, 710, 720], "powershel": 690, "admin": 690, "visit": [690, 691, 698], "menu": 690, "tag": [690, 691], "introspect": 690, "usr": 690, "dialog": 690, "persist": 690, "opt": [690, 695, 699, 709, 712, 715], "caus": [690, 691, 693, 695, 697, 698, 699, 701, 709, 711, 712, 725], "earlier": [690, 691, 699, 713], "virtualis": 690, "dropdown": [690, 698], "dockerfil": 690, "navig": [690, 691, 692], "apt": 690, "ca": 690, "certif": 690, "curl": 690, "gnupg": 690, "lsb": 690, "mkdir": [690, 698], "keyr": 690, "fssl": 690, "gpg": 690, "dearmor": 690, "arch": 690, "lsb_releas": 690, "tee": 690, "null": 690, "ce": 690, "cli": 690, "containerd": 690, "io": [690, 698], "plugin": 690, "systemctl": 690, "permiss": [690, 698], "press": [690, 691, 720], "ok": 690, "successful": 690, "4a": 690, "socket": 690, "chmod": [690, 698], "rwx": 690, "sock": 690, "pid": 690, "coupl": [690, 694, 719, 721, 732], "test_ab": [690, 712], "editor": 690, "pytest": [690, 691, 693, 698, 707, 712], "keyboard": 690, "displai": [690, 696, 698, 703, 712, 720], "screenshot": 690, "test_elementwis": 690, "bar": 690, "shell": [690, 691], "run_tests_cli": [690, 693], "run_ivy_core_test": 690, "run_ivy_nn_test": 690, "run_ivy_stateful_test": 690, "run_test": [690, 698], "test_depend": 690, "test_ivy_cor": 690, "test_ivy_nn": 690, "test_ivy_st": 690, "unix": 690, "test_": [690, 711], "test_cor": [690, 691, 711], "bash": [690, 691, 693], "offici": [690, 699, 717], "wish": [690, 710], "ivy_cor": 690, "ivy_nn": 690, "ivy_st": 690, "simplest": [690, 701, 712, 715], "header": [690, 691], "advanc": [690, 731], "arrow": 690, "test_stat": 690, "test_submodule_nam": 690, "test_function_nam": 690, "debugg": 690, "studio": [690, 712], "afterward": [690, 720], "restart": 690, "overlap": [690, 698, 713, 715, 733], "test_file_path": 690, "test_fn_nam": 690, "engin": [690, 732, 734, 735], "comma": 690, "postcreatecommand": 690, "post_create_command": 690, "poststartcommand": 690, "safe": [690, 710], "containerworkspacefold": 690, "reopen": 690, "test_fle_path": 690, "slash": 690, "comfort": [690, 703], "isol": [690, 691, 733, 738], "fledg": [690, 717, 718], "container": 690, "intens": 690, "headach": 690, "arm": [690, 691], "vm": [690, 698], "azur": 690, "cloud": [690, 698, 724, 734], "longer": [690, 699, 709, 712, 732], "theme": [690, 696], "slow": 690, "ipad": 690, "browser": [690, 696], "quota": 690, "requisit": 690, "pane": [690, 691, 698], "six": [690, 715], "dockerfilegpu": 690, "ivv": 690, "multiv": 690, "multivers": [690, 713], "dockerfilemultivers": 690, "dockerhub": 690, "region": 690, "box": 690, "upto": [690, 691], "minut": [690, 698], "launch": 690, "kindli": 690, "guidelin": 690, "conatin": 690, "colour": 690, "chanc": 690, "troubleshoot": 690, "ever": [690, 709], "flask": 690, "toolbar": [690, 691], "_array_modul": [690, 693], "refresh": 690, "workspac": 690, "pytestarg": 690, "unittesten": 690, "pytesten": 690, "autotestdiscoveronsaveen": 690, "conftest": 690, "quick": [691, 692, 711, 721], "tendenc": 691, "land": 691, "world": [691, 734], "fly": [691, 732], "hard": [691, 719, 732], "respons": [691, 698, 699], "internship": 691, "serv": [691, 694, 697, 705, 706, 710, 711, 712, 715, 716, 727, 730], "suspect": 691, "iii": 691, "reformat": [691, 704], "experiment": [691, 699, 710, 713, 717, 732], "issue_numb": 691, "delet": [691, 698], "clean": [691, 713, 717, 718, 720], "rememb": 691, "respond": 691, "master": [691, 693, 698, 732], "dai": [691, 704], "freed": 691, "basi": [691, 693, 720], "situat": [691, 698, 722], "upon": [691, 701, 709, 712, 715, 725, 731, 732], "unabl": [691, 715], "obvious": [691, 698], "qualiti": 691, "hypothet": 691, "frustrat": 691, "busi": 691, "fine": [691, 699, 701, 710, 719, 722, 738], "inact": 691, "me": 691, "unfairli": 691, "investig": 691, "wherea": [691, 694, 695, 697, 699, 700, 701, 705, 706, 712, 722, 729], "practic": [691, 695, 698, 710, 735], "checkout": [691, 693, 712], "name_of_your_branch": 691, "date": 691, "complic": [691, 711, 717], "merge_with_upstream": 691, "abort": 691, "tediou": [691, 701, 715], "stash": [691, 704], "reinstat": 691, "fetch": [691, 693, 698], "uncommit": 691, "unstag": [691, 704], "untrack": 691, "comprehens": [691, 693], "atlassian": 691, "wrote": 691, "blame": 691, "revis": 691, "eg": 691, "grep": 691, "commit_id": 691, "handi": 691, "histori": 691, "toggl": 691, "highlight": [691, 698, 701, 710], "approv": 691, "someon": [691, 725], "hash": [691, 720], "cancel": 691, "speedup": 691, "unavail": 691, "tickbox": 691, "span": [691, 730, 738], "intent": [691, 709], "discourag": 691, "philosophi": 691, "valuabl": 691, "infrequ": 691, "earli": [691, 732], "wast": [691, 698], "spot": [691, 701, 706], "mistak": 691, "propos": [691, 710, 715, 732], "mountain": 691, "advoc": [691, 725], "actual": [691, 692, 698, 706, 707, 709, 710, 711, 712, 715, 716, 721, 725, 733, 738], "aim": [691, 693, 707, 710, 712, 716, 730, 732, 735], "session": [691, 732], "beauti": 691, "concern": [691, 692, 697, 699, 701, 709, 715, 716, 738], "undo": 691, "stress": 691, "nifti": 691, "reassur": 691, "fact": [691, 693, 698, 710, 712, 717, 720], "local_path_to_ivi": 691, "subfold": [691, 711, 712, 713], "dep": 691, "fresh": 691, "arsen": 691, "declar": 691, "exec": 691, "rf": 691, "cp": 691, "ivy_contain": 691, "test_imag": 691, "test_random_crop": 691, "test_creation_funct": 691, "test_arang": 691, "cursor": 691, "alt": 691, "blog": 691, "breakpoint": 691, "gutter": 691, "caret": 691, "f8": 691, "f9": 691, "Into": 691, "f7": 691, "smart": 691, "fragment": [691, 728, 730, 734], "pychram": 691, "dummi": 691, "wherein": [691, 706, 712], "failur": [691, 698, 711, 712], "who": [692, 703, 716, 725, 732, 734], "weed": [692, 716], "tour": 692, "goe": [692, 695, 704, 709, 715], "runtim": [692, 706, 712, 715, 732], "borrow": 692, "conjunct": 693, "establish": [693, 734], "2020": [693, 732], "popular": [693, 732], "sens": [693, 701, 710, 719], "unconnect": 693, "decis": [693, 699, 715, 717, 719, 732], "initialis": [693, 710, 712], "everytim": [693, 699], "thoroughli": 693, "test_linalg": [693, 711], "test_set_funct": 693, "test_signatur": 693, "excess": [693, 695, 701], "array_modul": 693, "vv": 693, "test_manipulation_funct": 693, "test_concat": [693, 712], "nb": 693, "liber": 693, "fortun": 693, "falsifi": [693, 712], "______________________": 693, "test_remaind": 693, "_______________________": 693, "test_operators_and_elementwise_funct": 693, "1264": 693, "1277": 693, "binary_param_assert_against_refimpl": 693, "ctx": 693, "mod": 693, "620": 693, "binary_assert_against_refimpl": 693, "324": 693, "scalar_o": 693, "17304064": 693, "binaryparamcontext": 693, "reproduce_failur": [693, 707, 712], "axic42baaowcnp": 693, "rumwmabaear0": 693, "make_binary_param": 693, "numeric_dtyp": 693, "left_strat": 693, "left_sym": 693, "right_strat": 693, "right_sym": 693, "right_is_scalar": 693, "binary_param_assert_dtyp": 693, "binary_param_assert_shap": 693, "recreat": 693, "unexpectedli": 693, "discrep": [693, 711], "varieti": [693, 698, 699, 700, 712, 714, 728, 730, 734, 735, 738, 739], "test_asarray_arrai": 693, "test_floor_divid": 693, "health": 693, "test_iop": 693, "__imod__": 693, "isequ": 693, "test_matrix_norm": 693, "alter": 693, "tweak": 693, "array_api_methods_to_test": 693, "test_trac": 693, "scheme": [693, 721, 732], "test_special_cas": 693, "__ipow__": 693, "is_integ": 693, "easier": [693, 694, 695, 699, 711, 713, 727, 732, 734], "revisit": [693, 705], "devicearrai": [694, 710, 717, 719], "_data": [694, 709, 710, 719], "organiz": [694, 697, 710], "inherit": [694, 697, 703, 719, 725, 727], "bear": [694, 697, 699, 710], "underpin": [694, 697, 717], "programmat": [694, 697, 733], "backup": [694, 696, 697], "accident": [694, 697, 710], "readabl": [694, 697, 703, 704, 705, 712, 713, 719, 720], "absent": [694, 697], "auto": [694, 696, 697, 704, 720], "__mul__": [694, 697, 701, 705, 715, 719], "throw": [694, 699, 700, 703, 719, 732], "imposs": 694, "inputs_to_native_arrai": [694, 706, 707], "outputs_to_ivy_arrai": [694, 699, 700, 705, 706, 707], "firstli": [694, 699, 701, 702, 703, 706, 707, 709, 715, 720, 728, 738], "anywai": [694, 707, 710], "secondli": [694, 699], "permit": [694, 705, 710, 712, 715], "__ivy_array_function__": 694, "inspir": [694, 724], "__torch_function__": 694, "myarrai": 694, "handled_funct": 694, "notimpl": 694, "four": [694, 699, 701, 705, 706, 712, 715, 720], "enough": [694, 698, 712, 719, 720, 721], "ivy_funct": 694, "my_ab": 694, "my_arrai": 694, "Of": [694, 709, 710, 720, 737, 738], "implicit_backend": [695, 717], "__dict__": [695, 709, 717], "ivy_original_dict": [695, 717], "get_backend": [695, 706], "fallback": 695, "challeng": [695, 738], "switch": [695, 703, 706, 707, 739], "scope": [695, 733, 737], "intermediari": 695, "illustr": [695, 717, 724], "set_dynamic_backend": 695, "unset_dynamic_backend": 695, "dynamic_backend_a": 695, "set_": 695, "unset_": 695, "technic": [695, 705, 709, 725, 732, 734], "setter": 695, "backend_handl": 695, "requires_grad": 695, "memory_format": 695, "preserve_format": 695, "weren": 695, "vast": [695, 699, 732], "minor": [695, 715, 725], "fn_name_v_1p12_and_abov": 695, "fn_name_v_1p01_to_1p1": 695, "heavili": [696, 707, 725], "characterist": 696, "conf": 696, "cleanup": 696, "disabl": 696, "procedur": [696, 698, 701, 711], "readm": [696, 725], "toctre": 696, "maxdepth": 696, "caption": 696, "related_work": 696, "deep_div": 696, "faq": 696, "glossari": 696, "autosummari": 696, "top_functional_toc": 696, "restructuredtext": 696, "render": [696, 702], "inlin": 696, "discov": [696, 699], "ivy_toctree_caption_map": 696, "stub": 696, "inturn": 696, "unfortun": [696, 704], "forc": [696, 698, 700], "linker": 696, "foo": 696, "discussion_channel_map": 696, "1000043690254946374": 696, "1028298816526499912": 696, "1000043749088436315": 696, "1028298847950225519": 696, "seri": [696, 710, 712, 732, 734], "discussion_paragraph": 696, "discord_link": 696, "channel_link": 696, "forum_link": 696, "gg": 696, "zvqdvbznqj": 696, "799879767196958751": 696, "channel_id": 696, "forum_id": 696, "paragraph": 696, "autoskippablemethod": 696, "skippable_method_attribut": 696, "__qualname__": 696, "autodoc": 696, "atribut": 696, "__doc__": 696, "autoivydata": 696, "containerwithelementwis": 697, "__repr__": 697, "__contains__": 697, "__getstate__": 697, "__setstate__": 697, "unpickl": 697, "num_dim": [697, 722], "__len__": 697, "enforc": [697, 719], "extern": [697, 705, 710, 712, 713], "lefthand": 697, "righthand": 697, "handle_nest": [697, 705, 706, 707, 717], "addition": [697, 709, 710, 738], "absenc": [697, 705, 732], "implicitli": [697, 708, 712, 717], "log_pr": [697, 706, 709], "intuit": [697, 712, 720, 721, 728], "chronolog": 697, "concurr": [697, 698, 706, 732], "had": [697, 698, 709, 713, 717, 732, 733], "implic": 697, "whatsoev": [697, 706, 727, 738], "eager": [697, 725, 732], "children": 697, "shallowest": 697, "deepest": 697, "regularli": 698, "rollback": 698, "incorpor": [698, 711, 720, 732], "fold": 698, "techniqu": 698, "triplet": 698, "test_torch": [698, 711], "test_tensor": [698, 711], "test_torch_instance_arctan_": 698, "12500": 698, "daili": 698, "shoot": 698, "ideal": [698, 710, 715, 720], "impact": [698, 712, 721, 734], "_reduce_loss": [698, 706, 709], "test_nn": 698, "test_loss": 698, "test_binary_cross_entropy_with_logit": 698, "test_cross_entropi": 698, "test_binary_cross_entropi": 698, "test_sparse_cross_entropi": 698, "test_loss_funct": 698, "test_torch_binary_cross_entropi": 698, "test_torch_cross_entropi": 698, "binary_cross_entropy_with_logit": 698, "torch_binary_cross_entropi": 698, "torch_cross_entropi": 698, "underneath": [698, 730], "magic": 698, "readthedoc": 698, "affect": [698, 710], "pedagog": 698, "f_1": 698, "t_1": 698, "t_3": 698, "t_7": 698, "t_": 698, "f_m": 698, "cyclic": 698, "intellig": [698, 712, 734], "tests_fil": 698, "file_nam": [698, 712, 713], "del": 698, "tests_lin": 698, "elif": [698, 703, 709, 710, 711], "correspondingli": 698, "tests_to_run": 698, "determine_tests_lin": 698, "mongodb": 698, "databas": [698, 712], "secret": 698, "db": 698, "ssh_deploy_kei": 698, "suffic": [698, 707, 712], "massiv": 698, "constraint": [698, 699, 708], "mb": 698, "yml": 698, "felicit": 698, "clone_map": 698, "home": 698, "deploy_kei": 698, "user_email": 698, "rashul": 698, "chutani": 698, "user_nam": 698, "target_branch": 698, "github_serv": 698, "deploy_key_fil": 698, "ssh_known_hosts_fil": 698, "known_host": 698, "keyscan": 698, "export": [698, 731, 738], "git_ssh_command": 698, "userknownhostsfil": 698, "methodologi": 698, "master1": 698, "restructur": 698, "_map": 698, "t_2": 698, "t_n": 698, "index_map": 698, "test_map": 698, "routin": [698, 709, 710, 715, 725, 732], "incorrect": 698, "snowbal": 698, "irrelev": [698, 699, 701], "recalibr": 698, "workflow_dispatch": 698, "schedul": [698, 725, 732, 739], "cron": 698, "saturdai": 698, "night": 698, "pm": 698, "gut": 698, "lesser": [698, 703], "lol": 698, "cater": 698, "master2": 698, "master32": 698, "synchron": 698, "runner2": 698, "corrupt": 698, "discard": 698, "decoupl": [698, 721], "150": 698, "cycl": [698, 712], "rashulchutani": 698, "yellow": 698, "queu": 698, "redirect": 698, "book": 698, "onrend": 698, "jo": 698, "ran": 698, "badg": 698, "clickabl": 698, "all_dtyp": 699, "all_numeric_dtyp": 699, "all_int_dtyp": 699, "all_float_dtyp": 699, "replic": [699, 708, 709, 710], "thirdli": 699, "native_float32": 699, "importantli": [699, 719, 722, 724], "arguabl": [699, 700, 710], "jaxarrai": [699, 700, 703, 705, 709, 713, 717], "_handle_0_dim_output": 699, "subtli": [699, 709], "promote_types_frontend_nam": 699, "promote_types_of_frontend_name_input": 699, "frontend_nam": 699, "demonstr": [699, 701, 703, 719], "accuraci": 699, "upcast": 699, "nearli": [699, 705, 707, 732], "downcast": 699, "footprint": 699, "concret": 699, "compound": 699, "infer_dtyp": [699, 700, 705, 707], "settabl": [699, 700], "handle_out_argu": [699, 700, 705, 706, 707, 709, 717], "infer_devic": [699, 700, 705, 707], "deleg": [699, 739], "shape_to_tupl": 699, "with_supported_dtyp": 699, "with_unsupported_dtyp": [699, 707, 710], "unment": 699, "backend_vers": 699, "_cast_for_unary_op": [699, 706, 709], "target_typ": 699, "unsupported_dtyp": 699, "supported_dtypes_and_devic": 699, "globals_getter_func": 699, "f1": 699, "f2": 699, "lack": [699, 709, 732, 739], "inconsist": [699, 703, 708], "84530": 699, "unwarr": 699, "risk": [699, 738], "needlessli": 699, "bloat": 699, "undergo": [699, 725], "supported_dtyp": 699, "unsupported_devic": 699, "supported_devic": 699, "slight": [699, 712, 721], "downsid": 699, "inflat": 699, "undesir": 699, "accomplish": 699, "upcast_data_typ": 699, "downcast_data_typ": 699, "crosscast_data_typ": 699, "cast_data_typ": 699, "avaiabl": 699, "downcast_data_dtyp": 699, "vice": 699, "versa": 699, "till": 699, "crosscast": 699, "exmp1": 699, "watch": [699, 710], "cate": 699, "understood": 699, "consumpt": [699, 736], "dual": 700, "categor": [700, 706, 710], "soft": 700, "210": 700, "_handle_except": [700, 703], "1013": 700, "_handle_nest": [700, 703], "905": 700, "_handle_out_argu": [700, 703], "441": 700, "_inputs_to_native_arrai": [700, 703], "new_arg": [700, 703], "new_kwarg": [700, 703], "_outputs_to_ivy_arrai": [700, 703], "358": 700, "_handle_array_funct": [700, 703], "863": 700, "_handle_device_shift": 700, "handle_device_shift": 700, "__enter__": 700, "exit": 700, "__exit__": 700, "eight": [701, 716], "op_nam": 701, "__r": 701, "recap": [701, 721], "combinatori": 701, "variat": [701, 710, 712], "unus": [701, 709], "okai": [701, 715, 717], "meant": [701, 709], "spec": [701, 702], "my_func": [701, 713], "some_flag": 701, "another_flag": 701, "jointli": 701, "5574077": 701, "1850398": 701, "5463025": 701, "8422884": 701, "91601413": 701, "9647598": 701, "3738229": 701, "1597457": 701, "0963247": 701, "9955841": 701, "3278579": 701, "asid": [701, 724], "14254655": 701, "1578213": 701, "380515": 701, "trivial": [701, 709], "exlud": 701, "failing_fn_nam": 701, "onlin": [701, 702], "minutest": 701, "suffici": [701, 710, 712], "fault": [701, 732], "contrast": [702, 705, 710, 738], "instanti": 702, "preview": 702, "needless": [702, 711], "renam": [702, 710], "judgment": 702, "operator_nam": 702, "succinct": 702, "contstructor": 702, "docst": 702, "native_error": 703, "isinst": [703, 710, 712, 713, 721, 722], "_combine_messag": 703, "truli": [703, 719], "wrong": [703, 704, 707, 710, 715], "198": 703, "392": 703, "_handle_array_like_without_promot": 703, "805": 703, "432": 703, "349": 703, "other_test": 703, "523": 703, "_handle_numpy_out": 703, "396": [703, 721], "_outputs_to_numpy_arrai": 703, "_inputs_to_ivy_arrays_np": 703, "ivy_arg": 703, "ivy_kwarg": 703, "453": 703, "_from_zero_dim_arrays_to_scalar": 703, "truth_value_test": 703, "217": 703, "visibl": 703, "unwieldi": 703, "awar": [703, 704], "squash": 703, "hid": 703, "cleaner": [703, 720], "caught": [703, 704], "functool": [703, 710, 719], "rethrow": 703, "_print_traceback_histori": 703, "error_stack": 703, "axiserror": 703, "got": 703, "polici": [703, 707, 712, 714, 724], "moreov": 703, "met": 703, "black": 704, "flake8": 704, "formatt": 704, "linter": 704, "autoflak": 704, "docformatt": 704, "pydocstyl": 704, "cfg": 704, "yaml": 704, "patch1687898304": 704, "8072": 704, "3516aed563": 704, "akshai": 704, "jain": 704, "gui": 704, "cryptic": 704, "garden": 704, "utc": 704, "didn": 704, "human": 704, "intervent": 704, "typo": 704, "ui": 704, "adress": 705, "handle_array_like_without_promot": [705, 707], "to_native_arrays_and_back": [705, 707, 717], "handle_array_funct": [705, 707], "handle_numpy_arrays_in_specific_backend": 705, "inputs_to_native_shap": [705, 707], "sole": [705, 713, 731, 732, 733], "rational": 705, "__div__": [705, 715], "dicat": 705, "484": 705, "annot": 705, "brittl": 705, "freeli": 705, "inde": [705, 715, 725, 730], "original_typ": 705, "cumbersom": 705, "venn": 706, "diagram": [706, 738], "light": [706, 713, 725, 727, 733, 738], "maximis": 706, "encompass": 706, "partial_mixed_handl": [706, 707, 715], "handle_partial_mixed_funct": [706, 707, 715], "compo": 706, "insight": 706, "mixed_backend_wrapp": [706, 709], "to_add": 706, "to_skip": 706, "inputs_to_ivy_arrai": [706, 707], "FOr": 706, "deal": [706, 708, 710, 725], "modif": [706, 732], "briefli": [706, 712, 720], "get_all_arrays_on_dev": 706, "outputs_to_native_arrai": 707, "handle_view_index": [707, 709], "handle_view": [707, 709], "handle_nan": 707, "handle_mixed_funct": 707, "outputs_to_ivy_shap": 707, "to_native_shapes_and_back": 707, "crucial": 708, "scenario": 708, "inter_func": 708, "custom_grad_fn": 708, "args1": 708, "detach": 708, "eas": [708, 732], "captur": [708, 712, 722, 733], "program": [709, 729, 730, 732, 735, 736, 739], "ration": [709, 715], "speak": 709, "val_n": 709, "base_idx": 709, "_manipulation_stack": 709, "base_flat": 709, "_view_ref": 709, "_update_view": 709, "contigu": 709, "c_contigu": 709, "ascontiguousarrai": 709, "copyto": 709, "_is_vari": 709, "tensor_scatter_nd_upd": 709, "is_vari": 709, "_update_torch_view": 709, "predominantli": [709, 713, 724], "support_native_out": [709, 717], "_scalar_output_to_0d_arrai": 709, "_wrap_fn": 709, "dim0": 709, "dim1": 709, "res_floor": 709, "mul": [709, 719], "extent": [709, 710], "maxim": [709, 717, 729, 730, 734, 735, 736], "to_out_fn": 709, "add_wrapp": 709, "input_arrai": 709, "mostli": [709, 712], "metadata": 709, "paradigm": [709, 725, 732], "expans": 709, "brief": [709, 712], "weak": 709, "_torch_bas": 709, "_torch_view_ref": 709, "_torch_manipul": 709, "weakli": 709, "adequ": 709, "exhaust": [709, 712, 729, 738], "tf_frontend": 710, "lax": [710, 711, 715, 722, 725], "torch_frontend": [710, 711], "numpy_frontend": 710, "jax_frontend": 710, "to_ivy_arrays_and_back": [710, 711], "fidel": 710, "algebra": [710, 730, 731, 732, 735, 739], "xla": [710, 725, 727, 732], "dynamic": 710, "mimic": 710, "arithmetic_oper": 710, "handle_numpy_out": 710, "handle_numpy_dtyp": 710, "handle_numpy_cast": 710, "from_zero_dim_arrays_to_scalar": 710, "_add": 710, "same_kind": 710, "subok": [710, 711, 715], "promote_types_of_numpy_input": 710, "underscor": 710, "unhandl": 710, "trigonometric_funct": 710, "_tan": 710, "check_tensorflow_cast": 710, "raw_op": [710, 711], "tackl": 710, "map_raw_ops_alia": 710, "unnecessari": 710, "output_typ": 710, "kwargs_to_upd": 710, "implemnt": 710, "pointwise_op": 710, "slower": 710, "sensibl": 710, "ahead": [710, 713, 732], "reduce_logsumexp": 710, "input_tensor": 710, "logsumexp": 710, "trick": 710, "max_input_tensor": 710, "meet": 710, "preferred_element_typ": 710, "finer": 710, "margin": 710, "logicaland": 710, "np_frontend": 710, "_ivy_arrai": 710, "radd": 710, "_init_data": 710, "_process_str_data": 710, "_dtype": [710, 711, 719], "_shape": [710, 719], "govern": 710, "promote_types_of_": 710, "_input": 710, "promote_types_of_torch_input": [710, 711], "saniti": 710, "handle_numpy_casting_speci": 710, "new_fn": 710, "equiv": 710, "unsaf": 710, "array_type_test": 710, "_isfinit": 710, "organis": 710, "youtub": 710, "jump": 711, "knowledg": 711, "lift": [711, 733], "np_frontend_help": 711, "test_jax": 711, "test_lax": 711, "test_oper": 711, "dtype_and_x": [711, 712], "test_jax_tan": 711, "backend_fw": 711, "test_numpi": 711, "test_mathematical_funct": 711, "test_trigonometric_funct": 711, "dtypes_values_cast": 711, "dtypes_values_casting_dtyp": 711, "arr_func": 711, "get_num_positional_args_ufunc": 711, "test_numpy_tan": 711, "handle_where_and_array_bool": 711, "test_tensorflow": 711, "test_math": 711, "test_tensorflow_tan": 711, "test_pointwise_op": 711, "test_torch_tan": 711, "_fill_valu": 711, "test_glob": 711, "test_jax_ful": 711, "test_from_shape_or_valu": 711, "_input_fill_and_dtyp": 711, "dtype_and_input": 711, "dtype_to_cast": 711, "input_fill_dtyp": 711, "test_numpy_ful": 711, "test_raw_op": 711, "test_tensorflow_fil": 711, "test_creation_op": 711, "with_arrai": 711, "test_torch_ful": 711, "add_nois": 711, "all_clos": 711, "_get_dtype_and_matrix": 711, "test_torch_qr": 711, "frontend_ret": 711, "frontend_q": 711, "frontend_r": 711, "walkthrough": 711, "comparison_op": 711, "test_comparison_op": 711, "test_torch_great": 711, "test_ndarrai": 711, "test_numpy_instance_add__": 711, "test_tensorflow_instance_add": 711, "1e04": 711, "allow_infin": 711, "test_torch_instance_add": 711, "_arrays_idx_n_dtyp": 711, "test_manipul": [711, 712], "surprisingli": 711, "closest_relevant_group": 711, "strive": [711, 712, 715, 725, 734], "fixtur": 712, "eleg": [712, 732], "unexplor": 712, "upload": 712, "artifact": 712, "bespok": 712, "_array_or_typ": 712, "test_default_int_dtyp": 712, "clariti": [712, 715, 732], "print_hypothesis_exampl": 712, "custom_strategi": 712, "randomis": 712, "simplist": 712, "intricaci": 712, "glanc": 712, "capabl": [712, 715], "stratigi": 712, "one_of": 712, "datum": 712, "pipe": 712, "shorthand": 712, "array_or_scal": 712, "len_of_arrai": 712, "test_add": 712, "test_gpu_is_avail": 712, "requri": 712, "summara": 712, "pretest": 712, "slighlti": 712, "pytet": 712, "thankfulli": 712, "seamlessli": 712, "criterion": 712, "valid_ax": 712, "craft": 712, "hoc": 712, "11228": 712, "456": 712, "268": 712, "wherev": 712, "9622": 712, "28136": 712, "6375": 712, "12720": 712, "21354": 712, "900e": 712, "57384": 712, "25687": 712, "248": 712, "test_devic": 712, "array_shap": 712, "common_shap": 712, "test_lay": 712, "stand": 712, "some_sequ": 712, "arrays_valu": 712, "36418": 712, "213": 712, "21716926": 712, "none_or_list_of_float": 712, "get_prob": 712, "103515625e": 712, "099609375": 712, "probabilist": 712, "number_positional_argu": 712, "unreproduc": 712, "x_and_linear": 712, "is_torch_backend": 712, "x_shape": [712, 717], "weight_shap": 712, "bias_shap": 712, "ivy_np": 712, "valid_float_dtyp": 712, "test_demo": 712, "failing_test": 712, "traceback": 712, "shrink": 712, "prescrib": 712, "scratch": 712, "therebi": 712, "test_gelu": 712, "test_fil": 712, "phase": [712, 725, 732], "notabl": [712, 732], "verbos": [712, 717], "newer": 712, "max_exampl": 712, "deadlin": 712, "weird": 712, "systemat": 712, "safeguard": 712, "inabl": 712, "test_result_typ": 712, "9090909090909091": 712, "judgement": 713, "some_namespac": 713, "some_backend": 713, "another_backend": 713, "refactor": 713, "ongo": 713, "_assert_fill_value_and_dtype_are_compat": 713, "_to_devic": 713, "pin": 713, "conclud": 713, "unpinn": 713, "culmin": 713, "unsett": 714, "array_significant_figur": 714, "figur": 714, "array_decimal_valu": 714, "warning_level": 714, "nan_polici": 714, "stablest": 714, "answer": [715, 719, 725], "contradict": 715, "entail": 715, "sacrif": 715, "dimems": 715, "jacfwd": 715, "jacrev": 715, "banner": 715, "ravel": 715, "expens": 715, "incredibli": [715, 720, 725, 735], "price": 715, "pai": 715, "intrus": 715, "x_beta": 715, "equip": 715, "priorit": 715, "simplif": 715, "allevi": 715, "ineffici": [715, 725, 732], "fuse": 715, "hybrid": 715, "workaround": 715, "slip": 715, "radar": 715, "stumbl": 715, "fulfil": 716, "syntact": [717, 722], "power_seq": 717, "backend_stack": 717, "_determine_backend_from_arg": 717, "importlib": 717, "_backend_dict": 717, "x_flat": 717, "wi": 717, "wi_x": 717, "wii_x": 717, "wif_x": 717, "wig_x": 717, "wio_x": 717, "wh": 717, "ht": 717, "ct": 717, "hts_list": 717, "wii_xt": 717, "wif_xt": 717, "wig_xt": 717, "wio_xt": 717, "zip": 717, "htm1": 717, "ctm1": 717, "wh_htm1": 717, "whi_htm1": 717, "whf_htm1": 717, "whg_htm1": 717, "who_htm1": 717, "ft": 717, "ot": 717, "reliabl": 717, "sacrific": 717, "hear": 717, "virtu": [717, 729], "pure_ivi": 717, "compile_graph": [717, 722], "pure_torch": 717, "_layer": 717, "unclean": 717, "wx": 717, "temp": 717, "ivy_func": 717, "emphas": 717, "torchscript": [717, 727, 739], "example_input": 717, "primit": [718, 725, 730, 732], "upcom": 718, "hierarch": [718, 720, 721, 732], "arraywithactiv": 719, "arraywithcr": 719, "arraywithdatatyp": 719, "arraywithdevic": 719, "arraywithgener": 719, "arraywithgradi": 719, "arraywithimag": 719, "arraywithlay": 719, "arraywithlinearalgebra": 719, "arraywithloss": 719, "arraywithmanipul": 719, "arraywithnorm": 719, "arraywithrandom": 719, "arraywithsearch": 719, "arraywithset": 719, "arraywithsort": 719, "arraywithstatist": 719, "arraywithutil": 719, "_init": 719, "_size": 719, "_devic": 719, "_dev_str": 719, "_pre_repr": 719, "_post_repr": 719, "framework_str": 719, "noinspect": 719, "pypep8nam": 719, "immut": 719, "claim": 719, "_native_wrapp": 719, "genuin": 719, "some_method": 719, "rewritten": 719, "strang": 719, "compartment": 719, "newshap": 719, "new_shap": 719, "tidi": 719, "crystal": 719, "ton": 720, "ado": [720, 721], "soup": 720, "walk": [720, 721], "cnt": 720, "combo": 720, "3333335": 720, "delimit": 720, "autocomplet": 720, "midwai": 720, "agent": 720, "total_spe": 720, "total_height": 720, "total_width": 720, "ag": 720, "tot": 720, "total_": 720, "total_h": 720, "cnt0": 720, "cnt1": 720, "diff_0": 720, "diff_1": 720, "config0": 720, "config1": 720, "decod": 720, "l0": 720, "decoder__l0": 720, "decoder__l1": 720, "encoder__l0": 720, "encoder__l1": 720, "l0__b": 720, "l0__w": 720, "l1__b": 720, "l1__w": 720, "printabl": 720, "obviou": [720, 732], "foresight": 720, "untidili": 720, "update_ag": 720, "normalize_img": 720, "img_max": 720, "reduce_max": 720, "img_min": 720, "reduce_min": 720, "img_rang": 720, "agent_posit": 720, "agent_veloc": 720, "agent_cam_front_rgb": 720, "agent_cam_front_depth": 720, "agent_cam_rear_rgb": 720, "agent_cam_rear_depth": 720, "agent_cam_lidar": 720, "camera": 720, "front_rgb": 720, "front_depth": 720, "rear_rgb": 720, "rear_depth": 720, "lidar": 720, "rgb": 720, "rear": 720, "veloc": 720, "cam": 720, "cam_max": 720, "cam_min": 720, "cam_rang": 720, "five": 720, "perman": 720, "thread": [720, 732], "pretti": [720, 738], "straightforward": 720, "dataload": [720, 723], "_cnt": 720, "img_": 720, "png": 720, "_dataset_s": 720, "_batch_siz": 720, "_count": [720, 721], "__next__": 720, "img_fnam": 720, "loaded_img": 720, "cv2": 720, "imread": 720, "from_numpi": 720, "batch_slic": 720, "mymodel": 720, "x_in": [720, 721, 722], "0145": 720, "addbackward0": 720, "_create_vari": 721, "_input_channel": 721, "_output_channel": 721, "_w_shape": 721, "_b_shape": 721, "_with_bia": 721, "764": 721, "872": 721, "211": 721, "439": 721, "nightmar": 721, "overcom": 721, "v0": 721, "v1": 721, "key0": 721, "linear3": 721, "v2": 721, "_w_init": 721, "_b_init": 721, "misnom": 721, "saw": 721, "_beta1": 721, "_beta2": 721, "_epsilon": 721, "_mw": 721, "_vw": 721, "_first_pass": 721, "_should_compil": 721, "new_v": 721, "_lr": 721, "_inplac": 721, "_stop_gradi": 721, "clip_by_valu": 722, "sparse_funct": 722, "_linear": 722, "jax_graph": 722, "to_backend": 722, "thinli": 722, "to_haiku_modul": 722, "loss_fn_t": 722, "without_apply_rng": 722, "update_rul": 722, "tree_multimap": 722, "differenti": [724, 732], "pose": 724, "quaternion": 724, "ivy_mech": 724, "target_facing_rotation_matrix": 724, "polar_to_cartesian_coord": 724, "warp": 724, "optic": 724, "voxel": 724, "ivy_vis": 724, "coords_to_voxel_grid": 724, "render_pixel_coord": 724, "radianc": 724, "nerf": 724, "trajectori": 724, "motion": 724, "mobil": [724, 732], "sample_spline_path": 724, "rigidmobil": 724, "sample_bodi": 724, "drone": 724, "sample_link": 724, "openai": 724, "swimmer": 724, "reward": 724, "supervis": 724, "door": [724, 725], "cartpol": 724, "mountain_car": 724, "pendulum": 724, "reacher": 724, "learnt": 724, "ture": 724, "ntm": 724, "egospher": 724, "esm": 724, "ivy_memori": 724, "egocentr": 724, "room": 724, "doubt": 725, "grate": 725, "probe": 725, "remark": 725, "lock": 725, "gold": 725, "dex": 725, "ye": 725, "tricki": [725, 727], "predictor": 725, "tight": 725, "driver": 725, "dispatch": [725, 732, 735], "ast": 725, "checkpoint": 725, "autodiff": 725, "shine": 725, "merci": 725, "autograd": 725, "compet": [725, 732], "parallelis": 725, "spmd": 725, "mixtur": 725, "expert": 725, "sophist": 725, "depart": 725, "hundr": 725, "thousand": 725, "broadli": [725, 738], "supplementari": 725, "reusabl": [725, 730, 732], "fanci": [725, 732], "fusion": [725, 736], "lose": 725, "pmap": 725, "eventu": 725, "supplement": 725, "backdoor": 725, "callback": 725, "record": [725, 733], "somewhat": [725, 732], "outsourc": 725, "nail": 727, "funtion": 727, "asset": 727, "scientist": 727, "correl": 727, "conceptu": [728, 733], "broken": [728, 732], "tracer": 728, "infrastructur": [728, 734, 735], "vendor": [728, 734], "complimentari": [728, 738], "acycl": [728, 733], "insert_numb": 729, "insert_t": 729, "scaffold": [730, 738], "heart": 730, "toolchain": [730, 735], "intermedi": [730, 731, 732, 733, 738], "ir": [730, 733, 738], "assembli": [730, 737, 738], "idl": 730, "middl": 730, "emit": 730, "gnu": [730, 735], "gcc": [730, 737], "broader": 730, "heterogen": 730, "aid": 730, "coprocessor": 730, "ai": [730, 734], "programm": [730, 737], "gate": 730, "onednn": 730, "sit": [730, 733, 738], "tandem": 730, "possess": 730, "khrono": [731, 737], "appl": 731, "coremltool": 731, "albeit": 731, "promin": 732, "abbrevi": 732, "laboratori": 732, "proprietari": [732, 736, 737], "mathwork": 732, "commerci": 732, "1984": 732, "toolbox": 732, "mupad": 732, "simulink": 732, "graphic": [732, 736, 737], "simul": 732, "million": [732, 735], "worldwid": 732, "scienc": [732, 734], "econom": 732, "2001": 732, "scientif": 732, "od": 732, "solver": 732, "cython": 732, "friendli": 732, "2002": 732, "lua": 732, "luajit": 732, "idiap": 732, "epfl": 732, "2005": 732, "numarrai": 732, "cpython": 732, "partli": 732, "2007": 732, "regress": [732, 739], "forest": 732, "boost": 732, "dbscan": 732, "inbuilt": 732, "esqu": 732, "aesara": 732, "2008": 732, "datafram": 732, "critic": [732, 738], "2012": 732, "Its": 732, "polymorph": 732, "mpi": 732, "openmp": 732, "glue": 732, "jaot": 732, "nasa": 732, "cern": 732, "climat": 732, "allianc": 732, "influenti": 732, "2014": 732, "scala": 732, "ship": 732, "forgiv": 732, "decemb": 732, "announc": 732, "transit": 732, "mainten": 732, "v7": 732, "meaning": 732, "2016": 732, "imper": 732, "amazon": 732, "traction": 732, "cognit": [732, 739], "toolkit": [732, 733, 739], "grade": 732, "realiz": 732, "dnn": 732, "cnn": 732, "rnn": 732, "backpropag": 732, "succumb": 732, "came": 732, "monitor": 732, "practition": [732, 736, 737, 738], "hobbyist": 732, "tremend": 732, "ecosystem": 732, "gear": 732, "batteri": 732, "zygot": 732, "jl": 732, "workload": 732, "daggerflux": 732, "frontier": 732, "hessian": 732, "2018": 732, "lightweight": [732, 739], "shortcom": 732, "barrier": 732, "inexperienc": 732, "underdevelop": 732, "fanat": 732, "ounc": 732, "infanc": 732, "emerg": 732, "nich": 732, "introduct": 732, "lite": 732, "enterpris": 732, "reinvent": [732, 734], "inertia": 732, "creator": [732, 734], "paszk": 732, "hi": 732, "bulk": 732, "haskel": 732, "dataflow": 733, "distil": 733, "essenc": [733, 738], "enclos": 733, "trace_modul": 733, "scriptfunct": 733, "scriptmodul": 733, "fake": 733, "proxi": 733, "site": 733, "graphmodul": 733, "travi": 734, "oliph": 734, "leader": 734, "cornerston": 734, "numba": 734, "numfocu": 734, "pydata": 734, "confer": 734, "consult": 734, "servic": 734, "expertis": 734, "devop": 734, "mlop": 734, "dashboard": 734, "startup": 734, "mlir": [734, 735, 738], "Their": 734, "held": 734, "privileg": 734, "presum": 734, "llvm": [734, 737], "founder": 734, "tvm": [734, 738], "sustain": 734, "empow": 734, "har": 734, "burden": 734, "benchmark": 734, "convention": 735, "precompil": 735, "executor": 735, "exploit": 735, "julia": [735, 738], "fsf": 735, "gpl": 735, "biggest": [735, 738], "nvidia": [736, 737], "conduct": 736, "throughput": 736, "autotun": 736, "gpgpu": 736, "talk": 737, "classic": 737, "sycl": 737, "dpc": 737, "processor": 737, "maco": 737, "x86": 737, "oneapi": 737, "ia": 737, "aka": 737, "xeon": 737, "gen9": 737, "xe": 737, "card": 737, "arria": 737, "gx": 737, "fpga": 737, "tune": [737, 738], "lofti": 738, "ambit": 738, "realm": 738, "bedrock": 738, "flux": 738, "bite": 738, "chew": 738, "eagerpi": 738, "tensorli": 738, "thinc": 738, "neuropod": 738, "exhibit": 738, "emploi": 738, "fx": 738, "retrain": 738, "closer": 738, "greatli": 738, "modular": 738, "anywher": 738, "theano": 739, "plaidml": 739, "partial_svd": 739, "tucker_mode_dot": 739, "excel": 739, "subsystem": 739}, "objects": {"ivy.Array": [[169, 0, 1, "", "abs"], [170, 0, 1, "", "acos"], [171, 0, 1, "", "acosh"], [489, 0, 1, "", "adam_step"], [490, 0, 1, "", "adam_update"], [313, 0, 1, "", "adaptive_avg_pool1d"], [314, 0, 1, "", "adaptive_avg_pool2d"], [315, 0, 1, "", "adaptive_max_pool2d"], [172, 0, 1, "", "add"], [343, 0, 1, "", "adjoint"], [639, 0, 1, "", "all"], [411, 0, 1, "", "all_equal"], [265, 0, 1, "", "allclose"], [173, 0, 1, "", "angle"], [640, 0, 1, "", "any"], [616, 0, 1, "", "argmax"], [617, 0, 1, "", "argmin"], [625, 0, 1, "", "argsort"], [618, 0, 1, "", "argwhere"], [414, 0, 1, "", "array_equal"], [354, 0, 1, "", "as_strided"], [73, 0, 1, "", "asarray"], [174, 0, 1, "", "asin"], [175, 0, 1, "", "asinh"], [415, 0, 1, "", "assert_supports_inplace"], [355, 0, 1, "", "associative_scan"], [101, 0, 1, "", "astype"], [176, 0, 1, "", "atan"], [177, 0, 1, "", "atan2"], [178, 0, 1, "", "atanh"], [356, 0, 1, "", "atleast_1d"], [357, 0, 1, "", "atleast_2d"], [358, 0, 1, "", "atleast_3d"], [317, 0, 1, "", "avg_pool1d"], [318, 0, 1, "", "avg_pool2d"], [319, 0, 1, "", "avg_pool3d"], [381, 0, 1, "", "batch_norm"], [387, 0, 1, "", "bernoulli"], [388, 0, 1, "", "beta"], [266, 0, 1, "", "binarizer"], [568, 0, 1, "", "binary_cross_entropy"], [399, 0, 1, "", "bincount"], [179, 0, 1, "", "bitwise_and"], [180, 0, 1, "", "bitwise_invert"], [181, 0, 1, "", "bitwise_left_shift"], [182, 0, 1, "", "bitwise_or"], [183, 0, 1, "", "bitwise_right_shift"], [184, 0, 1, "", "bitwise_xor"], [102, 0, 1, "", "broadcast_arrays"], [103, 0, 1, "", "broadcast_to"], [104, 0, 1, "", "can_cast"], [185, 0, 1, "", "ceil"], [538, 0, 1, "", "cholesky"], [571, 0, 1, "", "clip"], [417, 0, 1, "", "clip_matrix_norm"], [418, 0, 1, "", "clip_vector_norm"], [572, 0, 1, "", "concat"], [360, 0, 1, "", "concat_from_sequence"], [344, 0, 1, "", "cond"], [267, 0, 1, "", "conj"], [573, 0, 1, "", "constant_pad"], [524, 0, 1, "", "conv1d"], [525, 0, 1, "", "conv1d_transpose"], [526, 0, 1, "", "conv2d"], [527, 0, 1, "", "conv2d_transpose"], [528, 0, 1, "", "conv3d"], [529, 0, 1, "", "conv3d_transpose"], [79, 0, 1, "", "copy_array"], [268, 0, 1, "", "copysign"], [400, 0, 1, "", "corrcoef"], [186, 0, 1, "", "cos"], [187, 0, 1, "", "cosh"], [269, 0, 1, "", "count_nonzero"], [401, 0, 1, "", "cov"], [539, 0, 1, "", "cross"], [569, 0, 1, "", "cross_entropy"], [402, 0, 1, "", "cummax"], [403, 0, 1, "", "cummin"], [629, 0, 1, "", "cumprod"], [630, 0, 1, "", "cumsum"], [320, 0, 1, "", "dct"], [421, 0, 1, "", "default"], [188, 0, 1, "", "deg2rad"], [532, 0, 1, "", "depthwise_conv2d"], [540, 0, 1, "", "det"], [146, 0, 1, "", "dev"], [321, 0, 1, "", "dft"], [541, 0, 1, "", "diag"], [345, 0, 1, "", "diagflat"], [542, 0, 1, "", "diagonal"], [270, 0, 1, "", "diff"], [271, 0, 1, "", "digamma"], [389, 0, 1, "", "dirichlet"], [189, 0, 1, "", "divide"], [533, 0, 1, "", "dropout"], [322, 0, 1, "", "dropout1d"], [323, 0, 1, "", "dropout2d"], [324, 0, 1, "", "dropout3d"], [361, 0, 1, "", "dsplit"], [362, 0, 1, "", "dstack"], [112, 0, 1, "", "dtype"], [347, 0, 1, "", "eig"], [544, 0, 1, "", "eigh"], [348, 0, 1, "", "eigh_tridiagonal"], [349, 0, 1, "", "eigvals"], [545, 0, 1, "", "eigvalsh"], [422, 0, 1, "", "einops_rearrange"], [423, 0, 1, "", "einops_reduce"], [424, 0, 1, "", "einops_repeat"], [631, 0, 1, "", "einsum"], [244, 0, 1, "", "elu"], [325, 0, 1, "", "embedding"], [81, 0, 1, "", "empty_like"], [190, 0, 1, "", "equal"], [191, 0, 1, "", "erf"], [425, 0, 1, "", "exists"], [192, 0, 1, "", "exp"], [193, 0, 1, "", "exp2"], [363, 0, 1, "", "expand"], [574, 0, 1, "", "expand_dims"], [194, 0, 1, "", "expm1"], [253, 0, 1, "", "eye_like"], [326, 0, 1, "", "fft"], [327, 0, 1, "", "fft2"], [364, 0, 1, "", "fill_diagonal"], [114, 0, 1, "", "finfo"], [272, 0, 1, "", "fix"], [365, 0, 1, "", "flatten"], [575, 0, 1, "", "flip"], [366, 0, 1, "", "fliplr"], [367, 0, 1, "", "flipud"], [273, 0, 1, "", "float_power"], [195, 0, 1, "", "floor"], [196, 0, 1, "", "floor_divide"], [274, 0, 1, "", "fmax"], [197, 0, 1, "", "fmin"], [198, 0, 1, "", "fmod"], [426, 0, 1, "", "fourier_encode"], [275, 0, 1, "", "frexp"], [83, 0, 1, "", "from_dlpack"], [86, 0, 1, "", "full_like"], [390, 0, 1, "", "gamma"], [429, 0, 1, "", "gather"], [430, 0, 1, "", "gather_nd"], [199, 0, 1, "", "gcd"], [55, 0, 1, "", "gelu"], [433, 0, 1, "", "get_num_dims"], [276, 0, 1, "", "gradient"], [493, 0, 1, "", "gradient_descent_update"], [200, 0, 1, "", "greater"], [201, 0, 1, "", "greater_equal"], [382, 0, 1, "", "group_norm"], [56, 0, 1, "", "hardswish"], [435, 0, 1, "", "has_nans"], [368, 0, 1, "", "heaviside"], [404, 0, 1, "", "histogram"], [369, 0, 1, "", "hsplit"], [370, 0, 1, "", "hstack"], [277, 0, 1, "", "hypot"], [371, 0, 1, "", "i0"], [330, 0, 1, "", "idct"], [331, 0, 1, "", "ifft"], [332, 0, 1, "", "ifftn"], [405, 0, 1, "", "igamma"], [117, 0, 1, "", "iinfo"], [202, 0, 1, "", "imag"], [546, 0, 1, "", "inner"], [437, 0, 1, "", "inplace_decrement"], [438, 0, 1, "", "inplace_increment"], [439, 0, 1, "", "inplace_update"], [383, 0, 1, "", "instance_norm"], [334, 0, 1, "", "interpolate"], [547, 0, 1, "", "inv"], [441, 0, 1, "", "is_array"], [120, 0, 1, "", "is_bool_dtype"], [122, 0, 1, "", "is_float_dtype"], [124, 0, 1, "", "is_int_dtype"], [442, 0, 1, "", "is_ivy_array"], [443, 0, 1, "", "is_ivy_container"], [445, 0, 1, "", "is_native_array"], [126, 0, 1, "", "is_uint_dtype"], [278, 0, 1, "", "isclose"], [203, 0, 1, "", "isfinite"], [446, 0, 1, "", "isin"], [204, 0, 1, "", "isinf"], [205, 0, 1, "", "isnan"], [206, 0, 1, "", "isreal"], [448, 0, 1, "", "itemsize"], [350, 0, 1, "", "kron"], [384, 0, 1, "", "l1_normalize"], [385, 0, 1, "", "l2_normalize"], [495, 0, 1, "", "lamb_update"], [496, 0, 1, "", "lars_update"], [609, 0, 1, "", "layer_norm"], [207, 0, 1, "", "lcm"], [279, 0, 1, "", "ldexp"], [57, 0, 1, "", "leaky_relu"], [280, 0, 1, "", "lerp"], [208, 0, 1, "", "less"], [209, 0, 1, "", "less_equal"], [394, 0, 1, "", "lexsort"], [281, 0, 1, "", "lgamma"], [534, 0, 1, "", "linear"], [87, 0, 1, "", "linspace"], [210, 0, 1, "", "log"], [211, 0, 1, "", "log10"], [212, 0, 1, "", "log1p"], [213, 0, 1, "", "log2"], [58, 0, 1, "", "log_softmax"], [214, 0, 1, "", "logaddexp"], [215, 0, 1, "", "logaddexp2"], [216, 0, 1, "", "logical_and"], [217, 0, 1, "", "logical_not"], [218, 0, 1, "", "logical_or"], [219, 0, 1, "", "logical_xor"], [245, 0, 1, "", "logit"], [246, 0, 1, "", "logsigmoid"], [88, 0, 1, "", "logspace"], [386, 0, 1, "", "lp_normalize"], [535, 0, 1, "", "lstm_update"], [549, 0, 1, "", "matmul"], [351, 0, 1, "", "matrix_exp"], [550, 0, 1, "", "matrix_norm"], [551, 0, 1, "", "matrix_power"], [552, 0, 1, "", "matrix_rank"], [553, 0, 1, "", "matrix_transpose"], [632, 0, 1, "", "max"], [335, 0, 1, "", "max_pool1d"], [336, 0, 1, "", "max_pool2d"], [337, 0, 1, "", "max_pool3d"], [220, 0, 1, "", "maximum"], [633, 0, 1, "", "mean"], [406, 0, 1, "", "median"], [89, 0, 1, "", "meshgrid"], [634, 0, 1, "", "min"], [221, 0, 1, "", "minimum"], [59, 0, 1, "", "mish"], [282, 0, 1, "", "modf"], [372, 0, 1, "", "moveaxis"], [626, 0, 1, "", "msort"], [352, 0, 1, "", "multi_dot"], [536, 0, 1, "", "multi_head_attention"], [610, 0, 1, "", "multinomial"], [222, 0, 1, "", "multiply"], [223, 0, 1, "", "nan_to_num"], [407, 0, 1, "", "nanmean"], [408, 0, 1, "", "nanmedian"], [283, 0, 1, "", "nansum"], [90, 0, 1, "", "native_array"], [224, 0, 1, "", "negative"], [284, 0, 1, "", "nextafter"], [619, 0, 1, "", "nonzero"], [225, 0, 1, "", "not_equal"], [91, 0, 1, "", "one_hot"], [93, 0, 1, "", "ones_like"], [497, 0, 1, "", "optimizer_update"], [554, 0, 1, "", "outer"], [373, 0, 1, "", "pad"], [576, 0, 1, "", "permute_dims"], [555, 0, 1, "", "pinv"], [391, 0, 1, "", "poisson"], [226, 0, 1, "", "positive"], [227, 0, 1, "", "pow"], [247, 0, 1, "", "prelu"], [635, 0, 1, "", "prod"], [556, 0, 1, "", "qr"], [410, 0, 1, "", "quantile"], [228, 0, 1, "", "rad2deg"], [611, 0, 1, "", "randint"], [612, 0, 1, "", "random_normal"], [613, 0, 1, "", "random_uniform"], [229, 0, 1, "", "real"], [230, 0, 1, "", "reciprocal"], [289, 0, 1, "", "reduce"], [341, 0, 1, "", "reduce_window"], [60, 0, 1, "", "relu"], [248, 0, 1, "", "relu6"], [231, 0, 1, "", "remainder"], [577, 0, 1, "", "repeat"], [578, 0, 1, "", "reshape"], [129, 0, 1, "", "result_type"], [342, 0, 1, "", "rfftn"], [579, 0, 1, "", "roll"], [375, 0, 1, "", "rot90"], [232, 0, 1, "", "round"], [537, 0, 1, "", "scaled_dot_product_attention"], [453, 0, 1, "", "scatter_flat"], [454, 0, 1, "", "scatter_nd"], [627, 0, 1, "", "searchsorted"], [249, 0, 1, "", "selu"], [466, 0, 1, "", "shape"], [615, 0, 1, "", "shuffle"], [61, 0, 1, "", "sigmoid"], [233, 0, 1, "", "sign"], [285, 0, 1, "", "signbit"], [251, 0, 1, "", "silu"], [234, 0, 1, "", "sin"], [286, 0, 1, "", "sinc"], [235, 0, 1, "", "sinh"], [557, 0, 1, "", "slogdet"], [62, 0, 1, "", "softmax"], [63, 0, 1, "", "softplus"], [558, 0, 1, "", "solve"], [628, 0, 1, "", "sort"], [570, 0, 1, "", "sparse_cross_entropy"], [580, 0, 1, "", "split"], [236, 0, 1, "", "sqrt"], [237, 0, 1, "", "square"], [581, 0, 1, "", "squeeze"], [467, 0, 1, "", "stable_divide"], [468, 0, 1, "", "stable_pow"], [582, 0, 1, "", "stack"], [636, 0, 1, "", "std"], [498, 0, 1, "", "stop_gradient"], [469, 0, 1, "", "strides"], [238, 0, 1, "", "subtract"], [637, 0, 1, "", "sum"], [470, 0, 1, "", "supports_inplace_updates"], [559, 0, 1, "", "svd"], [560, 0, 1, "", "svdvals"], [583, 0, 1, "", "swapaxes"], [376, 0, 1, "", "take_along_axis"], [239, 0, 1, "", "tan"], [240, 0, 1, "", "tanh"], [561, 0, 1, "", "tensordot"], [562, 0, 1, "", "tensorsolve"], [252, 0, 1, "", "thresholded_relu"], [584, 0, 1, "", "tile"], [163, 0, 1, "", "to_device"], [472, 0, 1, "", "to_list"], [474, 0, 1, "", "to_numpy"], [475, 0, 1, "", "to_scalar"], [377, 0, 1, "", "top_k"], [563, 0, 1, "", "trace"], [241, 0, 1, "", "trapz"], [94, 0, 1, "", "tril"], [95, 0, 1, "", "triu"], [242, 0, 1, "", "trunc"], [243, 0, 1, "", "trunc_divide"], [621, 0, 1, "", "unique_all"], [378, 0, 1, "", "unique_consecutive"], [622, 0, 1, "", "unique_counts"], [623, 0, 1, "", "unique_inverse"], [624, 0, 1, "", "unique_values"], [392, 0, 1, "", "unravel_index"], [262, 0, 1, "", "unsorted_segment_min"], [263, 0, 1, "", "unsorted_segment_sum"], [585, 0, 1, "", "unstack"], [487, 0, 1, "", "value_is_nan"], [564, 0, 1, "", "vander"], [638, 0, 1, "", "var"], [565, 0, 1, "", "vecdot"], [566, 0, 1, "", "vector_norm"], [567, 0, 1, "", "vector_to_skew_symmetric_matrix"], [379, 0, 1, "", "vsplit"], [380, 0, 1, "", "vstack"], [620, 0, 1, "", "where"], [287, 0, 1, "", "xlogy"], [586, 0, 1, "", "zero_pad"], [98, 0, 1, "", "zeros_like"], [288, 0, 1, "", "zeta"]], "ivy": [[508, 1, 1, "", "ArrayMode"], [504, 1, 1, "", "DefaultComplexDtype"], [505, 1, 1, "", "DefaultDevice"], [504, 1, 1, "", "DefaultDtype"], [504, 1, 1, "", "DefaultFloatDtype"], [504, 1, 1, "", "DefaultIntDtype"], [504, 1, 1, "", "DefaultUintDtype"], [310, 1, 1, "", "NativeSparseArray"], [503, 1, 1, "", "NestedSequence"], [508, 1, 1, "", "PreciseMode"], [505, 1, 1, "", "Profiler"], [310, 1, 1, "", "SparseArray"], [169, 2, 1, "", "abs"], [170, 2, 1, "", "acos"], [171, 2, 1, "", "acosh"], [509, 2, 1, "", "adam_step"], [509, 2, 1, "", "adam_update"], [299, 2, 1, "", "adaptive_avg_pool1d"], [299, 2, 1, "", "adaptive_avg_pool2d"], [299, 2, 1, "", "adaptive_max_pool2d"], [172, 2, 1, "", "add"], [343, 2, 1, "", "adjoint"], [522, 2, 1, "", "all"], [411, 2, 1, "", "all_equal"], [515, 2, 1, "", "all_nested_indices"], [296, 2, 1, "", "allclose"], [173, 2, 1, "", "angle"], [522, 2, 1, "", "any"], [503, 2, 1, "", "arange"], [299, 2, 1, "", "area_interpolate"], [412, 2, 1, "", "arg_info"], [413, 2, 1, "", "arg_names"], [518, 2, 1, "", "argmax"], [518, 2, 1, "", "argmin"], [520, 2, 1, "", "argsort"], [518, 2, 1, "", "argwhere"], [503, 2, 1, "", "array"], [414, 2, 1, "", "array_equal"], [142, 2, 1, "", "as_ivy_dev"], [504, 2, 1, "", "as_ivy_dtype"], [143, 2, 1, "", "as_native_dev"], [504, 2, 1, "", "as_native_dtype"], [354, 2, 1, "", "as_strided"], [503, 2, 1, "", "asarray"], [503, 2, 1, "", "asarray_handle_nestable"], [503, 2, 1, "", "asarray_infer_device"], [503, 2, 1, "", "asarray_infer_dtype"], [503, 2, 1, "", "asarray_inputs_to_native_shapes"], [503, 2, 1, "", "asarray_to_native_arrays_and_back"], [174, 2, 1, "", "asin"], [175, 2, 1, "", "asinh"], [415, 2, 1, "", "assert_supports_inplace"], [355, 2, 1, "", "associative_scan"], [504, 2, 1, "", "astype"], [176, 2, 1, "", "atan"], [177, 2, 1, "", "atan2"], [178, 2, 1, "", "atanh"], [356, 2, 1, "", "atleast_1d"], [357, 2, 1, "", "atleast_2d"], [358, 2, 1, "", "atleast_3d"], [299, 2, 1, "", "avg_pool1d"], [299, 2, 1, "", "avg_pool2d"], [299, 2, 1, "", "avg_pool3d"], [305, 2, 1, "", "batch_norm"], [306, 2, 1, "", "bernoulli"], [306, 2, 1, "", "beta"], [296, 2, 1, "", "binarizer"], [512, 2, 1, "", "binary_cross_entropy"], [311, 2, 1, "", "bincount"], [298, 2, 1, "", "bind_custom_gradient_function"], [179, 2, 1, "", "bitwise_and"], [180, 2, 1, "", "bitwise_invert"], [181, 2, 1, "", "bitwise_left_shift"], [182, 2, 1, "", "bitwise_or"], [183, 2, 1, "", "bitwise_right_shift"], [184, 2, 1, "", "bitwise_xor"], [504, 2, 1, "", "broadcast_arrays"], [359, 2, 1, "", "broadcast_shapes"], [504, 2, 1, "", "broadcast_to"], [416, 2, 1, "", "cache_fn"], [504, 2, 1, "", "can_cast"], [502, 2, 1, "", "cast_bool"], [185, 2, 1, "", "ceil"], [504, 2, 1, "", "check_float"], [538, 2, 1, "", "cholesky"], [144, 2, 1, "", "clear_cached_mem_on_dev"], [513, 2, 1, "", "clip"], [417, 2, 1, "", "clip_matrix_norm"], [418, 2, 1, "", "clip_vector_norm"], [504, 2, 1, "", "closest_valid_dtype"], [502, 2, 1, "", "cmp_is"], [502, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [513, 2, 1, "", "concat"], [302, 2, 1, "", "concat_from_sequence"], [344, 2, 1, "", "cond"], [296, 2, 1, "", "conj"], [513, 2, 1, "", "constant_pad"], [419, 2, 1, "", "container_types"], [523, 2, 1, "", "conv"], [524, 2, 1, "", "conv1d"], [525, 2, 1, "", "conv1d_transpose"], [526, 2, 1, "", "conv2d"], [527, 2, 1, "", "conv2d_transpose"], [528, 2, 1, "", "conv3d"], [529, 2, 1, "", "conv3d_transpose"], [530, 2, 1, "", "conv_general_dilated"], [531, 2, 1, "", "conv_general_transpose"], [503, 2, 1, "", "copy_array"], [515, 2, 1, "", "copy_nest"], [296, 2, 1, "", "copysign"], [311, 2, 1, "", "corrcoef"], [186, 2, 1, "", "cos"], [187, 2, 1, "", "cosh"], [296, 2, 1, "", "count_nonzero"], [311, 2, 1, "", "cov"], [539, 2, 1, "", "cross"], [512, 2, 1, "", "cross_entropy"], [311, 2, 1, "", "cummax"], [311, 2, 1, "", "cummin"], [521, 2, 1, "", "cumprod"], [521, 2, 1, "", "cumsum"], [420, 2, 1, "", "current_backend_str"], [299, 2, 1, "", "dct"], [421, 2, 1, "", "default"], [504, 2, 1, "", "default_complex_dtype"], [145, 2, 1, "", "default_device"], [504, 2, 1, "", "default_dtype"], [504, 2, 1, "", "default_float_dtype"], [504, 2, 1, "", "default_int_dtype"], [504, 2, 1, "", "default_uint_dtype"], [188, 2, 1, "", "deg2rad"], [532, 2, 1, "", "depthwise_conv2d"], [511, 2, 1, "", "det"], [146, 2, 1, "", "dev"], [147, 2, 1, "", "dev_util"], [299, 2, 1, "", "dft"], [511, 2, 1, "", "diag"], [345, 2, 1, "", "diagflat"], [511, 2, 1, "", "diagonal"], [296, 2, 1, "", "diff"], [296, 2, 1, "", "digamma"], [306, 2, 1, "", "dirichlet"], [189, 2, 1, "", "divide"], [346, 2, 1, "", "dot"], [533, 2, 1, "", "dropout"], [299, 2, 1, "", "dropout1d"], [299, 2, 1, "", "dropout2d"], [299, 2, 1, "", "dropout3d"], [302, 2, 1, "", "dsplit"], [302, 2, 1, "", "dstack"], [504, 2, 1, "", "dtype"], [504, 2, 1, "", "dtype_bits"], [515, 2, 1, "", "duplicate_array_index_chains"], [501, 6, 1, "", "e"], [347, 2, 1, "", "eig"], [511, 2, 1, "", "eigh"], [348, 2, 1, "", "eigh_tridiagonal"], [349, 2, 1, "", "eigvals"], [511, 2, 1, "", "eigvalsh"], [422, 2, 1, "", "einops_rearrange"], [423, 2, 1, "", "einops_reduce"], [424, 2, 1, "", "einops_repeat"], [521, 2, 1, "", "einsum"], [291, 2, 1, "", "elu"], [299, 2, 1, "", "embedding"], [503, 2, 1, "", "empty"], [503, 2, 1, "", "empty_like"], [190, 2, 1, "", "equal"], [191, 2, 1, "", "erf"], [509, 2, 1, "", "execute_with_gradients"], [425, 2, 1, "", "exists"], [192, 2, 1, "", "exp"], [193, 2, 1, "", "exp2"], [302, 2, 1, "", "expand"], [513, 2, 1, "", "expand_dims"], [194, 2, 1, "", "expm1"], [503, 2, 1, "", "eye"], [293, 2, 1, "", "eye_like"], [299, 2, 1, "", "fft"], [299, 2, 1, "", "fft2"], [302, 2, 1, "", "fill_diagonal"], [504, 2, 1, "", "finfo"], [296, 2, 1, "", "fix"], [302, 2, 1, "", "flatten"], [513, 2, 1, "", "flip"], [302, 2, 1, "", "fliplr"], [302, 2, 1, "", "flipud"], [296, 2, 1, "", "float_power"], [195, 2, 1, "", "floor"], [196, 2, 1, "", "floor_divide"], [296, 2, 1, "", "fmax"], [197, 2, 1, "", "fmin"], [198, 2, 1, "", "fmod"], [514, 2, 1, "", "fomaml_step"], [502, 2, 1, "", "for_loop"], [426, 2, 1, "", "fourier_encode"], [296, 2, 1, "", "frexp"], [503, 2, 1, "", "from_dlpack"], [503, 2, 1, "", "frombuffer"], [503, 2, 1, "", "full"], [503, 2, 1, "", "full_like"], [148, 2, 1, "", "function_supported_devices"], [427, 2, 1, "", "function_supported_devices_and_dtypes"], [504, 2, 1, "", "function_supported_dtypes"], [149, 2, 1, "", "function_unsupported_devices"], [428, 2, 1, "", "function_unsupported_devices_and_dtypes"], [504, 2, 1, "", "function_unsupported_dtypes"], [306, 2, 1, "", "gamma"], [429, 2, 1, "", "gather"], [430, 2, 1, "", "gather_nd"], [199, 2, 1, "", "gcd"], [55, 2, 1, "", "gelu"], [299, 2, 1, "", "generate_einsum_equation"], [431, 2, 1, "", "get_all_arrays_in_memory"], [150, 2, 1, "", "get_all_ivy_arrays_on_dev"], [299, 2, 1, "", "get_interpolate_kernel"], [432, 2, 1, "", "get_item"], [433, 2, 1, "", "get_num_dims"], [434, 2, 1, "", "get_referrers_recursive"], [151, 2, 1, "", "gpu_is_available"], [509, 2, 1, "", "grad"], [296, 2, 1, "", "gradient"], [509, 2, 1, "", "gradient_descent_update"], [200, 2, 1, "", "greater"], [201, 2, 1, "", "greater_equal"], [305, 2, 1, "", "group_norm"], [293, 2, 1, "", "hamming_window"], [152, 2, 1, "", "handle_soft_device_variable"], [293, 2, 1, "", "hann_window"], [56, 2, 1, "", "hardswish"], [435, 2, 1, "", "has_nans"], [302, 2, 1, "", "heaviside"], [311, 2, 1, "", "histogram"], [302, 2, 1, "", "hsplit"], [302, 2, 1, "", "hstack"], [296, 2, 1, "", "hypot"], [302, 2, 1, "", "i0"], [299, 2, 1, "", "idct"], [502, 2, 1, "", "if_else"], [299, 2, 1, "", "ifft"], [299, 2, 1, "", "ifftn"], [311, 2, 1, "", "igamma"], [504, 2, 1, "", "iinfo"], [202, 2, 1, "", "imag"], [515, 2, 1, "", "index_nest"], [293, 2, 1, "", "indices"], [501, 6, 1, "", "inf"], [504, 2, 1, "", "infer_default_dtype"], [511, 2, 1, "", "inner"], [436, 2, 1, "", "inplace_arrays_supported"], [437, 2, 1, "", "inplace_decrement"], [438, 2, 1, "", "inplace_increment"], [439, 2, 1, "", "inplace_update"], [440, 2, 1, "", "inplace_variables_supported"], [515, 2, 1, "", "insert_into_nest_at_index"], [515, 2, 1, "", "insert_into_nest_at_indices"], [305, 2, 1, "", "instance_norm"], [299, 2, 1, "", "interp"], [299, 2, 1, "", "interpolate"], [511, 2, 1, "", "inv"], [504, 2, 1, "", "invalid_dtype"], [309, 2, 1, "", "invert_permutation"], [441, 2, 1, "", "is_array"], [120, 2, 1, "", "is_bool_dtype"], [121, 2, 1, "", "is_complex_dtype"], [122, 2, 1, "", "is_float_dtype"], [123, 2, 1, "", "is_hashable_dtype"], [124, 2, 1, "", "is_int_dtype"], [442, 2, 1, "", "is_ivy_array"], [443, 2, 1, "", "is_ivy_container"], [444, 2, 1, "", "is_ivy_nested_array"], [310, 2, 1, "", "is_ivy_sparse_array"], [445, 2, 1, "", "is_native_array"], [125, 2, 1, "", "is_native_dtype"], [310, 2, 1, "", "is_native_sparse_array"], [126, 2, 1, "", "is_uint_dtype"], [296, 2, 1, "", "isclose"], [203, 2, 1, "", "isfinite"], [446, 2, 1, "", "isin"], [204, 2, 1, "", "isinf"], [205, 2, 1, "", "isnan"], [206, 2, 1, "", "isreal"], [447, 2, 1, "", "isscalar"], [448, 2, 1, "", "itemsize"], [509, 2, 1, "", "jac"], [293, 2, 1, "", "kaiser_bessel_derived_window"], [293, 2, 1, "", "kaiser_window"], [350, 2, 1, "", "kron"], [305, 2, 1, "", "l1_normalize"], [305, 2, 1, "", "l2_normalize"], [509, 2, 1, "", "lamb_update"], [509, 2, 1, "", "lars_update"], [516, 2, 1, "", "layer_norm"], [207, 2, 1, "", "lcm"], [296, 2, 1, "", "ldexp"], [57, 2, 1, "", "leaky_relu"], [296, 2, 1, "", "lerp"], [208, 2, 1, "", "less"], [209, 2, 1, "", "less_equal"], [309, 2, 1, "", "lexsort"], [296, 2, 1, "", "lgamma"], [534, 2, 1, "", "linear"], [503, 2, 1, "", "linspace"], [210, 2, 1, "", "log"], [211, 2, 1, "", "log10"], [212, 2, 1, "", "log1p"], [213, 2, 1, "", "log2"], [353, 2, 1, "", "log_poisson_loss"], [58, 2, 1, "", "log_softmax"], [214, 2, 1, "", "logaddexp"], [215, 2, 1, "", "logaddexp2"], [216, 2, 1, "", "logical_and"], [217, 2, 1, "", "logical_not"], [218, 2, 1, "", "logical_or"], [219, 2, 1, "", "logical_xor"], [291, 2, 1, "", "logit"], [291, 2, 1, "", "logsigmoid"], [503, 2, 1, "", "logspace"], [305, 2, 1, "", "lp_normalize"], [535, 2, 1, "", "lstm_update"], [511, 2, 1, "", "lu_factor"], [514, 2, 1, "", "maml_step"], [515, 2, 1, "", "map"], [515, 2, 1, "", "map_nest_at_index"], [515, 2, 1, "", "map_nest_at_indices"], [449, 2, 1, "", "match_kwargs"], [511, 2, 1, "", "matmul"], [351, 2, 1, "", "matrix_exp"], [511, 2, 1, "", "matrix_norm"], [511, 2, 1, "", "matrix_power"], [511, 2, 1, "", "matrix_rank"], [511, 2, 1, "", "matrix_transpose"], [521, 2, 1, "", "max"], [299, 2, 1, "", "max_pool1d"], [299, 2, 1, "", "max_pool2d"], [299, 2, 1, "", "max_pool3d"], [299, 2, 1, "", "max_unpool1d"], [220, 2, 1, "", "maximum"], [521, 2, 1, "", "mean"], [311, 2, 1, "", "median"], [503, 2, 1, "", "meshgrid"], [521, 2, 1, "", "min"], [221, 2, 1, "", "minimum"], [59, 2, 1, "", "mish"], [296, 2, 1, "", "modf"], [302, 2, 1, "", "moveaxis"], [520, 2, 1, "", "msort"], [352, 2, 1, "", "multi_dot"], [536, 2, 1, "", "multi_head_attention"], [515, 2, 1, "", "multi_index_nest"], [517, 2, 1, "", "multinomial"], [222, 2, 1, "", "multiply"], [450, 2, 1, "", "multiprocessing"], [501, 6, 1, "", "nan"], [223, 2, 1, "", "nan_to_num"], [311, 2, 1, "", "nanmean"], [311, 2, 1, "", "nanmedian"], [311, 2, 1, "", "nanquantile"], [296, 2, 1, "", "nansum"], [503, 2, 1, "", "native_array"], [310, 2, 1, "", "native_sparse_array"], [310, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [293, 2, 1, "", "ndenumerate"], [293, 2, 1, "", "ndindex"], [299, 2, 1, "", "nearest_interpolate"], [224, 2, 1, "", "negative"], [515, 2, 1, "", "nested_any"], [515, 2, 1, "", "nested_argwhere"], [515, 2, 1, "", "nested_map"], [515, 2, 1, "", "nested_multi_map"], [501, 6, 1, "", "newaxis"], [296, 2, 1, "", "nextafter"], [518, 2, 1, "", "nonzero"], [225, 2, 1, "", "not_equal"], [451, 2, 1, "", "num_arrays_in_memory"], [153, 2, 1, "", "num_cpu_cores"], [154, 2, 1, "", "num_gpus"], [155, 2, 1, "", "num_ivy_arrays_on_dev"], [503, 2, 1, "", "one_hot"], [503, 2, 1, "", "ones"], [503, 2, 1, "", "ones_like"], [509, 2, 1, "", "optimizer_update"], [511, 2, 1, "", "outer"], [302, 2, 1, "", "pad"], [156, 2, 1, "", "percent_used_mem_on_dev"], [513, 2, 1, "", "permute_dims"], [501, 6, 1, "", "pi"], [511, 2, 1, "", "pinv"], [306, 2, 1, "", "poisson"], [299, 2, 1, "", "pool"], [226, 2, 1, "", "positive"], [227, 2, 1, "", "pow"], [291, 2, 1, "", "prelu"], [452, 2, 1, "", "print_all_arrays_in_memory"], [157, 2, 1, "", "print_all_ivy_arrays_on_dev"], [521, 2, 1, "", "prod"], [127, 2, 1, "", "promote_types"], [128, 2, 1, "", "promote_types_of_inputs"], [515, 2, 1, "", "prune_empty"], [515, 2, 1, "", "prune_nest_at_index"], [515, 2, 1, "", "prune_nest_at_indices"], [302, 2, 1, "", "put_along_axis"], [511, 2, 1, "", "qr"], [311, 2, 1, "", "quantile"], [228, 2, 1, "", "rad2deg"], [517, 2, 1, "", "randint"], [517, 2, 1, "", "random_normal"], [517, 2, 1, "", "random_uniform"], [229, 2, 1, "", "real"], [230, 2, 1, "", "reciprocal"], [297, 2, 1, "", "reduce"], [299, 2, 1, "", "reduce_window"], [500, 2, 1, "", "relu"], [291, 2, 1, "", "relu6"], [231, 2, 1, "", "remainder"], [513, 2, 1, "", "repeat"], [514, 2, 1, "", "reptile_step"], [513, 2, 1, "", "reshape"], [129, 2, 1, "", "result_type"], [299, 2, 1, "", "rfftn"], [513, 2, 1, "", "roll"], [302, 2, 1, "", "rot90"], [232, 2, 1, "", "round"], [522, 2, 1, "", "save"], [537, 2, 1, "", "scaled_dot_product_attention"], [453, 2, 1, "", "scatter_flat"], [454, 2, 1, "", "scatter_nd"], [520, 2, 1, "", "searchsorted"], [517, 2, 1, "", "seed"], [291, 2, 1, "", "selu"], [291, 2, 1, "", "sequence_length"], [455, 2, 1, "", "set_array_mode"], [130, 2, 1, "", "set_default_complex_dtype"], [158, 2, 1, "", "set_default_device"], [131, 2, 1, "", "set_default_dtype"], [132, 2, 1, "", "set_default_float_dtype"], [133, 2, 1, "", "set_default_int_dtype"], [134, 2, 1, "", "set_default_uint_dtype"], [456, 2, 1, "", "set_exception_trace_mode"], [457, 2, 1, "", "set_item"], [458, 2, 1, "", "set_min_base"], [459, 2, 1, "", "set_min_denominator"], [515, 2, 1, "", "set_nest_at_index"], [515, 2, 1, "", "set_nest_at_indices"], [460, 2, 1, "", "set_nestable_mode"], [461, 2, 1, "", "set_precise_mode"], [462, 2, 1, "", "set_queue_timeout"], [463, 2, 1, "", "set_shape_array_mode"], [464, 2, 1, "", "set_show_func_wrapper_trace_mode"], [159, 2, 1, "", "set_soft_device_mode"], [160, 2, 1, "", "set_split_factor"], [465, 2, 1, "", "set_tmp_dir"], [466, 2, 1, "", "shape"], [517, 2, 1, "", "shuffle"], [500, 2, 1, "", "sigmoid"], [233, 2, 1, "", "sign"], [296, 2, 1, "", "signbit"], [291, 2, 1, "", "silu"], [234, 2, 1, "", "sin"], [296, 2, 1, "", "sinc"], [235, 2, 1, "", "sinh"], [511, 2, 1, "", "slogdet"], [500, 2, 1, "", "softmax"], [500, 2, 1, "", "softplus"], [511, 2, 1, "", "solve"], [520, 2, 1, "", "sort"], [512, 2, 1, "", "sparse_cross_entropy"], [513, 2, 1, "", "split"], [161, 2, 1, "", "split_factor"], [162, 2, 1, "", "split_func_call"], [236, 2, 1, "", "sqrt"], [237, 2, 1, "", "square"], [513, 2, 1, "", "squeeze"], [467, 2, 1, "", "stable_divide"], [468, 2, 1, "", "stable_pow"], [513, 2, 1, "", "stack"], [521, 2, 1, "", "std"], [509, 2, 1, "", "stop_gradient"], [469, 2, 1, "", "strides"], [238, 2, 1, "", "subtract"], [521, 2, 1, "", "sum"], [470, 2, 1, "", "supports_inplace_updates"], [511, 2, 1, "", "svd"], [511, 2, 1, "", "svdvals"], [513, 2, 1, "", "swapaxes"], [302, 2, 1, "", "take_along_axis"], [239, 2, 1, "", "tan"], [240, 2, 1, "", "tanh"], [511, 2, 1, "", "tensordot"], [511, 2, 1, "", "tensorsolve"], [291, 2, 1, "", "thresholded_relu"], [513, 2, 1, "", "tile"], [163, 2, 1, "", "to_device"], [471, 2, 1, "", "to_ivy_shape"], [472, 2, 1, "", "to_list"], [473, 2, 1, "", "to_native_shape"], [474, 2, 1, "", "to_numpy"], [475, 2, 1, "", "to_scalar"], [302, 2, 1, "", "top_k"], [164, 2, 1, "", "total_mem_on_dev"], [165, 2, 1, "", "tpu_is_available"], [511, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [241, 2, 1, "", "trapz"], [503, 2, 1, "", "tril"], [293, 2, 1, "", "tril_indices"], [503, 2, 1, "", "triu"], [503, 2, 1, "", "triu_indices"], [242, 2, 1, "", "trunc"], [243, 2, 1, "", "trunc_divide"], [476, 2, 1, "", "try_else_none"], [502, 2, 1, "", "try_except"], [135, 2, 1, "", "type_promote_arrays"], [2, 2, 1, "", "unify"], [519, 2, 1, "", "unique_all"], [302, 2, 1, "", "unique_consecutive"], [519, 2, 1, "", "unique_counts"], [519, 2, 1, "", "unique_inverse"], [519, 2, 1, "", "unique_values"], [307, 2, 1, "", "unravel_index"], [477, 2, 1, "", "unset_array_mode"], [136, 2, 1, "", "unset_default_complex_dtype"], [166, 2, 1, "", "unset_default_device"], [137, 2, 1, "", "unset_default_dtype"], [138, 2, 1, "", "unset_default_float_dtype"], [139, 2, 1, "", "unset_default_int_dtype"], [140, 2, 1, "", "unset_default_uint_dtype"], [478, 2, 1, "", "unset_exception_trace_mode"], [479, 2, 1, "", "unset_min_base"], [508, 2, 1, "", "unset_min_denominator"], [508, 2, 1, "", "unset_nestable_mode"], [508, 2, 1, "", "unset_precise_mode"], [508, 2, 1, "", "unset_queue_timeout"], [508, 2, 1, "", "unset_shape_array_mode"], [508, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [167, 2, 1, "", "unset_soft_device_mode"], [508, 2, 1, "", "unset_tmp_dir"], [293, 2, 1, "", "unsorted_segment_min"], [293, 2, 1, "", "unsorted_segment_sum"], [513, 2, 1, "", "unstack"], [168, 2, 1, "", "used_mem_on_dev"], [141, 2, 1, "", "valid_dtype"], [509, 2, 1, "", "value_and_grad"], [508, 2, 1, "", "value_is_nan"], [511, 2, 1, "", "vander"], [521, 2, 1, "", "var"], [511, 2, 1, "", "vecdot"], [511, 2, 1, "", "vector_norm"], [511, 2, 1, "", "vector_to_skew_symmetric_matrix"], [508, 2, 1, "", "vmap"], [293, 2, 1, "", "vorbis_window"], [302, 2, 1, "", "vsplit"], [302, 2, 1, "", "vstack"], [518, 2, 1, "", "where"], [502, 2, 1, "", "while_loop"], [296, 2, 1, "", "xlogy"], [513, 2, 1, "", "zero_pad"], [503, 2, 1, "", "zeros"], [503, 2, 1, "", "zeros_like"], [296, 2, 1, "", "zeta"]], "ivy.Container": [[169, 0, 1, "", "abs"], [170, 0, 1, "", "acos"], [171, 0, 1, "", "acosh"], [489, 0, 1, "", "adam_step"], [490, 0, 1, "", "adam_update"], [313, 0, 1, "", "adaptive_avg_pool1d"], [314, 0, 1, "", "adaptive_avg_pool2d"], [315, 0, 1, "", "adaptive_max_pool2d"], [172, 0, 1, "", "add"], [343, 0, 1, "", "adjoint"], [639, 0, 1, "", "all"], [411, 0, 1, "", "all_equal"], [265, 0, 1, "", "allclose"], [173, 0, 1, "", "angle"], [640, 0, 1, "", "any"], [616, 0, 1, "", "argmax"], [617, 0, 1, "", "argmin"], [625, 0, 1, "", "argsort"], [618, 0, 1, "", "argwhere"], [414, 0, 1, "", "array_equal"], [354, 0, 1, "", "as_strided"], [73, 0, 1, "", "asarray"], [174, 0, 1, "", "asin"], [175, 0, 1, "", "asinh"], [415, 0, 1, "", "assert_supports_inplace"], [355, 0, 1, "", "associative_scan"], [101, 0, 1, "", "astype"], [176, 0, 1, "", "atan"], [177, 0, 1, "", "atan2"], [178, 0, 1, "", "atanh"], [356, 0, 1, "", "atleast_1d"], [357, 0, 1, "", "atleast_2d"], [358, 0, 1, "", "atleast_3d"], [317, 0, 1, "", "avg_pool1d"], [318, 0, 1, "", "avg_pool2d"], [319, 0, 1, "", "avg_pool3d"], [381, 0, 1, "", "batch_norm"], [387, 0, 1, "", "bernoulli"], [388, 0, 1, "", "beta"], [266, 0, 1, "", "binarizer"], [568, 0, 1, "", "binary_cross_entropy"], [399, 0, 1, "", "bincount"], [179, 0, 1, "", "bitwise_and"], [180, 0, 1, "", "bitwise_invert"], [181, 0, 1, "", "bitwise_left_shift"], [182, 0, 1, "", "bitwise_or"], [183, 0, 1, "", "bitwise_right_shift"], [184, 0, 1, "", "bitwise_xor"], [102, 0, 1, "", "broadcast_arrays"], [359, 0, 1, "", "broadcast_shapes"], [103, 0, 1, "", "broadcast_to"], [104, 0, 1, "", "can_cast"], [185, 0, 1, "", "ceil"], [538, 0, 1, "", "cholesky"], [571, 0, 1, "", "clip"], [417, 0, 1, "", "clip_matrix_norm"], [418, 0, 1, "", "clip_vector_norm"], [572, 0, 1, "", "concat"], [360, 0, 1, "", "concat_from_sequence"], [344, 0, 1, "", "cond"], [267, 0, 1, "", "conj"], [573, 0, 1, "", "constant_pad"], [524, 0, 1, "", "conv1d"], [525, 0, 1, "", "conv1d_transpose"], [526, 0, 1, "", "conv2d"], [527, 0, 1, "", "conv2d_transpose"], [528, 0, 1, "", "conv3d"], [529, 0, 1, "", "conv3d_transpose"], [79, 0, 1, "", "copy_array"], [268, 0, 1, "", "copysign"], [400, 0, 1, "", "corrcoef"], [186, 0, 1, "", "cos"], [187, 0, 1, "", "cosh"], [269, 0, 1, "", "count_nonzero"], [401, 0, 1, "", "cov"], [539, 0, 1, "", "cross"], [569, 0, 1, "", "cross_entropy"], [402, 0, 1, "", "cummax"], [403, 0, 1, "", "cummin"], [629, 0, 1, "", "cumprod"], [630, 0, 1, "", "cumsum"], [320, 0, 1, "", "dct"], [188, 0, 1, "", "deg2rad"], [532, 0, 1, "", "depthwise_conv2d"], [540, 0, 1, "", "det"], [146, 0, 1, "", "dev"], [321, 0, 1, "", "dft"], [541, 0, 1, "", "diag"], [345, 0, 1, "", "diagflat"], [542, 0, 1, "", "diagonal"], [270, 0, 1, "", "diff"], [271, 0, 1, "", "digamma"], [389, 0, 1, "", "dirichlet"], [189, 0, 1, "", "divide"], [533, 0, 1, "", "dropout"], [322, 0, 1, "", "dropout1d"], [323, 0, 1, "", "dropout2d"], [324, 0, 1, "", "dropout3d"], [361, 0, 1, "", "dsplit"], [362, 0, 1, "", "dstack"], [112, 0, 1, "", "dtype"], [347, 0, 1, "", "eig"], [544, 0, 1, "", "eigh"], [348, 0, 1, "", "eigh_tridiagonal"], [349, 0, 1, "", "eigvals"], [545, 0, 1, "", "eigvalsh"], [422, 0, 1, "", "einops_rearrange"], [423, 0, 1, "", "einops_reduce"], [424, 0, 1, "", "einops_repeat"], [631, 0, 1, "", "einsum"], [244, 0, 1, "", "elu"], [325, 0, 1, "", "embedding"], [81, 0, 1, "", "empty_like"], [190, 0, 1, "", "equal"], [191, 0, 1, "", "erf"], [192, 0, 1, "", "exp"], [193, 0, 1, "", "exp2"], [363, 0, 1, "", "expand"], [574, 0, 1, "", "expand_dims"], [194, 0, 1, "", "expm1"], [253, 0, 1, "", "eye_like"], [326, 0, 1, "", "fft"], [364, 0, 1, "", "fill_diagonal"], [114, 0, 1, "", "finfo"], [272, 0, 1, "", "fix"], [365, 0, 1, "", "flatten"], [575, 0, 1, "", "flip"], [366, 0, 1, "", "fliplr"], [367, 0, 1, "", "flipud"], [273, 0, 1, "", "float_power"], [195, 0, 1, "", "floor"], [196, 0, 1, "", "floor_divide"], [274, 0, 1, "", "fmax"], [197, 0, 1, "", "fmin"], [198, 0, 1, "", "fmod"], [426, 0, 1, "", "fourier_encode"], [275, 0, 1, "", "frexp"], [83, 0, 1, "", "from_dlpack"], [84, 0, 1, "", "frombuffer"], [86, 0, 1, "", "full_like"], [390, 0, 1, "", "gamma"], [429, 0, 1, "", "gather"], [430, 0, 1, "", "gather_nd"], [199, 0, 1, "", "gcd"], [55, 0, 1, "", "gelu"], [433, 0, 1, "", "get_num_dims"], [276, 0, 1, "", "gradient"], [493, 0, 1, "", "gradient_descent_update"], [200, 0, 1, "", "greater"], [201, 0, 1, "", "greater_equal"], [382, 0, 1, "", "group_norm"], [254, 0, 1, "", "hamming_window"], [255, 0, 1, "", "hann_window"], [56, 0, 1, "", "hardswish"], [435, 0, 1, "", "has_nans"], [368, 0, 1, "", "heaviside"], [404, 0, 1, "", "histogram"], [369, 0, 1, "", "hsplit"], [370, 0, 1, "", "hstack"], [277, 0, 1, "", "hypot"], [371, 0, 1, "", "i0"], [330, 0, 1, "", "idct"], [331, 0, 1, "", "ifft"], [332, 0, 1, "", "ifftn"], [405, 0, 1, "", "igamma"], [117, 0, 1, "", "iinfo"], [202, 0, 1, "", "imag"], [546, 0, 1, "", "inner"], [437, 0, 1, "", "inplace_decrement"], [438, 0, 1, "", "inplace_increment"], [439, 0, 1, "", "inplace_update"], [383, 0, 1, "", "instance_norm"], [334, 0, 1, "", "interpolate"], [547, 0, 1, "", "inv"], [393, 0, 1, "", "invert_permutation"], [441, 0, 1, "", "is_array"], [120, 0, 1, "", "is_bool_dtype"], [121, 0, 1, "", "is_complex_dtype"], [122, 0, 1, "", "is_float_dtype"], [124, 0, 1, "", "is_int_dtype"], [442, 0, 1, "", "is_ivy_array"], [445, 0, 1, "", "is_native_array"], [126, 0, 1, "", "is_uint_dtype"], [278, 0, 1, "", "isclose"], [203, 0, 1, "", "isfinite"], [446, 0, 1, "", "isin"], [204, 0, 1, "", "isinf"], [205, 0, 1, "", "isnan"], [206, 0, 1, "", "isreal"], [448, 0, 1, "", "itemsize"], [257, 0, 1, "", "kaiser_bessel_derived_window"], [258, 0, 1, "", "kaiser_window"], [350, 0, 1, "", "kron"], [384, 0, 1, "", "l1_normalize"], [385, 0, 1, "", "l2_normalize"], [495, 0, 1, "", "lamb_update"], [496, 0, 1, "", "lars_update"], [609, 0, 1, "", "layer_norm"], [207, 0, 1, "", "lcm"], [279, 0, 1, "", "ldexp"], [57, 0, 1, "", "leaky_relu"], [280, 0, 1, "", "lerp"], [208, 0, 1, "", "less"], [209, 0, 1, "", "less_equal"], [394, 0, 1, "", "lexsort"], [534, 0, 1, "", "linear"], [87, 0, 1, "", "linspace"], [210, 0, 1, "", "log"], [211, 0, 1, "", "log10"], [212, 0, 1, "", "log1p"], [213, 0, 1, "", "log2"], [58, 0, 1, "", "log_softmax"], [214, 0, 1, "", "logaddexp"], [215, 0, 1, "", "logaddexp2"], [216, 0, 1, "", "logical_and"], [217, 0, 1, "", "logical_not"], [218, 0, 1, "", "logical_or"], [219, 0, 1, "", "logical_xor"], [245, 0, 1, "", "logit"], [246, 0, 1, "", "logsigmoid"], [88, 0, 1, "", "logspace"], [386, 0, 1, "", "lp_normalize"], [535, 0, 1, "", "lstm_update"], [549, 0, 1, "", "matmul"], [351, 0, 1, "", "matrix_exp"], [550, 0, 1, "", "matrix_norm"], [551, 0, 1, "", "matrix_power"], [552, 0, 1, "", "matrix_rank"], [553, 0, 1, "", "matrix_transpose"], [632, 0, 1, "", "max"], [335, 0, 1, "", "max_pool1d"], [336, 0, 1, "", "max_pool2d"], [337, 0, 1, "", "max_pool3d"], [220, 0, 1, "", "maximum"], [633, 0, 1, "", "mean"], [406, 0, 1, "", "median"], [89, 0, 1, "", "meshgrid"], [634, 0, 1, "", "min"], [221, 0, 1, "", "minimum"], [59, 0, 1, "", "mish"], [282, 0, 1, "", "modf"], [372, 0, 1, "", "moveaxis"], [626, 0, 1, "", "msort"], [352, 0, 1, "", "multi_dot"], [536, 0, 1, "", "multi_head_attention"], [610, 0, 1, "", "multinomial"], [222, 0, 1, "", "multiply"], [223, 0, 1, "", "nan_to_num"], [407, 0, 1, "", "nanmean"], [408, 0, 1, "", "nanmedian"], [283, 0, 1, "", "nansum"], [90, 0, 1, "", "native_array"], [224, 0, 1, "", "negative"], [284, 0, 1, "", "nextafter"], [619, 0, 1, "", "nonzero"], [225, 0, 1, "", "not_equal"], [91, 0, 1, "", "one_hot"], [93, 0, 1, "", "ones_like"], [497, 0, 1, "", "optimizer_update"], [554, 0, 1, "", "outer"], [373, 0, 1, "", "pad"], [576, 0, 1, "", "permute_dims"], [555, 0, 1, "", "pinv"], [391, 0, 1, "", "poisson"], [226, 0, 1, "", "positive"], [227, 0, 1, "", "pow"], [247, 0, 1, "", "prelu"], [635, 0, 1, "", "prod"], [556, 0, 1, "", "qr"], [410, 0, 1, "", "quantile"], [228, 0, 1, "", "rad2deg"], [611, 0, 1, "", "randint"], [612, 0, 1, "", "random_normal"], [613, 0, 1, "", "random_uniform"], [229, 0, 1, "", "real"], [230, 0, 1, "", "reciprocal"], [289, 0, 1, "", "reduce"], [341, 0, 1, "", "reduce_window"], [60, 0, 1, "", "relu"], [248, 0, 1, "", "relu6"], [231, 0, 1, "", "remainder"], [577, 0, 1, "", "repeat"], [578, 0, 1, "", "reshape"], [129, 0, 1, "", "result_type"], [342, 0, 1, "", "rfftn"], [579, 0, 1, "", "roll"], [375, 0, 1, "", "rot90"], [232, 0, 1, "", "round"], [537, 0, 1, "", "scaled_dot_product_attention"], [453, 0, 1, "", "scatter_flat"], [454, 0, 1, "", "scatter_nd"], [627, 0, 1, "", "searchsorted"], [249, 0, 1, "", "selu"], [615, 0, 1, "", "shuffle"], [61, 0, 1, "", "sigmoid"], [233, 0, 1, "", "sign"], [285, 0, 1, "", "signbit"], [251, 0, 1, "", "silu"], [234, 0, 1, "", "sin"], [286, 0, 1, "", "sinc"], [235, 0, 1, "", "sinh"], [557, 0, 1, "", "slogdet"], [62, 0, 1, "", "softmax"], [63, 0, 1, "", "softplus"], [558, 0, 1, "", "solve"], [628, 0, 1, "", "sort"], [570, 0, 1, "", "sparse_cross_entropy"], [580, 0, 1, "", "split"], [236, 0, 1, "", "sqrt"], [237, 0, 1, "", "square"], [581, 0, 1, "", "squeeze"], [467, 0, 1, "", "stable_divide"], [468, 0, 1, "", "stable_pow"], [582, 0, 1, "", "stack"], [636, 0, 1, "", "std"], [498, 0, 1, "", "stop_gradient"], [469, 0, 1, "", "strides"], [238, 0, 1, "", "subtract"], [637, 0, 1, "", "sum"], [470, 0, 1, "", "supports_inplace_updates"], [559, 0, 1, "", "svd"], [560, 0, 1, "", "svdvals"], [583, 0, 1, "", "swapaxes"], [376, 0, 1, "", "take_along_axis"], [239, 0, 1, "", "tan"], [240, 0, 1, "", "tanh"], [561, 0, 1, "", "tensordot"], [562, 0, 1, "", "tensorsolve"], [252, 0, 1, "", "thresholded_relu"], [584, 0, 1, "", "tile"], [163, 0, 1, "", "to_device"], [472, 0, 1, "", "to_list"], [474, 0, 1, "", "to_numpy"], [475, 0, 1, "", "to_scalar"], [377, 0, 1, "", "top_k"], [563, 0, 1, "", "trace"], [241, 0, 1, "", "trapz"], [94, 0, 1, "", "tril"], [261, 0, 1, "", "tril_indices"], [95, 0, 1, "", "triu"], [96, 0, 1, "", "triu_indices"], [242, 0, 1, "", "trunc"], [243, 0, 1, "", "trunc_divide"], [621, 0, 1, "", "unique_all"], [378, 0, 1, "", "unique_consecutive"], [622, 0, 1, "", "unique_counts"], [623, 0, 1, "", "unique_inverse"], [624, 0, 1, "", "unique_values"], [392, 0, 1, "", "unravel_index"], [262, 0, 1, "", "unsorted_segment_min"], [263, 0, 1, "", "unsorted_segment_sum"], [585, 0, 1, "", "unstack"], [487, 0, 1, "", "value_is_nan"], [564, 0, 1, "", "vander"], [638, 0, 1, "", "var"], [565, 0, 1, "", "vecdot"], [566, 0, 1, "", "vector_norm"], [567, 0, 1, "", "vector_to_skew_symmetric_matrix"], [264, 0, 1, "", "vorbis_window"], [379, 0, 1, "", "vsplit"], [380, 0, 1, "", "vstack"], [620, 0, 1, "", "where"], [287, 0, 1, "", "xlogy"], [586, 0, 1, "", "zero_pad"], [98, 0, 1, "", "zeros_like"], [288, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[3, 3, 0, "-", "activations"], [48, 3, 0, "-", "array"], [4, 3, 0, "-", "conversions"], [5, 3, 0, "-", "creation"], [6, 3, 0, "-", "data_type"], [7, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "experimental"], [10, 3, 0, "-", "general"], [11, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [13, 3, 0, "-", "layers"], [14, 3, 0, "-", "linear_algebra"], [15, 3, 0, "-", "losses"], [16, 3, 0, "-", "manipulation"], [17, 3, 0, "-", "norms"], [18, 3, 0, "-", "random"], [19, 3, 0, "-", "searching"], [20, 3, 0, "-", "set"], [21, 3, 0, "-", "sorting"], [22, 3, 0, "-", "statistical"], [23, 3, 0, "-", "utility"], [24, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[3, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "gelu"], [3, 0, 1, "", "hardswish"], [3, 0, 1, "", "leaky_relu"], [3, 0, 1, "", "log_softmax"], [3, 0, 1, "", "mish"], [3, 0, 1, "", "relu"], [3, 0, 1, "", "sigmoid"], [3, 0, 1, "", "softmax"], [3, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[48, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[48, 5, 1, "", "T"], [48, 0, 1, "", "__abs__"], [48, 0, 1, "", "__add__"], [48, 0, 1, "", "__eq__"], [48, 0, 1, "", "__ge__"], [48, 0, 1, "", "__gt__"], [48, 0, 1, "", "__init__"], [48, 0, 1, "", "__le__"], [48, 0, 1, "", "__lt__"], [48, 0, 1, "", "__ne__"], [48, 0, 1, "", "__pow__"], [48, 0, 1, "", "__radd__"], [48, 0, 1, "", "__rrshift__"], [48, 0, 1, "", "__rshift__"], [48, 0, 1, "", "__rsub__"], [48, 0, 1, "", "__sub__"], [48, 0, 1, "", "__truediv__"], [48, 0, 1, "", "__xor__"], [48, 5, 1, "", "backend"], [48, 5, 1, "", "base"], [48, 5, 1, "", "data"], [48, 5, 1, "", "device"], [48, 5, 1, "", "dtype"], [48, 5, 1, "", "dynamic_backend"], [48, 5, 1, "", "imag"], [48, 5, 1, "", "itemsize"], [48, 5, 1, "", "mT"], [48, 5, 1, "", "ndim"], [48, 5, 1, "", "real"], [48, 5, 1, "", "shape"], [48, 5, 1, "", "size"], [48, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[4, 2, 1, "", "_to_ivy"], [4, 2, 1, "", "_to_native"], [4, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [4, 2, 1, "", "to_ivy"], [4, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[5, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "asarray"], [5, 0, 1, "", "copy_array"], [5, 0, 1, "", "empty_like"], [5, 0, 1, "", "from_dlpack"], [5, 0, 1, "", "full_like"], [5, 0, 1, "", "linspace"], [5, 0, 1, "", "logspace"], [5, 0, 1, "", "meshgrid"], [5, 0, 1, "", "native_array"], [5, 0, 1, "", "one_hot"], [5, 0, 1, "", "ones_like"], [5, 0, 1, "", "tril"], [5, 0, 1, "", "triu"], [5, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[6, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "astype"], [6, 0, 1, "", "broadcast_arrays"], [6, 0, 1, "", "broadcast_to"], [6, 0, 1, "", "can_cast"], [6, 0, 1, "", "dtype"], [6, 0, 1, "", "finfo"], [6, 0, 1, "", "iinfo"], [6, 0, 1, "", "is_bool_dtype"], [6, 0, 1, "", "is_float_dtype"], [6, 0, 1, "", "is_int_dtype"], [6, 0, 1, "", "is_uint_dtype"], [6, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[7, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "dev"], [7, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[8, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "abs"], [8, 0, 1, "", "acos"], [8, 0, 1, "", "acosh"], [8, 0, 1, "", "add"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "asin"], [8, 0, 1, "", "asinh"], [8, 0, 1, "", "atan"], [8, 0, 1, "", "atan2"], [8, 0, 1, "", "atanh"], [8, 0, 1, "", "bitwise_and"], [8, 0, 1, "", "bitwise_invert"], [8, 0, 1, "", "bitwise_left_shift"], [8, 0, 1, "", "bitwise_or"], [8, 0, 1, "", "bitwise_right_shift"], [8, 0, 1, "", "bitwise_xor"], [8, 0, 1, "", "ceil"], [8, 0, 1, "", "cos"], [8, 0, 1, "", "cosh"], [8, 0, 1, "", "deg2rad"], [8, 0, 1, "", "divide"], [8, 0, 1, "", "equal"], [8, 0, 1, "", "erf"], [8, 0, 1, "", "exp"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "expm1"], [8, 0, 1, "", "floor"], [8, 0, 1, "", "floor_divide"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "greater"], [8, 0, 1, "", "greater_equal"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isfinite"], [8, 0, 1, "", "isinf"], [8, 0, 1, "", "isnan"], [8, 0, 1, "", "isreal"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "less"], [8, 0, 1, "", "less_equal"], [8, 0, 1, "", "log"], [8, 0, 1, "", "log10"], [8, 0, 1, "", "log1p"], [8, 0, 1, "", "log2"], [8, 0, 1, "", "logaddexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "logical_and"], [8, 0, 1, "", "logical_not"], [8, 0, 1, "", "logical_or"], [8, 0, 1, "", "logical_xor"], [8, 0, 1, "", "maximum"], [8, 0, 1, "", "minimum"], [8, 0, 1, "", "multiply"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "negative"], [8, 0, 1, "", "not_equal"], [8, 0, 1, "", "positive"], [8, 0, 1, "", "pow"], [8, 0, 1, "", "rad2deg"], [8, 0, 1, "", "real"], [8, 0, 1, "", "reciprocal"], [8, 0, 1, "", "remainder"], [8, 0, 1, "", "round"], [8, 0, 1, "", "sign"], [8, 0, 1, "", "sin"], [8, 0, 1, "", "sinh"], [8, 0, 1, "", "sqrt"], [8, 0, 1, "", "square"], [8, 0, 1, "", "subtract"], [8, 0, 1, "", "tan"], [8, 0, 1, "", "tanh"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "trunc"], [8, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[9, 3, 0, "-", "activations"], [9, 3, 0, "-", "conversions"], [9, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [9, 3, 0, "-", "device"], [9, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "general"], [9, 3, 0, "-", "gradients"], [9, 3, 0, "-", "image"], [9, 3, 0, "-", "layers"], [9, 3, 0, "-", "linear_algebra"], [9, 3, 0, "-", "losses"], [9, 3, 0, "-", "manipulation"], [9, 3, 0, "-", "norms"], [9, 3, 0, "-", "random"], [9, 3, 0, "-", "searching"], [9, 3, 0, "-", "set"], [9, 3, 0, "-", "sorting"], [9, 3, 0, "-", "statistical"], [9, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[9, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "elu"], [9, 0, 1, "", "logit"], [9, 0, 1, "", "logsigmoid"], [9, 0, 1, "", "prelu"], [9, 0, 1, "", "relu6"], [9, 0, 1, "", "selu"], [9, 0, 1, "", "silu"], [9, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[9, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[9, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "eye_like"], [9, 0, 1, "", "unsorted_segment_min"], [9, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[9, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[9, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[9, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "allclose"], [9, 0, 1, "", "binarizer"], [9, 0, 1, "", "conj"], [9, 0, 1, "", "copysign"], [9, 0, 1, "", "count_nonzero"], [9, 0, 1, "", "diff"], [9, 0, 1, "", "digamma"], [9, 0, 1, "", "fix"], [9, 0, 1, "", "float_power"], [9, 0, 1, "", "fmax"], [9, 0, 1, "", "fmod"], [9, 0, 1, "", "frexp"], [9, 0, 1, "", "gradient"], [9, 0, 1, "", "hypot"], [9, 0, 1, "", "isclose"], [9, 0, 1, "", "ldexp"], [9, 0, 1, "", "lerp"], [9, 0, 1, "", "lgamma"], [9, 0, 1, "", "modf"], [9, 0, 1, "", "nansum"], [9, 0, 1, "", "nextafter"], [9, 0, 1, "", "signbit"], [9, 0, 1, "", "sinc"], [9, 0, 1, "", "xlogy"], [9, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[9, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[9, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[9, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[9, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adaptive_avg_pool1d"], [9, 0, 1, "", "adaptive_avg_pool2d"], [9, 0, 1, "", "adaptive_max_pool2d"], [9, 0, 1, "", "avg_pool1d"], [9, 0, 1, "", "avg_pool2d"], [9, 0, 1, "", "avg_pool3d"], [9, 0, 1, "", "dct"], [9, 0, 1, "", "dft"], [9, 0, 1, "", "embedding"], [9, 0, 1, "", "fft"], [9, 0, 1, "", "fft2"], [9, 0, 1, "", "idct"], [9, 0, 1, "", "ifft"], [9, 0, 1, "", "ifftn"], [9, 0, 1, "", "interpolate"], [9, 0, 1, "", "max_pool1d"], [9, 0, 1, "", "max_pool2d"], [9, 0, 1, "", "max_pool3d"], [9, 0, 1, "", "reduce_window"], [9, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adjoint"], [9, 0, 1, "", "cond"], [9, 0, 1, "", "diagflat"], [9, 0, 1, "", "eig"], [9, 0, 1, "", "eigh_tridiagonal"], [9, 0, 1, "", "eigvals"], [9, 0, 1, "", "kron"], [9, 0, 1, "", "matrix_exp"], [9, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[9, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[9, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "as_strided"], [9, 0, 1, "", "associative_scan"], [9, 0, 1, "", "atleast_1d"], [9, 0, 1, "", "atleast_2d"], [9, 0, 1, "", "atleast_3d"], [9, 0, 1, "", "concat_from_sequence"], [9, 0, 1, "", "dsplit"], [9, 0, 1, "", "dstack"], [9, 0, 1, "", "expand"], [9, 0, 1, "", "fill_diagonal"], [9, 0, 1, "", "flatten"], [9, 0, 1, "", "fliplr"], [9, 0, 1, "", "flipud"], [9, 0, 1, "", "heaviside"], [9, 0, 1, "", "hsplit"], [9, 0, 1, "", "hstack"], [9, 0, 1, "", "i0"], [9, 0, 1, "", "moveaxis"], [9, 0, 1, "", "pad"], [9, 0, 1, "", "rot90"], [9, 0, 1, "", "take_along_axis"], [9, 0, 1, "", "top_k"], [9, 0, 1, "", "unique_consecutive"], [9, 0, 1, "", "vsplit"], [9, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[9, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "batch_norm"], [9, 0, 1, "", "group_norm"], [9, 0, 1, "", "instance_norm"], [9, 0, 1, "", "l1_normalize"], [9, 0, 1, "", "l2_normalize"], [9, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[9, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bernoulli"], [9, 0, 1, "", "beta"], [9, 0, 1, "", "dirichlet"], [9, 0, 1, "", "gamma"], [9, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[9, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[9, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[9, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[9, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bincount"], [9, 0, 1, "", "corrcoef"], [9, 0, 1, "", "cov"], [9, 0, 1, "", "cummax"], [9, 0, 1, "", "cummin"], [9, 0, 1, "", "histogram"], [9, 0, 1, "", "igamma"], [9, 0, 1, "", "median"], [9, 0, 1, "", "nanmean"], [9, 0, 1, "", "nanmedian"], [9, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[9, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[10, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "all_equal"], [10, 0, 1, "", "array_equal"], [10, 0, 1, "", "assert_supports_inplace"], [10, 0, 1, "", "clip_matrix_norm"], [10, 0, 1, "", "clip_vector_norm"], [10, 0, 1, "", "default"], [10, 0, 1, "", "einops_rearrange"], [10, 0, 1, "", "einops_reduce"], [10, 0, 1, "", "einops_repeat"], [10, 0, 1, "", "exists"], [10, 0, 1, "", "fourier_encode"], [10, 0, 1, "", "gather"], [10, 0, 1, "", "gather_nd"], [10, 0, 1, "", "get_num_dims"], [10, 0, 1, "", "has_nans"], [10, 0, 1, "", "inplace_decrement"], [10, 0, 1, "", "inplace_increment"], [10, 0, 1, "", "inplace_update"], [10, 0, 1, "", "is_array"], [10, 0, 1, "", "is_ivy_array"], [10, 0, 1, "", "is_ivy_container"], [10, 0, 1, "", "is_native_array"], [10, 0, 1, "", "isin"], [10, 0, 1, "", "scatter_flat"], [10, 0, 1, "", "scatter_nd"], [10, 0, 1, "", "stable_divide"], [10, 0, 1, "", "stable_pow"], [10, 0, 1, "", "supports_inplace_updates"], [10, 0, 1, "", "to_file"], [10, 0, 1, "", "to_list"], [10, 0, 1, "", "to_numpy"], [10, 0, 1, "", "to_scalar"], [10, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[11, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "adam_step"], [11, 0, 1, "", "adam_update"], [11, 0, 1, "", "gradient_descent_update"], [11, 0, 1, "", "lamb_update"], [11, 0, 1, "", "lars_update"], [11, 0, 1, "", "optimizer_update"], [11, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[12, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[13, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "conv1d"], [13, 0, 1, "", "conv1d_transpose"], [13, 0, 1, "", "conv2d"], [13, 0, 1, "", "conv2d_transpose"], [13, 0, 1, "", "conv3d"], [13, 0, 1, "", "conv3d_transpose"], [13, 0, 1, "", "depthwise_conv2d"], [13, 0, 1, "", "dropout"], [13, 0, 1, "", "dropout1d"], [13, 0, 1, "", "dropout2d"], [13, 0, 1, "", "dropout3d"], [13, 0, 1, "", "linear"], [13, 0, 1, "", "lstm_update"], [13, 0, 1, "", "multi_head_attention"], [13, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[14, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "cholesky"], [14, 0, 1, "", "cross"], [14, 0, 1, "", "det"], [14, 0, 1, "", "diag"], [14, 0, 1, "", "diagonal"], [14, 0, 1, "", "eig"], [14, 0, 1, "", "eigh"], [14, 0, 1, "", "eigvalsh"], [14, 0, 1, "", "inner"], [14, 0, 1, "", "inv"], [14, 0, 1, "", "matmul"], [14, 0, 1, "", "matrix_norm"], [14, 0, 1, "", "matrix_power"], [14, 0, 1, "", "matrix_rank"], [14, 0, 1, "", "matrix_transpose"], [14, 0, 1, "", "outer"], [14, 0, 1, "", "pinv"], [14, 0, 1, "", "qr"], [14, 0, 1, "", "slogdet"], [14, 0, 1, "", "solve"], [14, 0, 1, "", "svd"], [14, 0, 1, "", "svdvals"], [14, 0, 1, "", "tensordot"], [14, 0, 1, "", "tensorsolve"], [14, 0, 1, "", "trace"], [14, 0, 1, "", "vander"], [14, 0, 1, "", "vecdot"], [14, 0, 1, "", "vector_norm"], [14, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[15, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "binary_cross_entropy"], [15, 0, 1, "", "cross_entropy"], [15, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[16, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "clip"], [16, 0, 1, "", "concat"], [16, 0, 1, "", "constant_pad"], [16, 0, 1, "", "expand_dims"], [16, 0, 1, "", "flip"], [16, 0, 1, "", "permute_dims"], [16, 0, 1, "", "repeat"], [16, 0, 1, "", "reshape"], [16, 0, 1, "", "roll"], [16, 0, 1, "", "split"], [16, 0, 1, "", "squeeze"], [16, 0, 1, "", "stack"], [16, 0, 1, "", "swapaxes"], [16, 0, 1, "", "tile"], [16, 0, 1, "", "unstack"], [16, 0, 1, "", "view"], [16, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[17, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[18, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "multinomial"], [18, 0, 1, "", "randint"], [18, 0, 1, "", "random_normal"], [18, 0, 1, "", "random_uniform"], [18, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[19, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "argmax"], [19, 0, 1, "", "argmin"], [19, 0, 1, "", "argwhere"], [19, 0, 1, "", "nonzero"], [19, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[20, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "unique_all"], [20, 0, 1, "", "unique_counts"], [20, 0, 1, "", "unique_inverse"], [20, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[21, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "argsort"], [21, 0, 1, "", "msort"], [21, 0, 1, "", "searchsorted"], [21, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[22, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "cumprod"], [22, 0, 1, "", "cumsum"], [22, 0, 1, "", "einsum"], [22, 0, 1, "", "max"], [22, 0, 1, "", "mean"], [22, 0, 1, "", "min"], [22, 0, 1, "", "prod"], [22, 0, 1, "", "std"], [22, 0, 1, "", "sum"], [22, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[23, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "all"], [23, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[24, 2, 1, "", "_wrap_function"], [24, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[25, 3, 0, "-", "activations"], [26, 3, 0, "-", "base"], [49, 3, 0, "-", "container"], [27, 3, 0, "-", "conversions"], [28, 3, 0, "-", "creation"], [29, 3, 0, "-", "data_type"], [30, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "experimental"], [33, 3, 0, "-", "general"], [34, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [36, 3, 0, "-", "layers"], [37, 3, 0, "-", "linear_algebra"], [38, 3, 0, "-", "losses"], [39, 3, 0, "-", "manipulation"], [40, 3, 0, "-", "norms"], [41, 3, 0, "-", "random"], [42, 3, 0, "-", "searching"], [43, 3, 0, "-", "set"], [44, 3, 0, "-", "sorting"], [45, 3, 0, "-", "statistical"], [46, 3, 0, "-", "utility"], [47, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[25, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_gelu"], [25, 0, 1, "", "_static_hardswish"], [25, 0, 1, "", "_static_leaky_relu"], [25, 0, 1, "", "_static_log_softmax"], [25, 0, 1, "", "_static_mish"], [25, 0, 1, "", "_static_relu"], [25, 0, 1, "", "_static_sigmoid"], [25, 0, 1, "", "_static_softmax"], [25, 0, 1, "", "_static_softplus"], [25, 0, 1, "", "gelu"], [25, 0, 1, "", "hardswish"], [25, 0, 1, "", "leaky_relu"], [25, 0, 1, "", "log_softmax"], [25, 0, 1, "", "mish"], [25, 0, 1, "", "relu"], [25, 0, 1, "", "sigmoid"], [25, 0, 1, "", "softmax"], [25, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[26, 1, 1, "", "ContainerBase"], [26, 2, 1, "", "_is_jsonable"], [26, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[26, 0, 1, "", "__getitem__"], [26, 0, 1, "", "__init__"], [26, 0, 1, "", "__setitem__"], [26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [26, 0, 1, "", "_cont_concat_unify"], [26, 0, 1, "", "_cont_get_dev"], [26, 0, 1, "", "_cont_get_shape"], [26, 0, 1, "", "_cont_get_shapes"], [26, 5, 1, "", "_cont_ivy"], [26, 0, 1, "", "_cont_mean_unify"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_slice_keys"], [26, 0, 1, "", "_cont_sum_unify"], [26, 0, 1, "", "_get_queue_item"], [26, 0, 1, "", "cont_all_false"], [26, 0, 1, "", "cont_all_key_chains"], [26, 0, 1, "", "cont_all_true"], [26, 0, 1, "", "cont_as_bools"], [26, 0, 1, "", "cont_assert_contains_sub_container"], [26, 0, 1, "", "cont_assert_contains_sub_structure"], [26, 0, 1, "", "cont_assert_identical"], [26, 0, 1, "", "cont_assert_identical_structure"], [26, 0, 1, "", "cont_at_key_chain"], [26, 0, 1, "", "cont_at_key_chains"], [26, 0, 1, "", "cont_at_keys"], [26, 0, 1, "", "cont_combine"], [26, 0, 1, "", "cont_common_key_chains"], [26, 5, 1, "", "cont_config"], [26, 0, 1, "", "cont_contains_sub_container"], [26, 0, 1, "", "cont_contains_sub_structure"], [26, 0, 1, "", "cont_copy"], [26, 0, 1, "", "cont_create_if_absent"], [26, 0, 1, "", "cont_cutoff_at_depth"], [26, 0, 1, "", "cont_cutoff_at_height"], [26, 0, 1, "", "cont_deep_copy"], [26, 5, 1, "", "cont_dev"], [26, 5, 1, "", "cont_dev_str"], [26, 0, 1, "", "cont_diff"], [26, 0, 1, "", "cont_duplicate_array_keychains"], [26, 0, 1, "", "cont_find_sub_container"], [26, 0, 1, "", "cont_find_sub_structure"], [26, 0, 1, "", "cont_flatten_key_chain"], [26, 0, 1, "", "cont_flatten_key_chains"], [26, 0, 1, "", "cont_format_key_chains"], [26, 0, 1, "", "cont_from_disk_as_hdf5"], [26, 0, 1, "", "cont_from_disk_as_json"], [26, 0, 1, "", "cont_from_disk_as_pickled"], [26, 0, 1, "", "cont_from_flat_list"], [26, 0, 1, "", "cont_handle_inplace"], [26, 0, 1, "", "cont_has_key"], [26, 0, 1, "", "cont_has_key_chain"], [26, 0, 1, "", "cont_identical"], [26, 0, 1, "", "cont_identical_array_shapes"], [26, 0, 1, "", "cont_identical_configs"], [26, 0, 1, "", "cont_identical_structure"], [26, 0, 1, "", "cont_if_exists"], [26, 0, 1, "", "cont_inplace_update"], [26, 5, 1, "", "cont_ivy"], [26, 0, 1, "", "cont_key_chains_containing"], [26, 0, 1, "", "cont_list_join"], [26, 0, 1, "", "cont_list_stack"], [26, 0, 1, "", "cont_load"], [26, 0, 1, "", "cont_map"], [26, 0, 1, "", "cont_map_sub_conts"], [26, 5, 1, "", "cont_max_depth"], [26, 0, 1, "", "cont_multi_map"], [26, 0, 1, "", "cont_multi_map_in_function"], [26, 0, 1, "", "cont_num_arrays"], [26, 0, 1, "", "cont_overwrite_at_key_chain"], [26, 0, 1, "", "cont_overwrite_at_key_chains"], [26, 0, 1, "", "cont_prune_empty"], [26, 0, 1, "", "cont_prune_key_chain"], [26, 0, 1, "", "cont_prune_key_chains"], [26, 0, 1, "", "cont_prune_key_from_key_chains"], [26, 0, 1, "", "cont_prune_keys"], [26, 0, 1, "", "cont_prune_keys_from_key_chains"], [26, 0, 1, "", "cont_reduce"], [26, 0, 1, "", "cont_remove_key_length_limit"], [26, 0, 1, "", "cont_remove_print_limit"], [26, 0, 1, "", "cont_reshape_like"], [26, 0, 1, "", "cont_restructure"], [26, 0, 1, "", "cont_restructure_key_chains"], [26, 0, 1, "", "cont_save"], [26, 0, 1, "", "cont_set_at_key_chain"], [26, 0, 1, "", "cont_set_at_key_chains"], [26, 0, 1, "", "cont_set_at_keys"], [26, 5, 1, "", "cont_shape"], [26, 5, 1, "", "cont_shapes"], [26, 0, 1, "", "cont_show"], [26, 0, 1, "", "cont_show_sub_container"], [26, 0, 1, "", "cont_size_ordered_arrays"], [26, 0, 1, "", "cont_slice_keys"], [26, 0, 1, "", "cont_slice_via_key"], [26, 0, 1, "", "cont_sort_by_key"], [26, 0, 1, "", "cont_structural_diff"], [26, 0, 1, "", "cont_to_dict"], [26, 0, 1, "", "cont_to_disk_as_hdf5"], [26, 0, 1, "", "cont_to_disk_as_json"], [26, 0, 1, "", "cont_to_disk_as_pickled"], [26, 0, 1, "", "cont_to_flat_list"], [26, 0, 1, "", "cont_to_iterator"], [26, 0, 1, "", "cont_to_iterator_keys"], [26, 0, 1, "", "cont_to_iterator_values"], [26, 0, 1, "", "cont_to_jsonable"], [26, 0, 1, "", "cont_to_nested_list"], [26, 0, 1, "", "cont_to_raw"], [26, 0, 1, "", "cont_trim_key"], [26, 0, 1, "", "cont_try_kc"], [26, 0, 1, "", "cont_unify"], [26, 0, 1, "", "cont_unstack_conts"], [26, 0, 1, "", "cont_update_config"], [26, 0, 1, "", "cont_with_default_key_color"], [26, 0, 1, "", "cont_with_entries_as_lists"], [26, 0, 1, "", "cont_with_ivy_backend"], [26, 0, 1, "", "cont_with_key_length_limit"], [26, 0, 1, "", "cont_with_print_indent"], [26, 0, 1, "", "cont_with_print_limit"], [26, 0, 1, "", "cont_with_print_line_spacing"], [26, 5, 1, "", "dynamic_backend"], [26, 0, 1, "", "h5_file_size"], [26, 0, 1, "", "shuffle_h5_file"], [26, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[49, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[49, 0, 1, "", "__abs__"], [49, 0, 1, "", "__add__"], [49, 0, 1, "", "__eq__"], [49, 0, 1, "", "__ge__"], [49, 0, 1, "", "__gt__"], [49, 0, 1, "", "__init__"], [49, 0, 1, "", "__le__"], [49, 0, 1, "", "__lt__"], [49, 0, 1, "", "__ne__"], [49, 0, 1, "", "__pow__"], [49, 0, 1, "", "__radd__"], [49, 0, 1, "", "__rrshift__"], [49, 0, 1, "", "__rshift__"], [49, 0, 1, "", "__rsub__"], [49, 0, 1, "", "__sub__"], [49, 0, 1, "", "__truediv__"], [49, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[27, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_to_ivy"], [27, 0, 1, "", "_static_to_native"], [27, 0, 1, "", "to_ivy"], [27, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[28, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_arange"], [28, 0, 1, "", "_static_asarray"], [28, 0, 1, "", "_static_copy_array"], [28, 0, 1, "", "_static_empty"], [28, 0, 1, "", "_static_empty_like"], [28, 0, 1, "", "_static_eye"], [28, 0, 1, "", "_static_from_dlpack"], [28, 0, 1, "", "_static_full"], [28, 0, 1, "", "_static_full_like"], [28, 0, 1, "", "_static_linspace"], [28, 0, 1, "", "_static_logspace"], [28, 0, 1, "", "_static_meshgrid"], [28, 0, 1, "", "_static_native_array"], [28, 0, 1, "", "_static_one_hot"], [28, 0, 1, "", "_static_ones"], [28, 0, 1, "", "_static_ones_like"], [28, 0, 1, "", "_static_tril"], [28, 0, 1, "", "_static_triu"], [28, 0, 1, "", "_static_zeros"], [28, 0, 1, "", "_static_zeros_like"], [28, 0, 1, "", "asarray"], [28, 0, 1, "", "copy_array"], [28, 0, 1, "", "empty_like"], [28, 0, 1, "", "from_dlpack"], [28, 0, 1, "", "frombuffer"], [28, 0, 1, "", "full_like"], [28, 0, 1, "", "linspace"], [28, 0, 1, "", "logspace"], [28, 0, 1, "", "meshgrid"], [28, 0, 1, "", "native_array"], [28, 0, 1, "", "one_hot"], [28, 0, 1, "", "ones_like"], [28, 0, 1, "", "static_frombuffer"], [28, 0, 1, "", "static_triu_indices"], [28, 0, 1, "", "tril"], [28, 0, 1, "", "triu"], [28, 0, 1, "", "triu_indices"], [28, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[29, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_astype"], [29, 0, 1, "", "_static_broadcast_arrays"], [29, 0, 1, "", "_static_broadcast_to"], [29, 0, 1, "", "_static_can_cast"], [29, 0, 1, "", "_static_default_complex_dtype"], [29, 0, 1, "", "_static_default_float_dtype"], [29, 0, 1, "", "_static_dtype"], [29, 0, 1, "", "_static_finfo"], [29, 0, 1, "", "_static_function_supported_dtypes"], [29, 0, 1, "", "_static_function_unsupported_dtypes"], [29, 0, 1, "", "_static_iinfo"], [29, 0, 1, "", "_static_is_bool_dtype"], [29, 0, 1, "", "_static_is_complex_dtype"], [29, 0, 1, "", "_static_is_float_dtype"], [29, 0, 1, "", "_static_is_int_dtype"], [29, 0, 1, "", "_static_is_uint_dtype"], [29, 0, 1, "", "_static_result_type"], [29, 0, 1, "", "astype"], [29, 0, 1, "", "broadcast_arrays"], [29, 0, 1, "", "broadcast_to"], [29, 0, 1, "", "can_cast"], [29, 0, 1, "", "dtype"], [29, 0, 1, "", "finfo"], [29, 0, 1, "", "iinfo"], [29, 0, 1, "", "is_bool_dtype"], [29, 0, 1, "", "is_complex_dtype"], [29, 0, 1, "", "is_float_dtype"], [29, 0, 1, "", "is_int_dtype"], [29, 0, 1, "", "is_uint_dtype"], [29, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[30, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_dev"], [30, 0, 1, "", "_static_to_device"], [30, 0, 1, "", "dev"], [30, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[31, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_abs"], [31, 0, 1, "", "_static_acos"], [31, 0, 1, "", "_static_acosh"], [31, 0, 1, "", "_static_add"], [31, 0, 1, "", "_static_asin"], [31, 0, 1, "", "_static_asinh"], [31, 0, 1, "", "_static_atan"], [31, 0, 1, "", "_static_atan2"], [31, 0, 1, "", "_static_atanh"], [31, 0, 1, "", "_static_bitwise_and"], [31, 0, 1, "", "_static_bitwise_invert"], [31, 0, 1, "", "_static_bitwise_left_shift"], [31, 0, 1, "", "_static_bitwise_or"], [31, 0, 1, "", "_static_bitwise_right_shift"], [31, 0, 1, "", "_static_bitwise_xor"], [31, 0, 1, "", "_static_ceil"], [31, 0, 1, "", "_static_cos"], [31, 0, 1, "", "_static_cosh"], [31, 0, 1, "", "_static_deg2rad"], [31, 0, 1, "", "_static_divide"], [31, 0, 1, "", "_static_equal"], [31, 0, 1, "", "_static_erf"], [31, 0, 1, "", "_static_exp"], [31, 0, 1, "", "_static_expm1"], [31, 0, 1, "", "_static_floor"], [31, 0, 1, "", "_static_floor_divide"], [31, 0, 1, "", "_static_greater"], [31, 0, 1, "", "_static_greater_equal"], [31, 0, 1, "", "_static_isfinite"], [31, 0, 1, "", "_static_isinf"], [31, 0, 1, "", "_static_isnan"], [31, 0, 1, "", "_static_isreal"], [31, 0, 1, "", "_static_lcm"], [31, 0, 1, "", "_static_less"], [31, 0, 1, "", "_static_less_equal"], [31, 0, 1, "", "_static_log"], [31, 0, 1, "", "_static_log10"], [31, 0, 1, "", "_static_log1p"], [31, 0, 1, "", "_static_log2"], [31, 0, 1, "", "_static_logaddexp"], [31, 0, 1, "", "_static_logical_and"], [31, 0, 1, "", "_static_logical_not"], [31, 0, 1, "", "_static_logical_or"], [31, 0, 1, "", "_static_logical_xor"], [31, 0, 1, "", "_static_maximum"], [31, 0, 1, "", "_static_minimum"], [31, 0, 1, "", "_static_multiply"], [31, 0, 1, "", "_static_negative"], [31, 0, 1, "", "_static_not_equal"], [31, 0, 1, "", "_static_positive"], [31, 0, 1, "", "_static_pow"], [31, 0, 1, "", "_static_rad2deg"], [31, 0, 1, "", "_static_reciprocal"], [31, 0, 1, "", "_static_remainder"], [31, 0, 1, "", "_static_round"], [31, 0, 1, "", "_static_sign"], [31, 0, 1, "", "_static_sin"], [31, 0, 1, "", "_static_sinh"], [31, 0, 1, "", "_static_sqrt"], [31, 0, 1, "", "_static_square"], [31, 0, 1, "", "_static_subtract"], [31, 0, 1, "", "_static_tan"], [31, 0, 1, "", "_static_tanh"], [31, 0, 1, "", "_static_trapz"], [31, 0, 1, "", "_static_trunc"], [31, 0, 1, "", "_static_trunc_divide"], [31, 0, 1, "", "abs"], [31, 0, 1, "", "acos"], [31, 0, 1, "", "acosh"], [31, 0, 1, "", "add"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "asin"], [31, 0, 1, "", "asinh"], [31, 0, 1, "", "atan"], [31, 0, 1, "", "atan2"], [31, 0, 1, "", "atanh"], [31, 0, 1, "", "bitwise_and"], [31, 0, 1, "", "bitwise_invert"], [31, 0, 1, "", "bitwise_left_shift"], [31, 0, 1, "", "bitwise_or"], [31, 0, 1, "", "bitwise_right_shift"], [31, 0, 1, "", "bitwise_xor"], [31, 0, 1, "", "ceil"], [31, 0, 1, "", "cos"], [31, 0, 1, "", "cosh"], [31, 0, 1, "", "deg2rad"], [31, 0, 1, "", "divide"], [31, 0, 1, "", "equal"], [31, 0, 1, "", "erf"], [31, 0, 1, "", "exp"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "expm1"], [31, 0, 1, "", "floor"], [31, 0, 1, "", "floor_divide"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "greater"], [31, 0, 1, "", "greater_equal"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isfinite"], [31, 0, 1, "", "isinf"], [31, 0, 1, "", "isnan"], [31, 0, 1, "", "isreal"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "less"], [31, 0, 1, "", "less_equal"], [31, 0, 1, "", "log"], [31, 0, 1, "", "log10"], [31, 0, 1, "", "log1p"], [31, 0, 1, "", "log2"], [31, 0, 1, "", "logaddexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "logical_and"], [31, 0, 1, "", "logical_not"], [31, 0, 1, "", "logical_or"], [31, 0, 1, "", "logical_xor"], [31, 0, 1, "", "maximum"], [31, 0, 1, "", "minimum"], [31, 0, 1, "", "multiply"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "negative"], [31, 0, 1, "", "not_equal"], [31, 0, 1, "", "positive"], [31, 0, 1, "", "pow"], [31, 0, 1, "", "rad2deg"], [31, 0, 1, "", "real"], [31, 0, 1, "", "reciprocal"], [31, 0, 1, "", "remainder"], [31, 0, 1, "", "round"], [31, 0, 1, "", "sign"], [31, 0, 1, "", "sin"], [31, 0, 1, "", "sinh"], [31, 0, 1, "", "sqrt"], [31, 0, 1, "", "square"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "subtract"], [31, 0, 1, "", "tan"], [31, 0, 1, "", "tanh"], [31, 0, 1, "", "trapz"], [31, 0, 1, "", "trunc"], [31, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[32, 3, 0, "-", "activations"], [32, 3, 0, "-", "conversions"], [32, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [32, 3, 0, "-", "device"], [32, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "general"], [32, 3, 0, "-", "gradients"], [32, 3, 0, "-", "image"], [32, 3, 0, "-", "layers"], [32, 3, 0, "-", "linear_algebra"], [32, 3, 0, "-", "losses"], [32, 3, 0, "-", "manipulation"], [32, 3, 0, "-", "norms"], [32, 3, 0, "-", "random"], [32, 3, 0, "-", "searching"], [32, 3, 0, "-", "set"], [32, 3, 0, "-", "sorting"], [32, 3, 0, "-", "statistical"], [32, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[32, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_elu"], [32, 0, 1, "", "_static_silu"], [32, 0, 1, "", "elu"], [32, 0, 1, "", "logit"], [32, 0, 1, "", "logsigmoid"], [32, 0, 1, "", "prelu"], [32, 0, 1, "", "relu6"], [32, 0, 1, "", "selu"], [32, 0, 1, "", "silu"], [32, 0, 1, "", "static_logit"], [32, 0, 1, "", "static_logsigmoid"], [32, 0, 1, "", "static_prelu"], [32, 0, 1, "", "static_relu6"], [32, 0, 1, "", "static_selu"], [32, 0, 1, "", "static_thresholded_relu"], [32, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[32, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[32, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "eye_like"], [32, 0, 1, "", "hamming_window"], [32, 0, 1, "", "hann_window"], [32, 0, 1, "", "kaiser_bessel_derived_window"], [32, 0, 1, "", "kaiser_window"], [32, 0, 1, "", "static_eye_like"], [32, 0, 1, "", "static_hamming_window"], [32, 0, 1, "", "static_hann_window"], [32, 0, 1, "", "static_kaiser_bessel_derived_window"], [32, 0, 1, "", "static_kaiser_window"], [32, 0, 1, "", "static_tril_indices"], [32, 0, 1, "", "static_unsorted_segment_min"], [32, 0, 1, "", "static_unsorted_segment_sum"], [32, 0, 1, "", "static_vorbis_window"], [32, 0, 1, "", "tril_indices"], [32, 0, 1, "", "unsorted_segment_min"], [32, 0, 1, "", "unsorted_segment_sum"], [32, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[32, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[32, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[32, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "allclose"], [32, 0, 1, "", "binarizer"], [32, 0, 1, "", "conj"], [32, 0, 1, "", "copysign"], [32, 0, 1, "", "count_nonzero"], [32, 0, 1, "", "diff"], [32, 0, 1, "", "digamma"], [32, 0, 1, "", "fix"], [32, 0, 1, "", "float_power"], [32, 0, 1, "", "fmax"], [32, 0, 1, "", "fmod"], [32, 0, 1, "", "frexp"], [32, 0, 1, "", "gradient"], [32, 0, 1, "", "hypot"], [32, 0, 1, "", "isclose"], [32, 0, 1, "", "ldexp"], [32, 0, 1, "", "lerp"], [32, 0, 1, "", "modf"], [32, 0, 1, "", "nansum"], [32, 0, 1, "", "nextafter"], [32, 0, 1, "", "signbit"], [32, 0, 1, "", "sinc"], [32, 0, 1, "", "static_allclose"], [32, 0, 1, "", "static_binarizer"], [32, 0, 1, "", "static_conj"], [32, 0, 1, "", "static_copysign"], [32, 0, 1, "", "static_count_nonzero"], [32, 0, 1, "", "static_diff"], [32, 0, 1, "", "static_digamma"], [32, 0, 1, "", "static_fix"], [32, 0, 1, "", "static_float_power"], [32, 0, 1, "", "static_fmax"], [32, 0, 1, "", "static_fmod"], [32, 0, 1, "", "static_frexp"], [32, 0, 1, "", "static_gradient"], [32, 0, 1, "", "static_hypot"], [32, 0, 1, "", "static_isclose"], [32, 0, 1, "", "static_ldexp"], [32, 0, 1, "", "static_lerp"], [32, 0, 1, "", "static_modf"], [32, 0, 1, "", "static_nansum"], [32, 0, 1, "", "static_nextafter"], [32, 0, 1, "", "static_signbit"], [32, 0, 1, "", "static_sinc"], [32, 0, 1, "", "static_xlogy"], [32, 0, 1, "", "static_zeta"], [32, 0, 1, "", "xlogy"], [32, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[32, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_reduce"], [32, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[32, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[32, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[32, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fft"], [32, 0, 1, "", "adaptive_avg_pool1d"], [32, 0, 1, "", "adaptive_avg_pool2d"], [32, 0, 1, "", "adaptive_max_pool2d"], [32, 0, 1, "", "avg_pool1d"], [32, 0, 1, "", "avg_pool2d"], [32, 0, 1, "", "avg_pool3d"], [32, 0, 1, "", "dct"], [32, 0, 1, "", "dft"], [32, 0, 1, "", "embedding"], [32, 0, 1, "", "fft"], [32, 0, 1, "", "idct"], [32, 0, 1, "", "ifft"], [32, 0, 1, "", "ifftn"], [32, 0, 1, "", "interpolate"], [32, 0, 1, "", "max_pool1d"], [32, 0, 1, "", "max_pool2d"], [32, 0, 1, "", "max_pool3d"], [32, 0, 1, "", "rfftn"], [32, 0, 1, "", "static_adaptive_avg_pool1d"], [32, 0, 1, "", "static_adaptive_avg_pool2d"], [32, 0, 1, "", "static_adaptive_max_pool2d"], [32, 0, 1, "", "static_avg_pool1d"], [32, 0, 1, "", "static_avg_pool2d"], [32, 0, 1, "", "static_avg_pool3d"], [32, 0, 1, "", "static_dct"], [32, 0, 1, "", "static_dft"], [32, 0, 1, "", "static_embedding"], [32, 0, 1, "", "static_idct"], [32, 0, 1, "", "static_ifft"], [32, 0, 1, "", "static_ifftn"], [32, 0, 1, "", "static_interpolate"], [32, 0, 1, "", "static_max_pool1d"], [32, 0, 1, "", "static_max_pool2d"], [32, 0, 1, "", "static_max_pool3d"], [32, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "adjoint"], [32, 0, 1, "", "cond"], [32, 0, 1, "", "diagflat"], [32, 0, 1, "", "eig"], [32, 0, 1, "", "eigh_tridiagonal"], [32, 0, 1, "", "eigvals"], [32, 0, 1, "", "kron"], [32, 0, 1, "", "matrix_exp"], [32, 0, 1, "", "multi_dot"], [32, 0, 1, "", "static_adjoint"], [32, 0, 1, "", "static_cond"], [32, 0, 1, "", "static_diagflat"], [32, 0, 1, "", "static_eig"], [32, 0, 1, "", "static_eigh_tridiagonal"], [32, 0, 1, "", "static_eigvals"], [32, 0, 1, "", "static_kron"], [32, 0, 1, "", "static_matrix_exp"], [32, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.manipulation": [[32, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fill_diagonal"], [32, 0, 1, "", "_static_unique_consecutive"], [32, 0, 1, "", "as_strided"], [32, 0, 1, "", "associative_scan"], [32, 0, 1, "", "atleast_1d"], [32, 0, 1, "", "atleast_2d"], [32, 0, 1, "", "atleast_3d"], [32, 0, 1, "", "broadcast_shapes"], [32, 0, 1, "", "concat_from_sequence"], [32, 0, 1, "", "dsplit"], [32, 0, 1, "", "dstack"], [32, 0, 1, "", "expand"], [32, 0, 1, "", "fill_diagonal"], [32, 0, 1, "", "flatten"], [32, 0, 1, "", "fliplr"], [32, 0, 1, "", "flipud"], [32, 0, 1, "", "heaviside"], [32, 0, 1, "", "hsplit"], [32, 0, 1, "", "hstack"], [32, 0, 1, "", "i0"], [32, 0, 1, "", "moveaxis"], [32, 0, 1, "", "pad"], [32, 0, 1, "", "rot90"], [32, 0, 1, "", "static_as_strided"], [32, 0, 1, "", "static_atleast_1d"], [32, 0, 1, "", "static_atleast_2d"], [32, 0, 1, "", "static_atleast_3d"], [32, 0, 1, "", "static_broadcast_shapes"], [32, 0, 1, "", "static_concat_from_sequence"], [32, 0, 1, "", "static_dsplit"], [32, 0, 1, "", "static_dstack"], [32, 0, 1, "", "static_expand"], [32, 0, 1, "", "static_flatten"], [32, 0, 1, "", "static_fliplr"], [32, 0, 1, "", "static_flipud"], [32, 0, 1, "", "static_heaviside"], [32, 0, 1, "", "static_hsplit"], [32, 0, 1, "", "static_hstack"], [32, 0, 1, "", "static_i0"], [32, 0, 1, "", "static_moveaxis"], [32, 0, 1, "", "static_pad"], [32, 0, 1, "", "static_rot90"], [32, 0, 1, "", "static_take_along_axis"], [32, 0, 1, "", "static_top_k"], [32, 0, 1, "", "static_vsplit"], [32, 0, 1, "", "static_vstack"], [32, 0, 1, "", "take_along_axis"], [32, 0, 1, "", "top_k"], [32, 0, 1, "", "unique_consecutive"], [32, 0, 1, "", "vsplit"], [32, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[32, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "batch_norm"], [32, 0, 1, "", "group_norm"], [32, 0, 1, "", "instance_norm"], [32, 0, 1, "", "l1_normalize"], [32, 0, 1, "", "l2_normalize"], [32, 0, 1, "", "lp_normalize"], [32, 0, 1, "", "static_batch_norm"], [32, 0, 1, "", "static_group_norm"], [32, 0, 1, "", "static_instance_norm"], [32, 0, 1, "", "static_l1_normalize"], [32, 0, 1, "", "static_l2_normalize"], [32, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[32, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "bernoulli"], [32, 0, 1, "", "beta"], [32, 0, 1, "", "dirichlet"], [32, 0, 1, "", "gamma"], [32, 0, 1, "", "poisson"], [32, 0, 1, "", "static_bernoulli"], [32, 0, 1, "", "static_beta"], [32, 0, 1, "", "static_dirichlet"], [32, 0, 1, "", "static_gamma"], [32, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[32, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "static_unravel_index"], [32, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[32, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[32, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "invert_permutation"], [32, 0, 1, "", "lexsort"], [32, 0, 1, "", "static_invert_permutation"], [32, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[32, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_cummax"], [32, 0, 1, "", "_static_cummin"], [32, 0, 1, "", "bincount"], [32, 0, 1, "", "corrcoef"], [32, 0, 1, "", "cov"], [32, 0, 1, "", "cummax"], [32, 0, 1, "", "cummin"], [32, 0, 1, "", "histogram"], [32, 0, 1, "", "igamma"], [32, 0, 1, "", "median"], [32, 0, 1, "", "nanmean"], [32, 0, 1, "", "nanmedian"], [32, 0, 1, "", "quantile"], [32, 0, 1, "", "static_bincount"], [32, 0, 1, "", "static_corrcoef"], [32, 0, 1, "", "static_cov"], [32, 0, 1, "", "static_histogram"], [32, 0, 1, "", "static_igamma"], [32, 0, 1, "", "static_median"], [32, 0, 1, "", "static_nanmean"], [32, 0, 1, "", "static_nanmedian"], [32, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[32, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[33, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_all_equal"], [33, 0, 1, "", "_static_array_equal"], [33, 0, 1, "", "_static_assert_supports_inplace"], [33, 0, 1, "", "_static_clip_matrix_norm"], [33, 0, 1, "", "_static_clip_vector_norm"], [33, 0, 1, "", "_static_einops_rearrange"], [33, 0, 1, "", "_static_einops_reduce"], [33, 0, 1, "", "_static_einops_repeat"], [33, 0, 1, "", "_static_fourier_encode"], [33, 0, 1, "", "_static_gather"], [33, 0, 1, "", "_static_gather_nd"], [33, 0, 1, "", "_static_get_num_dims"], [33, 0, 1, "", "_static_has_nans"], [33, 0, 1, "", "_static_inplace_decrement"], [33, 0, 1, "", "_static_inplace_increment"], [33, 0, 1, "", "_static_inplace_update"], [33, 0, 1, "", "_static_is_array"], [33, 0, 1, "", "_static_is_ivy_array"], [33, 0, 1, "", "_static_is_native_array"], [33, 0, 1, "", "_static_scatter_flat"], [33, 0, 1, "", "_static_scatter_nd"], [33, 0, 1, "", "_static_stable_divide"], [33, 0, 1, "", "_static_stable_pow"], [33, 0, 1, "", "_static_supports_inplace_updates"], [33, 0, 1, "", "_static_to_list"], [33, 0, 1, "", "_static_to_numpy"], [33, 0, 1, "", "_static_to_scalar"], [33, 0, 1, "", "_static_value_is_nan"], [33, 0, 1, "", "all_equal"], [33, 0, 1, "", "array_equal"], [33, 0, 1, "", "assert_supports_inplace"], [33, 0, 1, "", "clip_matrix_norm"], [33, 0, 1, "", "clip_vector_norm"], [33, 0, 1, "", "einops_rearrange"], [33, 0, 1, "", "einops_reduce"], [33, 0, 1, "", "einops_repeat"], [33, 0, 1, "", "fourier_encode"], [33, 0, 1, "", "gather"], [33, 0, 1, "", "gather_nd"], [33, 0, 1, "", "get_num_dims"], [33, 0, 1, "", "has_nans"], [33, 0, 1, "", "inplace_decrement"], [33, 0, 1, "", "inplace_increment"], [33, 0, 1, "", "inplace_update"], [33, 0, 1, "", "is_array"], [33, 0, 1, "", "is_ivy_array"], [33, 0, 1, "", "is_native_array"], [33, 0, 1, "", "isin"], [33, 0, 1, "", "itemsize"], [33, 0, 1, "", "scatter_flat"], [33, 0, 1, "", "scatter_nd"], [33, 0, 1, "", "stable_divide"], [33, 0, 1, "", "stable_pow"], [33, 0, 1, "", "static_isin"], [33, 0, 1, "", "static_itemsize"], [33, 0, 1, "", "static_strides"], [33, 0, 1, "", "strides"], [33, 0, 1, "", "supports_inplace_updates"], [33, 0, 1, "", "to_list"], [33, 0, 1, "", "to_numpy"], [33, 0, 1, "", "to_scalar"], [33, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[34, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_stop_gradient"], [34, 0, 1, "", "adam_step"], [34, 0, 1, "", "adam_update"], [34, 0, 1, "", "gradient_descent_update"], [34, 0, 1, "", "lamb_update"], [34, 0, 1, "", "lars_update"], [34, 0, 1, "", "optimizer_update"], [34, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[35, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[36, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_conv1d"], [36, 0, 1, "", "_static_conv1d_transpose"], [36, 0, 1, "", "_static_conv2d"], [36, 0, 1, "", "_static_conv2d_transpose"], [36, 0, 1, "", "_static_conv3d"], [36, 0, 1, "", "_static_conv3d_transpose"], [36, 0, 1, "", "_static_depthwise_conv2d"], [36, 0, 1, "", "_static_dropout"], [36, 0, 1, "", "_static_dropout1d"], [36, 0, 1, "", "_static_dropout2d"], [36, 0, 1, "", "_static_dropout3d"], [36, 0, 1, "", "_static_linear"], [36, 0, 1, "", "_static_lstm_update"], [36, 0, 1, "", "_static_multi_head_attention"], [36, 0, 1, "", "_static_reduce_window"], [36, 0, 1, "", "_static_scaled_dot_product_attention"], [36, 0, 1, "", "conv1d"], [36, 0, 1, "", "conv1d_transpose"], [36, 0, 1, "", "conv2d"], [36, 0, 1, "", "conv2d_transpose"], [36, 0, 1, "", "conv3d"], [36, 0, 1, "", "conv3d_transpose"], [36, 0, 1, "", "depthwise_conv2d"], [36, 0, 1, "", "dropout"], [36, 0, 1, "", "dropout1d"], [36, 0, 1, "", "dropout2d"], [36, 0, 1, "", "dropout3d"], [36, 0, 1, "", "linear"], [36, 0, 1, "", "lstm_update"], [36, 0, 1, "", "multi_head_attention"], [36, 0, 1, "", "reduce_window"], [36, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[37, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_cholesky"], [37, 0, 1, "", "_static_cross"], [37, 0, 1, "", "_static_det"], [37, 0, 1, "", "_static_diag"], [37, 0, 1, "", "_static_diagonal"], [37, 0, 1, "", "_static_eigh"], [37, 0, 1, "", "_static_eigvalsh"], [37, 0, 1, "", "_static_inner"], [37, 0, 1, "", "_static_inv"], [37, 0, 1, "", "_static_matmul"], [37, 0, 1, "", "_static_matrix_norm"], [37, 0, 1, "", "_static_matrix_power"], [37, 0, 1, "", "_static_matrix_rank"], [37, 0, 1, "", "_static_matrix_transpose"], [37, 0, 1, "", "_static_outer"], [37, 0, 1, "", "_static_pinv"], [37, 0, 1, "", "_static_qr"], [37, 0, 1, "", "_static_slogdet"], [37, 0, 1, "", "_static_solve"], [37, 0, 1, "", "_static_svd"], [37, 0, 1, "", "_static_svdvals"], [37, 0, 1, "", "_static_tensordot"], [37, 0, 1, "", "_static_tensorsolve"], [37, 0, 1, "", "_static_trace"], [37, 0, 1, "", "_static_vander"], [37, 0, 1, "", "_static_vecdot"], [37, 0, 1, "", "_static_vector_norm"], [37, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [37, 0, 1, "", "cholesky"], [37, 0, 1, "", "cross"], [37, 0, 1, "", "det"], [37, 0, 1, "", "diag"], [37, 0, 1, "", "diagonal"], [37, 0, 1, "", "eigh"], [37, 0, 1, "", "eigvalsh"], [37, 0, 1, "", "inner"], [37, 0, 1, "", "inv"], [37, 0, 1, "", "matmul"], [37, 0, 1, "", "matrix_norm"], [37, 0, 1, "", "matrix_power"], [37, 0, 1, "", "matrix_rank"], [37, 0, 1, "", "matrix_transpose"], [37, 0, 1, "", "outer"], [37, 0, 1, "", "pinv"], [37, 0, 1, "", "qr"], [37, 0, 1, "", "slogdet"], [37, 0, 1, "", "solve"], [37, 0, 1, "", "svd"], [37, 0, 1, "", "svdvals"], [37, 0, 1, "", "tensordot"], [37, 0, 1, "", "tensorsolve"], [37, 0, 1, "", "trace"], [37, 0, 1, "", "vander"], [37, 0, 1, "", "vecdot"], [37, 0, 1, "", "vector_norm"], [37, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[38, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_binary_cross_entropy"], [38, 0, 1, "", "_static_cross_entropy"], [38, 0, 1, "", "_static_sparse_cross_entropy"], [38, 0, 1, "", "binary_cross_entropy"], [38, 0, 1, "", "cross_entropy"], [38, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[39, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_clip"], [39, 0, 1, "", "_static_concat"], [39, 0, 1, "", "_static_constant_pad"], [39, 0, 1, "", "_static_expand_dims"], [39, 0, 1, "", "_static_flip"], [39, 0, 1, "", "_static_permute_dims"], [39, 0, 1, "", "_static_repeat"], [39, 0, 1, "", "_static_reshape"], [39, 0, 1, "", "_static_roll"], [39, 0, 1, "", "_static_split"], [39, 0, 1, "", "_static_squeeze"], [39, 0, 1, "", "_static_stack"], [39, 0, 1, "", "_static_swapaxes"], [39, 0, 1, "", "_static_tile"], [39, 0, 1, "", "_static_unstack"], [39, 0, 1, "", "_static_zero_pad"], [39, 0, 1, "", "clip"], [39, 0, 1, "", "concat"], [39, 0, 1, "", "constant_pad"], [39, 0, 1, "", "expand_dims"], [39, 0, 1, "", "flip"], [39, 0, 1, "", "permute_dims"], [39, 0, 1, "", "repeat"], [39, 0, 1, "", "reshape"], [39, 0, 1, "", "roll"], [39, 0, 1, "", "split"], [39, 0, 1, "", "squeeze"], [39, 0, 1, "", "stack"], [39, 0, 1, "", "swapaxes"], [39, 0, 1, "", "tile"], [39, 0, 1, "", "unstack"], [39, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[40, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[41, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_multinomial"], [41, 0, 1, "", "_static_randint"], [41, 0, 1, "", "_static_random_normal"], [41, 0, 1, "", "_static_random_uniform"], [41, 0, 1, "", "_static_shuffle"], [41, 0, 1, "", "multinomial"], [41, 0, 1, "", "randint"], [41, 0, 1, "", "random_normal"], [41, 0, 1, "", "random_uniform"], [41, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[42, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_argmax"], [42, 0, 1, "", "_static_argmin"], [42, 0, 1, "", "_static_argwhere"], [42, 0, 1, "", "_static_nonzero"], [42, 0, 1, "", "_static_where"], [42, 0, 1, "", "argmax"], [42, 0, 1, "", "argmin"], [42, 0, 1, "", "argwhere"], [42, 0, 1, "", "nonzero"], [42, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[43, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_unique_all"], [43, 0, 1, "", "_static_unique_counts"], [43, 0, 1, "", "_static_unique_inverse"], [43, 0, 1, "", "_static_unique_values"], [43, 0, 1, "", "unique_all"], [43, 0, 1, "", "unique_counts"], [43, 0, 1, "", "unique_inverse"], [43, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[44, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_argsort"], [44, 0, 1, "", "_static_searchsorted"], [44, 0, 1, "", "_static_sort"], [44, 0, 1, "", "argsort"], [44, 0, 1, "", "msort"], [44, 0, 1, "", "searchsorted"], [44, 0, 1, "", "sort"], [44, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[45, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_cumprod"], [45, 0, 1, "", "_static_cumsum"], [45, 0, 1, "", "_static_prod"], [45, 0, 1, "", "_static_sum"], [45, 0, 1, "", "_static_var"], [45, 0, 1, "", "cumprod"], [45, 0, 1, "", "cumsum"], [45, 0, 1, "", "einsum"], [45, 0, 1, "", "max"], [45, 0, 1, "", "mean"], [45, 0, 1, "", "min"], [45, 0, 1, "", "prod"], [45, 0, 1, "", "std"], [45, 0, 1, "", "sum"], [45, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[46, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_all"], [46, 0, 1, "", "_static_any"], [46, 0, 1, "", "all"], [46, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[47, 2, 1, "", "_wrap_function"], [47, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.nested_array": [[51, 3, 0, "-", "base"], [52, 3, 0, "-", "elementwise"], [50, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[51, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[51, 0, 1, "", "__init__"], [51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "broadcast_shapes"], [51, 5, 1, "", "data"], [51, 5, 1, "", "device"], [51, 5, 1, "", "dtype"], [51, 5, 1, "", "inner_shape"], [51, 5, 1, "", "ndim"], [51, 0, 1, "", "nested_array"], [51, 5, 1, "", "nested_rank"], [51, 0, 1, "", "ragged_map"], [51, 0, 1, "", "ragged_multi_map"], [51, 0, 1, "", "ragged_multi_map_in_function"], [51, 0, 1, "", "replace_ivy_arrays"], [51, 5, 1, "", "shape"], [51, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[52, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[50, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[50, 0, 1, "", "__init__"], [50, 0, 1, "", "from_row_lengths"], [50, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[500, 3, 0, "-", "activations"], [501, 3, 0, "-", "constants"], [502, 3, 0, "-", "control_flow_ops"], [503, 3, 0, "-", "creation"], [504, 3, 0, "-", "data_type"], [505, 3, 0, "-", "device"], [506, 3, 0, "-", "elementwise"], [507, 3, 0, "-", "experimental"], [508, 3, 0, "-", "general"], [509, 3, 0, "-", "gradients"], [510, 3, 0, "-", "layers"], [511, 3, 0, "-", "linear_algebra"], [512, 3, 0, "-", "losses"], [513, 3, 0, "-", "manipulation"], [514, 3, 0, "-", "meta"], [515, 3, 0, "-", "nest"], [516, 3, 0, "-", "norms"], [517, 3, 0, "-", "random"], [518, 3, 0, "-", "searching"], [519, 3, 0, "-", "set"], [520, 3, 0, "-", "sorting"], [521, 3, 0, "-", "statistical"], [522, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[291, 3, 0, "-", "activations"], [292, 3, 0, "-", "constants"], [293, 3, 0, "-", "creation"], [294, 3, 0, "-", "data_type"], [295, 3, 0, "-", "device"], [296, 3, 0, "-", "elementwise"], [297, 3, 0, "-", "general"], [298, 3, 0, "-", "gradients"], [299, 3, 0, "-", "layers"], [300, 3, 0, "-", "linear_algebra"], [301, 3, 0, "-", "losses"], [302, 3, 0, "-", "manipulation"], [303, 3, 0, "-", "meta"], [304, 3, 0, "-", "nest"], [305, 3, 0, "-", "norms"], [306, 3, 0, "-", "random"], [307, 3, 0, "-", "searching"], [308, 3, 0, "-", "set"], [309, 3, 0, "-", "sorting"], [310, 3, 0, "-", "sparse_array"], [311, 3, 0, "-", "statistical"], [312, 3, 0, "-", "utility"]], "ivy.stateful": [[658, 3, 0, "-", "activations"], [659, 3, 0, "-", "converters"], [660, 3, 0, "-", "helpers"], [661, 3, 0, "-", "initializers"], [662, 3, 0, "-", "layers"], [663, 3, 0, "-", "losses"], [664, 3, 0, "-", "module"], [665, 3, 0, "-", "norms"], [666, 3, 0, "-", "optimizers"], [667, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[658, 1, 1, "", "ELU"], [658, 1, 1, "", "GEGLU"], [658, 1, 1, "", "GELU"], [658, 1, 1, "", "Hardswish"], [658, 1, 1, "", "LeakyReLU"], [658, 1, 1, "", "LogSigmoid"], [658, 1, 1, "", "LogSoftmax"], [658, 1, 1, "", "Logit"], [658, 1, 1, "", "Mish"], [658, 1, 1, "", "PReLU"], [658, 1, 1, "", "ReLU"], [658, 1, 1, "", "ReLU6"], [658, 1, 1, "", "SeLU"], [658, 1, 1, "", "SiLU"], [658, 1, 1, "", "Sigmoid"], [658, 1, 1, "", "Softmax"], [658, 1, 1, "", "Softplus"], [658, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[658, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[658, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[659, 1, 1, "", "ModuleConverters"], [659, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[659, 0, 1, "", "from_flax_module"], [659, 0, 1, "", "from_haiku_module"], [659, 0, 1, "", "from_keras_module"], [659, 0, 1, "", "from_paddle_module"], [659, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[660, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[660, 0, 1, "", "check_submod_rets"], [660, 0, 1, "", "get_mod_key"], [660, 0, 1, "", "mod_depth"], [660, 0, 1, "", "mod_height"], [660, 0, 1, "", "mod_with_top_mod_key_chain"], [660, 0, 1, "", "show_mod_in_top_mod"], [660, 0, 1, "", "show_structure"], [660, 0, 1, "", "show_v_in_top_v"], [660, 0, 1, "", "sub_mods"], [660, 0, 1, "", "track_submod_call_order"], [660, 0, 1, "", "track_submod_rets"], [660, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[661, 1, 1, "", "Constant"], [661, 1, 1, "", "FirstLayerSiren"], [661, 1, 1, "", "GlorotUniform"], [661, 1, 1, "", "Initializer"], [661, 1, 1, "", "KaimingNormal"], [661, 1, 1, "", "Ones"], [661, 1, 1, "", "RandomNormal"], [661, 1, 1, "", "Siren"], [661, 1, 1, "", "Uniform"], [661, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[661, 0, 1, "", "__init__"], [661, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[661, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[661, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[661, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[661, 0, 1, "", "__init__"], [661, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[661, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[661, 0, 1, "", "__init__"], [661, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[661, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[661, 0, 1, "", "__init__"], [661, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[661, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[662, 1, 1, "", "AdaptiveAvgPool1d"], [662, 1, 1, "", "AdaptiveAvgPool2d"], [662, 1, 1, "", "AvgPool1D"], [662, 1, 1, "", "AvgPool2D"], [662, 1, 1, "", "AvgPool3D"], [662, 1, 1, "", "Conv1D"], [662, 1, 1, "", "Conv1DTranspose"], [662, 1, 1, "", "Conv2D"], [662, 1, 1, "", "Conv2DTranspose"], [662, 1, 1, "", "Conv3D"], [662, 1, 1, "", "Conv3DTranspose"], [662, 1, 1, "", "Dct"], [662, 1, 1, "", "DepthwiseConv2D"], [662, 1, 1, "", "Dropout"], [662, 1, 1, "", "Embedding"], [662, 1, 1, "", "FFT"], [662, 1, 1, "", "Identity"], [662, 1, 1, "", "LSTM"], [662, 1, 1, "", "Linear"], [662, 1, 1, "", "MaxPool1D"], [662, 1, 1, "", "MaxPool2D"], [662, 1, 1, "", "MaxPool3D"], [662, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[662, 0, 1, "", "__init__"], [662, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[662, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[662, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[663, 1, 1, "", "BinaryCrossEntropyLoss"], [663, 1, 1, "", "CrossEntropyLoss"], [663, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[663, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[663, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[663, 0, 1, "", "__init__"]], "ivy.stateful.module": [[664, 1, 1, "", "Module"], [664, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[664, 0, 1, "", "__call__"], [664, 0, 1, "", "__init__"], [664, 0, 1, "", "build"], [664, 5, 1, "", "build_mode"], [664, 5, 1, "", "built_"], [664, 0, 1, "", "compile"], [664, 0, 1, "", "load"], [664, 0, 1, "", "save"], [664, 0, 1, "", "save_weights"], [664, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[665, 1, 1, "", "BatchNorm2D"], [665, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[665, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[665, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[666, 1, 1, "", "Adam"], [666, 1, 1, "", "LAMB"], [666, 1, 1, "", "LARS"], [666, 1, 1, "", "Optimizer"], [666, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[666, 0, 1, "", "__init__"], [666, 0, 1, "", "set_state"], [666, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[666, 0, 1, "", "__init__"], [666, 0, 1, "", "set_state"], [666, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[666, 0, 1, "", "__init__"], [666, 0, 1, "", "set_state"], [666, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[666, 0, 1, "", "__init__"], [666, 0, 1, "", "set_state"], [666, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[666, 0, 1, "", "__init__"], [666, 0, 1, "", "set_state"], [666, 5, 1, "", "state"]], "ivy.stateful.sequential": [[667, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[667, 0, 1, "", "__init__"]], "ivy.utils": [[668, 3, 0, "-", "assertions"], [669, 3, 0, "-", "backend"], [673, 3, 0, "-", "dynamic_import"], [674, 3, 0, "-", "einsum_parser"], [675, 3, 0, "-", "exceptions"], [676, 3, 0, "-", "inspection"], [677, 3, 0, "-", "logging"], [678, 3, 0, "-", "profiler"], [679, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[668, 2, 1, "", "check_all"], [668, 2, 1, "", "check_all_or_any_fn"], [668, 2, 1, "", "check_any"], [668, 2, 1, "", "check_dev_correct_formatting"], [668, 2, 1, "", "check_dimensions"], [668, 2, 1, "", "check_elem_in_list"], [668, 2, 1, "", "check_equal"], [668, 2, 1, "", "check_exists"], [668, 2, 1, "", "check_false"], [668, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [668, 2, 1, "", "check_gather_input_valid"], [668, 2, 1, "", "check_gather_nd_input_valid"], [668, 2, 1, "", "check_greater"], [668, 2, 1, "", "check_inplace_sizes_valid"], [668, 2, 1, "", "check_isinstance"], [668, 2, 1, "", "check_kernel_padding_size"], [668, 2, 1, "", "check_less"], [668, 2, 1, "", "check_one_way_broadcastable"], [668, 2, 1, "", "check_same_dtype"], [668, 2, 1, "", "check_shape"], [668, 2, 1, "", "check_shapes_broadcastable"], [668, 2, 1, "", "check_true"], [668, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[670, 3, 0, "-", "ast_helpers"], [671, 3, 0, "-", "handler"], [672, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[670, 1, 1, "", "ImportTransformer"], [670, 1, 1, "", "IvyLoader"], [670, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[670, 0, 1, "", "__init__"], [670, 0, 1, "", "impersonate_import"], [670, 0, 1, "", "visit_Import"], [670, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[670, 0, 1, "", "__init__"], [670, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[670, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[671, 1, 1, "", "ContextManager"], [671, 2, 1, "", "choose_random_backend"], [671, 2, 1, "", "convert_from_numpy_to_target_backend"], [671, 2, 1, "", "convert_from_source_backend_to_numpy"], [671, 2, 1, "", "current_backend"], [671, 2, 1, "", "fn_name_from_version_specific_fn_name"], [671, 2, 1, "", "prevent_access_locally"], [671, 2, 1, "", "previous_backend"], [671, 2, 1, "", "set_backend"], [671, 2, 1, "", "set_backend_to_specific_version"], [671, 2, 1, "", "set_jax_backend"], [671, 2, 1, "", "set_mxnet_backend"], [671, 2, 1, "", "set_numpy_backend"], [671, 2, 1, "", "set_paddle_backend"], [671, 2, 1, "", "set_tensorflow_backend"], [671, 2, 1, "", "set_torch_backend"], [671, 2, 1, "", "unset_backend"], [671, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[671, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[672, 2, 1, "", "available_sub_backends"], [672, 2, 1, "", "clear_sub_backends"], [672, 2, 1, "", "find_available_sub_backends"], [672, 2, 1, "", "set_sub_backend"], [672, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[673, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[674, 2, 1, "", "convert_interleaved_input"], [674, 2, 1, "", "convert_subscripts"], [674, 2, 1, "", "find_output_shape"], [674, 2, 1, "", "find_output_str"], [674, 2, 1, "", "gen_unused_symbols"], [674, 2, 1, "", "get_symbol"], [674, 2, 1, "", "has_valid_einsum_chars_only"], [674, 2, 1, "", "is_valid_einsum_char"], [674, 2, 1, "", "legalise_einsum_expr"], [674, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[675, 7, 1, "", "InvalidBackendException"], [675, 7, 1, "", "IvyAttributeError"], [675, 7, 1, "", "IvyBackendException"], [675, 7, 1, "", "IvyBroadcastShapeError"], [675, 7, 1, "", "IvyDeviceError"], [675, 7, 1, "", "IvyDtypePromotionError"], [675, 7, 1, "", "IvyError"], [675, 7, 1, "", "IvyException"], [675, 7, 1, "", "IvyIndexError"], [675, 7, 1, "", "IvyNotImplementedException"], [675, 7, 1, "", "IvyValueError"], [675, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InvalidBackendException": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[675, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[675, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[676, 2, 1, "", "add_array_specs"], [676, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[677, 2, 1, "", "set_logging_mode"], [677, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[678, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[678, 0, 1, "", "__init__"], [678, 4, 1, "", "print_stats"], [678, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[679, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[642, 3, 0, "-", "assertions"], [643, 3, 0, "-", "available_frameworks"], [644, 3, 0, "-", "function_testing"], [645, 3, 0, "-", "globals"], [646, 3, 0, "-", "hypothesis_helpers"], [651, 3, 0, "-", "pipeline_helper"], [652, 3, 0, "-", "structs"], [653, 3, 0, "-", "test_parameter_flags"], [654, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[642, 2, 1, "", "assert_all_close"], [642, 2, 1, "", "assert_same_type_and_shape"], [642, 2, 1, "", "check_unsupported_device"], [642, 2, 1, "", "check_unsupported_device_and_dtype"], [642, 2, 1, "", "check_unsupported_dtype"], [642, 2, 1, "", "test_unsupported_function"], [642, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[644, 2, 1, "", "args_to_container"], [644, 2, 1, "", "args_to_frontend"], [644, 2, 1, "", "arrays_to_frontend"], [644, 2, 1, "", "as_lists"], [644, 2, 1, "", "compiled_if_required"], [644, 2, 1, "", "convtrue"], [644, 2, 1, "", "create_args_kwargs"], [644, 2, 1, "", "flatten"], [644, 2, 1, "", "flatten_and_to_np"], [644, 2, 1, "", "flatten_frontend"], [644, 2, 1, "", "flatten_frontend_to_np"], [644, 2, 1, "", "get_frontend_ret"], [644, 2, 1, "", "get_ret_and_flattened_np_array"], [644, 2, 1, "", "gradient_incompatible_function"], [644, 2, 1, "", "gradient_test"], [644, 2, 1, "", "gradient_unsupported_dtypes"], [644, 2, 1, "", "kwargs_to_args_n_kwargs"], [644, 2, 1, "", "test_frontend_function"], [644, 2, 1, "", "test_frontend_method"], [644, 2, 1, "", "test_function"], [644, 2, 1, "", "test_method"], [644, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[645, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [645, 7, 1, "", "InterruptedTest"], [645, 1, 1, "", "TestData"], [645, 2, 1, "", "setup_api_test"], [645, 2, 1, "", "setup_frontend_test"], [645, 2, 1, "", "teardown_api_test"], [645, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[645, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[645, 0, 1, "", "__init__"], [645, 4, 1, "", "fn_name"], [645, 4, 1, "", "fn_tree"], [645, 4, 1, "", "is_method"], [645, 4, 1, "", "supported_device_dtypes"], [645, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[647, 3, 0, "-", "array_helpers"], [648, 3, 0, "-", "dtype_helpers"], [649, 3, 0, "-", "general_helpers"], [650, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[647, 2, 1, "", "array_and_broadcastable_shape"], [647, 2, 1, "", "array_bools"], [647, 2, 1, "", "array_indices_axis"], [647, 2, 1, "", "array_indices_put_along_axis"], [647, 2, 1, "", "array_values"], [647, 2, 1, "", "arrays_and_axes"], [647, 2, 1, "", "arrays_for_pooling"], [647, 2, 1, "", "broadcast_shapes"], [647, 2, 1, "", "cond_data_gen_helper"], [647, 2, 1, "", "create_nested_input"], [647, 2, 1, "", "dtype_and_values"], [647, 2, 1, "", "dtype_array_query"], [647, 2, 1, "", "dtype_array_query_val"], [647, 2, 1, "", "dtype_values_axis"], [647, 2, 1, "", "einsum_helper"], [647, 2, 1, "", "get_first_solve_matrix"], [647, 2, 1, "", "get_second_solve_matrix"], [647, 2, 1, "", "list_of_size"], [647, 2, 1, "", "lists"], [647, 2, 1, "", "mutually_broadcastable_shapes"], [647, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[648, 2, 1, "", "array_dtypes"], [648, 2, 1, "", "get_castable_dtype"], [648, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[649, 2, 1, "", "apply_safety_factor"], [649, 2, 1, "", "embedding_helper"], [649, 2, 1, "", "get_axis"], [649, 2, 1, "", "get_bounds"], [649, 2, 1, "", "get_mean_std"], [649, 2, 1, "", "get_shape"], [649, 2, 1, "", "matrix_is_stable"], [649, 2, 1, "", "reshape_shapes"], [649, 2, 1, "", "subsets"], [649, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[650, 2, 1, "", "floats"], [650, 2, 1, "", "ints"], [650, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[651, 1, 1, "", "WithBackendContext"], [651, 2, 1, "", "get_frontend_config"], [651, 4, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[651, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[652, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[652, 0, 1, "", "__init__"], [652, 4, 1, "", "framework_init_module"], [652, 4, 1, "", "init_name"], [652, 4, 1, "", "ivy_init_module"], [652, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[653, 1, 1, "", "FrontendFunctionTestFlags"], [653, 1, 1, "", "FrontendMethodTestFlags"], [653, 1, 1, "", "FunctionTestFlags"], [653, 1, 1, "", "InitMethodTestFlags"], [653, 1, 1, "", "MethodTestFlags"], [653, 1, 1, "", "TestFlags"], [653, 2, 1, "", "build_flag"], [653, 2, 1, "", "frontend_function_flags"], [653, 2, 1, "", "frontend_method_flags"], [653, 2, 1, "", "function_flags"], [653, 2, 1, "", "init_method_flags"], [653, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[653, 0, 1, "", "__init__"], [653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[653, 0, 1, "", "__init__"], [653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[653, 0, 1, "", "__init__"], [653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[653, 0, 1, "", "__init__"], [653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[653, 0, 1, "", "__init__"], [653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[653, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[654, 2, 1, "", "handle_frontend_method"], [654, 2, 1, "", "handle_frontend_test"], [654, 2, 1, "", "handle_method"], [654, 2, 1, "", "handle_test"], [654, 2, 1, "", "num_positional_args"], [654, 2, 1, "", "num_positional_args_method"], [654, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 717, 722, 733, 738], "compil": [0, 717, 722, 730, 735, 737, 738], "api": [0, 1, 2, 680, 683, 689, 693, 697, 698, 708, 713, 717, 719, 721, 722, 729, 736, 738], "us": [0, 2, 680, 687, 689, 690, 693, 708, 711, 720, 726], "eager": 0, "v": [0, 683, 704, 725], "lazi": 0, "arrai": [0, 48, 50, 72, 310, 647, 683, 693, 694, 698, 705, 719, 729], "cach": 0, "gener": [0, 10, 33, 297, 508, 649, 708, 712, 715], "state": [0, 721, 725], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 511, 560, 680, 686, 701, 705, 708, 711, 715], "set": [1, 20, 43, 308, 519, 680, 690, 695, 714], "up": [1, 680, 690], "ivi": [1, 2, 680, 686, 689, 691, 694, 696, 698, 701, 703, 708, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 724, 738], "folder": 1, "kei": 1, "issu": [1, 689, 691, 704], "question": 1, "transpil": [2, 680, 722], "function": [2, 54, 644, 689, 697, 699, 700, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 717, 722, 725], "librari": [2, 686, 724], "modul": [2, 664, 699, 700, 721], "unifi": [2, 680, 684, 719, 734, 738], "activ": [3, 25, 291, 500, 658], "convers": [4, 27, 707], "creation": [5, 28, 293, 503], "data": [6, 29, 53, 294, 504, 519, 621, 622, 623, 624, 699, 710, 712, 720, 725], "type": [6, 29, 294, 504, 699, 706, 710, 725], "devic": [7, 30, 295, 505, 700, 705, 710], "elementwis": [8, 31, 52, 296, 506], "experiment": [9, 32, 507, 689], "gradient": [11, 34, 276, 298, 509, 708], "imag": [12, 35, 202, 687, 696], "layer": [13, 36, 299, 510, 662], "linear": [14, 37, 300, 511, 534], "algebra": [14, 37, 300, 511], "loss": [15, 38, 301, 512, 663], "manipul": [16, 39, 302, 513], "norm": [17, 40, 305, 516, 665], "random": [18, 41, 306, 517], "search": [19, 42, 307, 518], "sort": [21, 44, 309, 520, 628], "statist": [22, 45, 311, 521], "util": [23, 46, 312, 522, 656], "wrap": [24, 47, 707], "base": [26, 51], "contain": [49, 691, 697, 720], "nest": [50, 304, 515], "class": [53, 655, 694, 703, 710, 719], "gelu": 55, "hardswish": 56, "leaky_relu": 57, "log_softmax": 58, "mish": 59, "relu": 60, "sigmoid": 61, "softmax": 62, "softplu": 63, "cast_bool": 64, "cmp_i": 65, "cmp_isnot": 66, "for_loop": 67, "if_els": 68, "try_except": 69, "while_loop": 70, "arang": 71, "asarrai": 73, "asarray_handle_nest": 74, "asarray_infer_devic": 75, "asarray_infer_dtyp": 76, "asarray_inputs_to_native_shap": 77, "asarray_to_native_arrays_and_back": 78, "copy_arrai": 79, "empti": 80, "empty_lik": 81, "ey": 82, "from_dlpack": 83, "note": [83, 503], "frombuff": 84, "full": [85, 711], "full_lik": 86, "linspac": 87, "logspac": 88, "meshgrid": 89, "native_arrai": 90, "one_hot": 91, "ones": 92, "ones_lik": 93, "tril": 94, "triu": 95, "triu_indic": 96, "zero": 97, "zeros_lik": 98, "as_ivy_dtyp": 99, "as_native_dtyp": 100, "astyp": 101, "broadcast_arrai": 102, "broadcast_to": 103, "can_cast": 104, "check_float": 105, "closest_valid_dtyp": 106, "default_complex_dtyp": 107, "default_dtyp": 108, "default_float_dtyp": 109, "default_int_dtyp": 110, "default_uint_dtyp": 111, "dtype": [112, 648, 705], "dtype_bit": 113, "finfo": 114, "function_supported_dtyp": 115, "function_unsupported_dtyp": 116, "iinfo": 117, "infer_default_dtyp": 118, "invalid_dtyp": 119, "is_bool_dtyp": 120, "is_complex_dtyp": 121, "is_float_dtyp": 122, "is_hashable_dtyp": 123, "is_int_dtyp": 124, "is_native_dtyp": 125, "is_uint_dtyp": 126, "promote_typ": 127, "promote_types_of_input": 128, "result_typ": 129, "set_default_complex_dtyp": 130, "set_default_dtyp": 131, "set_default_float_dtyp": 132, "set_default_int_dtyp": 133, "set_default_uint_dtyp": 134, "type_promote_arrai": 135, "unset_default_complex_dtyp": 136, "unset_default_dtyp": 137, "unset_default_float_dtyp": 138, "unset_default_int_dtyp": 139, "unset_default_uint_dtyp": 140, "valid_dtyp": 141, "as_ivy_dev": 142, "as_native_dev": 143, "clear_cached_mem_on_dev": 144, "default_devic": 145, "dev": 146, "dev_util": 147, "function_supported_devic": 148, "function_unsupported_devic": 149, "get_all_ivy_arrays_on_dev": 150, "gpu_is_avail": 151, "handle_soft_device_vari": 152, "num_cpu_cor": 153, "num_gpu": 154, "num_ivy_arrays_on_dev": 155, "percent_used_mem_on_dev": 156, "print_all_ivy_arrays_on_dev": 157, "set_default_devic": 158, "set_soft_device_mod": 159, "paramet": [159, 300, 346, 455, 456, 460, 461, 463, 464, 505, 508, 653, 714], "set_split_factor": 160, "split_factor": 161, "split_func_cal": 162, "to_devic": 163, "total_mem_on_dev": 164, "tpu_is_avail": 165, "unset_default_devic": 166, "unset_soft_device_mod": 167, "used_mem_on_dev": 168, "ab": 169, "aco": 170, "acosh": 171, "add": [172, 701, 711, 738], "angl": 173, "asin": 174, "asinh": 175, "atan": 176, "atan2": 177, "atanh": 178, "bitwise_and": 179, "bitwise_invert": 180, "bitwise_left_shift": 181, "bitwise_or": 182, "bitwise_right_shift": 183, "bitwise_xor": 184, "ceil": 185, "co": 186, "cosh": 187, "deg2rad": 188, "divid": 189, "equal": 190, "erf": 191, "exp": 192, "exp2": 193, "expm1": 194, "floor": 195, "floor_divid": 196, "fmin": 197, "fmod": 198, "gcd": 199, "greater": 200, "greater_equ": 201, "isfinit": 203, "isinf": 204, "isnan": 205, "isreal": 206, "lcm": 207, "less": 208, "less_equ": 209, "log": [210, 677, 690], "log10": 211, "log1p": 212, "log2": 213, "logaddexp": 214, "logaddexp2": 215, "logical_and": 216, "logical_not": 217, "logical_or": 218, "logical_xor": 219, "maximum": 220, "minimum": 221, "multipli": 222, "nan_to_num": 223, "neg": 224, "not_equ": 225, "posit": [226, 705], "pow": 227, "rad2deg": 228, "real": 229, "reciproc": 230, "remaind": 231, "round": 232, "sign": 233, "sin": 234, "sinh": 235, "sqrt": 236, "squar": 237, "subtract": 238, "tan": [239, 701, 711], "tanh": 240, "trapz": 241, "trunc": 242, "trunc_divid": 243, "elu": 244, "logit": 245, "logsigmoid": 246, "prelu": 247, "relu6": 248, "selu": 249, "sequence_length": 250, "silu": 251, "thresholded_relu": 252, "eye_lik": 253, "hamming_window": 254, "hann_window": 255, "indic": 256, "kaiser_bessel_derived_window": 257, "kaiser_window": 258, "ndenumer": 259, "ndindex": 260, "tril_indic": 261, "unsorted_segment_min": 262, "unsorted_segment_sum": 263, "vorbis_window": 264, "allclos": 265, "binar": 266, "conj": 267, "copysign": 268, "count_nonzero": 269, "diff": 270, "digamma": 271, "fix": 272, "float_pow": 273, "fmax": 274, "frexp": 275, "hypot": 277, "isclos": 278, "ldexp": 279, "lerp": 280, "lgamma": 281, "modf": 282, "nansum": 283, "nextaft": 284, "signbit": 285, "sinc": 286, "xlogi": 287, "zeta": 288, "reduc": 289, "bind_custom_gradient_funct": 290, "constant": [292, 501], "return": [300, 346], "meta": [303, 514], "spars": 310, "adaptive_avg_pool1d": 313, "adaptive_avg_pool2d": 314, "adaptive_max_pool2d": 315, "area_interpol": 316, "avg_pool1d": 317, "avg_pool2d": 318, "avg_pool3d": 319, "dct": 320, "dft": 321, "dropout1d": 322, "dropout2d": 323, "dropout3d": 324, "embed": 325, "fft": 326, "fft2": 327, "generate_einsum_equ": 328, "get_interpolate_kernel": 329, "idct": 330, "ifft": 331, "ifftn": 332, "interp": 333, "interpol": 334, "max_pool1d": 335, "max_pool2d": 336, "max_pool3d": 337, "max_unpool1d": 338, "nearest_interpol": 339, "pool": 340, "reduce_window": 341, "rfftn": 342, "adjoint": 343, "cond": 344, "diagflat": 345, "dot": 346, "eig": [347, 543], "eigh_tridiagon": 348, "eigval": 349, "kron": 350, "matrix_exp": 351, "multi_dot": 352, "log_poisson_loss": 353, "as_strid": 354, "associative_scan": 355, "atleast_1d": 356, "atleast_2d": 357, "atleast_3d": 358, "broadcast_shap": 359, "concat_from_sequ": 360, "dsplit": 361, "dstack": 362, "expand": 363, "fill_diagon": 364, "flatten": 365, "fliplr": 366, "flipud": 367, "heavisid": 368, "hsplit": 369, "hstack": 370, "i0": 371, "moveaxi": 372, "pad": 373, "put_along_axi": 374, "rot90": 375, "take_along_axi": 376, "top_k": 377, "unique_consecut": 378, "vsplit": 379, "vstack": 380, "batch_norm": 381, "group_norm": 382, "instance_norm": 383, "l1_normal": 384, "l2_normal": 385, "lp_normal": 386, "bernoulli": 387, "beta": 388, "dirichlet": 389, "gamma": 390, "poisson": 391, "unravel_index": 392, "invert_permut": 393, "lexsort": 394, "is_ivy_sparse_arrai": 395, "is_native_sparse_arrai": 396, "native_sparse_arrai": 397, "native_sparse_array_to_indices_values_and_shap": 398, "bincount": 399, "corrcoef": 400, "cov": 401, "cummax": 402, "cummin": 403, "histogram": 404, "igamma": 405, "median": 406, "nanmean": 407, "nanmedian": 408, "nanquantil": 409, "quantil": 410, "all_equ": 411, "arg_info": 412, "arg_nam": 413, "array_equ": 414, "assert_supports_inplac": 415, "cache_fn": 416, "clip_matrix_norm": 417, "clip_vector_norm": 418, "container_typ": 419, "current_backend_str": 420, "default": 421, "einops_rearrang": 422, "einops_reduc": 423, "einops_repeat": 424, "exist": [425, 687], "fourier_encod": 426, "function_supported_devices_and_dtyp": 427, "function_unsupported_devices_and_dtyp": 428, "gather": 429, "gather_nd": 430, "get_all_arrays_in_memori": 431, "get_item": 432, "get_num_dim": 433, "get_referrers_recurs": 434, "has_nan": 435, "inplace_arrays_support": 436, "inplace_decr": 437, "inplace_incr": 438, "inplace_upd": 439, "inplace_variables_support": 440, "is_arrai": 441, "is_ivy_arrai": 442, "is_ivy_contain": 443, "is_ivy_nested_arrai": 444, "is_native_arrai": 445, "isin": 446, "isscalar": 447, "items": 448, "match_kwarg": 449, "multiprocess": 450, "num_arrays_in_memori": 451, "print_all_arrays_in_memori": 452, "scatter_flat": 453, "scatter_nd": 454, "set_array_mod": 455, "set_exception_trace_mod": 456, "set_item": 457, "set_min_bas": 458, "set_min_denomin": 459, "set_nestable_mod": 460, "set_precise_mod": 461, "set_queue_timeout": 462, "set_shape_array_mod": 463, "set_show_func_wrapper_trace_mod": 464, "set_tmp_dir": 465, "shape": [466, 519, 621, 622, 623, 624, 707, 725], "stable_divid": 467, "stable_pow": 468, "stride": 469, "supports_inplace_upd": 470, "to_ivy_shap": 471, "to_list": 472, "to_native_shap": 473, "to_numpi": 474, "to_scalar": 475, "try_else_non": 476, "unset_array_mod": 477, "unset_exception_trace_mod": 478, "unset_min_bas": 479, "unset_min_denomin": 480, "unset_nestable_mod": 481, "unset_precise_mod": 482, "unset_queue_timeout": 483, "unset_shape_array_mod": 484, "unset_show_func_wrapper_trace_mod": 485, "unset_tmp_dir": 486, "value_is_nan": 487, "vmap": 488, "adam_step": 489, "adam_upd": 490, "execute_with_gradi": [491, 708], "grad": 492, "gradient_descent_upd": 493, "jac": 494, "lamb_upd": 495, "lars_upd": 496, "optimizer_upd": 497, "stop_gradi": 498, "value_and_grad": 499, "control": [502, 725], "flow": [502, 725], "op": 502, "instanc": [511, 560, 697, 710, 711, 719], "method": [511, 560, 697, 710, 711, 719, 720], "depend": [519, 621, 622, 623, 624], "output": [519, 621, 622, 623, 624], "conv": 523, "conv1d": 524, "conv1d_transpos": 525, "conv2d": 526, "conv2d_transpos": 527, "conv3d": 528, "conv3d_transpos": 529, "conv_general_dil": 530, "conv_general_transpos": 531, "depthwise_conv2d": 532, "dropout": 533, "lstm_updat": 535, "multi_head_attent": 536, "scaled_dot_product_attent": 537, "choleski": 538, "cross": 539, "det": 540, "diag": 541, "diagon": 542, "eigh": 544, "eigvalsh": 545, "inner": 546, "inv": 547, "lu_factor": 548, "matmul": 549, "matrix_norm": 550, "matrix_pow": 551, "matrix_rank": 552, "matrix_transpos": 553, "outer": 554, "pinv": 555, "qr": 556, "slogdet": 557, "solv": 558, "svd": 559, "svdval": 560, "tensordot": 561, "tensorsolv": 562, "trace": [563, 703], "vander": 564, "vecdot": 565, "vector_norm": 566, "vector_to_skew_symmetric_matrix": 567, "binary_cross_entropi": 568, "cross_entropi": 569, "sparse_cross_entropi": 570, "clip": 571, "concat": 572, "constant_pad": 573, "expand_dim": 574, "flip": 575, "permute_dim": 576, "repeat": 577, "reshap": 578, "roll": [579, 701], "split": 580, "squeez": 581, "stack": [582, 703], "swapax": 583, "tile": 584, "unstack": 585, "zero_pad": 586, "fomaml_step": 587, "maml_step": 588, "reptile_step": 589, "all_nested_indic": 590, "copy_nest": 591, "duplicate_array_index_chain": 592, "index_nest": 593, "insert_into_nest_at_index": 594, "insert_into_nest_at_indic": 595, "map": [596, 698], "map_nest_at_index": 597, "map_nest_at_indic": 598, "multi_index_nest": 599, "nested_ani": 600, "nested_argwher": 601, "nested_map": 602, "nested_multi_map": 603, "prune_empti": 604, "prune_nest_at_index": 605, "prune_nest_at_indic": 606, "set_nest_at_index": 607, "set_nest_at_indic": 608, "layer_norm": 609, "multinomi": 610, "randint": 611, "random_norm": 612, "random_uniform": 613, "seed": 614, "shuffl": 615, "argmax": 616, "argmin": 617, "argwher": 618, "nonzero": 619, "where": [620, 689], "unique_al": 621, "unique_count": 622, "unique_invers": 623, "unique_valu": 624, "argsort": 625, "msort": 626, "searchsort": 627, "cumprod": 629, "cumsum": 630, "einsum": [631, 674], "max": 632, "mean": 633, "min": 634, "prod": 635, "std": 636, "sum": 637, "var": 638, "all": 639, "ani": 640, "save": [641, 720], "assert": [642, 668, 703], "avail": 643, "framework": [643, 655, 680, 708, 711, 718, 732, 735, 738, 739], "test": [644, 653, 654, 657, 690, 691, 693, 698, 711, 712], "global": [645, 714], "hypothesi": [646, 690, 711, 712], "helper": [646, 647, 648, 649, 650, 651, 654, 660, 670, 711, 712, 713], "number": [650, 705], "pipelin": [651, 696, 698, 712, 725], "struct": 652, "flag": 653, "convert": [659, 722], "initi": [661, 721], "optim": [666, 721], "sequenti": 667, "backend": [669, 672, 680, 689, 695, 699, 708, 713, 717, 725], "ast": 670, "handler": [671, 672, 717], "sub": 672, "dynam": [673, 695, 725], "import": 673, "parser": 674, "except": [675, 703, 707], "inspect": 676, "profil": 678, "verbos": 679, "statu": 680, "ai": 680, "when": 680, "should": 680, "i": [680, 696, 715], "instal": [680, 726], "pip": [680, 726], "docker": [680, 687, 690, 691, 696, 726], "from": [680, 726], "sourc": [680, 726], "multi": [680, 735, 738], "support": [680, 695, 699, 707, 710, 725], "document": 680, "contribut": [680, 685], "commun": 680, "citat": 680, "background": 681, "ml": [682, 734, 738], "explos": 682, "standard": [683, 715, 729, 738], "skeptic": 683, "complimentari": 683, "competit": 683, "do": [683, 712], "work": [683, 728], "The": [683, 691, 696, 708, 710, 719, 725], "why": [684, 712], "No": [684, 690], "more": [684, 690, 715], "re": [684, 712], "implement": [684, 698, 708, 710], "infinit": 684, "shelf": 684, "life": 684, "appli": [686, 724], "introduct": [686, 710, 711], "robot": [686, 724], "build": [687, 696, 717], "doc": [687, 696], "conveni": [687, 696, 706], "script": [687, 696], "hub": 687, "local": [687, 691, 704], "without": [687, 711], "help": [688, 691], "resourc": 688, "open": 689, "task": 689, "format": [689, 704, 731, 738], "checklist": 689, "frontend": [689, 695, 710, 711, 722], "place": 689, "extend": [689, 712, 715], "creat": 689, "an": [689, 708], "": [689, 696], "github": [689, 690], "templat": 689, "fork": [690, 691], "clone": [690, 698], "repo": 690, "pre": [690, 704], "commit": [690, 691, 698, 704], "pycharm": [690, 691, 704], "virtual": 690, "environ": 690, "miniconda": 690, "venv": 690, "interpret": 690, "window": 690, "maco": 690, "ubuntu": 690, "detail": 690, "free": 690, "wsl": 690, "codespac": 690, "basic": [691, 710], "get": [691, 726], "todo": 691, "list": 691, "manag": 691, "your": [691, 712], "who": 691, "To": 691, "ask": 691, "With": 691, "command": 691, "line": 691, "browser": 691, "pull": [691, 698], "request": [691, 698], "small": 691, "often": 691, "interact": 691, "run": [691, 693, 696, 712], "most": 691, "out": [691, 705, 707, 709], "id": [691, 693], "deep": 692, "dive": 692, "termin": 693, "regener": 693, "failur": 693, "skip": 693, "nativ": [694, 715], "handl": [694, 700, 703, 707, 725], "integr": [694, 698, 704, 712], "custom": [694, 696, 708, 720, 725], "version": [695, 713, 725], "how": [696, 712], "builder": 696, "being": 696, "option": 696, "structur": [696, 708, 725], "index": 696, "rst": 696, "partial_conf": 696, "py": 696, "prebuild": 696, "sh": 696, "extens": [696, 723], "custom_autosummari": 696, "hide": 696, "tabl": 696, "discussion_link": 696, "skippable_funct": 696, "ivy_data": 696, "special": [697, 710], "nestabl": [697, 705, 706, 707], "continu": [698, 704], "push": 698, "pr": 698, "trigger": 698, "A": [698, 715], "top": 698, "down": 698, "view": [698, 707, 709], "store": 698, "retriev": 698, "repositori": 698, "nitti": 698, "gritti": 698, "storag": 698, "space": 698, "unifyai": 698, "determin": 698, "coverag": 698, "workflow": 698, "multipl": 698, "runner": 698, "race": 698, "condit": 698, "period": 698, "manual": 698, "dispatch": 698, "ci": 698, "dashboard": 698, "promot": [699, 710], "argument": [699, 700, 705, 707, 709, 710], "other": [699, 700], "unsupport": 699, "bug": 699, "cast": [699, 710], "mode": [699, 703, 714], "superset": [699, 715], "docstr": [701, 702], "configur": [703, 711, 720], "func_wrapp": 703, "prune": 703, "handle_except": 703, "decor": [703, 707, 712], "consist": [703, 712], "error": 703, "lint": 704, "check": [704, 725], "setup": 704, "code": [704, 713], "common": 704, "keyword": 705, "input": 705, "oper": [705, 714, 719, 725], "integ": 705, "sequenc": 705, "primari": 706, "composit": 706, "mix": [706, 707, 712], "standalon": 706, "order": 707, "wrapper": [707, 738, 739], "infer": 707, "partial": [707, 712], "miscellan": 707, "overview": 708, "usag": [708, 715], "signatur": 708, "design": [708, 713, 716], "our": 708, "polici": [708, 710], "specif": [708, 736, 737, 738], "consider": 708, "inplac": 709, "updat": 709, "copi": 709, "write": [710, 712], "short": 710, "unus": 710, "rule": 710, "numpi": [710, 732], "duplic": [710, 715], "valu": 711, "alia": 711, "own": 712, "strategi": 712, "we": 712, "need": 712, "effect": 712, "bonu": 712, "featur": 712, "self": 712, "explicit": 712, "test_array_funct": 712, "fail": 712, "navig": 713, "categor": 713, "submodul": 713, "unpin": 713, "properti": 714, "getter": 714, "attribut": 714, "setter": 714, "set_": 714, "unset_": 714, "behaviour": 715, "what": [715, 738], "non": 715, "balanc": 715, "effici": 715, "maxim": 715, "block": 717, "monkei": 719, "patch": 719, "construct": 720, "represent": 720, "recurs": 720, "built": 720, "ins": 720, "access": 720, "load": 720, "comparison": 720, "case": 720, "compartment": 720, "network": [720, 722], "weight": 720, "role": 722, "model": [722, 725], "mechan": 724, "vision": 724, "gym": 724, "memori": 724, "faq": 725, "maintain": 725, "size": 725, "gpu": 725, "deploy": 725, "auto": 725, "differenti": 725, "replica": 725, "parallel": 725, "altern": 725, "start": 726, "glossari": 727, "relat": 728, "infrastructur": [730, 738], "llvm": 730, "mlir": 730, "oneapi": 730, "exchang": [731, 738], "onnx": 731, "nnef": 731, "coreml": 731, "matlab": 732, "scipi": 732, "torch": [732, 733], "scikit": 732, "learn": 732, "theano": 732, "panda": 732, "julia": 732, "apach": [732, 735], "spark": 732, "mllib": 732, "caff": 732, "chainer": 732, "tensorflow": 732, "1": 732, "mxnet": 732, "cntk": 732, "pytorch": 732, "flux": 732, "jax": 732, "2": 732, "dex": 732, "languag": 732, "tracer": [733, 738], "tf": 733, "jaxpr": 733, "jit": 733, "fx": 733, "compani": [734, 738], "quansight": 734, "modular": 734, "octoml": 734, "vendor": [735, 736, 737, 738], "tvm": 735, "xla": 735, "gcc": 735, "tensorrt": 736, "cuda": 736, "icc": 737, "icx": 737, "nvcc": 737, "doe": 738, "eagerpi": 739, "kera": 739, "thinc": 739, "tensorli": 739, "neuropod": 739}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"from_dlpack": [[83, "from-dlpack"]], "Note": [[83, null], [503, null]], "native_array": [[90, "native-array"]], "full_like": [[86, "full-like"]], "asarray_handle_nestable": [[74, "asarray-handle-nestable"]], "broadcast_arrays": [[102, "broadcast-arrays"]], "can_cast": [[104, "can-cast"]], "default_float_dtype": [[109, "default-float-dtype"]], "asarray_infer_dtype": [[76, "asarray-infer-dtype"]], "cmp_isnot": [[66, "cmp-isnot"]], "empty": [[80, "empty"]], "linspace": [[87, "linspace"]], "default_uint_dtype": [[111, "default-uint-dtype"]], "ones_like": [[93, "ones-like"]], "meshgrid": [[89, "meshgrid"]], "default_dtype": [[108, "default-dtype"]], "sigmoid": [[61, "sigmoid"]], "dtype": [[112, "dtype"]], "while_loop": [[70, "while-loop"]], "logspace": [[88, "logspace"]], "invalid_dtype": [[119, "invalid-dtype"]], "softmax": [[62, "softmax"]], "array": [[72, "array"]], "function_supported_dtypes": [[115, "function-supported-dtypes"]], "copy_array": [[79, "copy-array"]], "softplus": [[63, "softplus"]], "empty_like": [[81, "empty-like"]], "check_float": [[105, "check-float"]], "closest_valid_dtype": [[106, "closest-valid-dtype"]], "tril": [[94, "tril"]], "if_else": [[68, "if-else"]], "broadcast_to": [[103, "broadcast-to"]], "asarray_to_native_arrays_and_back": [[78, "asarray-to-native-arrays-and-back"]], "one_hot": [[91, "one-hot"]], "triu": [[95, "triu"]], "zeros_like": [[98, "zeros-like"]], "dtype_bits": [[113, "dtype-bits"]], "full": [[85, "full"]], "cmp_is": [[65, "cmp-is"]], "arange": [[71, "arange"]], "zeros": [[97, "zeros"]], "for_loop": [[67, "for-loop"]], "frombuffer": [[84, "frombuffer"]], "as_native_dtype": [[100, "as-native-dtype"]], "cast_bool": [[64, "cast-bool"]], "default_int_dtype": [[110, "default-int-dtype"]], "relu": [[60, "relu"]], "ones": [[92, "ones"]], "function_unsupported_dtypes": [[116, "function-unsupported-dtypes"]], "as_ivy_dtype": [[99, "as-ivy-dtype"]], "asarray": [[73, "asarray"]], "asarray_infer_device": [[75, "asarray-infer-device"]], "iinfo": [[117, "iinfo"]], "infer_default_dtype": [[118, "infer-default-dtype"]], "triu_indices": [[96, "triu-indices"]], "try_except": [[69, "try-except"]], "finfo": [[114, "finfo"]], "eye": [[82, "eye"]], "astype": [[101, "astype"]], "asarray_inputs_to_native_shapes": [[77, "asarray-inputs-to-native-shapes"]], "default_complex_dtype": [[107, "default-complex-dtype"]], "What does Ivy Add?": [[738, "what-does-ivy-add"]], "API Standards": [[738, "api-standards"], [729, "api-standards"]], "Wrapper Frameworks": [[738, "wrapper-frameworks"], [739, "wrapper-frameworks"]], "Frameworks": [[738, "frameworks"], [732, "frameworks"]], "Graph Tracers": [[738, "graph-tracers"], [733, "graph-tracers"]], "Exchange Formats": [[738, "exchange-formats"], [731, "exchange-formats"]], "Compiler Infrastructure": [[738, "compiler-infrastructure"], [730, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[738, "multi-vendor-compiler-frameworks"], [735, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[738, "vendor-specific-apis"], [736, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[738, "vendor-specific-compilers"], [737, "vendor-specific-compilers"]], "ML-Unifying Companies": [[738, "ml-unifying-companies"], [734, "ml-unifying-companies"]], "Ivy Container": [[720, "ivy-container"]], "Construction": [[720, "construction"]], "Representation": [[720, "representation"]], "Recursive Methods": [[720, "recursive-methods"]], "Built-ins": [[720, "built-ins"]], "Access": [[720, "access"]], "Saving and Loading": [[720, "saving-and-loading"]], "Comparisons": [[720, "comparisons"]], "Customized Representations": [[720, "customized-representations"]], "Use Cases": [[720, "use-cases"]], "Compartmentalization": [[720, "compartmentalization"]], "Configuration": [[720, "configuration"]], "Data loading": [[720, "data-loading"]], "Network weights": [[720, "network-weights"]], "Ivy Stateful API": [[721, "ivy-stateful-api"]], "Modules": [[721, "modules"]], "Initializers": [[721, "initializers"], [661, "module-ivy.stateful.initializers"]], "Optimizers": [[721, "optimizers"], [666, "module-ivy.stateful.optimizers"]], "MATLAB matlab": [[732, "matlab-matlab"]], "SciPy scipy": [[732, "scipy-scipy"]], "Torch torch": [[732, "torch-torch"]], "NumPy numpy": [[732, "numpy-numpy"]], "SciKit Learn scikit-learn": [[732, "scikit-learn-scikit-learn"]], "Theano theano": [[732, "theano-theano"]], "Pandas pandas": [[732, "pandas-pandas"]], "Julia julia": [[732, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[732, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[732, "caffe-caffe"]], "Chainer chainer": [[732, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[732, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[732, "mxnet-mxnet"]], "CNTK cntk": [[732, "cntk-cntk"]], "PyTorch pytorch": [[732, "pytorch-pytorch"]], "Flux flux": [[732, "flux-flux"]], "JAX jax": [[732, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[732, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[732, "dex-language-dex-language"]], "Applied Libraries": [[724, "applied-libraries"], [686, "applied-libraries"]], "Ivy Mechanics": [[724, "ivy-mechanics"]], "Ivy Vision": [[724, "ivy-vision"]], "Ivy Robot": [[724, "ivy-robot"]], "Ivy Gym": [[724, "ivy-gym"]], "Ivy Memory": [[724, "ivy-memory"]], "ICC": [[737, "id1"]], "ICX": [[737, "icx"]], "NVCC": [[737, "nvcc"]], "Array API Standard": [[729, "id1"]], "EagerPy eagerpy": [[739, "eagerpy-eagerpy"]], "Keras keras": [[739, "keras-keras"]], "Thinc thinc": [[739, "thinc-thinc"]], "TensorLy tensorly": [[739, "tensorly-tensorly"]], "NeuroPod": [[739, "id1"]], "Glossary": [[727, "glossary"]], "Apache TVM": [[735, "apache-tvm"]], "XLA": [[735, "xla"]], "GCC": [[735, "gcc"]], "tf.Graph": [[733, "tf-graph"]], "Jaxpr": [[733, "jaxpr"]], "torch.jit": [[733, "torch-jit"]], "torch.fx": [[733, "torch-fx"]], "ONNX onnx": [[731, "onnx-onnx"]], "NNEF nnef": [[731, "nnef-nnef"]], "CoreML coreml": [[731, "coreml-coreml"]], "Quansight": [[734, "id1"]], "Modular": [[734, "id2"]], "OctoML": [[734, "id3"]], "LLVM": [[730, "id1"]], "MLIR": [[730, "id2"]], "OneAPI": [[730, "id3"]], "FAQ": [[725, "faq"]], "Maintaining Backend Versions": [[725, "maintaining-backend-versions"]], "Dynamic Sizes": [[725, "dynamic-sizes"]], "Type and Shape Checking": [[725, "type-and-shape-checking"]], "GPU handling": [[725, "gpu-handling"]], "Model Deployment": [[725, "model-deployment"]], "Dynamic Control Flow": [[725, "dynamic-control-flow"]], "Auto-Differentiation": [[725, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[725, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[725, "support-for-functions"]], "Alternative Data Structures": [[725, "alternative-data-structures"]], "Custom Operations": [[725, "custom-operations"]], "The Pipeline": [[725, "the-pipeline"]], "State": [[725, "state"]], "Related Work": [[728, "related-work"]], "Extensions": [[723, "extensions"]], "Ivy as a Transpiler": [[722, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[722, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[722, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[722, "converting-network-models"]], "Get Started": [[726, "get-started"]], "Installing using pip": [[726, "installing-using-pip"], [680, "installing-using-pip"]], "Docker": [[726, "docker"], [680, "docker"]], "Installing from source": [[726, "installing-from-source"], [680, "installing-from-source"]], "TensorRT tensorrt": [[736, "tensorrt-tensorrt"]], "CUDA cuda": [[736, "cuda-cuda"]], "Ivy as a Framework": [[718, "ivy-as-a-framework"]], "Introduction": [[686, "introduction"], [711, "introduction"], [710, "introduction"]], "Example - Ivy Robot": [[686, "example-ivy-robot"]], "Ivy Array": [[719, "ivy-array"], [694, "ivy-array"]], "The Array Class": [[719, "the-array-class"]], "Unifying Operators": [[719, "unifying-operators"]], "API Monkey Patching": [[719, "api-monkey-patching"]], "Instance Methods": [[719, "instance-methods"]], "Assertions": [[668, "module-ivy.utils.assertions"], [642, "module-ivy_tests.test_ivy.helpers.assertions"]], "Losses": [[663, "module-ivy.stateful.losses"], [512, "losses"], [38, "module-ivy.data_classes.container.losses"], [15, "module-ivy.data_classes.array.losses"], [301, "losses"]], "Ivy Frontend Tests": [[711, "ivy-frontend-tests"]], "Frontend Test Examples": [[711, "frontend-test-examples"]], "ivy.tan()": [[711, "ivy-tan"]], "ivy.full()": [[711, "ivy-full"]], "Testing Without Using Tests Values": [[711, "testing-without-using-tests-values"]], "Alias functions": [[711, "alias-functions"]], "Frontend Instance Method Tests": [[711, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[711, "frontend-instance-method-test-examples"]], "ivy.add()": [[711, "ivy-add"]], "Hypothesis Helpers": [[711, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[711, "frontend-framework-testing-configuration"]], "Building the Docs": [[687, "building-the-docs"]], "Building the Docs using Docker": [[687, "building-the-docs-using-docker"]], "Using convenience script": [[687, "using-convenience-script"]], "Using existing image on Docker Hub": [[687, "using-existing-image-on-docker-hub"]], "Building the image locally": [[687, "building-the-image-locally"]], "Building the Docs without Docker": [[687, "building-the-docs-without-docker"]], "Formatting": [[704, "formatting"]], "Lint Checks": [[704, "lint-checks"], [704, "id2"]], "Setup Formatting Locally": [[704, "setup-formatting-locally"]], "Pre-commit": [[704, "pre-commit"]], "VS Code": [[704, "vs-code"]], "PyCharm": [[704, "pycharm"], [690, "pycharm"]], "Common Issues with Pre-Commit": [[704, "common-issues-with-pre-commit"]], "Continuous Integration": [[704, "continuous-integration"], [698, "continuous-integration"]], "Lint Formatting": [[704, "lint-formatting"]], "Einsum parser": [[674, "module-ivy.utils.einsum_parser"]], "Inspection": [[676, "module-ivy.utils.inspection"]], "Building the Docs Pipeline": [[696, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[696, "how-the-doc-builder-is-being-run"]], "The convenience script": [[696, "the-convenience-script"]], "Options": [[696, "options"]], "The Docker image": [[696, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[696, "how-ivy-s-docs-is-structured"]], "index.rst": [[696, "index-rst"]], "partial_conf.py": [[696, "partial-conf-py"]], "prebuild.sh": [[696, "prebuild-sh"]], "Custom Extensions": [[696, "custom-extensions"]], "custom_autosummary": [[696, "custom-autosummary"]], ":hide-table:": [[696, "hide-table"]], "discussion_linker": [[696, "discussion-linker"]], "skippable_function": [[696, "skippable-function"]], "ivy_data": [[696, "ivy-data"]], "Background": [[681, "background"]], "Backend Setting": [[695, "backend-setting"]], "Dynamic Backend Setting": [[695, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[695, "backend-and-frontend-version-support"]], "Sequential": [[667, "module-ivy.stateful.sequential"]], "Standardization": [[683, "standardization"]], "Skepticism": [[683, "skepticism"]], "Complimentary vs Competitive": [[683, "complimentary-vs-competitive"]], "Do Standards Work?": [[683, "do-standards-work"]], "The Array API Standard": [[683, "the-array-api-standard"]], "Function Wrapping": [[707, "function-wrapping"]], "Decorator order": [[707, "decorator-order"]], "Conversion Wrappers": [[707, "conversion-wrappers"]], "Inference Wrappers": [[707, "inference-wrappers"]], "Out Argument Support": [[707, "out-argument-support"]], "Nestable Support": [[707, "nestable-support"]], "Partial Mixed Function Support": [[707, "partial-mixed-function-support"]], "Shape Conversion": [[707, "shape-conversion"]], "View Handling": [[707, "view-handling"]], "Exception Handling": [[707, "exception-handling"], [703, "exception-handling"]], "Miscellaneous Wrappers": [[707, "miscellaneous-wrappers"]], "Why Unify?": [[684, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[684, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[684, "infinite-shelf-life"]], "Dynamic import": [[673, "module-ivy.utils.dynamic_import"]], "Containers": [[697, "containers"]], "Container Instance Methods": [[697, "container-instance-methods"]], "API Instance Methods": [[697, "api-instance-methods"]], "API Special Methods": [[697, "api-special-methods"]], "Nestable Functions": [[697, "nestable-functions"], [706, "nestable-functions"], [705, "nestable-functions"]], "Logging": [[677, "module-ivy.utils.logging"]], "Verbosity": [[679, "module-ivy.utils.verbosity"]], "Module": [[664, "module-ivy.stateful.module"]], "Building Blocks": [[717, "building-blocks"]], "Backend Functional APIs \u2705": [[717, "backend-functional-apis"]], "Ivy Functional API \u2705": [[717, "ivy-functional-api"]], "Backend Handler \u2705": [[717, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[717, "graph-compiler"]], "Inplace Updates": [[709, "inplace-updates"]], "out argument": [[709, "out-argument"]], "copy argument": [[709, "copy-argument"]], "Views": [[709, "views"]], "Data Types": [[699, "data-types"]], "Data Type Module": [[699, "data-type-module"]], "Data Type Promotion": [[699, "data-type-promotion"]], "Arguments in other Functions": [[699, "arguments-in-other-functions"], [700, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[699, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[699, "backend-data-type-bugs"]], "Data Type Casting Modes": [[699, "data-type-casting-modes"]], "Superset Data Type Support": [[699, "superset-data-type-support"]], "Design": [[716, "design"]], "Norms": [[665, "module-ivy.stateful.norms"], [516, "norms"], [17, "module-ivy.data_classes.array.norms"], [40, "module-ivy.data_classes.container.norms"], [305, "norms"]], "Devices": [[700, "devices"]], "Device Module": [[700, "device-module"]], "Device handling": [[700, "device-handling"]], "Backend": [[669, "backend"]], "Status": [[680, "status"]], "Unified AI": [[680, "unified-ai"]], "Ivy as a transpiler": [[680, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[680, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[680, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[680, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[680, "setting-up-ivy"]], "Using Ivy": [[680, "using-ivy"]], "Multi-backend Support": [[680, "multi-backend-support"]], "Transpilation API": [[680, "transpilation-api"]], "Documentation": [[680, "documentation"]], "Examples": [[680, "examples"], [705, "examples"], [2, "examples"], [0, "examples"]], "Contributing": [[680, "contributing"], [685, "contributing"]], "Community": [[680, "community"]], "Citation": [[680, "citation"]], "Array API Tests": [[693, "array-api-tests"], [698, "array-api-tests"]], "Running the Tests": [[693, "running-the-tests"]], "Using Terminal": [[693, "using-terminal"]], "Using the IDE": [[693, "using-the-ide"]], "Regenerating Test Failures": [[693, "regenerating-test-failures"]], "Test Skipping": [[693, "test-skipping"]], "Arrays": [[694, "arrays"]], "Native Array": [[694, "native-array"]], "Array Handling": [[694, "array-handling"]], "Integrating custom classes with Ivy": [[694, "integrating-custom-classes-with-ivy"]], "Docstring Examples": [[701, "docstring-examples"]], "ivy.tan": [[701, "ivy-tan"]], "ivy.roll": [[701, "ivy-roll"]], "ivy.add": [[701, "ivy-add"]], "Exceptions": [[675, "module-ivy.utils.exceptions"]], "Open Tasks": [[689, "open-tasks"]], "Function Formatting": [[689, "function-formatting"]], "Formatting checklist": [[689, "formatting-checklist"]], "Frontend APIs": [[689, "frontend-apis"]], "Where to place a frontend function": [[689, "where-to-place-a-frontend-function"]], "Frontend checklist": [[689, "frontend-checklist"]], "Ivy Experimental API": [[689, "ivy-experimental-api"]], "Extending the Ivy API": [[689, "extending-the-ivy-api"]], "Where to place a backend function": [[689, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[689, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Handler": [[671, "module-ivy.utils.backend.handler"]], "Docstrings": [[702, "docstrings"]], "Layers": [[662, "module-ivy.stateful.layers"], [510, "layers"], [13, "module-ivy.data_classes.array.layers"], [36, "module-ivy.data_classes.container.layers"], [299, "layers"]], "Helpers": [[660, "module-ivy.stateful.helpers"]], "Ivy Frontends": [[710, "ivy-frontends"]], "The Frontend Basics": [[710, "the-frontend-basics"]], "Writing Frontend Functions": [[710, "writing-frontend-functions"]], "Short Frontend Implementations": [[710, "short-frontend-implementations"]], "Unused Arguments": [[710, "unused-arguments"]], "Supported Data Types and Devices": [[710, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[710, "id6"]], "Frontend Data Type Promotion Rules": [[710, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[710, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[710, "frontends-duplicate-policy"]], "Profiler": [[678, "module-ivy.utils.profiler"]], "Navigating the Code": [[713, "navigating-the-code"]], "Categorization": [[713, "categorization"]], "Submodule Design": [[713, "submodule-design"]], "Ivy API": [[713, "ivy-api"]], "Backend API": [[713, "backend-api"]], "Submodule Helper Functions": [[713, "submodule-helper-functions"]], "Version Unpinning": [[713, "version-unpinning"]], "Superset Behaviour": [[715, "superset-behaviour"]], "Extending the Standard": [[715, "extending-the-standard"]], "What is the Superset?": [[715, "what-is-the-superset"]], "A Non-Duplicate Superset": [[715, "a-non-duplicate-superset"]], "What is not the Superset?": [[715, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[715, "balancing-generalization-with-efficiency"]], "More Examples": [[715, "more-examples"]], "Maximizing Usage of Native Functionality": [[715, "maximizing-usage-of-native-functionality"]], "Deep Dive": [[692, "deep-dive"]], "Commit (Push/PR) Triggered Testing": [[698, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[698, "ivy-tests"], [712, "ivy-tests"]], "Implementation": [[698, "implementation"]], "A Top-Down View": [[698, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[698, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[698, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[698, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[698, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[698, "determine-test-coverage-workflow"]], "Multiple Runners": [[698, "multiple-runners"]], "Race Condition": [[698, "race-condition"]], "Periodic Testing": [[698, "periodic-testing"]], "Manually Dispatched Workflows": [[698, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[698, "ci-pipeline"]], "Push": [[698, "push"]], "Pull Request": [[698, "pull-request"]], "Dashboard": [[698, "dashboard"]], "Ast helpers": [[670, "module-ivy.utils.backend.ast_helpers"]], "Testing Pipeline": [[712, "testing-pipeline"]], "Hypothesis": [[712, "id1"]], "Data Generation": [[712, "id2"]], "Writing your own strategy": [[712, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[712, "writing-hypothesis-test"]], "Ivy Test Decorators": [[712, "ivy-test-decorators"]], "Writing Ivy Tests": [[712, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[712, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[712, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[712, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[712, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[712, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[712, "self-consistent-and-explicit-testing"]], "test_array_function": [[712, "id5"]], "Running Ivy Tests": [[712, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[712, "re-running-failed-ivy-tests"]], "The Basics": [[691, "the-basics"]], "Getting Help": [[691, "getting-help"]], "ToDo List Issues": [[691, "todo-list-issues"]], "Managing Your Fork": [[691, "managing-your-fork"]], "Who To Ask": [[691, "who-to-ask"]], "With Command Line:": [[691, "with-command-line"]], "With Browser:": [[691, "with-browser"]], "Pull Requests": [[691, "pull-requests"]], "Small Commits Often": [[691, "small-commits-often"]], "Interactive Ivy Docker Container": [[691, "interactive-ivy-docker-container"]], "Running Tests Locally": [[691, "running-tests-locally"]], "With Docker": [[691, "with-docker"]], "Getting the most out of IDE": [[691, "getting-the-most-out-of-ide"]], "with PyCharm": [[691, "with-pycharm"]], "Gradients": [[708, "gradients"], [509, "gradients"], [34, "module-ivy.data_classes.container.gradients"], [11, "module-ivy.data_classes.array.gradients"], [298, "gradients"]], "Overview": [[708, "overview"]], "Example Usage of the Gradient API": [[708, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[708, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[708, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[708, "custom-gradient-functions"]], "Design of the Gradient API": [[708, "design-of-the-gradient-api"]], "Our policy on gradients": [[708, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[708, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[708, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[708, "framework-specific-considerations"]], "Setting Up": [[690, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[690, "forking-and-cloning-the-repo"]], "Pre-Commit": [[690, "pre-commit"]], "Virtual environments - No Docker": [[690, "virtual-environments-no-docker"]], "Using miniconda": [[690, "using-miniconda"]], "Using venv": [[690, "using-venv"]], "Docker Interpreter with PyCharm": [[690, "docker-interpreter-with-pycharm"]], "Windows": [[690, "windows"], [690, "id6"]], "MacOS": [[690, "macos"]], "Ubuntu": [[690, "ubuntu"], [690, "id8"]], "Setting Up Testing in PyCharm": [[690, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[690, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[690, "setting-up-for-free"]], "WSL": [[690, "wsl"]], "GitHub Codespaces": [[690, "github-codespaces"]], "Function Types": [[706, "function-types"]], "Primary Functions": [[706, "primary-functions"]], "Compositional Functions": [[706, "compositional-functions"]], "Mixed Functions": [[706, "mixed-functions"]], "Standalone Functions": [[706, "standalone-functions"]], "Convenience Functions": [[706, "convenience-functions"]], "Helpful Resources": [[688, "helpful-resources"]], "ML Explosion": [[682, "ml-explosion"]], "Operating Modes": [[714, "operating-modes"]], "Global Parameter Properties": [[714, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[714, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[714, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Ivy Exception Class": [[703, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[703, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[703, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[703, "handle-exceptions-decorator"]], "Consistency in Errors": [[703, "consistency-in-errors"]], "Assertion Function": [[703, "assertion-function"]], "Sub backend handler": [[672, "module-ivy.utils.backend.sub_backend_handler"]], "Function Arguments": [[705, "function-arguments"]], "Positional and Keyword Arguments": [[705, "positional-and-keyword-arguments"]], "Input Arrays": [[705, "input-arrays"]], "out Argument": [[705, "out-argument"]], "dtype and device arguments": [[705, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[705, "numbers-in-operator-functions"]], "Integer Sequences": [[705, "integer-sequences"]], "nested_argwhere": [[601, "nested-argwhere"]], "Array helpers": [[647, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "argmin": [[617, "argmin"]], "std": [[636, "std"]], "argmax": [[616, "argmax"]], "searchsorted": [[627, "searchsorted"]], "Activations": [[658, "module-ivy.stateful.activations"], [500, "activations"], [3, "module-ivy.data_classes.array.activations"], [25, "module-ivy.data_classes.container.activations"], [291, "activations"]], "prune_nest_at_index": [[605, "prune-nest-at-index"]], "Dtype helpers": [[648, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "sum": [[637, "sum"]], "unique_inverse": [[623, "unique-inverse"]], "Data-dependent output shape": [[623, null], [622, null], [621, null], [624, null], [519, null], [519, null], [519, null], [519, null]], "cumprod": [[629, "cumprod"]], "save": [[641, "save"]], "Framework classes": [[655, "framework-classes"]], "einsum": [[631, "einsum"]], "any": [[640, "any"]], "random_uniform": [[613, "random-uniform"]], "nested_any": [[600, "nested-any"]], "Number helpers": [[650, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "cumsum": [[630, "cumsum"]], "Globals": [[645, "module-ivy_tests.test_ivy.helpers.globals"]], "unique_counts": [[622, "unique-counts"]], "Function testing": [[644, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Structs": [[652, "module-ivy_tests.test_ivy.helpers.structs"]], "var": [[638, "var"]], "set_nest_at_indices": [[608, "set-nest-at-indices"]], "randint": [[611, "randint"]], "Hypothesis helpers": [[646, "hypothesis-helpers"]], "argwhere": [[618, "argwhere"]], "prune_nest_at_indices": [[606, "prune-nest-at-indices"]], "prune_empty": [[604, "prune-empty"]], "where": [[620, "where"]], "layer_norm": [[609, "layer-norm"]], "Converters": [[659, "module-ivy.stateful.converters"]], "nested_map": [[602, "nested-map"]], "seed": [[614, "seed"]], "all": [[639, "all"]], "Pipeline helper": [[651, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Testing helpers": [[654, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "sort": [[628, "sort"]], "Test parameter flags": [[653, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "random_normal": [[612, "random-normal"]], "multinomial": [[610, "multinomial"]], "min": [[634, "min"]], "nested_multi_map": [[603, "nested-multi-map"]], "msort": [[626, "msort"]], "nonzero": [[619, "nonzero"]], "mean": [[633, "mean"]], "General helpers": [[649, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Testing": [[657, "testing"]], "prod": [[635, "prod"]], "unique_all": [[621, "unique-all"]], "shuffle": [[615, "shuffle"]], "Utils": [[656, "utils"]], "max": [[632, "max"]], "Available frameworks": [[643, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "unique_values": [[624, "unique-values"]], "set_nest_at_index": [[607, "set-nest-at-index"]], "argsort": [[625, "argsort"]], "constant_pad": [[573, "constant-pad"]], "tensordot": [[561, "tensordot"]], "binary_cross_entropy": [[568, "binary-cross-entropy"]], "zero_pad": [[586, "zero-pad"]], "flip": [[575, "flip"]], "inner": [[546, "inner"]], "pinv": [[555, "pinv"]], "sparse_cross_entropy": [[570, "sparse-cross-entropy"]], "concat": [[572, "concat"]], "permute_dims": [[576, "permute-dims"]], "index_nest": [[593, "index-nest"]], "svdvals": [[560, "svdvals"]], "# Instance Method Examples": [[560, "instance-method-examples"], [511, "instance-method-examples"]], "unstack": [[585, "unstack"]], "maml_step": [[588, "maml-step"]], "swapaxes": [[583, "swapaxes"]], "cross_entropy": [[569, "cross-entropy"]], "slogdet": [[557, "slogdet"]], "svd": [[559, "svd"]], "solve": [[558, "solve"]], "repeat": [[577, "repeat"]], "eig": [[543, "eig"], [347, "eig"]], "reptile_step": [[589, "reptile-step"]], "copy_nest": [[591, "copy-nest"]], "diag": [[541, "diag"]], "outer": [[554, "outer"]], "duplicate_array_index_chains": [[592, "duplicate-array-index-chains"]], "vecdot": [[565, "vecdot"]], "multi_index_nest": [[599, "multi-index-nest"]], "insert_into_nest_at_indices": [[595, "insert-into-nest-at-indices"]], "reshape": [[578, "reshape"]], "roll": [[579, "roll"]], "all_nested_indices": [[590, "all-nested-indices"]], "vector_to_skew_symmetric_matrix": [[567, "vector-to-skew-symmetric-matrix"]], "matrix_norm": [[550, "matrix-norm"]], "eigvalsh": [[545, "eigvalsh"]], "squeeze": [[581, "squeeze"]], "clip": [[571, "clip"]], "tile": [[584, "tile"]], "diagonal": [[542, "diagonal"]], "qr": [[556, "qr"]], "trace": [[563, "trace"]], "lu_factor": [[548, "lu-factor"]], "stack": [[582, "stack"]], "expand_dims": [[574, "expand-dims"]], "map_nest_at_indices": [[598, "map-nest-at-indices"]], "matrix_transpose": [[553, "matrix-transpose"]], "split": [[580, "split"]], "map": [[596, "map"]], "map_nest_at_index": [[597, "map-nest-at-index"]], "insert_into_nest_at_index": [[594, "insert-into-nest-at-index"]], "matrix_rank": [[552, "matrix-rank"]], "fomaml_step": [[587, "fomaml-step"]], "eigh": [[544, "eigh"]], "vander": [[564, "vander"]], "vector_norm": [[566, "vector-norm"]], "matmul": [[549, "matmul"]], "det": [[540, "det"]], "tensorsolve": [[562, "tensorsolve"]], "inv": [[547, "inv"]], "matrix_power": [[551, "matrix-power"]], "conv3d_transpose": [[529, "conv3d-transpose"]], "conv2d": [[526, "conv2d"]], "Statistical": [[521, "statistical"], [22, "module-ivy.data_classes.array.statistical"], [45, "module-ivy.data_classes.container.statistical"], [311, "statistical"]], "vmap": [[488, "vmap"]], "grad": [[492, "grad"]], "Random": [[517, "random"], [41, "module-ivy.data_classes.container.random"], [18, "module-ivy.data_classes.array.random"], [306, "random"]], "conv1d": [[524, "conv1d"]], "Meta": [[514, "meta"], [303, "module-ivy.functional.ivy.experimental.meta"]], "unset_shape_array_mode": [[484, "unset-shape-array-mode"]], "lamb_update": [[495, "lamb-update"]], "Nest": [[515, "nest"], [304, "module-ivy.functional.ivy.experimental.nest"]], "Elementwise": [[506, "elementwise"], [52, "module-ivy.data_classes.nested_array.elementwise"], [8, "module-ivy.data_classes.array.elementwise"], [31, "module-ivy.data_classes.container.elementwise"], [296, "elementwise"]], "unset_queue_timeout": [[483, "unset-queue-timeout"]], "scaled_dot_product_attention": [[537, "scaled-dot-product-attention"]], "unset_show_func_wrapper_trace_mode": [[485, "unset-show-func-wrapper-trace-mode"]], "cholesky": [[538, "cholesky"]], "Utility": [[522, "utility"], [23, "module-ivy.data_classes.array.utility"], [46, "module-ivy.data_classes.container.utility"], [312, "module-ivy.functional.ivy.experimental.utility"]], "conv1d_transpose": [[525, "conv1d-transpose"]], "conv3d": [[528, "conv3d"]], "gradient_descent_update": [[493, "gradient-descent-update"]], "Constants": [[501, "module-ivy.functional.ivy.constants"], [292, "module-ivy.functional.ivy.experimental.constants"]], "Searching": [[518, "searching"], [19, "module-ivy.data_classes.array.searching"], [42, "module-ivy.data_classes.container.searching"], [307, "searching"]], "Sorting": [[520, "sorting"], [44, "module-ivy.data_classes.container.sorting"], [21, "module-ivy.data_classes.array.sorting"], [309, "sorting"]], "unset_tmp_dir": [[486, "unset-tmp-dir"]], "multi_head_attention": [[536, "multi-head-attention"]], "depthwise_conv2d": [[532, "depthwise-conv2d"]], "dropout": [[533, "dropout"]], "conv_general_transpose": [[531, "conv-general-transpose"]], "Set": [[519, "set"], [43, "module-ivy.data_classes.container.set"], [20, "module-ivy.data_classes.array.set"], [308, "module-ivy.functional.ivy.experimental.set"]], "adam_update": [[490, "adam-update"]], "unset_min_denominator": [[480, "unset-min-denominator"]], "Manipulation": [[513, "manipulation"], [39, "module-ivy.data_classes.container.manipulation"], [16, "module-ivy.data_classes.array.manipulation"], [302, "manipulation"]], "Creation": [[503, "creation"], [5, "module-ivy.data_classes.array.creation"], [28, "module-ivy.data_classes.container.creation"], [293, "creation"]], "lstm_update": [[535, "lstm-update"]], "stop_gradient": [[498, "stop-gradient"]], "Linear algebra": [[511, "linear-algebra"], [37, "module-ivy.data_classes.container.linear_algebra"], [14, "module-ivy.data_classes.array.linear_algebra"], [300, "linear-algebra"]], "value_is_nan": [[487, "value-is-nan"]], "execute_with_gradients": [[491, "execute-with-gradients"]], "unset_nestable_mode": [[481, "unset-nestable-mode"]], "value_and_grad": [[499, "value-and-grad"]], "Data type": [[504, "data-type"], [29, "module-ivy.data_classes.container.data_type"], [6, "module-ivy.data_classes.array.data_type"], [294, "module-ivy.functional.ivy.experimental.data_type"]], "Device": [[505, "device"], [7, "module-ivy.data_classes.array.device"], [30, "module-ivy.data_classes.container.device"], [295, "module-ivy.functional.ivy.experimental.device"]], "Parameter": [[505, "parameter"], [508, "parameter"], [508, "id1"], [508, "id2"], [508, "id3"], [508, "id4"], [508, "id5"], [461, "parameter"], [463, "parameter"], [455, "parameter"], [456, "parameter"], [464, "parameter"], [460, "parameter"], [159, "parameter"]], "conv": [[523, "conv"]], "unset_precise_mode": [[482, "unset-precise-mode"]], "Control flow ops": [[502, "control-flow-ops"]], "Experimental": [[507, "experimental"], [9, "module-ivy.data_classes.array.experimental"], [32, "module-ivy.data_classes.container.experimental"]], "optimizer_update": [[497, "optimizer-update"]], "conv_general_dilated": [[530, "conv-general-dilated"]], "conv2d_transpose": [[527, "conv2d-transpose"]], "adam_step": [[489, "adam-step"]], "General": [[508, "general"], [33, "module-ivy.data_classes.container.general"], [10, "module-ivy.data_classes.array.general"], [297, "general"]], "lars_update": [[496, "lars-update"]], "linear": [[534, "linear"]], "jac": [[494, "jac"]], "cross": [[539, "cross"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Sharp bits": [[2, "sharp-bits"], [0, "sharp-bits"]], "leaky_relu": [[57, "leaky-relu"]], "Wrapping": [[47, "module-ivy.data_classes.container.wrapping"], [24, "module-ivy.data_classes.array.wrapping"]], "Base": [[51, "module-ivy.data_classes.nested_array.base"], [26, "module-ivy.data_classes.container.base"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Data classes": [[53, "data-classes"]], "Container": [[49, "container"]], "Image": [[35, "module-ivy.data_classes.container.image"], [12, "module-ivy.data_classes.array.image"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "gelu": [[55, "gelu"]], "Conversions": [[27, "module-ivy.data_classes.container.conversions"], [4, "module-ivy.data_classes.array.conversions"]], "mish": [[59, "mish"]], "Functions": [[54, "functions"]], "Array": [[48, "array"]], "Nested array": [[50, "nested-array"]], "log_softmax": [[58, "log-softmax"]], "hardswish": [[56, "hardswish"]], "try_else_none": [[476, "try-else-none"]], "unset_min_base": [[479, "unset-min-base"]], "inplace_update": [[439, "inplace-update"]], "inplace_decrement": [[437, "inplace-decrement"]], "set_item": [[457, "set-item"]], "isscalar": [[447, "isscalar"]], "isin": [[446, "isin"]], "set_queue_timeout": [[462, "set-queue-timeout"]], "set_precise_mode": [[461, "set-precise-mode"]], "inplace_increment": [[438, "inplace-increment"]], "einops_repeat": [[424, "einops-repeat"]], "function_supported_devices_and_dtypes": [[427, "function-supported-devices-and-dtypes"]], "print_all_arrays_in_memory": [[452, "print-all-arrays-in-memory"]], "unset_exception_trace_mode": [[478, "unset-exception-trace-mode"]], "stable_divide": [[467, "stable-divide"]], "set_shape_array_mode": [[463, "set-shape-array-mode"]], "supports_inplace_updates": [[470, "supports-inplace-updates"]], "einops_rearrange": [[422, "einops-rearrange"]], "current_backend_str": [[420, "current-backend-str"]], "set_min_base": [[458, "set-min-base"]], "stable_pow": [[468, "stable-pow"]], "set_tmp_dir": [[465, "set-tmp-dir"]], "einops_reduce": [[423, "einops-reduce"]], "to_scalar": [[475, "to-scalar"]], "unset_array_mode": [[477, "unset-array-mode"]], "has_nans": [[435, "has-nans"]], "multiprocessing": [[450, "multiprocessing"]], "scatter_nd": [[454, "scatter-nd"]], "num_arrays_in_memory": [[451, "num-arrays-in-memory"]], "get_num_dims": [[433, "get-num-dims"]], "is_ivy_container": [[443, "is-ivy-container"]], "scatter_flat": [[453, "scatter-flat"]], "set_array_mode": [[455, "set-array-mode"]], "get_item": [[432, "get-item"]], "is_ivy_nested_array": [[444, "is-ivy-nested-array"]], "to_ivy_shape": [[471, "to-ivy-shape"]], "to_numpy": [[474, "to-numpy"]], "inplace_variables_supported": [[440, "inplace-variables-supported"]], "is_ivy_array": [[442, "is-ivy-array"]], "inplace_arrays_supported": [[436, "inplace-arrays-supported"]], "default": [[421, "default"]], "to_list": [[472, "to-list"]], "shape": [[466, "shape"]], "get_referrers_recursive": [[434, "get-referrers-recursive"]], "set_exception_trace_mode": [[456, "set-exception-trace-mode"]], "function_unsupported_devices_and_dtypes": [[428, "function-unsupported-devices-and-dtypes"]], "is_native_array": [[445, "is-native-array"]], "exists": [[425, "exists"]], "get_all_arrays_in_memory": [[431, "get-all-arrays-in-memory"]], "is_array": [[441, "is-array"]], "fourier_encode": [[426, "fourier-encode"]], "match_kwargs": [[449, "match-kwargs"]], "gather_nd": [[430, "gather-nd"]], "itemsize": [[448, "itemsize"]], "set_show_func_wrapper_trace_mode": [[464, "set-show-func-wrapper-trace-mode"]], "gather": [[429, "gather"]], "set_min_denominator": [[459, "set-min-denominator"]], "set_nestable_mode": [[460, "set-nestable-mode"]], "strides": [[469, "strides"]], "to_native_shape": [[473, "to-native-shape"]], "hstack": [[370, "hstack"]], "beta": [[388, "beta"]], "bernoulli": [[387, "bernoulli"]], "i0": [[371, "i0"]], "concat_from_sequence": [[360, "concat-from-sequence"]], "assert_supports_inplace": [[415, "assert-supports-inplace"]], "expand": [[363, "expand"]], "clip_vector_norm": [[418, "clip-vector-norm"]], "l2_normalize": [[385, "l2-normalize"]], "batch_norm": [[381, "batch-norm"]], "l1_normalize": [[384, "l1-normalize"]], "unique_consecutive": [[378, "unique-consecutive"]], "dirichlet": [[389, "dirichlet"]], "median": [[406, "median"]], "quantile": [[410, "quantile"]], "cummax": [[402, "cummax"]], "nanquantile": [[409, "nanquantile"]], "vsplit": [[379, "vsplit"]], "is_ivy_sparse_array": [[395, "is-ivy-sparse-array"]], "lexsort": [[394, "lexsort"]], "clip_matrix_norm": [[417, "clip-matrix-norm"]], "bincount": [[399, "bincount"]], "arg_info": [[412, "arg-info"]], "histogram": [[404, "histogram"]], "moveaxis": [[372, "moveaxis"]], "unravel_index": [[392, "unravel-index"]], "nanmean": [[407, "nanmean"]], "igamma": [[405, "igamma"]], "container_types": [[419, "container-types"]], "native_sparse_array": [[397, "native-sparse-array"]], "cache_fn": [[416, "cache-fn"]], "instance_norm": [[383, "instance-norm"]], "arg_names": [[413, "arg-names"]], "dsplit": [[361, "dsplit"]], "rot90": [[375, "rot90"]], "dstack": [[362, "dstack"]], "fliplr": [[366, "fliplr"]], "pad": [[373, "pad"]], "is_native_sparse_array": [[396, "is-native-sparse-array"]], "put_along_axis": [[374, "put-along-axis"]], "array_equal": [[414, "array-equal"]], "take_along_axis": [[376, "take-along-axis"]], "invert_permutation": [[393, "invert-permutation"]], "fill_diagonal": [[364, "fill-diagonal"]], "nanmedian": [[408, "nanmedian"]], "lp_normalize": [[386, "lp-normalize"]], "corrcoef": [[400, "corrcoef"]], "top_k": [[377, "top-k"]], "gamma": [[390, "gamma"]], "cummin": [[403, "cummin"]], "all_equal": [[411, "all-equal"]], "heaviside": [[368, "heaviside"]], "poisson": [[391, "poisson"]], "vstack": [[380, "vstack"]], "native_sparse_array_to_indices_values_and_shape": [[398, "native-sparse-array-to-indices-values-and-shape"]], "flipud": [[367, "flipud"]], "cov": [[401, "cov"]], "hsplit": [[369, "hsplit"]], "group_norm": [[382, "group-norm"]], "flatten": [[365, "flatten"]], "pool": [[340, "pool"]], "dft": [[321, "dft"]], "max_pool3d": [[337, "max-pool3d"]], "interpolate": [[334, "interpolate"]], "dot": [[346, "dot"]], "Parameters:": [[346, "parameters"], [300, "parameters"]], "Returns:": [[346, "returns"], [300, "returns"]], "log_poisson_loss": [[353, "log-poisson-loss"]], "adaptive_avg_pool1d": [[313, "adaptive-avg-pool1d"]], "fft": [[326, "fft"]], "broadcast_shapes": [[359, "broadcast-shapes"]], "kron": [[350, "kron"]], "fft2": [[327, "fft2"]], "idct": [[330, "idct"]], "adaptive_avg_pool2d": [[314, "adaptive-avg-pool2d"]], "avg_pool2d": [[318, "avg-pool2d"]], "associative_scan": [[355, "associative-scan"]], "atleast_1d": [[356, "atleast-1d"]], "matrix_exp": [[351, "matrix-exp"]], "ifftn": [[332, "ifftn"]], "dropout1d": [[322, "dropout1d"]], "area_interpolate": [[316, "area-interpolate"]], "ifft": [[331, "ifft"]], "dropout2d": [[323, "dropout2d"]], "reduce_window": [[341, "reduce-window"]], "adaptive_max_pool2d": [[315, "adaptive-max-pool2d"]], "as_strided": [[354, "as-strided"]], "max_pool2d": [[336, "max-pool2d"]], "adjoint": [[343, "adjoint"]], "max_unpool1d": [[338, "max-unpool1d"]], "embedding": [[325, "embedding"]], "generate_einsum_equation": [[328, "generate-einsum-equation"]], "max_pool1d": [[335, "max-pool1d"]], "diagflat": [[345, "diagflat"]], "atleast_2d": [[357, "atleast-2d"]], "eigvals": [[349, "eigvals"]], "atleast_3d": [[358, "atleast-3d"]], "multi_dot": [[352, "multi-dot"]], "nearest_interpolate": [[339, "nearest-interpolate"]], "Sparse array": [[310, "sparse-array"]], "rfftn": [[342, "rfftn"]], "eigh_tridiagonal": [[348, "eigh-tridiagonal"]], "dct": [[320, "dct"]], "avg_pool3d": [[319, "avg-pool3d"]], "get_interpolate_kernel": [[329, "get-interpolate-kernel"]], "interp": [[333, "interp"]], "avg_pool1d": [[317, "avg-pool1d"]], "cond": [[344, "cond"]], "dropout3d": [[324, "dropout3d"]], "fix": [[272, "fix"]], "modf": [[282, "modf"]], "trunc_divide": [[243, "trunc-divide"]], "logsigmoid": [[246, "logsigmoid"]], "count_nonzero": [[269, "count-nonzero"]], "hypot": [[277, "hypot"]], "unsorted_segment_sum": [[263, "unsorted-segment-sum"]], "allclose": [[265, "allclose"]], "copysign": [[268, "copysign"]], "ldexp": [[279, "ldexp"]], "hamming_window": [[254, "hamming-window"]], "tanh": [[240, "tanh"]], "unsorted_segment_min": [[262, "unsorted-segment-min"]], "kaiser_window": [[258, "kaiser-window"]], "nextafter": [[284, "nextafter"]], "bind_custom_gradient_function": [[290, "bind-custom-gradient-function"]], "diff": [[270, "diff"]], "elu": [[244, "elu"]], "trapz": [[241, "trapz"]], "relu6": [[248, "relu6"]], "indices": [[256, "indices"]], "digamma": [[271, "digamma"]], "fmax": [[274, "fmax"]], "conj": [[267, "conj"]], "signbit": [[285, "signbit"]], "ndenumerate": [[259, "ndenumerate"]], "reduce": [[289, "reduce"]], "lgamma": [[281, "lgamma"]], "logit": [[245, "logit"]], "ndindex": [[260, "ndindex"]], "silu": [[251, "silu"]], "selu": [[249, "selu"]], "trunc": [[242, "trunc"]], "gradient": [[276, "gradient"]], "sinc": [[286, "sinc"]], "zeta": [[288, "zeta"]], "prelu": [[247, "prelu"]], "tril_indices": [[261, "tril-indices"]], "thresholded_relu": [[252, "thresholded-relu"]], "eye_like": [[253, "eye-like"]], "binarizer": [[266, "binarizer"]], "lerp": [[280, "lerp"]], "isclose": [[278, "isclose"]], "xlogy": [[287, "xlogy"]], "sequence_length": [[250, "sequence-length"]], "kaiser_bessel_derived_window": [[257, "kaiser-bessel-derived-window"]], "frexp": [[275, "frexp"]], "vorbis_window": [[264, "vorbis-window"]], "nansum": [[283, "nansum"]], "hann_window": [[255, "hann-window"]], "float_power": [[273, "float-power"]], "log": [[210, "log"]], "log1p": [[212, "log1p"]], "bitwise_or": [[182, "bitwise-or"]], "equal": [[190, "equal"]], "rad2deg": [[228, "rad2deg"]], "logaddexp2": [[215, "logaddexp2"]], "log10": [[211, "log10"]], "sqrt": [[236, "sqrt"]], "sign": [[233, "sign"]], "exp2": [[193, "exp2"]], "isinf": [[204, "isinf"]], "ceil": [[185, "ceil"]], "exp": [[192, "exp"]], "erf": [[191, "erf"]], "round": [[232, "round"]], "not_equal": [[225, "not-equal"]], "less_equal": [[209, "less-equal"]], "nan_to_num": [[223, "nan-to-num"]], "log2": [[213, "log2"]], "cosh": [[187, "cosh"]], "sin": [[234, "sin"]], "logical_xor": [[219, "logical-xor"]], "positive": [[226, "positive"]], "reciprocal": [[230, "reciprocal"]], "square": [[237, "square"]], "minimum": [[221, "minimum"]], "isreal": [[206, "isreal"]], "expm1": [[194, "expm1"]], "floor": [[195, "floor"]], "greater_equal": [[201, "greater-equal"]], "subtract": [[238, "subtract"]], "lcm": [[207, "lcm"]], "imag": [[202, "imag"]], "pow": [[227, "pow"]], "bitwise_xor": [[184, "bitwise-xor"]], "logaddexp": [[214, "logaddexp"]], "logical_not": [[217, "logical-not"]], "tan": [[239, "tan"]], "bitwise_left_shift": [[181, "bitwise-left-shift"]], "real": [[229, "real"]], "cos": [[186, "cos"]], "remainder": [[231, "remainder"]], "bitwise_invert": [[180, "bitwise-invert"]], "isfinite": [[203, "isfinite"]], "fmin": [[197, "fmin"]], "gcd": [[199, "gcd"]], "logical_and": [[216, "logical-and"]], "deg2rad": [[188, "deg2rad"]], "multiply": [[222, "multiply"]], "isnan": [[205, "isnan"]], "logical_or": [[218, "logical-or"]], "floor_divide": [[196, "floor-divide"]], "maximum": [[220, "maximum"]], "sinh": [[235, "sinh"]], "divide": [[189, "divide"]], "bitwise_right_shift": [[183, "bitwise-right-shift"]], "greater": [[200, "greater"]], "negative": [[224, "negative"]], "fmod": [[198, "fmod"]], "less": [[208, "less"]], "set_default_complex_dtype": [[130, "set-default-complex-dtype"]], "as_ivy_dev": [[142, "as-ivy-dev"]], "function_supported_devices": [[148, "function-supported-devices"]], "set_soft_device_mode": [[159, "set-soft-device-mode"]], "promote_types_of_inputs": [[128, "promote-types-of-inputs"]], "unset_default_int_dtype": [[139, "unset-default-int-dtype"]], "atan2": [[177, "atan2"]], "is_float_dtype": [[122, "is-float-dtype"]], "dev_util": [[147, "dev-util"]], "num_cpu_cores": [[153, "num-cpu-cores"]], "clear_cached_mem_on_dev": [[144, "clear-cached-mem-on-dev"]], "acosh": [[171, "acosh"]], "split_func_call": [[162, "split-func-call"]], "is_bool_dtype": [[120, "is-bool-dtype"]], "set_default_int_dtype": [[133, "set-default-int-dtype"]], "total_mem_on_dev": [[164, "total-mem-on-dev"]], "is_complex_dtype": [[121, "is-complex-dtype"]], "num_gpus": [[154, "num-gpus"]], "used_mem_on_dev": [[168, "used-mem-on-dev"]], "unset_default_complex_dtype": [[136, "unset-default-complex-dtype"]], "acos": [[170, "acos"]], "is_hashable_dtype": [[123, "is-hashable-dtype"]], "unset_default_uint_dtype": [[140, "unset-default-uint-dtype"]], "result_type": [[129, "result-type"]], "is_uint_dtype": [[126, "is-uint-dtype"]], "atan": [[176, "atan"]], "atanh": [[178, "atanh"]], "print_all_ivy_arrays_on_dev": [[157, "print-all-ivy-arrays-on-dev"]], "set_default_dtype": [[131, "set-default-dtype"]], "get_all_ivy_arrays_on_dev": [[150, "get-all-ivy-arrays-on-dev"]], "add": [[172, "add"]], "is_native_dtype": [[125, "is-native-dtype"]], "abs": [[169, "abs"]], "angle": [[173, "angle"]], "unset_soft_device_mode": [[167, "unset-soft-device-mode"]], "type_promote_arrays": [[135, "type-promote-arrays"]], "bitwise_and": [[179, "bitwise-and"]], "promote_types": [[127, "promote-types"]], "gpu_is_available": [[151, "gpu-is-available"]], "set_default_device": [[158, "set-default-device"]], "set_default_uint_dtype": [[134, "set-default-uint-dtype"]], "function_unsupported_devices": [[149, "function-unsupported-devices"]], "to_device": [[163, "to-device"]], "unset_default_dtype": [[137, "unset-default-dtype"]], "as_native_dev": [[143, "as-native-dev"]], "num_ivy_arrays_on_dev": [[155, "num-ivy-arrays-on-dev"]], "handle_soft_device_variable": [[152, "handle-soft-device-variable"]], "asinh": [[175, "asinh"]], "is_int_dtype": [[124, "is-int-dtype"]], "valid_dtype": [[141, "valid-dtype"]], "dev": [[146, "dev"]], "set_split_factor": [[160, "set-split-factor"]], "set_default_float_dtype": [[132, "set-default-float-dtype"]], "percent_used_mem_on_dev": [[156, "percent-used-mem-on-dev"]], "asin": [[174, "asin"]], "split_factor": [[161, "split-factor"]], "default_device": [[145, "default-device"]], "unset_default_device": [[166, "unset-default-device"]], "unset_default_float_dtype": [[138, "unset-default-float-dtype"]], "tpu_is_available": [[165, "tpu-is-available"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[3, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[3, "module-ivy.data_classes.array.activations"], [4, "module-ivy.data_classes.array.conversions"], [5, "module-ivy.data_classes.array.creation"], [6, "module-ivy.data_classes.array.data_type"], [7, "module-ivy.data_classes.array.device"], [8, "module-ivy.data_classes.array.elementwise"], [9, "module-ivy.data_classes.array.experimental"], [9, "module-ivy.data_classes.array.experimental.activations"], [9, "module-ivy.data_classes.array.experimental.conversions"], [9, "module-ivy.data_classes.array.experimental.creation"], [9, "module-ivy.data_classes.array.experimental.data_type"], [9, "module-ivy.data_classes.array.experimental.device"], [9, "module-ivy.data_classes.array.experimental.elementwise"], [9, "module-ivy.data_classes.array.experimental.general"], [9, "module-ivy.data_classes.array.experimental.gradients"], [9, "module-ivy.data_classes.array.experimental.image"], [9, "module-ivy.data_classes.array.experimental.layers"], [9, "module-ivy.data_classes.array.experimental.linear_algebra"], [9, "module-ivy.data_classes.array.experimental.losses"], [9, "module-ivy.data_classes.array.experimental.manipulation"], [9, "module-ivy.data_classes.array.experimental.norms"], [9, "module-ivy.data_classes.array.experimental.random"], [9, "module-ivy.data_classes.array.experimental.searching"], [9, "module-ivy.data_classes.array.experimental.set"], [9, "module-ivy.data_classes.array.experimental.sorting"], [9, "module-ivy.data_classes.array.experimental.statistical"], [9, "module-ivy.data_classes.array.experimental.utility"], [10, "module-ivy.data_classes.array.general"], [11, "module-ivy.data_classes.array.gradients"], [12, "module-ivy.data_classes.array.image"], [13, "module-ivy.data_classes.array.layers"], [14, "module-ivy.data_classes.array.linear_algebra"], [15, "module-ivy.data_classes.array.losses"], [16, "module-ivy.data_classes.array.manipulation"], [17, "module-ivy.data_classes.array.norms"], [18, "module-ivy.data_classes.array.random"], [19, "module-ivy.data_classes.array.searching"], [20, "module-ivy.data_classes.array.set"], [21, "module-ivy.data_classes.array.sorting"], [22, "module-ivy.data_classes.array.statistical"], [23, "module-ivy.data_classes.array.utility"], [24, "module-ivy.data_classes.array.wrapping"], [25, "module-ivy.data_classes.container.activations"], [26, "module-ivy.data_classes.container.base"], [27, "module-ivy.data_classes.container.conversions"], [28, "module-ivy.data_classes.container.creation"], [29, "module-ivy.data_classes.container.data_type"], [30, "module-ivy.data_classes.container.device"], [31, "module-ivy.data_classes.container.elementwise"], [32, "module-ivy.data_classes.container.experimental"], [32, "module-ivy.data_classes.container.experimental.activations"], [32, "module-ivy.data_classes.container.experimental.conversions"], [32, "module-ivy.data_classes.container.experimental.creation"], [32, "module-ivy.data_classes.container.experimental.data_type"], [32, "module-ivy.data_classes.container.experimental.device"], [32, "module-ivy.data_classes.container.experimental.elementwise"], [32, "module-ivy.data_classes.container.experimental.general"], [32, "module-ivy.data_classes.container.experimental.gradients"], [32, "module-ivy.data_classes.container.experimental.image"], [32, "module-ivy.data_classes.container.experimental.layers"], [32, "module-ivy.data_classes.container.experimental.linear_algebra"], [32, "module-ivy.data_classes.container.experimental.losses"], [32, "module-ivy.data_classes.container.experimental.manipulation"], [32, "module-ivy.data_classes.container.experimental.norms"], [32, "module-ivy.data_classes.container.experimental.random"], [32, "module-ivy.data_classes.container.experimental.searching"], [32, "module-ivy.data_classes.container.experimental.set"], [32, "module-ivy.data_classes.container.experimental.sorting"], [32, "module-ivy.data_classes.container.experimental.statistical"], [32, "module-ivy.data_classes.container.experimental.utility"], [33, "module-ivy.data_classes.container.general"], [34, "module-ivy.data_classes.container.gradients"], [35, "module-ivy.data_classes.container.image"], [36, "module-ivy.data_classes.container.layers"], [37, "module-ivy.data_classes.container.linear_algebra"], [38, "module-ivy.data_classes.container.losses"], [39, "module-ivy.data_classes.container.manipulation"], [40, "module-ivy.data_classes.container.norms"], [41, "module-ivy.data_classes.container.random"], [42, "module-ivy.data_classes.container.searching"], [43, "module-ivy.data_classes.container.set"], [44, "module-ivy.data_classes.container.sorting"], [45, "module-ivy.data_classes.container.statistical"], [46, "module-ivy.data_classes.container.utility"], [47, "module-ivy.data_classes.container.wrapping"], [48, "module-ivy.data_classes.array.array"], [49, "module-ivy.data_classes.container.container"], [50, "module-ivy.data_classes.nested_array.nested_array"], [51, "module-ivy.data_classes.nested_array.base"], [52, "module-ivy.data_classes.nested_array.elementwise"], [291, "module-ivy.functional.ivy.experimental.activations"], [292, "module-ivy.functional.ivy.experimental.constants"], [293, "module-ivy.functional.ivy.experimental.creation"], [294, "module-ivy.functional.ivy.experimental.data_type"], [295, "module-ivy.functional.ivy.experimental.device"], [296, "module-ivy.functional.ivy.experimental.elementwise"], [297, "module-ivy.functional.ivy.experimental.general"], [298, "module-ivy.functional.ivy.experimental.gradients"], [299, "module-ivy.functional.ivy.experimental.layers"], [300, "module-ivy.functional.ivy.experimental.linear_algebra"], [301, "module-ivy.functional.ivy.experimental.losses"], [302, "module-ivy.functional.ivy.experimental.manipulation"], [303, "module-ivy.functional.ivy.experimental.meta"], [304, "module-ivy.functional.ivy.experimental.nest"], [305, "module-ivy.functional.ivy.experimental.norms"], [306, "module-ivy.functional.ivy.experimental.random"], [307, "module-ivy.functional.ivy.experimental.searching"], [308, "module-ivy.functional.ivy.experimental.set"], [309, "module-ivy.functional.ivy.experimental.sorting"], [310, "module-ivy.functional.ivy.experimental.sparse_array"], [311, "module-ivy.functional.ivy.experimental.statistical"], [312, "module-ivy.functional.ivy.experimental.utility"], [500, "module-ivy.functional.ivy.activations"], [501, "module-ivy.functional.ivy.constants"], [502, "module-ivy.functional.ivy.control_flow_ops"], [503, "module-ivy.functional.ivy.creation"], [504, "module-ivy.functional.ivy.data_type"], [505, "module-ivy.functional.ivy.device"], [506, "module-ivy.functional.ivy.elementwise"], [507, "module-ivy.functional.ivy.experimental"], [508, "module-ivy.functional.ivy.general"], [509, "module-ivy.functional.ivy.gradients"], [510, "module-ivy.functional.ivy.layers"], [511, "module-ivy.functional.ivy.linear_algebra"], [512, "module-ivy.functional.ivy.losses"], [513, "module-ivy.functional.ivy.manipulation"], [514, "module-ivy.functional.ivy.meta"], [515, "module-ivy.functional.ivy.nest"], [516, "module-ivy.functional.ivy.norms"], [517, "module-ivy.functional.ivy.random"], [518, "module-ivy.functional.ivy.searching"], [519, "module-ivy.functional.ivy.set"], [520, "module-ivy.functional.ivy.sorting"], [521, "module-ivy.functional.ivy.statistical"], [522, "module-ivy.functional.ivy.utility"], [642, "module-ivy_tests.test_ivy.helpers.assertions"], [643, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [644, "module-ivy_tests.test_ivy.helpers.function_testing"], [645, "module-ivy_tests.test_ivy.helpers.globals"], [646, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [647, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [648, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [649, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [650, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [651, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [652, "module-ivy_tests.test_ivy.helpers.structs"], [653, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [654, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [658, "module-ivy.stateful.activations"], [659, "module-ivy.stateful.converters"], [660, "module-ivy.stateful.helpers"], [661, "module-ivy.stateful.initializers"], [662, "module-ivy.stateful.layers"], [663, "module-ivy.stateful.losses"], [664, "module-ivy.stateful.module"], [665, "module-ivy.stateful.norms"], [666, "module-ivy.stateful.optimizers"], [667, "module-ivy.stateful.sequential"], [668, "module-ivy.utils.assertions"], [669, "module-ivy.utils.backend"], [670, "module-ivy.utils.backend.ast_helpers"], [671, "module-ivy.utils.backend.handler"], [672, "module-ivy.utils.backend.sub_backend_handler"], [673, "module-ivy.utils.dynamic_import"], [674, "module-ivy.utils.einsum_parser"], [675, "module-ivy.utils.exceptions"], [676, "module-ivy.utils.inspection"], [677, "module-ivy.utils.logging"], [678, "module-ivy.utils.profiler"], [679, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[4, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[5, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[6, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[7, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[7, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[7, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[8, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[9, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[9, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[9, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[9, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[9, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[9, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[9, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[9, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[9, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[9, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[9, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[9, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[9, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[9, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[9, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[9, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[9, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[9, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[9, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[9, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[10, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[11, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[12, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[12, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[12, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[13, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[14, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[15, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[16, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[17, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[18, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[18, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[18, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[19, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[20, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[20, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[20, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[21, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[22, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[23, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[24, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[25, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[26, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[26, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[27, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[28, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[29, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[30, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[30, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[31, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[32, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[32, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[32, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[32, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[32, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[32, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[32, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[32, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[32, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[32, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[32, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[32, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[32, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[32, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[32, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[32, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[32, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[32, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[32, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[32, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[33, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[34, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[35, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[35, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[35, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[36, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[37, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[38, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[39, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[40, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[41, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[41, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[42, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[43, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[43, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[43, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[44, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[45, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[46, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[47, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[48, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[48, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[49, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[49, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[50, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[51, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[52, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[55, "ivy.gelu"], [500, "ivy.gelu"]], "gelu() (ivy.array method)": [[55, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[55, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[56, "ivy.hardswish"], [500, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[56, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[56, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[57, "ivy.leaky_relu"], [500, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[57, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[57, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[58, "ivy.log_softmax"], [500, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[58, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[58, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[59, "ivy.mish"], [500, "ivy.mish"]], "mish() (ivy.array method)": [[59, "ivy.Array.mish"]], "mish() (ivy.container method)": [[59, "ivy.Container.mish"]], "relu() (in module ivy)": [[60, "ivy.relu"], [500, "ivy.relu"]], "relu() (ivy.array method)": [[60, "ivy.Array.relu"]], "relu() (ivy.container method)": [[60, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[61, "ivy.sigmoid"], [500, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[61, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[61, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[62, "ivy.softmax"], [500, "ivy.softmax"]], "softmax() (ivy.array method)": [[62, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[62, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[63, "ivy.softplus"], [500, "ivy.softplus"]], "softplus() (ivy.array method)": [[63, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[63, "ivy.Container.softplus"]], "cast_bool() (in module ivy)": [[64, "ivy.cast_bool"], [502, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[65, "ivy.cmp_is"], [502, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[66, "ivy.cmp_isnot"], [502, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[67, "ivy.for_loop"], [502, "ivy.for_loop"]], "if_else() (in module ivy)": [[68, "ivy.if_else"], [502, "ivy.if_else"]], "try_except() (in module ivy)": [[69, "ivy.try_except"], [502, "ivy.try_except"]], "while_loop() (in module ivy)": [[70, "ivy.while_loop"], [502, "ivy.while_loop"]], "arange() (in module ivy)": [[71, "ivy.arange"], [503, "ivy.arange"]], "array() (in module ivy)": [[72, "ivy.array"], [503, "ivy.array"]], "asarray() (in module ivy)": [[73, "ivy.asarray"], [503, "ivy.asarray"]], "asarray() (ivy.array method)": [[73, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[73, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[74, "ivy.asarray_handle_nestable"], [503, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[75, "ivy.asarray_infer_device"], [503, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[76, "ivy.asarray_infer_dtype"], [503, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[77, "ivy.asarray_inputs_to_native_shapes"], [503, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[78, "ivy.asarray_to_native_arrays_and_back"], [503, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[79, "ivy.copy_array"], [503, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[79, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[79, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[80, "ivy.empty"], [503, "ivy.empty"]], "empty_like() (in module ivy)": [[81, "ivy.empty_like"], [503, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[81, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[81, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[82, "ivy.eye"], [503, "ivy.eye"]], "from_dlpack() (in module ivy)": [[83, "ivy.from_dlpack"], [503, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[83, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[83, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[84, "ivy.frombuffer"], [503, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[84, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[85, "ivy.full"], [503, "ivy.full"]], "full_like() (in module ivy)": [[86, "ivy.full_like"], [503, "ivy.full_like"]], "full_like() (ivy.array method)": [[86, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[86, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[87, "ivy.linspace"], [503, "ivy.linspace"]], "linspace() (ivy.array method)": [[87, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[87, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[88, "ivy.logspace"], [503, "ivy.logspace"]], "logspace() (ivy.array method)": [[88, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[88, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[89, "ivy.meshgrid"], [503, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[89, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[89, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[90, "ivy.native_array"], [503, "ivy.native_array"]], "native_array() (ivy.array method)": [[90, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[90, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[91, "ivy.one_hot"], [503, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[91, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[91, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[92, "ivy.ones"], [503, "ivy.ones"]], "ones_like() (in module ivy)": [[93, "ivy.ones_like"], [503, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[93, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[93, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[94, "ivy.tril"], [503, "ivy.tril"]], "tril() (ivy.array method)": [[94, "ivy.Array.tril"]], "tril() (ivy.container method)": [[94, "ivy.Container.tril"]], "triu() (in module ivy)": [[95, "ivy.triu"], [503, "ivy.triu"]], "triu() (ivy.array method)": [[95, "ivy.Array.triu"]], "triu() (ivy.container method)": [[95, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[96, "ivy.triu_indices"], [503, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[96, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[97, "ivy.zeros"], [503, "ivy.zeros"]], "zeros_like() (in module ivy)": [[98, "ivy.zeros_like"], [503, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[98, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[98, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[99, "ivy.as_ivy_dtype"], [504, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[100, "ivy.as_native_dtype"], [504, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[101, "ivy.astype"], [504, "ivy.astype"]], "astype() (ivy.array method)": [[101, "ivy.Array.astype"]], "astype() (ivy.container method)": [[101, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[102, "ivy.broadcast_arrays"], [504, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[102, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[102, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[103, "ivy.broadcast_to"], [504, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[103, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[103, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[104, "ivy.can_cast"], [504, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[104, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[104, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[105, "ivy.check_float"], [504, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[106, "ivy.closest_valid_dtype"], [504, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[107, "ivy.default_complex_dtype"], [504, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[108, "ivy.default_dtype"], [504, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[109, "ivy.default_float_dtype"], [504, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[110, "ivy.default_int_dtype"], [504, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[111, "ivy.default_uint_dtype"], [504, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[112, "ivy.dtype"], [504, "ivy.dtype"]], "dtype() (ivy.array method)": [[112, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[112, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[113, "ivy.dtype_bits"], [504, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[114, "ivy.finfo"], [504, "ivy.finfo"]], "finfo() (ivy.array method)": [[114, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[114, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[115, "ivy.function_supported_dtypes"], [504, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[116, "ivy.function_unsupported_dtypes"], [504, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[117, "ivy.iinfo"], [504, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[117, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[117, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[118, "ivy.infer_default_dtype"], [504, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[119, "ivy.invalid_dtype"], [504, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[120, "ivy.is_bool_dtype"], [504, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[120, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[120, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[121, "ivy.is_complex_dtype"], [504, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[121, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[122, "ivy.is_float_dtype"], [504, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[122, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[122, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[123, "ivy.is_hashable_dtype"], [504, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[124, "ivy.is_int_dtype"], [504, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[124, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[124, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[125, "ivy.is_native_dtype"], [504, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[126, "ivy.is_uint_dtype"], [504, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[126, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[126, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[127, "ivy.promote_types"], [504, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[128, "ivy.promote_types_of_inputs"], [504, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[129, "ivy.result_type"], [504, "ivy.result_type"]], "result_type() (ivy.array method)": [[129, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[129, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[130, "ivy.set_default_complex_dtype"], [504, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[131, "ivy.set_default_dtype"], [504, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[132, "ivy.set_default_float_dtype"], [504, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[133, "ivy.set_default_int_dtype"], [504, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[134, "ivy.set_default_uint_dtype"], [504, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[135, "ivy.type_promote_arrays"], [504, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[136, "ivy.unset_default_complex_dtype"], [504, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[137, "ivy.unset_default_dtype"], [504, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[138, "ivy.unset_default_float_dtype"], [504, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[139, "ivy.unset_default_int_dtype"], [504, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[140, "ivy.unset_default_uint_dtype"], [504, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[141, "ivy.valid_dtype"], [504, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[142, "ivy.as_ivy_dev"], [505, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[143, "ivy.as_native_dev"], [505, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[144, "ivy.clear_cached_mem_on_dev"], [505, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[145, "ivy.default_device"], [505, "ivy.default_device"]], "dev() (in module ivy)": [[146, "ivy.dev"], [505, "ivy.dev"]], "dev() (ivy.array method)": [[146, "ivy.Array.dev"]], "dev() (ivy.container method)": [[146, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[147, "ivy.dev_util"], [505, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[148, "ivy.function_supported_devices"], [505, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[149, "ivy.function_unsupported_devices"], [505, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[150, "ivy.get_all_ivy_arrays_on_dev"], [505, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[151, "ivy.gpu_is_available"], [505, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[152, "ivy.handle_soft_device_variable"], [505, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[153, "ivy.num_cpu_cores"], [505, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[154, "ivy.num_gpus"], [505, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[155, "ivy.num_ivy_arrays_on_dev"], [505, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[156, "ivy.percent_used_mem_on_dev"], [505, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[157, "ivy.print_all_ivy_arrays_on_dev"], [505, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[158, "ivy.set_default_device"], [505, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[159, "ivy.set_soft_device_mode"], [505, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[160, "ivy.set_split_factor"], [505, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[161, "ivy.split_factor"], [505, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[162, "ivy.split_func_call"], [505, "ivy.split_func_call"]], "to_device() (in module ivy)": [[163, "ivy.to_device"], [505, "ivy.to_device"]], "to_device() (ivy.array method)": [[163, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[163, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[164, "ivy.total_mem_on_dev"], [505, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[165, "ivy.tpu_is_available"], [505, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[166, "ivy.unset_default_device"], [505, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[167, "ivy.unset_soft_device_mode"], [505, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[168, "ivy.used_mem_on_dev"], [505, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[169, "ivy.abs"], [506, "ivy.abs"]], "abs() (ivy.array method)": [[169, "ivy.Array.abs"]], "abs() (ivy.container method)": [[169, "ivy.Container.abs"]], "acos() (in module ivy)": [[170, "ivy.acos"], [506, "ivy.acos"]], "acos() (ivy.array method)": [[170, "ivy.Array.acos"]], "acos() (ivy.container method)": [[170, "ivy.Container.acos"]], "acosh() (in module ivy)": [[171, "ivy.acosh"], [506, "ivy.acosh"]], "acosh() (ivy.array method)": [[171, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[171, "ivy.Container.acosh"]], "add() (in module ivy)": [[172, "ivy.add"], [506, "ivy.add"]], "add() (ivy.array method)": [[172, "ivy.Array.add"]], "add() (ivy.container method)": [[172, "ivy.Container.add"]], "angle() (in module ivy)": [[173, "ivy.angle"], [506, "ivy.angle"]], "angle() (ivy.array method)": [[173, "ivy.Array.angle"]], "angle() (ivy.container method)": [[173, "ivy.Container.angle"]], "asin() (in module ivy)": [[174, "ivy.asin"], [506, "ivy.asin"]], "asin() (ivy.array method)": [[174, "ivy.Array.asin"]], "asin() (ivy.container method)": [[174, "ivy.Container.asin"]], "asinh() (in module ivy)": [[175, "ivy.asinh"], [506, "ivy.asinh"]], "asinh() (ivy.array method)": [[175, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[175, "ivy.Container.asinh"]], "atan() (in module ivy)": [[176, "ivy.atan"], [506, "ivy.atan"]], "atan() (ivy.array method)": [[176, "ivy.Array.atan"]], "atan() (ivy.container method)": [[176, "ivy.Container.atan"]], "atan2() (in module ivy)": [[177, "ivy.atan2"], [506, "ivy.atan2"]], "atan2() (ivy.array method)": [[177, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[177, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[178, "ivy.atanh"], [506, "ivy.atanh"]], "atanh() (ivy.array method)": [[178, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[178, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[179, "ivy.bitwise_and"], [506, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[179, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[179, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[180, "ivy.bitwise_invert"], [506, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[180, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[180, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[181, "ivy.bitwise_left_shift"], [506, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[181, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[181, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[182, "ivy.bitwise_or"], [506, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[182, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[182, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[183, "ivy.bitwise_right_shift"], [506, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[183, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[183, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[184, "ivy.bitwise_xor"], [506, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[184, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[184, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[185, "ivy.ceil"], [506, "ivy.ceil"]], "ceil() (ivy.array method)": [[185, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[185, "ivy.Container.ceil"]], "cos() (in module ivy)": [[186, "ivy.cos"], [506, "ivy.cos"]], "cos() (ivy.array method)": [[186, "ivy.Array.cos"]], "cos() (ivy.container method)": [[186, "ivy.Container.cos"]], "cosh() (in module ivy)": [[187, "ivy.cosh"], [506, "ivy.cosh"]], "cosh() (ivy.array method)": [[187, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[187, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[188, "ivy.deg2rad"], [506, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[188, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[188, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[189, "ivy.divide"], [506, "ivy.divide"]], "divide() (ivy.array method)": [[189, "ivy.Array.divide"]], "divide() (ivy.container method)": [[189, "ivy.Container.divide"]], "equal() (in module ivy)": [[190, "ivy.equal"], [506, "ivy.equal"]], "equal() (ivy.array method)": [[190, "ivy.Array.equal"]], "equal() (ivy.container method)": [[190, "ivy.Container.equal"]], "erf() (in module ivy)": [[191, "ivy.erf"], [506, "ivy.erf"]], "erf() (ivy.array method)": [[191, "ivy.Array.erf"]], "erf() (ivy.container method)": [[191, "ivy.Container.erf"]], "exp() (in module ivy)": [[192, "ivy.exp"], [506, "ivy.exp"]], "exp() (ivy.array method)": [[192, "ivy.Array.exp"]], "exp() (ivy.container method)": [[192, "ivy.Container.exp"]], "exp2() (in module ivy)": [[193, "ivy.exp2"], [506, "ivy.exp2"]], "exp2() (ivy.array method)": [[193, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[193, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[194, "ivy.expm1"], [506, "ivy.expm1"]], "expm1() (ivy.array method)": [[194, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[194, "ivy.Container.expm1"]], "floor() (in module ivy)": [[195, "ivy.floor"], [506, "ivy.floor"]], "floor() (ivy.array method)": [[195, "ivy.Array.floor"]], "floor() (ivy.container method)": [[195, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[196, "ivy.floor_divide"], [506, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[196, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[196, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[197, "ivy.fmin"], [506, "ivy.fmin"]], "fmin() (ivy.array method)": [[197, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[197, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[198, "ivy.fmod"], [506, "ivy.fmod"]], "fmod() (ivy.array method)": [[198, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[198, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[199, "ivy.gcd"], [506, "ivy.gcd"]], "gcd() (ivy.array method)": [[199, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[199, "ivy.Container.gcd"]], "greater() (in module ivy)": [[200, "ivy.greater"], [506, "ivy.greater"]], "greater() (ivy.array method)": [[200, "ivy.Array.greater"]], "greater() (ivy.container method)": [[200, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[201, "ivy.greater_equal"], [506, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[201, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[201, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[202, "ivy.imag"], [506, "ivy.imag"]], "imag() (ivy.array method)": [[202, "ivy.Array.imag"]], "imag() (ivy.container method)": [[202, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[203, "ivy.isfinite"], [506, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[203, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[203, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[204, "ivy.isinf"], [506, "ivy.isinf"]], "isinf() (ivy.array method)": [[204, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[204, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[205, "ivy.isnan"], [506, "ivy.isnan"]], "isnan() (ivy.array method)": [[205, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[205, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[206, "ivy.isreal"], [506, "ivy.isreal"]], "isreal() (ivy.array method)": [[206, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[206, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[207, "ivy.lcm"], [506, "ivy.lcm"]], "lcm() (ivy.array method)": [[207, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[207, "ivy.Container.lcm"]], "less() (in module ivy)": [[208, "ivy.less"], [506, "ivy.less"]], "less() (ivy.array method)": [[208, "ivy.Array.less"]], "less() (ivy.container method)": [[208, "ivy.Container.less"]], "less_equal() (in module ivy)": [[209, "ivy.less_equal"], [506, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[209, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[209, "ivy.Container.less_equal"]], "log() (in module ivy)": [[210, "ivy.log"], [506, "ivy.log"]], "log() (ivy.array method)": [[210, "ivy.Array.log"]], "log() (ivy.container method)": [[210, "ivy.Container.log"]], "log10() (in module ivy)": [[211, "ivy.log10"], [506, "ivy.log10"]], "log10() (ivy.array method)": [[211, "ivy.Array.log10"]], "log10() (ivy.container method)": [[211, "ivy.Container.log10"]], "log1p() (in module ivy)": [[212, "ivy.log1p"], [506, "ivy.log1p"]], "log1p() (ivy.array method)": [[212, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[212, "ivy.Container.log1p"]], "log2() (in module ivy)": [[213, "ivy.log2"], [506, "ivy.log2"]], "log2() (ivy.array method)": [[213, "ivy.Array.log2"]], "log2() (ivy.container method)": [[213, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[214, "ivy.logaddexp"], [506, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[214, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[214, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[215, "ivy.logaddexp2"], [506, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[215, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[215, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[216, "ivy.logical_and"], [506, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[216, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[216, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[217, "ivy.logical_not"], [506, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[217, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[217, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[218, "ivy.logical_or"], [506, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[218, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[218, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[219, "ivy.logical_xor"], [506, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[219, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[219, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[220, "ivy.maximum"], [506, "ivy.maximum"]], "maximum() (ivy.array method)": [[220, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[220, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[221, "ivy.minimum"], [506, "ivy.minimum"]], "minimum() (ivy.array method)": [[221, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[221, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[222, "ivy.multiply"], [506, "ivy.multiply"]], "multiply() (ivy.array method)": [[222, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[222, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[223, "ivy.nan_to_num"], [506, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[223, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[223, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[224, "ivy.negative"], [506, "ivy.negative"]], "negative() (ivy.array method)": [[224, "ivy.Array.negative"]], "negative() (ivy.container method)": [[224, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[225, "ivy.not_equal"], [506, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[225, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[225, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[226, "ivy.positive"], [506, "ivy.positive"]], "positive() (ivy.array method)": [[226, "ivy.Array.positive"]], "positive() (ivy.container method)": [[226, "ivy.Container.positive"]], "pow() (in module ivy)": [[227, "ivy.pow"], [506, "ivy.pow"]], "pow() (ivy.array method)": [[227, "ivy.Array.pow"]], "pow() (ivy.container method)": [[227, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[228, "ivy.rad2deg"], [506, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[228, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[228, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[229, "ivy.real"], [506, "ivy.real"]], "real() (ivy.array method)": [[229, "ivy.Array.real"]], "real() (ivy.container method)": [[229, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[230, "ivy.reciprocal"], [506, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[230, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[230, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[231, "ivy.remainder"], [506, "ivy.remainder"]], "remainder() (ivy.array method)": [[231, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[231, "ivy.Container.remainder"]], "round() (in module ivy)": [[232, "ivy.round"], [506, "ivy.round"]], "round() (ivy.array method)": [[232, "ivy.Array.round"]], "round() (ivy.container method)": [[232, "ivy.Container.round"]], "sign() (in module ivy)": [[233, "ivy.sign"], [506, "ivy.sign"]], "sign() (ivy.array method)": [[233, "ivy.Array.sign"]], "sign() (ivy.container method)": [[233, "ivy.Container.sign"]], "sin() (in module ivy)": [[234, "ivy.sin"], [506, "ivy.sin"]], "sin() (ivy.array method)": [[234, "ivy.Array.sin"]], "sin() (ivy.container method)": [[234, "ivy.Container.sin"]], "sinh() (in module ivy)": [[235, "ivy.sinh"], [506, "ivy.sinh"]], "sinh() (ivy.array method)": [[235, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[235, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[236, "ivy.sqrt"], [506, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[236, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[236, "ivy.Container.sqrt"]], "square() (in module ivy)": [[237, "ivy.square"], [506, "ivy.square"]], "square() (ivy.array method)": [[237, "ivy.Array.square"]], "square() (ivy.container method)": [[237, "ivy.Container.square"]], "subtract() (in module ivy)": [[238, "ivy.subtract"], [506, "ivy.subtract"]], "subtract() (ivy.array method)": [[238, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[238, "ivy.Container.subtract"]], "tan() (in module ivy)": [[239, "ivy.tan"], [506, "ivy.tan"]], "tan() (ivy.array method)": [[239, "ivy.Array.tan"]], "tan() (ivy.container method)": [[239, "ivy.Container.tan"]], "tanh() (in module ivy)": [[240, "ivy.tanh"], [506, "ivy.tanh"]], "tanh() (ivy.array method)": [[240, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[240, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[241, "ivy.trapz"], [506, "ivy.trapz"]], "trapz() (ivy.array method)": [[241, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[241, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[242, "ivy.trunc"], [506, "ivy.trunc"]], "trunc() (ivy.array method)": [[242, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[242, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[243, "ivy.trunc_divide"], [506, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[243, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[243, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[244, "ivy.elu"], [291, "ivy.elu"]], "elu() (ivy.array method)": [[244, "ivy.Array.elu"]], "elu() (ivy.container method)": [[244, "ivy.Container.elu"]], "logit() (in module ivy)": [[245, "ivy.logit"], [291, "ivy.logit"]], "logit() (ivy.array method)": [[245, "ivy.Array.logit"]], "logit() (ivy.container method)": [[245, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[246, "ivy.logsigmoid"], [291, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[246, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[246, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[247, "ivy.prelu"], [291, "ivy.prelu"]], "prelu() (ivy.array method)": [[247, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[247, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[248, "ivy.relu6"], [291, "ivy.relu6"]], "relu6() (ivy.array method)": [[248, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[248, "ivy.Container.relu6"]], "selu() (in module ivy)": [[249, "ivy.selu"], [291, "ivy.selu"]], "selu() (ivy.array method)": [[249, "ivy.Array.selu"]], "selu() (ivy.container method)": [[249, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[250, "ivy.sequence_length"], [291, "ivy.sequence_length"]], "silu() (in module ivy)": [[251, "ivy.silu"], [291, "ivy.silu"]], "silu() (ivy.array method)": [[251, "ivy.Array.silu"]], "silu() (ivy.container method)": [[251, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[252, "ivy.thresholded_relu"], [291, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[252, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[252, "ivy.Container.thresholded_relu"]], "eye_like() (in module ivy)": [[253, "ivy.eye_like"], [293, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[253, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[253, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[254, "ivy.hamming_window"], [293, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[254, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[255, "ivy.hann_window"], [293, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[255, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[256, "ivy.indices"], [293, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[257, "ivy.kaiser_bessel_derived_window"], [293, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[257, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[258, "ivy.kaiser_window"], [293, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[258, "ivy.Container.kaiser_window"]], "ndenumerate() (in module ivy)": [[259, "ivy.ndenumerate"], [293, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[260, "ivy.ndindex"], [293, "ivy.ndindex"]], "tril_indices() (in module ivy)": [[261, "ivy.tril_indices"], [293, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[261, "ivy.Container.tril_indices"]], "unsorted_segment_min() (in module ivy)": [[262, "ivy.unsorted_segment_min"], [293, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[262, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[262, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[263, "ivy.unsorted_segment_sum"], [293, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[263, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[263, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[264, "ivy.vorbis_window"], [293, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[264, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[265, "ivy.allclose"], [296, "ivy.allclose"]], "allclose() (ivy.array method)": [[265, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[265, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[266, "ivy.binarizer"], [296, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[266, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[266, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[267, "ivy.conj"], [296, "ivy.conj"]], "conj() (ivy.array method)": [[267, "ivy.Array.conj"]], "conj() (ivy.container method)": [[267, "ivy.Container.conj"]], "copysign() (in module ivy)": [[268, "ivy.copysign"], [296, "ivy.copysign"]], "copysign() (ivy.array method)": [[268, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[268, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[269, "ivy.count_nonzero"], [296, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[269, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[269, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[270, "ivy.diff"], [296, "ivy.diff"]], "diff() (ivy.array method)": [[270, "ivy.Array.diff"]], "diff() (ivy.container method)": [[270, "ivy.Container.diff"]], "digamma() (in module ivy)": [[271, "ivy.digamma"], [296, "ivy.digamma"]], "digamma() (ivy.array method)": [[271, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[271, "ivy.Container.digamma"]], "fix() (in module ivy)": [[272, "ivy.fix"], [296, "ivy.fix"]], "fix() (ivy.array method)": [[272, "ivy.Array.fix"]], "fix() (ivy.container method)": [[272, "ivy.Container.fix"]], "float_power() (in module ivy)": [[273, "ivy.float_power"], [296, "ivy.float_power"]], "float_power() (ivy.array method)": [[273, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[273, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[274, "ivy.fmax"], [296, "ivy.fmax"]], "fmax() (ivy.array method)": [[274, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[274, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[275, "ivy.frexp"], [296, "ivy.frexp"]], "frexp() (ivy.array method)": [[275, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[275, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[276, "ivy.gradient"], [296, "ivy.gradient"]], "gradient() (ivy.array method)": [[276, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[276, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[277, "ivy.hypot"], [296, "ivy.hypot"]], "hypot() (ivy.array method)": [[277, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[277, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[278, "ivy.isclose"], [296, "ivy.isclose"]], "isclose() (ivy.array method)": [[278, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[278, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[279, "ivy.ldexp"], [296, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[279, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[279, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[280, "ivy.lerp"], [296, "ivy.lerp"]], "lerp() (ivy.array method)": [[280, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[280, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[281, "ivy.lgamma"], [296, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[281, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[282, "ivy.modf"], [296, "ivy.modf"]], "modf() (ivy.array method)": [[282, "ivy.Array.modf"]], "modf() (ivy.container method)": [[282, "ivy.Container.modf"]], "nansum() (in module ivy)": [[283, "ivy.nansum"], [296, "ivy.nansum"]], "nansum() (ivy.array method)": [[283, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[283, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[284, "ivy.nextafter"], [296, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[284, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[284, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[285, "ivy.signbit"], [296, "ivy.signbit"]], "signbit() (ivy.array method)": [[285, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[285, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[286, "ivy.sinc"], [296, "ivy.sinc"]], "sinc() (ivy.array method)": [[286, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[286, "ivy.Container.sinc"]], "xlogy() (in module ivy)": [[287, "ivy.xlogy"], [296, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[287, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[287, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[288, "ivy.zeta"], [296, "ivy.zeta"]], "zeta() (ivy.array method)": [[288, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[288, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[289, "ivy.reduce"], [297, "ivy.reduce"]], "reduce() (ivy.array method)": [[289, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[289, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[290, "ivy.bind_custom_gradient_function"], [298, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[291, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[292, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[293, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[294, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[295, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[296, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[297, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[298, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[299, "ivy.adaptive_avg_pool1d"], [313, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[299, "ivy.adaptive_avg_pool2d"], [314, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[299, "ivy.adaptive_max_pool2d"], [315, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[299, "ivy.area_interpolate"], [316, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[299, "ivy.avg_pool1d"], [317, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[299, "ivy.avg_pool2d"], [318, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[299, "ivy.avg_pool3d"], [319, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[299, "ivy.dct"], [320, "ivy.dct"]], "dft() (in module ivy)": [[299, "ivy.dft"], [321, "ivy.dft"]], "dropout1d() (in module ivy)": [[299, "ivy.dropout1d"], [322, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[299, "ivy.dropout2d"], [323, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[299, "ivy.dropout3d"], [324, "ivy.dropout3d"]], "embedding() (in module ivy)": [[299, "ivy.embedding"], [325, "ivy.embedding"]], "fft() (in module ivy)": [[299, "ivy.fft"], [326, "ivy.fft"]], "fft2() (in module ivy)": [[299, "ivy.fft2"], [327, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[299, "ivy.generate_einsum_equation"], [328, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[299, "ivy.get_interpolate_kernel"], [329, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[299, "ivy.idct"], [330, "ivy.idct"]], "ifft() (in module ivy)": [[299, "ivy.ifft"], [331, "ivy.ifft"]], "ifftn() (in module ivy)": [[299, "ivy.ifftn"], [332, "ivy.ifftn"]], "interp() (in module ivy)": [[299, "ivy.interp"], [333, "ivy.interp"]], "interpolate() (in module ivy)": [[299, "ivy.interpolate"], [334, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[299, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[299, "ivy.max_pool1d"], [335, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[299, "ivy.max_pool2d"], [336, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[299, "ivy.max_pool3d"], [337, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[299, "ivy.max_unpool1d"], [338, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[299, "ivy.nearest_interpolate"], [339, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[299, "ivy.pool"], [340, "ivy.pool"]], "reduce_window() (in module ivy)": [[299, "ivy.reduce_window"], [341, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[299, "ivy.rfftn"], [342, "ivy.rfftn"]], "adjoint() (in module ivy)": [[300, "ivy.adjoint"], [343, "ivy.adjoint"]], "cond() (in module ivy)": [[300, "ivy.cond"], [344, "ivy.cond"]], "diagflat() (in module ivy)": [[300, "ivy.diagflat"], [345, "ivy.diagflat"]], "dot() (in module ivy)": [[300, "ivy.dot"], [346, "ivy.dot"]], "eig() (in module ivy)": [[300, "ivy.eig"], [347, "ivy.eig"], [511, "ivy.eig"], [543, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[300, "ivy.eigh_tridiagonal"], [348, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[300, "ivy.eigvals"], [349, "ivy.eigvals"]], "ivy.functional.ivy.experimental.linear_algebra": [[300, "module-ivy.functional.ivy.experimental.linear_algebra"]], "kron() (in module ivy)": [[300, "ivy.kron"], [350, "ivy.kron"]], "matrix_exp() (in module ivy)": [[300, "ivy.matrix_exp"], [351, "ivy.matrix_exp"]], "multi_dot() (in module ivy)": [[300, "ivy.multi_dot"], [352, "ivy.multi_dot"]], "ivy.functional.ivy.experimental.losses": [[301, "module-ivy.functional.ivy.experimental.losses"]], "log_poisson_loss() (in module ivy)": [[301, "ivy.log_poisson_loss"], [353, "ivy.log_poisson_loss"]], "as_strided() (in module ivy)": [[302, "ivy.as_strided"], [354, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[302, "ivy.associative_scan"], [355, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[302, "ivy.atleast_1d"], [356, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[302, "ivy.atleast_2d"], [357, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[302, "ivy.atleast_3d"], [358, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[302, "ivy.broadcast_shapes"], [359, "ivy.broadcast_shapes"]], "concat_from_sequence() (in module ivy)": [[302, "ivy.concat_from_sequence"], [360, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[302, "ivy.dsplit"], [361, "ivy.dsplit"]], "dstack() (in module ivy)": [[302, "ivy.dstack"], [362, "ivy.dstack"]], "expand() (in module ivy)": [[302, "ivy.expand"], [363, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[302, "ivy.fill_diagonal"], [364, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[302, "ivy.flatten"], [365, "ivy.flatten"]], "fliplr() (in module ivy)": [[302, "ivy.fliplr"], [366, "ivy.fliplr"]], "flipud() (in module ivy)": [[302, "ivy.flipud"], [367, "ivy.flipud"]], "heaviside() (in module ivy)": [[302, "ivy.heaviside"], [368, "ivy.heaviside"]], "hsplit() (in module ivy)": [[302, "ivy.hsplit"], [369, "ivy.hsplit"]], "hstack() (in module ivy)": [[302, "ivy.hstack"], [370, "ivy.hstack"]], "i0() (in module ivy)": [[302, "ivy.i0"], [371, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[302, "module-ivy.functional.ivy.experimental.manipulation"]], "moveaxis() (in module ivy)": [[302, "ivy.moveaxis"], [372, "ivy.moveaxis"]], "pad() (in module ivy)": [[302, "ivy.pad"], [373, "ivy.pad"]], "put_along_axis() (in module ivy)": [[302, "ivy.put_along_axis"], [374, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[302, "ivy.rot90"], [375, "ivy.rot90"]], "take_along_axis() (in module ivy)": [[302, "ivy.take_along_axis"], [376, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[302, "ivy.top_k"], [377, "ivy.top_k"]], "unique_consecutive() (in module ivy)": [[302, "ivy.unique_consecutive"], [378, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[302, "ivy.vsplit"], [379, "ivy.vsplit"]], "vstack() (in module ivy)": [[302, "ivy.vstack"], [380, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[303, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[304, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[305, "ivy.batch_norm"], [381, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[305, "ivy.group_norm"], [382, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[305, "ivy.instance_norm"], [383, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[305, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[305, "ivy.l1_normalize"], [384, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[305, "ivy.l2_normalize"], [385, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[305, "ivy.lp_normalize"], [386, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[306, "ivy.bernoulli"], [387, "ivy.bernoulli"]], "beta() (in module ivy)": [[306, "ivy.beta"], [388, "ivy.beta"]], "dirichlet() (in module ivy)": [[306, "ivy.dirichlet"], [389, "ivy.dirichlet"]], "gamma() (in module ivy)": [[306, "ivy.gamma"], [390, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[306, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[306, "ivy.poisson"], [391, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[307, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[307, "ivy.unravel_index"], [392, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[308, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[309, "ivy.invert_permutation"], [393, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[309, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[309, "ivy.lexsort"], [394, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[310, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[310, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[310, "ivy.is_ivy_sparse_array"], [395, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[310, "ivy.is_native_sparse_array"], [396, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[310, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[310, "ivy.native_sparse_array"], [397, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[310, "ivy.native_sparse_array_to_indices_values_and_shape"], [398, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[311, "ivy.bincount"], [399, "ivy.bincount"]], "corrcoef() (in module ivy)": [[311, "ivy.corrcoef"], [400, "ivy.corrcoef"]], "cov() (in module ivy)": [[311, "ivy.cov"], [401, "ivy.cov"]], "cummax() (in module ivy)": [[311, "ivy.cummax"], [402, "ivy.cummax"]], "cummin() (in module ivy)": [[311, "ivy.cummin"], [403, "ivy.cummin"]], "histogram() (in module ivy)": [[311, "ivy.histogram"], [404, "ivy.histogram"]], "igamma() (in module ivy)": [[311, "ivy.igamma"], [405, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[311, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[311, "ivy.median"], [406, "ivy.median"]], "nanmean() (in module ivy)": [[311, "ivy.nanmean"], [407, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[311, "ivy.nanmedian"], [408, "ivy.nanmedian"]], "nanquantile() (in module ivy)": [[311, "ivy.nanquantile"], [409, "ivy.nanquantile"]], "quantile() (in module ivy)": [[311, "ivy.quantile"], [410, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[312, "module-ivy.functional.ivy.experimental.utility"]], "adaptive_avg_pool1d() (ivy.array method)": [[313, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[313, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[314, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[314, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[315, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[315, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[317, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[317, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[318, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[318, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[319, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[319, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[320, "ivy.Array.dct"]], "dct() (ivy.container method)": [[320, "ivy.Container.dct"]], "dft() (ivy.array method)": [[321, "ivy.Array.dft"]], "dft() (ivy.container method)": [[321, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[322, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[322, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[323, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[323, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[324, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[324, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[325, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[325, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[326, "ivy.Array.fft"]], "fft() (ivy.container method)": [[326, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[327, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[330, "ivy.Array.idct"]], "idct() (ivy.container method)": [[330, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[331, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[331, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[332, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[332, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[334, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[334, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[335, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[335, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[336, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[336, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[337, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[337, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[341, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[341, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[342, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[342, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[343, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[343, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[344, "ivy.Array.cond"]], "cond() (ivy.container method)": [[344, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[345, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[345, "ivy.Container.diagflat"]], "eig() (ivy.array method)": [[347, "ivy.Array.eig"], [543, "ivy.Array.eig"]], "eig() (ivy.container method)": [[347, "ivy.Container.eig"], [543, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[348, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[348, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[349, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[349, "ivy.Container.eigvals"]], "kron() (ivy.array method)": [[350, "ivy.Array.kron"]], "kron() (ivy.container method)": [[350, "ivy.Container.kron"]], "matrix_exp() (ivy.array method)": [[351, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[351, "ivy.Container.matrix_exp"]], "multi_dot() (ivy.array method)": [[352, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[352, "ivy.Container.multi_dot"]], "as_strided() (ivy.array method)": [[354, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[354, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[355, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[355, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[356, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[356, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[357, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[357, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[358, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[358, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[359, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[360, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[360, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[361, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[361, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[362, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[362, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[363, "ivy.Array.expand"]], "expand() (ivy.container method)": [[363, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[364, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[364, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[365, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[365, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[366, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[366, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[367, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[367, "ivy.Container.flipud"]], "heaviside() (ivy.array method)": [[368, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[368, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[369, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[369, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[370, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[370, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[371, "ivy.Array.i0"]], "i0() (ivy.container method)": [[371, "ivy.Container.i0"]], "moveaxis() (ivy.array method)": [[372, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[372, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[373, "ivy.Array.pad"]], "pad() (ivy.container method)": [[373, "ivy.Container.pad"]], "rot90() (ivy.array method)": [[375, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[375, "ivy.Container.rot90"]], "take_along_axis() (ivy.array method)": [[376, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[376, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[377, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[377, "ivy.Container.top_k"]], "unique_consecutive() (ivy.array method)": [[378, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[378, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[379, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[379, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[380, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[380, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[381, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[381, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[382, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[382, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[383, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[383, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[384, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[384, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[385, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[385, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[386, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[386, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[387, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[387, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[388, "ivy.Array.beta"]], "beta() (ivy.container method)": [[388, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[389, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[389, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[390, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[390, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[391, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[391, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[392, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[392, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[393, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[394, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[394, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[399, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[399, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[400, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[400, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[401, "ivy.Array.cov"]], "cov() (ivy.container method)": [[401, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[402, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[402, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[403, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[403, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[404, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[404, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[405, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[405, "ivy.Container.igamma"]], "median() (ivy.array method)": [[406, "ivy.Array.median"]], "median() (ivy.container method)": [[406, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[407, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[407, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[408, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[408, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[410, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[410, "ivy.Container.quantile"]], "all_equal() (in module ivy)": [[411, "ivy.all_equal"], [508, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[411, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[411, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[412, "ivy.arg_info"], [508, "ivy.arg_info"]], "arg_names() (in module ivy)": [[413, "ivy.arg_names"], [508, "ivy.arg_names"]], "array_equal() (in module ivy)": [[414, "ivy.array_equal"], [508, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[414, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[414, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[415, "ivy.assert_supports_inplace"], [508, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[415, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[415, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[416, "ivy.cache_fn"], [508, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[417, "ivy.clip_matrix_norm"], [508, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[417, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[417, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[418, "ivy.clip_vector_norm"], [508, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[418, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[418, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[419, "ivy.container_types"], [508, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[420, "ivy.current_backend_str"], [508, "ivy.current_backend_str"]], "default() (in module ivy)": [[421, "ivy.default"], [508, "ivy.default"]], "default() (ivy.array method)": [[421, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[422, "ivy.einops_rearrange"], [508, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[422, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[422, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[423, "ivy.einops_reduce"], [508, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[423, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[423, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[424, "ivy.einops_repeat"], [508, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[424, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[424, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[425, "ivy.exists"], [508, "ivy.exists"]], "exists() (ivy.array method)": [[425, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[426, "ivy.fourier_encode"], [508, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[426, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[426, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[427, "ivy.function_supported_devices_and_dtypes"], [508, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[428, "ivy.function_unsupported_devices_and_dtypes"], [508, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[429, "ivy.gather"], [508, "ivy.gather"]], "gather() (ivy.array method)": [[429, "ivy.Array.gather"]], "gather() (ivy.container method)": [[429, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[430, "ivy.gather_nd"], [508, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[430, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[430, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[431, "ivy.get_all_arrays_in_memory"], [508, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[432, "ivy.get_item"], [508, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[433, "ivy.get_num_dims"], [508, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[433, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[433, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[434, "ivy.get_referrers_recursive"], [508, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[435, "ivy.has_nans"], [508, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[435, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[435, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[436, "ivy.inplace_arrays_supported"], [508, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[437, "ivy.inplace_decrement"], [508, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[437, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[437, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[438, "ivy.inplace_increment"], [508, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[438, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[438, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[439, "ivy.inplace_update"], [508, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[439, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[439, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[440, "ivy.inplace_variables_supported"], [508, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[441, "ivy.is_array"], [508, "ivy.is_array"]], "is_array() (ivy.array method)": [[441, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[441, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[442, "ivy.is_ivy_array"], [508, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[442, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[442, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[443, "ivy.is_ivy_container"], [508, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[443, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[444, "ivy.is_ivy_nested_array"], [508, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[445, "ivy.is_native_array"], [508, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[445, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[445, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[446, "ivy.isin"], [508, "ivy.isin"]], "isin() (ivy.array method)": [[446, "ivy.Array.isin"]], "isin() (ivy.container method)": [[446, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[447, "ivy.isscalar"], [508, "ivy.isscalar"]], "itemsize() (in module ivy)": [[448, "ivy.itemsize"], [508, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[448, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[448, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[449, "ivy.match_kwargs"], [508, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[450, "ivy.multiprocessing"], [508, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[451, "ivy.num_arrays_in_memory"], [508, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[452, "ivy.print_all_arrays_in_memory"], [508, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[453, "ivy.scatter_flat"], [508, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[453, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[453, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[454, "ivy.scatter_nd"], [508, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[454, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[454, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[455, "ivy.set_array_mode"], [508, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[456, "ivy.set_exception_trace_mode"], [508, "ivy.set_exception_trace_mode"]], "set_item() (in module ivy)": [[457, "ivy.set_item"], [508, "ivy.set_item"]], "set_min_base() (in module ivy)": [[458, "ivy.set_min_base"], [508, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[459, "ivy.set_min_denominator"], [508, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[460, "ivy.set_nestable_mode"], [508, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[461, "ivy.set_precise_mode"], [508, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[462, "ivy.set_queue_timeout"], [508, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[463, "ivy.set_shape_array_mode"], [508, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[464, "ivy.set_show_func_wrapper_trace_mode"], [508, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[465, "ivy.set_tmp_dir"], [508, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[466, "ivy.shape"], [508, "ivy.shape"]], "shape() (ivy.array method)": [[466, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[467, "ivy.stable_divide"], [508, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[467, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[467, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[468, "ivy.stable_pow"], [508, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[468, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[468, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[469, "ivy.strides"], [508, "ivy.strides"]], "strides() (ivy.array method)": [[469, "ivy.Array.strides"]], "strides() (ivy.container method)": [[469, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[470, "ivy.supports_inplace_updates"], [508, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[470, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[470, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[471, "ivy.to_ivy_shape"], [508, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[472, "ivy.to_list"], [508, "ivy.to_list"]], "to_list() (ivy.array method)": [[472, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[472, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[473, "ivy.to_native_shape"], [508, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[474, "ivy.to_numpy"], [508, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[474, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[474, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[475, "ivy.to_scalar"], [508, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[475, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[475, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[476, "ivy.try_else_none"], [508, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[477, "ivy.unset_array_mode"], [508, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[478, "ivy.unset_exception_trace_mode"], [508, "ivy.unset_exception_trace_mode"]], "unset_min_base() (in module ivy)": [[479, "ivy.unset_min_base"], [508, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[480, "ivy.unset_min_denominator"], [508, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[481, "ivy.unset_nestable_mode"], [508, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[482, "ivy.unset_precise_mode"], [508, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[483, "ivy.unset_queue_timeout"], [508, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[484, "ivy.unset_shape_array_mode"], [508, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[485, "ivy.unset_show_func_wrapper_trace_mode"], [508, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[486, "ivy.unset_tmp_dir"], [508, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[487, "ivy.value_is_nan"], [508, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[487, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[487, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[488, "ivy.vmap"], [508, "ivy.vmap"]], "adam_step() (in module ivy)": [[489, "ivy.adam_step"], [509, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[489, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[489, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[490, "ivy.adam_update"], [509, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[490, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[490, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[491, "ivy.execute_with_gradients"], [509, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[492, "ivy.grad"], [509, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[493, "ivy.gradient_descent_update"], [509, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[493, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[493, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[494, "ivy.jac"], [509, "ivy.jac"]], "lamb_update() (in module ivy)": [[495, "ivy.lamb_update"], [509, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[495, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[495, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[496, "ivy.lars_update"], [509, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[496, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[496, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[497, "ivy.optimizer_update"], [509, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[497, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[497, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[498, "ivy.stop_gradient"], [509, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[498, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[498, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[499, "ivy.value_and_grad"], [509, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[500, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[501, "ivy.e"]], "inf (in module ivy)": [[501, "ivy.inf"]], "ivy.functional.ivy.constants": [[501, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[501, "ivy.nan"]], "newaxis (in module ivy)": [[501, "ivy.newaxis"]], "pi (in module ivy)": [[501, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[502, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[503, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[503, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[504, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[504, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[504, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[504, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[504, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[504, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[505, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[505, "ivy.Profiler"]], "ivy.functional.ivy.device": [[505, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[506, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[507, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[508, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[508, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[508, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[509, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[510, "ivy.conv"], [523, "ivy.conv"]], "conv1d() (in module ivy)": [[510, "ivy.conv1d"], [524, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[510, "ivy.conv1d_transpose"], [525, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[510, "ivy.conv2d"], [526, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[510, "ivy.conv2d_transpose"], [527, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[510, "ivy.conv3d"], [528, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[510, "ivy.conv3d_transpose"], [529, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[510, "ivy.conv_general_dilated"], [530, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[510, "ivy.conv_general_transpose"], [531, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[510, "ivy.depthwise_conv2d"], [532, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[510, "ivy.dropout"], [533, "ivy.dropout"]], "ivy.functional.ivy.layers": [[510, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[510, "ivy.linear"], [534, "ivy.linear"]], "lstm_update() (in module ivy)": [[510, "ivy.lstm_update"], [535, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[510, "ivy.multi_head_attention"], [536, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[510, "ivy.scaled_dot_product_attention"], [537, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[511, "ivy.cholesky"], [538, "ivy.cholesky"]], "cross() (in module ivy)": [[511, "ivy.cross"], [539, "ivy.cross"]], "det() (in module ivy)": [[511, "ivy.det"], [540, "ivy.det"]], "diag() (in module ivy)": [[511, "ivy.diag"], [541, "ivy.diag"]], "diagonal() (in module ivy)": [[511, "ivy.diagonal"], [542, "ivy.diagonal"]], "eigh() (in module ivy)": [[511, "ivy.eigh"], [544, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[511, "ivy.eigvalsh"], [545, "ivy.eigvalsh"]], "inner() (in module ivy)": [[511, "ivy.inner"], [546, "ivy.inner"]], "inv() (in module ivy)": [[511, "ivy.inv"], [547, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[511, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[511, "ivy.lu_factor"], [548, "ivy.lu_factor"]], "matmul() (in module ivy)": [[511, "ivy.matmul"], [549, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[511, "ivy.matrix_norm"], [550, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[511, "ivy.matrix_power"], [551, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[511, "ivy.matrix_rank"], [552, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[511, "ivy.matrix_transpose"], [553, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[511, "ivy.outer"], [554, "ivy.outer"]], "pinv() (in module ivy)": [[511, "ivy.pinv"], [555, "ivy.pinv"]], "qr() (in module ivy)": [[511, "ivy.qr"], [556, "ivy.qr"]], "slogdet() (in module ivy)": [[511, "ivy.slogdet"], [557, "ivy.slogdet"]], "solve() (in module ivy)": [[511, "ivy.solve"], [558, "ivy.solve"]], "svd() (in module ivy)": [[511, "ivy.svd"], [559, "ivy.svd"]], "svdvals() (in module ivy)": [[511, "ivy.svdvals"], [560, "ivy.svdvals"]], "tensordot() (in module ivy)": [[511, "ivy.tensordot"], [561, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[511, "ivy.tensorsolve"], [562, "ivy.tensorsolve"]], "trace() (in module ivy)": [[511, "ivy.trace"], [563, "ivy.trace"]], "vander() (in module ivy)": [[511, "ivy.vander"], [564, "ivy.vander"]], "vecdot() (in module ivy)": [[511, "ivy.vecdot"], [565, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[511, "ivy.vector_norm"], [566, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[511, "ivy.vector_to_skew_symmetric_matrix"], [567, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[512, "ivy.binary_cross_entropy"], [568, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[512, "ivy.cross_entropy"], [569, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[512, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[512, "ivy.sparse_cross_entropy"], [570, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[513, "ivy.clip"], [571, "ivy.clip"]], "concat() (in module ivy)": [[513, "ivy.concat"], [572, "ivy.concat"]], "constant_pad() (in module ivy)": [[513, "ivy.constant_pad"], [573, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[513, "ivy.expand_dims"], [574, "ivy.expand_dims"]], "flip() (in module ivy)": [[513, "ivy.flip"], [575, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[513, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[513, "ivy.permute_dims"], [576, "ivy.permute_dims"]], "repeat() (in module ivy)": [[513, "ivy.repeat"], [577, "ivy.repeat"]], "reshape() (in module ivy)": [[513, "ivy.reshape"], [578, "ivy.reshape"]], "roll() (in module ivy)": [[513, "ivy.roll"], [579, "ivy.roll"]], "split() (in module ivy)": [[513, "ivy.split"], [580, "ivy.split"]], "squeeze() (in module ivy)": [[513, "ivy.squeeze"], [581, "ivy.squeeze"]], "stack() (in module ivy)": [[513, "ivy.stack"], [582, "ivy.stack"]], "swapaxes() (in module ivy)": [[513, "ivy.swapaxes"], [583, "ivy.swapaxes"]], "tile() (in module ivy)": [[513, "ivy.tile"], [584, "ivy.tile"]], "unstack() (in module ivy)": [[513, "ivy.unstack"], [585, "ivy.unstack"]], "zero_pad() (in module ivy)": [[513, "ivy.zero_pad"], [586, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[514, "ivy.fomaml_step"], [587, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[514, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[514, "ivy.maml_step"], [588, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[514, "ivy.reptile_step"], [589, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[515, "ivy.all_nested_indices"], [590, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[515, "ivy.copy_nest"], [591, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[515, "ivy.duplicate_array_index_chains"], [592, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[515, "ivy.index_nest"], [593, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[515, "ivy.insert_into_nest_at_index"], [594, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[515, "ivy.insert_into_nest_at_indices"], [595, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[515, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[515, "ivy.map"], [596, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[515, "ivy.map_nest_at_index"], [597, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[515, "ivy.map_nest_at_indices"], [598, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[515, "ivy.multi_index_nest"], [599, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[515, "ivy.nested_any"], [600, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[515, "ivy.nested_argwhere"], [601, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[515, "ivy.nested_map"], [602, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[515, "ivy.nested_multi_map"], [603, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[515, "ivy.prune_empty"], [604, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[515, "ivy.prune_nest_at_index"], [605, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[515, "ivy.prune_nest_at_indices"], [606, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[515, "ivy.set_nest_at_index"], [607, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[515, "ivy.set_nest_at_indices"], [608, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[516, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[516, "ivy.layer_norm"], [609, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[517, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[517, "ivy.multinomial"], [610, "ivy.multinomial"]], "randint() (in module ivy)": [[517, "ivy.randint"], [611, "ivy.randint"]], "random_normal() (in module ivy)": [[517, "ivy.random_normal"], [612, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[517, "ivy.random_uniform"], [613, "ivy.random_uniform"]], "seed() (in module ivy)": [[517, "ivy.seed"], [614, "ivy.seed"]], "shuffle() (in module ivy)": [[517, "ivy.shuffle"], [615, "ivy.shuffle"]], "argmax() (in module ivy)": [[518, "ivy.argmax"], [616, "ivy.argmax"]], "argmin() (in module ivy)": [[518, "ivy.argmin"], [617, "ivy.argmin"]], "argwhere() (in module ivy)": [[518, "ivy.argwhere"], [618, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[518, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[518, "ivy.nonzero"], [619, "ivy.nonzero"]], "where() (in module ivy)": [[518, "ivy.where"], [620, "ivy.where"]], "ivy.functional.ivy.set": [[519, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[519, "ivy.unique_all"], [621, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[519, "ivy.unique_counts"], [622, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[519, "ivy.unique_inverse"], [623, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[519, "ivy.unique_values"], [624, "ivy.unique_values"]], "argsort() (in module ivy)": [[520, "ivy.argsort"], [625, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[520, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[520, "ivy.msort"], [626, "ivy.msort"]], "searchsorted() (in module ivy)": [[520, "ivy.searchsorted"], [627, "ivy.searchsorted"]], "sort() (in module ivy)": [[520, "ivy.sort"], [628, "ivy.sort"]], "cumprod() (in module ivy)": [[521, "ivy.cumprod"], [629, "ivy.cumprod"]], "cumsum() (in module ivy)": [[521, "ivy.cumsum"], [630, "ivy.cumsum"]], "einsum() (in module ivy)": [[521, "ivy.einsum"], [631, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[521, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[521, "ivy.max"], [632, "ivy.max"]], "mean() (in module ivy)": [[521, "ivy.mean"], [633, "ivy.mean"]], "min() (in module ivy)": [[521, "ivy.min"], [634, "ivy.min"]], "prod() (in module ivy)": [[521, "ivy.prod"], [635, "ivy.prod"]], "std() (in module ivy)": [[521, "ivy.std"], [636, "ivy.std"]], "sum() (in module ivy)": [[521, "ivy.sum"], [637, "ivy.sum"]], "var() (in module ivy)": [[521, "ivy.var"], [638, "ivy.var"]], "all() (in module ivy)": [[522, "ivy.all"], [639, "ivy.all"]], "any() (in module ivy)": [[522, "ivy.any"], [640, "ivy.any"]], "ivy.functional.ivy.utility": [[522, "module-ivy.functional.ivy.utility"]], "save() (in module ivy)": [[522, "ivy.save"], [641, "ivy.save"]], "conv1d() (ivy.array method)": [[524, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[524, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[525, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[525, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[526, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[526, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[527, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[527, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[528, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[528, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[529, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[529, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[532, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[532, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[533, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[533, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[534, "ivy.Array.linear"]], "linear() (ivy.container method)": [[534, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[535, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[535, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[536, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[536, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[537, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[537, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[538, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[538, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[539, "ivy.Array.cross"]], "cross() (ivy.container method)": [[539, "ivy.Container.cross"]], "det() (ivy.array method)": [[540, "ivy.Array.det"]], "det() (ivy.container method)": [[540, "ivy.Container.det"]], "diag() (ivy.array method)": [[541, "ivy.Array.diag"]], "diag() (ivy.container method)": [[541, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[542, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[542, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[544, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[544, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[545, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[545, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[546, "ivy.Array.inner"]], "inner() (ivy.container method)": [[546, "ivy.Container.inner"]], "inv() (ivy.array method)": [[547, "ivy.Array.inv"]], "inv() (ivy.container method)": [[547, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[549, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[549, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[550, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[550, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[551, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[551, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[552, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[552, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[553, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[553, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[554, "ivy.Array.outer"]], "outer() (ivy.container method)": [[554, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[555, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[555, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[556, "ivy.Array.qr"]], "qr() (ivy.container method)": [[556, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[557, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[557, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[558, "ivy.Array.solve"]], "solve() (ivy.container method)": [[558, "ivy.Container.solve"]], "svd() (ivy.array method)": [[559, "ivy.Array.svd"]], "svd() (ivy.container method)": [[559, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[560, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[560, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[561, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[561, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[562, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[562, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[563, "ivy.Array.trace"]], "trace() (ivy.container method)": [[563, "ivy.Container.trace"]], "vander() (ivy.array method)": [[564, "ivy.Array.vander"]], "vander() (ivy.container method)": [[564, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[565, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[565, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[566, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[566, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[567, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[567, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[568, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[568, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[569, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[569, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[570, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[570, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[571, "ivy.Array.clip"]], "clip() (ivy.container method)": [[571, "ivy.Container.clip"]], "concat() (ivy.array method)": [[572, "ivy.Array.concat"]], "concat() (ivy.container method)": [[572, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[573, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[573, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[574, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[574, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[575, "ivy.Array.flip"]], "flip() (ivy.container method)": [[575, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[576, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[576, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[577, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[577, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[578, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[578, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[579, "ivy.Array.roll"]], "roll() (ivy.container method)": [[579, "ivy.Container.roll"]], "split() (ivy.array method)": [[580, "ivy.Array.split"]], "split() (ivy.container method)": [[580, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[581, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[581, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[582, "ivy.Array.stack"]], "stack() (ivy.container method)": [[582, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[583, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[583, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[584, "ivy.Array.tile"]], "tile() (ivy.container method)": [[584, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[585, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[585, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[586, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[586, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[609, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[609, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[610, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[610, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[611, "ivy.Array.randint"]], "randint() (ivy.container method)": [[611, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[612, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[612, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[613, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[613, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[615, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[615, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[616, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[616, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[617, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[617, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[618, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[618, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[619, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[619, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[620, "ivy.Array.where"]], "where() (ivy.container method)": [[620, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[621, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[621, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[622, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[622, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[623, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[623, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[624, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[624, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[625, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[625, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[626, "ivy.Array.msort"]], "msort() (ivy.container method)": [[626, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[627, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[627, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[628, "ivy.Array.sort"]], "sort() (ivy.container method)": [[628, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[629, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[629, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[630, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[630, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[631, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[631, "ivy.Container.einsum"]], "max() (ivy.array method)": [[632, "ivy.Array.max"]], "max() (ivy.container method)": [[632, "ivy.Container.max"]], "mean() (ivy.array method)": [[633, "ivy.Array.mean"]], "mean() (ivy.container method)": [[633, "ivy.Container.mean"]], "min() (ivy.array method)": [[634, "ivy.Array.min"]], "min() (ivy.container method)": [[634, "ivy.Container.min"]], "prod() (ivy.array method)": [[635, "ivy.Array.prod"]], "prod() (ivy.container method)": [[635, "ivy.Container.prod"]], "std() (ivy.array method)": [[636, "ivy.Array.std"]], "std() (ivy.container method)": [[636, "ivy.Container.std"]], "sum() (ivy.array method)": [[637, "ivy.Array.sum"]], "sum() (ivy.container method)": [[637, "ivy.Container.sum"]], "var() (ivy.array method)": [[638, "ivy.Array.var"]], "var() (ivy.container method)": [[638, "ivy.Container.var"]], "all() (ivy.array method)": [[639, "ivy.Array.all"]], "all() (ivy.container method)": [[639, "ivy.Container.all"]], "any() (ivy.array method)": [[640, "ivy.Array.any"]], "any() (ivy.container method)": [[640, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[642, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[642, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[643, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[644, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[644, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[645, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[645, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[645, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[645, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[645, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[646, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[647, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[647, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[648, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[648, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[648, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[648, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[649, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[649, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[650, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[650, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[650, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[650, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[651, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[651, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[651, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[651, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[651, "ivy_tests.test_ivy.helpers.pipeline_helper.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[652, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[652, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[653, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[653, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[654, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[654, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[658, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[658, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[658, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[658, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[658, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[658, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[658, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[658, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[658, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[658, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[658, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[658, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[658, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[658, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[658, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[658, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[658, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[658, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[658, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[658, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[659, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[659, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[659, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[659, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[659, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[659, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[659, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[659, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[660, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[660, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[660, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[661, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[661, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[661, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[661, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[661, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[661, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[661, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[661, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[661, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[661, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[661, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[661, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[661, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[661, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[661, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[661, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[662, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[662, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[662, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[662, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[662, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[662, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[662, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[662, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[662, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[662, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[662, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[662, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[662, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[662, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[662, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[662, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[662, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[662, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[662, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[662, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[662, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[662, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[662, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[662, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[662, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[662, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[663, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[663, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[663, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[663, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[663, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[663, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[663, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[664, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[664, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[664, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[664, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[664, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[664, "ivy.stateful.module.Module.load"]], "save() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[664, "ivy.stateful.module.Module.show_graph"]], "batchnorm2d (class in ivy.stateful.norms)": [[665, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[665, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[665, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[665, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[665, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[666, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[666, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[666, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[666, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[666, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[666, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[666, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[666, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[666, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[666, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[666, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[666, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[666, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[666, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[666, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[666, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[666, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[666, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[666, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[666, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[666, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[667, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[667, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[667, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[668, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[668, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[669, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[670, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[670, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[670, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[670, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[670, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[670, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[670, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[670, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[670, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[670, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[670, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[671, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[671, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[671, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[672, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[672, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[672, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[672, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[672, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[672, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[673, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[673, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[674, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[674, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "invalidbackendexception": [[675, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[675, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[675, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[675, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[675, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[675, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[675, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[675, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[675, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[675, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[675, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[675, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[675, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[675, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[675, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[675, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[675, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[675, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[675, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[675, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[675, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[675, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[675, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[675, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[676, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[676, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[676, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[677, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[677, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[677, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[678, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[678, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[678, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[678, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[678, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[679, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[679, "module-ivy.utils.verbosity"]], "applied libraries": [[727, "term-Applied-Libraries"]], "automatic code conversions": [[727, "term-Automatic-Code-Conversions"]], "backend handler": [[727, "term-Backend-Handler"]], "compositional functions": [[727, "term-Compositional-Functions"]], "convenience functions": [[727, "term-Convenience-Functions"]], "framework": [[727, "term-Framework"]], "framework handler": [[727, "term-Framework-Handler"]], "graph compiler": [[727, "term-Graph-Compiler"]], "ivy array": [[727, "term-Ivy-Array"]], "ivy backends": [[727, "term-Ivy-Backends"]], "ivy builder": [[727, "term-Ivy-Builder"]], "ivy compiler": [[727, "term-Ivy-Compiler"]], "ivy container": [[727, "term-Ivy-Container"]], "ivy frontends": [[727, "term-Ivy-Frontends"]], "ivy functional api": [[727, "term-Ivy-Functional-API"]], "ivy graph compiler": [[727, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[727, "term-Ivy-Transpiler"]], "mixed functions": [[727, "term-Mixed-Functions"]], "native array": [[727, "term-Native-Array"]], "nestable functions": [[727, "term-Nestable-Functions"]], "pipeline": [[727, "term-Pipeline"]], "primary functions": [[727, "term-Primary-Functions"]], "standalone functions": [[727, "term-Standalone-Functions"]], "submodule helper functions": [[727, "term-Submodule-Helper-Functions"]]}})