Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_demo", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/contributing/volunteer_ranks", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_demo.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/contributing/volunteer_ranks.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Contributor Leaderboard", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 164, 167, 168, 169, 171, 175, 176, 190, 193, 203, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 570, 576, 581, 582, 583, 584, 586, 588, 589, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 710, 712, 714, 715, 720, 721, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 764, 766, 767, 769, 778, 779, 781, 782, 784, 785, 786, 787, 796, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868], "repo": [0, 12, 41, 807, 810, 814, 817, 819, 820, 825, 833, 835, 850], "hold": [0, 53, 54, 58, 66, 76, 81, 89, 93, 94, 329, 345, 350, 366, 381, 461, 489, 513, 514, 519, 566, 567, 623, 626, 636, 668, 748, 764, 811, 843, 862], "all": [0, 1, 3, 4, 5, 8, 9, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 40, 41, 43, 44, 46, 48, 49, 53, 54, 57, 58, 60, 62, 67, 68, 70, 71, 72, 75, 76, 77, 80, 81, 83, 85, 90, 91, 93, 94, 122, 130, 137, 141, 142, 143, 197, 204, 236, 240, 268, 269, 323, 324, 336, 354, 363, 366, 369, 370, 371, 372, 381, 402, 411, 413, 414, 415, 423, 428, 436, 437, 439, 442, 443, 464, 475, 483, 488, 518, 524, 527, 544, 564, 565, 581, 588, 589, 603, 606, 618, 620, 621, 623, 624, 625, 626, 628, 629, 630, 632, 633, 637, 648, 651, 652, 657, 670, 675, 676, 679, 684, 693, 697, 699, 705, 706, 707, 708, 709, 710, 719, 720, 721, 722, 728, 731, 736, 761, 763, 766, 767, 768, 769, 781, 782, 788, 791, 796, 798, 800, 802, 803, 806, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 862, 864, 867, 868], "jupyt": [0, 851, 863], "exampl": [0, 7, 9, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 325, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 387, 388, 389, 390, 392, 393, 395, 396, 397, 400, 401, 402, 405, 406, 407, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 432, 434, 437, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 494, 495, 497, 500, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 774, 791, 795, 796, 800, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 831, 832, 835, 836, 840, 842, 843, 844, 845, 846, 852, 858, 859, 862, 864, 867, 868], "tab": [0, 808, 809, 819, 825, 843], "ivi": [0, 1, 2, 6, 7, 9, 10, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 809, 813, 814, 816, 818, 820, 821, 823, 825, 826, 827, 828, 829, 831, 838, 839, 846, 848, 851, 852, 853, 857, 868], "": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 42, 44, 45, 46, 49, 53, 54, 55, 58, 66, 76, 78, 81, 89, 118, 135, 141, 142, 162, 163, 192, 195, 196, 208, 243, 278, 324, 329, 330, 331, 333, 343, 345, 351, 355, 357, 363, 366, 367, 369, 370, 371, 372, 375, 376, 381, 384, 385, 391, 397, 402, 413, 421, 425, 431, 440, 445, 447, 448, 464, 466, 467, 475, 491, 492, 493, 502, 512, 522, 540, 541, 547, 561, 583, 584, 605, 607, 608, 609, 610, 612, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 630, 636, 640, 642, 644, 646, 652, 659, 670, 677, 678, 684, 720, 754, 756, 767, 781, 782, 783, 784, 785, 786, 787, 791, 800, 802, 803, 804, 805, 806, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 866, 867], "web": 0, "relev": [0, 49, 72, 134, 618, 786, 802, 808, 809, 810, 815, 818, 819, 820, 822, 825, 829, 830, 833, 834, 835, 843, 847, 851, 859, 866, 867], "link": [0, 18, 27, 28, 42, 802, 808, 809, 810, 817, 819, 820, 826, 832, 855, 857, 859], "list": [0, 4, 5, 7, 8, 10, 43, 48, 49, 50, 52, 53, 54, 57, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 130, 132, 135, 136, 137, 139, 145, 149, 151, 164, 168, 169, 176, 192, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 344, 345, 351, 352, 353, 355, 356, 357, 366, 369, 370, 372, 379, 387, 388, 389, 391, 392, 393, 394, 405, 406, 407, 408, 412, 414, 418, 423, 427, 430, 435, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 459, 460, 461, 470, 481, 483, 484, 485, 489, 491, 493, 494, 495, 497, 499, 504, 512, 513, 514, 515, 524, 526, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 544, 546, 548, 550, 551, 552, 554, 555, 558, 562, 566, 567, 581, 582, 584, 586, 587, 588, 589, 590, 602, 603, 608, 613, 618, 619, 620, 621, 623, 625, 626, 628, 630, 631, 634, 635, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 679, 681, 686, 687, 688, 689, 690, 693, 696, 697, 698, 699, 700, 703, 704, 708, 709, 710, 711, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 753, 754, 756, 757, 758, 761, 763, 766, 767, 768, 769, 774, 779, 782, 788, 795, 796, 800, 807, 808, 809, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 831, 832, 833, 835, 836, 840, 843, 844, 845, 846, 854, 861, 862, 867], "open": [0, 3, 5, 7, 8, 9, 24, 27, 28, 41, 42, 43, 44, 54, 62, 85, 122, 618, 632, 729, 731, 802, 803, 804, 809, 810, 811, 817, 820, 823, 825, 832, 833, 838, 847, 850, 851, 852, 854, 855, 859, 860, 861, 863, 864], "task": [0, 6, 44, 629, 705, 706, 707, 802, 803, 805, 809, 810, 811, 832, 833, 861, 867, 868], "avil": 0, "discuss": [0, 808, 810, 817, 820, 821, 831, 832, 834, 835, 838, 841, 842, 843, 846, 852, 857, 862], "suggest": [0, 808, 809, 810, 817, 820, 826, 830, 832, 835, 836, 837, 847], "new": [0, 6, 7, 9, 11, 12, 14, 16, 19, 22, 23, 24, 25, 27, 28, 29, 43, 45, 48, 53, 54, 55, 60, 61, 70, 72, 76, 77, 78, 81, 83, 84, 126, 129, 131, 132, 137, 138, 139, 144, 145, 182, 225, 271, 273, 277, 329, 334, 345, 350, 366, 369, 372, 381, 404, 451, 459, 460, 474, 480, 519, 535, 536, 537, 539, 542, 543, 545, 566, 567, 570, 572, 579, 581, 582, 588, 605, 608, 610, 611, 612, 618, 619, 621, 623, 624, 625, 628, 630, 631, 652, 664, 672, 692, 696, 700, 713, 725, 726, 727, 779, 782, 785, 786, 791, 796, 802, 803, 808, 809, 810, 811, 813, 815, 816, 818, 819, 820, 822, 823, 825, 826, 829, 831, 832, 833, 834, 835, 836, 838, 839, 842, 845, 847, 848, 850, 851, 852, 854, 859, 863, 867, 868], "should": [0, 4, 6, 9, 10, 19, 22, 23, 24, 25, 44, 47, 49, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 69, 70, 72, 75, 76, 77, 78, 80, 81, 83, 85, 86, 88, 89, 91, 93, 96, 98, 99, 109, 113, 121, 135, 137, 141, 142, 150, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 297, 308, 324, 330, 331, 342, 346, 347, 348, 349, 353, 358, 359, 360, 361, 363, 366, 368, 369, 370, 371, 372, 376, 381, 384, 392, 393, 394, 396, 401, 412, 427, 436, 442, 449, 474, 475, 498, 499, 512, 513, 514, 529, 547, 552, 603, 605, 608, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 645, 646, 655, 656, 657, 658, 660, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 696, 712, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 747, 748, 749, 750, 751, 752, 753, 755, 756, 763, 764, 766, 768, 778, 779, 781, 782, 784, 785, 786, 787, 795, 796, 804, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 849, 851, 855, 857, 858, 861, 863, 868], "comprehens": [0, 16, 810, 814, 834], "possibl": [0, 3, 33, 49, 53, 72, 76, 83, 93, 124, 243, 286, 307, 330, 331, 363, 366, 369, 371, 372, 391, 444, 453, 454, 455, 461, 463, 465, 466, 467, 474, 489, 562, 621, 623, 625, 636, 648, 692, 693, 694, 696, 698, 699, 701, 703, 750, 752, 766, 782, 796, 799, 802, 803, 806, 808, 809, 810, 814, 817, 818, 820, 822, 823, 825, 826, 828, 830, 831, 832, 833, 835, 838, 840, 843, 846, 851, 859, 861, 867], "us": [0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 91, 93, 94, 96, 99, 106, 134, 137, 148, 160, 162, 163, 174, 175, 195, 196, 198, 203, 207, 208, 209, 210, 212, 215, 221, 229, 257, 258, 260, 261, 263, 264, 265, 267, 268, 270, 279, 283, 288, 307, 309, 310, 312, 313, 314, 322, 343, 346, 347, 350, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 387, 388, 389, 391, 392, 393, 394, 395, 397, 402, 404, 405, 406, 407, 410, 412, 413, 414, 416, 421, 423, 427, 431, 433, 435, 436, 438, 439, 440, 442, 443, 448, 465, 469, 473, 475, 483, 491, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 512, 519, 522, 540, 541, 550, 551, 562, 563, 570, 572, 573, 575, 581, 582, 594, 595, 597, 604, 605, 610, 611, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 649, 650, 652, 655, 660, 662, 670, 674, 678, 681, 684, 686, 695, 696, 697, 701, 705, 706, 707, 708, 710, 711, 717, 718, 719, 721, 728, 729, 730, 731, 733, 734, 735, 736, 739, 741, 749, 764, 766, 767, 768, 769, 774, 778, 779, 781, 782, 783, 784, 785, 786, 791, 795, 796, 800, 803, 807, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 852, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868], "easi": [0, 27, 28, 41, 809, 810, 815, 816, 818, 828, 830, 833, 835, 838, 851, 859, 861, 867, 868], "follow": [0, 6, 10, 21, 22, 23, 25, 27, 28, 31, 32, 33, 39, 42, 43, 53, 54, 55, 57, 58, 64, 70, 76, 77, 78, 80, 81, 130, 161, 164, 209, 219, 236, 243, 269, 271, 278, 279, 314, 363, 369, 371, 372, 375, 391, 404, 412, 448, 463, 475, 491, 493, 550, 551, 552, 581, 582, 605, 608, 610, 611, 612, 618, 619, 620, 621, 623, 624, 625, 626, 630, 634, 652, 655, 668, 674, 684, 714, 720, 739, 740, 741, 742, 782, 786, 802, 804, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 858, 861, 864], "attract": 0, "visual": [0, 10, 45, 800, 802, 809, 825, 832, 835, 846, 861, 863, 866], "graph": [0, 3, 5, 8, 10, 16, 17, 20, 22, 24, 25, 28, 34, 35, 40, 45, 46, 64, 634, 739, 740, 741, 742, 774, 802, 818, 828, 832, 834, 838, 840, 845, 846, 848, 852, 853, 854, 855, 856, 857, 861, 864], "nice": [0, 835, 852, 861], "format": [0, 24, 25, 27, 28, 39, 41, 42, 43, 51, 54, 57, 66, 69, 70, 71, 74, 80, 96, 114, 159, 193, 369, 370, 380, 410, 441, 508, 535, 615, 619, 620, 623, 625, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 749, 759, 760, 761, 778, 802, 809, 810, 813, 819, 820, 821, 822, 823, 824, 832, 834, 843, 855, 857, 859, 861, 862], "result": [0, 3, 5, 6, 7, 8, 9, 10, 12, 14, 22, 23, 24, 25, 27, 28, 39, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 176, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 441, 444, 445, 446, 447, 449, 450, 452, 459, 460, 463, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 530, 531, 535, 536, 537, 542, 543, 547, 552, 559, 566, 567, 604, 605, 606, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 711, 714, 715, 717, 721, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 768, 774, 788, 796, 800, 802, 806, 808, 810, 814, 815, 817, 818, 819, 820, 822, 823, 825, 827, 828, 830, 831, 832, 833, 835, 836, 840, 843, 846, 854, 855, 856, 862, 864], "etc": [0, 30, 35, 42, 49, 53, 62, 64, 68, 72, 76, 85, 91, 125, 133, 134, 137, 369, 376, 397, 402, 413, 498, 499, 501, 502, 618, 632, 634, 728, 729, 730, 731, 739, 740, 741, 742, 766, 769, 781, 782, 783, 784, 785, 786, 787, 808, 809, 810, 811, 814, 815, 816, 817, 818, 820, 822, 824, 827, 832, 833, 835, 836, 840, 842, 843, 846, 848, 852, 854, 859, 861, 867], "gener": [0, 5, 16, 20, 25, 27, 28, 30, 33, 41, 43, 45, 46, 49, 52, 53, 57, 62, 68, 72, 75, 76, 80, 85, 91, 94, 122, 133, 134, 143, 151, 236, 239, 249, 250, 265, 269, 278, 307, 310, 314, 315, 316, 318, 319, 320, 321, 322, 323, 330, 331, 363, 366, 369, 370, 372, 376, 381, 412, 418, 438, 483, 500, 512, 618, 619, 621, 625, 626, 628, 632, 636, 648, 675, 676, 679, 682, 704, 728, 729, 731, 732, 754, 766, 769, 774, 786, 795, 808, 809, 810, 813, 814, 815, 817, 820, 821, 822, 823, 824, 827, 828, 831, 832, 833, 836, 839, 840, 842, 844, 845, 846, 848, 859, 860, 861, 862, 863, 864, 865, 866, 867], "tone": [0, 4], "feel": [0, 42, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 804, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 847, 854], "free": [0, 5, 41, 42, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 804, 806, 807, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 847, 854, 862, 864], "includ": [0, 10, 16, 20, 30, 35, 49, 52, 53, 54, 58, 63, 66, 67, 70, 72, 75, 76, 77, 81, 86, 89, 90, 122, 123, 124, 133, 134, 136, 143, 216, 240, 244, 245, 246, 249, 251, 254, 262, 270, 283, 288, 309, 312, 313, 314, 317, 323, 326, 328, 330, 331, 335, 336, 337, 339, 340, 341, 342, 344, 346, 347, 349, 350, 351, 352, 355, 356, 363, 366, 369, 372, 381, 387, 388, 389, 419, 422, 424, 466, 467, 469, 472, 474, 476, 479, 500, 502, 503, 511, 515, 517, 518, 520, 521, 522, 548, 602, 618, 621, 623, 625, 626, 630, 632, 633, 636, 637, 650, 661, 682, 684, 708, 731, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 769, 781, 782, 785, 798, 800, 802, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 838, 840, 851, 854, 855, 858, 859, 861, 863, 866, 867, 868], "emoji": [0, 808], "don": [0, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 41, 43, 68, 91, 802, 808, 809, 810, 819, 820, 821, 826, 830, 835, 838, 844, 846, 847, 852, 854], "t": [0, 4, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 39, 41, 42, 43, 53, 57, 68, 76, 80, 91, 93, 94, 98, 343, 358, 366, 368, 370, 423, 552, 570, 584, 606, 623, 624, 625, 630, 649, 651, 716, 761, 782, 802, 804, 808, 809, 810, 813, 815, 816, 818, 819, 820, 821, 822, 825, 826, 828, 829, 830, 831, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 856, 859, 861, 863], "keep": [0, 1, 12, 14, 18, 24, 25, 27, 53, 60, 70, 76, 83, 93, 96, 354, 370, 442, 628, 703, 807, 808, 809, 810, 814, 817, 818, 819, 824, 831, 832, 835, 836, 838, 843, 845, 847, 855], "thing": [0, 25, 39, 41, 795, 807, 808, 809, 810, 816, 832, 835, 838, 842, 843, 850, 851, 852, 861], "super": [0, 3, 5, 12, 14, 27, 28, 41, 53, 76, 370, 423, 802, 824, 840, 843, 844, 845, 855], "seriou": 0, "given": [0, 3, 18, 27, 40, 53, 54, 59, 60, 62, 70, 76, 77, 78, 82, 83, 85, 93, 94, 96, 98, 99, 122, 126, 133, 134, 154, 155, 156, 157, 158, 170, 175, 194, 203, 205, 207, 208, 209, 211, 215, 288, 317, 326, 329, 335, 336, 343, 344, 345, 347, 350, 363, 366, 369, 370, 371, 372, 375, 376, 381, 387, 388, 389, 390, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 413, 423, 428, 441, 445, 446, 447, 449, 450, 451, 452, 462, 463, 464, 471, 473, 485, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 512, 513, 514, 515, 521, 543, 547, 566, 567, 577, 604, 605, 608, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 685, 686, 687, 688, 689, 692, 693, 694, 695, 697, 698, 702, 703, 715, 716, 725, 726, 729, 730, 731, 733, 745, 746, 747, 748, 761, 766, 767, 768, 769, 774, 778, 779, 781, 782, 784, 785, 786, 787, 788, 795, 796, 805, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 841, 842, 844, 851, 852, 858, 863, 864, 867, 868], "an": [0, 2, 3, 6, 9, 10, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 33, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 171, 175, 176, 206, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 311, 312, 313, 315, 316, 323, 324, 325, 326, 327, 328, 330, 331, 333, 336, 339, 344, 348, 353, 361, 363, 366, 369, 370, 371, 372, 375, 376, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 400, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 423, 424, 447, 448, 452, 453, 454, 455, 459, 460, 461, 463, 470, 474, 475, 481, 483, 488, 489, 491, 492, 493, 496, 498, 499, 501, 504, 505, 510, 511, 512, 513, 514, 515, 516, 519, 520, 523, 528, 530, 531, 539, 542, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 561, 567, 570, 571, 580, 584, 588, 589, 590, 603, 606, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 650, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 714, 727, 729, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 768, 769, 771, 774, 778, 779, 781, 782, 784, 785, 786, 787, 796, 800, 802, 804, 806, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868], "intern": [0, 10, 70, 101, 102, 103, 630, 708, 718, 719, 781, 782, 783, 784, 785, 787, 811, 815, 818, 821, 823, 831, 833, 835, 837], "releas": [0, 42, 808, 809, 820, 836, 838, 846, 852, 861, 867], "tracer": [0, 3, 5, 6, 8, 9, 19, 22, 23, 24, 25, 28, 44, 46, 802, 832, 839, 841, 846, 848, 855, 856, 857], "i": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 188, 190, 192, 193, 195, 196, 198, 200, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 400, 402, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 425, 426, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 562, 563, 566, 567, 568, 570, 576, 580, 581, 582, 584, 586, 588, 589, 590, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 764, 766, 767, 768, 769, 774, 778, 779, 781, 782, 783, 784, 785, 786, 788, 791, 792, 795, 796, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868], "around": [0, 11, 12, 14, 16, 53, 70, 76, 99, 372, 475, 483, 808, 810, 814, 815, 817, 821, 827, 828, 832, 836, 842, 846, 848, 854, 859, 861, 868], "corner": [0, 53, 76, 369, 404, 809, 810, 825, 832], "anybodi": 0, "abl": [0, 3, 5, 29, 33, 44, 46, 70, 93, 809, 810, 811, 814, 820, 825, 828, 831, 832, 836, 840, 845, 854, 864, 867], "start": [0, 1, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 49, 53, 70, 72, 76, 80, 122, 130, 133, 134, 347, 357, 366, 367, 369, 372, 381, 411, 465, 468, 476, 478, 487, 521, 618, 768, 795, 800, 803, 808, 809, 810, 811, 813, 819, 820, 822, 823, 825, 826, 827, 832, 835, 838, 839, 840, 842, 843, 844, 846, 854, 855, 861, 867], "work": [0, 25, 27, 28, 39, 40, 42, 46, 48, 53, 76, 93, 381, 522, 626, 630, 678, 715, 716, 720, 725, 726, 802, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 831, 832, 833, 835, 836, 839, 840, 842, 844, 845, 847, 852, 854, 855, 856, 859, 861, 863, 865, 868], "shortli": 0, "so": [0, 1, 5, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 39, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 366, 369, 372, 379, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 625, 630, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 673, 674, 675, 677, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 719, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 796, 802, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 854, 855, 856, 861, 862, 863, 865], "worri": [0, 27, 28, 808, 809, 826], "about": [0, 16, 17, 18, 21, 23, 25, 27, 28, 31, 42, 43, 50, 73, 161, 164, 619, 800, 802, 804, 807, 808, 809, 810, 811, 813, 814, 817, 819, 820, 821, 826, 827, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 852, 856, 862, 863, 866], "have": [0, 1, 3, 4, 5, 7, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 39, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 161, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 324, 330, 331, 332, 333, 338, 342, 344, 346, 347, 348, 349, 353, 356, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 401, 402, 404, 405, 406, 407, 410, 412, 413, 417, 419, 420, 422, 423, 428, 429, 432, 433, 434, 435, 440, 444, 445, 446, 447, 448, 449, 450, 454, 455, 460, 461, 463, 468, 476, 477, 478, 479, 481, 483, 485, 487, 494, 495, 497, 498, 499, 501, 502, 503, 505, 512, 513, 514, 515, 519, 523, 530, 531, 535, 536, 537, 542, 543, 552, 566, 567, 570, 604, 605, 608, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 778, 779, 781, 782, 784, 785, 786, 787, 795, 796, 802, 804, 805, 806, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 863, 867, 868], "access": [0, 24, 27, 28, 70, 802, 808, 809, 810, 819, 820, 826, 831, 832, 847, 855, 861, 863, 865], "transpil": [0, 6, 7, 8, 9, 11, 16, 17, 19, 20, 30, 773, 774, 808, 809, 824, 825, 832, 839, 840, 841, 848, 853, 854, 856, 861, 867, 868], "code": [0, 4, 7, 8, 9, 16, 17, 24, 25, 27, 29, 30, 31, 32, 33, 34, 41, 42, 51, 52, 70, 74, 75, 99, 210, 256, 381, 519, 528, 536, 537, 552, 566, 570, 584, 620, 623, 625, 626, 628, 647, 669, 670, 671, 700, 800, 802, 805, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 827, 828, 829, 831, 832, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868], "now": [0, 4, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 43, 782, 783, 784, 802, 809, 814, 815, 816, 817, 818, 819, 820, 821, 825, 827, 829, 832, 833, 835, 836, 838, 842, 843, 845, 846, 852, 854, 855, 856, 861], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 76, 77, 93, 98, 99, 372, 381, 463, 519, 542, 543, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 652, 778, 779, 781, 782, 784, 785, 786, 787, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 861], "can": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 46, 49, 50, 53, 54, 58, 60, 62, 64, 72, 73, 76, 77, 81, 83, 85, 87, 93, 94, 108, 111, 123, 124, 134, 136, 151, 190, 207, 208, 209, 297, 314, 361, 363, 369, 370, 371, 375, 376, 379, 381, 391, 404, 428, 433, 435, 440, 448, 460, 491, 499, 500, 505, 512, 559, 570, 603, 606, 615, 618, 619, 620, 623, 624, 625, 626, 628, 632, 652, 660, 667, 677, 681, 696, 700, 729, 730, 731, 739, 763, 766, 767, 768, 769, 774, 796, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 867, 868], "style": [0, 10, 41, 43, 372, 475, 633, 737, 810, 826, 861], "stori": 0, "If": [0, 1, 3, 4, 6, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 42, 45, 46, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 94, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 176, 192, 208, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 323, 324, 326, 329, 330, 331, 332, 333, 335, 336, 337, 340, 344, 345, 350, 351, 353, 355, 356, 357, 363, 366, 367, 369, 370, 371, 372, 375, 376, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 397, 400, 402, 404, 405, 406, 407, 412, 413, 414, 416, 421, 423, 425, 427, 428, 433, 435, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 461, 463, 464, 465, 466, 467, 470, 474, 480, 481, 482, 483, 484, 485, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 559, 566, 567, 571, 581, 582, 584, 586, 588, 589, 602, 603, 606, 608, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 648, 649, 652, 655, 656, 657, 659, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 720, 721, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 781, 782, 784, 785, 791, 796, 800, 802, 803, 804, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 845, 846, 847, 850, 854, 855, 856], "anyon": [0, 802, 803, 810, 819, 846, 851, 867], "ha": [0, 3, 5, 6, 8, 9, 10, 12, 14, 18, 20, 24, 27, 28, 30, 33, 35, 39, 46, 49, 53, 58, 60, 64, 66, 70, 73, 76, 77, 81, 83, 87, 89, 93, 135, 192, 216, 236, 239, 241, 243, 253, 269, 271, 276, 279, 281, 282, 286, 325, 326, 327, 363, 370, 371, 372, 381, 404, 437, 447, 458, 482, 484, 488, 511, 513, 514, 516, 548, 618, 620, 621, 625, 626, 628, 633, 634, 636, 651, 652, 667, 668, 676, 677, 679, 681, 684, 692, 699, 737, 740, 741, 742, 747, 748, 751, 753, 754, 755, 756, 766, 769, 791, 808, 810, 814, 816, 817, 818, 819, 820, 821, 822, 823, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 844, 845, 846, 847, 850, 851, 852, 854, 856, 857, 860, 861, 863, 864, 867], "ani": [0, 5, 8, 12, 14, 16, 17, 18, 19, 20, 29, 30, 33, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 58, 67, 68, 72, 74, 75, 76, 77, 90, 91, 93, 98, 99, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 151, 152, 167, 171, 175, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 323, 324, 330, 331, 333, 336, 363, 366, 369, 370, 371, 372, 375, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 413, 414, 423, 428, 443, 464, 475, 483, 491, 492, 493, 512, 515, 518, 519, 520, 524, 534, 535, 536, 537, 538, 542, 546, 548, 550, 554, 556, 557, 575, 582, 589, 590, 597, 603, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 714, 715, 717, 718, 725, 727, 731, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 761, 764, 768, 778, 779, 781, 782, 784, 785, 786, 787, 791, 795, 796, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 859, 860, 861, 862, 864, 867, 868], "question": [0, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852], "ping": 0, "me": [0, 810], "guillermo": 0, "commun": [0, 42, 803, 808, 809, 810, 811, 846, 851, 860, 861, 863], "ux": 0, "team": [0, 802, 803, 808, 809, 810, 811, 832, 847, 863], "discord": [0, 42, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852], "channel": [0, 25, 43, 53, 54, 57, 76, 77, 80, 98, 99, 369, 375, 392, 393, 394, 404, 491, 492, 493, 496, 535, 539, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 778, 779, 781, 782, 784, 785, 786, 787, 810, 817, 825, 834], "To": [0, 6, 8, 9, 10, 12, 14, 18, 22, 23, 24, 25, 27, 28, 39, 42, 43, 44, 94, 243, 371, 447, 576, 621, 623, 781, 808, 809, 814, 815, 816, 817, 820, 822, 824, 825, 826, 828, 829, 832, 833, 834, 835, 836, 843, 844, 845, 847, 854, 855], "ensur": [0, 8, 9, 12, 14, 22, 23, 24, 25, 53, 54, 76, 77, 369, 370, 405, 406, 407, 438, 552, 623, 761, 802, 805, 808, 809, 810, 815, 820, 821, 822, 824, 826, 827, 829, 831, 832, 833, 834, 835, 836, 847, 861], "similar": [0, 18, 27, 28, 53, 278, 371, 443, 621, 625, 652, 782, 806, 808, 809, 818, 819, 820, 821, 824, 825, 826, 828, 829, 830, 832, 833, 835, 836, 843, 846, 850, 855, 857, 858, 859, 860, 867], "ar": [0, 1, 3, 4, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 44, 45, 48, 49, 52, 53, 54, 57, 58, 60, 62, 63, 64, 70, 72, 75, 76, 77, 80, 81, 83, 85, 86, 87, 93, 94, 98, 99, 122, 132, 134, 137, 143, 197, 202, 204, 209, 233, 235, 236, 239, 243, 264, 265, 269, 274, 275, 279, 281, 286, 287, 288, 323, 325, 326, 327, 329, 332, 334, 335, 336, 339, 340, 345, 350, 353, 357, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 385, 391, 392, 393, 394, 397, 402, 404, 412, 413, 422, 423, 427, 435, 436, 438, 442, 443, 444, 448, 449, 453, 454, 455, 465, 466, 467, 469, 475, 478, 482, 483, 491, 493, 498, 499, 500, 501, 502, 512, 517, 518, 519, 520, 521, 522, 524, 527, 528, 529, 538, 544, 549, 553, 564, 565, 574, 584, 596, 606, 618, 620, 621, 623, 624, 625, 626, 628, 630, 632, 633, 634, 648, 649, 652, 655, 657, 661, 662, 663, 667, 668, 670, 673, 674, 677, 678, 682, 683, 684, 689, 690, 693, 697, 699, 709, 714, 719, 720, 721, 729, 730, 731, 734, 735, 736, 737, 739, 741, 761, 763, 766, 767, 768, 769, 774, 781, 784, 787, 788, 795, 796, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868], "across": [0, 8, 9, 10, 22, 23, 24, 25, 39, 53, 63, 70, 76, 77, 86, 98, 207, 208, 236, 243, 269, 287, 371, 375, 443, 493, 496, 527, 548, 583, 620, 621, 623, 625, 630, 633, 648, 652, 714, 734, 735, 782, 808, 814, 820, 822, 824, 827, 828, 830, 835, 838, 859, 861, 866], "templat": [0, 802, 817, 823, 835], "help": [0, 16, 43, 45, 50, 525, 570, 623, 636, 755, 781, 802, 803, 804, 808, 809, 811, 815, 816, 817, 818, 819, 820, 822, 826, 828, 829, 831, 832, 835, 836, 842, 843, 844, 847, 848, 857, 861, 863, 867], "get": [0, 3, 4, 6, 7, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 41, 42, 44, 50, 51, 58, 70, 74, 81, 98, 159, 160, 161, 164, 192, 193, 194, 197, 203, 208, 211, 215, 372, 480, 526, 544, 565, 583, 619, 620, 623, 626, 630, 684, 710, 766, 781, 782, 795, 803, 805, 807, 808, 809, 811, 813, 814, 819, 820, 821, 825, 828, 829, 830, 831, 832, 833, 834, 835, 840, 841, 842, 843, 844, 848, 852, 855, 856, 861, 867], "It": [0, 3, 6, 9, 10, 19, 22, 23, 24, 25, 27, 28, 29, 30, 39, 40, 41, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 324, 330, 331, 332, 333, 338, 342, 344, 346, 347, 348, 349, 353, 361, 363, 366, 369, 370, 371, 372, 375, 376, 381, 382, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 401, 402, 404, 405, 406, 407, 410, 412, 417, 419, 420, 428, 429, 432, 433, 434, 435, 443, 444, 445, 446, 447, 449, 450, 460, 463, 468, 476, 477, 478, 479, 481, 483, 487, 491, 494, 495, 497, 498, 499, 501, 502, 512, 513, 514, 515, 523, 530, 531, 535, 536, 537, 542, 543, 552, 566, 567, 568, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 676, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 707, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 742, 743, 746, 747, 748, 751, 753, 754, 756, 757, 758, 781, 782, 802, 805, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 853, 856, 859, 861, 862, 864, 865, 866, 867, 868], "locat": [0, 43, 137, 381, 513, 618, 630, 632, 635, 712, 728, 745, 796, 808, 810, 816, 817, 821, 832, 833, 835, 836, 847, 859], "asset": [0, 848], "01_templat": 0, "ipynb": 0, "pleas": [0, 33, 42, 46, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852], "make": [0, 3, 5, 7, 8, 9, 10, 19, 27, 28, 29, 41, 45, 53, 76, 369, 412, 791, 802, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 842, 843, 845, 847, 851, 852, 855, 859, 861, 862, 863, 864, 867, 868], "copi": [0, 43, 46, 49, 50, 51, 52, 53, 54, 60, 70, 72, 73, 74, 75, 76, 77, 83, 93, 97, 123, 124, 125, 129, 140, 148, 210, 270, 372, 451, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 489, 545, 571, 581, 588, 589, 618, 619, 620, 621, 623, 628, 630, 635, 692, 693, 694, 696, 698, 699, 701, 703, 709, 744, 746, 774, 796, 809, 810, 814, 816, 819, 820, 823, 832, 833, 840, 846, 854, 855, 856], "firstli": [0, 19, 20, 23, 29, 30, 34, 39, 815, 820, 822, 823, 824, 828, 829, 831, 838, 843, 857, 867], "updat": [0, 4, 5, 6, 7, 9, 10, 19, 21, 22, 23, 24, 25, 27, 28, 41, 43, 48, 54, 55, 70, 77, 78, 93, 372, 480, 552, 566, 567, 570, 571, 593, 604, 605, 608, 610, 611, 612, 623, 624, 625, 629, 630, 648, 651, 705, 706, 707, 715, 716, 720, 725, 726, 774, 779, 785, 786, 791, 796, 802, 808, 809, 810, 813, 814, 815, 818, 819, 820, 822, 827, 829, 830, 832, 833, 835, 838, 840, 842, 843, 845, 846], "file": [0, 6, 41, 42, 43, 54, 70, 579, 601, 623, 784, 800, 804, 808, 809, 810, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 828, 832, 833, 834, 835, 836, 840, 843, 847, 857, 860, 861, 862], "name": [0, 6, 7, 27, 28, 39, 41, 42, 43, 53, 58, 64, 68, 76, 81, 87, 91, 243, 369, 370, 372, 416, 422, 485, 488, 525, 526, 621, 623, 626, 634, 661, 662, 666, 674, 675, 677, 678, 682, 739, 740, 741, 763, 767, 774, 784, 791, 792, 794, 800, 808, 809, 810, 812, 816, 817, 818, 819, 822, 823, 824, 827, 832, 833, 835, 836, 837, 838, 840, 843, 845, 861], "match": [0, 50, 53, 70, 73, 76, 148, 243, 278, 334, 336, 366, 369, 371, 372, 413, 443, 458, 480, 484, 562, 619, 621, 623, 626, 662, 663, 668, 684, 761, 806, 808, 815, 817, 818, 822, 825, 833, 862, 867], "topic": [0, 16, 19, 20, 21, 29, 30, 31, 32, 33, 34, 829, 842, 861], "your": [0, 2, 3, 4, 6, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 39, 41, 43, 45, 802, 803, 805, 806, 807, 808, 809, 811, 812, 814, 816, 817, 819, 823, 825, 826, 830, 832, 834, 836, 838, 843, 844, 846, 847, 851, 852, 854, 855, 861], "Then": [0, 46, 625, 652, 804, 808, 809, 810, 816, 817, 819, 825, 826, 829, 831, 835, 836, 846], "place": [0, 8, 9, 22, 23, 24, 25, 41, 48, 49, 52, 53, 54, 58, 60, 70, 72, 74, 75, 76, 77, 81, 83, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 307, 308, 311, 323, 324, 329, 330, 331, 333, 336, 337, 338, 342, 344, 345, 346, 347, 349, 350, 351, 355, 356, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 465, 475, 480, 483, 499, 512, 515, 519, 528, 536, 537, 542, 546, 548, 550, 551, 552, 566, 570, 584, 589, 593, 613, 618, 619, 620, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 786, 802, 806, 807, 810, 813, 814, 817, 818, 819, 821, 822, 823, 825, 827, 828, 832, 833, 835, 836, 838, 845, 848, 863], "its": [0, 9, 18, 20, 27, 28, 30, 33, 40, 41, 43, 48, 50, 53, 60, 70, 73, 76, 77, 83, 96, 108, 111, 114, 119, 149, 154, 155, 156, 157, 158, 209, 236, 269, 288, 297, 361, 369, 372, 381, 408, 416, 488, 515, 539, 587, 615, 617, 619, 620, 621, 623, 626, 628, 630, 667, 692, 696, 697, 701, 714, 763, 796, 802, 808, 809, 815, 818, 819, 820, 821, 823, 824, 825, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 845, 846, 848, 854, 860, 861, 867], "folder": [0, 8, 9, 22, 23, 24, 25, 43, 802, 809, 810, 814, 817, 819, 825, 828, 832, 835, 836, 837], "next": [0, 5, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 41, 43, 53, 76, 161, 342, 346, 351, 355, 366, 619, 781, 786, 802, 808, 809, 810, 816, 820, 822, 823, 825, 826, 829, 841, 842, 843, 852, 861, 863], "edit": [0, 808, 809, 810, 826], "titl": [0, 10, 13, 15, 26, 42, 45, 802, 808, 810, 817], "descript": [0, 1, 36, 37, 38, 43, 46, 49, 52, 53, 58, 75, 76, 81, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 324, 330, 331, 333, 336, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 475, 483, 512, 515, 542, 546, 548, 550, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 808, 810, 823, 830, 831], "accordingli": [0, 53, 58, 63, 64, 66, 67, 76, 81, 86, 89, 90, 135, 236, 241, 243, 259, 269, 283, 330, 331, 366, 618, 621, 626, 633, 634, 636, 637, 684, 735, 739, 740, 741, 742, 750, 751, 752, 753, 754, 755, 756, 757, 758, 832, 840, 847], "thei": [0, 10, 34, 39, 44, 53, 58, 62, 64, 70, 81, 85, 87, 174, 288, 340, 366, 619, 621, 626, 629, 632, 634, 682, 705, 706, 728, 739, 761, 787, 802, 807, 808, 809, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 826, 828, 829, 831, 832, 835, 836, 838, 840, 842, 843, 844, 845, 846, 854, 858, 861, 863, 864, 867, 868], "render": [0, 817, 823], "correctli": [0, 24, 27, 28, 41, 53, 58, 63, 76, 81, 86, 335, 366, 381, 518, 519, 520, 521, 522, 626, 633, 668, 734, 808, 809, 810, 815, 818, 820, 822, 824, 826, 827, 833, 835, 838, 844, 846, 854, 855], "webpag": [0, 16], "content": [0, 1, 13, 15, 26, 27, 42, 43, 53, 70, 76, 381, 519, 808, 810, 817, 821, 831, 834, 840, 843, 847], "behind": [0, 18, 27, 802, 813, 827, 835, 839, 841], "exist": [0, 18, 27, 28, 41, 42, 43, 46, 49, 53, 54, 70, 72, 76, 77, 83, 124, 372, 453, 454, 460, 461, 463, 465, 466, 467, 474, 489, 534, 570, 623, 628, 690, 692, 693, 694, 696, 698, 699, 701, 703, 786, 788, 800, 802, 808, 809, 814, 816, 821, 822, 823, 828, 829, 831, 832, 835, 838, 840, 846, 848, 850, 851, 859, 861, 864, 867], "cell": [0, 1, 3, 4, 5, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 42, 57, 80, 625, 650, 651, 782, 819, 840], "where": [0, 7, 20, 24, 30, 31, 35, 43, 49, 52, 53, 54, 58, 60, 62, 63, 66, 67, 70, 72, 75, 76, 77, 81, 83, 85, 86, 89, 90, 93, 94, 131, 132, 135, 137, 143, 224, 234, 236, 239, 241, 243, 244, 253, 258, 259, 260, 267, 268, 269, 274, 276, 280, 282, 286, 295, 297, 323, 325, 326, 327, 341, 345, 352, 361, 363, 366, 369, 370, 371, 372, 375, 376, 381, 383, 384, 385, 391, 396, 397, 401, 416, 422, 423, 427, 428, 430, 436, 442, 443, 444, 453, 454, 455, 469, 475, 491, 492, 493, 496, 498, 499, 501, 502, 512, 520, 521, 522, 552, 566, 603, 618, 621, 623, 625, 626, 628, 630, 632, 633, 636, 637, 650, 652, 657, 661, 662, 666, 668, 670, 672, 673, 674, 677, 678, 681, 683, 689, 691, 692, 694, 700, 704, 712, 719, 728, 729, 730, 731, 736, 737, 752, 754, 756, 757, 758, 766, 781, 785, 796, 800, 802, 803, 806, 809, 810, 811, 814, 815, 816, 817, 818, 820, 821, 823, 824, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 843, 844, 845, 846, 847, 850, 851, 852, 854, 859, 868], "The": [0, 3, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 129, 130, 132, 134, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 182, 188, 189, 190, 191, 192, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 425, 427, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 465, 466, 467, 471, 474, 475, 480, 481, 483, 484, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 561, 563, 566, 567, 570, 572, 573, 576, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 768, 769, 774, 778, 779, 781, 782, 784, 785, 786, 791, 795, 796, 802, 803, 804, 806, 808, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 838, 839, 840, 843, 844, 845, 847, 848, 849, 850, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868], "h2": [0, 1, 13, 15, 26], "tag": [0, 1, 13, 15, 26, 809, 810], "section": [0, 1, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 47, 53, 64, 76, 108, 369, 372, 402, 413, 461, 470, 489, 634, 739, 740, 741, 742, 802, 803, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 839, 843, 844, 856, 857, 864, 867], "h3": [0, 1, 13, 15, 26], "subsect": [0, 1, 13, 15, 26, 808, 809, 810, 814, 819], "step": [0, 1, 13, 14, 15, 26, 27, 28, 39, 41, 42, 43, 53, 55, 72, 76, 78, 122, 133, 369, 372, 414, 416, 469, 604, 605, 608, 610, 611, 612, 618, 624, 629, 705, 706, 707, 786, 800, 802, 808, 809, 810, 811, 815, 816, 818, 819, 820, 821, 822, 825, 830, 832, 835, 840, 843, 844, 845, 852, 861], "explan": [0, 1, 13, 15, 26, 808, 809, 810, 818, 823, 827, 832, 836, 842], "go": [0, 4, 12, 14, 18, 25, 28, 33, 48, 53, 76, 80, 369, 411, 415, 630, 719, 720, 802, 803, 806, 808, 809, 810, 813, 816, 817, 820, 822, 825, 826, 832, 833, 835, 836, 839, 843, 846, 857, 861, 862, 866, 868], "default": [0, 3, 5, 6, 27, 28, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 168, 169, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 192, 193, 195, 196, 200, 203, 204, 205, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 576, 580, 581, 582, 584, 586, 588, 589, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 715, 716, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 768, 769, 774, 778, 779, 781, 782, 783, 784, 785, 786, 787, 795, 796, 800, 808, 809, 810, 816, 817, 820, 821, 822, 823, 824, 827, 828, 832, 835, 838, 840, 844, 848, 854, 861], "which": [0, 3, 6, 9, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 96, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 149, 151, 153, 159, 161, 164, 166, 169, 176, 188, 193, 197, 202, 204, 207, 208, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 317, 320, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 379, 381, 391, 392, 393, 394, 396, 397, 401, 402, 411, 412, 413, 415, 420, 423, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 480, 481, 482, 483, 484, 485, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 559, 564, 565, 566, 567, 581, 582, 584, 586, 588, 589, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 648, 649, 652, 655, 656, 657, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 674, 675, 676, 677, 681, 683, 684, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 703, 704, 713, 714, 715, 716, 721, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 778, 779, 781, 782, 783, 784, 785, 786, 787, 791, 792, 798, 800, 802, 804, 805, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868], "text": [0, 4, 8, 10, 41, 53, 54, 370, 371, 435, 443, 808, 810, 817, 822, 823], "paragraph": [0, 1, 13, 15, 26, 817], "p": [0, 1, 13, 15, 26, 39, 53, 54, 58, 76, 77, 81, 94, 135, 240, 370, 375, 419, 497, 530, 531, 618, 621, 623, 626, 630, 668, 684, 716, 782, 802, 809, 810, 813], "without": [0, 3, 10, 30, 39, 43, 46, 64, 70, 96, 576, 590, 623, 628, 630, 634, 696, 709, 739, 740, 741, 742, 766, 769, 795, 809, 810, 815, 816, 818, 819, 820, 821, 822, 824, 827, 828, 832, 835, 836, 838, 842, 843, 844, 846, 854, 858, 861, 862, 863, 867], "path": [0, 8, 9, 10, 22, 23, 24, 25, 42, 43, 763, 774, 790, 809, 817, 831, 832, 833, 847, 861], "correspond": [0, 3, 7, 9, 14, 27, 28, 42, 50, 52, 53, 54, 57, 60, 63, 64, 66, 70, 73, 75, 76, 80, 83, 89, 93, 96, 99, 149, 161, 164, 224, 274, 288, 326, 339, 340, 363, 366, 369, 370, 372, 375, 381, 391, 397, 408, 413, 419, 422, 423, 424, 441, 466, 467, 491, 492, 493, 496, 513, 514, 581, 603, 619, 621, 623, 625, 626, 628, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 652, 657, 661, 662, 668, 675, 676, 696, 697, 728, 734, 735, 739, 740, 741, 742, 747, 748, 753, 754, 755, 756, 763, 766, 768, 795, 800, 802, 808, 810, 815, 816, 818, 819, 820, 822, 823, 824, 827, 828, 830, 832, 835, 838, 840, 854, 855, 856, 861], "toctre": [0, 817], "index": [0, 41, 42, 43, 46, 49, 53, 54, 60, 63, 64, 65, 70, 72, 76, 77, 83, 86, 87, 88, 128, 135, 205, 308, 315, 316, 325, 326, 327, 363, 369, 370, 372, 377, 379, 381, 391, 397, 428, 430, 435, 458, 465, 468, 476, 478, 480, 483, 484, 487, 503, 504, 513, 522, 525, 543, 545, 566, 567, 571, 616, 618, 620, 623, 628, 630, 633, 634, 635, 696, 700, 710, 711, 712, 715, 716, 717, 723, 725, 734, 735, 737, 739, 740, 741, 743, 745, 767, 782, 796, 798, 818, 819, 824, 828, 829, 830, 831, 833, 835, 842, 861], "rst": [0, 828], "left": [0, 20, 30, 41, 42, 53, 58, 63, 65, 76, 81, 86, 88, 116, 117, 228, 243, 335, 350, 357, 366, 367, 369, 370, 372, 381, 403, 422, 427, 431, 438, 440, 466, 476, 517, 518, 519, 520, 521, 522, 535, 617, 621, 623, 626, 633, 635, 661, 662, 668, 677, 682, 734, 745, 766, 809, 810, 814, 817, 819, 820, 822, 825], "mai": [0, 51, 52, 53, 58, 64, 65, 74, 75, 81, 88, 98, 99, 122, 129, 140, 210, 236, 237, 243, 248, 256, 264, 265, 269, 270, 272, 287, 330, 331, 366, 397, 534, 570, 618, 620, 621, 623, 626, 634, 635, 636, 675, 684, 739, 740, 741, 742, 743, 746, 750, 751, 752, 754, 766, 796, 807, 808, 809, 810, 814, 818, 819, 820, 824, 825, 828, 829, 830, 832, 833, 835, 838, 841, 842, 844, 852, 868], "need": [0, 3, 7, 9, 16, 18, 24, 25, 27, 28, 41, 42, 43, 53, 54, 60, 76, 77, 83, 369, 370, 381, 391, 396, 397, 401, 422, 519, 530, 531, 552, 623, 625, 626, 628, 630, 652, 661, 689, 692, 719, 767, 802, 804, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 842, 843, 846, 847, 852, 854, 855, 857, 861, 862, 863, 867], "add": [0, 20, 30, 43, 45, 52, 53, 61, 68, 70, 75, 76, 84, 91, 98, 99, 357, 367, 369, 371, 372, 411, 448, 480, 562, 590, 621, 623, 625, 626, 631, 636, 652, 681, 727, 755, 763, 774, 782, 785, 800, 802, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 832, 835, 836, 838, 840, 842, 846, 847, 857, 859, 861], "grid": [0, 43, 49, 135, 311, 363, 618, 822, 835], "item": [0, 4, 27, 28, 39, 41, 43, 48, 54, 68, 70, 72, 75, 76, 77, 130, 155, 192, 246, 262, 270, 336, 339, 352, 532, 542, 543, 547, 581, 582, 618, 619, 620, 623, 630, 637, 713, 714, 715, 716, 720, 725, 726, 760, 802, 808, 818, 820, 840, 842, 843, 845, 854], "card": [0, 53, 76, 354, 366, 866], "refer": [0, 5, 53, 60, 66, 67, 76, 78, 83, 89, 90, 128, 143, 241, 259, 308, 323, 352, 363, 366, 369, 370, 372, 397, 402, 413, 420, 442, 465, 604, 605, 618, 621, 624, 626, 628, 636, 637, 657, 659, 683, 696, 754, 756, 757, 758, 782, 802, 807, 808, 809, 810, 814, 815, 817, 819, 820, 827, 828, 829, 830, 831, 832, 833, 834, 835, 846, 847, 848, 861], "also": [0, 3, 4, 6, 7, 9, 10, 12, 14, 18, 20, 22, 23, 25, 27, 28, 30, 32, 33, 34, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 164, 167, 168, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 363, 366, 369, 370, 372, 379, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 618, 619, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 718, 719, 720, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 781, 782, 791, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 843, 844, 845, 846, 847, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868], "look": [0, 5, 18, 27, 28, 41, 43, 46, 802, 806, 808, 809, 810, 816, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 832, 833, 835, 836, 837, 838, 840, 842, 844, 845, 847, 850, 854, 857, 861], "document": [0, 18, 27, 60, 243, 330, 331, 366, 603, 621, 623, 700, 803, 804, 807, 810, 817, 819, 820, 822, 831, 832, 833, 835, 843, 845], "sphinx": [0, 804, 817], "design": [0, 10, 18, 27, 76, 243, 307, 312, 313, 363, 621, 802, 805, 813, 817, 819, 820, 831, 832, 833, 834, 838, 840, 842, 846, 850, 851, 857, 859, 861, 864, 865, 866], "websit": [0, 45, 809, 814, 851], "alreadi": [1, 6, 9, 19, 22, 23, 24, 25, 27, 28, 33, 41, 43, 46, 53, 58, 70, 76, 81, 232, 242, 269, 279, 289, 372, 381, 454, 455, 475, 510, 519, 621, 626, 664, 672, 795, 796, 802, 808, 809, 810, 816, 818, 820, 821, 827, 831, 832, 838, 846, 847, 861, 863, 868], "instal": [1, 5, 6, 7, 9, 10, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 41, 43, 44, 45, 46, 804, 809, 810, 816, 817, 825, 826], "skip": [1, 4, 43, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 370, 372, 392, 393, 394, 412, 428, 430, 435, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 476, 479, 481, 483, 484, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 630, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 767, 795, 817, 828, 835], "colab": [1, 4, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 41, 43, 45, 46], "manual": [1, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 630, 708, 718, 719, 808, 809, 810, 820, 826, 835, 844, 847], "do": [1, 3, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 39, 41, 43, 53, 54, 70, 76, 77, 236, 269, 278, 369, 371, 372, 381, 414, 448, 460, 519, 522, 552, 621, 623, 630, 708, 715, 718, 719, 720, 725, 768, 796, 802, 806, 808, 809, 810, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 838, 840, 842, 843, 844, 845, 846, 848, 852, 862, 867, 868], "run": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 41, 43, 44, 45, 53, 55, 76, 78, 375, 491, 493, 604, 605, 610, 624, 625, 629, 650, 705, 706, 707, 763, 764, 782, 783, 784, 785, 795, 802, 804, 808, 809, 813, 815, 816, 819, 821, 822, 824, 826, 827, 829, 832, 833, 840, 841, 842, 843, 844, 845, 846, 847, 854, 855, 856, 859, 861, 862, 863, 864, 866, 867, 868], "below": [1, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 34, 39, 42, 43, 44, 49, 53, 58, 76, 81, 89, 141, 142, 143, 243, 253, 276, 323, 324, 333, 363, 366, 372, 483, 618, 621, 626, 660, 681, 756, 803, 806, 808, 809, 813, 814, 818, 819, 820, 821, 822, 824, 825, 828, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 854, 855, 856, 857, 859, 864, 866], "mind": [1, 12, 14, 18, 24, 27, 31, 808, 809, 815, 818, 835, 847, 855], "packag": [1, 3, 5, 6, 8, 9, 12, 22, 23, 24, 25, 28, 41, 42, 43, 46, 794, 802, 806, 809, 819, 832, 846, 847, 861, 863], "avail": [1, 3, 5, 6, 8, 22, 23, 25, 27, 28, 43, 54, 77, 192, 198, 200, 201, 212, 536, 620, 623, 626, 678, 767, 800, 802, 809, 810, 818, 819, 820, 821, 823, 824, 832, 835, 838, 846, 847, 850, 854, 855, 856, 866, 867], "click": [1, 3, 43, 808, 809, 810, 819, 823, 825, 826, 841], "runtim": [1, 3, 4, 5, 7, 8, 9, 20, 27, 30, 41, 42, 813, 828, 835, 838, 861], "restart": [1, 3, 4, 5, 8, 41, 42, 809, 825], "pip": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 806, 809, 817, 826], "q": [1, 3, 4, 5, 6, 7, 8, 9, 10, 41, 42, 43, 53, 57, 58, 76, 80, 81, 356, 366, 370, 381, 422, 522, 625, 626, 630, 652, 655, 661, 662, 674, 716, 809, 810, 813, 833, 846], "git": [1, 3, 4, 5, 8, 27, 41, 42, 43, 44, 802, 804, 807, 809, 810, 814, 817, 819, 825, 826, 835, 847], "clone": [1, 3, 5, 8, 27, 41, 43, 44, 802, 804, 810, 825, 847], "http": [1, 3, 4, 5, 6, 7, 8, 9, 14, 22, 23, 24, 25, 27, 28, 41, 42, 43, 44, 45, 46, 52, 53, 75, 76, 78, 143, 151, 239, 249, 250, 265, 323, 330, 331, 363, 366, 369, 372, 381, 412, 483, 512, 604, 605, 618, 619, 621, 624, 626, 628, 636, 675, 676, 704, 754, 802, 804, 809, 810, 814, 817, 819, 820, 823, 825, 847, 855], "github": [1, 3, 4, 5, 8, 27, 41, 42, 43, 44, 45, 802, 804, 805, 807, 810, 811, 812, 814, 817, 819, 820, 822, 823, 825, 826, 834, 835, 847, 850], "com": [1, 3, 4, 5, 8, 14, 27, 41, 42, 43, 44, 45, 802, 804, 809, 810, 814, 817, 819, 820, 825, 847], "unifyai": [1, 3, 5, 8, 27, 41, 42, 43, 44, 45, 802, 804, 809, 810, 817, 825, 847], "model": [1, 2, 3, 10, 11, 16, 17, 18, 44, 46, 236, 269, 371, 444, 621, 779, 783, 784, 800, 802, 843, 844, 848, 854, 855, 859, 860, 861, 862, 863, 864, 865, 867, 868], "depth": [1, 3, 5, 8, 42, 49, 53, 57, 72, 76, 80, 137, 369, 372, 404, 462, 535, 547, 618, 623, 625, 643, 644, 810, 819, 843, 844, 845, 847], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 155, 159, 160, 161, 164, 169, 171, 176, 192, 193, 197, 201, 202, 204, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 564, 566, 567, 571, 580, 581, 582, 583, 584, 586, 588, 589, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 769, 771, 774, 778, 781, 782, 783, 784, 785, 786, 787, 791, 795, 796, 800, 802, 805, 806, 809, 810, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 838, 839, 840, 842, 843, 844, 845, 846, 851, 852, 854, 855, 856], "from": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 99, 122, 124, 127, 129, 130, 131, 132, 135, 136, 139, 143, 145, 151, 169, 175, 176, 192, 197, 202, 208, 209, 235, 243, 244, 271, 275, 276, 283, 287, 307, 308, 314, 317, 323, 325, 326, 327, 334, 337, 340, 341, 343, 344, 356, 360, 363, 366, 368, 369, 370, 371, 372, 376, 381, 392, 393, 394, 408, 413, 414, 431, 438, 443, 444, 448, 458, 461, 470, 475, 481, 483, 484, 486, 488, 489, 498, 499, 500, 501, 502, 513, 514, 534, 542, 543, 545, 565, 576, 586, 603, 605, 606, 610, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 639, 647, 648, 657, 660, 677, 681, 682, 683, 690, 693, 696, 699, 705, 706, 707, 709, 720, 721, 722, 728, 729, 730, 731, 735, 738, 739, 741, 747, 748, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 768, 769, 774, 779, 781, 782, 783, 784, 786, 791, 796, 800, 802, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868], "repositori": [1, 3, 5, 8, 804, 808, 809, 810, 813, 814, 817, 825, 834, 852], "cd": [1, 3, 5, 8, 27, 44, 802, 804, 809, 810, 825, 847], "here": [1, 3, 10, 13, 15, 18, 23, 26, 27, 28, 39, 41, 42, 43, 44, 46, 76, 279, 450, 621, 802, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 822, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 840, 841, 842, 843, 844, 845, 846, 854, 855, 856, 861, 862], "normal": [1, 3, 8, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 53, 61, 62, 76, 84, 85, 93, 94, 353, 366, 369, 375, 381, 390, 391, 396, 397, 400, 401, 402, 412, 413, 491, 492, 493, 494, 495, 496, 497, 512, 515, 628, 631, 632, 690, 700, 727, 728, 730, 781, 782, 785, 802, 808, 831, 832, 838, 843, 854, 856, 859], "resnet": [2, 9, 16, 27, 854, 855], "imag": [2, 3, 7, 9, 12, 16, 24, 27, 28, 41, 42, 43, 44, 45, 46, 53, 57, 75, 76, 80, 98, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 279, 280, 282, 283, 287, 369, 387, 388, 404, 405, 406, 408, 535, 621, 623, 625, 638, 639, 640, 641, 642, 645, 646, 647, 782, 802, 809, 825, 838, 840, 841, 843, 845, 847, 854, 855, 861], "classif": [2, 3, 8, 10, 16, 41, 802, 861], "acceler": [2, 16, 802, 820, 832, 859, 863, 864, 865, 866], "pytorch": [2, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 25, 27, 28, 39, 46, 279, 330, 331, 366, 621, 786, 802, 807, 808, 815, 820, 821, 824, 827, 828, 831, 832, 833, 838, 840, 845, 846, 848, 851, 852, 854, 855, 862, 864, 865, 867, 868], "jax": [2, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 39, 41, 45, 47, 52, 53, 54, 64, 69, 75, 76, 77, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 295, 296, 298, 343, 361, 366, 381, 522, 552, 584, 603, 615, 621, 623, 634, 739, 740, 741, 742, 774, 778, 791, 802, 806, 807, 808, 809, 810, 814, 816, 820, 821, 824, 825, 827, 830, 831, 832, 833, 835, 836, 838, 840, 842, 845, 846, 851, 852, 854, 855, 856, 862, 864, 867, 868], "convert": [2, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 24, 25, 27, 28, 29, 31, 33, 41, 44, 46, 48, 49, 52, 70, 71, 72, 75, 93, 123, 124, 136, 146, 147, 189, 190, 191, 192, 203, 211, 215, 235, 275, 372, 377, 453, 454, 455, 503, 568, 585, 587, 588, 589, 591, 618, 619, 620, 621, 623, 626, 630, 685, 709, 720, 721, 763, 791, 795, 802, 808, 815, 816, 829, 830, 832, 835, 837, 840, 846, 848, 852, 855, 859, 860, 867], "them": [2, 3, 7, 9, 12, 14, 16, 27, 28, 33, 370, 437, 529, 565, 623, 766, 782, 802, 804, 808, 810, 811, 814, 815, 816, 817, 818, 819, 820, 824, 826, 829, 831, 832, 833, 835, 837, 840, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 861, 863, 867], "faster": [2, 3, 7, 9, 10, 16, 27, 28, 44, 46, 53, 58, 76, 81, 370, 440, 626, 677, 804, 807, 817, 848, 863, 866], "infer": [2, 7, 9, 10, 16, 20, 30, 32, 33, 42, 44, 46, 49, 53, 54, 57, 60, 72, 76, 77, 80, 83, 122, 124, 127, 131, 132, 136, 139, 145, 154, 155, 156, 157, 158, 307, 308, 369, 376, 404, 500, 546, 580, 618, 619, 623, 625, 628, 648, 696, 791, 792, 813, 816, 820, 821, 835, 840, 845, 855, 859, 860, 863, 865], "mmpretrain": [2, 16], "segment": [2, 16, 53, 76, 325, 326, 327, 363, 817, 822], "unet": [2, 16], "alexnet": [2, 16], "In": [2, 3, 4, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 51, 53, 54, 60, 74, 76, 77, 83, 93, 94, 203, 210, 211, 215, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 369, 372, 375, 392, 393, 394, 414, 453, 454, 455, 461, 463, 465, 466, 467, 468, 470, 474, 480, 481, 489, 491, 493, 525, 545, 552, 570, 620, 621, 623, 626, 628, 632, 675, 692, 693, 694, 696, 698, 699, 701, 703, 731, 802, 808, 809, 810, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 842, 843, 844, 845, 846, 850, 852, 854, 855, 856, 857, 859, 861, 862, 864, 867], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 44, 45, 46, 53, 58, 59, 60, 68, 76, 81, 82, 91, 93, 94, 114, 358, 368, 372, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 485, 489, 535, 545, 584, 606, 607, 609, 614, 615, 623, 624, 626, 627, 628, 670, 686, 692, 693, 694, 696, 698, 699, 701, 703, 778, 784, 791, 796, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 861, 862, 866, 867], "show": [2, 3, 4, 8, 16, 22, 27, 28, 29, 30, 32, 39, 41, 43, 44, 569, 578, 600, 623, 802, 808, 809, 810, 817, 819, 822, 826, 831, 832, 835, 837, 846, 854, 861], "how": [2, 3, 4, 5, 7, 9, 12, 14, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 39, 42, 45, 46, 47, 52, 53, 69, 75, 76, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 236, 269, 287, 291, 295, 296, 298, 361, 371, 372, 443, 458, 483, 484, 615, 621, 778, 781, 782, 783, 784, 802, 803, 804, 806, 807, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 850, 852, 857, 861], "written": [2, 3, 4, 16, 18, 27, 28, 41, 54, 372, 464, 809, 814, 815, 823, 826, 827, 831, 832, 836, 840, 842, 845, 846, 850, 855, 859, 861, 865, 867, 868], "xgboost": [2, 16], "video": [3, 5, 7, 8, 9, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 802, 803, 808, 809, 810, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 847, 859], "tutori": [3, 5, 7, 8, 9, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 802, 810, 832, 847], "nativ": [3, 4, 6, 9, 18, 19, 22, 23, 24, 25, 27, 28, 48, 49, 50, 51, 54, 71, 74, 77, 98, 102, 136, 146, 147, 153, 154, 155, 156, 157, 158, 172, 175, 190, 191, 192, 193, 203, 211, 215, 552, 554, 558, 565, 570, 587, 618, 619, 620, 623, 763, 774, 779, 791, 802, 806, 808, 820, 821, 824, 825, 828, 829, 831, 832, 833, 835, 840, 842, 843, 848, 854, 855, 856, 859, 868], "integr": [3, 4, 12, 14, 21, 28, 31, 50, 52, 53, 73, 75, 76, 148, 288, 349, 366, 381, 515, 619, 621, 802, 805, 807, 809, 811, 813, 829, 855, 859, 861, 863, 864, 865], "three": [3, 4, 16, 22, 32, 33, 43, 53, 135, 307, 363, 372, 455, 618, 809, 810, 818, 819, 820, 822, 832, 835, 838, 839, 840, 862, 867], "major": [3, 4, 633, 737, 820, 821, 833, 835, 846, 851, 858, 861], "ml": [3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 46, 802, 803, 807, 832, 839, 840, 841, 843, 844, 845, 849, 851, 852, 855, 857, 858, 859, 860, 861, 864, 866, 868], "framework": [3, 4, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 41, 43, 45, 48, 54, 166, 188, 198, 201, 212, 533, 549, 553, 584, 587, 619, 620, 623, 630, 710, 761, 763, 767, 774, 779, 786, 791, 792, 802, 806, 808, 809, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 827, 828, 829, 831, 832, 835, 836, 838, 839, 840, 842, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 865], "sinc": [3, 5, 8, 24, 25, 27, 28, 41, 43, 53, 76, 94, 366, 802, 804, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 824, 831, 832, 846, 851, 861, 867], "want": [3, 5, 6, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 40, 41, 43, 53, 68, 76, 91, 236, 269, 372, 463, 621, 784, 802, 803, 804, 808, 809, 810, 817, 819, 821, 824, 826, 828, 829, 830, 831, 835, 838, 843, 844, 845, 846, 847, 851, 855], "after": [3, 4, 5, 7, 8, 9, 27, 28, 42, 53, 54, 55, 57, 61, 70, 76, 77, 78, 80, 84, 182, 283, 299, 303, 351, 361, 366, 369, 370, 372, 391, 392, 393, 394, 411, 415, 434, 464, 475, 552, 605, 608, 610, 611, 612, 619, 621, 623, 624, 625, 630, 631, 638, 639, 640, 641, 643, 645, 647, 648, 719, 727, 786, 791, 802, 808, 809, 810, 814, 816, 817, 819, 820, 822, 824, 827, 830, 833, 835, 839, 847, 854, 855, 861], "first": [3, 4, 5, 8, 12, 18, 20, 21, 22, 24, 27, 28, 30, 31, 32, 41, 44, 45, 46, 49, 52, 53, 58, 60, 62, 63, 64, 66, 72, 75, 76, 77, 81, 83, 85, 87, 89, 93, 94, 98, 99, 118, 119, 133, 134, 143, 174, 182, 192, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 286, 297, 307, 308, 323, 325, 326, 327, 329, 341, 343, 344, 345, 351, 355, 356, 361, 363, 366, 369, 370, 371, 372, 379, 381, 391, 421, 422, 423, 425, 429, 449, 459, 461, 465, 472, 475, 477, 478, 481, 488, 499, 501, 505, 513, 514, 515, 522, 527, 617, 618, 619, 620, 621, 623, 625, 626, 628, 629, 630, 633, 634, 635, 636, 652, 657, 660, 661, 662, 664, 667, 672, 674, 675, 677, 679, 681, 683, 696, 697, 700, 701, 705, 706, 707, 708, 709, 718, 719, 721, 733, 734, 735, 739, 740, 741, 744, 745, 747, 748, 763, 781, 782, 783, 784, 786, 791, 802, 804, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 821, 822, 826, 827, 828, 829, 831, 832, 835, 838, 840, 842, 843, 845, 847, 850, 851, 854, 855, 859, 861, 862, 866], "notebook": [3, 4, 5, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 42, 784, 802], "automat": [3, 5, 8, 25, 27, 28, 33, 802, 808, 809, 810, 813, 816, 817, 819, 820, 826, 828, 831, 835, 838, 839, 841, 844, 845, 847, 848, 852, 861, 864, 868], "sure": [3, 5, 7, 8, 9, 10, 27, 41, 808, 809, 810, 814, 819, 824, 825, 832, 833, 835, 838, 847], "gpu": [3, 4, 5, 6, 7, 8, 9, 10, 41, 43, 45, 46, 192, 194, 195, 198, 201, 203, 205, 207, 208, 211, 213, 215, 620, 800, 802, 809, 810, 819, 821, 842, 847, 859, 861, 864, 865, 866], "enabl": [3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 25, 42, 53, 58, 70, 81, 99, 369, 371, 391, 447, 570, 623, 626, 670, 784, 800, 802, 809, 810, 811, 815, 818, 820, 828, 829, 830, 831, 832, 835, 836, 839, 841, 843, 845, 846, 848, 851, 854, 859, 860, 861, 862, 863, 864, 867, 868], "dm": [3, 4, 5, 7, 9, 27, 28, 39, 41], "haiku": [3, 4, 5, 7, 9, 25, 27, 28, 39, 41, 45, 779, 802, 845, 852, 855, 861], "exit": [3, 5, 8, 27, 28, 821], "download": [3, 8, 12, 14, 27, 28, 42, 43, 46, 804, 809, 817, 835, 854, 855], "imagenet": [3, 14, 42, 44, 802], "class": [3, 5, 8, 10, 12, 14, 18, 27, 28, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 130, 139, 145, 161, 164, 177, 179, 180, 239, 276, 333, 354, 366, 380, 381, 388, 389, 422, 518, 519, 526, 535, 539, 552, 562, 584, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 646, 651, 655, 661, 672, 676, 677, 679, 686, 702, 709, 720, 727, 742, 749, 753, 754, 763, 764, 771, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 800, 802, 808, 816, 817, 818, 820, 821, 822, 823, 827, 829, 830, 833, 834, 835, 838, 840, 841, 843, 844, 845, 848, 854, 855, 859, 861, 862, 868], "preprocess": [3, 8, 10, 27, 28, 41, 44, 854], "wget": [3, 5, 8, 41, 42, 45, 809], "raw": [3, 5, 7, 8, 9, 24, 27, 28, 41, 44, 45, 70, 802, 823, 855, 862], "githubusercont": [3, 5, 8, 41, 45], "hub": [3, 5, 8, 41, 44, 46], "master": [3, 5, 8, 19, 20, 21, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 805, 812, 819, 861], "imagenet_class": [3, 8], "txt": [3, 8, 42, 54, 809, 814, 817], "r": [3, 8, 41, 42, 53, 58, 70, 76, 81, 93, 94, 343, 358, 366, 368, 606, 624, 626, 628, 674, 703, 809, 810, 813, 830, 833], "f": [3, 4, 6, 7, 8, 27, 28, 40, 41, 43, 53, 60, 76, 83, 297, 314, 361, 363, 372, 465, 486, 628, 630, 696, 711, 715, 716, 717, 720, 725, 726, 802, 803, 810, 813, 818, 819, 824, 836, 840, 842, 843, 852, 857], "categori": [3, 8, 808, 814, 815, 818, 820, 824, 832, 836, 839], "strip": [3, 8, 20, 30, 851], "readlin": [3, 8, 42], "cat": [3, 8, 42, 833, 838, 840, 845, 854, 855], "jpg": [3, 5, 7, 8, 9, 24, 27, 28, 43, 44, 802, 855], "filenam": [3, 5, 8, 27, 28, 41, 43, 46, 54, 784, 790, 843], "3": [3, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 128, 130, 132, 133, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 190, 192, 193, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 325, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 387, 388, 389, 390, 392, 395, 396, 397, 400, 401, 405, 406, 407, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 434, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 494, 495, 496, 497, 500, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 566, 567, 580, 581, 582, 586, 589, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 769, 782, 795, 796, 800, 802, 806, 808, 809, 814, 815, 816, 818, 819, 820, 822, 824, 825, 828, 830, 833, 835, 840, 842, 843, 844, 845, 854, 855, 868], "import": [3, 6, 7, 9, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 44, 45, 46, 53, 64, 68, 72, 76, 91, 190, 191, 195, 205, 207, 293, 302, 381, 512, 547, 563, 620, 623, 629, 634, 706, 707, 742, 774, 791, 792, 802, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 820, 821, 822, 823, 826, 829, 830, 831, 832, 833, 834, 835, 836, 840, 842, 843, 845, 846, 847, 851, 854, 855, 856, 857, 859, 861, 864, 865, 867], "devic": [3, 5, 6, 7, 8, 9, 42, 43, 46, 49, 53, 62, 70, 72, 76, 85, 98, 101, 102, 103, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 307, 308, 323, 324, 363, 376, 463, 498, 499, 501, 502, 526, 540, 541, 618, 623, 632, 728, 729, 730, 731, 761, 763, 764, 779, 781, 782, 783, 784, 785, 786, 787, 788, 800, 802, 810, 813, 816, 820, 824, 828, 829, 833, 835, 836, 838, 840, 845, 846, 847, 848, 851, 860, 861, 863, 864, 865, 866], "torchvis": [3, 7, 8, 41, 852], "transform": [3, 4, 7, 8, 9, 24, 27, 28, 41, 42, 44, 53, 57, 76, 80, 369, 370, 390, 391, 396, 397, 400, 401, 402, 412, 413, 416, 431, 625, 649, 766, 769, 782, 802, 829, 835, 845, 848, 854, 855, 859, 861, 862, 863], "pil": [3, 5, 7, 8, 9, 24, 27, 28, 42, 43, 44, 802, 855], "numpi": [3, 4, 5, 6, 7, 9, 12, 14, 19, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 43, 44, 45, 46, 52, 53, 54, 66, 75, 76, 77, 143, 172, 190, 220, 280, 293, 302, 323, 363, 381, 512, 519, 528, 552, 581, 584, 588, 618, 619, 620, 621, 623, 636, 749, 761, 763, 774, 791, 795, 796, 802, 807, 808, 809, 810, 814, 815, 816, 819, 820, 821, 824, 825, 827, 831, 833, 835, 836, 838, 840, 842, 845, 847, 848, 850, 851, 854, 855, 856, 863, 868], "np": [3, 4, 5, 6, 7, 9, 12, 14, 19, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 39, 40, 41, 42, 43, 44, 46, 49, 53, 75, 76, 77, 123, 124, 125, 136, 172, 249, 253, 293, 302, 369, 370, 396, 401, 417, 581, 618, 619, 621, 623, 630, 714, 763, 791, 795, 796, 802, 808, 815, 820, 821, 824, 827, 831, 832, 833, 835, 836, 838, 840, 842, 843, 845, 848, 856], "warn": [3, 4, 5, 6, 8, 9, 10, 19, 22, 23, 24, 25, 41, 42, 43, 46, 799, 809, 810, 837, 854, 855, 856], "time": [3, 4, 6, 7, 9, 25, 27, 28, 33, 41, 43, 44, 45, 53, 55, 58, 64, 76, 78, 87, 93, 94, 130, 336, 366, 369, 370, 372, 381, 397, 402, 414, 416, 435, 442, 475, 481, 512, 605, 610, 618, 624, 625, 626, 628, 629, 633, 634, 648, 651, 667, 702, 705, 706, 707, 734, 735, 739, 740, 782, 783, 784, 800, 808, 809, 810, 814, 816, 818, 819, 820, 822, 825, 827, 828, 829, 831, 832, 835, 836, 840, 843, 845, 846, 847, 850, 851, 852, 854, 855, 859, 861, 862, 865, 866, 867], "filterwarn": [3, 4], "ignor": [3, 4, 40, 48, 49, 53, 70, 76, 135, 369, 370, 372, 381, 392, 393, 394, 423, 437, 477, 478, 482, 520, 618, 625, 626, 630, 652, 666, 719, 720, 786, 809, 817, 819, 822, 835, 846, 867], "compos": [3, 7, 8, 27, 28, 41, 53, 76, 369, 383, 384, 385, 809, 818, 832, 835, 854, 856, 861, 868], "resiz": [3, 5, 7, 8, 41, 42, 53, 76, 369, 404, 838], "256": [3, 5, 8, 52, 77, 279, 280, 582, 625, 640, 642, 766], "centercrop": [3, 8], "224": [3, 8, 12, 14, 27, 28, 41, 42, 44, 802, 855], "totensor": [3, 7, 8, 41], "mean": [3, 7, 8, 9, 10, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 42, 43, 53, 54, 57, 59, 60, 62, 66, 68, 70, 72, 76, 77, 80, 82, 83, 85, 89, 91, 93, 130, 209, 325, 335, 363, 366, 369, 370, 371, 372, 375, 376, 381, 397, 402, 420, 431, 443, 444, 445, 446, 447, 448, 449, 450, 460, 465, 475, 491, 493, 499, 518, 519, 536, 606, 607, 609, 614, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 640, 642, 643, 644, 646, 647, 648, 659, 686, 687, 688, 696, 705, 706, 707, 714, 729, 730, 766, 768, 769, 781, 782, 785, 802, 809, 810, 813, 814, 816, 818, 820, 821, 822, 828, 830, 831, 832, 835, 836, 838, 840, 842, 843, 844, 845, 846, 848, 855, 856, 858, 861], "0": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 164, 165, 169, 171, 176, 189, 192, 194, 197, 202, 203, 204, 205, 207, 208, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 381, 387, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 405, 406, 407, 408, 411, 412, 413, 415, 418, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 529, 530, 531, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 562, 564, 566, 567, 571, 576, 580, 581, 582, 584, 586, 588, 589, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 769, 771, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 791, 795, 796, 800, 802, 806, 809, 810, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 830, 831, 832, 833, 835, 836, 840, 842, 843, 844, 845, 846, 854, 855], "485": [3, 8, 41], "456": [3, 8, 41, 835], "406": [3, 8, 41, 53, 76, 390, 530, 623], "std": [3, 7, 8, 9, 10, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 42, 57, 62, 66, 80, 85, 89, 376, 499, 625, 632, 636, 640, 642, 643, 644, 646, 647, 729, 730, 802, 822, 856], "229": [3, 8, 41, 275, 621], "225": [3, 8, 41, 43, 230, 621], "torch_img": [3, 5, 8], "unsqueez": [3, 5, 7, 8], "img": [3, 5, 8, 24, 27, 28, 41, 42, 43, 45, 802, 843, 855], "4": [3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 19, 20, 21, 22, 23, 24, 25, 27, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 113, 114, 122, 123, 124, 125, 128, 130, 132, 133, 134, 135, 136, 137, 139, 143, 145, 149, 150, 151, 159, 161, 164, 169, 171, 176, 193, 194, 202, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 315, 316, 323, 325, 330, 331, 333, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 353, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 387, 388, 389, 390, 392, 393, 395, 396, 397, 400, 401, 405, 406, 407, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 431, 437, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 458, 459, 460, 461, 462, 465, 466, 467, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 488, 489, 490, 494, 495, 496, 497, 500, 502, 503, 505, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 545, 548, 550, 551, 552, 559, 566, 567, 581, 582, 583, 584, 586, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 769, 781, 782, 786, 795, 796, 802, 806, 808, 809, 816, 817, 818, 819, 820, 822, 825, 830, 833, 835, 838, 840, 842, 843, 844, 845, 852, 854, 861, 867, 868], "ipython": [3, 5, 8, 22, 23, 24, 25, 27, 28, 46], "displai": [3, 5, 8, 24, 27, 28, 41, 42, 43, 45, 46, 809, 817, 819, 824, 835, 843], "end": [3, 5, 41, 42, 53, 76, 122, 224, 280, 347, 366, 369, 371, 372, 416, 443, 465, 475, 477, 478, 618, 621, 796, 802, 809, 810, 816, 819, 825, 831, 836, 838, 839, 846, 859, 864], "see": [3, 4, 6, 7, 9, 10, 19, 20, 25, 27, 28, 29, 30, 34, 39, 40, 46, 47, 50, 52, 53, 58, 63, 64, 66, 67, 69, 75, 76, 81, 86, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 129, 133, 140, 143, 150, 169, 176, 219, 224, 226, 228, 229, 230, 231, 236, 237, 241, 243, 247, 248, 255, 256, 259, 261, 263, 265, 266, 269, 272, 274, 278, 285, 287, 290, 291, 295, 296, 298, 323, 330, 331, 361, 363, 366, 370, 371, 372, 419, 445, 483, 615, 618, 619, 621, 626, 633, 634, 636, 637, 657, 670, 673, 676, 683, 684, 735, 739, 740, 741, 742, 750, 751, 752, 753, 754, 755, 756, 757, 758, 778, 802, 803, 806, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 832, 833, 835, 838, 840, 842, 843, 846, 850, 857], "5": [3, 4, 5, 6, 7, 8, 9, 10, 12, 19, 20, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 93, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 130, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 149, 150, 151, 155, 159, 161, 169, 171, 176, 193, 202, 207, 210, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 325, 328, 330, 331, 333, 335, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 377, 379, 381, 387, 388, 389, 390, 392, 393, 395, 396, 397, 400, 401, 405, 406, 407, 410, 411, 412, 413, 415, 418, 421, 422, 424, 425, 427, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 462, 465, 466, 469, 470, 471, 474, 475, 480, 481, 482, 483, 484, 485, 489, 490, 495, 496, 497, 500, 502, 503, 505, 510, 512, 513, 514, 515, 516, 517, 519, 522, 528, 529, 530, 531, 534, 535, 536, 537, 539, 542, 543, 545, 548, 550, 551, 552, 566, 567, 571, 581, 582, 583, 584, 586, 590, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 711, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 768, 769, 782, 795, 796, 802, 805, 808, 809, 810, 814, 816, 818, 819, 820, 822, 824, 825, 827, 830, 833, 835, 842, 843, 844, 855], "set_default_devic": [3, 4, 5, 7, 8, 9, 213, 620, 821], "set_soft_device_mod": [3, 10, 214, 620, 821], "true": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 21, 22, 24, 25, 27, 28, 32, 33, 34, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 152, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 188, 192, 193, 195, 196, 200, 203, 204, 205, 206, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 363, 366, 367, 369, 370, 371, 372, 375, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 461, 462, 463, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 505, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 566, 567, 568, 571, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 596, 597, 599, 600, 602, 605, 606, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 715, 716, 718, 719, 720, 721, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 768, 769, 771, 782, 783, 784, 785, 786, 788, 791, 793, 795, 796, 800, 802, 806, 809, 816, 818, 819, 820, 821, 822, 824, 825, 827, 828, 829, 831, 832, 833, 835, 837, 838, 840, 843, 844, 845, 854, 855], "set_backend": [3, 4, 5, 8, 10, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 40, 42, 43, 44, 52, 54, 68, 75, 77, 163, 172, 190, 191, 205, 207, 212, 220, 528, 552, 619, 620, 623, 629, 706, 707, 791, 802, 814, 816, 820, 821, 828, 829, 830, 840, 842, 845, 854, 855, 856], "ivy_model": [3, 4, 5, 8, 44], "ivy_alexnet": 3, "order": [3, 21, 31, 33, 41, 44, 46, 49, 53, 54, 57, 58, 60, 64, 65, 70, 76, 80, 81, 83, 87, 88, 93, 98, 99, 123, 124, 135, 143, 224, 243, 286, 323, 343, 363, 366, 369, 370, 372, 375, 379, 414, 419, 422, 423, 424, 425, 426, 430, 434, 436, 439, 442, 465, 466, 467, 472, 473, 485, 491, 492, 493, 496, 505, 618, 621, 625, 626, 628, 629, 633, 634, 635, 639, 640, 641, 642, 643, 644, 647, 661, 662, 668, 677, 678, 682, 684, 693, 696, 705, 706, 737, 739, 740, 741, 742, 743, 745, 746, 763, 785, 787, 796, 802, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 843, 845, 846, 850, 857, 860, 861, 862, 864, 867], "quick": [3, 16, 28, 810, 813, 833, 844], "call": [3, 7, 12, 14, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 41, 45, 53, 68, 73, 76, 91, 93, 99, 118, 168, 169, 209, 370, 381, 434, 519, 570, 576, 590, 606, 607, 609, 617, 620, 623, 624, 626, 630, 675, 708, 714, 718, 719, 763, 774, 782, 783, 784, 786, 791, 796, 800, 802, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 842, 843, 844, 845, 846, 851, 854, 855, 856, 861, 862, 865], "trace_graph": [3, 4, 5, 8, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 44, 784, 802, 840, 845, 853], "take": [3, 8, 18, 25, 27, 28, 33, 39, 41, 44, 53, 58, 60, 66, 76, 83, 93, 118, 119, 121, 137, 276, 283, 297, 361, 369, 370, 372, 388, 396, 401, 406, 416, 425, 437, 458, 465, 484, 513, 514, 617, 618, 621, 625, 626, 628, 629, 652, 667, 671, 696, 707, 747, 766, 774, 781, 782, 795, 800, 802, 803, 808, 809, 810, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 831, 832, 833, 835, 838, 840, 842, 844, 845, 846, 847, 852, 854, 855, 858, 859, 867], "moment": [3, 53, 55, 76, 78, 370, 426, 604, 605, 610, 624, 786, 800, 808, 816, 846, 854, 855], "one": [3, 6, 7, 9, 12, 14, 16, 17, 20, 21, 24, 25, 27, 28, 30, 31, 43, 44, 45, 49, 53, 54, 57, 58, 60, 63, 64, 66, 70, 72, 75, 76, 77, 78, 80, 81, 83, 84, 86, 87, 88, 89, 93, 122, 125, 135, 137, 138, 139, 149, 151, 209, 230, 236, 243, 244, 261, 267, 268, 269, 288, 297, 307, 310, 311, 329, 335, 338, 341, 342, 345, 346, 347, 349, 350, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 381, 390, 392, 396, 397, 400, 401, 404, 412, 417, 419, 428, 435, 449, 453, 454, 455, 459, 465, 466, 467, 472, 474, 479, 482, 491, 492, 493, 498, 503, 513, 514, 517, 518, 519, 520, 521, 522, 524, 562, 566, 567, 569, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 618, 619, 620, 621, 623, 624, 625, 626, 628, 631, 633, 634, 636, 639, 640, 641, 642, 643, 644, 647, 664, 667, 668, 672, 674, 683, 684, 692, 693, 694, 697, 699, 703, 727, 734, 737, 739, 740, 741, 742, 747, 749, 766, 768, 785, 788, 791, 796, 799, 802, 808, 809, 810, 811, 814, 815, 816, 817, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 842, 843, 845, 846, 847, 848, 851, 852, 855, 861, 862, 864, 867], "cost": [3, 55, 78, 604, 605, 608, 610, 611, 612, 624, 629, 705, 706, 707, 796, 820, 838, 859], "arg": [3, 5, 6, 7, 8, 12, 14, 22, 23, 25, 27, 28, 32, 33, 34, 45, 48, 70, 92, 102, 118, 199, 209, 590, 617, 618, 620, 623, 761, 763, 778, 779, 782, 783, 784, 788, 791, 795, 800, 802, 815, 820, 821, 824, 830, 831, 832, 838, 840, 844, 854, 855, 856], "asarrai": [3, 4, 5, 7, 8, 42, 49, 53, 54, 65, 72, 76, 77, 88, 123, 379, 504, 505, 535, 546, 550, 551, 581, 582, 618, 623, 625, 634, 635, 639, 740, 744, 824, 829, 832, 833], "cuda": [3, 4, 5, 6, 7, 8, 9, 10, 18, 27, 42, 43, 46, 49, 53, 62, 72, 76, 85, 133, 134, 137, 189, 190, 191, 205, 207, 376, 498, 499, 501, 502, 618, 620, 626, 632, 678, 728, 729, 730, 731, 781, 782, 783, 784, 785, 786, 787, 800, 802, 840, 846, 848, 866], "7": [3, 5, 6, 7, 8, 9, 10, 12, 14, 20, 22, 23, 24, 25, 39, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 108, 109, 110, 111, 122, 123, 124, 133, 136, 137, 155, 161, 164, 194, 216, 219, 222, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 279, 280, 281, 283, 286, 287, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 313, 314, 325, 329, 333, 335, 336, 343, 344, 345, 347, 349, 350, 357, 361, 363, 366, 367, 369, 370, 371, 372, 377, 381, 387, 388, 389, 390, 395, 396, 400, 401, 405, 410, 411, 412, 413, 415, 418, 421, 432, 444, 445, 446, 447, 449, 450, 453, 454, 455, 459, 461, 465, 470, 471, 474, 475, 480, 481, 483, 484, 486, 489, 490, 500, 502, 503, 510, 513, 514, 516, 517, 522, 528, 530, 531, 535, 536, 539, 550, 551, 552, 559, 566, 567, 581, 584, 604, 605, 607, 608, 609, 610, 611, 612, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 642, 644, 646, 647, 648, 649, 655, 657, 658, 659, 660, 662, 663, 664, 667, 669, 672, 674, 675, 677, 678, 679, 681, 682, 683, 686, 687, 688, 689, 692, 693, 698, 700, 701, 703, 708, 709, 716, 720, 727, 728, 729, 730, 731, 733, 738, 739, 741, 743, 744, 746, 747, 748, 749, 751, 753, 755, 756, 766, 809, 810, 816, 818, 819, 822, 828, 831, 835], "output": [3, 4, 5, 6, 8, 18, 24, 25, 27, 28, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 366, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 410, 412, 413, 414, 416, 417, 419, 420, 421, 423, 425, 428, 429, 432, 433, 434, 435, 437, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 460, 463, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 529, 530, 531, 535, 536, 537, 539, 543, 552, 559, 566, 567, 568, 591, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 721, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 766, 781, 782, 795, 796, 802, 804, 809, 810, 813, 814, 815, 817, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 840, 842, 844, 845, 846, 848, 854, 855, 862], "softmax": [3, 8, 12, 25, 27, 28, 43, 47, 57, 68, 69, 80, 371, 445, 615, 625, 652, 655, 778, 802], "pass": [3, 5, 7, 8, 9, 10, 12, 14, 18, 25, 27, 28, 34, 40, 41, 43, 45, 46, 52, 53, 68, 70, 75, 76, 91, 99, 118, 119, 121, 153, 175, 190, 209, 224, 270, 369, 371, 372, 375, 376, 381, 414, 445, 465, 491, 493, 498, 518, 519, 552, 617, 619, 620, 621, 623, 629, 705, 706, 761, 763, 767, 774, 779, 783, 784, 786, 787, 791, 795, 800, 802, 806, 808, 810, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 846, 854, 855, 856, 859], "argsort": [3, 8, 65, 88, 635, 745, 832], "descend": [3, 8, 65, 88, 626, 635, 677, 678, 743, 746], "top": [3, 8, 11, 16, 25, 27, 28, 41, 42, 53, 60, 76, 314, 363, 371, 372, 443, 485, 535, 623, 690, 802, 809, 810, 820, 825, 832, 834, 835, 838, 843, 844, 861, 865], "logit": [3, 4, 5, 8, 41, 42, 43, 44, 53, 59, 76, 82, 361, 376, 498, 501, 627, 686, 688, 778, 802, 854], "gather": [3, 8, 41, 53, 54, 76, 77, 325, 326, 327, 363, 543, 545, 623, 868], "print": [3, 4, 6, 7, 8, 10, 12, 14, 18, 19, 21, 25, 27, 28, 29, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 162, 163, 166, 168, 169, 171, 176, 188, 189, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 308, 315, 316, 323, 325, 329, 330, 331, 333, 347, 348, 353, 357, 361, 363, 366, 369, 370, 371, 372, 375, 381, 387, 388, 389, 390, 392, 393, 395, 397, 400, 402, 405, 406, 407, 410, 412, 413, 418, 421, 423, 425, 426, 434, 441, 444, 445, 446, 447, 448, 449, 450, 456, 458, 460, 471, 475, 480, 481, 483, 484, 485, 490, 494, 495, 497, 512, 513, 514, 515, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 562, 563, 565, 566, 567, 571, 572, 573, 576, 579, 580, 581, 582, 584, 586, 588, 589, 590, 594, 595, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 655, 656, 657, 658, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 791, 795, 796, 800, 802, 809, 810, 818, 820, 822, 833, 835, 837, 840, 842, 843, 844, 854, 856], "indic": [3, 8, 49, 53, 54, 57, 58, 60, 61, 63, 64, 65, 70, 72, 73, 76, 77, 80, 81, 83, 84, 86, 87, 88, 93, 96, 123, 124, 137, 141, 143, 164, 168, 169, 280, 323, 324, 325, 343, 363, 366, 369, 370, 371, 372, 377, 379, 387, 388, 389, 391, 395, 396, 397, 401, 402, 405, 406, 407, 408, 412, 413, 423, 442, 445, 453, 454, 455, 458, 461, 463, 465, 466, 467, 470, 474, 480, 481, 483, 484, 485, 488, 489, 503, 504, 505, 527, 542, 543, 545, 566, 567, 571, 603, 606, 607, 618, 621, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 639, 641, 642, 643, 644, 647, 650, 652, 670, 684, 692, 693, 694, 696, 697, 698, 699, 701, 703, 708, 711, 713, 715, 716, 717, 719, 723, 724, 725, 726, 727, 728, 734, 735, 736, 737, 739, 741, 743, 745, 746, 763, 764, 766, 768, 782, 788, 795, 796, 798, 809, 819, 827, 830, 832, 845, 854], "to_list": [3, 8, 54, 77, 623], "arrai": [3, 4, 6, 8, 9, 10, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 182, 192, 193, 197, 202, 204, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 570, 571, 577, 578, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 768, 774, 781, 782, 783, 784, 787, 791, 795, 796, 798, 802, 806, 808, 809, 810, 813, 816, 817, 818, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 855, 856, 859, 860, 861, 863, 867, 868], "282": [3, 8], "281": [3, 8, 41, 43], "285": [3, 8, 76], "dev": [3, 7, 8, 9, 10, 20, 41, 43, 46, 51, 70, 74, 197, 204, 620, 809, 821, 825, 828, 842, 844], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 8, 9, 10, 12, 14, 18, 19, 22, 23, 24, 25, 39, 41, 42, 43, 44, 46, 47, 52, 53, 58, 62, 69, 75, 76, 78, 81, 85, 108, 222, 257, 259, 261, 291, 292, 294, 361, 369, 381, 388, 390, 407, 410, 513, 604, 615, 621, 624, 626, 636, 664, 672, 730, 749], "tiger": [3, 8], "tabbi": [3, 8], "egyptian": [3, 8], "check": [3, 4, 7, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 44, 46, 48, 50, 54, 58, 70, 73, 77, 81, 114, 152, 153, 162, 163, 166, 168, 169, 170, 173, 188, 195, 196, 203, 215, 528, 538, 540, 541, 548, 554, 555, 556, 557, 558, 574, 584, 596, 602, 615, 619, 620, 623, 626, 630, 662, 663, 670, 708, 718, 719, 720, 761, 768, 795, 796, 802, 803, 804, 807, 808, 809, 810, 811, 814, 818, 819, 821, 822, 824, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 847, 854], "confirm": [3, 42, 808], "same": [3, 4, 5, 6, 7, 8, 9, 14, 19, 20, 22, 23, 24, 25, 27, 30, 32, 34, 39, 40, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 72, 73, 75, 76, 77, 78, 80, 81, 83, 85, 87, 89, 93, 94, 95, 96, 97, 98, 112, 122, 127, 132, 134, 135, 137, 139, 141, 142, 143, 145, 148, 149, 150, 161, 164, 209, 216, 217, 218, 219, 221, 223, 227, 229, 232, 236, 242, 243, 249, 269, 271, 273, 276, 278, 279, 280, 289, 296, 308, 322, 323, 324, 325, 326, 327, 330, 331, 333, 340, 356, 361, 363, 366, 369, 370, 371, 372, 375, 377, 379, 381, 387, 388, 389, 405, 406, 407, 408, 410, 411, 412, 413, 415, 422, 427, 428, 436, 437, 438, 439, 440, 442, 443, 445, 448, 458, 460, 475, 483, 484, 491, 493, 503, 505, 510, 511, 512, 513, 514, 515, 516, 522, 559, 613, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 632, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 655, 656, 657, 658, 660, 661, 662, 663, 665, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 690, 693, 694, 696, 697, 699, 700, 705, 706, 721, 731, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 766, 767, 768, 774, 782, 795, 802, 809, 810, 815, 816, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 842, 844, 845, 846, 850, 852, 854, 856, 858, 860, 867, 868], "8": [3, 7, 8, 9, 10, 20, 22, 23, 24, 25, 39, 41, 43, 46, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 98, 99, 106, 121, 131, 132, 136, 139, 145, 154, 156, 157, 158, 161, 169, 194, 211, 219, 221, 222, 226, 227, 230, 231, 232, 234, 240, 243, 247, 248, 254, 255, 256, 260, 261, 264, 265, 267, 268, 269, 274, 275, 278, 279, 280, 283, 284, 287, 288, 289, 293, 298, 300, 301, 302, 304, 305, 307, 308, 325, 329, 340, 343, 345, 346, 347, 350, 357, 361, 363, 366, 369, 370, 371, 372, 381, 387, 388, 389, 390, 395, 396, 400, 401, 405, 406, 410, 411, 415, 418, 421, 429, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 459, 461, 465, 470, 471, 480, 481, 484, 485, 486, 489, 490, 500, 502, 514, 517, 518, 522, 528, 529, 531, 535, 536, 539, 542, 546, 550, 551, 552, 554, 555, 558, 561, 566, 567, 571, 581, 582, 583, 584, 604, 607, 609, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 639, 643, 644, 646, 647, 648, 649, 652, 658, 659, 660, 662, 663, 664, 667, 668, 669, 672, 674, 675, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 693, 700, 701, 703, 709, 716, 720, 728, 729, 730, 731, 733, 738, 739, 741, 743, 744, 746, 748, 749, 751, 753, 755, 756, 766, 769, 782, 809, 818, 819, 822, 835, 839, 843], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 10, 12, 14, 27, 28, 41, 42, 53, 55, 57, 59, 76, 78, 80, 82, 93, 94, 310, 314, 347, 363, 366, 369, 370, 381, 395, 428, 510, 512, 515, 604, 605, 608, 610, 611, 612, 624, 625, 627, 629, 649, 650, 651, 652, 655, 686, 707, 768, 781, 782, 784, 786, 800, 802, 818, 828, 835, 840, 844, 845, 860], "imagenet1k_v1": [3, 8], "dropout": [3, 57, 80, 369, 392, 393, 394, 625, 650, 652, 655, 782, 843], "9": [3, 4, 5, 7, 8, 9, 10, 20, 22, 23, 24, 25, 39, 41, 43, 46, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 69, 73, 75, 76, 77, 78, 80, 81, 83, 85, 87, 88, 89, 98, 99, 106, 122, 123, 124, 136, 154, 155, 156, 157, 158, 161, 164, 217, 219, 221, 222, 225, 226, 227, 230, 231, 236, 237, 238, 243, 250, 256, 257, 258, 260, 264, 265, 267, 268, 269, 272, 274, 275, 279, 280, 283, 284, 285, 290, 295, 298, 299, 300, 337, 339, 343, 349, 350, 357, 361, 366, 367, 369, 371, 372, 379, 381, 387, 388, 389, 390, 395, 396, 400, 401, 405, 406, 410, 411, 415, 429, 444, 446, 448, 449, 453, 454, 455, 461, 465, 470, 480, 481, 482, 483, 485, 489, 500, 502, 505, 514, 531, 535, 536, 537, 539, 542, 550, 551, 554, 555, 558, 566, 567, 581, 583, 604, 605, 606, 610, 611, 615, 618, 619, 621, 623, 624, 625, 626, 628, 630, 632, 633, 634, 635, 636, 639, 640, 641, 647, 648, 649, 657, 658, 660, 662, 663, 664, 667, 668, 669, 672, 674, 675, 677, 678, 679, 681, 682, 683, 689, 693, 697, 698, 700, 701, 703, 708, 709, 714, 716, 719, 720, 728, 729, 730, 731, 733, 738, 739, 741, 743, 744, 746, 748, 749, 751, 753, 755, 756, 766, 786, 818, 820, 822, 830, 835, 843, 844, 857], "torch_output": [3, 5, 8], "dim": [3, 8, 43, 53, 70, 72, 76, 137, 308, 363, 369, 372, 386, 396, 397, 398, 401, 409, 465, 618, 625, 638, 645, 646, 651, 768, 782, 802, 820, 832, 833, 838], "torch_class": [3, 8], "torch_logit": [3, 8], "tensor": [3, 4, 7, 8, 9, 12, 14, 18, 19, 22, 23, 25, 27, 28, 29, 33, 39, 41, 49, 52, 53, 54, 57, 59, 60, 62, 70, 72, 75, 76, 77, 80, 81, 82, 83, 85, 92, 125, 133, 134, 137, 143, 159, 175, 267, 268, 297, 314, 318, 319, 320, 321, 322, 323, 332, 354, 361, 363, 366, 369, 370, 371, 372, 381, 382, 387, 388, 391, 395, 404, 405, 406, 407, 414, 416, 418, 425, 426, 427, 428, 431, 433, 435, 436, 439, 441, 442, 443, 445, 448, 449, 465, 468, 473, 476, 477, 478, 479, 482, 487, 518, 523, 566, 567, 618, 619, 621, 623, 625, 626, 627, 628, 632, 648, 651, 652, 666, 679, 686, 696, 698, 728, 782, 791, 796, 800, 802, 815, 816, 820, 821, 825, 827, 828, 831, 832, 833, 835, 836, 838, 840, 842, 843, 845, 846, 848, 850, 854, 855, 856, 858, 859, 862, 864, 865, 868], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 8, 25, 39, 607, 614, 624, 843], "lt": [3, 8, 12, 14, 18, 22, 23, 24, 25, 39, 41, 43, 99], "takebackward0": [3, 8], "gt": [3, 6, 8, 12, 14, 18, 22, 23, 24, 25, 39, 41, 43, 46, 99, 833, 840], "great": [3, 5, 802, 810, 835, 840, 842, 851, 852, 867], "With": [3, 20, 30, 39, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 164, 171, 176, 177, 178, 179, 180, 190, 193, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 331, 333, 335, 338, 342, 345, 346, 347, 349, 350, 353, 361, 363, 366, 369, 370, 371, 372, 381, 390, 392, 393, 400, 412, 419, 420, 421, 423, 424, 425, 434, 437, 449, 465, 466, 467, 469, 472, 474, 475, 481, 483, 485, 488, 503, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 528, 529, 530, 531, 534, 535, 536, 537, 538, 542, 543, 546, 548, 550, 551, 552, 566, 567, 581, 582, 584, 586, 588, 589, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 655, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 681, 682, 683, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 809, 820, 822, 832, 835, 838, 840, 851, 852, 854, 861, 864], "simpl": [3, 12, 16, 17, 19, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 39, 41, 43, 46, 53, 76, 381, 512, 768, 782, 796, 802, 808, 809, 810, 815, 817, 818, 820, 821, 822, 823, 828, 831, 832, 835, 836, 838, 842, 844, 845, 846, 848, 850, 854, 855, 860, 861, 862, 863], "chang": [3, 4, 10, 18, 28, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 366, 369, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 615, 621, 628, 630, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 673, 674, 675, 677, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 709, 720, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 763, 802, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 822, 823, 825, 826, 832, 833, 834, 835, 836, 837, 838, 840, 844, 846, 847, 852, 854, 864, 867], "backend": [3, 6, 9, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 33, 48, 49, 53, 54, 58, 70, 76, 77, 81, 98, 125, 162, 163, 166, 188, 195, 196, 198, 201, 212, 330, 331, 366, 370, 421, 423, 519, 528, 540, 541, 549, 552, 553, 563, 570, 584, 587, 618, 619, 620, 623, 626, 677, 761, 763, 764, 766, 767, 768, 771, 773, 774, 779, 783, 784, 786, 790, 791, 802, 806, 807, 809, 810, 813, 814, 815, 819, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 835, 837, 838, 839, 841, 842, 845, 848, 850, 854, 855, 856, 861, 864, 867, 868], "let": [3, 4, 5, 7, 9, 10, 12, 14, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 41, 42, 44, 46, 54, 66, 77, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 280, 282, 283, 287, 542, 543, 621, 623, 626, 636, 681, 751, 753, 754, 755, 756, 802, 808, 811, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 852, 854, 855, 868], "u": [3, 7, 41, 43, 45, 46, 53, 58, 72, 76, 81, 93, 94, 134, 370, 431, 438, 440, 626, 630, 656, 662, 663, 677, 716, 802, 803, 809, 810, 813, 818, 819, 826, 829, 831, 832, 833, 834, 835, 836, 838, 844, 846, 851], "differ": [3, 4, 7, 9, 10, 12, 16, 17, 21, 22, 23, 27, 28, 31, 32, 33, 34, 52, 53, 54, 58, 66, 70, 76, 77, 89, 98, 99, 108, 111, 161, 219, 236, 243, 244, 269, 285, 329, 336, 340, 341, 345, 366, 369, 370, 372, 381, 402, 413, 436, 442, 459, 466, 467, 481, 513, 514, 522, 542, 543, 615, 619, 621, 623, 625, 626, 628, 636, 648, 649, 664, 675, 690, 700, 747, 748, 753, 755, 756, 761, 766, 774, 783, 784, 802, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 864, 867, 868], "ll": [3, 5, 7, 9, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 42, 802, 803, 806, 808, 809, 810, 811, 817, 822, 825, 826, 830, 831, 843, 847, 852, 854, 855], "try": [3, 19, 29, 39, 42, 46, 70, 590, 623, 781, 791, 802, 808, 809, 810, 814, 815, 818, 819, 820, 824, 826, 831, 833, 840, 842, 846, 849, 851, 852, 856], "10": [3, 5, 8, 9, 10, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 41, 43, 45, 46, 49, 52, 53, 54, 55, 57, 58, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 122, 132, 133, 134, 218, 226, 227, 230, 231, 234, 241, 246, 248, 254, 256, 258, 269, 275, 282, 283, 288, 296, 329, 330, 331, 334, 338, 340, 342, 343, 345, 346, 347, 349, 350, 354, 357, 366, 369, 372, 381, 387, 388, 389, 390, 400, 405, 406, 410, 411, 412, 413, 415, 443, 455, 458, 461, 465, 470, 480, 481, 489, 510, 513, 514, 517, 519, 522, 535, 536, 537, 539, 542, 543, 545, 550, 551, 559, 567, 571, 576, 581, 583, 595, 598, 610, 618, 621, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 642, 648, 658, 660, 664, 665, 667, 668, 669, 672, 677, 678, 679, 681, 683, 693, 698, 699, 700, 701, 703, 714, 716, 719, 720, 727, 728, 729, 730, 731, 737, 739, 745, 747, 748, 749, 750, 752, 753, 755, 756, 766, 768, 786, 802, 806, 809, 814, 818, 819, 820, 822, 825, 830, 833, 835, 840, 842, 843, 851, 856, 866], "tf": [3, 5, 6, 9, 12, 14, 19, 22, 23, 25, 27, 28, 29, 30, 32, 34, 39, 44, 45, 779, 802, 815, 820, 821, 827, 831, 832, 835, 836, 838, 840, 845, 846, 848, 854, 855, 856, 861], "onc": [3, 5, 27, 28, 39, 41, 58, 62, 81, 85, 209, 370, 422, 620, 626, 632, 661, 662, 663, 677, 728, 802, 808, 809, 810, 818, 819, 820, 821, 822, 825, 826, 831, 832, 835, 838, 840, 843, 846, 847, 852, 854], "set": [3, 12, 14, 20, 27, 28, 30, 33, 41, 42, 43, 44, 45, 48, 53, 54, 57, 58, 63, 65, 66, 70, 76, 77, 80, 81, 86, 88, 89, 111, 114, 121, 141, 143, 177, 178, 179, 180, 181, 192, 205, 206, 207, 208, 209, 224, 323, 335, 350, 352, 357, 363, 366, 367, 369, 370, 371, 372, 381, 391, 412, 416, 420, 424, 427, 443, 448, 449, 465, 475, 478, 485, 512, 517, 518, 519, 520, 521, 522, 524, 528, 535, 547, 552, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 584, 592, 615, 617, 618, 619, 620, 621, 623, 625, 626, 630, 632, 633, 635, 636, 648, 655, 657, 668, 670, 673, 676, 677, 708, 715, 718, 719, 720, 725, 726, 732, 734, 735, 739, 741, 742, 743, 746, 754, 756, 763, 766, 767, 768, 769, 774, 781, 782, 784, 786, 791, 796, 799, 800, 802, 803, 810, 813, 814, 815, 817, 818, 819, 820, 821, 822, 824, 826, 828, 829, 831, 832, 833, 835, 836, 838, 840, 842, 843, 850, 853, 854, 855, 859, 860, 861, 862, 863, 865, 868], "our": [3, 7, 9, 10, 12, 14, 16, 19, 20, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 39, 41, 42, 45, 68, 91, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 768, 778, 779, 781, 782, 784, 785, 786, 787, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 826, 829, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 850, 851, 854, 866, 867], "post": [3, 5, 41, 61, 84, 631, 727, 809, 825, 830, 845, 847], "process": [3, 5, 6, 22, 27, 28, 32, 41, 203, 215, 620, 803, 809, 810, 817, 818, 819, 825, 826, 828, 830, 832, 833, 834, 835, 838, 840, 845, 851, 852, 854, 859, 860, 861, 864, 865, 867, 868], "11": [3, 5, 6, 8, 9, 18, 20, 22, 23, 24, 25, 39, 41, 42, 43, 46, 52, 53, 54, 57, 58, 62, 66, 75, 76, 77, 80, 81, 83, 85, 89, 99, 219, 223, 226, 231, 241, 278, 279, 285, 347, 366, 369, 370, 372, 387, 388, 400, 405, 406, 410, 411, 415, 424, 458, 459, 461, 465, 470, 472, 489, 513, 514, 529, 535, 536, 542, 551, 567, 621, 623, 625, 626, 627, 628, 630, 632, 633, 634, 636, 639, 640, 648, 649, 660, 663, 664, 665, 667, 668, 672, 676, 677, 678, 679, 681, 683, 686, 688, 693, 698, 699, 701, 703, 714, 716, 726, 729, 730, 731, 738, 739, 747, 748, 749, 756, 818, 819, 820, 822, 830], "st": [3, 4, 7, 766, 814, 833, 835], "perf_count": [3, 6, 7], "raw_logit": 3, "latenc": [3, 7], "nn": [3, 5, 6, 14, 25, 27, 28, 41, 45, 135, 618, 802, 828, 833, 838, 845, 855, 862], "axi": [3, 5, 10, 42, 43, 44, 47, 49, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 109, 113, 133, 134, 137, 209, 283, 288, 330, 331, 335, 336, 343, 350, 366, 369, 371, 372, 375, 379, 381, 390, 391, 397, 400, 402, 412, 413, 447, 452, 460, 461, 462, 465, 466, 467, 470, 475, 480, 481, 483, 484, 485, 488, 489, 494, 495, 497, 505, 510, 513, 514, 515, 517, 518, 519, 520, 521, 522, 535, 542, 603, 615, 618, 620, 621, 623, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 647, 657, 660, 668, 681, 683, 684, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 733, 734, 735, 739, 741, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 768, 778, 782, 783, 788, 818, 820, 822, 824, 827, 828, 831, 832, 835, 838, 840, 842, 845], "direct": [3, 53, 76, 336, 342, 346, 351, 355, 366, 369, 372, 402, 413, 466, 467, 481, 635, 746, 808, 815, 817, 832, 838, 844, 845, 857, 861, 862, 865], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 10, 12, 14, 20, 21, 22, 23, 27, 28, 33, 39, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 204, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 330, 331, 332, 333, 334, 336, 338, 340, 342, 344, 346, 347, 348, 349, 353, 354, 356, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 401, 402, 404, 405, 406, 407, 410, 412, 413, 414, 417, 418, 419, 420, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 458, 460, 463, 468, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 530, 531, 535, 536, 537, 539, 542, 543, 546, 552, 559, 566, 567, 577, 585, 587, 599, 603, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 743, 744, 746, 747, 748, 749, 751, 753, 754, 756, 757, 758, 763, 766, 768, 781, 782, 785, 795, 800, 802, 810, 811, 818, 820, 821, 822, 823, 824, 825, 827, 831, 832, 833, 835, 836, 837, 840, 842, 843, 844, 845, 854, 855], "dtype": [3, 5, 8, 10, 14, 20, 22, 23, 24, 25, 39, 42, 49, 50, 53, 54, 57, 58, 62, 63, 66, 70, 72, 73, 75, 76, 77, 80, 81, 85, 86, 89, 98, 101, 102, 103, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 204, 231, 270, 307, 308, 309, 310, 311, 312, 313, 318, 319, 320, 321, 322, 328, 333, 335, 350, 363, 366, 369, 370, 371, 372, 376, 381, 390, 400, 412, 413, 416, 437, 443, 448, 459, 483, 498, 499, 500, 501, 502, 512, 513, 514, 515, 518, 521, 522, 539, 540, 541, 543, 552, 561, 588, 618, 619, 620, 621, 623, 625, 626, 629, 632, 633, 635, 636, 637, 641, 648, 668, 684, 706, 707, 729, 730, 731, 734, 735, 736, 745, 746, 747, 748, 753, 755, 757, 758, 761, 763, 766, 768, 769, 781, 782, 783, 784, 785, 787, 802, 806, 814, 816, 820, 821, 822, 824, 825, 828, 829, 831, 832, 833, 835, 836, 840, 842, 855], "int32": [3, 39, 41, 50, 53, 54, 62, 63, 66, 73, 76, 77, 85, 86, 128, 133, 139, 145, 148, 151, 153, 155, 157, 159, 162, 164, 165, 169, 172, 176, 180, 184, 186, 204, 231, 377, 381, 503, 513, 514, 515, 543, 552, 588, 618, 619, 620, 621, 623, 632, 633, 636, 729, 730, 731, 735, 747, 748, 753, 755, 766, 767, 820, 832, 835, 840], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 8, 10, 12, 14, 19, 20, 39, 41, 42, 43, 49, 50, 53, 54, 57, 72, 73, 76, 77, 80, 89, 134, 137, 139, 145, 146, 147, 151, 155, 156, 159, 160, 161, 162, 165, 168, 169, 171, 176, 179, 185, 249, 276, 328, 340, 363, 366, 369, 370, 371, 381, 390, 400, 413, 437, 443, 448, 515, 552, 588, 618, 619, 621, 623, 625, 626, 629, 641, 643, 644, 647, 675, 677, 678, 684, 706, 707, 763, 766, 767, 802, 820, 822, 833, 835, 836, 855, 856], "As": [3, 5, 7, 9, 10, 12, 14, 20, 24, 25, 27, 28, 30, 33, 39, 40, 64, 68, 91, 634, 739, 740, 741, 742, 802, 806, 808, 809, 810, 811, 815, 817, 818, 819, 820, 821, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 838, 842, 843, 844, 846, 850, 854, 855, 856, 861, 866], "expect": [3, 5, 7, 9, 20, 24, 27, 28, 30, 43, 44, 46, 53, 58, 59, 76, 82, 175, 243, 287, 369, 371, 391, 413, 448, 526, 619, 621, 623, 627, 672, 686, 781, 782, 802, 809, 810, 814, 820, 821, 824, 826, 829, 831, 833, 835, 838, 846, 847, 852, 854, 855, 856], "ident": [3, 10, 25, 42, 44, 58, 70, 128, 197, 545, 571, 618, 620, 623, 626, 630, 664, 669, 721, 782, 818, 828, 829, 832, 833, 836, 838, 842, 843, 846, 848, 850, 852], "had": [3, 818, 819, 831, 836, 840, 861, 862], "anoth": [3, 18, 20, 21, 24, 25, 27, 28, 30, 31, 43, 44, 129, 149, 151, 618, 619, 802, 808, 809, 810, 816, 818, 820, 821, 824, 826, 828, 831, 832, 835, 840, 842, 845, 848, 851, 853, 854, 855, 861, 867], "postprocess": 3, "routin": [3, 819, 831, 832, 838, 846, 861], "feed": [3, 209, 620, 854, 861, 862], "other": [3, 6, 7, 9, 12, 14, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 50, 52, 53, 54, 60, 66, 70, 73, 75, 76, 77, 83, 89, 93, 98, 99, 122, 137, 149, 175, 236, 241, 243, 259, 268, 269, 332, 336, 366, 372, 459, 460, 468, 524, 525, 618, 619, 621, 623, 632, 636, 690, 700, 731, 754, 756, 768, 802, 806, 808, 809, 810, 811, 814, 815, 818, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 842, 844, 845, 846, 847, 848, 851, 854, 855, 857, 859, 860, 861, 867, 868], "carefulli": [3, 274, 621, 781, 832, 859, 864], "rewrit": 3, "easili": [3, 24, 27, 28, 39, 802, 809, 815, 819, 825, 832, 838, 843, 844, 845, 846, 851, 861, 867, 868], "out": [3, 5, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 42, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 159, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 410, 412, 413, 416, 417, 418, 419, 420, 421, 422, 425, 426, 428, 429, 430, 432, 433, 434, 435, 437, 441, 444, 445, 446, 447, 449, 450, 456, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 530, 531, 535, 536, 537, 539, 542, 543, 552, 562, 566, 567, 604, 605, 608, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 774, 778, 779, 781, 782, 784, 785, 786, 787, 802, 803, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 861, 868], "quickest": 3, "particular": [3, 27, 28, 264, 621, 767, 809, 810, 814, 816, 819, 820, 822, 829, 831, 832, 835, 836, 857, 861, 867], "hardwar": [3, 41, 98, 102, 802, 809, 838, 851, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867], "again": [3, 5, 21, 22, 30, 31, 32, 33, 626, 675, 810, 815, 816, 817, 818, 822, 824, 826, 831, 832, 835, 836, 838, 843, 845, 846, 851, 852, 866, 867], "speed": [3, 7, 9, 10, 27, 28, 41, 46, 54, 77, 559, 623, 835, 850, 864], "up": [3, 5, 7, 9, 10, 27, 53, 54, 76, 77, 369, 372, 391, 404, 459, 467, 547, 559, 623, 625, 648, 802, 803, 806, 808, 810, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 854, 862, 867, 868], "12": [3, 5, 7, 8, 10, 18, 20, 22, 23, 24, 25, 39, 41, 42, 43, 50, 52, 53, 54, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 84, 85, 89, 98, 99, 164, 219, 221, 226, 230, 231, 234, 236, 237, 238, 256, 269, 272, 279, 282, 289, 290, 312, 313, 343, 346, 347, 363, 366, 369, 372, 381, 387, 388, 389, 390, 392, 396, 397, 405, 406, 410, 411, 412, 413, 415, 458, 459, 461, 465, 470, 489, 502, 513, 519, 520, 521, 531, 535, 536, 567, 573, 581, 595, 621, 623, 625, 626, 628, 630, 631, 632, 633, 634, 636, 639, 643, 648, 649, 660, 662, 664, 668, 672, 676, 678, 679, 681, 683, 693, 697, 699, 701, 703, 720, 727, 729, 730, 731, 738, 739, 747, 748, 749, 753, 755, 766, 809, 816, 818, 820, 822, 830], "repeat": [3, 4, 21, 31, 53, 54, 60, 76, 77, 83, 369, 372, 381, 397, 402, 464, 512, 537, 623, 628, 629, 702, 706, 707, 795, 810, 815, 816, 822, 823, 831, 835], "previou": [3, 10, 20, 21, 22, 24, 30, 31, 32, 34, 55, 76, 78, 183, 184, 185, 186, 187, 358, 368, 369, 414, 591, 593, 594, 595, 596, 598, 599, 601, 605, 610, 619, 623, 624, 781, 799, 809, 810, 814, 816, 819, 821, 827, 832, 835, 838, 845, 846, 864], "trace": [3, 4, 5, 7, 8, 9, 16, 17, 21, 24, 27, 30, 32, 33, 45, 54, 58, 70, 77, 81, 554, 555, 558, 569, 578, 592, 600, 623, 626, 763, 774, 784, 786, 800, 802, 814, 818, 820, 832, 837, 838, 840, 845, 846, 853, 854, 855, 862, 867], "befor": [3, 4, 5, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 41, 53, 57, 58, 60, 64, 66, 70, 76, 80, 81, 206, 209, 214, 369, 372, 381, 396, 401, 411, 415, 459, 466, 467, 468, 475, 513, 514, 620, 625, 626, 628, 629, 630, 634, 636, 638, 639, 640, 641, 643, 645, 647, 651, 652, 655, 667, 684, 690, 705, 706, 720, 739, 740, 741, 742, 747, 748, 753, 755, 782, 791, 795, 808, 809, 810, 814, 815, 817, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 840, 843, 846, 854, 855, 861], "13": [3, 5, 7, 8, 18, 22, 23, 24, 25, 39, 41, 43, 47, 52, 53, 57, 58, 62, 66, 75, 76, 77, 78, 80, 83, 85, 89, 98, 114, 164, 194, 219, 234, 243, 254, 274, 283, 343, 350, 357, 366, 369, 372, 389, 390, 400, 405, 411, 415, 458, 459, 461, 465, 470, 489, 502, 513, 514, 530, 531, 535, 536, 551, 573, 581, 604, 615, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 633, 634, 636, 639, 640, 648, 649, 660, 664, 672, 676, 678, 681, 703, 707, 720, 729, 730, 731, 738, 739, 747, 748, 749, 818, 820, 822, 832], "026875037000081647": 3, "14": [3, 5, 7, 8, 23, 39, 41, 42, 43, 50, 52, 53, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 85, 148, 161, 164, 217, 222, 224, 231, 235, 261, 265, 269, 275, 282, 290, 339, 369, 370, 372, 381, 387, 388, 389, 390, 400, 407, 410, 411, 412, 415, 419, 425, 426, 459, 461, 465, 470, 489, 513, 581, 604, 619, 621, 623, 624, 625, 626, 628, 630, 634, 636, 639, 640, 642, 644, 646, 648, 660, 662, 664, 672, 679, 681, 683, 703, 720, 729, 730, 731, 739, 748, 749, 818, 822, 835], "overrid": [3, 5, 33, 42, 49, 53, 72, 76, 137, 381, 512, 618, 815, 817], "behavior": [3, 5, 53, 64, 236, 243, 269, 278, 382, 523, 570, 593, 621, 623, 634, 739, 740, 741, 742, 808, 817, 818, 819, 820, 831, 832, 833, 835, 838, 840, 846, 858], "prealloc": [3, 5], "75": [3, 5, 39, 52, 53, 75, 76, 77, 80, 85, 115, 133, 222, 224, 236, 238, 249, 310, 342, 343, 363, 366, 411, 522, 537, 550, 581, 615, 618, 621, 623, 626, 630, 632, 639, 665, 672, 716, 731], "memori": [3, 5, 6, 9, 19, 22, 23, 24, 25, 49, 53, 60, 72, 76, 83, 124, 135, 191, 203, 209, 211, 215, 372, 381, 453, 454, 461, 463, 465, 466, 467, 474, 489, 519, 565, 570, 593, 618, 620, 623, 625, 628, 650, 651, 692, 693, 694, 696, 698, 699, 701, 703, 796, 800, 819, 820, 821, 831, 832, 838, 840, 846, 854, 861, 863, 864, 865], "temporari": [3, 5, 579, 601, 623, 796, 820, 837], "fix": [3, 5, 43, 53, 76, 93, 94, 366, 369, 370, 414, 442, 625, 652, 802, 806, 809, 810, 814, 820, 826, 835, 836], "until": [3, 5, 796, 810, 831, 840, 846, 851, 854, 868], "handl": [3, 5, 39, 41, 47, 51, 52, 53, 69, 70, 74, 75, 76, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 189, 190, 191, 192, 193, 197, 202, 203, 211, 215, 221, 233, 258, 260, 274, 280, 281, 286, 287, 291, 295, 296, 298, 361, 372, 458, 484, 615, 620, 621, 626, 636, 681, 753, 755, 778, 786, 803, 805, 813, 818, 819, 820, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 844, 858, 868], "o": [3, 5, 40, 41, 42, 43, 45, 562, 623, 625, 652, 802, 809, 813, 819, 840, 847], "environ": [3, 5, 6, 9, 22, 23, 24, 25, 42, 45, 802, 803, 810, 847, 861, 863], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 6, 10, 22, 23, 25, 804, 807, 809, 817, 859, 863, 865], "jit": [3, 7, 9, 27, 30, 840, 846, 854, 861], "img_jax": [3, 5], "device_put": [3, 7], "15": [3, 5, 6, 8, 9, 10, 23, 39, 41, 42, 43, 46, 52, 53, 54, 58, 62, 66, 72, 73, 75, 76, 77, 80, 81, 83, 85, 89, 99, 132, 161, 219, 226, 230, 236, 238, 247, 254, 255, 260, 261, 269, 278, 279, 280, 343, 357, 366, 367, 369, 370, 372, 381, 387, 388, 405, 407, 410, 411, 415, 421, 461, 465, 470, 489, 513, 531, 535, 536, 539, 550, 551, 576, 581, 598, 618, 619, 621, 623, 625, 626, 628, 630, 632, 633, 634, 636, 639, 649, 660, 663, 664, 665, 672, 678, 679, 697, 703, 708, 720, 729, 730, 737, 739, 747, 748, 749, 763, 805, 809, 819, 822, 830, 864], "warm": 3, "_": [3, 6, 7, 9, 10, 27, 40, 41, 52, 53, 70, 75, 76, 78, 94, 151, 239, 241, 249, 250, 265, 330, 331, 366, 369, 372, 381, 412, 439, 442, 483, 512, 535, 604, 605, 619, 621, 623, 624, 626, 628, 630, 636, 675, 676, 678, 704, 715, 754, 810, 819, 820, 823, 831, 843], "rang": [3, 6, 10, 27, 28, 39, 40, 41, 43, 49, 53, 66, 72, 76, 122, 133, 134, 283, 294, 302, 314, 361, 363, 370, 372, 381, 423, 433, 468, 476, 478, 483, 487, 513, 514, 515, 535, 603, 618, 621, 623, 634, 636, 739, 747, 748, 753, 755, 766, 768, 769, 781, 802, 805, 808, 820, 824, 828, 835, 840, 843, 844, 845, 861, 867], "16": [3, 5, 6, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 54, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 85, 98, 99, 164, 230, 259, 279, 286, 340, 343, 347, 366, 369, 372, 381, 387, 388, 390, 396, 400, 401, 405, 406, 411, 415, 448, 465, 513, 519, 536, 539, 561, 581, 582, 614, 619, 621, 623, 624, 625, 626, 628, 630, 632, 633, 636, 647, 649, 656, 660, 663, 664, 672, 674, 678, 703, 716, 729, 730, 731, 738, 748, 749, 766, 769, 802, 810, 820, 822, 843], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 53, 69, 70, 106, 369, 371, 404, 409, 447, 448, 634, 739, 741, 768, 778, 809, 810, 814, 822, 840], "note": [3, 5, 10, 23, 27, 28, 33, 42, 43, 44, 53, 54, 58, 60, 64, 76, 81, 83, 93, 130, 143, 175, 243, 278, 279, 286, 323, 324, 343, 363, 366, 369, 370, 372, 391, 422, 427, 435, 436, 442, 465, 483, 619, 621, 625, 626, 628, 634, 636, 652, 661, 662, 674, 675, 677, 696, 700, 740, 742, 751, 782, 796, 800, 806, 808, 809, 810, 815, 820, 822, 823, 826, 831, 832, 833, 835, 836, 838], "were": [3, 5, 44, 70, 73, 164, 168, 169, 243, 621, 625, 652, 808, 809, 810, 820, 824, 826, 830, 831, 833, 835, 836, 838, 840, 854, 861, 862, 867], "function": [3, 6, 10, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 162, 163, 164, 167, 168, 169, 171, 175, 176, 193, 195, 196, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 565, 566, 567, 570, 571, 574, 576, 578, 581, 582, 583, 584, 586, 588, 589, 590, 596, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 764, 766, 767, 768, 769, 774, 778, 781, 784, 791, 792, 798, 800, 802, 806, 809, 810, 813, 814, 815, 816, 817, 819, 822, 823, 825, 831, 834, 839, 841, 842, 843, 844, 848, 850, 854, 856, 858, 859, 860, 861, 862, 867, 868], "calcul": [3, 10, 41, 52, 53, 54, 59, 66, 70, 75, 76, 77, 81, 82, 89, 99, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 236, 239, 240, 241, 257, 258, 259, 260, 261, 262, 267, 268, 269, 274, 281, 282, 283, 285, 286, 287, 293, 302, 330, 331, 343, 353, 366, 369, 370, 371, 372, 375, 381, 387, 388, 389, 423, 443, 448, 475, 491, 493, 519, 559, 621, 623, 626, 627, 636, 663, 672, 675, 686, 687, 688, 750, 751, 752, 753, 754, 755, 756, 766, 768, 781, 782, 785, 808, 823, 840, 851, 854], "dog": 3, "18": [3, 9, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 62, 75, 76, 80, 81, 85, 89, 109, 231, 236, 278, 282, 291, 292, 343, 361, 366, 369, 372, 390, 396, 400, 401, 405, 411, 415, 465, 615, 621, 626, 632, 636, 643, 660, 667, 672, 679, 729, 730, 731, 748, 749, 753, 818, 820, 822], "19": [3, 9, 22, 23, 24, 25, 39, 41, 42, 43, 46, 52, 53, 62, 75, 76, 80, 81, 85, 222, 231, 259, 269, 286, 369, 370, 372, 381, 389, 390, 401, 405, 411, 415, 421, 426, 465, 513, 621, 626, 630, 632, 635, 660, 668, 681, 719, 729, 730, 731, 746, 822], "006431100999861883": 3, "258": [3, 625, 640, 642], "104": [3, 66, 626, 636, 672, 749], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 819], "predict": [3, 5, 8, 10, 41, 42, 43, 44, 53, 59, 76, 82, 371, 444, 447, 450, 627, 686, 687, 688, 802, 820], "down": [3, 20, 30, 44, 53, 76, 369, 372, 404, 467, 809, 835, 848, 861, 867], "itself": [3, 22, 32, 52, 93, 270, 525, 590, 621, 623, 630, 720, 796, 806, 809, 810, 814, 817, 818, 819, 820, 821, 824, 825, 826, 831, 832, 844, 846, 850, 854, 860, 861, 862, 867], "version": [3, 6, 10, 24, 25, 30, 41, 42, 43, 46, 47, 53, 76, 93, 106, 287, 335, 337, 366, 381, 517, 522, 603, 621, 623, 626, 662, 663, 763, 791, 792, 802, 809, 810, 817, 819, 820, 823, 831, 833, 840, 850, 851, 852, 855, 867, 868], "return": [3, 5, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 768, 769, 773, 774, 779, 781, 782, 784, 786, 791, 792, 795, 796, 797, 798, 799, 800, 802, 809, 810, 815, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 854, 855, 856, 862], "20": [3, 6, 10, 14, 39, 41, 42, 43, 46, 52, 53, 54, 57, 62, 66, 75, 76, 77, 80, 81, 85, 89, 231, 235, 239, 275, 279, 283, 299, 343, 345, 347, 366, 369, 372, 387, 389, 405, 411, 415, 458, 480, 535, 542, 543, 545, 567, 571, 581, 621, 623, 626, 632, 633, 636, 639, 640, 651, 660, 665, 668, 672, 679, 729, 737, 738, 747, 748, 749, 753, 755, 802, 819, 838, 842], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 851], "sourc": [3, 6, 8, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 770, 771, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 810, 814, 815, 817, 818, 819, 832, 834, 850, 851, 852, 853, 855, 856, 860, 861, 862, 863, 864], "21": [3, 10, 39, 41, 43, 46, 52, 53, 54, 62, 72, 75, 76, 80, 81, 85, 89, 98, 134, 164, 219, 222, 224, 230, 254, 269, 299, 350, 369, 370, 371, 372, 381, 387, 390, 400, 405, 411, 413, 415, 419, 443, 458, 513, 567, 618, 619, 621, 623, 626, 627, 630, 636, 660, 672, 676, 688, 714, 729, 730, 747, 748, 749, 824, 830], "modul": [3, 5, 7, 9, 12, 14, 16, 17, 18, 22, 23, 24, 25, 27, 28, 29, 33, 39, 40, 41, 43, 44, 45, 68, 70, 91, 99, 362, 364, 365, 373, 374, 378, 563, 623, 637, 759, 763, 778, 779, 780, 782, 783, 785, 787, 790, 791, 800, 802, 804, 809, 815, 816, 817, 824, 828, 831, 832, 834, 835, 840, 841, 843, 845, 846, 852, 854, 856, 861, 862, 864], "def": [3, 5, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 45, 52, 75, 118, 220, 529, 547, 617, 623, 629, 630, 706, 707, 714, 795, 802, 806, 808, 809, 814, 815, 818, 820, 821, 822, 824, 825, 827, 828, 830, 831, 832, 833, 835, 836, 838, 840, 842, 843, 844, 845, 854, 855, 856], "__init__": [3, 5, 12, 14, 27, 28, 39, 40, 41, 43, 70, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 764, 771, 772, 773, 778, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 797, 800, 802, 808, 815, 816, 820, 824, 832, 836, 840, 842, 843, 844, 845, 855], "self": [3, 5, 12, 14, 27, 28, 39, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 625, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 786, 795, 802, 810, 815, 818, 824, 832, 833, 840, 842, 843, 844, 845, 855], "num_class": [3, 12, 14, 27, 28, 41, 43, 45, 802, 845, 855], "1000": [3, 6, 7, 8, 12, 27, 28, 41, 42, 43, 44, 46, 49, 72, 134, 618, 802, 843, 855], "v": [3, 4, 5, 16, 17, 20, 27, 28, 30, 33, 34, 39, 42, 43, 53, 57, 65, 72, 76, 80, 88, 134, 234, 239, 241, 282, 370, 372, 423, 431, 438, 439, 464, 621, 625, 629, 635, 652, 655, 706, 707, 745, 763, 782, 783, 784, 785, 786, 787, 802, 804, 809, 810, 812, 813, 817, 825, 840, 843, 844, 845], "none": [3, 5, 7, 9, 10, 27, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 97, 98, 99, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 171, 173, 176, 188, 191, 192, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 563, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 581, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 774, 778, 779, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 796, 800, 802, 806, 809, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 827, 828, 831, 832, 833, 835, 836, 838, 840, 842, 844, 845, 854, 855, 856], "_build": [3, 5, 783, 784, 802], "kwarg": [3, 4, 5, 9, 10, 27, 41, 45, 48, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 99, 102, 199, 372, 475, 562, 590, 618, 620, 623, 761, 763, 778, 779, 782, 783, 784, 791, 800, 802, 815, 820, 821, 824, 828, 831, 832, 838, 840, 844, 854, 855, 856], "featur": [3, 9, 10, 12, 14, 16, 18, 27, 28, 41, 45, 53, 76, 369, 383, 385, 392, 393, 394, 781, 782, 800, 802, 808, 809, 810, 815, 816, 819, 820, 827, 836, 838, 843, 846, 855, 861, 862, 863, 867], "sequenti": [3, 5, 8, 25, 27, 28, 43, 802, 817, 818, 844, 855], "conv2d": [3, 5, 8, 25, 27, 28, 43, 46, 57, 80, 625, 642, 782, 802], "64": [3, 5, 8, 39, 41, 42, 43, 46, 52, 53, 57, 75, 76, 77, 80, 81, 85, 89, 99, 160, 230, 240, 274, 283, 284, 340, 366, 369, 390, 400, 535, 536, 582, 610, 619, 621, 623, 624, 625, 626, 630, 636, 640, 642, 644, 646, 647, 669, 672, 682, 716, 720, 730, 749, 753, 802, 809, 820, 843, 844, 866], "2": [3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 192, 193, 194, 197, 200, 202, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 323, 325, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 381, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 400, 401, 402, 405, 406, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 432, 434, 437, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 488, 489, 490, 494, 495, 497, 500, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 564, 566, 567, 571, 580, 581, 582, 583, 584, 586, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 768, 769, 778, 781, 782, 791, 795, 796, 800, 802, 806, 809, 810, 814, 816, 817, 818, 819, 820, 822, 824, 825, 827, 828, 830, 831, 832, 833, 835, 839, 840, 842, 843, 844, 845, 846, 854, 855, 856, 867, 868], "data_format": [3, 43, 53, 57, 76, 80, 369, 375, 384, 387, 388, 389, 392, 393, 394, 405, 406, 407, 408, 410, 491, 492, 493, 496, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 766, 782, 785, 802], "nchw": [3, 43, 53, 57, 76, 80, 369, 375, 384, 388, 393, 406, 410, 496, 625, 638, 641, 642, 645, 646, 647, 782, 802], "relu": [3, 5, 8, 25, 27, 28, 39, 46, 47, 53, 68, 69, 76, 108, 297, 298, 306, 361, 615, 778, 802, 833, 843, 844], "maxpool2d": [3, 5, 8, 41, 782, 802], "192": [3, 43, 766, 795], "384": [3, 78, 604, 624, 630, 708], "avgpool": [3, 8], "adaptiveavgpool2d": [3, 8, 782], "6": [3, 7, 8, 9, 10, 12, 20, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 63, 65, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 98, 99, 106, 108, 113, 118, 123, 124, 131, 132, 135, 136, 139, 145, 149, 150, 151, 159, 161, 169, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 296, 298, 300, 301, 302, 304, 305, 306, 307, 308, 314, 325, 330, 331, 333, 335, 343, 344, 346, 347, 348, 350, 357, 361, 363, 366, 367, 369, 370, 371, 372, 377, 379, 381, 390, 392, 395, 396, 400, 401, 405, 411, 412, 413, 415, 418, 421, 424, 425, 429, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 459, 461, 465, 466, 470, 471, 474, 475, 480, 481, 483, 484, 489, 490, 500, 502, 503, 505, 510, 512, 513, 514, 515, 517, 519, 521, 522, 528, 530, 531, 534, 535, 536, 542, 543, 550, 551, 552, 567, 581, 582, 583, 584, 586, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 655, 657, 658, 659, 660, 662, 663, 664, 667, 668, 669, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 719, 720, 726, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 766, 781, 802, 806, 809, 814, 816, 818, 819, 820, 822, 825, 830, 835, 838, 840, 842, 843, 844], "classifi": [3, 10, 12, 14, 27, 28, 41, 43, 44, 802, 808, 854, 855], "prob": [3, 43, 53, 57, 76, 80, 85, 369, 376, 392, 393, 394, 498, 625, 632, 648, 728, 782, 802], "linear": [3, 8, 14, 26, 27, 28, 39, 40, 41, 43, 46, 53, 54, 57, 69, 76, 77, 80, 106, 108, 110, 111, 114, 291, 294, 298, 300, 301, 302, 306, 347, 361, 366, 369, 372, 381, 404, 437, 475, 522, 539, 562, 615, 623, 625, 630, 652, 676, 715, 766, 768, 769, 781, 782, 802, 818, 823, 828, 829, 831, 832, 835, 838, 840, 843, 844, 845, 855, 859, 860, 861, 864], "4096": 3, "_forward": [3, 5, 7, 9, 27, 28, 39, 40, 43, 802, 823, 840, 843, 844], "x": [3, 5, 6, 10, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 168, 169, 171, 176, 192, 193, 197, 202, 203, 204, 208, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 323, 324, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 456, 457, 459, 460, 462, 463, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 571, 572, 573, 576, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 602, 603, 605, 606, 607, 609, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 782, 785, 788, 791, 795, 800, 802, 806, 808, 813, 815, 816, 818, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 835, 836, 838, 840, 842, 843, 844, 845, 854, 855, 856], "reshap": [3, 27, 28, 43, 44, 53, 57, 58, 60, 70, 76, 80, 81, 83, 354, 366, 369, 370, 372, 387, 388, 389, 392, 405, 406, 407, 410, 419, 434, 459, 465, 603, 623, 625, 626, 628, 641, 643, 647, 668, 684, 802, 831, 832, 835, 838, 840, 842, 845], "bidirect": [4, 625, 650], "encod": [4, 12, 14, 27, 28, 41, 43, 54, 59, 77, 82, 539, 623, 627, 686, 802, 843, 851, 855], "mlm": 4, "support": [4, 6, 9, 10, 18, 19, 22, 23, 24, 25, 27, 30, 42, 51, 53, 54, 58, 74, 76, 77, 81, 143, 162, 166, 188, 195, 210, 219, 236, 243, 264, 265, 269, 279, 297, 323, 343, 361, 363, 366, 370, 372, 404, 422, 483, 528, 540, 549, 552, 553, 570, 584, 618, 619, 620, 621, 623, 625, 626, 649, 661, 662, 663, 666, 668, 677, 684, 761, 767, 774, 786, 791, 792, 795, 800, 802, 804, 806, 808, 809, 810, 814, 815, 817, 821, 822, 823, 825, 827, 828, 830, 831, 833, 835, 836, 838, 839, 840, 842, 843, 845, 847, 848, 850, 851, 852, 855, 858, 860, 861, 864, 866, 867, 868], "googl": [4, 22, 23, 24, 25, 41, 42, 43, 45, 819, 851], "type": [4, 7, 12, 14, 18, 24, 27, 28, 33, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 766, 767, 768, 769, 773, 774, 778, 781, 782, 783, 784, 788, 791, 795, 796, 797, 800, 802, 808, 809, 810, 813, 814, 815, 818, 821, 822, 823, 824, 827, 829, 831, 833, 835, 836, 838, 840, 842, 843, 854, 855, 856, 861, 862, 865], "choos": [4, 41, 43, 51, 63, 64, 74, 210, 236, 243, 264, 265, 269, 330, 331, 366, 372, 620, 621, 633, 634, 636, 738, 739, 740, 741, 742, 750, 751, 752, 754, 766, 802, 808, 809, 810, 829, 835, 841, 845, 854], "librari": [4, 7, 9, 16, 17, 23, 25, 39, 41, 51, 64, 74, 210, 241, 243, 259, 264, 265, 287, 330, 331, 366, 620, 621, 626, 634, 636, 662, 663, 739, 740, 741, 742, 750, 751, 752, 754, 800, 802, 808, 809, 814, 820, 845, 846, 850, 851, 852, 854, 857, 858, 859, 861, 865, 868], "pretrain": [4, 7, 12, 13, 14, 27, 28, 46, 802, 855], "save": [4, 8, 41, 53, 70, 76, 381, 519, 579, 601, 620, 623, 637, 784, 800, 809, 819, 826, 835, 846, 852, 860], "some": [4, 5, 6, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 32, 33, 39, 43, 44, 70, 78, 241, 243, 259, 369, 392, 393, 394, 604, 605, 608, 610, 611, 612, 620, 621, 624, 630, 719, 782, 802, 806, 808, 809, 810, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 842, 843, 844, 846, 847, 848, 851, 852, 854, 855, 857, 858, 860, 861, 862, 867, 868], "mohame54": 4, "automodel": [4, 9, 27], "autotoken": 4, "load": [4, 6, 7, 9, 24, 27, 41, 42, 43, 44, 45, 46, 70, 370, 438, 637, 784, 802, 835, 846, 860, 867], "token": [4, 43, 811], "bert_bas": 4, "from_pretrain": [4, 9, 27, 44, 854, 855], "base": [4, 10, 41, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 103, 134, 143, 175, 239, 240, 257, 258, 259, 260, 274, 314, 323, 325, 332, 335, 340, 347, 363, 366, 369, 370, 371, 379, 411, 415, 438, 443, 504, 572, 582, 594, 618, 619, 621, 623, 626, 628, 634, 636, 668, 692, 739, 740, 741, 742, 749, 764, 767, 768, 771, 772, 773, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 796, 797, 800, 802, 809, 810, 811, 812, 814, 818, 819, 820, 824, 827, 829, 830, 831, 833, 834, 835, 836, 837, 838, 840, 861, 866, 868], "uncas": 4, "eval": [4, 5, 8, 22, 23, 24, 25, 625, 650, 784], "evalu": [4, 52, 53, 70, 75, 76, 239, 241, 257, 258, 259, 260, 264, 271, 273, 280, 284, 317, 348, 359, 360, 363, 368, 370, 371, 372, 434, 443, 448, 472, 614, 621, 624, 630, 637, 718, 719, 757, 758, 783, 784, 810, 818, 820, 828, 829, 861], "bert_token": 4, "sampl": [4, 7, 9, 12, 14, 24, 27, 28, 42, 49, 52, 53, 62, 66, 72, 75, 76, 85, 89, 133, 134, 288, 314, 363, 369, 371, 372, 376, 392, 393, 394, 404, 414, 416, 443, 448, 478, 498, 499, 500, 501, 502, 618, 621, 632, 636, 728, 729, 730, 731, 754, 756, 782, 833, 835], "test": [4, 19, 20, 22, 23, 29, 30, 32, 33, 34, 42, 43, 52, 54, 67, 75, 77, 90, 121, 167, 171, 250, 251, 252, 253, 276, 369, 392, 393, 394, 559, 617, 619, 621, 623, 637, 757, 758, 761, 764, 767, 796, 802, 804, 806, 807, 813, 817, 820, 822, 824, 826, 829, 832, 834, 836, 846, 847, 852, 854, 855, 856, 861], "did": [4, 41, 808, 817, 845, 851, 867], "realli": [4, 39, 809, 818, 825, 846, 854, 866, 867], "like": [4, 7, 9, 19, 20, 21, 27, 29, 30, 31, 32, 33, 34, 44, 46, 49, 52, 53, 60, 72, 75, 76, 80, 83, 88, 134, 152, 175, 220, 240, 246, 249, 262, 280, 336, 340, 352, 366, 369, 370, 371, 372, 379, 381, 411, 413, 422, 445, 454, 455, 464, 465, 504, 505, 522, 618, 619, 621, 626, 628, 632, 635, 661, 696, 731, 744, 796, 802, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 851, 854, 855, 861, 866], "input": [4, 5, 6, 9, 12, 14, 24, 25, 27, 32, 33, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 192, 193, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 566, 567, 568, 574, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 596, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 714, 715, 716, 717, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 767, 774, 778, 781, 782, 783, 784, 785, 795, 796, 800, 814, 815, 816, 818, 820, 821, 822, 823, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 854, 855, 862, 865], "pad": [4, 8, 41, 43, 53, 57, 60, 76, 80, 83, 94, 96, 369, 372, 387, 388, 389, 390, 391, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 539, 623, 625, 628, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 691, 704, 768, 782, 802], "longest": 4, "return_tensor": [4, 9, 27, 44, 854, 855], "pt": [4, 9, 27, 854], "max_length": [4, 70], "512": [4, 5, 8, 41, 43, 81, 625, 640, 682, 802], "input_id": 4, "101": [4, 10, 42, 625, 626, 630, 649, 665, 714], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 10, 53, 76, 85, 390, 729], "token_type_id": 4, "attention_mask": [4, 57, 80, 625, 652], "pooler": 4, "compar": [4, 6, 7, 9, 27, 40, 44, 46, 53, 54, 64, 65, 66, 70, 76, 77, 88, 89, 329, 345, 366, 381, 520, 524, 527, 623, 634, 635, 636, 739, 740, 741, 742, 743, 746, 752, 763, 802, 816, 822, 824, 833, 835, 838, 843, 857, 859, 861, 867, 868], "no_grad": [4, 41, 854], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 7, 40, 43, 49, 53, 54, 57, 58, 62, 72, 75, 76, 80, 81, 85, 93, 94, 118, 128, 141, 142, 143, 263, 308, 323, 324, 363, 370, 372, 376, 379, 381, 420, 433, 437, 439, 441, 481, 485, 498, 499, 500, 501, 502, 505, 515, 527, 617, 618, 623, 625, 626, 630, 632, 633, 652, 655, 659, 667, 668, 674, 676, 677, 678, 681, 716, 729, 730, 731, 737, 802, 813, 814, 832, 833, 840, 854, 857, 861], "ivy_output": [4, 44], "logits_clos": 4, "allclos": [4, 6, 7, 9, 12, 14, 27, 44, 46, 53, 76, 366], "detach": [4, 6, 7, 9, 12, 14, 27, 830], "rtol": [4, 12, 14, 53, 58, 76, 81, 329, 345, 366, 626, 670, 673, 761, 763, 806, 825, 833], "005": [4, 8, 53, 76, 329, 345, 366, 444], "atol": [4, 6, 7, 9, 27, 53, 58, 76, 81, 329, 345, 366, 626, 670, 761, 763, 806, 825, 833], "equal": [4, 49, 50, 52, 53, 54, 58, 59, 60, 62, 64, 65, 66, 70, 73, 75, 76, 77, 81, 82, 83, 85, 88, 94, 98, 99, 128, 130, 131, 132, 138, 139, 148, 228, 230, 234, 239, 241, 250, 251, 272, 274, 279, 282, 283, 287, 325, 326, 327, 329, 345, 363, 366, 369, 370, 372, 375, 381, 391, 412, 437, 461, 470, 483, 489, 494, 495, 497, 515, 524, 527, 603, 618, 619, 621, 623, 626, 627, 628, 632, 633, 634, 635, 636, 660, 669, 670, 673, 675, 681, 686, 689, 691, 696, 698, 704, 731, 737, 739, 740, 741, 742, 743, 746, 751, 753, 754, 755, 756, 774, 781, 782, 817, 818, 820, 822, 824, 833, 835], "els": [4, 5, 7, 10, 42, 43, 45, 46, 53, 54, 62, 75, 76, 85, 154, 155, 156, 157, 158, 170, 276, 280, 369, 370, 376, 414, 427, 436, 440, 442, 499, 534, 538, 619, 621, 623, 625, 630, 632, 651, 718, 721, 729, 730, 731, 761, 795, 796, 802, 808, 809, 810, 814, 816, 820, 821, 824, 828, 831, 832, 833, 835, 836, 838, 840, 842, 844, 845, 846, 862], "768": 4, "fn": [4, 44, 46, 53, 70, 73, 76, 102, 162, 163, 195, 196, 199, 372, 452, 525, 540, 541, 590, 619, 620, 623, 630, 714, 715, 716, 718, 719, 720, 761, 763, 788, 791, 797, 798, 800, 821, 824, 831, 832, 840, 854], "finish": [4, 16, 27, 28, 39, 42, 802, 803, 808, 809, 813], "2f": [4, 7], "sec": 4, "89": [4, 10, 39, 52, 62, 73, 75, 76, 85, 99, 164, 231, 619, 626, 636, 679, 730, 731, 755], "43": [4, 10, 39, 41, 43, 53, 76, 85, 99, 230, 369, 370, 381, 389, 421, 513, 621, 632, 633, 730, 731, 738], "procedur": [4, 817, 819, 822, 833], "60": [4, 39, 43, 52, 66, 75, 77, 85, 89, 220, 254, 372, 480, 543, 551, 567, 581, 603, 621, 623, 626, 630, 636, 672, 711, 729, 747, 749, 753, 796, 819], "big": [4, 781, 803, 846, 861], "jnp": [4, 19, 24, 27, 28, 29, 30, 33, 39, 41, 45, 802, 820, 821, 824, 827, 831, 836, 840, 845, 855, 856], "config": [4, 5, 7, 9, 10, 21, 24, 27, 28, 41, 42, 44, 70, 630, 721, 802, 809, 814, 817, 819, 826, 833, 843, 854, 862], "jax_enable_x64": [4, 5, 7, 9, 10, 21, 24, 27, 28, 802], "ref": [4, 5, 77, 81, 255, 269, 272, 278, 285, 621, 628, 700, 809, 831], "initi": [4, 27, 28, 44, 53, 57, 66, 70, 76, 80, 89, 99, 370, 381, 427, 436, 442, 520, 521, 625, 636, 650, 651, 752, 779, 782, 783, 784, 786, 787, 800, 802, 805, 810, 811, 816, 820, 821, 825, 833, 835, 840, 851, 854, 855, 856, 861, 867, 868], "fast": [4, 22, 32, 53, 369, 391, 861], "valu": [4, 10, 39, 40, 42, 43, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 96, 98, 99, 101, 114, 118, 119, 121, 122, 128, 131, 132, 133, 134, 137, 143, 148, 165, 169, 175, 208, 209, 216, 217, 218, 219, 221, 223, 224, 225, 232, 236, 237, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 302, 305, 306, 308, 315, 317, 323, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 345, 346, 348, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 380, 381, 391, 404, 411, 412, 414, 416, 420, 423, 427, 431, 436, 438, 440, 442, 443, 444, 446, 447, 448, 449, 458, 464, 469, 475, 480, 482, 483, 484, 485, 488, 491, 493, 498, 499, 501, 502, 508, 510, 513, 514, 515, 518, 519, 520, 521, 522, 528, 530, 531, 532, 534, 539, 542, 543, 545, 550, 551, 552, 559, 566, 567, 571, 572, 573, 576, 584, 589, 594, 595, 598, 601, 602, 603, 604, 605, 606, 610, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 655, 659, 662, 663, 668, 669, 670, 673, 674, 675, 676, 677, 678, 681, 684, 689, 690, 691, 695, 696, 704, 705, 706, 710, 712, 713, 714, 715, 716, 721, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 761, 763, 766, 767, 768, 769, 771, 773, 778, 781, 782, 783, 784, 785, 786, 800, 806, 809, 810, 814, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 831, 832, 835, 837, 838, 840, 842, 846, 854, 861, 862], "demo": [5, 7, 8, 9, 10, 28, 35, 39, 43, 802], "milesi": 5, "blob": [5, 41, 43], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 6, 9, 19, 22, 23, 24, 25, 41, 44, 53, 76, 194, 370, 438, 620, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 809, 817, 821, 824, 825, 828, 831, 835, 836, 840, 855, 859, 867, 868], "data_load": 5, "py": [5, 6, 8, 9, 19, 22, 23, 24, 25, 41, 43, 46, 89, 370, 438, 749, 791, 795, 802, 808, 809, 810, 814, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 832, 833, 835, 836, 840, 842, 844, 845], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 7, 41, 53, 57, 61, 76, 78, 80, 84, 108, 207, 208, 299, 300, 303, 314, 343, 361, 363, 366, 369, 370, 375, 386, 392, 393, 394, 402, 404, 409, 413, 429, 491, 492, 493, 611, 615, 620, 624, 625, 631, 648, 652, 655, 727, 766, 768, 769, 781, 782, 786, 796, 861, 863], "is_mask": 5, "w": [5, 6, 9, 42, 43, 53, 54, 55, 57, 70, 75, 76, 77, 78, 80, 93, 263, 343, 358, 366, 368, 369, 370, 375, 387, 388, 389, 391, 405, 406, 407, 408, 424, 442, 496, 511, 535, 537, 581, 604, 605, 606, 608, 610, 611, 612, 623, 624, 625, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 714, 802, 813, 830, 840, 843, 844, 855], "h": [5, 53, 54, 57, 76, 77, 80, 369, 375, 388, 389, 406, 407, 496, 535, 537, 623, 625, 630, 638, 641, 642, 643, 644, 645, 646, 647, 711, 715, 717, 720, 725, 803, 813, 817, 818, 819, 855, 857], "size": [5, 10, 12, 14, 19, 22, 23, 29, 30, 32, 33, 34, 41, 43, 46, 53, 54, 57, 58, 60, 62, 63, 70, 76, 77, 80, 81, 83, 85, 86, 93, 94, 98, 99, 130, 133, 207, 208, 209, 307, 310, 314, 325, 326, 327, 328, 335, 350, 357, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 381, 383, 384, 385, 386, 387, 388, 404, 405, 406, 408, 409, 415, 416, 423, 426, 436, 442, 443, 445, 459, 461, 473, 483, 485, 492, 493, 496, 500, 505, 517, 518, 519, 520, 521, 522, 561, 566, 618, 620, 623, 625, 626, 628, 632, 633, 637, 650, 652, 655, 657, 660, 664, 668, 672, 674, 677, 683, 692, 697, 698, 699, 728, 734, 737, 757, 758, 766, 768, 769, 782, 796, 802, 831, 833, 835, 838, 843, 854, 856], "neww": 5, "newh": 5, "int": [5, 41, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 102, 109, 113, 114, 123, 124, 128, 130, 131, 132, 133, 134, 137, 141, 142, 143, 150, 157, 160, 161, 164, 171, 186, 200, 201, 202, 209, 210, 219, 226, 227, 228, 229, 230, 231, 243, 246, 270, 274, 279, 285, 288, 295, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 335, 336, 339, 343, 350, 352, 354, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 423, 425, 426, 427, 428, 430, 433, 435, 436, 439, 440, 442, 447, 451, 452, 456, 460, 461, 464, 465, 468, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 535, 536, 537, 539, 542, 543, 546, 547, 561, 564, 566, 581, 582, 583, 587, 603, 604, 605, 606, 607, 610, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 657, 659, 660, 668, 669, 674, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 714, 715, 717, 719, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 741, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 768, 769, 778, 781, 782, 795, 796, 800, 818, 820, 821, 822, 824, 827, 828, 831, 833, 835, 836, 838, 840, 845, 854], "assert": [5, 10, 42, 44, 46, 70, 528, 623, 774, 806, 813, 814, 825, 828, 831, 832, 833, 835, 836, 842, 843], "too": [5, 53, 76, 219, 236, 243, 269, 372, 483, 621, 781, 808, 809, 810, 814, 820, 824, 836, 846], "small": [5, 10, 43, 52, 53, 58, 61, 75, 76, 81, 84, 236, 243, 269, 270, 329, 345, 366, 370, 371, 375, 431, 448, 491, 492, 493, 621, 626, 631, 670, 673, 675, 727, 781, 785, 802, 809, 819, 822, 828, 833, 838, 840, 844, 846, 854, 855, 862], "would": [5, 6, 9, 10, 19, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 43, 49, 51, 53, 72, 74, 76, 83, 109, 113, 124, 210, 369, 372, 396, 401, 453, 454, 461, 463, 465, 466, 467, 474, 478, 489, 615, 620, 692, 693, 694, 696, 698, 699, 701, 703, 768, 778, 782, 802, 803, 806, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 822, 823, 825, 827, 829, 831, 832, 833, 835, 836, 838, 839, 840, 842, 844, 845, 846, 847, 851, 854, 861, 867], "pixel": [5, 41, 53, 76, 369, 404], "resampl": 5, "nearest": [5, 53, 76, 219, 236, 269, 279, 339, 366, 369, 381, 404, 522, 621, 838], "bicub": [5, 53, 76, 369, 404, 838], "zero": [5, 41, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 64, 66, 67, 72, 73, 75, 76, 78, 80, 81, 85, 86, 89, 90, 94, 108, 110, 111, 112, 114, 125, 126, 128, 130, 135, 137, 138, 139, 141, 142, 145, 148, 149, 217, 218, 219, 221, 222, 223, 224, 225, 228, 230, 231, 233, 234, 235, 236, 238, 241, 242, 243, 250, 251, 252, 253, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 289, 290, 292, 294, 298, 300, 306, 308, 317, 324, 330, 331, 334, 335, 336, 339, 347, 350, 352, 353, 354, 355, 361, 363, 366, 369, 370, 372, 379, 381, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 411, 412, 413, 414, 415, 416, 421, 423, 434, 437, 459, 469, 474, 475, 486, 504, 513, 514, 531, 535, 542, 562, 567, 604, 605, 610, 611, 612, 613, 615, 618, 619, 621, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 652, 655, 656, 658, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 681, 683, 684, 691, 692, 693, 694, 696, 697, 704, 727, 729, 730, 731, 734, 735, 736, 737, 739, 740, 741, 742, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 781, 782, 786, 800, 815, 818, 820, 821, 822, 827, 829, 830, 833, 840, 843, 844, 852, 860], "int64": [5, 53, 62, 63, 65, 66, 73, 85, 86, 88, 89, 138, 151, 157, 160, 162, 164, 168, 169, 173, 180, 311, 363, 379, 381, 505, 513, 514, 618, 619, 633, 635, 636, 729, 734, 735, 736, 745, 747, 748, 753, 755, 766, 767, 820, 832, 835, 840], "enumer": [5, 41, 43, 771, 802], "ndim": [5, 53, 58, 63, 76, 81, 86, 98, 102, 370, 372, 435, 436, 442, 453, 454, 455, 468, 476, 478, 487, 603, 623, 626, 633, 674, 677, 737, 818, 828, 835], "newaxi": [5, 616], "transpos": [5, 24, 27, 28, 45, 53, 57, 58, 70, 76, 80, 81, 98, 370, 417, 433, 435, 437, 511, 625, 626, 638, 640, 642, 644, 645, 646, 667, 671, 673, 679, 768, 782, 802, 825, 831, 842, 845, 855], "255": [5, 24, 27, 28, 41, 42, 43, 45, 57, 76, 80, 230, 621, 647, 802, 855], "car": 5, "full_img": 5, "from_numpi": [5, 843], "fals": [5, 7, 8, 9, 14, 18, 19, 27, 30, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 192, 193, 198, 200, 203, 204, 206, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 363, 366, 367, 369, 370, 371, 372, 375, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 505, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 562, 566, 567, 568, 571, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 596, 597, 599, 600, 602, 605, 606, 608, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 718, 719, 720, 721, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 764, 766, 767, 768, 769, 774, 778, 779, 782, 783, 784, 786, 788, 791, 795, 796, 797, 800, 802, 806, 809, 814, 816, 819, 820, 821, 822, 824, 825, 831, 832, 833, 835, 837, 838, 840, 843, 844, 845, 854, 855], "permut": [5, 8, 41, 60, 83, 98, 379, 504, 628, 694, 701, 855], "img_numpi": 5, "cpu": [5, 6, 7, 9, 22, 23, 24, 25, 27, 41, 42, 43, 45, 46, 49, 51, 53, 62, 72, 74, 76, 85, 122, 128, 131, 133, 134, 137, 138, 139, 145, 189, 190, 192, 193, 194, 195, 200, 203, 205, 207, 210, 211, 213, 215, 376, 498, 499, 501, 502, 618, 620, 626, 632, 666, 728, 729, 730, 731, 763, 781, 782, 783, 784, 785, 786, 787, 800, 802, 806, 809, 810, 817, 820, 821, 825, 832, 835, 846, 859, 861, 864, 866], "torch_unet": 5, "unet_carvana": 5, "when": [5, 6, 8, 9, 10, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 42, 44, 48, 49, 50, 52, 53, 58, 59, 62, 63, 66, 70, 72, 73, 75, 76, 81, 82, 85, 86, 89, 99, 137, 148, 219, 236, 241, 243, 259, 269, 287, 288, 295, 330, 331, 361, 366, 369, 370, 371, 375, 376, 381, 391, 404, 416, 423, 427, 436, 442, 443, 448, 491, 493, 499, 519, 522, 552, 568, 576, 582, 618, 619, 621, 623, 625, 626, 627, 628, 630, 632, 633, 636, 638, 650, 652, 670, 675, 686, 687, 688, 696, 719, 720, 729, 730, 731, 734, 735, 737, 738, 750, 752, 754, 756, 766, 769, 781, 782, 783, 784, 785, 791, 800, 803, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 845, 846, 847, 850, 851, 854, 855, 859, 861, 864, 865, 866, 867], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 8, 14, 27, 28, 41, 43, 53, 76, 359, 368, 369, 391, 396, 397, 401, 402, 412, 413, 779, 781, 782, 784, 786, 800, 802, 809, 816, 823, 830, 835, 836, 838, 845, 846, 854, 861, 862], "effici": [5, 7, 8, 9, 16, 17, 19, 20, 27, 28, 29, 30, 53, 58, 76, 81, 370, 371, 431, 447, 575, 597, 623, 626, 670, 802, 809, 810, 818, 828, 829, 831, 835, 837, 840, 843, 846, 855, 861, 863, 864], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 49, 53, 54, 72, 76, 94, 123, 124, 136, 369, 370, 372, 381, 413, 436, 480, 518, 519, 588, 618, 623, 791, 795, 808, 815, 820, 821, 824, 827, 831, 832, 833, 836, 838, 840, 842, 845, 848], "isinst": [5, 10, 25, 27, 28, 824, 832, 835, 836, 844, 845], "len": [5, 10, 41, 43, 49, 53, 58, 76, 81, 135, 311, 320, 321, 363, 369, 370, 381, 402, 413, 425, 428, 436, 442, 522, 618, 626, 662, 682, 802, 818, 819, 824, 831, 832, 835, 842, 845, 854], "uint8": [5, 24, 27, 28, 43, 151, 158, 162, 173, 176, 181, 187, 619, 766, 767, 820, 835], "elif": [5, 7, 819, 824, 831, 832, 833], "bool": [5, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 125, 130, 131, 132, 133, 134, 135, 137, 139, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 184, 188, 192, 193, 195, 196, 198, 200, 203, 204, 209, 210, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 318, 319, 320, 321, 322, 324, 329, 330, 331, 332, 333, 335, 337, 344, 345, 350, 351, 353, 355, 356, 357, 363, 366, 367, 369, 370, 371, 372, 375, 381, 387, 388, 389, 391, 392, 393, 394, 404, 405, 406, 407, 410, 412, 414, 416, 423, 427, 430, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 459, 460, 461, 463, 464, 465, 466, 467, 470, 474, 478, 481, 483, 484, 485, 489, 491, 493, 494, 495, 496, 497, 499, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 566, 567, 571, 580, 581, 582, 584, 586, 588, 589, 602, 605, 606, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 648, 649, 650, 651, 652, 655, 656, 657, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 681, 682, 684, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 714, 715, 716, 718, 719, 720, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 764, 766, 767, 768, 778, 782, 785, 786, 795, 796, 800, 820, 822, 824, 831, 832, 835, 836, 838, 840, 845, 854, 855], "argmax": [5, 42, 43, 44, 63, 86, 372, 480, 633, 802, 832, 854], "fromarrai": [5, 24, 27, 28, 43], "interpol": [5, 41, 53, 76, 347, 366, 369, 381, 522, 625, 652, 838, 861], "mode": [5, 33, 45, 53, 58, 70, 76, 81, 92, 93, 94, 95, 96, 97, 206, 209, 214, 219, 236, 269, 322, 359, 360, 363, 368, 369, 370, 372, 399, 404, 412, 413, 425, 427, 433, 435, 436, 442, 458, 468, 473, 475, 476, 478, 480, 483, 484, 487, 568, 569, 570, 574, 575, 577, 578, 591, 592, 596, 597, 599, 600, 620, 621, 623, 625, 626, 650, 674, 774, 782, 783, 784, 799, 800, 809, 810, 813, 818, 821, 822, 825, 838, 846, 861, 864], "bilinear": [5, 53, 76, 369, 404, 838], "torch_mask": 5, "squeez": [5, 41, 60, 83, 628, 861], "torch_result": 5, "to_numpi": [5, 10, 27, 28, 39, 42, 43, 46, 54, 77, 623, 802, 825, 833, 843], "give": [5, 19, 29, 39, 53, 57, 76, 80, 175, 359, 368, 369, 411, 415, 619, 625, 628, 638, 639, 640, 641, 643, 645, 647, 696, 781, 802, 809, 810, 813, 816, 819, 820, 822, 823, 825, 826, 827, 835, 852, 861, 865], "img_tf": 5, "math": [5, 44, 94, 286, 621, 820, 831, 832, 833, 845, 859], "ve": [5, 10, 16, 25, 27, 62, 85, 632, 728, 808, 809, 810, 811, 825, 835, 838, 839, 842, 848], "lot": [5, 819, 820, 829, 835, 846, 851, 852, 860], "far": [5, 27, 28, 630, 708, 719, 796, 821, 822, 841, 866, 867], "space": [5, 49, 52, 53, 54, 72, 75, 76, 77, 122, 133, 134, 288, 343, 366, 371, 445, 535, 539, 618, 621, 623, 838, 851], "del": [5, 819], "empty_cach": 5, "permute_dim": [5, 60, 83, 628, 825], "usr": [5, 41, 42, 43, 46, 809], "local": [5, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 34, 41, 42, 43, 46, 375, 496, 547, 623, 803, 809, 814, 817, 825, 828, 833, 835], "lib": [5, 10, 22, 23, 24, 25, 41, 42, 43, 46], "python3": [5, 8, 22, 23, 24, 25, 27, 41, 43, 46, 802, 809, 810], "dist": [5, 41, 42, 43, 46], "func_wrapp": [5, 47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 295, 296, 298, 361, 615, 621, 778, 821, 832, 837], "242": [5, 76], "userwarn": [5, 6, 8, 9, 19, 22, 23, 24, 25, 46], "creat": [5, 6, 9, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 41, 42, 43, 45, 46, 49, 52, 53, 62, 70, 72, 75, 76, 81, 85, 94, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 270, 307, 308, 318, 320, 322, 323, 363, 369, 370, 372, 376, 387, 388, 389, 410, 427, 436, 442, 451, 459, 475, 480, 498, 499, 500, 501, 502, 570, 586, 603, 614, 618, 621, 623, 624, 632, 672, 728, 729, 730, 731, 733, 763, 774, 779, 781, 782, 783, 784, 785, 786, 787, 803, 809, 810, 811, 815, 816, 817, 819, 820, 821, 824, 828, 829, 831, 832, 833, 835, 838, 840, 841, 844, 847, 848, 851, 854, 855, 856, 861, 862, 867], "mani": [5, 27, 28, 31, 60, 70, 83, 143, 323, 363, 618, 628, 698, 802, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 832, 833, 835, 838, 840, 842, 843, 846, 850, 851, 852, 857, 861, 864, 867, 868], "view": [5, 6, 9, 19, 22, 23, 24, 25, 53, 60, 76, 98, 129, 140, 372, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 489, 545, 618, 623, 628, 692, 693, 694, 696, 698, 699, 701, 703, 809, 810, 824, 861], "lead": [5, 6, 9, 19, 22, 23, 24, 25, 58, 70, 81, 99, 243, 370, 431, 570, 621, 623, 626, 674, 677, 768, 819, 820, 822, 834, 836, 846, 851, 852], "overhead": [5, 6, 9, 19, 20, 22, 23, 24, 25, 27, 28, 30, 846, 854, 864], "perform": [5, 6, 10, 20, 22, 23, 24, 25, 27, 28, 30, 32, 39, 41, 49, 53, 57, 58, 66, 67, 72, 76, 77, 80, 81, 89, 90, 109, 113, 133, 134, 206, 214, 236, 269, 290, 336, 357, 366, 367, 369, 370, 372, 379, 381, 391, 392, 393, 394, 396, 397, 401, 402, 410, 412, 436, 452, 505, 513, 514, 535, 536, 537, 550, 551, 552, 568, 578, 615, 618, 620, 621, 623, 625, 626, 629, 630, 636, 637, 648, 651, 677, 679, 684, 705, 706, 707, 715, 716, 747, 748, 757, 758, 761, 778, 782, 796, 800, 805, 814, 815, 816, 818, 820, 821, 822, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 843, 846, 852, 854, 855, 858, 861, 862, 863, 864, 865, 866, 868], "inplac": [5, 6, 8, 9, 10, 19, 22, 23, 24, 25, 48, 54, 70, 77, 93, 96, 526, 528, 549, 552, 553, 570, 571, 623, 630, 715, 716, 720, 725, 726, 773, 774, 779, 786, 813, 815, 822, 825, 827, 829, 832, 838, 842, 844], "17": [5, 9, 10, 22, 23, 24, 25, 39, 41, 43, 46, 47, 53, 58, 69, 75, 76, 77, 78, 80, 81, 85, 99, 108, 109, 134, 219, 236, 261, 269, 299, 307, 357, 363, 369, 372, 387, 388, 396, 397, 400, 401, 405, 406, 411, 415, 465, 536, 551, 604, 606, 615, 618, 621, 623, 624, 625, 626, 630, 632, 639, 648, 649, 660, 664, 716, 729, 730, 731, 733, 818], "factor": [5, 10, 53, 55, 57, 58, 76, 78, 80, 81, 92, 93, 94, 95, 96, 207, 208, 209, 369, 370, 375, 402, 413, 427, 428, 436, 439, 441, 442, 496, 604, 605, 610, 611, 620, 624, 625, 626, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 656, 766, 768, 769, 781, 782, 786, 824, 851], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 8, 27, 28, 41, 50, 52, 57, 73, 75, 80, 99, 164, 240, 369, 390, 400, 535, 545, 619, 621, 623, 625, 626, 640, 642, 647, 672, 802], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 8, 41, 42, 802], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 18, 27, 28, 46, 50, 52, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 88, 98, 99, 103, 149, 159, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 308, 329, 334, 340, 341, 342, 344, 346, 351, 355, 363, 366, 370, 372, 381, 437, 469, 512, 524, 527, 619, 620, 621, 623, 626, 633, 635, 657, 664, 667, 672, 676, 679, 680, 683, 738, 745, 763, 788, 802, 814, 820, 822, 824, 827, 831, 832, 855, 856], "x2": [5, 18, 27, 28, 50, 52, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 98, 99, 103, 149, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 329, 334, 340, 341, 342, 344, 346, 351, 355, 366, 370, 372, 381, 425, 437, 469, 512, 524, 527, 619, 620, 621, 623, 626, 633, 657, 664, 667, 672, 676, 679, 680, 683, 738, 763, 788, 814, 820, 822, 824, 827, 831, 832], "x3": [5, 50, 54, 149, 524, 619, 623], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 782, 802, 844, 855], "batchnorm2d": [5, 8, 785], "downscal": [5, 54, 77, 530, 531, 552, 623], "maxpool": [5, 8], "doubl": 5, "conv": [5, 625, 782, 838], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 53, 76, 369, 404, 838], "align_corn": [5, 53, 76, 369, 404, 838], "conv2dtranspos": [5, 782], "valid": [5, 41, 43, 53, 57, 67, 76, 80, 90, 93, 94, 153, 369, 370, 387, 388, 389, 405, 406, 407, 408, 410, 411, 415, 434, 442, 555, 619, 623, 625, 628, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 692, 700, 757, 758, 766, 767, 782, 795, 809, 816, 820, 822, 826, 830, 833, 835, 854, 862], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 53, 60, 76, 83, 372, 475, 628, 691, 704], "constant_pad": [5, 60, 83, 628], "concat": [5, 39, 44, 54, 60, 70, 83, 209, 539, 620, 623, 628, 704, 833, 838, 840, 854], "root": [6, 8, 9, 22, 23, 24, 25, 41, 42, 43, 46, 52, 75, 283, 621, 804, 808, 809, 810, 817, 825, 832, 843], "user": [6, 9, 16, 22, 23, 24, 25, 27, 42, 43, 45, 270, 287, 372, 475, 570, 621, 623, 782, 783, 784, 795, 802, 809, 810, 813, 815, 816, 818, 819, 820, 821, 824, 829, 830, 831, 832, 835, 837, 838, 839, 840, 846, 847, 850, 851, 859, 861, 867, 868], "broken": [6, 9, 22, 23, 24, 25, 857, 861], "permiss": [6, 9, 22, 23, 24, 25, 809, 819], "conflict": [6, 9, 22, 23, 24, 25, 33, 809, 810, 819, 832, 843], "behaviour": [6, 9, 22, 23, 24, 25, 108, 111, 270, 615, 621, 807, 810, 813, 814, 815, 818, 820, 821, 823, 824, 827, 828, 829, 831, 832, 835, 836, 842], "system": [6, 9, 22, 23, 24, 25, 43, 370, 437, 626, 676, 766, 802, 809, 810, 811, 816, 819, 820, 846, 855, 859, 861, 864, 866, 868], "manag": [6, 9, 18, 19, 22, 23, 24, 25, 27, 570, 593, 623, 802, 803, 811, 816, 820, 821, 831, 834, 846, 852, 863, 865], "recommend": [6, 9, 22, 23, 24, 25, 264, 265, 278, 371, 445, 621, 636, 751, 754, 804, 809, 816, 817, 826, 829, 830, 854], "virtual": [6, 9, 22, 23, 24, 25, 810, 832, 851, 864, 865], "instead": [6, 9, 12, 14, 18, 22, 23, 24, 25, 27, 34, 41, 46, 52, 53, 58, 75, 76, 81, 94, 190, 278, 311, 363, 369, 381, 405, 406, 407, 512, 515, 620, 621, 626, 670, 766, 808, 809, 810, 814, 817, 819, 820, 822, 823, 824, 827, 828, 829, 831, 832, 833, 835, 838, 840, 842, 843, 846, 854, 855, 856, 859, 861, 867, 868], "pypa": [6, 9, 22, 23, 24, 25], "io": [6, 9, 22, 23, 24, 25, 42, 45, 809, 819], "venv": [6, 9, 22, 23, 24, 25], "torch": [6, 7, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 44, 45, 46, 49, 54, 58, 68, 77, 81, 125, 163, 190, 191, 205, 207, 212, 279, 330, 331, 366, 528, 552, 584, 618, 619, 620, 621, 623, 626, 629, 677, 706, 707, 763, 774, 779, 791, 800, 802, 806, 809, 810, 814, 815, 816, 817, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 842, 843, 845, 846, 848, 854, 855, 856, 867], "tensorflow": [6, 9, 11, 12, 16, 18, 19, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 39, 45, 52, 53, 54, 75, 76, 143, 190, 220, 323, 363, 370, 423, 584, 618, 620, 623, 761, 774, 791, 802, 806, 807, 808, 809, 810, 814, 819, 820, 821, 825, 827, 831, 832, 833, 835, 836, 838, 840, 845, 846, 848, 851, 852, 855, 856, 859, 862, 864, 865, 867, 868], "2024": 6, "01": [6, 8, 22, 23, 25, 43, 49, 53, 54, 55, 58, 76, 77, 78, 81, 85, 134, 261, 279, 280, 307, 313, 338, 345, 363, 369, 390, 400, 401, 539, 581, 582, 604, 605, 610, 618, 621, 623, 624, 626, 629, 632, 663, 674, 706, 707, 730, 731, 766, 816, 845], "22": [6, 10, 22, 23, 24, 25, 39, 41, 43, 46, 47, 52, 53, 54, 62, 66, 69, 76, 77, 80, 85, 109, 114, 231, 239, 299, 303, 361, 369, 370, 371, 372, 377, 381, 387, 388, 390, 405, 406, 407, 411, 415, 421, 443, 458, 503, 513, 536, 567, 602, 615, 621, 625, 626, 630, 633, 636, 648, 649, 660, 665, 672, 676, 716, 726, 729, 730, 731, 738, 748, 749, 809, 818, 824], "50": [6, 9, 10, 27, 28, 39, 43, 53, 66, 75, 76, 77, 235, 275, 351, 366, 369, 370, 372, 397, 421, 429, 480, 537, 543, 550, 551, 567, 581, 621, 623, 626, 630, 633, 636, 665, 672, 683, 709, 711, 737, 749, 766, 769, 830, 842, 854, 855], "099601": 6, "e": [6, 9, 27, 44, 45, 49, 53, 58, 62, 64, 65, 66, 68, 75, 76, 81, 85, 88, 89, 91, 93, 94, 98, 125, 134, 135, 138, 139, 143, 147, 176, 189, 216, 217, 218, 222, 224, 225, 228, 230, 232, 236, 237, 239, 242, 243, 249, 250, 257, 258, 259, 260, 267, 268, 269, 270, 272, 276, 278, 279, 282, 283, 287, 296, 323, 330, 331, 363, 366, 369, 370, 371, 372, 376, 381, 382, 387, 388, 391, 405, 406, 407, 408, 412, 425, 428, 434, 448, 483, 498, 499, 500, 501, 502, 513, 514, 523, 616, 618, 619, 620, 621, 625, 626, 628, 630, 632, 634, 635, 636, 652, 657, 662, 663, 667, 668, 670, 673, 676, 677, 678, 681, 684, 692, 700, 711, 715, 716, 717, 720, 725, 726, 729, 730, 731, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 782, 795, 796, 800, 802, 803, 806, 808, 809, 810, 813, 814, 816, 818, 820, 824, 825, 830, 832, 835, 840, 843, 846, 847, 848, 851, 852, 854, 857], "extern": [6, 818, 827, 832, 835, 836], "local_xla": 6, "xla": [6, 9, 832, 846, 848, 861], "stream_executor": [6, 9], "cuda_dnn": [6, 9], "cc": [6, 9, 22, 23, 25, 42, 825], "9261": 6, "unabl": [6, 9, 810, 838], "regist": [6, 9, 784, 810, 847, 854], "cudnn": [6, 9], "factori": [6, 9, 53, 371, 447, 448, 796], "attempt": [6, 9, 19, 22, 23, 24, 25, 41, 43, 46, 809, 837, 846], "plugin": [6, 9, 809], "been": [6, 9, 12, 14, 22, 24, 27, 28, 53, 54, 62, 76, 77, 85, 192, 279, 372, 482, 535, 536, 537, 620, 621, 623, 632, 728, 795, 796, 808, 810, 814, 816, 818, 819, 820, 821, 823, 824, 827, 828, 831, 835, 840, 842, 846, 847, 854, 861, 868], "099643": 6, "cuda_fft": [6, 9], "607": 6, "cufft": [6, 9], "100960": 6, "cuda_bla": [6, 9], "1515": 6, "cubla": [6, 9], "108768": 6, "core": [6, 22, 23, 25, 41, 42, 43, 45, 46, 53, 76, 93, 96, 200, 370, 427, 436, 441, 442, 620, 809, 821, 825, 835, 845, 850, 859, 860, 861, 862, 866, 868], "cpu_feature_guard": [6, 22, 23, 25], "182": [6, 22, 23, 25, 76], "binari": [6, 10, 22, 23, 25, 53, 54, 57, 59, 76, 80, 82, 226, 229, 231, 266, 286, 369, 371, 414, 447, 450, 621, 625, 627, 648, 652, 686], "optim": [6, 7, 9, 10, 18, 22, 23, 25, 27, 28, 41, 43, 44, 46, 53, 55, 76, 78, 307, 363, 371, 447, 448, 526, 612, 623, 624, 629, 705, 706, 707, 781, 796, 802, 820, 831, 838, 841, 843, 845, 852, 855, 859, 860, 861, 862, 863, 864, 865, 868], "instruct": [6, 22, 23, 25, 70, 99, 802, 808, 809, 814, 824, 826, 833, 835, 847, 859, 862, 865, 867], "critic": [6, 22, 23, 25, 27, 28, 800, 861, 867], "oper": [6, 18, 19, 22, 23, 24, 25, 27, 28, 29, 33, 40, 43, 49, 50, 52, 53, 54, 57, 70, 72, 73, 75, 76, 77, 80, 99, 114, 133, 134, 176, 206, 214, 219, 221, 230, 233, 236, 243, 258, 260, 269, 270, 274, 278, 281, 286, 297, 305, 325, 326, 327, 358, 361, 363, 368, 369, 371, 372, 383, 384, 385, 387, 388, 389, 395, 396, 397, 401, 405, 406, 407, 408, 410, 411, 413, 415, 416, 443, 480, 482, 528, 535, 536, 537, 584, 615, 618, 619, 620, 621, 623, 625, 626, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 679, 681, 753, 755, 766, 769, 782, 796, 800, 802, 808, 809, 813, 814, 815, 818, 820, 821, 822, 823, 824, 828, 831, 832, 835, 838, 840, 843, 844, 848, 850, 854, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868], "avx2": [6, 22, 23, 25], "fma": [6, 22, 23, 25], "rebuild": [6, 22, 23, 25, 70, 99], "appropri": [6, 7, 18, 22, 23, 25, 27, 28, 54, 63, 68, 86, 91, 219, 236, 243, 269, 329, 345, 366, 621, 633, 734, 802, 808, 809, 810, 824, 829, 835], "compil": [6, 7, 8, 9, 10, 22, 23, 25, 27, 28, 31, 44, 46, 287, 621, 774, 802, 809, 832, 836, 840, 846, 848, 855, 857, 860, 861, 862, 865, 868], "flag": [6, 22, 23, 25, 70, 192, 371, 381, 445, 512, 620, 625, 652, 763, 774, 785, 810, 820, 821, 831, 832, 833, 835, 854, 855], "332076": 6, "tf2tensorrt": [6, 9], "py_util": [6, 9], "38": [6, 9, 10, 23, 39, 41, 43, 46, 50, 53, 75, 76, 85, 161, 286, 351, 366, 369, 381, 388, 407, 410, 411, 513, 619, 621, 626, 669, 766, 822], "trt": [6, 9], "could": [6, 9, 27, 28, 33, 64, 634, 739, 740, 741, 742, 808, 809, 810, 814, 819, 820, 822, 829, 831, 832, 833, 835, 840, 842, 843, 844, 851, 852, 861, 866, 867], "find": [6, 9, 16, 42, 43, 46, 58, 64, 70, 81, 626, 630, 634, 670, 710, 739, 740, 741, 742, 795, 796, 802, 803, 804, 807, 808, 809, 810, 814, 817, 819, 825, 830, 835, 838, 840, 843, 847, 848, 850, 854], "tensorrt": [6, 9], "lstm": [6, 625, 651, 782, 840, 861], "layer": [6, 12, 14, 18, 24, 25, 27, 28, 39, 44, 53, 61, 76, 84, 631, 650, 651, 652, 727, 779, 781, 783, 784, 785, 786, 787, 802, 823, 832, 836, 838, 840, 841, 844, 850, 855, 859, 861, 865, 868], "torch_lstm": 6, "rand": [6, 25, 27, 28, 43, 795, 796, 802, 854], "tf_lstm": 6, "workspac": [6, 8, 9, 19, 22, 23, 24, 25, 809, 825], "ivy_repo": [6, 19], "except": [6, 9, 19, 22, 23, 24, 25, 42, 43, 46, 53, 54, 60, 62, 67, 70, 76, 77, 81, 85, 90, 150, 330, 331, 336, 354, 366, 372, 376, 381, 459, 483, 499, 518, 519, 534, 552, 569, 584, 590, 619, 623, 626, 628, 632, 633, 637, 673, 690, 692, 700, 729, 730, 731, 737, 757, 758, 761, 764, 768, 802, 805, 810, 811, 813, 814, 815, 819, 820, 821, 823, 825, 827, 831, 832, 836, 837, 838, 842, 846], "383": [6, 19], "current": [6, 9, 18, 19, 22, 23, 24, 25, 27, 28, 41, 42, 48, 53, 54, 70, 76, 99, 118, 162, 163, 166, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 202, 204, 370, 372, 421, 422, 475, 483, 540, 541, 544, 547, 549, 553, 564, 565, 584, 617, 619, 620, 623, 626, 630, 661, 708, 718, 719, 763, 767, 783, 784, 791, 792, 796, 799, 800, 802, 804, 808, 809, 810, 814, 816, 818, 819, 820, 821, 824, 825, 826, 828, 831, 832, 833, 834, 835, 838, 840, 845, 846, 852, 854, 861, 867, 868], "doe": [6, 9, 10, 18, 19, 22, 23, 24, 25, 27, 40, 42, 52, 53, 54, 60, 70, 75, 76, 83, 93, 143, 270, 272, 280, 323, 363, 370, 371, 381, 382, 422, 447, 448, 518, 519, 523, 552, 618, 621, 623, 626, 628, 661, 698, 761, 796, 806, 808, 810, 813, 816, 819, 820, 822, 823, 825, 826, 827, 828, 831, 832, 833, 835, 838, 840, 842, 843, 846, 848, 851, 854, 857, 861, 862, 868], "quietli": [6, 9, 19, 22, 23, 24, 25], "appli": [6, 7, 9, 19, 22, 23, 24, 25, 27, 28, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 366, 367, 369, 370, 371, 372, 375, 381, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 404, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 615, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 672, 673, 674, 675, 677, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 714, 717, 720, 721, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 768, 769, 778, 782, 785, 802, 808, 809, 810, 815, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 835, 836, 838, 842, 843, 844, 845, 846, 854, 855, 862], "control": [6, 9, 19, 22, 23, 24, 25, 35, 53, 76, 143, 292, 323, 361, 363, 369, 372, 392, 393, 394, 458, 484, 570, 618, 623, 626, 659, 818, 820, 821, 830, 831, 832, 833, 838, 842, 843, 848, 854, 861, 867], "consid": [6, 9, 10, 19, 22, 23, 24, 25, 32, 33, 53, 58, 64, 76, 81, 114, 143, 264, 265, 323, 329, 334, 345, 363, 366, 370, 381, 423, 427, 436, 512, 615, 618, 621, 626, 634, 659, 670, 739, 740, 741, 742, 768, 781, 815, 819, 820, 828, 830, 836, 838, 841, 842, 843, 850, 851, 854, 858, 862, 866, 868], "set_inplace_mod": [6, 9, 19, 22, 23, 24, 25, 593, 623], "strict": [6, 9, 19, 22, 23, 24, 25, 570, 593, 623], "rais": [6, 9, 19, 22, 23, 24, 25, 42, 43, 49, 53, 54, 62, 64, 67, 70, 72, 76, 77, 83, 85, 87, 90, 124, 150, 239, 274, 330, 331, 340, 366, 369, 371, 372, 376, 381, 402, 413, 448, 453, 454, 461, 463, 465, 466, 467, 474, 483, 489, 499, 518, 519, 528, 552, 570, 572, 582, 584, 590, 594, 619, 621, 623, 626, 628, 632, 633, 634, 636, 637, 667, 669, 683, 692, 693, 694, 696, 698, 699, 700, 701, 703, 729, 730, 731, 737, 742, 750, 752, 757, 758, 761, 768, 786, 802, 810, 814, 816, 820, 821, 824, 831, 832, 836, 837, 840, 842, 847, 851], "error": [6, 9, 10, 19, 22, 23, 24, 25, 33, 44, 46, 52, 53, 57, 70, 75, 76, 80, 106, 238, 286, 330, 331, 338, 366, 370, 371, 372, 381, 382, 436, 442, 444, 446, 483, 519, 523, 570, 615, 621, 623, 625, 626, 636, 655, 675, 678, 750, 752, 768, 786, 799, 803, 807, 808, 809, 810, 814, 815, 816, 819, 820, 821, 822, 826, 827, 832, 835, 836, 837, 842, 846, 852, 861], "whenev": [6, 9, 19, 22, 23, 24, 25, 782, 810, 816, 819, 820, 824, 831, 834, 835, 837, 843], "26": [6, 22, 23, 24, 25, 39, 41, 43, 46, 52, 53, 61, 62, 76, 77, 78, 85, 231, 236, 282, 369, 370, 390, 426, 434, 550, 604, 621, 623, 624, 625, 626, 630, 631, 636, 647, 660, 672, 679, 709, 727, 729, 730, 749], "221321": 6, "common_runtim": [6, 42], "gpu_devic": 6, "1929": 6, "job": [6, 27, 28, 802, 817, 819, 855], "localhost": 6, "replica": 6, "14699": 6, "mb": [6, 8, 41, 43, 46, 819], "tesla": 6, "v100": [6, 7], "pcie": [6, 851], "16gb": 6, "pci": 6, "bu": [6, 81, 851], "id": [6, 10, 42, 53, 76, 192, 325, 326, 327, 363, 547, 620, 623, 802, 807, 809, 812, 815, 817, 818, 826, 830, 835, 847], "0001": [6, 52, 53, 76, 279, 280, 370, 436, 442, 766, 769, 786], "00": [6, 8, 10, 41, 43, 46, 53, 54, 58, 76, 77, 81, 241, 307, 338, 363, 369, 390, 396, 400, 401, 539, 582, 621, 623, 626, 627, 663, 674, 686, 766, 826, 835], "comput": [6, 24, 25, 27, 28, 34, 35, 40, 41, 43, 47, 52, 53, 54, 55, 57, 58, 59, 64, 66, 69, 70, 75, 76, 77, 78, 80, 81, 82, 89, 93, 94, 96, 109, 113, 209, 219, 226, 229, 231, 236, 237, 238, 243, 244, 245, 247, 248, 254, 255, 256, 263, 264, 265, 266, 268, 269, 272, 277, 278, 295, 299, 303, 309, 312, 313, 325, 326, 327, 330, 331, 333, 337, 341, 343, 344, 348, 350, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 379, 381, 387, 388, 389, 390, 391, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 413, 416, 417, 419, 421, 422, 423, 424, 426, 427, 429, 432, 434, 436, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 469, 472, 485, 491, 493, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 529, 530, 531, 575, 597, 604, 606, 607, 609, 613, 614, 620, 621, 623, 624, 625, 626, 627, 628, 630, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 656, 657, 661, 662, 663, 666, 667, 668, 670, 672, 674, 676, 677, 679, 681, 683, 684, 686, 687, 688, 692, 714, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 763, 768, 782, 785, 796, 802, 809, 818, 819, 820, 828, 830, 832, 835, 837, 838, 840, 843, 846, 848, 851, 852, 854, 855, 857, 859, 861, 862, 864, 865, 867], "capabl": [6, 16, 24, 28, 835, 838], "625856": 6, "454": 6, "8902": 6, "origin": [6, 7, 9, 10, 25, 27, 28, 29, 30, 31, 33, 40, 41, 42, 46, 53, 58, 60, 66, 70, 76, 81, 83, 89, 93, 96, 98, 99, 224, 249, 276, 314, 363, 369, 370, 372, 381, 412, 436, 468, 474, 476, 479, 513, 514, 518, 519, 520, 521, 522, 621, 626, 628, 636, 668, 696, 697, 748, 763, 768, 791, 792, 802, 804, 808, 809, 810, 816, 817, 819, 820, 825, 829, 831, 832, 833, 840, 852, 854, 855, 861, 862], "32": [6, 10, 25, 27, 28, 39, 41, 42, 43, 52, 53, 62, 75, 76, 80, 81, 85, 98, 99, 108, 160, 218, 230, 231, 240, 254, 260, 276, 279, 280, 333, 366, 369, 370, 372, 381, 388, 389, 390, 400, 410, 411, 421, 425, 458, 513, 535, 551, 615, 619, 621, 623, 625, 626, 632, 633, 636, 640, 642, 643, 647, 649, 667, 672, 683, 729, 730, 731, 738, 749, 766, 769, 802, 819, 820, 830, 843, 866], "original_output": 6, "constant": [6, 12, 14, 19, 22, 23, 29, 32, 34, 39, 53, 60, 61, 76, 83, 84, 93, 94, 317, 363, 369, 371, 372, 414, 447, 448, 475, 628, 630, 631, 691, 714, 727, 781, 785, 802, 828, 833, 836, 844, 845, 846, 854, 856], "transpiled_output": 6, "verifi": [6, 10, 24, 320, 321, 363, 808, 820, 821, 832, 835, 836], "toler": [6, 53, 58, 76, 81, 329, 345, 366, 370, 423, 436, 442, 626, 670, 673, 761, 763, 814, 833, 861], "1e": [6, 7, 8, 9, 12, 14, 27, 39, 43, 50, 53, 55, 58, 59, 61, 73, 76, 78, 81, 82, 84, 97, 161, 329, 345, 366, 371, 375, 448, 491, 492, 493, 572, 573, 581, 594, 595, 604, 605, 610, 612, 619, 623, 624, 626, 627, 631, 677, 686, 687, 688, 727, 761, 763, 783, 785, 786, 802, 806, 818, 825, 828, 831, 833, 844, 845], "benchmark": [6, 863], "n_run": 6, "original_torch_tim": 6, "autograph": 6, "experiment": [6, 800, 806, 810, 820, 832, 836, 840, 861], "do_not_convert": 6, "compiled_tf_lstm": 6, "transpiled_tf_tim": 6, "own": [6, 12, 14, 18, 27, 28, 33, 802, 809, 814, 819, 820, 823, 824, 831, 832, 836, 840, 846, 848, 851, 852, 857, 860, 861, 866, 867], "comparison": [6, 8, 53, 76, 237, 272, 332, 366, 371, 447, 448, 621, 626, 678, 761, 824], "original_tf_lstm": 6, "kera": [6, 11, 12, 14, 16, 17, 25, 27, 28, 44, 45, 779, 802, 852, 855, 867], "time_major": [6, 76, 369, 414, 625, 651], "return_sequ": [6, 782], "original_tf_tim": 6, "slower": [6, 20, 832], "than": [6, 10, 27, 28, 30, 33, 52, 53, 54, 57, 58, 60, 62, 63, 64, 66, 70, 75, 76, 77, 80, 81, 83, 85, 86, 87, 89, 98, 99, 122, 130, 161, 209, 217, 218, 221, 222, 224, 225, 228, 230, 232, 236, 242, 243, 257, 258, 259, 260, 267, 269, 274, 278, 280, 282, 283, 287, 288, 289, 297, 307, 329, 332, 345, 352, 363, 366, 369, 370, 371, 372, 381, 390, 391, 396, 397, 400, 401, 402, 412, 413, 417, 419, 436, 442, 443, 466, 467, 513, 514, 515, 554, 555, 558, 575, 597, 618, 619, 620, 621, 623, 625, 626, 628, 632, 633, 634, 636, 655, 657, 667, 668, 669, 670, 673, 684, 689, 693, 699, 731, 737, 740, 741, 742, 747, 748, 753, 754, 755, 756, 782, 796, 806, 808, 810, 814, 818, 819, 820, 822, 824, 825, 831, 832, 833, 835, 836, 837, 838, 840, 843, 844, 845, 846, 847, 851, 858, 859, 860, 861, 867, 868], "30": [6, 10, 22, 23, 24, 25, 39, 41, 52, 53, 54, 76, 77, 85, 89, 99, 269, 299, 343, 351, 366, 369, 372, 390, 400, 411, 458, 480, 503, 535, 537, 542, 543, 550, 551, 567, 576, 581, 621, 623, 626, 630, 636, 665, 672, 717, 729, 730, 748, 749, 753, 768, 781, 796, 805, 819], "698440": 6, "local_tsl": 6, "tsl": 6, "subprocess": 6, "304": 6, "cannot": [6, 41, 42, 43, 46, 53, 286, 453, 454, 455, 621, 810, 814, 816, 820, 832, 840, 845, 867], "spawn": [6, 563, 623], "child": 6, "No": [6, 27, 28, 41, 53, 59, 76, 82, 371, 445, 446, 447, 449, 450, 627, 686, 810, 819, 820, 861], "directori": [6, 41, 42, 43, 46, 579, 601, 620, 623, 800, 804, 808, 809, 810, 817, 819, 825, 832, 835, 847], "725307350738295x": 6, "440824652724787x": 6, "openmim": 7, "mim": 7, "0rc8": 7, "request": [7, 8, 9, 22, 23, 24, 25, 27, 28, 41, 44, 53, 200, 376, 502, 620, 800, 802, 803, 805, 808, 822, 826, 836, 838, 852, 855], "get_model": 7, "list_model": 7, "mmengin": 7, "configdict": 7, "saniti": [7, 9, 10, 27, 832], "checkpoint": [7, 8, 44, 846], "correct": [7, 12, 14, 23, 33, 39, 41, 43, 66, 89, 182, 370, 438, 619, 628, 636, 689, 754, 756, 763, 766, 802, 806, 808, 810, 813, 818, 819, 820, 821, 824, 825, 827, 828, 831, 833, 835, 855], "against": [7, 50, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 149, 268, 287, 329, 332, 335, 345, 366, 381, 518, 519, 520, 521, 522, 559, 619, 621, 623, 626, 633, 667, 668, 670, 673, 734, 835, 840, 846, 850, 861], "zoo": 7, "checkpoint_nam": [7, 9, 27], "convnext": 7, "tiny_32xb128": 7, "noema_in1k": 7, "openmmlab": 7, "dure": [7, 9, 20, 22, 27, 30, 32, 33, 51, 55, 66, 70, 74, 78, 89, 210, 369, 392, 393, 394, 570, 590, 604, 605, 610, 620, 623, 624, 625, 626, 629, 636, 648, 667, 705, 706, 707, 754, 756, 774, 785, 786, 800, 809, 818, 820, 821, 824, 828, 829, 831, 832, 833, 834, 835, 838, 846, 854, 861, 862, 867], "get_scal": 7, "cfg": [7, 826], "kei": [7, 20, 21, 27, 28, 43, 45, 48, 53, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 379, 392, 393, 394, 412, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 481, 483, 485, 491, 493, 494, 495, 497, 499, 505, 512, 513, 514, 515, 524, 525, 527, 528, 530, 531, 532, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 623, 625, 629, 630, 639, 640, 641, 642, 648, 649, 652, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 705, 706, 711, 717, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 766, 767, 773, 779, 782, 786, 802, 805, 817, 818, 819, 828, 831, 832, 833, 835, 843, 855, 861, 864, 868], "input_shap": [7, 14, 25, 27, 28, 802], "block": [7, 27, 28, 31, 32, 33, 34, 370, 429, 802, 810, 818, 820, 824, 828, 835, 839, 841, 845, 846, 848, 855, 866, 868], "url": [7, 9, 24, 27, 28, 41, 44, 802, 855], "cocodataset": [7, 9, 24, 27, 28, 44, 802, 855], "org": [7, 8, 9, 24, 27, 28, 41, 43, 44, 46, 52, 53, 75, 76, 78, 143, 151, 239, 249, 250, 265, 323, 330, 331, 363, 366, 369, 372, 381, 412, 483, 512, 604, 605, 618, 619, 621, 624, 626, 628, 636, 675, 676, 704, 754, 802, 823, 855], "val2017": [7, 9, 27, 44], "000000039769": [7, 9, 27, 44], "stream": [7, 9, 24, 27, 28, 41, 44, 51, 74, 210, 620, 802, 855, 865], "_config": 7, "train_pipelin": 7, "tensor_imag": 7, "And": [7, 9, 10, 12, 14, 19, 22, 27, 28, 29, 42, 73, 359, 360, 368, 802, 814, 817, 826, 828, 835, 854], "final": [7, 9, 12, 14, 16, 24, 27, 28, 33, 39, 40, 49, 53, 54, 76, 77, 93, 121, 133, 134, 317, 363, 369, 413, 539, 617, 618, 623, 625, 650, 651, 652, 796, 808, 810, 811, 814, 815, 817, 819, 820, 822, 823, 828, 830, 831, 832, 834, 838, 839, 843, 854, 855, 857, 867], "transpiled_graph": [7, 9, 27], "what": [7, 9, 16, 21, 27, 28, 31, 32, 35, 40, 41, 369, 402, 413, 768, 796, 802, 808, 810, 813, 818, 819, 822, 823, 826, 827, 829, 830, 831, 832, 833, 835, 839, 840, 842, 843, 844, 845, 846, 851, 852, 857, 862, 863, 866], "improv": [7, 9, 10, 27, 30, 810, 820, 827, 828, 838, 840, 848, 852, 854, 859, 861, 863, 864], "For": [7, 8, 9, 10, 18, 20, 27, 28, 30, 33, 35, 49, 53, 58, 64, 76, 81, 122, 135, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 271, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 325, 326, 327, 330, 331, 333, 353, 363, 366, 370, 372, 433, 435, 455, 475, 478, 618, 621, 626, 628, 634, 636, 675, 677, 681, 689, 700, 739, 740, 741, 742, 750, 752, 753, 755, 767, 779, 808, 809, 810, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 858, 859, 862, 867, 868], "_f": [7, 9, 27], "comp_model": [7, 9, 27], "equival": [7, 9, 27, 58, 81, 93, 94, 122, 230, 243, 264, 265, 278, 279, 372, 459, 483, 488, 618, 621, 626, 670, 673, 676, 684, 791, 831, 832, 838, 843, 845, 847, 855], "just": [7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 41, 43, 53, 58, 66, 81, 93, 96, 143, 323, 363, 370, 435, 618, 626, 636, 670, 749, 774, 782, 802, 806, 809, 810, 811, 814, 816, 819, 820, 821, 822, 823, 825, 828, 829, 831, 832, 833, 835, 840, 842, 843, 846, 851, 852, 855, 861, 862, 867], "np_imag": [7, 24, 27, 28], "jax_imag": 7, "hk": [7, 9, 27, 41, 45, 802, 845, 855], "rng_kei": [7, 9, 27, 802, 855], "random": [7, 9, 12, 14, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 32, 33, 34, 41, 43, 44, 53, 57, 70, 76, 80, 318, 319, 320, 321, 322, 363, 370, 371, 427, 436, 442, 448, 498, 499, 500, 501, 502, 625, 648, 728, 729, 730, 731, 732, 733, 766, 768, 781, 795, 796, 802, 808, 821, 833, 835, 836, 845, 855, 856, 861], "prngkei": [7, 9, 20, 21, 27, 28, 41, 802, 845, 855], "42": [7, 9, 10, 20, 21, 25, 27, 28, 39, 41, 42, 47, 62, 69, 78, 85, 114, 230, 369, 390, 400, 604, 608, 615, 621, 624, 626, 631, 632, 636, 668, 672, 727, 728, 729, 730, 731, 732, 747, 749, 802, 840, 845, 855], "jax_mlp_forward": 7, "param": [7, 9, 10, 27, 41, 42, 43, 45, 70, 76, 77, 99, 525, 542, 543, 623, 788, 802, 845, 855], "init": [7, 9, 27, 41, 43, 53, 76, 370, 427, 436, 442, 802, 814, 845, 855], "rng": [7, 9, 27, 41, 802, 845, 855], "both": [7, 8, 9, 10, 12, 14, 22, 24, 27, 28, 32, 33, 40, 42, 49, 52, 53, 54, 57, 58, 72, 75, 76, 77, 80, 81, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 174, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 324, 330, 331, 333, 334, 336, 340, 345, 363, 366, 369, 370, 372, 376, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 469, 475, 483, 486, 498, 512, 515, 542, 546, 548, 550, 559, 589, 613, 614, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 782, 802, 806, 808, 810, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 831, 832, 835, 838, 840, 842, 843, 844, 845, 846, 854, 855, 861, 864, 866, 867, 868], "each": [7, 9, 10, 20, 21, 22, 27, 28, 30, 31, 32, 34, 41, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 64, 66, 70, 73, 75, 76, 77, 78, 80, 81, 83, 86, 87, 89, 93, 94, 96, 98, 99, 107, 108, 110, 111, 112, 114, 118, 135, 149, 161, 164, 209, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 298, 300, 301, 302, 304, 305, 306, 311, 322, 325, 326, 327, 333, 340, 344, 348, 353, 356, 361, 363, 366, 369, 370, 372, 375, 376, 379, 381, 387, 388, 389, 392, 393, 394, 397, 405, 406, 407, 408, 411, 413, 414, 415, 422, 423, 428, 435, 436, 440, 442, 453, 454, 455, 459, 460, 461, 466, 467, 469, 470, 472, 474, 475, 478, 480, 488, 489, 496, 498, 505, 510, 511, 512, 513, 514, 515, 524, 527, 535, 542, 543, 559, 583, 603, 605, 606, 608, 610, 611, 612, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 630, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 656, 657, 658, 661, 662, 663, 667, 669, 670, 671, 673, 675, 676, 677, 682, 691, 695, 697, 698, 700, 702, 704, 714, 721, 728, 737, 739, 740, 742, 748, 749, 756, 766, 768, 782, 785, 786, 787, 796, 800, 805, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 845, 846, 850, 851, 852, 854, 855, 857, 858, 862, 864, 867], "timeit": [7, 9, 10, 20, 27, 28, 44, 46], "06": [7, 10, 22, 43, 50, 62, 75, 78, 97, 106, 161, 218, 234, 369, 390, 400, 610, 615, 619, 624, 731, 761, 763, 835, 843], "m": [7, 8, 9, 10, 27, 40, 42, 44, 46, 49, 53, 58, 62, 75, 76, 81, 85, 98, 135, 141, 142, 143, 263, 323, 324, 363, 369, 370, 371, 372, 376, 391, 422, 427, 428, 430, 444, 455, 466, 467, 481, 498, 499, 500, 501, 502, 618, 626, 630, 632, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 716, 729, 730, 731, 802, 809, 810, 813, 819, 840], "per": [7, 9, 10, 20, 41, 43, 53, 57, 76, 80, 314, 363, 369, 370, 372, 387, 388, 389, 405, 406, 407, 408, 435, 482, 625, 639, 641, 642, 643, 644, 647, 652, 782, 810, 819, 829, 832, 843], "loop": [7, 9, 10, 20, 35, 68, 76, 91, 118, 121, 369, 414, 617, 629, 705, 706, 707, 802, 816, 846, 854], "100": [7, 8, 9, 10, 39, 41, 43, 49, 52, 53, 72, 75, 76, 77, 80, 97, 134, 143, 230, 270, 283, 323, 345, 354, 363, 366, 369, 370, 372, 392, 393, 436, 442, 480, 543, 551, 567, 618, 621, 623, 626, 630, 665, 714, 802, 819, 820, 835, 843, 844, 845, 846, 851, 852, 854], "block_until_readi": 7, "08": [7, 53, 66, 76, 85, 222, 329, 345, 366, 369, 371, 390, 400, 448, 621, 730, 731, 756, 761, 766, 826], "\u00b5": [7, 9, 10, 20], "made": [7, 9, 27, 53, 60, 76, 370, 372, 429, 453, 454, 455, 700, 808, 810, 811, 814, 815, 818, 819, 824, 826, 828, 830, 831, 832, 836, 838, 840, 842, 851, 861], "significantli": [7, 9, 27, 53, 58, 76, 81, 370, 440, 626, 677, 819, 850, 859], "line": [7, 9, 10, 16, 17, 20, 21, 24, 27, 28, 30, 31, 42, 43, 286, 621, 800, 802, 809, 814, 815, 819, 821, 822, 824, 832, 835, 838, 841, 842, 843, 844, 852, 855, 864], "even": [7, 24, 27, 28, 53, 76, 93, 236, 269, 274, 279, 372, 381, 475, 512, 621, 809, 810, 811, 814, 816, 819, 820, 821, 823, 827, 828, 831, 832, 833, 838, 842, 843, 844, 845, 846, 851, 852, 867], "better": [7, 10, 30, 39, 45, 46, 808, 813, 832, 833, 836, 838, 839, 842, 843, 844, 852, 864], "3x": 7, "increas": [7, 9, 10, 20, 27, 30, 53, 58, 60, 76, 81, 83, 96, 372, 381, 475, 515, 626, 628, 682, 691, 704, 768, 820, 824, 832, 836, 838, 850, 854, 861], "execut": [7, 9, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 32, 35, 42, 44, 46, 119, 121, 590, 617, 620, 623, 809, 810, 817, 818, 819, 820, 821, 822, 824, 828, 829, 831, 835, 838, 840, 842, 845, 846, 848, 854, 857, 861, 862, 863, 864, 865, 867], "train2017": [7, 9, 24, 27, 28, 802, 855], "000000283921": [7, 9, 27], "out_torch": [7, 9, 27], "et": [7, 625, 626, 652, 677], "took": [7, 75, 276], "out_jax": [7, 9, 27], "66m": 7, "53m": 7, "That": [7, 9, 12, 14, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 41, 278, 371, 447, 621, 795, 809, 810, 815, 835, 842, 843, 844, 862], "pretti": [7, 9, 27, 28, 41, 806, 825, 843, 867], "much": [7, 9, 10, 18, 19, 25, 27, 28, 29, 30, 41, 96, 329, 345, 366, 781, 808, 809, 810, 815, 818, 820, 828, 831, 832, 833, 836, 837, 838, 840, 842, 843, 851, 859, 861, 867, 868], "achiev": [7, 9, 10, 27, 802, 803, 805, 811, 819, 820, 828, 829, 835, 838, 843, 845, 848], "solid": [7, 9, 27], "associ": [8, 53, 58, 76, 81, 219, 269, 372, 381, 452, 515, 621, 626, 670, 673, 685, 763, 810, 820, 828, 829, 832, 833, 835, 846], "python": [8, 12, 18, 30, 35, 39, 41, 42, 43, 45, 46, 53, 62, 76, 85, 122, 203, 215, 243, 278, 369, 376, 414, 498, 499, 500, 501, 502, 603, 618, 620, 621, 623, 632, 728, 729, 730, 731, 733, 791, 795, 796, 800, 807, 809, 810, 814, 817, 818, 819, 824, 825, 832, 834, 835, 840, 842, 843, 846, 848, 849, 850, 851, 854, 858, 861, 862, 863, 867, 868], "2023": [8, 9, 22, 23, 24, 25, 41], "02": [8, 9, 41, 49, 54, 55, 61, 62, 75, 78, 85, 134, 221, 222, 261, 369, 390, 400, 401, 581, 582, 604, 605, 610, 618, 621, 623, 624, 627, 631, 632, 686, 727, 730, 731, 833], "52": [8, 10, 39, 52, 75, 77, 78, 85, 224, 234, 236, 381, 513, 535, 536, 551, 604, 621, 623, 624, 625, 626, 636, 649, 672, 731, 749, 795], "resolv": [8, 41, 43, 53, 66, 243, 381, 513, 514, 621, 628, 636, 692, 747, 748, 753, 755, 810, 817, 820, 826, 840], "185": [8, 41, 69], "199": [8, 41, 222, 621], "110": [8, 41], "133": [8, 41, 57, 531, 623, 649], "111": [8, 41, 630, 726], "108": [8, 10, 22, 23, 24, 25, 41, 625, 636, 649, 749], "connect": [8, 41, 782, 802, 804, 809, 817, 834, 844, 845, 851, 859], "443": [8, 41, 281, 621], "sent": [8, 41], "await": [8, 41], "respons": [8, 41, 375, 496, 810, 819, 820], "200": [8, 10, 41, 77, 80, 230, 369, 392, 393, 543, 567, 621, 623, 795, 843], "ok": [8, 41, 809], "length": [8, 41, 42, 49, 53, 59, 60, 70, 76, 82, 83, 93, 94, 99, 122, 130, 135, 309, 312, 313, 328, 336, 363, 366, 369, 370, 372, 376, 379, 390, 391, 396, 397, 400, 401, 402, 412, 413, 414, 416, 428, 435, 475, 484, 500, 505, 603, 618, 623, 625, 626, 627, 628, 634, 652, 677, 678, 686, 696, 739, 766, 782, 835, 843], "10472": 8, "10k": 8, "plain": [8, 41], "tx": 8, "23k": 8, "kb": [8, 41, 43, 46], "57": [8, 10, 39, 41, 52, 53, 75, 76, 194, 217, 218, 221, 222, 224, 234, 235, 275, 291, 292, 361, 620, 621], "109": [8, 41, 58, 626, 664], "634575": 8, "620k": 8, "jpeg": [8, 42, 43], "619": 8, "70k": 8, "113": 8, "resnet34_weight": 8, "torch_resnet_34": 8, "conv1": 8, "kernel_s": [8, 25, 27, 28, 43, 53, 76, 369, 387, 388, 389, 408, 415, 782, 788], "stride": [8, 53, 57, 76, 77, 80, 98, 369, 372, 387, 388, 389, 405, 406, 407, 408, 410, 411, 415, 451, 623, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 782, 831, 836, 861], "bia": [8, 53, 57, 76, 80, 84, 375, 381, 496, 512, 562, 623, 625, 631, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 727, 782, 828, 835, 840, 844], "bn1": 8, "ep": [8, 53, 58, 61, 76, 81, 84, 161, 295, 361, 370, 371, 375, 423, 448, 491, 492, 493, 619, 626, 631, 670, 673, 727, 778, 785], "05": [8, 10, 43, 49, 52, 53, 55, 61, 75, 76, 78, 84, 134, 261, 313, 329, 338, 345, 363, 366, 375, 491, 492, 493, 550, 572, 594, 604, 605, 610, 618, 621, 623, 624, 626, 631, 668, 727, 761, 766, 781, 785, 833, 835], "momentum": [8, 41, 53, 76, 375, 491, 493, 785, 851], "affin": [8, 785], "track_running_stat": [8, 785], "dilat": [8, 45, 53, 57, 76, 80, 369, 372, 405, 406, 407, 410, 411, 415, 475, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 782], "ceil_mod": [8, 53, 76, 369, 387, 388, 389, 405, 406, 407, 410, 782], "layer1": 8, "basicblock": 8, "conv2": 8, "bn2": 8, "layer2": 8, "downsampl": [8, 53, 76, 404], "layer3": 8, "layer4": 8, "output_s": [8, 53, 76, 369, 383, 384, 385, 625, 654, 782, 802, 855], "fc": [8, 14, 41, 802, 844, 855], "in_featur": [8, 57, 80, 625, 649, 835], "out_featur": [8, 57, 80, 625, 649, 835], "resnet_34": 8, "ivy_resnet_34": 8, "34": [8, 10, 39, 41, 75, 76, 77, 85, 164, 234, 261, 282, 369, 381, 411, 519, 535, 536, 619, 621, 623, 625, 626, 632, 649, 669, 730, 731, 821], "333f7ec4": 8, "pth": 8, "cach": [8, 9, 22, 23, 24, 25, 41, 43, 46, 191, 529, 620, 623, 771, 791, 826, 828, 831, 835], "83": [8, 10, 39, 58, 80, 85, 283, 369, 381, 390, 400, 411, 513, 531, 621, 623, 625, 626, 649, 664, 730], "3m": 8, "56": [8, 10, 39, 41, 52, 53, 57, 62, 75, 76, 80, 134, 269, 283, 286, 289, 369, 390, 400, 604, 618, 621, 624, 625, 626, 630, 636, 640, 642, 644, 646, 649, 672, 708, 730, 749, 822], "4mb": 8, "preserv": [8, 9, 22, 23, 24, 25, 53, 54, 55, 70, 76, 77, 78, 99, 369, 370, 372, 381, 404, 436, 453, 454, 455, 466, 467, 486, 519, 552, 613, 623, 624, 628, 693, 766, 834, 835, 845, 846, 855], "multipl": [8, 9, 18, 22, 23, 24, 25, 27, 52, 53, 58, 61, 66, 67, 70, 75, 76, 77, 78, 81, 83, 84, 89, 90, 130, 230, 254, 261, 267, 268, 269, 271, 330, 331, 366, 369, 370, 372, 375, 379, 390, 397, 400, 402, 434, 461, 470, 489, 496, 505, 524, 531, 562, 604, 605, 608, 610, 611, 612, 613, 618, 621, 623, 624, 625, 626, 628, 631, 633, 636, 637, 640, 641, 642, 643, 656, 665, 667, 668, 681, 689, 692, 697, 698, 727, 734, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 782, 796, 800, 802, 808, 810, 815, 816, 818, 822, 824, 826, 828, 831, 832, 833, 835, 838, 840, 846, 852, 854, 859, 860, 861, 868], "machin": [8, 9, 22, 23, 24, 25, 30, 31, 39, 45, 53, 58, 76, 81, 161, 164, 370, 423, 619, 626, 670, 673, 802, 809, 814, 828, 848, 851, 859, 861, 863, 864, 865, 866, 867], "rel": [8, 9, 22, 23, 24, 25, 53, 55, 58, 60, 65, 72, 76, 78, 81, 83, 88, 98, 132, 329, 345, 366, 371, 381, 447, 448, 512, 605, 608, 610, 611, 612, 624, 626, 628, 635, 660, 670, 673, 681, 693, 697, 743, 746, 761, 763, 810, 819, 833, 838, 861, 863], "project": [8, 9, 16, 21, 22, 23, 24, 25, 27, 28, 31, 94, 625, 652, 782, 802, 804, 805, 808, 809, 810, 811, 812, 815, 816, 817, 835, 844, 846, 850, 851, 852, 855, 857, 859, 861, 864, 868], "consist": [8, 9, 10, 22, 23, 24, 25, 27, 28, 66, 70, 236, 243, 269, 369, 370, 412, 422, 621, 626, 636, 661, 662, 749, 783, 784, 805, 814, 815, 819, 820, 826, 831, 840, 850, 862], "ad": [8, 9, 10, 22, 23, 24, 25, 53, 60, 76, 83, 91, 236, 269, 329, 345, 366, 375, 491, 492, 493, 581, 582, 621, 623, 625, 626, 628, 652, 662, 663, 692, 782, 787, 802, 806, 807, 808, 809, 810, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 844, 846, 851, 854, 860, 861], "home": [8, 9, 22, 23, 24, 25, 819], "95": [8, 10, 39, 53, 55, 58, 62, 69, 78, 80, 85, 106, 354, 366, 411, 604, 608, 612, 615, 624, 626, 632, 664, 730, 731], "builtin": [8, 809, 842, 844], "callabl": [8, 45, 53, 54, 68, 76, 77, 80, 91, 118, 119, 121, 162, 163, 195, 196, 209, 357, 359, 360, 367, 368, 369, 372, 411, 414, 416, 452, 475, 525, 529, 534, 536, 540, 541, 562, 590, 603, 607, 609, 614, 617, 619, 620, 623, 624, 629, 630, 705, 706, 707, 714, 715, 716, 718, 719, 720, 721, 761, 764, 774, 786, 797, 800, 818, 824, 830, 832, 840, 853, 854, 855, 856], "track": [8, 18, 27, 28, 40, 41, 547, 623, 800, 809, 810, 814, 830, 831, 854, 861], "properli": [8, 809, 813, 824, 826, 832, 835], "might": [8, 33, 54, 94, 175, 534, 619, 623, 806, 808, 809, 810, 819, 820, 822, 825, 826, 829, 832, 835, 836, 838, 840, 842, 843, 848], "_trace_graph": 8, "shown": [8, 25, 27, 68, 70, 91, 253, 276, 333, 366, 621, 808, 809, 810, 814, 817, 819, 820, 822, 824, 826, 827, 832, 833, 835, 836, 837, 840, 842, 846], "8507": 8, "1351": 8, "0069": 8, "85072625": 8, "13506091": 8, "00688289": 8, "resnet50_weight": 8, "torch_resnet_50": 8, "imagenet1k_v2": 8, "11ad3fa6": 8, "97": [8, 10, 39, 53, 55, 75, 78, 85, 222, 354, 366, 608, 621, 624, 730], "8m": 8, "8mb": 8, "bottleneck": [8, 850], "conv3": 8, "bn3": 8, "2048": [8, 582, 623], "resnet_50": 8, "ivy_resnet_50": 8, "3429": 8, "0408": 8, "0121": 8, "34288204": 8, "04077014": 8, "01212029": 8, "depend": [9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 49, 50, 53, 54, 58, 64, 65, 73, 76, 81, 88, 89, 119, 125, 148, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 257, 258, 259, 260, 269, 271, 274, 281, 282, 286, 287, 353, 366, 369, 370, 414, 422, 438, 584, 617, 618, 619, 621, 623, 625, 626, 633, 635, 650, 661, 662, 674, 675, 676, 677, 738, 743, 746, 756, 802, 804, 806, 808, 809, 810, 817, 820, 821, 823, 825, 829, 831, 832, 833, 834, 835, 838, 840, 846, 847, 851, 854, 859, 861, 862], "yet": [9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 43, 362, 364, 365, 373, 374, 378, 808, 809, 825, 846, 847, 854, 855, 856], "doc": [9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 42, 43, 76, 143, 323, 330, 331, 363, 366, 514, 618, 802, 803, 807, 808, 813, 822, 823, 826, 827, 835, 840, 843, 844, 854, 855, 856], "autofeatureextractor": [9, 27], "extractor": [9, 12, 14, 27, 43, 802], "hug": [9, 27, 854], "face": [9, 27, 803, 809, 814, 825, 826, 830, 838, 840, 854, 861, 867], "arch_nam": [9, 27], "microsoft": [9, 27, 851, 854, 855, 861, 866, 868], "feature_extractor": [9, 27], "23": [9, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 58, 62, 72, 75, 76, 77, 80, 85, 132, 231, 234, 251, 252, 253, 276, 278, 279, 280, 282, 289, 333, 334, 366, 369, 372, 381, 387, 388, 390, 400, 405, 406, 407, 411, 415, 458, 513, 519, 618, 621, 625, 626, 630, 633, 644, 646, 660, 664, 668, 676, 678, 679, 709, 716, 720, 729, 730, 731, 738, 802, 819, 835, 840], "980130": 9, "9342": 9, "980177": 9, "609": 9, "980207": 9, "1518": 9, "351203": 9, "placement": [9, 808], "390": [9, 22, 23, 24, 25], "inputs_jax": [9, 27], "last_hidden_st": [9, 27], "jax_forward": [9, 27], "jit_appli": 9, "63": [9, 10, 39, 43, 52, 69, 75, 80, 81, 114, 275, 282, 283, 369, 381, 390, 400, 411, 513, 621, 626, 630, 636, 656, 672, 709, 720, 749], "122": [9, 50, 164, 234, 621], "134": [9, 57, 626, 649, 669], "2x": [9, 27], "ipytest": 10, "panda": [10, 41, 43, 851], "matplotlib": [10, 22, 23, 24, 25, 41, 42, 43, 46], "scikit": [10, 370, 438, 851], "learn": [10, 12, 14, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 39, 41, 53, 55, 78, 370, 371, 438, 443, 535, 605, 608, 610, 611, 612, 623, 624, 629, 705, 706, 707, 786, 802, 803, 807, 808, 809, 813, 814, 820, 825, 826, 828, 830, 839, 848, 850, 851, 859, 863, 864, 865, 866, 867, 868], "cryptographi": 10, "frontend": [10, 569, 623, 763, 764, 767, 771, 774, 802, 807, 810, 813, 819, 820, 824, 825, 830, 834, 835, 838, 839, 841, 848, 855, 861], "sklearn": 10, "classification_report": 10, "model_select": 10, "train_test_split": 10, "dataset": [10, 27, 70, 802, 843, 854, 855], "load_breast_canc": 10, "pyplot": [10, 41, 42, 43, 46], "plt": [10, 41, 42, 43, 46], "pd": [10, 43], "functool": [10, 41, 824, 832, 842], "autoconfig": 10, "tqdm": [10, 22, 23, 24, 25, 41, 43, 802], "tqdm_notebook": 10, "These": [10, 34, 53, 76, 370, 372, 381, 422, 474, 512, 625, 626, 652, 661, 662, 802, 805, 807, 808, 809, 810, 814, 818, 820, 822, 823, 827, 828, 831, 832, 835, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 855, 861, 865, 867, 868], "sole": [10, 39, 827, 836, 860, 861, 862], "re": [10, 16, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 46, 53, 54, 63, 76, 86, 96, 209, 314, 363, 370, 372, 441, 476, 477, 535, 620, 623, 626, 628, 633, 679, 697, 736, 738, 803, 804, 808, 809, 810, 811, 813, 814, 817, 820, 825, 830, 831, 832, 833, 834, 836, 838, 842, 845, 846, 849, 850, 851, 861], "test_jax_gpu": 10, "xla_bridg": [10, 41], "get_backend": [10, 828], "test_torch_gpu": 10, "is_avail": 10, "test_xgboost_gpu": 10, "capsi": 10, "load_diabet": 10, "y": [10, 27, 28, 39, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 145, 148, 149, 150, 159, 161, 164, 176, 189, 193, 197, 202, 203, 204, 208, 210, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 329, 330, 331, 337, 344, 345, 346, 347, 348, 353, 355, 357, 361, 363, 366, 369, 370, 371, 372, 375, 381, 388, 390, 392, 393, 397, 400, 402, 406, 412, 419, 423, 429, 434, 441, 443, 444, 446, 447, 448, 449, 450, 460, 462, 471, 475, 483, 484, 485, 490, 494, 495, 497, 505, 511, 512, 513, 514, 515, 518, 520, 521, 522, 524, 527, 530, 531, 534, 535, 537, 538, 539, 542, 543, 544, 548, 550, 551, 552, 554, 555, 558, 559, 564, 571, 572, 573, 576, 579, 580, 581, 582, 584, 586, 588, 589, 590, 594, 595, 598, 601, 602, 603, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 640, 642, 644, 646, 647, 648, 649, 656, 657, 658, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 675, 677, 678, 679, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 715, 717, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 800, 802, 816, 818, 821, 822, 830, 832, 833, 835, 836, 838, 840, 842, 854], "target": [10, 12, 14, 20, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34, 43, 53, 76, 191, 371, 443, 444, 445, 446, 447, 448, 449, 450, 620, 761, 782, 784, 790, 802, 806, 809, 813, 816, 825, 826, 833, 834, 839, 843, 844, 845, 855, 856, 857, 859, 860, 861, 864, 866, 867], "xgb_model": 10, "xgbregressor": 10, "tree_method": 10, "caus": [10, 371, 445, 809, 810, 814, 816, 818, 819, 820, 822, 831, 833, 835, 846], "either": [10, 22, 23, 32, 33, 34, 35, 39, 45, 52, 53, 54, 57, 66, 70, 75, 76, 77, 80, 81, 108, 111, 114, 119, 129, 130, 140, 216, 217, 218, 219, 224, 234, 236, 237, 239, 241, 243, 250, 251, 257, 258, 259, 260, 261, 269, 278, 280, 281, 283, 286, 287, 332, 353, 366, 369, 375, 381, 390, 400, 410, 411, 415, 496, 513, 514, 534, 554, 562, 563, 571, 590, 615, 617, 618, 621, 623, 625, 626, 629, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 667, 672, 675, 679, 705, 706, 707, 747, 748, 753, 755, 768, 782, 783, 784, 791, 804, 808, 809, 810, 816, 817, 818, 820, 821, 822, 823, 824, 826, 828, 831, 832, 833, 834, 835, 838, 840, 843, 846, 847, 855, 861], "fit": [10, 60, 83, 628, 695, 808, 832, 840, 857, 858, 861], "consol": [10, 565, 623, 802, 810, 826, 835, 842, 847], "gpu_hist": 10, "captur": [10, 830, 835, 845, 862], "readouterr": 10, "err": 10, "99": [10, 39, 52, 53, 55, 73, 75, 85, 131, 218, 233, 354, 366, 581, 608, 618, 621, 623, 624, 630, 636, 712, 720, 730, 749], "implement": [10, 18, 19, 27, 29, 33, 41, 44, 50, 51, 53, 64, 65, 73, 74, 76, 81, 88, 93, 148, 162, 163, 176, 195, 196, 210, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 269, 271, 274, 278, 281, 282, 286, 287, 330, 331, 353, 366, 370, 381, 421, 422, 518, 519, 540, 541, 619, 620, 621, 623, 625, 626, 634, 635, 636, 652, 661, 662, 663, 672, 681, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 767, 769, 791, 802, 806, 808, 813, 814, 815, 816, 818, 820, 821, 823, 824, 825, 827, 828, 829, 831, 833, 835, 836, 838, 840, 842, 843, 844, 845, 846, 848, 858, 859, 860, 861, 864, 867, 868], "tabular": 10, "pulsar": 10, "emploi": [10, 867], "remov": [10, 16, 17, 20, 25, 27, 28, 30, 58, 70, 81, 626, 628, 629, 630, 660, 667, 681, 699, 705, 706, 722, 796, 799, 802, 808, 816, 817, 819, 820, 823, 828, 834, 835, 838, 845, 854, 855, 861], "column": [10, 43, 53, 58, 76, 81, 93, 94, 128, 143, 323, 363, 370, 372, 379, 381, 422, 428, 438, 459, 464, 466, 467, 471, 473, 505, 511, 512, 618, 626, 661, 662, 668, 674, 676, 677, 682, 766, 781], "well": [10, 27, 28, 41, 42, 43, 77, 371, 447, 548, 623, 626, 676, 768, 802, 804, 808, 810, 817, 819, 820, 824, 831, 832, 833, 835, 844, 845, 855, 860, 861, 862, 866], "standard": [10, 52, 58, 61, 62, 66, 75, 84, 85, 89, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 330, 331, 333, 366, 369, 370, 372, 381, 412, 440, 483, 512, 603, 618, 619, 621, 623, 626, 628, 631, 632, 633, 634, 635, 636, 637, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 690, 692, 693, 694, 696, 697, 699, 700, 704, 727, 730, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 768, 781, 785, 795, 796, 802, 805, 813, 814, 815, 818, 820, 823, 827, 831, 834, 835, 836, 846, 849, 855, 857, 859, 860, 863, 864, 866], "while": [10, 27, 28, 35, 53, 57, 70, 76, 80, 93, 94, 99, 121, 137, 175, 243, 244, 264, 265, 341, 366, 369, 370, 372, 413, 414, 434, 477, 478, 511, 617, 618, 619, 621, 625, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 739, 751, 754, 764, 806, 808, 809, 810, 815, 816, 817, 819, 820, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 842, 844, 845, 846, 847, 850, 851, 854, 861, 867, 868], "extra": [10, 28, 70, 99, 118, 603, 617, 623, 815, 820, 822, 829, 831, 832, 833, 838, 840, 854, 855, 858, 863], "dimens": [10, 49, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 70, 72, 76, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 96, 98, 99, 102, 109, 113, 137, 141, 142, 311, 322, 324, 325, 326, 327, 330, 331, 335, 336, 343, 350, 357, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 381, 383, 385, 387, 388, 389, 391, 396, 397, 401, 405, 406, 407, 408, 411, 412, 414, 415, 417, 419, 422, 438, 443, 447, 453, 454, 455, 459, 465, 476, 477, 478, 479, 481, 483, 491, 492, 493, 496, 500, 502, 505, 515, 517, 518, 519, 520, 521, 522, 535, 536, 537, 539, 546, 580, 583, 603, 615, 618, 623, 625, 626, 627, 628, 629, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 706, 707, 733, 734, 735, 737, 739, 740, 741, 742, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 768, 778, 782, 785, 822, 824, 830, 832, 833, 835, 838, 840, 843], "label": [10, 41, 42, 43, 53, 59, 76, 82, 371, 443, 444, 446, 447, 448, 449, 450, 627, 686, 687, 688, 802, 808, 814, 832, 839, 840, 841, 845, 847, 861], "load_data": 10, "standardscal": 10, "df": [10, 43], "read_csv": [10, 43], "delimit": [10, 843], "drop": [10, 43, 53, 76, 326, 363, 371, 372, 447, 484, 781, 782, 809, 846], "sc": 10, "fit_transform": 10, "prepare_data": 10, "tupl": [10, 45, 48, 49, 50, 52, 53, 54, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 96, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 124, 130, 132, 136, 137, 139, 143, 145, 149, 150, 151, 162, 163, 164, 168, 169, 175, 176, 182, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 311, 316, 320, 323, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 353, 355, 356, 357, 358, 363, 366, 368, 369, 370, 372, 375, 376, 377, 379, 381, 387, 388, 389, 391, 392, 393, 394, 396, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 422, 423, 427, 431, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 459, 460, 470, 475, 481, 483, 484, 485, 488, 491, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 512, 513, 514, 515, 517, 518, 519, 520, 521, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 571, 581, 582, 583, 584, 586, 587, 588, 589, 602, 603, 604, 605, 606, 608, 610, 613, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 677, 679, 680, 681, 684, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 723, 724, 725, 726, 728, 729, 730, 731, 733, 736, 737, 739, 740, 741, 742, 743, 744, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 768, 781, 782, 784, 795, 796, 815, 820, 827, 828, 831, 833, 835, 840, 843, 844, 846, 854, 855, 856], "expand_dim": [10, 24, 27, 28, 43, 45, 60, 83, 625, 628, 647, 802, 832, 840, 843, 855], "astyp": [10, 12, 14, 19, 41, 42, 43, 50, 57, 73, 80, 619, 625, 641, 643, 644, 647, 802, 820, 831, 832, 838, 856], "csv": [10, 43, 802], "instanc": [10, 18, 24, 27, 28, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 168, 169, 171, 176, 193, 205, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 363, 366, 369, 370, 371, 372, 375, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 405, 406, 407, 411, 412, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 577, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 774, 779, 800, 808, 809, 810, 814, 815, 816, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 835, 843, 844, 845, 848, 854, 862], "117564": 10, "variou": [10, 21, 31, 33, 39, 802, 805, 808, 809, 810, 814, 819, 820, 823, 824, 827, 829, 830, 832, 833, 834, 835, 847, 857, 859, 860, 861, 864, 867], "structur": [10, 28, 70, 73, 99, 161, 164, 532, 623, 630, 712, 721, 802, 808, 810, 811, 815, 818, 828, 833, 834, 835, 836, 843, 844, 860, 861], "allow": [10, 25, 27, 28, 39, 53, 66, 76, 89, 133, 274, 370, 381, 439, 515, 519, 562, 618, 621, 623, 635, 636, 745, 752, 766, 767, 768, 769, 783, 784, 796, 800, 802, 808, 810, 811, 815, 816, 819, 820, 824, 826, 828, 829, 830, 831, 832, 833, 835, 838, 840, 842, 846, 848, 851, 854, 855, 856, 859, 861, 865, 866], "navig": [10, 806, 809, 810, 813, 825], "choic": [10, 28, 45, 53, 66, 76, 89, 370, 372, 438, 458, 636, 754, 756, 802, 809, 819, 831, 832, 843, 852, 855, 861, 868], "rerun": [10, 41], "most": [10, 18, 27, 28, 70, 72, 93, 96, 137, 370, 422, 575, 597, 618, 623, 626, 661, 662, 799, 802, 807, 808, 809, 815, 818, 819, 820, 821, 825, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 846, 851, 861, 862, 864, 865, 867, 868], "method": [10, 18, 27, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 148, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 366, 369, 370, 371, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 618, 619, 621, 623, 624, 626, 627, 630, 633, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 719, 720, 721, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 763, 774, 780, 781, 782, 783, 784, 808, 810, 814, 815, 819, 820, 821, 822, 823, 827, 835, 836, 840, 841, 844, 845, 846, 854, 855, 856, 862, 868], "signific": [10, 53, 371, 448, 837, 846, 850, 851, 861], "object": [10, 18, 23, 25, 27, 41, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 125, 129, 130, 140, 152, 161, 164, 172, 175, 210, 268, 499, 547, 563, 606, 618, 619, 620, 623, 624, 630, 632, 711, 712, 713, 715, 716, 717, 723, 724, 725, 726, 733, 761, 763, 764, 771, 772, 773, 779, 780, 782, 783, 784, 791, 795, 802, 815, 816, 818, 819, 828, 829, 832, 833, 835, 838, 842, 845, 853, 854, 855, 856, 861, 867], "logist": 10, "booster": 10, "gblinear": 10, "n_estim": 10, "learning_r": 10, "reg_lambda": 10, "reg_alpha": 10, "base_margin": 10, "xgb_cl": 10, "ivy_cl": 10, "n": [10, 39, 42, 43, 44, 46, 49, 52, 53, 57, 58, 60, 62, 63, 66, 67, 75, 76, 80, 81, 83, 85, 86, 89, 90, 93, 98, 135, 141, 142, 143, 216, 286, 288, 323, 324, 336, 363, 366, 369, 370, 371, 372, 375, 376, 379, 381, 383, 384, 385, 390, 391, 396, 397, 400, 401, 402, 410, 411, 412, 413, 415, 423, 424, 433, 435, 437, 442, 443, 455, 461, 464, 468, 470, 481, 489, 491, 492, 493, 496, 498, 499, 500, 501, 502, 505, 512, 522, 618, 621, 625, 626, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 643, 645, 647, 652, 657, 660, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 681, 682, 683, 684, 691, 692, 694, 700, 704, 716, 729, 730, 731, 737, 751, 753, 754, 755, 756, 757, 758, 782, 785, 795, 802, 813, 817, 819, 835, 847, 855], "436": 10, "48": [10, 39, 43, 52, 53, 75, 76, 77, 78, 85, 108, 218, 241, 283, 369, 388, 389, 390, 400, 406, 407, 410, 550, 604, 608, 615, 621, 623, 624, 626, 630, 636, 672, 709, 730, 749], "wai": [10, 16, 17, 18, 21, 23, 27, 31, 33, 39, 93, 96, 802, 804, 807, 808, 809, 814, 815, 816, 817, 819, 820, 821, 831, 832, 833, 835, 838, 842, 843, 844, 845, 846, 847, 850, 851, 856, 863, 867, 868], "t4": 10, "higher": [10, 53, 76, 370, 372, 381, 426, 436, 442, 453, 454, 455, 522, 781, 820, 831, 839, 840, 845, 846, 858, 861, 862, 865, 867, 868], "tier": [10, 811], "reduc": [10, 53, 54, 58, 63, 66, 67, 70, 76, 77, 81, 86, 89, 90, 209, 330, 331, 350, 366, 367, 381, 517, 518, 519, 520, 521, 522, 536, 620, 623, 626, 633, 636, 637, 674, 734, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 795, 796, 819, 824, 832, 838, 840, 842, 854, 859, 863, 864, 865], "lower": [10, 43, 49, 52, 53, 58, 62, 75, 76, 81, 85, 128, 141, 267, 302, 308, 314, 323, 324, 361, 363, 381, 515, 516, 522, 618, 621, 626, 632, 656, 662, 663, 670, 731, 768, 781, 802, 810, 820, 822, 832, 835, 840, 846, 848, 857, 858, 859, 861, 862, 867, 868], "although": [10, 626, 675, 802, 804, 815, 817, 818, 832, 838, 859, 861], "experi": [10, 16, 43, 809, 824, 835, 841, 843, 846], "demonstr": [10, 24, 27, 28, 42, 805, 811, 820, 822, 824, 842], "still": [10, 21, 23, 24, 27, 28, 30, 31, 34, 58, 70, 81, 626, 677, 766, 808, 809, 810, 815, 816, 820, 823, 824, 826, 828, 831, 832, 835, 838, 844, 846, 851, 854, 855, 858, 861, 867], "substanti": [10, 805, 810, 815, 820, 835, 851, 861], "dive": [10, 16, 18, 27, 39, 803, 804, 807, 808, 810, 814, 818, 820, 826, 833, 839, 842, 843, 846, 867], "stuff": 10, "tool": [10, 18, 27, 28, 802, 809, 810, 822, 826, 841, 845, 846, 849, 852, 855, 859, 860, 861, 862, 864, 867, 868], "25": [10, 39, 41, 42, 43, 52, 53, 54, 58, 59, 62, 66, 69, 75, 76, 77, 80, 81, 84, 85, 89, 98, 99, 114, 133, 219, 220, 230, 236, 238, 249, 254, 269, 274, 277, 279, 282, 283, 284, 289, 310, 363, 371, 381, 411, 444, 447, 449, 513, 522, 550, 551, 567, 581, 618, 621, 623, 626, 627, 630, 631, 636, 639, 656, 660, 665, 682, 687, 709, 716, 720, 727, 729, 730, 731, 748, 749, 751, 756, 811, 818, 830], "201": [10, 75, 76, 221, 390, 621], "20x": 10, "24": [10, 20, 39, 41, 52, 53, 58, 66, 75, 76, 77, 80, 81, 85, 98, 231, 239, 254, 256, 269, 279, 280, 283, 343, 346, 366, 369, 381, 387, 389, 390, 400, 405, 406, 407, 411, 415, 513, 535, 536, 621, 623, 626, 630, 636, 639, 660, 668, 672, 709, 720, 729, 730, 731, 747, 749, 763, 824, 843], "ivy_pr": 10, "xgb_pred": 10, "ivyclassifi": 10, "nxgbclassifi": 10, "precis": [10, 53, 58, 76, 81, 161, 249, 269, 276, 283, 340, 366, 370, 381, 423, 512, 575, 597, 619, 621, 623, 626, 662, 663, 668, 675, 677, 678, 684, 774, 819, 832, 837, 838, 865], "recal": 10, "f1": [10, 820], "score": [10, 57, 80, 371, 450, 625, 653, 655, 802], "94": [10, 39, 52, 53, 55, 62, 75, 76, 78, 85, 203, 279, 280, 354, 366, 400, 608, 620, 624, 731], "106597": 10, "33": [10, 39, 41, 42, 52, 62, 66, 75, 76, 77, 78, 80, 222, 223, 230, 279, 369, 370, 372, 381, 388, 410, 411, 439, 458, 513, 531, 581, 608, 621, 623, 624, 625, 626, 630, 636, 648, 649, 672, 726, 729, 749, 756, 766, 769], "10967": 10, "accuraci": [10, 41, 43, 46, 369, 412, 820], "macro": 10, "avg": [10, 369, 387, 389, 410], "96": [10, 39, 53, 55, 75, 76, 77, 85, 233, 254, 286, 354, 366, 369, 390, 535, 536, 608, 621, 623, 624, 626, 636, 672, 731, 749], "67": [10, 39, 52, 53, 54, 58, 75, 76, 77, 80, 85, 98, 234, 239, 279, 280, 282, 289, 299, 303, 361, 381, 411, 513, 535, 536, 581, 607, 609, 621, 623, 624, 626, 664, 731], "73": [10, 39, 52, 81, 283, 381, 513, 626, 632, 656, 730, 835], "92": [10, 39, 43, 53, 54, 85, 354, 366, 602, 612, 624, 626, 658, 730, 731], "28": [10, 25, 27, 28, 39, 41, 43, 46, 52, 53, 57, 61, 75, 76, 77, 80, 81, 85, 89, 235, 238, 259, 275, 369, 370, 390, 400, 421, 519, 550, 604, 621, 623, 624, 625, 626, 631, 636, 640, 642, 644, 646, 647, 649, 672, 727, 729, 730, 731, 749, 753, 802], "27": [10, 39, 41, 46, 52, 53, 58, 62, 75, 76, 80, 81, 85, 89, 230, 231, 234, 274, 282, 283, 340, 366, 369, 390, 400, 551, 621, 623, 626, 630, 636, 667, 672, 682, 709, 716, 730, 749, 753, 766, 812], "852": [10, 625, 649], "449": [10, 531, 623], "47": [10, 39, 43, 52, 53, 58, 62, 75, 76, 77, 78, 80, 85, 225, 283, 369, 381, 388, 406, 407, 513, 535, 536, 608, 621, 623, 624, 625, 626, 632, 649, 664, 730, 731], "29": [10, 39, 41, 43, 46, 58, 75, 77, 78, 80, 85, 224, 381, 411, 513, 535, 536, 606, 610, 621, 623, 624, 626, 664, 729, 730, 731], "82": [10, 39, 41, 46, 47, 52, 78, 85, 109, 222, 381, 513, 604, 624, 730, 731, 806, 825], "68": [10, 39, 43, 46, 52, 85, 109, 131, 224, 369, 390, 400, 615, 618, 621, 626, 631, 683, 727, 730, 731], "nevertheless": 10, "fall": [10, 41, 786, 808, 820, 839], "short": [10, 39, 53, 76, 416, 625, 650, 651, 808, 810, 820, 840, 844], "blaze": 10, "31": [10, 22, 23, 24, 25, 39, 41, 42, 46, 47, 52, 53, 75, 76, 77, 80, 85, 109, 114, 134, 230, 261, 269, 369, 372, 381, 389, 390, 458, 513, 530, 615, 618, 621, 623, 730, 731, 843], "03": [10, 23, 42, 49, 52, 54, 55, 75, 76, 78, 85, 134, 234, 259, 338, 581, 582, 605, 610, 618, 621, 623, 624, 626, 627, 665, 686, 730], "62": [10, 39, 41, 47, 69, 75, 76, 85, 109, 254, 282, 621, 631, 632, 727, 729, 731], "36": [10, 39, 43, 52, 53, 57, 66, 76, 77, 81, 224, 279, 280, 343, 366, 369, 370, 381, 390, 400, 426, 513, 535, 536, 582, 621, 623, 626, 630, 636, 649, 669, 672, 682, 719, 749], "35": [10, 39, 47, 57, 58, 69, 75, 76, 80, 81, 85, 109, 224, 283, 369, 390, 400, 621, 625, 626, 633, 636, 649, 657, 664, 730, 738, 749], "37": [10, 22, 23, 24, 25, 39, 47, 52, 53, 69, 75, 76, 80, 98, 109, 222, 230, 279, 282, 286, 377, 411, 503, 621, 625, 626, 630, 632, 649, 669, 716, 730, 819], "surpass": 10, "remark": [10, 846], "artifici": 10, "simpli": [10, 18, 27, 28, 30, 39, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 369, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 621, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 673, 674, 675, 677, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 802, 808, 809, 810, 815, 816, 817, 819, 820, 821, 822, 823, 825, 827, 828, 831, 832, 833, 835, 838, 840, 844, 845, 846, 848, 862, 867], "stack": [10, 20, 22, 23, 24, 25, 30, 39, 43, 53, 58, 60, 70, 76, 81, 83, 98, 141, 142, 324, 363, 370, 372, 422, 459, 460, 462, 471, 490, 569, 578, 600, 618, 623, 626, 628, 630, 658, 660, 661, 662, 663, 665, 667, 669, 670, 671, 673, 674, 675, 677, 678, 681, 708, 718, 719, 782, 802, 807, 814, 831, 840, 857, 859, 866, 867], "x_doubl": 10, "vstack": [10, 53, 76, 372, 471], "y_doubl": 10, "explor": [10, 12, 14, 18, 22, 23, 24, 27, 28, 33, 34, 35, 808, 809, 810, 820, 825, 838, 841, 845, 861, 864], "235128": 10, "41": [10, 22, 23, 24, 25, 39, 41, 46, 52, 53, 58, 75, 76, 77, 80, 81, 109, 223, 231, 238, 269, 283, 369, 370, 377, 381, 388, 406, 411, 431, 503, 513, 530, 531, 615, 621, 623, 626, 636, 656, 664, 755], "315": [10, 275, 621], "40": [10, 39, 41, 43, 53, 54, 75, 76, 77, 85, 89, 99, 230, 234, 254, 283, 343, 366, 369, 372, 388, 390, 400, 406, 480, 535, 537, 542, 543, 567, 581, 603, 606, 621, 623, 624, 626, 630, 636, 665, 672, 717, 730, 749, 753, 802, 819], "879": 10, "65": [10, 39, 41, 43, 46, 75, 78, 85, 230, 269, 531, 550, 604, 621, 623, 624, 626, 636, 672, 730, 731, 749, 819], "380": 10, "seem": [10, 808, 809, 838, 844, 845, 846, 861], "observ": [10, 53, 76, 381, 511, 512, 810, 820, 824, 840, 854, 863], "examin": 10, "600": [10, 43, 77, 80, 369, 392, 393, 543, 819], "plot": [10, 42, 802, 861], "conduct": [10, 865], "num_boosting_round": 10, "300": [10, 75, 77, 80, 279, 369, 392, 393, 543, 567, 621, 623, 626, 665, 835], "400": [10, 77, 80, 369, 392, 393, 543, 567, 623, 626, 665], "500": [10, 53, 76, 77, 80, 369, 370, 392, 393, 442, 543, 623], "ivy_elapsed_tim": 10, "xgb_elapsed_tim": 10, "ivy_tim": 10, "partial": [10, 53, 70, 76, 162, 163, 195, 196, 343, 366, 369, 370, 372, 381, 416, 436, 476, 477, 478, 479, 519, 540, 541, 609, 619, 620, 623, 624, 626, 666, 767, 769, 783, 784, 810, 817, 838], "append": [10, 42, 43, 53, 58, 70, 76, 228, 336, 366, 621, 626, 628, 660, 667, 692, 796, 802, 819, 835, 840, 843], "xgb_time": 10, "fivethirtyeight": 10, "legend": [10, 43, 808], "loc": 10, "best": [10, 41, 562, 623, 796, 800, 802, 803, 806, 807, 808, 809, 810, 813, 819, 820, 824, 825, 834, 835, 836, 847, 864, 865], "xlabel": 10, "ylabel": 10, "obviou": [10, 843, 861], "trend": 10, "longer": [10, 809, 820, 831, 835, 861], "gap": 10, "between": [10, 16, 17, 22, 32, 33, 34, 39, 52, 53, 54, 57, 58, 59, 60, 64, 70, 75, 76, 80, 81, 82, 83, 99, 122, 161, 224, 237, 272, 288, 329, 345, 347, 366, 369, 370, 371, 372, 381, 392, 393, 394, 405, 406, 407, 415, 421, 425, 444, 445, 446, 447, 448, 449, 450, 475, 522, 618, 619, 621, 625, 627, 628, 630, 632, 634, 648, 672, 686, 687, 688, 692, 700, 714, 729, 740, 741, 742, 767, 774, 786, 802, 815, 816, 820, 822, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 841, 842, 843, 845, 850, 854, 855, 857, 858, 860, 861, 862, 867], "within": [10, 12, 14, 18, 27, 28, 48, 53, 76, 122, 329, 345, 366, 369, 375, 405, 406, 407, 412, 415, 453, 454, 455, 496, 618, 632, 731, 796, 808, 810, 811, 815, 819, 820, 832, 833, 834, 835, 844, 846, 855, 857, 858, 862], "slightli": [10, 307, 363, 818, 832, 835, 840, 844], "paramet": [10, 14, 25, 27, 28, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 566, 567, 570, 571, 572, 573, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 768, 769, 774, 779, 781, 782, 783, 784, 785, 786, 787, 791, 792, 795, 796, 798, 800, 802, 808, 815, 823, 824, 827, 832, 833, 835, 836, 840, 842, 843, 854, 855, 856, 862], "x_train": 10, "y_train": [10, 43, 802], "train_siz": [10, 41], "random_st": [10, 370, 427], "51": [10, 39, 43, 52, 53, 75, 76, 77, 85, 231, 269, 282, 370, 390, 442, 621, 731, 766], "clear": [10, 191, 620, 808, 810, 816, 820, 821, 822, 832, 838, 840, 842, 850, 851, 852, 861], "amount": [10, 59, 82, 211, 620, 627, 686, 687, 688, 796, 809, 819, 821, 833], "widen": 10, "impress": 10, "outcom": [10, 53, 76, 332, 343, 366, 796], "howev": [10, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 58, 81, 243, 286, 287, 372, 375, 483, 491, 493, 570, 621, 623, 626, 675, 677, 791, 808, 809, 814, 815, 816, 818, 820, 821, 822, 823, 824, 826, 827, 828, 831, 832, 833, 835, 838, 840, 842, 843, 844, 845, 846, 851, 854, 860, 861, 867], "tend": 10, "outperform": 10, "proce": [10, 808, 809], "95933": 10, "9874": 10, "105807": 10, "70": [10, 39, 41, 53, 76, 77, 369, 390, 400, 543, 567, 626, 636, 672, 749, 851], "77": [10, 39, 43, 77, 582, 626, 636, 672, 749], "93": [10, 39, 53, 75, 77, 85, 194, 283, 354, 366, 535, 536, 620, 623, 730, 731], "wrap": [10, 18, 20, 27, 28, 30, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 369, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 578, 581, 582, 583, 584, 586, 588, 589, 600, 602, 604, 605, 608, 610, 611, 612, 613, 623, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 673, 674, 675, 677, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 763, 802, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 827, 828, 831, 832, 835, 840, 842, 845, 846, 848, 854, 855, 857, 861, 862, 867, 868], "balanc": 10, "breast": 10, "cancer": 10, "53": [10, 22, 39, 58, 62, 75, 80, 155, 211, 241, 411, 607, 609, 619, 620, 624, 626, 631, 664, 727, 731], "return_x_i": 10, "x_test": 10, "y_test": 10, "test_siz": [10, 41], "76": [10, 20, 39, 52, 53, 66, 73, 75, 76, 85, 164, 218, 234, 282, 317, 363, 400, 619, 621, 626, 630, 636, 679, 716, 730, 749], "87": [10, 39, 78, 80, 230, 259, 369, 381, 411, 412, 513, 604, 621, 624, 766, 825], "171": [10, 58, 626, 664, 766], "90": [10, 39, 41, 43, 52, 53, 75, 76, 235, 275, 279, 354, 366, 372, 381, 481, 513, 621, 626, 636, 672, 749, 796, 851], "86": [10, 39, 62, 76, 85, 369, 381, 400, 513, 604, 624, 730, 731], "88": [10, 39, 78, 85, 108, 381, 513, 608, 615, 624, 626, 632, 636, 672, 731, 749], "perfectli": [10, 768, 852], "align": [10, 53, 70, 76, 369, 370, 404, 420, 625, 654, 796, 805, 809, 819, 832, 834, 840, 842, 848, 867], "gain": [10, 781, 810, 811, 814, 839, 844, 861], "combin": [10, 33, 53, 70, 76, 99, 369, 381, 402, 413, 512, 540, 541, 623, 626, 657, 667, 810, 815, 818, 819, 820, 822, 824, 828, 835, 845, 861], "build": [11, 15, 16, 18, 25, 27, 28, 31, 32, 33, 34, 39, 41, 46, 64, 70, 99, 634, 739, 740, 741, 742, 782, 783, 784, 802, 803, 809, 813, 819, 820, 828, 830, 839, 841, 844, 845, 846, 848, 851, 855, 859, 861, 863, 866, 867, 868], "timm": [11, 12, 16, 27, 28, 802, 855], "seen": [12, 14, 19, 25, 27, 370, 376, 428, 500, 547, 623, 791, 819, 820, 822, 824, 832, 835, 840, 842, 843, 850, 851, 867], "veri": [12, 20, 27, 28, 30, 52, 75, 270, 329, 345, 366, 621, 626, 675, 768, 807, 808, 809, 810, 817, 818, 820, 821, 822, 824, 825, 827, 828, 831, 832, 833, 835, 836, 838, 841, 843, 844, 845, 846, 850, 851, 857, 858, 859, 861, 862, 863, 866, 867, 868], "guid": [12, 25, 802, 803, 808, 809, 810, 817, 826, 832, 834, 867], "focu": [12, 25, 808, 830, 859, 860, 863, 868], "more": [12, 15, 16, 18, 19, 20, 23, 25, 27, 28, 29, 30, 39, 41, 42, 43, 47, 52, 53, 58, 60, 64, 69, 75, 76, 81, 83, 87, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 149, 241, 243, 259, 274, 287, 291, 295, 296, 298, 357, 361, 367, 370, 371, 372, 417, 419, 431, 434, 447, 453, 454, 455, 460, 481, 570, 615, 618, 619, 621, 623, 626, 628, 634, 660, 666, 667, 670, 673, 675, 677, 684, 693, 700, 739, 740, 741, 742, 768, 778, 796, 802, 804, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 856, 859, 860, 861, 862, 863, 864, 867, 868], "involv": [12, 15, 16, 23, 25, 50, 73, 176, 219, 236, 243, 269, 274, 619, 621, 796, 803, 811, 813, 819, 820, 822, 833, 838, 845, 851, 861, 867], "develop": [12, 26, 27, 28, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 817, 819, 825, 834, 836, 846, 848, 850, 851, 852, 854, 855, 859, 860, 861, 862, 863, 866, 867, 868], "usual": [12, 14, 44, 236, 269, 621, 795, 809, 814, 820, 832, 835, 838], "directli": [12, 14, 18, 21, 25, 27, 28, 31, 369, 370, 404, 428, 630, 720, 802, 808, 809, 810, 811, 814, 815, 818, 819, 820, 821, 823, 826, 828, 829, 831, 832, 833, 836, 837, 840, 842, 844, 845, 846, 847, 852, 854, 855, 856, 865, 866, 867], "case": [12, 14, 20, 22, 27, 28, 30, 31, 32, 33, 41, 48, 49, 53, 54, 60, 66, 70, 72, 76, 77, 83, 93, 94, 99, 124, 135, 162, 163, 190, 195, 196, 203, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 244, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 330, 331, 341, 343, 353, 366, 369, 371, 372, 375, 376, 382, 392, 393, 394, 414, 443, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 480, 481, 489, 491, 493, 500, 523, 540, 541, 545, 552, 566, 567, 568, 618, 619, 620, 621, 623, 626, 628, 630, 636, 675, 681, 692, 693, 694, 696, 698, 699, 701, 703, 711, 717, 750, 751, 752, 753, 754, 755, 756, 766, 767, 786, 796, 802, 806, 808, 809, 810, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 842, 844, 845, 846, 851, 854, 855, 856, 860, 864], "mlp": 12, "mixer": 12, "onli": [12, 14, 27, 28, 33, 39, 41, 43, 45, 48, 49, 52, 53, 58, 60, 62, 70, 72, 75, 76, 81, 83, 85, 93, 96, 98, 114, 134, 174, 175, 204, 264, 265, 270, 276, 307, 337, 343, 363, 366, 369, 370, 372, 376, 381, 391, 404, 414, 423, 428, 440, 442, 453, 454, 455, 465, 498, 499, 515, 529, 615, 618, 619, 620, 621, 623, 625, 626, 628, 630, 632, 633, 635, 636, 652, 667, 674, 677, 678, 693, 696, 708, 709, 715, 716, 718, 719, 720, 725, 726, 729, 730, 731, 734, 735, 745, 751, 754, 764, 766, 767, 769, 782, 786, 795, 800, 802, 803, 804, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 850, 854, 855, 860, 861, 862, 867, 868], "retriev": [12, 14, 18, 525, 547, 572, 623, 810, 832], "mlp_encod": [12, 27, 28, 802, 855], "create_model": [12, 27, 28, 802, 855], "mixer_b16_224": [12, 27, 28, 802, 855], "nois": [12, 14, 27, 28, 802, 854, 855], "randn": [12, 14, 27, 28, 802, 855], "tf_mlp_encod": [12, 27, 28], "output_torch": [12, 14], "output_tf": [12, 14], "output_dens": [12, 27, 28, 802], "dens": [12, 25, 27, 28, 311, 363, 782, 802], "unit": [12, 27, 28, 53, 69, 76, 93, 94, 106, 108, 109, 110, 111, 112, 113, 114, 291, 292, 294, 298, 300, 301, 304, 305, 306, 361, 494, 495, 615, 802, 809, 814, 820, 832, 833, 835, 846, 862, 865], "activ": [12, 25, 27, 28, 53, 54, 57, 68, 76, 80, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 584, 625, 652, 655, 781, 782, 800, 802, 809, 810, 820, 826, 836, 837, 844, 855, 861, 864], "mention": [12, 14, 27, 28, 33, 808, 809, 810, 815, 822, 827, 828, 831, 832, 835, 838, 851, 856, 861], "basic": [12, 14, 18, 21, 25, 27, 28, 31, 34, 372, 482, 802, 803, 808, 822, 835], "fulli": [12, 14, 16, 17, 20, 25, 27, 28, 41, 53, 76, 381, 519, 782, 802, 815, 820, 827, 830, 838, 840, 841, 842, 843, 844, 845, 846, 852, 856, 859, 860, 861, 867, 868], "trainabl": [12, 14, 18, 24, 25, 27, 28, 45, 779, 783, 784, 787, 802, 823, 841, 843, 844, 855, 856], "fine": [12, 14, 27, 28, 809, 810, 820, 822, 832, 842, 845, 867], "tune": [12, 14, 27, 28, 866, 867], "train": [12, 14, 25, 27, 28, 44, 53, 55, 57, 76, 78, 80, 96, 369, 370, 375, 392, 393, 394, 439, 491, 493, 604, 605, 610, 624, 625, 648, 650, 652, 655, 781, 782, 783, 784, 785, 802, 818, 821, 828, 843, 844, 845, 846, 852, 855, 859, 860, 865, 867, 868], "ground": [12, 14, 371, 444, 761, 763, 774, 806, 825, 832, 835, 850], "ret": [12, 14, 27, 28, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 429, 432, 434, 437, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 567, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 769, 779, 784, 786, 791, 796, 798, 802, 820, 821, 823, 824, 830, 831, 832, 833, 836, 840, 845, 855], "op": [12, 18, 39, 778, 791, 800, 836, 840, 846], "eagertensor": [12, 18, 39, 791, 833], "readi": [12, 14, 19, 20, 21, 29, 30, 31, 32, 33, 34, 41, 43, 808, 809], "deepmind": [13, 852], "perceiverio": [13, 852], "backbon": [13, 41, 802, 840, 843], "TO": [13, 15, 26], "replac": [13, 15, 26, 42, 52, 53, 54, 60, 62, 70, 75, 76, 77, 83, 85, 128, 270, 305, 308, 361, 363, 372, 480, 483, 566, 567, 571, 618, 621, 623, 628, 632, 689, 728, 766, 810, 817, 818, 820, 821, 829, 832, 835, 842, 845, 846, 851, 855, 868], "efficientnet": 14, "include_top": [14, 802], "eff_encod": [14, 802], "applic": [14, 16, 41, 43, 46, 53, 57, 76, 80, 96, 370, 442, 625, 626, 630, 636, 652, 655, 681, 714, 715, 716, 720, 721, 753, 755, 802, 809, 819, 820, 821, 829, 844, 858, 859, 861, 863, 865, 867], "efficientnet_v2": [14, 802], "efficientnetv2b0": [14, 802], "data": [14, 22, 23, 24, 25, 28, 33, 41, 43, 46, 47, 49, 52, 53, 54, 57, 58, 60, 62, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 80, 81, 83, 85, 86, 87, 88, 89, 90, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 188, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 297, 298, 307, 308, 309, 310, 311, 312, 313, 324, 325, 326, 327, 328, 330, 331, 332, 348, 353, 361, 363, 366, 369, 370, 372, 376, 380, 381, 384, 392, 393, 394, 410, 412, 414, 420, 422, 440, 458, 480, 483, 484, 486, 498, 499, 500, 501, 502, 508, 512, 513, 514, 518, 521, 522, 539, 552, 554, 555, 558, 584, 615, 618, 620, 621, 623, 625, 626, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 690, 693, 694, 696, 697, 699, 700, 704, 712, 729, 730, 731, 733, 734, 735, 737, 738, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 764, 766, 767, 768, 769, 774, 778, 781, 782, 783, 784, 788, 796, 800, 802, 809, 813, 814, 815, 816, 817, 818, 821, 823, 827, 828, 829, 831, 833, 836, 838, 840, 842, 848, 849, 851, 861, 862, 863, 865, 866, 867], "storag": [14, 41, 42, 843, 851], "googleapi": [14, 41, 42], "efficientnetv2": 14, "b0_notop": 14, "h5": [14, 70], "24274472": 14, "0u": 14, "torch_eff_encod": [14, 802], "1280": [14, 535, 623, 802], "state": [15, 26, 41, 57, 76, 80, 96, 183, 184, 185, 186, 187, 269, 369, 414, 591, 593, 596, 598, 599, 619, 621, 623, 625, 650, 651, 764, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 802, 806, 809, 817, 820, 821, 823, 824, 825, 826, 827, 832, 835, 839, 840, 841, 843, 851, 855, 867, 868], "api": [15, 20, 25, 26, 30, 43, 45, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 174, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 330, 331, 333, 366, 369, 372, 381, 412, 483, 512, 618, 619, 621, 626, 628, 633, 634, 635, 636, 637, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 690, 692, 693, 694, 696, 697, 699, 700, 704, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 802, 806, 809, 810, 813, 815, 817, 820, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 835, 838, 839, 841, 843, 846, 848, 849, 850, 857, 859, 861, 863, 866, 868], "welcom": [16, 42, 802, 803, 809, 810, 811, 834], "goal": [16, 41, 243, 621, 802, 808, 811, 851, 861, 867], "provid": [16, 18, 22, 25, 27, 28, 32, 33, 39, 45, 49, 53, 54, 58, 60, 63, 66, 67, 70, 72, 76, 77, 81, 83, 86, 89, 90, 118, 135, 137, 154, 155, 156, 157, 158, 166, 176, 188, 192, 288, 369, 370, 372, 375, 381, 404, 412, 416, 421, 425, 436, 437, 441, 442, 459, 461, 470, 489, 491, 493, 522, 534, 566, 567, 617, 618, 619, 620, 621, 623, 625, 626, 628, 630, 633, 636, 637, 652, 669, 672, 683, 692, 693, 700, 712, 734, 754, 756, 757, 758, 767, 782, 786, 791, 792, 802, 808, 809, 810, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 835, 836, 838, 842, 844, 846, 850, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 868], "varieti": [16, 814, 819, 820, 821, 835, 837, 857, 859, 863, 864, 867, 868], "organ": [16, 815, 818, 828, 832, 834, 836, 848, 851], "main": [16, 28, 49, 53, 58, 76, 81, 128, 141, 142, 143, 308, 323, 324, 363, 370, 372, 420, 464, 618, 626, 659, 660, 681, 802, 805, 808, 809, 810, 811, 814, 817, 818, 825, 829, 831, 859, 861, 862, 867], "exactli": [16, 20, 30, 39, 40, 44, 286, 621, 808, 818, 819, 820, 821, 822, 824, 835, 838, 850, 852], "rush": [16, 852], "jump": [16, 833], "straight": [16, 802, 819, 832, 835, 842], "quickstart": 16, "introduct": [16, 18, 25, 27, 28, 861], "point": [16, 25, 50, 52, 53, 58, 62, 64, 66, 73, 75, 76, 81, 85, 89, 122, 123, 124, 126, 128, 131, 138, 139, 144, 148, 161, 165, 169, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 252, 257, 258, 259, 260, 261, 269, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 307, 308, 310, 330, 331, 347, 348, 351, 353, 363, 366, 369, 370, 371, 376, 381, 384, 392, 393, 394, 412, 422, 440, 444, 498, 499, 500, 501, 502, 512, 513, 514, 522, 616, 618, 619, 621, 626, 632, 633, 634, 635, 636, 656, 658, 661, 662, 663, 665, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 684, 730, 731, 737, 739, 740, 741, 742, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 791, 792, 800, 802, 806, 808, 809, 810, 814, 815, 817, 819, 820, 822, 823, 825, 827, 831, 832, 835, 836, 838, 840, 842, 843, 852, 854, 867], "those": [16, 40, 41, 58, 60, 70, 76, 81, 83, 122, 175, 236, 269, 484, 603, 618, 619, 621, 623, 626, 628, 630, 633, 674, 677, 689, 710, 737, 805, 808, 809, 810, 811, 815, 818, 819, 820, 829, 831, 832, 833, 835, 838, 850, 858], "who": [16, 805, 811, 812, 813, 824, 839, 846, 861, 863], "deeper": [16, 18, 28, 48, 630, 719, 720, 810, 813, 835, 839, 850], "showcas": [16, 802], "real": [16, 24, 52, 53, 66, 75, 76, 89, 98, 108, 111, 114, 138, 139, 216, 217, 218, 219, 221, 222, 223, 224, 225, 234, 236, 237, 239, 241, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 269, 271, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 330, 331, 337, 338, 348, 366, 369, 370, 391, 412, 413, 422, 423, 615, 618, 621, 626, 633, 636, 661, 662, 663, 668, 675, 677, 678, 681, 684, 737, 750, 752, 753, 754, 755, 818, 863], "world": [16, 24, 810, 863], "whether": [16, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 123, 124, 130, 132, 137, 139, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 176, 188, 192, 193, 195, 196, 198, 200, 203, 204, 206, 209, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 324, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 363, 366, 369, 370, 371, 372, 381, 387, 388, 389, 391, 392, 393, 394, 410, 412, 414, 416, 431, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 459, 460, 461, 463, 465, 466, 467, 470, 474, 481, 483, 484, 485, 489, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 566, 567, 568, 569, 571, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 596, 597, 600, 602, 605, 606, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 639, 640, 641, 642, 648, 649, 650, 651, 652, 655, 656, 657, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 681, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 714, 715, 716, 718, 719, 720, 721, 725, 726, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 761, 763, 766, 778, 779, 782, 783, 784, 785, 786, 795, 802, 803, 808, 809, 815, 818, 820, 822, 827, 831, 832, 835, 837, 838, 854, 855], "beginn": [16, 803, 861], "advanc": [16, 39, 809, 811, 860], "got": [16, 39, 824], "cover": [16, 27, 53, 76, 369, 405, 406, 407, 808, 814, 815, 817, 820, 822, 823, 828, 829, 835, 838, 839], "write": [16, 17, 27, 28, 39, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 324, 328, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 352, 353, 354, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 410, 412, 413, 416, 417, 419, 420, 428, 429, 432, 433, 434, 435, 441, 444, 445, 446, 447, 449, 450, 459, 460, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 530, 531, 535, 536, 537, 542, 543, 552, 566, 567, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 727, 728, 729, 730, 731, 733, 735, 736, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 764, 802, 807, 808, 810, 813, 814, 816, 817, 819, 820, 822, 823, 824, 828, 831, 833, 836, 840, 842, 845, 852, 861, 868], "familiar": [16, 17, 18, 802, 808, 809], "concept": [16, 17, 18], "agnost": [16, 17, 18, 19, 27, 28, 29, 33, 39, 802, 815, 820, 827, 840, 842, 845, 846, 867, 868], "unifi": [16, 17, 18, 20, 21, 27, 30, 31, 35, 42, 70, 209, 620, 811, 813, 814, 815, 819, 820, 824, 829, 830, 832, 838, 840, 846, 849, 851, 853, 855, 857, 858, 859, 861, 865, 868], "alongsid": [16, 17, 18, 19, 29, 625, 652, 851], "turn": [16, 17, 20, 30, 57, 80, 93, 94, 392, 393, 394, 625, 648, 782, 809, 817, 818, 821, 822, 832, 835, 852], "wrapper": [16, 17, 20, 774, 815, 817, 818, 820, 824, 828, 831, 832, 842, 848, 857, 861], "unus": [16, 17, 20, 822, 831], "part": [16, 17, 20, 49, 52, 53, 75, 76, 81, 98, 108, 111, 114, 141, 142, 143, 249, 253, 276, 323, 324, 349, 363, 366, 369, 370, 372, 381, 412, 423, 475, 522, 615, 618, 621, 626, 662, 663, 763, 802, 808, 809, 810, 811, 814, 817, 820, 826, 828, 831, 832, 835, 836, 838, 840, 841, 845, 846, 854, 855, 856, 859, 861, 866, 867, 868], "lazi": [16, 17, 20, 23, 30, 33, 34, 45], "eager": [16, 17, 20, 23, 25, 30, 33, 34, 45, 800, 818, 846, 861], "understand": [16, 17, 18, 22, 39, 45, 806, 807, 808, 809, 810, 813, 814, 817, 822, 823, 827, 833, 834, 839, 852, 857, 867], "decor": [16, 17, 22, 24, 25, 33, 45, 529, 623, 766, 768, 774, 806, 814, 815, 818, 820, 821, 825, 828, 831, 832, 833, 838], "kornia": [16, 17, 24, 27, 28, 41, 45, 802, 855], "roundup": 18, "over": [18, 25, 28, 30, 41, 53, 58, 66, 67, 68, 73, 76, 80, 81, 89, 90, 91, 93, 118, 315, 316, 330, 331, 343, 350, 363, 366, 369, 370, 371, 372, 379, 381, 383, 384, 385, 388, 397, 402, 406, 410, 411, 412, 413, 414, 415, 435, 443, 452, 465, 480, 483, 484, 505, 515, 521, 570, 603, 617, 623, 626, 631, 632, 636, 637, 657, 668, 679, 681, 683, 684, 727, 731, 750, 751, 752, 753, 754, 755, 756, 757, 758, 782, 785, 791, 795, 802, 809, 810, 816, 822, 823, 830, 831, 833, 836, 840, 842, 846, 850, 852, 859, 861], "indep": [18, 27], "futur": [18, 25, 27, 41, 626, 662, 663, 802, 809, 810, 811, 819, 820, 835, 836, 838, 842, 846, 850, 852, 867], "proof": [18, 27], "delv": [18, 28, 802], "theori": [18, 804, 817], "deep": [18, 25, 27, 39, 70, 535, 623, 802, 803, 804, 807, 808, 810, 814, 817, 818, 820, 826, 830, 833, 839, 842, 843, 850, 859, 861, 864, 865, 867, 868], "esenti": [18, 27], "abstract": [18, 27, 28, 781, 786, 802, 818, 820, 831, 832, 835, 838, 844, 850, 859, 861, 863, 864, 868], "specif": [18, 19, 24, 25, 27, 28, 29, 31, 33, 41, 51, 53, 54, 74, 76, 77, 176, 207, 210, 243, 264, 265, 274, 317, 330, 331, 363, 366, 372, 376, 483, 502, 535, 536, 537, 563, 619, 620, 621, 623, 626, 628, 629, 632, 635, 636, 662, 663, 679, 700, 705, 706, 707, 728, 745, 750, 751, 752, 754, 761, 763, 783, 784, 791, 792, 798, 800, 802, 805, 806, 808, 809, 810, 814, 815, 816, 817, 818, 820, 821, 824, 826, 827, 828, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 844, 845, 846, 847, 848, 850, 854, 855, 856, 857, 859, 860, 862, 863, 864, 868], "quirk": [18, 27], "perk": [18, 27, 802, 815, 818], "under": [18, 27, 28, 53, 371, 447, 448, 795, 802, 808, 809, 813, 814, 821, 822, 823, 826, 832, 833, 835, 838, 839, 840, 843, 845, 846, 854, 855, 861, 864, 868], "hood": [18, 27, 28, 802, 813, 821, 822, 826, 832, 835, 838, 839, 840, 843, 845, 854, 855, 868], "appropi": 18, "string": [18, 27, 28, 43, 53, 54, 57, 70, 76, 80, 146, 147, 159, 166, 188, 189, 190, 191, 192, 194, 203, 210, 211, 215, 369, 370, 372, 411, 415, 423, 475, 486, 514, 533, 619, 620, 623, 625, 626, 638, 639, 640, 641, 643, 645, 647, 663, 761, 763, 767, 795, 796, 816, 817, 819, 820, 821, 824, 832, 840, 843], "simplest": [18, 809, 822, 835, 838], "interact": [18, 27, 42, 45, 808, 860, 861, 866], "submodul": [18, 27, 41, 43, 98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 808, 809, 810, 814, 817, 819, 821, 825, 828, 829, 835, 839, 840, 844, 848], "ones": [18, 25, 27, 39, 45, 49, 53, 55, 57, 62, 70, 72, 76, 80, 85, 128, 132, 137, 139, 145, 195, 196, 232, 308, 363, 381, 521, 604, 618, 620, 621, 624, 625, 643, 644, 729, 730, 731, 767, 802, 808, 815, 819, 822, 827, 828, 834, 835, 842, 843, 861], "likewis": [18, 23, 27, 34, 802, 810, 818, 820, 823, 827, 828, 832, 838, 843, 854, 855, 867], "nativearrai": [18, 27, 28, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 123, 124, 125, 127, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 171, 173, 175, 176, 182, 192, 193, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 312, 313, 317, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 512, 513, 514, 515, 516, 524, 527, 528, 530, 531, 535, 536, 537, 539, 542, 543, 544, 545, 546, 548, 550, 551, 552, 555, 558, 559, 561, 566, 567, 568, 571, 580, 581, 582, 583, 584, 586, 588, 589, 591, 602, 604, 605, 606, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 711, 715, 716, 717, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 787, 815, 818, 822, 824, 827, 828, 829, 831, 832, 836, 837, 840, 842, 848], "alia": [18, 27, 330, 331, 366, 616, 808, 832, 853, 856], "select": [18, 27, 32, 45, 53, 66, 76, 89, 370, 372, 381, 423, 434, 483, 484, 513, 514, 636, 747, 748, 808, 809, 810, 819, 825, 831, 835, 840, 842, 845, 846, 861, 864, 865], "lastli": [18, 27, 815], "contain": [18, 27, 28, 42, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 162, 163, 164, 167, 168, 169, 171, 173, 176, 193, 195, 196, 197, 202, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 363, 366, 368, 369, 370, 371, 372, 375, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 571, 574, 576, 581, 582, 583, 584, 586, 588, 589, 596, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 715, 716, 717, 720, 721, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 773, 774, 782, 783, 784, 786, 787, 791, 795, 796, 800, 802, 804, 806, 808, 809, 813, 814, 815, 816, 817, 819, 820, 822, 823, 825, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 840, 841, 844, 846, 847, 848, 850, 854, 861, 862, 867], "subclass": [18, 27, 28, 829, 832, 838, 855], "dict": [18, 27, 28, 41, 45, 48, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 130, 132, 137, 139, 145, 149, 151, 162, 163, 164, 168, 169, 176, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 320, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 363, 372, 391, 392, 393, 394, 412, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 475, 481, 483, 484, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 525, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 562, 566, 567, 581, 582, 584, 586, 588, 589, 602, 613, 617, 619, 620, 623, 630, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 708, 709, 711, 714, 715, 716, 717, 719, 720, 721, 725, 726, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 763, 764, 779, 782, 784, 791, 796, 815, 818, 843, 844, 848, 854, 855, 856], "recurs": [18, 27, 28, 41, 43, 48, 70, 71, 162, 163, 195, 196, 370, 439, 540, 541, 547, 619, 620, 623, 630, 708, 709, 712, 718, 719, 720, 761, 809, 814, 817, 818, 825, 828, 831, 844, 846], "fashion": [18, 768, 835, 855], "native_arrai": [18, 27, 28, 49, 50, 52, 72, 74, 75, 76, 77, 81, 88, 106, 109, 132, 135, 137, 139, 145, 148, 149, 150, 151, 159, 164, 171, 193, 202, 210, 226, 230, 235, 236, 237, 239, 243, 247, 255, 256, 264, 269, 272, 275, 278, 283, 330, 331, 357, 366, 371, 372, 449, 475, 481, 485, 524, 527, 554, 555, 558, 588, 615, 618, 619, 620, 621, 623, 625, 626, 627, 628, 632, 633, 636, 637, 639, 640, 647, 655, 658, 662, 663, 669, 670, 674, 678, 679, 681, 684, 686, 688, 689, 696, 728, 737, 746, 752, 755, 757, 763, 773, 791, 806, 825, 833, 835], "data_class": [18, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 388, 389, 535, 539, 677, 702], "low": [18, 27, 30, 46, 53, 57, 62, 76, 80, 85, 369, 411, 415, 625, 632, 638, 639, 640, 641, 643, 645, 647, 729, 731, 768, 818, 824, 831, 832, 838, 840, 857, 859, 861, 862, 863, 865, 867], "level": [18, 27, 28, 30, 53, 76, 77, 370, 439, 527, 796, 800, 802, 803, 808, 809, 810, 811, 812, 818, 820, 824, 828, 830, 831, 832, 834, 837, 838, 839, 840, 843, 844, 845, 846, 848, 852, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868], "c": [18, 27, 33, 42, 43, 49, 53, 54, 55, 57, 60, 66, 72, 73, 75, 76, 77, 78, 80, 81, 83, 87, 89, 93, 94, 112, 123, 124, 134, 137, 161, 164, 219, 230, 236, 237, 257, 258, 260, 269, 272, 280, 287, 369, 370, 372, 375, 381, 383, 384, 385, 396, 401, 417, 419, 421, 422, 424, 434, 453, 454, 455, 465, 483, 491, 492, 493, 496, 514, 527, 535, 536, 537, 538, 546, 550, 551, 589, 604, 605, 608, 610, 611, 612, 615, 618, 619, 621, 623, 624, 625, 626, 628, 630, 633, 634, 636, 639, 640, 641, 642, 643, 644, 646, 661, 663, 665, 696, 700, 708, 711, 715, 716, 717, 719, 720, 725, 726, 737, 742, 748, 749, 754, 756, 785, 795, 796, 803, 809, 813, 816, 817, 818, 822, 828, 830, 839, 840, 841, 843, 846, 848, 849, 851, 852, 855, 857, 861, 865, 866, 868], "fundament": [18, 27, 805, 819, 832, 838, 840, 850, 861], "common": [18, 21, 27, 31, 52, 53, 70, 75, 175, 246, 254, 334, 340, 366, 619, 621, 803, 806, 808, 809, 817, 820, 821, 822, 828, 829, 832, 836, 838, 846, 850, 858, 861, 868], "signatur": [18, 27, 372, 381, 475, 512, 820, 821, 822, 823, 827, 831, 835, 836, 838, 851, 858, 867], "matmul": [18, 27, 28, 44, 58, 81, 370, 437, 603, 623, 626, 677, 816, 835, 836, 840], "to_n": [18, 27, 28, 39, 48, 71, 840], "jaxlib": [18, 24, 42, 791, 809, 815, 820, 821, 827, 836, 840, 842], "xla_extens": [18, 24, 791, 815, 820, 821, 827, 836, 840, 842], "arrayimpl": [18, 24, 791], "abov": [18, 23, 27, 28, 33, 34, 49, 52, 53, 58, 62, 69, 75, 76, 81, 85, 94, 114, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 306, 308, 323, 324, 330, 331, 333, 336, 361, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 402, 405, 406, 407, 412, 413, 414, 422, 423, 475, 483, 512, 515, 542, 546, 548, 550, 552, 589, 613, 615, 618, 619, 621, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 729, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 802, 806, 808, 809, 810, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 835, 838, 840, 842, 843, 844, 845, 861, 866], "why": [18, 802, 810, 831, 842, 849, 851], "underli": [18, 27, 28, 39, 53, 60, 76, 83, 96, 226, 229, 231, 266, 371, 372, 448, 465, 621, 626, 628, 675, 696, 818, 831, 838, 854, 861], "disabl": [18, 27, 53, 76, 372, 483, 784, 800, 817], "array_mod": [18, 27, 568, 591, 623, 837], "set_array_mod": [18, 27, 591, 623, 837], "composit": [18, 27, 162, 163, 195, 196, 288, 370, 429, 540, 541, 619, 620, 621, 623, 767, 769, 808, 813, 815, 816, 818, 820, 821, 829, 831, 832, 833, 835, 838, 840, 844, 845, 846, 848, 854, 862], "ultim": [18, 27, 854], "sigmoid": [18, 27, 28, 39, 47, 53, 69, 76, 296, 361, 376, 498, 615, 778, 840, 843, 844], "z": [18, 27, 28, 40, 41, 49, 52, 53, 54, 58, 59, 62, 64, 66, 72, 75, 76, 77, 81, 82, 83, 85, 89, 98, 99, 133, 134, 136, 137, 197, 219, 220, 224, 226, 229, 231, 236, 247, 248, 251, 252, 253, 255, 256, 261, 263, 265, 266, 267, 268, 276, 285, 295, 296, 330, 331, 333, 361, 366, 371, 381, 444, 446, 447, 448, 449, 450, 456, 460, 471, 511, 512, 515, 522, 527, 539, 542, 543, 550, 551, 567, 580, 581, 582, 590, 603, 618, 620, 621, 623, 626, 627, 628, 630, 632, 633, 634, 636, 657, 667, 672, 673, 677, 684, 686, 687, 688, 689, 711, 715, 717, 725, 729, 730, 731, 734, 739, 749, 750, 752, 753, 754, 781, 802, 816, 818, 821, 822, 840, 842, 854], "divid": [18, 23, 27, 28, 44, 52, 53, 54, 60, 70, 75, 76, 83, 98, 99, 243, 375, 445, 491, 492, 493, 496, 581, 621, 623, 628, 698, 815, 818, 822, 826, 835], "exp": [18, 27, 28, 52, 53, 75, 76, 112, 114, 241, 261, 274, 296, 361, 369, 371, 396, 401, 448, 615, 621, 626, 675, 830, 832], "high": [18, 27, 28, 46, 53, 57, 62, 76, 80, 85, 369, 411, 415, 575, 623, 625, 632, 638, 639, 640, 641, 643, 645, 647, 729, 731, 768, 805, 808, 824, 830, 832, 843, 848, 852, 857, 858, 859, 860, 861, 865, 867, 868], "network": [18, 25, 27, 28, 39, 41, 46, 625, 649, 778, 781, 782, 802, 818, 828, 840, 844, 851, 855, 857, 859, 860, 861, 865, 867, 868], "entir": [18, 27, 28, 30, 43, 53, 66, 67, 70, 76, 77, 89, 90, 209, 239, 241, 281, 282, 330, 331, 366, 369, 372, 381, 392, 393, 394, 475, 515, 548, 620, 621, 636, 637, 750, 751, 752, 753, 754, 755, 756, 757, 758, 782, 796, 808, 809, 810, 814, 815, 818, 820, 822, 824, 831, 832, 833, 835, 838, 840, 843, 844, 845, 846, 851, 852, 855, 861, 867, 868], "further": [18, 70, 99, 768, 810, 814, 815, 819, 822, 824, 827, 828, 831, 832, 834, 835, 839, 840, 843, 844, 851, 852, 866, 867], "congratul": [18, 24], "There": [18, 25, 28, 33, 93, 362, 364, 365, 373, 374, 378, 768, 802, 808, 809, 810, 814, 815, 817, 818, 820, 821, 822, 824, 826, 828, 830, 832, 833, 837, 840, 843, 846, 850, 854, 862, 863, 867, 868], "come": [18, 41, 805, 808, 809, 810, 815, 819, 832, 837, 838, 844, 848, 861], "independ": [18, 28, 53, 62, 76, 85, 219, 236, 269, 279, 375, 376, 496, 498, 621, 626, 632, 657, 676, 728, 802, 814, 820, 822, 829, 840, 845, 855, 859], "good": [18, 27, 28, 802, 807, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 835, 836, 838, 840, 841, 844], "foundat": [18, 851, 864], "power": [18, 27, 28, 52, 53, 54, 58, 75, 76, 77, 81, 98, 99, 230, 239, 240, 274, 328, 340, 363, 366, 369, 416, 572, 582, 594, 621, 623, 626, 630, 669, 682, 714, 781, 837, 842, 843, 844, 861, 863, 867], "defin": [19, 25, 27, 28, 29, 49, 53, 54, 58, 72, 76, 77, 81, 96, 112, 137, 141, 142, 143, 219, 236, 243, 269, 270, 278, 280, 283, 295, 299, 303, 309, 312, 313, 314, 323, 324, 325, 326, 327, 330, 331, 333, 361, 363, 366, 369, 370, 372, 381, 404, 421, 475, 481, 515, 550, 551, 571, 615, 618, 621, 623, 625, 626, 636, 650, 657, 662, 663, 676, 750, 751, 752, 754, 802, 808, 809, 815, 816, 819, 820, 823, 827, 830, 832, 833, 835, 836, 842, 844, 846, 848, 856, 858, 859, 860, 861, 862, 865, 867, 868], "div": [19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 856], "sub": [19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 53, 58, 60, 70, 71, 75, 76, 77, 81, 83, 99, 268, 370, 372, 381, 423, 461, 470, 489, 518, 519, 547, 623, 626, 628, 629, 660, 681, 698, 705, 706, 707, 808, 810, 813, 818, 824, 832, 833, 835, 842, 843, 844, 856, 857], "By": [19, 39, 46, 53, 59, 60, 66, 67, 76, 82, 83, 89, 90, 283, 328, 330, 331, 343, 350, 363, 366, 369, 371, 372, 379, 381, 391, 447, 448, 483, 505, 512, 515, 570, 621, 623, 626, 627, 628, 636, 637, 657, 683, 686, 695, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 809, 816, 820, 822, 824, 828, 830, 831, 832, 840, 844, 845, 854], "with_numpi": 19, "seed": [19, 22, 23, 43, 44, 53, 57, 62, 64, 70, 76, 80, 85, 318, 319, 320, 321, 322, 363, 370, 376, 427, 436, 442, 498, 499, 500, 501, 502, 625, 632, 634, 648, 728, 729, 730, 731, 733, 739, 774, 779, 781, 796, 829, 833, 835], "123": [19, 72, 73, 132, 164, 538, 618, 623, 796, 835], "reproduc": [19, 44, 57, 80, 625, 648, 766, 767, 768, 769, 774, 806, 814, 825], "uniform": [19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 41, 53, 62, 76, 85, 381, 515, 632, 728, 729, 731, 781, 802, 834, 844, 855, 856, 868], "x_": [19, 29, 94, 280, 621, 856], "66391283": 19, "12516928": 19, "38367081": 19, "03102401": 19, "76419425": 19, "52797794": 19, "90346956": 19, "61316347": 19, "27585283": 19, "66309303": 19, "compat": [19, 25, 29, 33, 39, 46, 52, 53, 58, 60, 63, 66, 67, 75, 76, 81, 83, 86, 89, 90, 98, 99, 150, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 290, 330, 331, 366, 619, 621, 626, 628, 633, 636, 637, 657, 670, 673, 676, 679, 683, 684, 696, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 800, 802, 809, 816, 827, 832, 833, 836, 840, 846, 851], "sever": [19, 20, 29, 30, 32, 33, 34, 53, 76, 93, 369, 370, 383, 384, 385, 435, 766, 809, 810, 836, 846, 859, 865], "pro": [19, 20, 21, 29, 30, 31, 32, 33, 34], "pick": [20, 30, 781], "off": [20, 30, 57, 58, 80, 81, 392, 393, 394, 625, 626, 648, 660, 681, 781, 782, 809, 825, 839, 852, 854, 867], "last": [20, 25, 27, 30, 49, 53, 57, 58, 59, 60, 63, 65, 66, 67, 70, 72, 76, 80, 81, 82, 83, 88, 89, 90, 94, 98, 133, 134, 137, 192, 308, 336, 363, 366, 369, 370, 371, 372, 379, 381, 397, 402, 412, 413, 414, 425, 447, 465, 475, 477, 483, 505, 513, 514, 618, 620, 625, 626, 627, 628, 633, 635, 636, 637, 651, 652, 657, 660, 672, 681, 683, 687, 688, 690, 693, 696, 697, 698, 700, 734, 735, 743, 745, 746, 747, 748, 757, 758, 782, 791, 802, 810, 814, 816, 817, 820, 822, 831, 833, 835, 838, 840, 846, 852, 855, 861], "purpos": [20, 27, 28, 30, 41, 43, 143, 241, 259, 323, 363, 618, 621, 626, 675, 810, 813, 815, 818, 819, 821, 822, 824, 827, 828, 829, 832, 834, 835, 838, 839, 842, 848, 860, 862, 865, 866, 867], "illustr": [20, 30, 816, 840], "trigger": [20, 30, 784, 808, 826], "unif": [20, 22, 23, 30, 32, 803, 842, 851, 857, 867], "detail": [20, 30, 43, 47, 52, 53, 58, 60, 64, 69, 75, 76, 77, 81, 83, 87, 106, 107, 108, 109, 110, 111, 112, 113, 114, 129, 140, 287, 291, 295, 296, 298, 361, 370, 419, 460, 538, 615, 618, 621, 634, 660, 667, 673, 677, 700, 739, 740, 741, 742, 778, 802, 808, 810, 814, 816, 817, 818, 819, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 840, 842, 843, 844, 863, 867], "55563945": 20, "65538704": 20, "14150524": 20, "46951997": 20, "30220294": 20, "14739668": 20, "57017946": 20, "91962677": 20, "51029003": 20, "59644395": 20, "arbitrari": [20, 30, 49, 50, 53, 70, 73, 76, 135, 149, 176, 317, 371, 445, 453, 454, 455, 606, 618, 619, 624, 827, 828, 830, 831, 832, 835, 844, 846, 854, 856, 862, 867], "constitu": [20, 30, 70, 845], "due": [20, 27, 28, 30, 44, 46, 269, 279, 372, 483, 621, 809, 814, 819, 824, 831, 832, 851, 854, 855, 861], "manner": [20, 28, 30, 40, 48, 71, 630, 720, 809, 820, 821, 823, 828, 832, 836, 843, 846, 850, 857, 859, 867, 868], "non": [20, 30, 50, 52, 53, 58, 62, 63, 66, 67, 73, 75, 76, 81, 85, 86, 89, 90, 130, 148, 166, 175, 244, 264, 265, 270, 330, 331, 335, 341, 354, 366, 369, 370, 372, 381, 412, 423, 427, 431, 454, 455, 515, 518, 618, 619, 621, 626, 630, 632, 633, 636, 637, 657, 658, 668, 670, 677, 679, 683, 684, 721, 730, 734, 735, 736, 737, 750, 751, 752, 753, 754, 756, 757, 758, 766, 781, 783, 784, 786, 815, 818, 822, 840, 854, 855, 856, 861], "5556394": 20, "655387": 20, "1415051": 20, "4695197": 20, "3022028": 20, "1473966": 20, "5701794": 20, "91962665": 20, "51028997": 20, "5964439": 20, "assess": [20, 30, 808, 838], "985": 20, "000": [20, 75, 270, 766, 806, 819, 825], "69": [20, 39, 46, 52, 78, 85, 217, 259, 369, 390, 400, 608, 621, 624, 626, 668, 669, 730, 835, 843], "On": [20, 27, 28, 809, 820, 821, 826, 832, 835, 838, 841, 845], "hand": [20, 52, 370, 437, 766, 802, 814, 820, 821, 826, 828, 835, 846], "singl": [20, 30, 39, 44, 52, 62, 70, 75, 85, 94, 288, 345, 366, 370, 376, 434, 499, 589, 602, 606, 621, 623, 624, 625, 632, 634, 652, 729, 730, 731, 739, 766, 782, 800, 808, 809, 810, 814, 819, 822, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 843, 844, 845, 846, 852], "learnt": [21, 31], "two": [21, 31, 33, 39, 49, 53, 58, 64, 76, 77, 81, 98, 99, 119, 122, 128, 135, 141, 142, 143, 174, 182, 230, 244, 245, 279, 323, 324, 329, 341, 342, 344, 345, 347, 349, 356, 363, 366, 369, 370, 371, 372, 381, 397, 420, 421, 422, 434, 443, 445, 449, 454, 475, 481, 485, 512, 522, 527, 617, 618, 619, 621, 623, 625, 626, 628, 634, 650, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 701, 739, 740, 741, 742, 766, 768, 774, 782, 808, 809, 814, 815, 820, 821, 822, 823, 828, 832, 833, 835, 838, 839, 843, 845, 852, 858, 866], "workflow": [21, 31, 42, 808, 810, 811, 816, 820, 830, 832, 843, 848, 852, 860, 867, 868], "ivy_norm": 21, "jax_norm": [21, 27, 28], "wider": [21, 31, 575, 597, 623, 820, 837, 867], "avoid": [21, 31, 33, 53, 60, 76, 236, 241, 243, 259, 269, 371, 372, 375, 445, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 489, 491, 492, 493, 529, 545, 547, 570, 575, 597, 621, 623, 628, 692, 693, 694, 696, 698, 699, 701, 703, 768, 769, 809, 810, 816, 817, 818, 819, 820, 824, 829, 832, 835, 836, 837, 838, 861], "conveni": [21, 31, 808, 820, 821, 827, 833, 841, 843, 844, 848, 867], "act": [21, 31, 53, 76, 357, 367, 810, 822, 837, 846, 868], "shorthand": [21, 31, 33, 835], "pair": [21, 31, 41, 53, 57, 76, 80, 224, 243, 315, 356, 363, 366, 369, 402, 411, 413, 415, 621, 625, 626, 638, 639, 640, 641, 643, 645, 647, 655, 657, 796], "93968587": 21, "26075466": 21, "22723222": 21, "06276492": 21, "47426987": 21, "72835908": 21, "71737559": 21, "50411096": 21, "65419174": 21, "15576624": 21, "implic": [21, 31, 32, 35, 818], "requir": [22, 23, 24, 25, 32, 41, 42, 43, 46, 52, 53, 70, 75, 76, 270, 283, 287, 370, 372, 422, 423, 475, 621, 626, 628, 661, 662, 663, 700, 766, 774, 779, 796, 804, 808, 809, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 829, 832, 833, 834, 835, 836, 838, 840, 842, 846, 855, 861, 867], "satisfi": [22, 23, 24, 25, 41, 43, 46, 53, 369, 370, 391, 423, 820, 822], "opt": [22, 23, 24, 25, 45, 809, 816, 820, 831, 835, 838], "fw": [22, 23, 24, 25, 57, 80, 381, 512, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 763, 809, 835], "mxnet": [22, 23, 24, 25, 791, 808, 809, 851, 868], "einop": [22, 23, 24, 25, 41, 43, 46, 54, 77, 535, 536, 537, 623, 820, 851], "miniconda": [22, 23, 24, 25], "env": [22, 23, 24, 25], "multienv": [22, 23, 24, 25], "site": [22, 23, 24, 25, 862], "psutil": [22, 23, 24, 25, 41, 43, 46], "termcolor": [22, 23, 24, 25, 41, 43, 46, 70, 99], "colorama": [22, 23, 24, 25, 41, 43], "nvidia": [22, 23, 24, 25, 41, 43, 46, 865, 866], "535": [22, 23, 24, 25, 47, 69, 114, 615, 824], "diskcach": [22, 23, 24, 25, 41], "auth": [22, 23, 24, 25], "urllib3": [22, 23, 24, 25, 41], "pyvi": [22, 23, 24, 25, 27, 28], "dill": [22, 23, 24, 25, 41], "astunpars": [22, 23, 24, 25], "cloudpickl": [22, 23, 24, 25], "gast": [22, 23, 24, 25], "66": [22, 23, 24, 25, 39, 41, 43, 66, 76, 77, 78, 369, 400, 535, 536, 608, 623, 624, 626, 636, 672, 749], "wheel": [22, 23, 24, 25, 41, 43, 46, 850], "six": [22, 23, 24, 25, 41, 46, 809, 838], "cachetool": [22, 23, 24, 25], "pyasn1": [22, 23, 24, 25], "rsa": [22, 23, 24, 25], "jinja2": [22, 23, 24, 25], "jsonpickl": [22, 23, 24, 25], "networkx": [22, 23, 24, 25, 46], "charset": [22, 23, 24, 25, 41], "idna": [22, 23, 24, 25, 41], "certifi": [22, 23, 24, 25, 41], "2017": [22, 23, 24, 25, 41, 625, 652], "jedi": [22, 23, 24, 25], "inlin": [22, 23, 24, 25, 817], "prompt": [22, 23, 24, 25, 808, 810], "toolkit": [22, 23, 24, 25, 861, 862, 868], "pygment": [22, 23, 24, 25], "traitlet": [22, 23, 24, 25], "exceptiongroup": [22, 23, 24, 25], "paddl": [22, 23, 24, 25, 330, 331, 366, 779, 791, 808, 809, 820, 825], "pexpect": [22, 23, 24, 25], "markupsaf": [22, 23, 24, 25], "parso": [22, 23, 24, 25], "ptyprocess": [22, 23, 24, 25], "wcwidth": [22, 23, 24, 25], "asttoken": [22, 23, 24, 25], "pure": [22, 23, 24, 25, 33, 43, 802, 823, 827, 832, 838, 842, 845, 846, 861, 867, 868], "eagerli": [22, 23, 27, 28, 32, 33, 34, 41, 802, 854, 855, 856], "lazili": [22, 23, 24, 27, 28, 32, 34, 45, 802, 854, 855, 856], "actual": [22, 32, 806, 810, 813, 819, 825, 828, 829, 831, 832, 833, 835, 838, 839, 844, 846, 862, 867], "occur": [22, 27, 28, 32, 45, 50, 52, 64, 73, 75, 87, 151, 270, 286, 619, 621, 633, 634, 734, 735, 739, 740, 741, 742, 814, 819, 821, 824, 837], "becaus": [22, 30, 32, 42, 53, 369, 391, 761, 809, 810, 814, 815, 816, 817, 818, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 838, 840, 844, 845, 846, 861, 864, 867], "argument": [22, 24, 25, 27, 28, 30, 32, 33, 34, 39, 41, 43, 45, 48, 49, 52, 53, 54, 58, 70, 71, 75, 76, 77, 93, 94, 99, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 323, 324, 330, 331, 333, 336, 338, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 405, 406, 407, 412, 414, 416, 423, 475, 483, 512, 515, 519, 525, 526, 528, 529, 534, 536, 537, 542, 546, 548, 550, 552, 562, 566, 567, 584, 589, 590, 603, 613, 618, 619, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 650, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 714, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 766, 767, 774, 779, 782, 783, 784, 791, 795, 798, 802, 808, 813, 814, 815, 816, 817, 818, 822, 823, 826, 828, 833, 835, 836, 838, 840, 842, 843, 848, 850, 854, 855, 856, 861], "altern": [22, 32, 42, 53, 76, 81, 93, 94, 329, 337, 338, 342, 344, 345, 346, 347, 349, 350, 351, 355, 356, 366, 802, 808, 809, 817, 831, 843, 864], "dummi": [22, 23, 32, 33, 34, 40, 810], "assum": [22, 23, 32, 33, 34, 49, 52, 53, 54, 57, 58, 59, 75, 76, 77, 80, 81, 82, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 308, 324, 330, 331, 333, 336, 353, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 435, 437, 475, 483, 512, 515, 542, 546, 548, 550, 559, 589, 613, 618, 619, 621, 623, 624, 625, 626, 627, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 782, 795, 802, 809, 814, 816, 819, 820, 823, 833, 835, 838, 842, 843, 846], "201733": 22, "slowli": [22, 32], "norm": [22, 32, 33, 53, 54, 58, 76, 77, 81, 92, 93, 369, 370, 390, 391, 395, 396, 397, 400, 401, 402, 412, 413, 419, 423, 494, 495, 497, 530, 531, 552, 623, 626, 668, 684, 727, 782, 786, 836], "slow": [22, 32, 804, 809, 817], "34431235": [22, 23], "51129461": [22, 23], "06686894": [22, 23], "36452447": [22, 23], "98795534": [22, 23], "15493582": [22, 23], "91630631": [22, 23], "41939619": [22, 23], "78909753": [22, 23], "19475674": [22, 23], "norm_trac": 22, "float64": [22, 23, 50, 53, 62, 66, 72, 73, 75, 76, 77, 85, 89, 122, 130, 131, 148, 151, 155, 156, 161, 162, 165, 166, 171, 172, 176, 178, 179, 185, 188, 270, 340, 366, 371, 381, 443, 448, 512, 561, 618, 619, 623, 626, 632, 662, 663, 668, 684, 730, 731, 748, 763, 766, 767, 820, 833, 835], "norm_tran": [22, 32], "know": [22, 23, 32, 33, 34, 64, 634, 739, 740, 741, 742, 804, 808, 810, 821, 829, 833, 835, 838, 852, 856, 862], "07": [23, 41, 43, 55, 59, 75, 78, 82, 85, 224, 257, 260, 261, 280, 369, 400, 594, 604, 605, 607, 608, 609, 610, 621, 623, 624, 627, 687, 688, 730, 783, 786, 844], "981554": 23, "happen": [23, 27, 28, 288, 621, 802, 809, 810, 811, 821, 831, 835, 843, 852, 854, 855], "wherea": [23, 34, 76, 369, 414, 810, 815, 818, 820, 821, 822, 827, 828, 835, 845, 858], "subtract": [23, 27, 28, 52, 75, 98, 99, 130, 372, 475, 618, 621, 815, 818, 822], "begin": [23, 53, 76, 280, 371, 372, 443, 459, 475, 476, 477, 478, 479, 621, 630, 708, 719, 766, 809, 814, 819, 833], "filelock": [24, 41], "extens": [24, 41, 52, 58, 75, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 330, 331, 333, 366, 369, 372, 381, 412, 483, 512, 618, 619, 621, 626, 628, 633, 634, 635, 636, 637, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 690, 692, 693, 694, 696, 697, 699, 700, 704, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 807, 809, 810, 823, 825, 826, 835, 858, 861, 868], "sympi": [24, 851], "fsspec": [24, 41], "mpmath": 24, "scenario": [24, 820, 830], "often": [24, 53, 371, 443, 807, 814, 824, 827, 828, 832, 835, 846, 852, 862, 865, 868], "fortun": [24, 25, 814], "everyth": [24, 42, 795, 802, 808, 809, 810, 811, 813, 819, 822, 831, 832, 833, 835, 841, 846, 847, 852], "practic": [24, 810, 816, 819, 832, 834, 864], "specifi": [24, 25, 27, 28, 32, 33, 34, 45, 47, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 73, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 126, 131, 133, 138, 141, 142, 144, 148, 150, 197, 202, 204, 208, 209, 210, 278, 287, 291, 295, 296, 298, 324, 329, 345, 350, 361, 363, 366, 369, 370, 371, 372, 376, 381, 387, 388, 389, 391, 397, 402, 412, 413, 414, 415, 423, 433, 435, 440, 443, 447, 448, 449, 451, 465, 468, 477, 478, 480, 481, 483, 499, 510, 512, 513, 514, 517, 518, 522, 525, 542, 543, 545, 547, 548, 561, 563, 571, 603, 615, 618, 619, 620, 621, 623, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 637, 650, 652, 655, 657, 659, 660, 662, 663, 668, 676, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 697, 699, 700, 703, 704, 712, 713, 715, 716, 723, 724, 725, 726, 729, 730, 731, 733, 734, 735, 737, 740, 741, 742, 743, 747, 748, 749, 753, 755, 757, 758, 766, 769, 778, 782, 783, 784, 796, 800, 809, 813, 817, 820, 821, 827, 828, 829, 831, 832, 833, 835, 840, 843, 844, 854, 855, 856, 867], "everi": [24, 27, 28, 33, 41, 49, 53, 54, 76, 77, 131, 132, 296, 330, 331, 343, 361, 366, 369, 372, 405, 406, 407, 414, 488, 524, 618, 623, 808, 810, 814, 816, 817, 819, 820, 822, 826, 827, 828, 829, 831, 832, 833, 835, 840, 842, 844, 854, 855, 856, 861], "jax_kornia": [24, 27, 28, 802, 855], "though": [24, 807, 808, 810, 820, 821, 823, 828, 831, 832, 838, 843, 846], "000000000034": [24, 27, 28, 802, 855], "raw_img": [24, 27, 28, 802, 855], "enhanc": [24, 27, 28, 802, 834, 855], "sharp": [24, 27, 28, 802], "prefer": [24, 27, 28, 243, 621, 802, 809, 818, 824, 825, 829, 832, 847, 861], "leverag": [24, 27, 28, 802, 809, 831, 855, 859, 861], "whole": [25, 53, 76, 372, 375, 482, 494, 495, 497, 810, 817, 826], "full": [25, 53, 58, 76, 80, 81, 93, 94, 96, 161, 248, 256, 318, 319, 320, 321, 322, 363, 370, 371, 372, 440, 441, 447, 448, 476, 479, 569, 578, 592, 600, 618, 619, 621, 623, 625, 626, 640, 642, 643, 644, 646, 670, 674, 676, 677, 767, 774, 802, 809, 810, 817, 820, 823, 824, 827, 828, 832, 835, 838, 840, 846, 851, 852, 859, 861, 867], "advantag": [25, 27, 28, 802, 809, 810, 820, 831, 832, 847, 855, 861], "complex": [25, 27, 28, 41, 47, 52, 53, 58, 66, 69, 73, 75, 76, 81, 89, 106, 107, 108, 109, 110, 111, 112, 113, 114, 138, 139, 154, 168, 177, 183, 216, 217, 218, 219, 220, 221, 222, 225, 233, 234, 236, 237, 239, 241, 249, 250, 251, 252, 253, 257, 258, 259, 260, 269, 271, 272, 274, 276, 279, 280, 281, 282, 283, 286, 287, 291, 295, 296, 298, 333, 338, 361, 366, 369, 370, 381, 391, 402, 412, 413, 417, 422, 423, 424, 433, 435, 520, 521, 581, 582, 615, 618, 619, 621, 623, 626, 633, 636, 661, 662, 663, 668, 675, 677, 679, 681, 684, 737, 752, 753, 755, 767, 778, 796, 805, 808, 811, 817, 820, 822, 829, 832, 835, 836, 838, 843, 844, 845, 846, 848, 855, 857, 859, 861, 863, 867, 868], "neccessari": 25, "set_random_se": [25, 44], "manual_se": 25, "301436": 25, "_c": 25, "0x7f252c392390": 25, "convolut": [25, 53, 57, 76, 80, 369, 389, 407, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 768, 782, 800, 855, 859, 861], "flatten": [25, 27, 28, 41, 43, 46, 53, 54, 58, 60, 63, 64, 76, 77, 81, 83, 86, 87, 335, 350, 366, 370, 372, 381, 420, 464, 474, 478, 483, 484, 488, 510, 517, 518, 519, 520, 521, 522, 535, 539, 623, 626, 628, 633, 634, 664, 672, 684, 690, 695, 697, 734, 735, 739, 740, 741, 742, 761, 763, 802, 831, 838], "keyword": [25, 27, 28, 43, 45, 48, 49, 53, 70, 76, 99, 135, 270, 369, 372, 381, 416, 475, 512, 526, 529, 562, 590, 618, 621, 623, 626, 630, 636, 678, 714, 755, 761, 763, 767, 783, 784, 795, 808, 815, 818, 820, 821, 829, 831, 832, 833, 835, 836, 838, 843, 854, 855, 856], "input_arrai": [25, 27, 28, 831], "torch_model": [25, 27, 28, 45], "159": [25, 69, 106, 615, 625, 649], "state_upd": 25, "properti": [25, 70, 93, 94, 95, 96, 97, 98, 102, 784, 786, 814, 818, 828, 833, 835, 842, 843, 844, 867], "_transpil": 25, "thank": [25, 843, 851], "fledg": [25, 809, 840, 841], "output_arrai": [25, 27, 28, 53, 445], "0893": 25, "1504": 25, "1372": 25, "0991": 25, "0867": 25, "0851": 25, "0911": 25, "0804": 25, "0926": 25, "0881": 25, "softmaxbackward0": 25, "furthermor": 25, "relat": [25, 243, 621, 802, 804, 807, 808, 809, 810, 817, 824, 832, 835, 836, 837, 838, 855, 864], "interest": [25, 27, 39, 236, 269, 621, 808, 810], "continu": [25, 27, 28, 43, 121, 283, 291, 361, 617, 621, 802, 807, 808, 809, 813, 814, 825, 831, 834, 835, 846, 851, 852, 861], "regress": [26, 861, 868], "checkout": [27, 42, 810, 814, 835], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 27, "theoret": 27, "aspect": [27, 28, 803, 830, 843, 861], "switch": [27, 39, 774, 816, 824, 828, 829, 868], "easiest": [27, 802, 804, 809, 847], "defer": [27, 28, 808, 815, 820, 821, 828, 831, 832, 835, 867], "similarli": [27, 40, 135, 143, 219, 323, 330, 331, 363, 366, 618, 621, 816, 820, 832, 838, 842, 867], "obtain": [27, 28, 46, 53, 76, 314, 363, 369, 408, 625, 652, 768, 832, 854], "essenc": [27, 862, 867], "becom": [27, 53, 76, 93, 340, 366, 372, 455, 628, 689, 791, 810, 811, 818, 820, 822, 824, 831, 846, 850, 852, 854], "regardless": [27, 28, 39, 70, 803, 820, 824, 842, 845, 852], "being": [27, 28, 39, 53, 70, 76, 91, 98, 102, 122, 370, 372, 431, 459, 475, 576, 618, 623, 625, 626, 650, 663, 763, 769, 781, 802, 809, 810, 814, 815, 816, 818, 820, 821, 822, 825, 827, 829, 831, 832, 833, 835, 836, 838, 840, 843, 846, 851, 852, 857, 859, 860, 861, 862, 867, 868], "slide": [27, 53, 57, 76, 80, 369, 387, 388, 389, 405, 406, 407, 408, 411, 415, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 782], "A": [27, 28, 42, 49, 50, 53, 54, 60, 62, 66, 67, 70, 73, 75, 76, 77, 80, 81, 83, 85, 87, 90, 93, 94, 99, 118, 119, 121, 128, 136, 143, 149, 190, 209, 271, 273, 277, 308, 319, 323, 325, 326, 327, 329, 342, 345, 349, 350, 363, 366, 369, 370, 371, 372, 375, 376, 381, 384, 397, 411, 414, 416, 423, 434, 437, 445, 449, 460, 463, 481, 485, 486, 491, 492, 493, 494, 498, 499, 500, 501, 502, 510, 519, 522, 527, 529, 538, 547, 550, 551, 581, 582, 583, 586, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 630, 632, 636, 637, 648, 652, 660, 662, 665, 666, 671, 672, 676, 677, 689, 692, 694, 698, 700, 708, 711, 713, 715, 716, 717, 718, 719, 723, 724, 725, 726, 728, 729, 730, 731, 733, 739, 749, 757, 758, 761, 763, 764, 766, 767, 768, 769, 774, 781, 796, 800, 802, 807, 808, 809, 813, 818, 820, 821, 824, 827, 828, 832, 833, 835, 840, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 861, 862], "regressor": [27, 28, 802], "input_dim": [27, 28, 42, 802], "output_dim": [27, 28, 42, 802], "linear0": [27, 28, 39, 802, 843, 844], "linear1": [27, 28, 39, 802, 843, 844], "instanti": [27, 28, 774, 823], "adam": [27, 28, 39, 43, 55, 78, 526, 604, 605, 610, 623, 624, 786, 802, 843, 844, 845, 861], "n_training_exampl": [27, 28, 802], "2000": [27, 28, 76, 309, 363, 802], "random_norm": [27, 28, 57, 58, 62, 80, 81, 85, 535, 623, 625, 626, 632, 640, 642, 643, 644, 646, 647, 651, 677, 802], "linspac": [27, 28, 49, 72, 122, 618, 802, 827, 838, 840, 868], "loss_fn": [27, 28, 39, 41, 43, 802, 843, 844, 845], "pred": [27, 28, 42, 43, 53, 59, 76, 82, 371, 444, 447, 627, 686, 687, 688, 802, 818, 828, 831], "epoch": [27, 28, 41, 43, 802], "loss": [27, 28, 41, 43, 53, 76, 93, 443, 444, 445, 446, 447, 448, 449, 450, 575, 597, 623, 686, 687, 688, 802, 819, 820, 828, 832, 836, 837, 843, 844, 845, 861, 868], "gradient": [27, 28, 41, 43, 53, 76, 93, 209, 358, 366, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 620, 629, 705, 706, 707, 763, 774, 786, 802, 813, 836, 843, 844, 846, 861], "grad": [27, 28, 39, 43, 604, 624, 786, 802, 830, 843, 844, 845], "execute_with_gradi": [27, 28, 39, 43, 624, 802, 843, 844, 845, 846], "lambda": [27, 28, 44, 46, 76, 119, 121, 293, 302, 534, 606, 607, 609, 614, 617, 623, 624, 626, 630, 662, 715, 716, 720, 802, 808, 828, 829, 830, 833, 838, 840, 843], "2d": [27, 28, 43, 53, 76, 93, 308, 363, 369, 370, 372, 381, 384, 385, 392, 393, 433, 440, 454, 464, 512, 782, 800, 802, 832, 838], "5f": [27, 28, 802], "nonetheless": [27, 28], "slight": [27, 28, 820, 835, 844], "introduc": [27, 28, 243, 621, 628, 634, 697, 739, 808, 818, 819, 820, 829, 833, 835, 838, 843, 850], "address": [27, 28, 53, 54, 76, 372, 483, 588, 623, 808, 810, 814, 815, 827, 834, 840, 852, 857, 859, 861, 867], "extract": [27, 28, 35, 42, 53, 76, 94, 372, 458, 484, 832, 834, 836, 857, 861, 862, 867], "gc": [27, 28, 547, 623], "decompos": [27, 28, 53, 76, 93, 96, 318, 319, 320, 321, 322, 342, 349, 363, 366, 370, 431, 436, 439, 442, 832, 845], "said": [27, 28, 768, 836, 852, 854], "otherwis": [27, 28, 45, 48, 49, 50, 52, 53, 54, 57, 58, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 122, 124, 125, 130, 132, 133, 134, 137, 139, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 167, 171, 175, 176, 192, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 304, 305, 306, 308, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 335, 336, 337, 344, 345, 351, 353, 355, 356, 357, 361, 363, 366, 369, 370, 375, 387, 388, 389, 392, 393, 394, 412, 425, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 461, 463, 465, 466, 467, 474, 481, 483, 484, 485, 489, 491, 493, 494, 495, 497, 499, 511, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 559, 566, 567, 581, 582, 584, 586, 588, 589, 590, 602, 606, 608, 613, 617, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 633, 634, 635, 636, 637, 639, 640, 641, 642, 648, 649, 650, 652, 655, 656, 657, 658, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 677, 681, 683, 684, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 721, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 766, 767, 782, 784, 785, 791, 802, 810, 815, 818, 820, 821, 822, 828, 829, 831, 835, 840, 847, 854, 855], "x0": [27, 28, 46, 77, 527, 623, 822], "normalize_trac": [27, 28], "html": [27, 28, 42, 52, 53, 75, 76, 143, 151, 239, 249, 250, 265, 323, 330, 331, 363, 366, 369, 372, 381, 412, 483, 512, 618, 619, 621, 626, 628, 636, 675, 676, 704, 754, 802, 823, 851], "fname": [27, 28, 44, 46, 784, 843], "anticip": [27, 28], "addition": [27, 28, 818, 831, 832, 867], "backend_compil": [27, 28], "normalize_native_comp": [27, 28], "return_backend_compiled_fn": 27, "immedi": [27, 28, 800, 808, 809], "built": [27, 28, 33, 41, 43, 46, 122, 618, 782, 783, 784, 802, 809, 810, 817, 818, 835, 841, 847, 854, 860, 861, 865], "summar": [27, 28, 93, 835], "eager_graph": [27, 28, 802, 854, 855], "lazy_graph": [27, 28, 802, 854, 855], "codebas": [27, 28, 207, 208, 620, 803, 805, 813, 820, 826, 831, 832, 834, 835, 836, 839, 852], "thought": [27, 28, 809, 810, 827, 851, 859], "research": [27, 28, 41, 802, 850, 855, 861, 868], "wa": [27, 28, 33, 42, 53, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 352, 353, 355, 356, 357, 363, 366, 370, 392, 393, 394, 412, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 481, 483, 484, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 590, 602, 608, 613, 621, 623, 630, 636, 637, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 791, 802, 804, 810, 814, 816, 817, 819, 822, 828, 830, 832, 840, 842, 851, 854, 855, 860, 861, 863], "matter": [27, 28, 33, 822, 850], "haven": [27, 28, 33, 847, 861], "jax_out": [27, 28], "ideal": [27, 28, 819, 820, 832, 838, 843], "But": [27, 28, 768, 818, 819, 823, 826, 829, 838, 845], "bring": [27, 28, 814, 834, 835, 840, 841, 848, 851], "wise": [27, 47, 52, 53, 58, 69, 75, 76, 81, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 277, 278, 285, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 304, 305, 306, 329, 332, 337, 339, 340, 341, 344, 345, 346, 347, 351, 352, 355, 356, 361, 366, 369, 370, 372, 392, 393, 394, 421, 428, 462, 469, 471, 472, 490, 615, 621, 628, 657, 689, 786, 838], "vision": [27, 28, 46, 857, 867], "worth": [27, 28], "differenti": [27, 28, 291, 359, 360, 361, 368, 861], "chosen": [27, 28, 46, 96, 122, 224, 618, 621, 633, 738, 808, 819, 832], "plai": [27, 28, 371, 447, 802, 805, 809, 811, 815, 821, 825, 832, 835, 845, 861, 864], "role": [27, 28, 802, 805, 810, 811, 821, 832, 841, 862, 864, 868], "dl": [27, 28], "cnn": [27, 28, 861], "effortlessli": [27, 28], "previous": [27, 28, 592, 623, 791, 808, 809, 816, 828, 830, 835, 840], "pre": [27, 28, 802, 806, 808, 834, 835, 845, 846, 847, 861], "default_devic": [27, 28, 202, 205, 206, 207, 213, 214, 620, 821, 824, 825], "as_n": [27, 28, 50, 51, 70, 73, 74, 154, 155, 156, 157, 158, 159, 165, 192, 193, 205, 619, 620, 820], "certainli": [27, 28, 802, 851, 867], "upon": [27, 28, 45, 800, 810, 811, 822, 831, 835, 838, 846, 860, 861], "unnecessari": [27, 28, 832], "extend": [27, 28, 53, 76, 372, 381, 475, 515, 816, 817, 820, 823, 824, 827, 832, 836, 846, 858, 861, 867], "infrastructur": [27, 28, 802, 857, 863, 864], "least": [27, 52, 53, 58, 75, 76, 236, 254, 269, 369, 372, 381, 396, 401, 453, 454, 455, 464, 466, 512, 621, 626, 633, 667, 737, 802, 810, 815, 819, 820, 821, 822, 828, 831, 835, 855], "coco": 27, "seamlessli": [28, 835], "benefit": [28, 802, 809, 815, 818, 831, 838, 842, 843, 846, 851, 852, 859, 863, 866], "through": [28, 33, 41, 53, 76, 96, 224, 381, 518, 519, 621, 630, 711, 717, 784, 795, 802, 803, 806, 807, 808, 810, 811, 813, 816, 817, 818, 819, 821, 822, 824, 825, 826, 828, 829, 831, 832, 833, 835, 837, 838, 839, 840, 843, 844, 845, 854, 859, 861, 862, 863], "therefor": [28, 33, 49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 323, 324, 330, 331, 333, 336, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 468, 475, 476, 478, 483, 487, 512, 515, 519, 528, 536, 537, 542, 546, 548, 550, 552, 566, 584, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 808, 810, 814, 815, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 832, 833, 835, 836, 838, 840, 842, 844, 846, 850, 858, 861, 867], "wide": [28, 802, 810, 835, 859, 861], "prepar": [28, 41, 43, 46, 802, 819], "plenti": 28, "resourc": [28, 803, 808, 809, 819], "visit": [28, 808, 809, 810, 819], "page": [28, 802, 808, 809, 810, 812, 817, 819, 825, 841, 842, 845, 847, 856], "newli": [29, 30, 42, 44, 50, 73, 148, 529, 619, 623, 810, 819, 831, 835], "randon": [29, 30, 32, 33, 34], "mean_": 29, "std_": 29, "detect": [29, 33, 52, 70, 75, 251, 621, 630, 708, 719, 808, 809, 816, 818, 819, 826, 835, 843, 844], "inspect": [29, 33, 525, 623], "__": [29, 30, 31, 32, 33, 34, 70, 822, 843], "exhibit": [30, 867], "via": [30, 33, 243, 370, 372, 436, 439, 442, 483, 621, 630, 718, 719, 810, 814, 818, 820, 821, 831, 836, 838, 840, 842, 843, 861], "script": [30, 802, 809, 810, 814, 819, 822, 840, 846, 861], "comp": 30, "low_level": 30, "chain": [30, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 392, 393, 394, 412, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 481, 483, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 629, 630, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 705, 706, 710, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 787, 815, 818, 830, 832, 844, 845, 846, 861], "un": [30, 166, 619, 820, 840], "partial_comp": 30, "time_funct": 30, "slowest": [30, 53, 60, 76, 83, 372, 465, 628, 696], "express": [30, 52, 53, 75, 76, 94, 217, 221, 223, 224, 233, 235, 275, 281, 286, 353, 366, 621, 788, 796, 823, 832, 840, 845, 861, 862], "fastest": [30, 53, 60, 76, 83, 370, 372, 434, 465, 628, 696], "maxim": [30, 828, 831, 840, 858, 859, 863, 864, 865], "conclud": [31, 836], "collect": [31, 41, 43, 45, 46, 48, 70, 71, 615, 620, 623, 624, 625, 627, 630, 631, 632, 721, 778, 782, 783, 784, 785, 786, 809, 819, 824, 825, 829, 830, 833, 835, 859, 861, 864], "norm_comp": [32, 33], "global": [32, 33, 43, 54, 70, 77, 99, 154, 155, 156, 157, 158, 207, 208, 209, 572, 573, 576, 581, 582, 594, 595, 598, 619, 620, 623, 774, 785, 791, 809, 815, 816, 819, 820, 821, 824, 828, 832, 840, 861], "approach": [32, 806, 808, 809, 810, 815, 818, 820, 821, 825, 828, 832, 835, 836, 838, 842, 843, 846, 858, 865, 867], "b": [33, 47, 52, 53, 54, 57, 58, 66, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 97, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 125, 130, 131, 132, 134, 137, 139, 145, 148, 149, 150, 151, 159, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 325, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 366, 369, 370, 371, 372, 376, 379, 381, 387, 388, 389, 390, 392, 393, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 418, 421, 423, 425, 429, 434, 437, 442, 443, 444, 446, 447, 448, 449, 453, 454, 455, 456, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 474, 475, 481, 483, 484, 485, 486, 489, 490, 495, 497, 499, 500, 502, 503, 505, 512, 513, 514, 515, 517, 519, 522, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 559, 566, 567, 581, 582, 584, 588, 589, 602, 604, 605, 606, 608, 610, 611, 612, 613, 615, 618, 619, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 655, 656, 657, 658, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 715, 716, 717, 719, 720, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 795, 796, 800, 802, 803, 806, 810, 813, 814, 816, 818, 819, 822, 825, 828, 830, 833, 839, 840, 841, 843, 844, 845, 849, 852, 854, 857], "option": [33, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 164, 166, 176, 188, 192, 204, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417, 419, 420, 421, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 533, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 558, 563, 566, 567, 571, 581, 582, 584, 586, 588, 589, 590, 602, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 719, 720, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 763, 767, 774, 778, 779, 781, 782, 784, 786, 787, 795, 800, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 835, 836, 838, 840, 845, 846, 854, 855, 856, 861, 867], "prioriti": [33, 70, 791, 805, 808, 810, 811, 821, 831], "normalize_via_oper": 33, "determin": [33, 52, 53, 58, 60, 64, 67, 70, 75, 76, 77, 81, 88, 90, 93, 96, 98, 99, 128, 151, 153, 160, 166, 167, 168, 169, 171, 172, 173, 188, 198, 200, 201, 212, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 299, 303, 348, 353, 361, 366, 369, 370, 371, 372, 381, 404, 412, 423, 443, 444, 483, 512, 524, 527, 548, 549, 553, 554, 555, 556, 557, 558, 584, 602, 618, 619, 620, 621, 623, 626, 628, 629, 634, 637, 656, 657, 658, 660, 664, 665, 667, 669, 670, 672, 673, 675, 676, 681, 683, 684, 690, 705, 706, 707, 739, 740, 741, 742, 743, 757, 758, 768, 774, 781, 785, 818, 820, 821, 823, 828, 832, 835, 837, 838, 850], "think": [33, 808, 810, 819, 822, 838, 862], "uniqu": [33, 43, 53, 54, 64, 76, 77, 87, 369, 370, 372, 416, 437, 474, 475, 488, 559, 623, 629, 630, 634, 705, 706, 707, 710, 714, 739, 740, 741, 742, 768, 802, 814, 818, 828, 832, 833, 834, 838, 846, 850, 864], "rule": [33, 50, 52, 53, 58, 73, 75, 76, 81, 148, 151, 174, 175, 176, 225, 236, 269, 271, 278, 280, 288, 290, 369, 372, 381, 412, 463, 512, 619, 621, 626, 628, 656, 657, 664, 669, 672, 676, 690, 768, 795, 814, 815, 818, 819, 820, 822, 826, 827, 828, 830, 835, 838, 862], "broadcast": [33, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 324, 330, 331, 332, 333, 334, 335, 338, 340, 342, 344, 346, 347, 348, 349, 353, 361, 363, 366, 369, 370, 371, 372, 375, 376, 381, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 401, 402, 404, 405, 406, 407, 410, 412, 417, 419, 420, 428, 429, 432, 433, 435, 444, 445, 446, 447, 449, 450, 456, 460, 463, 468, 476, 477, 478, 479, 481, 483, 485, 487, 491, 494, 495, 497, 498, 499, 501, 502, 512, 513, 514, 515, 518, 519, 520, 521, 522, 530, 531, 535, 536, 537, 542, 543, 552, 566, 567, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 676, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 742, 743, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 768, 795, 818, 820, 822, 823, 824, 835, 836, 840], "elementwis": [33, 53, 61, 76, 84, 295, 297, 356, 361, 626, 631, 682, 727, 828, 836, 840], "must": [33, 41, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 320, 321, 324, 325, 326, 327, 330, 331, 332, 333, 334, 336, 338, 340, 342, 344, 346, 347, 348, 349, 353, 356, 361, 363, 366, 369, 370, 371, 372, 375, 376, 379, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 410, 412, 413, 415, 417, 419, 420, 422, 428, 429, 432, 433, 434, 435, 440, 444, 445, 446, 447, 449, 450, 453, 454, 455, 460, 461, 463, 465, 466, 467, 468, 470, 474, 476, 477, 478, 479, 481, 483, 484, 485, 487, 489, 494, 495, 497, 498, 499, 501, 502, 505, 512, 513, 514, 515, 522, 530, 531, 535, 536, 537, 542, 543, 545, 552, 566, 567, 603, 604, 605, 608, 610, 611, 612, 613, 615, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 781, 782, 786, 788, 807, 808, 809, 810, 814, 815, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 832, 835, 836, 837, 838, 840, 844, 845, 850, 852, 855, 856, 862, 868], "taken": [33, 53, 58, 76, 81, 336, 366, 369, 413, 626, 660, 681, 808, 819, 832, 836, 845, 862], "account": [33, 43, 45, 53, 60, 76, 83, 283, 372, 465, 621, 628, 696, 781, 795, 809, 819, 823, 832, 836, 854], "rather": [33, 54, 70, 77, 122, 209, 554, 555, 558, 618, 620, 623, 806, 810, 814, 818, 820, 823, 825, 832, 833, 835, 836, 845, 846, 851, 857, 860, 861], "fact": [33, 93, 810, 814, 819, 832, 835, 840, 843], "consum": [33, 763, 818, 819, 827, 833, 835], "thrown": [33, 552, 623, 809, 815, 821, 824, 826, 846], "doesn": [33, 552, 570, 623, 761, 782, 808, 809, 816, 818, 819, 820, 821, 822, 825, 826, 828, 830, 835, 838, 840, 846, 854, 859], "consider": [33, 808, 822, 827, 838, 850, 858, 859], "effect": [33, 49, 53, 55, 66, 76, 78, 89, 135, 371, 404, 447, 604, 612, 618, 624, 625, 636, 652, 754, 756, 766, 769, 808, 815, 818, 819, 823, 827, 831, 833, 838, 846, 851], "explain": [33, 53, 76, 369, 402, 413, 802, 808, 809, 810, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 836, 838, 840, 841, 842, 843, 844, 845, 857, 864, 867], "necessari": [33, 49, 53, 72, 76, 83, 124, 236, 269, 371, 372, 443, 453, 454, 455, 461, 463, 464, 465, 466, 467, 474, 489, 575, 597, 621, 623, 692, 693, 694, 696, 698, 699, 701, 703, 802, 808, 809, 815, 816, 818, 820, 822, 831, 832, 835, 837, 838, 854, 855], "standalon": [34, 808, 815, 835, 848, 857, 862, 867, 868], "dynam": [34, 628, 696, 784, 791, 813, 819, 820, 821, 831, 832, 837, 840, 854, 861, 865], "static": [34, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 102, 103, 125, 314, 369, 389, 402, 407, 416, 436, 442, 481, 492, 584, 618, 625, 652, 672, 779, 784, 832, 837, 846, 860, 861, 862], "flow": [35, 818, 854, 861, 862], "statement": [35, 40, 819, 831, 835, 838, 846, 854, 855], "opposit": 35, "exclud": [35, 66, 76, 89, 122, 143, 323, 363, 513, 514, 618, 632, 731, 747, 766, 769, 791, 822, 840, 854], "todo": [36, 37, 38, 43, 46, 76, 514, 808, 820, 832], "aim": [39, 806, 810, 814, 825, 829, 832, 835, 839, 859, 861, 864], "interfac": [39, 72, 130, 618, 842, 845, 846, 848, 851, 857, 858, 859, 860, 861, 865, 868], "set_framework": [39, 46], "44": [39, 43, 52, 53, 62, 75, 76, 85, 222, 269, 279, 283, 284, 334, 366, 369, 389, 390, 621, 625, 626, 630, 633, 636, 648, 672, 716, 729, 730, 738, 749], "45": [39, 41, 43, 52, 53, 66, 75, 76, 78, 80, 85, 99, 220, 224, 236, 279, 280, 338, 351, 366, 369, 381, 390, 400, 411, 513, 519, 604, 610, 621, 624, 626, 628, 636, 672, 698, 730, 731, 749, 766], "46": [39, 41, 43, 53, 62, 76, 80, 85, 134, 259, 280, 309, 363, 369, 388, 406, 407, 618, 621, 630, 709, 729, 730], "underneath": [39, 819, 859], "sai": [39, 808, 809, 812, 825, 829, 842, 852], "clip": [39, 52, 53, 60, 75, 76, 77, 83, 267, 268, 372, 458, 483, 484, 530, 531, 621, 623, 628, 818, 828, 830, 831, 843, 845], "a_min": 39, "a_max": 39, "tensforflow": 39, "clip_by_valu": [39, 845], "clip_value_min": 39, "clip_value_max": 39, "clamp": [39, 53, 76, 295, 361, 845], "min": [39, 43, 50, 53, 54, 58, 66, 73, 76, 77, 81, 89, 141, 143, 161, 164, 268, 323, 326, 331, 363, 366, 370, 372, 423, 480, 520, 536, 566, 567, 581, 618, 619, 621, 623, 626, 636, 668, 674, 677, 678, 684, 802], "max": [39, 41, 50, 53, 54, 58, 66, 73, 76, 77, 81, 89, 161, 164, 267, 330, 366, 369, 370, 371, 372, 387, 388, 389, 405, 406, 407, 408, 410, 412, 423, 443, 480, 482, 483, 530, 531, 536, 552, 566, 567, 619, 621, 623, 626, 636, 668, 670, 673, 766, 782, 786, 819, 832], "49": [39, 43, 53, 62, 76, 80, 81, 283, 369, 370, 381, 390, 400, 411, 434, 513, 621, 636, 682, 730, 749], "devicearrai": [39, 815, 832, 840, 842], "concaten": [39, 53, 54, 60, 76, 81, 372, 460, 535, 539, 623, 625, 628, 652, 672, 690, 766, 833, 838, 840, 843], "accept": [39, 48, 49, 52, 53, 58, 71, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 323, 324, 330, 331, 333, 336, 337, 358, 363, 366, 368, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 475, 483, 512, 515, 519, 528, 536, 537, 542, 546, 548, 550, 552, 566, 584, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 802, 808, 809, 810, 815, 818, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 842, 848, 859], "jax_concat": 39, "tf_concat": 39, "np_concat": 39, "torch_concat": 39, "85": [39, 47, 53, 62, 69, 75, 76, 78, 80, 85, 99, 108, 221, 230, 231, 275, 291, 292, 294, 361, 381, 513, 581, 608, 615, 621, 623, 624, 625, 632, 649, 729, 730, 731], "mymodel": [39, 843], "x_in": [39, 843, 844, 845], "reduce_mean": [39, 802, 843, 844, 845], "91": [39, 53, 80, 85, 354, 366, 411, 625, 626, 632, 636, 649, 672, 730, 749], "49040043354034424": 39, "48975786566734314": 39, "4892795979976654": 39, "48886892199516296": 39, "4884953498840332": 39, "4881443977355957": 39, "4878086447715759": 39, "48748287558555603": 39, "48716384172439575": 39, "48684927821159363": 39, "48653748631477356": 39, "48622724413871765": 39, "4859171509742737": 39, "48560672998428345": 39, "48529526591300964": 39, "4849821627140045": 39, "48466697335243225": 39, "4843493402004242": 39, "4840289056301117": 39, "4837053418159485": 39, "4833785891532898": 39, "4830484390258789": 39, "48271444439888": 39, "48237672448158264": 39, "48203518986701965": 39, "48168954253196716": 39, "4813397228717804": 39, "4809857904911041": 39, "48062753677368164": 39, "48026490211486816": 39, "479898065328598": 39, "47952669858932495": 39, "4791509211063385": 39, "4787706732749939": 39, "47838595509529114": 39, "4779967665672302": 39, "47760307788848877": 39, "4772048890590668": 39, "47680220007896423": 39, "47639501094818115": 39, "47598329186439514": 39, "4755673110485077": 39, "4751465618610382": 39, "4747215211391449": 39, "4742920398712158": 39, "47385817766189575": 39, "47341999411582947": 39, "47297725081443787": 39, "4725303053855896": 39, "47207894921302795": 39, "47162333130836487": 39, "47116345167160034": 39, "470699280500412": 39, "47023090720176697": 39, "54": [39, 50, 52, 57, 75, 76, 80, 85, 164, 233, 234, 239, 254, 283, 289, 309, 363, 369, 381, 390, 400, 513, 621, 625, 626, 636, 649, 669, 672, 729, 730, 731, 749, 819, 822], "4697583019733429": 39, "55": [39, 47, 76, 85, 114, 230, 289, 381, 513, 550, 621, 623, 626, 632, 636, 665, 672, 730, 731, 749, 814], "46928152441978455": 39, "46880054473876953": 39, "4683155119419098": 39, "58": [39, 260, 530, 621, 623], "4678264260292053": 39, "59": [39, 52, 231, 381, 513], "46733325719833374": 39, "46683603525161743": 39, "61": [39, 41, 52, 53, 58, 75, 76, 78, 82, 85, 222, 257, 259, 284, 390, 604, 621, 624, 625, 626, 627, 647, 664, 686, 688, 731, 825], "4663347601890564": 39, "4658295214176178": 39, "465320348739624": 39, "4648073613643646": 39, "46429020166397095": 39, "4637692868709564": 39, "46324464678764343": 39, "4627160429954529": 39, "4621836841106415": 39, "4616474211215973": 39, "71": [39, 52, 75, 80, 235, 275, 411, 621], "46110764145851135": 39, "72": [39, 53, 62, 76, 78, 241, 343, 366, 369, 390, 400, 608, 621, 624, 626, 636, 672, 730, 749], "460563987493515": 39, "4600166976451874": 39, "74": [39, 41, 52, 85, 231, 261, 621, 626, 669], "45946577191352844": 39, "45891112089157104": 39, "45835286378860474": 39, "4577910006046295": 39, "78": [39, 55, 280, 610, 621, 624, 626, 632, 636, 672, 730, 749], "45722562074661255": 39, "79": [39, 41, 53, 54, 76, 77, 80, 85, 98, 236, 369, 390, 400, 411, 530, 531, 621, 623, 731], "45665669441223145": 39, "80": [39, 53, 76, 343, 366, 370, 381, 434, 513, 626, 630, 636, 672, 719, 749, 851], "4560841917991638": 39, "81": [39, 43, 52, 58, 73, 75, 81, 85, 164, 234, 259, 260, 284, 381, 513, 619, 621, 626, 630, 632, 636, 664, 669, 682, 716, 731, 749, 835], "4555082619190216": 39, "45492875576019287": 39, "45434585213661194": 39, "84": [39, 57, 66, 75, 85, 164, 194, 259, 619, 620, 626, 631, 636, 649, 672, 727, 730, 731, 749], "45375964045524597": 39, "4531698524951935": 39, "4525766670703888": 39, "45198020339012146": 39, "4513803720474243": 39, "4507772624492645": 39, "4501707851886749": 39, "4495610296726227": 39, "4489481747150421": 39, "44833192229270935": 39, "4477125108242035": 39, "44708991050720215": 39, "44646409153938293": 39, "44583529233932495": 39, "98": [39, 47, 53, 55, 62, 69, 75, 78, 85, 109, 234, 282, 354, 366, 608, 615, 624, 626, 630, 633, 636, 672, 709, 720, 729, 731, 738, 749], "4452032148838043": 39, "44456806778907776": 39, "4439": 39, "selectbackward0": 39, "hope": [39, 812, 846, 851, 867], "ivy_compil": 40, "ic": 40, "produc": [40, 53, 54, 57, 76, 80, 297, 307, 310, 361, 363, 369, 416, 625, 655, 766, 796, 808, 820, 825, 826, 831, 833, 835, 836, 854, 862, 864], "numer": [40, 49, 50, 52, 53, 54, 58, 62, 63, 66, 73, 75, 76, 77, 81, 85, 86, 88, 98, 99, 135, 148, 216, 219, 232, 236, 241, 242, 243, 250, 251, 252, 255, 264, 265, 269, 271, 272, 273, 274, 278, 279, 280, 284, 285, 289, 290, 369, 371, 376, 381, 412, 445, 499, 512, 572, 573, 581, 582, 594, 595, 618, 619, 621, 623, 626, 632, 633, 636, 657, 664, 667, 672, 675, 677, 679, 681, 683, 729, 730, 731, 733, 734, 735, 737, 738, 743, 750, 753, 755, 766, 767, 768, 769, 781, 806, 820, 825, 830, 832, 833, 835, 836, 837, 838, 840, 844, 858, 861, 867], "anyth": [40, 53, 76, 381, 518, 519, 810, 824, 835, 836, 861, 862], "affect": [40, 46, 53, 371, 448, 819, 832], "intermedi": [40, 859, 860, 861, 862, 867], "variabl": [40, 42, 43, 45, 53, 54, 55, 61, 70, 76, 77, 78, 84, 118, 119, 121, 317, 363, 369, 370, 376, 381, 414, 438, 500, 511, 512, 528, 552, 553, 554, 555, 558, 584, 605, 606, 608, 610, 611, 612, 617, 623, 624, 626, 629, 631, 676, 705, 706, 707, 727, 763, 774, 779, 781, 782, 783, 784, 785, 786, 787, 810, 816, 820, 823, 827, 830, 831, 835, 836, 840, 843, 844, 845, 846, 847, 854, 862], "original_fn": 40, "100000": 40, "var": [40, 66, 89, 91, 118, 119, 120, 121, 617, 629, 636, 705, 706, 788, 809, 822, 840], "co": [40, 41, 52, 54, 75, 234, 239, 241, 282, 539, 621, 623, 807, 820, 840, 851], "sin": [40, 52, 54, 75, 234, 239, 241, 282, 539, 621, 623, 815, 840], "tan": [40, 52, 75, 526, 621, 623, 823, 827, 828, 831, 832, 840], "comp_fn": 40, "compile_graph": [40, 46], "expected_result": 40, "compiled_result": 40, "irrelev": [40, 819, 820, 822], "opeat": 40, "_layer": [40, 840], "net": [40, 45, 46, 840, 845, 851, 852], "compiled_net": 40, "proceed": 41, "latest": [41, 43, 52, 53, 75, 76, 151, 239, 249, 250, 265, 330, 331, 366, 369, 372, 381, 412, 414, 483, 512, 619, 621, 626, 628, 636, 675, 676, 704, 754, 782, 802, 808, 809, 810, 814, 816, 819, 823, 825, 836, 846, 847, 855, 866], "pypi": [41, 43, 46, 808, 809, 836, 846], "pkg": [41, 43, 46], "public": [41, 43, 46, 532, 623, 819, 830, 842, 864], "revis": [41, 43, 810], "tmp": [41, 43, 579, 601, 623], "req": [41, 43], "tabqrujw": 41, "command": [41, 43, 802, 804, 809, 814, 817, 819, 825, 826, 847], "filter": [41, 43, 45, 53, 57, 76, 80, 312, 313, 363, 369, 389, 407, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 768, 782, 802, 816, 819], "quiet": [41, 43], "commit": [41, 43, 805, 806, 808, 811, 814, 822, 834, 835], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 41, "metadata": [41, 43, 46, 831], "setup": [41, 43, 46, 809, 810, 817, 819, 825], "done": [41, 43, 46, 626, 663, 807, 808, 809, 810, 814, 817, 819, 821, 822, 825, 826, 831, 832, 835, 843, 854, 855, 861], "py3": [41, 43, 46], "whl": [41, 42, 43, 46], "cp39": [41, 43], "manylinux_2_12_x86_64": [41, 43], "manylinux2010_x86_64": [41, 43], "manylinux_2_17_x86_64": [41, 43, 809], "manylinux2014_x86_64": [41, 42, 43], "eta": [41, 43, 46], "tar": [41, 42, 43, 46], "gz": [41, 42, 43, 46], "py2": [41, 43], "495": [41, 43], "nvidia_ml_pi": [41, 43], "pypars": [41, 43, 46], "ivy_cor": [41, 43, 46, 809], "1338326": 41, "sha256": [41, 43, 46], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 41, "store": [41, 43, 46, 50, 53, 54, 58, 60, 70, 73, 76, 77, 81, 83, 150, 369, 370, 413, 421, 425, 437, 441, 539, 623, 626, 628, 681, 698, 763, 764, 782, 783, 784, 804, 810, 815, 816, 818, 823, 829, 831, 832, 833, 840, 842, 843, 844, 848, 854], "ephem": [41, 43], "njrc_e6b": 41, "2e": [41, 43], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [41, 43], "4845": [41, 43], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 41, "b6": [41, 43], "0d": [41, 43], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [41, 43], "successfulli": [41, 43, 46, 784, 805, 809, 815], "uninstal": [41, 43, 46], "found": [41, 43, 44, 46, 58, 60, 64, 70, 76, 81, 83, 87, 99, 197, 381, 460, 513, 620, 630, 660, 667, 700, 719, 739, 796, 808, 809, 810, 815, 816, 817, 818, 820, 821, 823, 826, 829, 831, 832, 847, 863], "vnd": [41, 43, 46], "json": [41, 43, 46, 70, 809, 825, 843], "psst": 41, "cv2": [41, 43, 45, 843], "pickl": [41, 42, 70, 784, 818, 843], "imageio": 41, "urllib": [41, 46], "_src": 41, "tpu": [41, 190, 196, 207, 212, 620, 800, 821, 861, 864], "back": [41, 53, 60, 76, 83, 372, 465, 486, 568, 591, 623, 625, 628, 652, 696, 781, 786, 796, 809, 815, 820, 821, 824, 829, 830, 837, 839, 846, 847, 851, 859, 863], "tf_cpp_min_log_level": 41, "info": [41, 799, 800, 802, 817, 823, 826], "mkdir": [41, 42, 43, 809, 819], "perceiv": [41, 42], "touch": 41, "io_processor": 41, "position_encod": 41, "absl": 41, "jmp": 41, "tabul": 41, "04": [41, 42, 49, 55, 69, 73, 76, 78, 108, 109, 134, 161, 241, 572, 604, 605, 610, 615, 618, 619, 621, 623, 624, 766, 809, 835], "29359": 41, "29k": 41, "67k": 41, "002": 41, "30179": 41, "47k": 41, "8107": 41, "9k": 41, "92k": 41, "itertool": 41, "preprocessor": 41, "vector": [41, 49, 53, 54, 57, 58, 76, 77, 80, 81, 93, 94, 96, 135, 359, 360, 368, 369, 370, 372, 375, 376, 381, 391, 422, 427, 433, 435, 440, 475, 477, 479, 496, 500, 512, 531, 535, 552, 603, 618, 623, 625, 626, 649, 652, 657, 661, 662, 664, 667, 672, 677, 678, 682, 683, 684, 685, 766, 782, 861], "perceiverbackbon": 41, "input_preprocessor": 41, "_input_preprocessor": 41, "_encod": 41, "__call__": [41, 763, 782, 783, 784, 802, 855], "is_train": 41, "po": [41, 796], "input_mask": 41, "network_input_is_1d": 41, "_input_is_1d": 41, "queri": [41, 42, 57, 70, 80, 194, 208, 545, 571, 620, 623, 625, 652, 655, 782, 818, 820, 825, 842, 861], "decod": [41, 843], "cross": [41, 43, 58, 59, 81, 82, 94, 626, 627, 686, 687, 688, 802, 819, 820], "attend": [41, 625, 652], "encoder_queri": 41, "latent": [41, 629, 706, 707], "imagepreprocessor": 41, "deal": [41, 784, 806, 821, 828, 830, 832, 846], "image_s": 41, "fourier_pos_config": 41, "position_encoding_typ": 41, "fourier": [41, 53, 76, 369, 391, 396, 397, 401, 402, 412, 413, 416, 539, 623], "fourier_position_encoding_kwarg": 41, "concat_po": 41, "max_resolut": 41, "num_band": [41, 54, 77, 539, 623], "sine_onli": 41, "prep_typ": 41, "spatial_downsampl": 41, "cross_attend_widening_factor": 41, "cross_attention_shape_for_attn": 41, "kv": 41, "dropout_prob": 41, "num_block": 41, "num_cross_attend_head": 41, "num_self_attend_head": 41, "num_self_attends_per_block": 41, "num_z_channel": 41, "self_attend_widening_factor": 41, "use_query_residu": 41, "z_index_dim": 41, "z_pos_enc_init_scal": 41, "perceiver_backbon": [41, 802], "perceiverencod": 41, "At": [41, 808, 809, 810, 814, 825, 835, 836, 851, 861], "almost": [41, 807, 818, 833, 841, 843, 850], "publish": [41, 802, 846, 852, 855], "thankfulli": [41, 835], "perceiver_io": [41, 42], "imagenet_fourier_position_encod": 41, "pystat": 41, "imagenet_checkpoint": 41, "rb": 41, "ckpt": 41, "read": [41, 43, 53, 60, 70, 72, 76, 83, 130, 372, 465, 618, 628, 696, 808, 809, 817, 819, 825, 835, 837, 838, 861], "09": [41, 47, 52, 78, 85, 114, 274, 284, 604, 615, 621, 624, 730], "173": [41, 58, 626, 664], "194": 41, "217": [41, 824], "125": [41, 53, 58, 81, 230, 340, 366, 371, 444, 621, 626, 682], "177": [41, 43], "193776248": 41, "185m": 41, "octet": 41, "184": 41, "80m": 41, "144mb": 41, "144": 41, "mean_rgb": 41, "stddev_rgb": 41, "im": 41, "denorm": 41, "resize_and_center_crop": 41, "crop": [41, 53, 76, 369, 397, 402, 413], "center": [41, 781], "image_height": [41, 43, 802], "image_width": [41, 802], "padded_center_crop_s": 41, "minimum": [41, 52, 53, 54, 60, 63, 66, 75, 76, 77, 83, 86, 89, 216, 244, 271, 294, 326, 330, 331, 340, 361, 363, 366, 372, 381, 475, 510, 514, 520, 572, 573, 581, 582, 594, 595, 621, 623, 628, 633, 636, 689, 735, 750, 752, 766, 768, 769, 774, 820, 837, 858, 864, 868], "offset_height": 41, "offset_width": 41, "crop_window": 41, "inter_cub": 41, "ye": [41, 846], "dummy_input": [41, 802], "transpili": 41, "torch_perceiver_backbon": 41, "quicker": 41, "params_v": [41, 802, 855], "perceiverioclassifi": [41, 802], "max_pool": [41, 802], "huggingfac": [41, 854, 855], "Of": [41, 815, 831, 832, 843, 866, 867], "cours": [41, 809, 810, 814, 815, 822, 831, 832, 838, 843, 846, 866, 867], "468": 41, "huggingface_hub": 41, "multiprocess": [41, 70, 99, 623, 843, 846], "py39": 41, "132": [41, 76], "pyarrow": 41, "xxhash": 41, "212": [41, 53, 57, 76, 353, 366, 649], "pyyaml": 41, "2021": [41, 53, 76, 356, 366, 802], "aiohttp": 41, "async": 41, "timeout": [41, 70, 99, 576, 598, 623, 837], "0a3": 41, "async_timeout": 41, "frozenlist": 41, "manylinux_2_5_x86_64": [41, 46], "manylinux1_x86_64": [41, 46], "158": 41, "attr": [41, 820], "aiosign": 41, "multidict": 41, "114": [41, 369, 390, 400], "yarl": 41, "264": [41, 630, 708], "2022": [41, 42], "pytz": 41, "2020": [41, 814, 861], "dateutil": [41, 46], "wikiart": 41, "paint": [41, 802, 840, 850], "load_dataset": [41, 854, 855], "n_sampl": [41, 53, 76, 370, 372, 418, 426, 478], "10000": [41, 43, 49, 72, 134, 618], "huggan": 41, "split": [41, 42, 43, 47, 52, 53, 60, 69, 70, 75, 76, 83, 106, 107, 108, 109, 110, 111, 112, 113, 114, 207, 208, 209, 287, 291, 295, 296, 298, 342, 349, 361, 372, 461, 470, 489, 535, 562, 615, 620, 621, 623, 625, 628, 638, 645, 646, 701, 763, 778, 782, 802, 803, 810, 819, 839, 840, 846, 868], "wiki_art": 41, "gib": 41, "unknown": [41, 766], "total": [41, 43, 53, 66, 70, 76, 89, 99, 130, 211, 325, 326, 327, 335, 363, 366, 371, 443, 618, 620, 633, 636, 737, 754, 756, 796, 802, 803, 809, 810, 820, 821, 822, 835, 838, 843, 844, 846, 852], "huggan___parquet": 41, "36ee951979f9b56c": 41, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 41, "parquet": 41, "subsequ": [41, 791, 809, 815, 819, 820, 822, 827, 828, 831, 835, 844, 862], "reus": [41, 49, 72, 76, 83, 124, 453, 454, 461, 463, 465, 466, 467, 474, 489, 692, 693, 694, 696, 698, 699, 701, 703, 824, 835, 866], "curl": [41, 809], "server": [41, 802, 809, 810, 817, 825, 847, 861], "row": [41, 53, 76, 94, 128, 143, 323, 363, 370, 372, 379, 381, 428, 438, 467, 473, 490, 505, 511, 512, 618, 626, 632, 633, 668, 676, 677, 682, 728, 737, 781], "2fwikiart": 41, "receiv": [41, 45, 93, 526, 562, 623, 629, 705, 706, 707, 782, 800, 809, 810, 820, 821, 835, 838], "xferd": 41, "averag": [41, 43, 53, 55, 59, 76, 78, 82, 369, 371, 375, 381, 383, 384, 387, 388, 389, 445, 446, 447, 448, 449, 450, 496, 512, 604, 605, 610, 624, 625, 627, 629, 652, 686, 705, 706, 781, 782], "dload": 41, "upload": [41, 835], "spent": [41, 852], "25936": 41, "278k": 41, "number": [41, 43, 44, 45, 46, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 70, 72, 73, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 93, 94, 96, 98, 99, 102, 122, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 143, 149, 154, 155, 156, 157, 158, 160, 161, 164, 167, 168, 169, 171, 173, 176, 200, 201, 202, 216, 217, 218, 219, 220, 222, 224, 225, 232, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 253, 257, 259, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 282, 283, 287, 289, 314, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 345, 350, 354, 363, 366, 369, 370, 371, 372, 375, 381, 402, 413, 416, 419, 422, 426, 427, 428, 436, 440, 442, 443, 453, 454, 455, 475, 476, 477, 478, 479, 481, 483, 485, 488, 491, 492, 493, 510, 512, 513, 514, 515, 521, 539, 546, 564, 581, 582, 589, 602, 603, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 632, 633, 634, 636, 637, 638, 645, 646, 648, 650, 652, 657, 661, 662, 663, 670, 675, 677, 681, 682, 683, 686, 689, 691, 692, 694, 695, 697, 698, 700, 702, 704, 705, 706, 707, 728, 732, 737, 739, 740, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 767, 768, 774, 781, 782, 785, 796, 800, 802, 809, 810, 818, 819, 820, 821, 822, 829, 830, 831, 835, 836, 837, 838, 840, 843, 849, 850, 854], "abstract_expression": 41, "action_paint": 41, "analytical_cub": 41, "art_nouveau": 41, "baroqu": 41, "color_field_paint": 41, "contemporary_r": 41, "cubism": 41, "early_renaiss": 41, "expression": 41, "fauvism": 41, "high_renaiss": 41, "impression": 41, "mannerism_late_renaiss": 41, "minim": [41, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 363, 369, 371, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 673, 674, 675, 677, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 796, 823, 831, 833, 838, 840, 854, 859, 867], "naive_art_primitiv": 41, "new_real": 41, "northern_renaiss": 41, "pointil": 41, "pop_art": 41, "post_impression": 41, "realism": 41, "rococo": 41, "romantic": 41, "symbol": [41, 795, 808, 809, 861, 862], "synthetic_cub": 41, "ukiyo_": 41, "custom": [41, 53, 76, 294, 306, 358, 361, 368, 766, 795, 804, 813, 819, 824, 829, 833, 835, 838, 844, 851, 861, 865, 866, 867], "hugginfac": 41, "customdataset": 41, "__len__": [41, 818], "__getitem__": [41, 70, 818], "idx": [41, 42, 43, 525, 623, 802, 821, 842], "random_split": 41, "224x224": 41, "val_siz": 41, "dataset_train": 41, "dataset_v": 41, "dataset_test": 41, "dataloader_train": 41, "batch_siz": [41, 43, 46, 53, 57, 62, 76, 80, 85, 369, 371, 387, 388, 389, 405, 406, 407, 408, 450, 625, 632, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 728, 802, 843], "dataloader_v": 41, "dataloader_test": 41, "batch": [41, 42, 43, 53, 54, 58, 70, 76, 77, 81, 207, 208, 369, 371, 375, 383, 385, 391, 404, 414, 443, 445, 491, 492, 493, 496, 539, 542, 543, 603, 620, 623, 625, 626, 629, 631, 649, 650, 651, 652, 666, 684, 705, 706, 707, 727, 766, 782, 785, 802, 818, 828, 833, 843, 859], "iter": [41, 43, 48, 53, 54, 60, 68, 70, 76, 77, 83, 91, 96, 99, 118, 209, 315, 316, 363, 369, 370, 372, 414, 427, 436, 442, 459, 475, 524, 562, 617, 620, 623, 628, 630, 691, 695, 702, 704, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 726, 795, 796, 800, 814, 816, 818, 840, 843, 852, 854], "train_featur": 41, "train_label": 41, "imshow": [41, 42], "crossentropyloss": [41, 783], "sgd": [41, 786, 861], "lr": [41, 55, 78, 526, 605, 608, 610, 611, 612, 623, 624, 786, 843, 844], "001": [41, 52, 53, 61, 73, 76, 78, 161, 259, 276, 333, 345, 366, 605, 619, 621, 624, 631, 727, 766, 843, 844], "train_step": 41, "running_loss": [41, 43, 802], "last_loss": 41, "training_load": 41, "intra": 41, "report": [41, 805, 808, 835], "zero_grad": 41, "backward": [41, 53, 67, 76, 90, 278, 369, 391, 396, 397, 401, 402, 412, 413, 621, 626, 637, 657, 683, 757, 758, 782, 800, 836, 846], "adjust": [41, 66, 89, 370, 438, 636, 754, 756, 791, 800], "999": [41, 55, 75, 78, 287, 604, 605, 610, 612, 621, 624, 786, 844], "epoch_numb": 41, "best_vloss": 41, "1_000_000": 41, "avg_loss": 41, "running_vloss": 41, "vdata": 41, "vinput": 41, "vlabel": 41, "voutput": 41, "vloss": 41, "avg_vloss": 41, "model_path": 41, "model_": 41, "state_dict": [41, 783, 784], "highest": [41, 53, 62, 76, 85, 314, 317, 363, 632, 729, 820], "energi": 41, "sum": [41, 43, 52, 53, 54, 57, 58, 59, 66, 70, 75, 76, 77, 80, 81, 82, 89, 93, 98, 99, 209, 219, 261, 285, 327, 350, 363, 366, 370, 371, 372, 375, 381, 411, 421, 443, 444, 445, 446, 447, 448, 449, 450, 480, 496, 518, 519, 536, 566, 567, 620, 621, 623, 625, 626, 627, 636, 648, 655, 668, 677, 681, 684, 686, 748, 749, 781, 783, 795, 802, 818, 820, 828, 830, 831, 832, 840, 854, 855, 856], "augment": 41, "mayb": [41, 42, 48, 802, 809, 819, 840, 842], "meta": [41, 705, 706, 707, 815, 836, 861], "finetun": 41, "deploi": [41, 802, 819, 848, 855, 859, 860, 861, 863, 867], "present": [42, 53, 66, 70, 76, 89, 333, 366, 375, 491, 492, 493, 636, 752, 808, 809, 810, 818, 820, 821, 827, 831, 840, 850, 858, 859, 868], "percieverio": 42, "ai": [42, 819, 859, 863], "contribut": [42, 53, 76, 381, 515, 807, 809, 810, 811, 812, 817, 825, 826, 832, 833, 840, 847, 854, 865], "highli": [42, 802, 808, 861], "invit": [42, 808, 811, 832, 838], "g4ar9q7dtn": 42, "step1": 42, "printf": 42, "8packag": 42, "share": [42, 70, 182, 619, 766, 767, 802, 816, 818, 822, 828, 830, 832, 833, 835, 838, 840, 851, 859, 860, 867], "googledr": 42, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 42, "file_id": 42, "drive": [42, 43], "uc": 42, "export": [42, 819, 860, 867], "tee": [42, 809], "file_id_wget_cmd": 42, "perl": 42, "pe": 42, "g": [42, 44, 45, 53, 62, 64, 66, 68, 76, 85, 91, 93, 147, 176, 189, 236, 249, 269, 276, 279, 330, 331, 366, 369, 370, 372, 376, 381, 405, 407, 442, 483, 498, 499, 500, 501, 502, 513, 514, 619, 620, 621, 626, 630, 632, 634, 636, 662, 663, 668, 675, 677, 678, 684, 711, 715, 717, 720, 725, 729, 730, 731, 739, 740, 741, 742, 747, 748, 750, 752, 753, 755, 781, 800, 803, 808, 809, 813, 814, 816, 817, 818, 830, 832, 835, 840, 846, 848, 852, 857], "uuid": 42, "anywai": [42, 815, 829, 832], "bin": [42, 53, 76, 381, 510, 515, 809, 810, 814, 818], "bash": [42, 809, 810, 814], "step2": 42, "interpret": [42, 49, 53, 72, 76, 123, 124, 130, 136, 371, 381, 445, 512, 618, 819, 862], "sudo": [42, 809], "apt": [42, 809], "yf": 42, "step3": 42, "delet": [42, 810, 819], "xvzf": 42, "rm": [42, 44, 804, 810], "step4": 42, "symlink": 42, "unzip": [42, 43], "fr": 42, "l": [42, 53, 58, 75, 81, 263, 370, 371, 422, 443, 625, 626, 652, 656, 661, 662, 663, 667, 681, 810, 813], "d": [42, 53, 54, 57, 58, 60, 72, 76, 77, 80, 81, 83, 96, 112, 134, 143, 176, 219, 236, 237, 269, 272, 323, 363, 369, 370, 372, 375, 376, 379, 387, 388, 389, 396, 401, 405, 406, 407, 408, 410, 414, 420, 434, 455, 461, 463, 466, 470, 484, 486, 489, 496, 498, 504, 527, 538, 615, 618, 619, 621, 625, 626, 628, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 659, 660, 664, 668, 672, 681, 682, 698, 711, 715, 716, 717, 720, 725, 726, 767, 796, 802, 803, 809, 813, 816, 817, 818, 825, 830, 835, 838, 843, 851, 852, 857], "ln": 42, "sf": 42, "la": 42, "step5": 42, "regular": [42, 76, 370, 381, 434, 516, 626, 666, 809, 832, 861], "step6": 42, "ipkykernel": 42, "step7": 42, "engbjapanpython3": 42, "separ": [42, 53, 54, 76, 375, 492, 539, 623, 625, 652, 809, 810, 815, 818, 819, 822, 833, 834, 835, 840, 842, 843, 862, 866], "ipykernel": 42, "reconnect": 42, "sy": 42, "oct": 42, "gcc": [42, 859, 866], "lf": 42, "upgrad": 42, "cuda11": 42, "cudnn805": 42, "cp38": [42, 46, 809], "helper": [42, 761, 763, 764, 770, 772, 773, 802, 806, 817, 820, 824, 825, 834, 843, 848], "feedforward": 42, "prenorm": 42, "perceiveriospec": 42, "fetch": [42, 547, 623, 809, 810, 814, 819], "ogbanugot": 42, "xmartlab": 42, "caffeflow": 42, "fetch_class": 42, "class_label": 42, "ground_truth": 42, "127": [42, 50, 53, 58, 73, 76, 164, 353, 366, 619, 626, 664], "path_to_imag": 42, "get_imag": 42, "ax": [42, 47, 53, 58, 60, 63, 66, 67, 69, 76, 81, 83, 86, 89, 90, 98, 102, 109, 113, 209, 330, 331, 335, 336, 350, 357, 366, 367, 369, 370, 372, 375, 381, 397, 402, 413, 437, 474, 475, 481, 494, 517, 518, 519, 520, 521, 522, 535, 603, 620, 623, 626, 628, 633, 636, 637, 657, 668, 676, 679, 680, 684, 691, 693, 694, 697, 699, 701, 704, 734, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 768, 782, 820, 822, 835, 836, 840, 842], "fig": [42, 43], "subplot": [42, 43], "spine": 42, "set_vis": 42, "right": [42, 53, 58, 70, 76, 81, 99, 116, 117, 228, 230, 283, 344, 366, 369, 370, 372, 403, 431, 437, 438, 440, 466, 535, 617, 621, 623, 626, 635, 677, 682, 745, 766, 803, 808, 809, 810, 813, 814, 822, 825, 838, 843, 854], "bottom": [42, 535, 623, 808, 809, 819, 825, 867], "tick_param": 42, "set_xticklabel": 42, "set_yticklabel": 42, "show_result": 42, "along": [42, 47, 49, 52, 53, 54, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 72, 75, 76, 77, 81, 82, 83, 85, 86, 88, 89, 90, 93, 94, 96, 109, 113, 118, 133, 134, 209, 283, 286, 288, 325, 326, 327, 330, 331, 335, 336, 350, 357, 363, 366, 367, 369, 370, 371, 372, 375, 381, 390, 396, 397, 400, 401, 402, 412, 413, 436, 447, 460, 461, 462, 464, 466, 467, 475, 480, 483, 485, 494, 495, 496, 497, 513, 514, 515, 517, 518, 519, 520, 521, 522, 535, 542, 617, 618, 620, 621, 623, 626, 627, 628, 629, 632, 633, 635, 636, 637, 657, 672, 681, 683, 684, 686, 687, 688, 690, 693, 694, 695, 697, 698, 700, 702, 703, 705, 706, 707, 733, 734, 735, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 782, 802, 808, 811, 813, 822, 831, 834, 836, 838, 840, 861], "figur": [42, 837], "figsiz": [42, 43], "listdir": [42, 43], "endswith": 42, "this_dir": 42, "dirnam": 42, "join": [42, 43, 60, 70, 76, 83, 459, 460, 628, 690, 700, 802, 811], "add_subplot": 42, "xtick": 42, "ytick": 42, "set_titl": [42, 43], "color": [42, 70, 99, 801], "green": [42, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 801, 808, 809, 810], "red": 42, "perceiver_io_img_classif": 42, "normalize_imag": 42, "batch_shap": [42, 57, 62, 72, 80, 85, 128, 137, 618, 625, 626, 632, 651, 655, 685, 728, 782, 838, 840, 842], "img_dim": 42, "queries_dim": 42, "learn_queri": 42, "load_weight": 42, "num_input_ax": 42, "network_depth": 42, "num_lat_att_per_lay": 42, "query_shap": 42, "num_fourier_freq_band": 42, "weight_fpath": 42, "pretrained_weight": 42, "isfil": 42, "noinspect": [42, 842], "pybroadexcept": 42, "from_disk_as_pickl": 42, "larg": [42, 52, 53, 75, 76, 219, 236, 243, 269, 270, 372, 381, 483, 512, 621, 626, 675, 804, 809, 810, 817, 819, 825, 843, 854, 861], "action": [42, 800, 807, 819, 822, 826, 835], "fail": [42, 761, 806, 809, 810, 814, 819, 820, 822, 826, 829, 831, 832, 833], "placehold": [42, 630, 715, 720, 725, 782, 810, 815, 827, 848], "pyunboundlocalvari": 42, "max_fourier_freq": 42, "random_uniform": [42, 46, 62, 85, 632, 821, 824, 835, 840, 844], "817437": 42, "gpu_bfc_alloc": 42, "orig_valu": 42, "tf_force_gpu_allow_growth": 42, "autograd": [42, 846], "declar": [42, 810, 834], "_3r2_73j": 43, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 43, "1297564": 43, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 43, "le3bu3_v": 43, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 43, "third": [43, 93, 94, 372, 462, 488, 626, 634, 677, 739, 817, 820, 831, 846, 860, 861, 867], "parti": [43, 817, 820, 846, 851, 860, 861, 867], "mount": [43, 804, 810], "mydriv": 43, "chdir": 43, "One": [43, 53, 54, 60, 62, 76, 77, 83, 85, 96, 372, 453, 454, 455, 458, 475, 484, 536, 623, 628, 632, 696, 729, 815, 818, 820, 822, 828, 833, 835, 840, 842, 843], "kaggl": 43, "medium": 43, "articl": [43, 802, 826], "insert": [43, 53, 63, 76, 86, 372, 450, 460, 628, 630, 633, 635, 692, 712, 713, 734, 745, 819, 826], "www": [43, 330, 331, 366], "your_kaggle_usernam": 43, "competit": 43, "digit": 43, "recogn": [43, 805, 811], "zip": [43, 840], "readabl": [43, 815, 818, 824, 826, 827, 835, 836, 842, 843], "chmod": [43, 809, 819], "recent": [43, 799, 809, 810, 835, 850, 851], "modifi": [43, 53, 70, 76, 93, 372, 381, 472, 475, 480, 519, 766, 796, 808, 809, 810, 814, 816, 817, 820, 821, 823, 825, 826, 828, 831, 833, 835, 836, 840], "forc": [43, 817, 819, 821], "archiv": [43, 809], "inflat": [43, 820], "sample_submiss": 43, "frame": [43, 53, 76, 314, 363, 369, 416, 851, 861], "later": [43, 70, 529, 623, 808, 826, 831, 835, 836, 861], "my": [43, 819], "label_df": 43, "mod_train": 43, "data_valu": 43, "test_data_valu": 43, "correct_label": 43, "train_path": 43, "str": [43, 45, 48, 49, 53, 54, 57, 58, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 130, 132, 135, 137, 139, 145, 146, 149, 151, 153, 154, 155, 156, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 176, 177, 178, 179, 180, 181, 188, 189, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 369, 370, 371, 372, 375, 381, 384, 387, 388, 389, 391, 392, 393, 394, 396, 397, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 419, 423, 436, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 458, 459, 460, 465, 481, 483, 484, 485, 486, 491, 492, 493, 494, 495, 497, 499, 501, 512, 513, 514, 515, 522, 524, 525, 527, 528, 530, 531, 533, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 563, 566, 567, 569, 570, 579, 581, 582, 584, 586, 588, 589, 602, 606, 613, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 678, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 714, 715, 720, 725, 728, 729, 730, 731, 733, 736, 739, 740, 741, 743, 747, 748, 749, 751, 753, 754, 756, 757, 758, 763, 764, 766, 767, 772, 774, 782, 784, 785, 795, 796, 800, 820, 821, 824, 828, 831, 832, 836, 840, 845, 854, 855, 856], "makedir": 43, "valid_path": 43, "28x28": 43, "pic": 43, "pictur": [43, 802, 808, 840, 850], "int8": [43, 50, 62, 72, 73, 85, 130, 157, 162, 164, 165, 169, 618, 619, 729, 766, 767, 820, 835], "new_img": [43, 45], "builder": [43, 804], "batchwis": 43, "subset": [43, 768, 815, 819, 823, 827, 830, 832, 835, 840, 861], "goe": [43, 372, 458, 813, 826, 831, 838], "seed_valu": [43, 70, 632, 732], "randomize_dataset": 43, "shuffl": [43, 53, 62, 70, 76, 85, 500, 632], "create_dataset": 43, "num_examples_per_class": 43, "img_arrai": 43, "class_nam": [43, 763], "dir": [43, 843], "img_path": 43, "imread": [43, 45, 843], "imread_grayscal": 43, "generate_batch": [43, 802], "dataset_s": [43, 802], "ivyerror": [43, 797, 802, 824], "smaller": [43, 53, 60, 66, 76, 83, 297, 329, 345, 361, 366, 369, 371, 381, 397, 402, 413, 443, 512, 513, 514, 535, 623, 628, 636, 689, 697, 747, 748, 753, 755, 802, 810, 824, 840], "yield": [43, 63, 315, 316, 363, 372, 475, 633, 738, 802, 819], "x_batch_inst": 43, "form": [43, 45, 48, 49, 53, 58, 70, 72, 81, 92, 93, 94, 123, 124, 136, 141, 142, 307, 310, 324, 333, 363, 366, 370, 372, 422, 431, 462, 471, 475, 490, 525, 585, 587, 618, 623, 625, 626, 630, 656, 658, 660, 661, 662, 663, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681, 709, 720, 766, 781, 803, 808, 809, 828, 835, 838, 844, 845, 851, 861, 862, 867], "intialis": 43, "num_epoch": [43, 802], "inherit": [43, 815, 818, 824, 842, 846, 848], "creation": [43, 53, 70, 76, 99, 817, 820, 821, 827, 829, 832, 833, 835, 836, 840, 854, 861, 863, 867], "inform": [43, 45, 50, 53, 55, 73, 78, 161, 164, 314, 363, 525, 613, 619, 623, 624, 629, 707, 800, 802, 807, 808, 809, 810, 811, 814, 818, 819, 824, 828, 829, 831, 833, 835, 864], "insid": [43, 58, 81, 99, 372, 485, 626, 670, 764, 809, 810, 815, 818, 820, 821, 825, 828, 829, 835, 836, 854, 867], "ivynet": [43, 802], "h_w": [43, 802], "input_channel": [43, 782, 802, 840, 844], "output_channel": [43, 782, 802, 844], "gelu": [43, 44, 47, 69, 615, 778, 802], "image_widht": 43, "start_dim": [43, 53, 76, 372, 465, 802], "end_dim": [43, 53, 76, 372, 465, 802], "gpu_is_avail": [43, 620, 802], "120": [43, 66, 89, 99, 626, 672, 747, 802], "model_nam": [43, 802], "__name__": [43, 44, 46, 590, 623, 802, 824], "heavi": [43, 768, 809, 832, 833, 838, 862], "lift": [43, 833, 862], "num_correct": [43, 802], "y_pred": [43, 802], "cross_entropi": [43, 59, 82, 627, 688, 802, 818, 828, 831], "epoch_loss": [43, 802], "field": [43, 58, 64, 81, 87, 370, 372, 422, 488, 626, 634, 661, 662, 674, 675, 677, 739, 740, 741, 802, 819, 859, 867], "training_accuraci": [43, 802], "train_loss": [43, 802], "train_correct": [43, 802], "train_loop": [43, 802], "posit": [43, 45, 48, 52, 53, 54, 58, 59, 60, 75, 76, 77, 81, 82, 83, 93, 128, 130, 143, 161, 216, 217, 218, 222, 225, 236, 243, 250, 251, 257, 259, 269, 270, 277, 278, 282, 283, 287, 308, 323, 329, 334, 345, 363, 366, 370, 372, 420, 438, 449, 474, 483, 529, 539, 603, 616, 618, 619, 621, 623, 626, 627, 628, 632, 633, 637, 656, 659, 681, 686, 692, 697, 732, 737, 757, 758, 763, 766, 774, 779, 783, 784, 796, 802, 808, 810, 814, 818, 832, 835, 836, 843, 854, 863], "leav": [43, 48, 53, 71, 73, 75, 76, 77, 80, 81, 83, 89, 99, 161, 164, 236, 293, 295, 296, 302, 372, 459, 460, 465, 477, 478, 479, 494, 495, 497, 513, 514, 519, 539, 586, 628, 630, 644, 655, 660, 677, 691, 695, 700, 702, 703, 708, 709, 718, 719, 720, 721, 747, 748, 795, 802, 808, 818, 819, 820, 822, 823, 827, 828, 831, 832, 835, 843, 844], "xbatch": [43, 802], "ybatch": [43, 802], "to_devic": [43, 51, 74, 192, 620, 784, 802], "entropi": [43, 59, 82, 627, 686, 687, 688, 802], "hot": [43, 49, 72, 137, 618, 802], "ybatch_encod": [43, 802], "one_hot": [43, 49, 72, 618, 802, 845], "loss_prob": [43, 802], "ret_grad_idx": [43, 606, 624, 763, 830], "xs_grad_idx": [43, 606, 624, 763, 830], "batch_loss": [43, 802], "set_descript": [43, 802], "set_postfix": [43, 802], "accuracy_percentag": [43, 802], "naverag": [43, 802], "6f": [43, 802], "_train_summari": [43, 802], "writer": [43, 802], "writerow": [43, 802], "157it": 43, "06it": 43, "475401": 43, "11it": 43, "081436": 43, "13it": 43, "0187": 43, "029279": 43, "0324": 43, "008382": 43, "07it": 43, "00456": 43, "003816": 43, "82it": 43, "00277": 43, "002179": 43, "05it": 43, "00175": 43, "001569": 43, "00147": 43, "001235": 43, "09it": 43, "00128": 43, "001005": 43, "106": 43, "10it": 43, "00112": 43, "000837": 43, "129": [43, 625, 644, 646], "12it": 43, "000989": 43, "000709": 43, "145": 43, "000873": 43, "000606": 43, "168": [43, 530, 623, 630, 708], "08it": 43, "000774": 43, "000524": 43, "000688": 43, "000455": 43, "000613": 43, "000398": 43, "000547": 43, "000350": 43, "205": 43, "000488": 43, "000308": 43, "218": 43, "000437": 43, "000273": 43, "000391": 43, "000243": 43, "238": [43, 243, 621], "98it": 43, "000351": 43, "000216": 43, "260": 43, "plot_summari": 43, "seaborn": 43, "whitegrid": 43, "ax1": 43, "ax2": 43, "nrow": 43, "ncol": 43, "fontweight": 43, "bold": 43, "set_xlabel": 43, "set_ylabel": 43, "tight_layout": 43, "savefig": 43, "summary_plot": 43, "png": [43, 45, 46, 843], "close": [43, 58, 241, 259, 279, 307, 363, 621, 626, 628, 677, 692, 806, 808, 809, 810, 811, 820, 823, 825, 832, 838, 861], "save_weight": [43, 784], "model_param": 43, "ivynet_weight": 43, "hdf5": [43, 70, 784, 843], "deitimageprocessor": 44, "tfdeitforimageclassif": 44, "tfdeitforimageclassificationwithteach": 44, "head": [44, 45, 625, 652, 782, 802, 807, 809, 819, 832], "distillation_classifi": 44, "cls_classifi": 44, "randomli": [44, 369, 392, 393, 394, 625, 648, 766, 767, 768, 769, 774, 782], "henc": [44, 64, 219, 333, 366, 621, 628, 634, 692, 739, 740, 741, 742, 791, 809, 818, 819, 820, 831, 835], "image_processor": [44, 854, 855], "facebook": 44, "distil": [44, 862], "patch16": 44, "outputs_from_original_model": 44, "predicted_class_idx": 44, "id2label": [44, 854], "architectur": [44, 802, 809, 845, 846, 859, 860, 861, 864, 865, 866], "bertforsequenceclassif": 44, "bertforpretrain": 44, "NOT": [44, 264, 621, 795, 808], "probabl": [44, 53, 57, 59, 62, 76, 80, 82, 85, 369, 371, 376, 381, 392, 393, 394, 445, 498, 512, 515, 519, 625, 627, 632, 648, 652, 655, 686, 728, 768, 781, 782, 802, 835, 847, 852], "ptarmigan": 44, "rf": [44, 810], "branch": [44, 224, 236, 239, 241, 269, 281, 282, 283, 286, 621, 809, 810, 814, 819, 826, 846, 854, 861], "moduleconvert": [44, 779, 784], "mc": 44, "from_keras_modul": [44, 779], "compiled_func": 44, "return_graph": [44, 46], "compiled_output": 44, "diverg": [44, 53, 76, 243, 371, 445, 621], "_all_funct": [44, 46], "convert_to_tensor_v2_with_dispatch": 44, "transpose_v2": 44, "convolution_v2": 44, "bias_add": 44, "binary_op_wrapp": 44, "cast": [44, 50, 52, 53, 58, 66, 73, 75, 81, 148, 151, 176, 270, 381, 513, 514, 619, 621, 626, 636, 684, 747, 748, 753, 755, 767, 828, 833, 840], "moments_v2": 44, "batch_norm": [44, 46, 53, 76, 375], "tensordot": [44, 58, 81, 626, 796, 820], "softmax_v2": 44, "_slice_help": 44, "save_to_disk": [44, 46, 784], "12265048989200113": 44, "11038777417100028": 44, "1167045795539998": 44, "ivy_api_kei": 45, "obj": [45, 123, 124, 547, 618, 623, 854, 855, 856], "combo": [45, 843], "permit": [45, 815, 827, 832, 835, 838], "usabl": [45, 827, 836], "neither": [45, 219, 236, 243, 269, 621, 626, 679, 819, 832, 838], "nor": [45, 219, 236, 243, 269, 621, 819, 832, 865], "specifc": 45, "invoc": 45, "represent": [45, 53, 54, 70, 76, 77, 99, 146, 147, 161, 164, 189, 190, 216, 219, 226, 229, 231, 236, 243, 266, 269, 271, 286, 311, 342, 346, 351, 355, 363, 366, 525, 586, 616, 619, 620, 621, 623, 766, 768, 769, 782, 820, 859, 860, 862, 866, 867], "externally_link": 45, "logo": 45, "patch": [45, 287, 621, 820, 861], "cv2_imshow": 45, "envrion": 45, "canni": 45, "original_img": 45, "fn_arg": 45, "dilate_edg": 45, "edg": [45, 53, 60, 76, 83, 314, 363, 369, 372, 381, 404, 475, 515, 628, 689, 691, 704, 769, 814, 835, 855, 861, 863, 867], "morphologi": 45, "hk_model": 45, "resnet18": [45, 46], "keras_model": 45, "count": [45, 53, 60, 64, 67, 72, 76, 83, 87, 90, 130, 202, 335, 366, 372, 381, 483, 488, 510, 515, 618, 620, 626, 628, 634, 637, 657, 683, 690, 693, 739, 740, 757, 758, 817, 818, 822, 843], "odsc": 45, "talk": [45, 866], "228": 46, "352": [46, 80, 625, 649, 824], "nvidia_ml_py3": 46, "19190": 46, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 46, "b9": 46, "b1": [46, 626, 676], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 46, "cycler": 46, "fonttool": 46, "965": 46, "pillow": 46, "kiwisolv": 46, "show_graph": [46, 784], "to_ivy_modul": [46, 779, 845], "image_dim": 46, "v0": [46, 844], "urlerror": 46, "dev_str": 46, "comp_network": 46, "time_chronolog": 46, "ret0_nc": 46, "ret1_nc": 46, "ret0_c": 46, "ret1_c": 46, "pytorch_vision_v0": 46, "distribut": [46, 53, 59, 62, 76, 82, 85, 369, 370, 371, 376, 392, 393, 394, 427, 436, 442, 445, 447, 448, 450, 498, 499, 500, 501, 502, 627, 632, 686, 687, 688, 728, 729, 730, 731, 733, 781, 782, 808, 809, 819, 821, 846, 861, 864], "distributed_c10d": 46, "262": 46, "reduce_op": 46, "deprec": 46, "reduceop": 46, "004645566477999864": 46, "0044566806820000695": 46, "attribut": [46, 70, 161, 162, 163, 164, 195, 196, 204, 540, 541, 619, 620, 623, 764, 816, 817, 818, 823, 824, 828, 829, 831, 832, 838, 841, 842, 843, 844], "definit": [46, 52, 58, 75, 81, 288, 621, 626, 656, 802, 806, 810, 815, 820, 825, 828, 842, 855], "max_pool2d": [46, 53, 76, 369, 388], "__iadd__": 46, "adaptive_avg_pool2d": [46, 53, 76, 369], "_arraywithactiv": [47, 98], "abc": [47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 102, 538, 623, 630, 726, 781, 786, 795, 796, 842], "_abc_impl": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "_abc": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "_abc_data": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "approxim": [47, 52, 53, 58, 69, 75, 76, 81, 93, 96, 106, 217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 243, 257, 258, 259, 260, 274, 281, 282, 286, 287, 288, 343, 353, 366, 371, 447, 448, 615, 621, 626, 670, 673, 778, 823, 832], "complex_mod": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 295, 296, 298, 361, 615, 621, 778, 829], "variant": [47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 369, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 604, 605, 608, 610, 611, 612, 613, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 673, 674, 675, 677, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 815, 822, 823, 838], "docstr": [47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 366, 369, 372, 381, 387, 388, 389, 390, 392, 393, 394, 396, 400, 401, 402, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 566, 567, 581, 582, 583, 584, 586, 588, 589, 602, 603, 604, 605, 608, 610, 611, 612, 613, 618, 619, 621, 623, 626, 628, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 807, 808, 813, 817, 826, 827, 828, 829, 832, 834, 836], "liter": [47, 52, 53, 58, 69, 75, 76, 81, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 295, 296, 298, 361, 369, 370, 372, 375, 390, 400, 404, 412, 427, 431, 436, 439, 442, 475, 496, 615, 621, 626, 635, 668, 684, 745, 778, 838], "magnitud": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 216, 219, 236, 243, 269, 287, 291, 295, 296, 298, 361, 615, 621, 626, 677, 678, 778, 820], "handle_complex_input": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 295, 296, 298, 361, 615, 621, 778, 829], "elementhardswish": [47, 69, 615, 778], "leaky_relu": [47, 69, 76, 291, 615, 767], "alpha": [47, 52, 53, 69, 75, 76, 103, 108, 219, 285, 291, 292, 299, 303, 309, 361, 363, 370, 375, 376, 423, 496, 499, 500, 501, 615, 621, 778, 827, 832, 833], "float": [47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 64, 66, 69, 72, 73, 75, 76, 77, 78, 80, 81, 82, 84, 85, 89, 93, 96, 98, 108, 114, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 138, 139, 144, 148, 152, 156, 161, 165, 169, 175, 176, 179, 185, 194, 203, 207, 208, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 329, 330, 331, 332, 339, 340, 345, 347, 348, 351, 352, 353, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 381, 384, 392, 393, 394, 411, 412, 419, 422, 423, 425, 436, 440, 442, 443, 444, 448, 449, 464, 482, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 512, 513, 514, 515, 520, 521, 522, 529, 530, 531, 539, 548, 572, 573, 576, 581, 582, 602, 604, 605, 608, 610, 611, 612, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 648, 650, 652, 655, 656, 658, 661, 662, 663, 665, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 684, 686, 687, 688, 705, 706, 707, 714, 727, 730, 731, 737, 739, 740, 741, 742, 747, 748, 750, 751, 752, 753, 754, 755, 756, 763, 766, 767, 769, 778, 781, 782, 785, 786, 800, 806, 814, 818, 820, 823, 824, 825, 827, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844], "slope": [47, 53, 69, 76, 108, 291, 292, 297, 299, 303, 361, 615, 778], "neg": [47, 52, 53, 58, 60, 62, 67, 69, 75, 76, 81, 83, 85, 90, 93, 108, 111, 114, 122, 128, 130, 143, 236, 243, 250, 251, 269, 270, 278, 283, 291, 308, 323, 326, 361, 363, 370, 371, 372, 376, 420, 427, 431, 448, 483, 502, 615, 618, 621, 626, 628, 632, 637, 657, 659, 677, 681, 683, 684, 690, 692, 693, 697, 730, 757, 758, 766, 768, 778, 818, 831], "leaki": [47, 69, 108, 615, 778], "log_softmax": [47, 69, 615, 778], "0719": [47, 69, 109], "221": [47, 109], "mish": [47, 69, 615, 778], "30340147": [47, 110, 615], "86509842": [47, 69, 110, 615], "269": [47, 112], "731": [47, 112], "881": [47, 52, 75, 112, 222, 235, 275, 621], "422": [47, 113, 615], "155": [47, 80, 113, 615, 625, 649], "softplu": [47, 69, 615, 778, 838], "beta": [47, 53, 61, 69, 76, 84, 114, 299, 303, 309, 312, 313, 361, 363, 370, 371, 375, 376, 423, 449, 496, 500, 501, 615, 631, 727, 778, 838], "threshold": [47, 52, 53, 69, 75, 76, 114, 267, 268, 306, 332, 361, 366, 371, 372, 444, 449, 482, 615, 621, 778, 838], "union": [47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 366, 367, 369, 370, 371, 372, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 548, 550, 551, 552, 554, 555, 558, 559, 561, 562, 566, 567, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 719, 720, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 766, 781, 786, 787, 815, 818, 820, 821, 822, 824, 827, 828, 831, 836, 838, 840, 845, 854, 855, 856], "3461": [47, 69, 114, 615], "6491": [47, 69, 114, 615], "_array_to_new_backend": 48, "_to_ivi": 48, "_to_n": 48, "to_ignor": [48, 68, 91, 630, 719, 720], "_to_new_backend": 48, "args_to_ivi": 48, "include_deriv": [48, 71, 630, 709, 720, 763], "nest": [48, 70, 71, 99, 102, 239, 557, 586, 603, 606, 621, 623, 624, 629, 705, 706, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 786, 815, 817, 818, 828, 830, 836, 843, 844, 846, 848, 861], "unchang": [48, 52, 369, 372, 413, 465, 625, 648], "deriv": [48, 49, 53, 55, 71, 72, 76, 78, 127, 132, 139, 145, 308, 312, 337, 363, 366, 604, 605, 608, 609, 610, 611, 612, 618, 624, 629, 630, 707, 709, 720, 784, 786, 787, 820, 821, 842, 844], "word": [48, 122, 372, 468, 618, 632, 731, 779, 782, 818, 831, 832, 848], "args_to_n": [48, 831], "cont_inplac": 48, "decid": [48, 70, 630, 719, 720, 802, 808, 809, 820, 838], "args_to_new_backend": 48, "shallow": [48, 630, 715, 716, 720, 725, 726], "nativevari": 48, "mutabl": [48, 630, 709, 715, 716, 720, 725, 726, 816], "to_ivi": [48, 71, 630, 721, 831], "leaf": [48, 70, 77, 89, 99, 538, 630, 718, 719, 721, 748, 818, 828, 843], "travers": [48, 71, 630, 712, 720, 818, 820, 824, 840], "lowest": [48, 53, 62, 71, 76, 85, 381, 515, 630, 632, 720, 729, 796, 828, 846, 848, 858, 862, 866], "search": [48, 53, 71, 76, 734, 735, 774, 807, 809, 818, 822, 825, 835, 836, 850], "to_new_backend": 48, "_arraywithcr": [49, 98], "boolean": [49, 50, 52, 53, 54, 60, 63, 66, 70, 72, 73, 75, 76, 77, 83, 86, 89, 98, 99, 119, 121, 123, 124, 125, 131, 148, 164, 166, 168, 169, 172, 188, 198, 206, 212, 226, 227, 228, 229, 230, 231, 263, 264, 265, 266, 330, 331, 345, 366, 370, 372, 427, 436, 442, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 483, 489, 524, 527, 538, 545, 548, 549, 553, 554, 555, 556, 557, 558, 559, 568, 571, 574, 575, 577, 578, 602, 617, 618, 619, 620, 621, 623, 625, 628, 629, 630, 633, 636, 652, 692, 693, 694, 696, 698, 699, 701, 703, 705, 706, 718, 736, 737, 738, 750, 752, 766, 767, 768, 769, 774, 785, 818, 820, 828, 832, 835, 838], "alwai": [49, 50, 53, 54, 60, 72, 73, 76, 83, 106, 124, 148, 219, 269, 340, 366, 370, 372, 438, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 489, 545, 552, 615, 619, 621, 623, 628, 692, 693, 694, 696, 698, 699, 701, 703, 768, 802, 808, 809, 810, 815, 816, 818, 820, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 838, 840, 846, 854], "never": [49, 53, 60, 72, 76, 83, 124, 372, 453, 454, 455, 461, 463, 465, 466, 467, 470, 474, 481, 489, 545, 623, 628, 692, 693, 694, 696, 698, 699, 701, 703, 810, 820, 831, 832, 835], "valueerror": [49, 53, 60, 72, 76, 83, 87, 124, 369, 371, 402, 413, 448, 453, 454, 461, 463, 465, 466, 467, 474, 489, 628, 692, 693, 694, 696, 698, 699, 701, 703, 742, 768, 797, 824], "buffer": [49, 72, 76, 83, 124, 130, 453, 454, 461, 463, 465, 466, 467, 474, 489, 618, 692, 693, 694, 696, 698, 699, 701, 703, 783, 784, 831, 846], "nativedtyp": [49, 50, 53, 57, 58, 62, 63, 66, 72, 76, 81, 85, 86, 89, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 170, 172, 174, 178, 188, 307, 308, 309, 310, 311, 312, 313, 328, 335, 350, 363, 366, 376, 381, 498, 499, 500, 501, 502, 512, 513, 514, 515, 518, 521, 618, 619, 625, 626, 632, 633, 635, 636, 648, 684, 729, 730, 731, 734, 735, 745, 747, 748, 753, 755, 781, 820, 821, 827, 836, 840], "datatyp": [49, 53, 70, 72, 76, 124, 132, 136, 153, 174, 178, 369, 416, 618, 619, 761, 836, 854], "nativedevic": [49, 51, 53, 62, 72, 74, 76, 85, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 190, 191, 192, 193, 194, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 307, 308, 323, 363, 376, 498, 499, 501, 502, 618, 620, 632, 728, 729, 730, 731, 781, 786, 787, 820, 821, 824, 827, 836], "39999998": [49, 123, 124, 618, 634, 740], "5999999": [49, 53, 76, 80, 123, 124, 293, 361, 370, 418, 618, 625, 648, 655], "0999999": [49, 66, 123, 124, 293, 302, 305, 347, 361, 366, 618, 751], "10000038": [49, 123, 124, 618], "90786433e": [49, 123, 124, 618], "310": [49, 123, 124, 618], "copy_arrai": [49, 72, 618], "to_ivy_arrai": [49, 72, 125, 618], "empty_lik": [49, 53, 72, 76, 260, 370, 421, 618, 621], "uniniti": [49, 126, 127, 618, 826], "from_dlpack": [49, 72, 618], "full_lik": [49, 72, 618, 836], "fill_valu": [49, 53, 63, 72, 76, 86, 131, 132, 248, 256, 372, 376, 483, 502, 618, 621, 633, 737, 820, 833, 836], "scalar": [49, 52, 53, 54, 58, 69, 72, 75, 76, 77, 81, 93, 108, 132, 137, 219, 240, 285, 291, 333, 334, 336, 340, 343, 345, 347, 352, 366, 369, 370, 371, 372, 416, 423, 443, 453, 454, 455, 464, 469, 589, 602, 618, 621, 623, 626, 684, 820, 830, 832, 846, 861], "fill": [49, 52, 53, 62, 63, 70, 72, 75, 76, 85, 86, 126, 131, 132, 134, 137, 138, 139, 144, 145, 270, 308, 363, 370, 372, 376, 427, 431, 436, 442, 464, 483, 484, 499, 501, 502, 618, 621, 632, 633, 729, 737, 781, 808, 833], "000123": [49, 132, 618], "stop": [49, 53, 55, 72, 76, 78, 122, 133, 134, 209, 370, 436, 442, 568, 605, 608, 610, 611, 612, 613, 618, 620, 623, 624, 629, 630, 705, 706, 707, 719, 786, 800, 827, 830, 838, 840, 846, 861], "num": [49, 72, 133, 134, 618, 766, 810, 827, 840], "endpoint": [49, 72, 133, 134, 618, 781, 827], "logspac": [49, 72, 618, 840], "log": [49, 52, 53, 58, 72, 75, 76, 81, 114, 134, 259, 261, 274, 295, 296, 348, 355, 361, 366, 371, 376, 445, 447, 448, 498, 615, 618, 621, 675, 766, 768, 769, 778, 810, 818, 819, 822, 828, 831, 832, 833, 835, 837, 838, 840, 843], "sequenc": [49, 53, 57, 58, 60, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 128, 130, 132, 134, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 311, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 359, 360, 363, 366, 367, 368, 369, 370, 372, 376, 381, 382, 384, 385, 392, 393, 394, 396, 397, 401, 402, 404, 411, 412, 413, 414, 415, 418, 426, 427, 428, 430, 434, 435, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 459, 460, 461, 462, 468, 470, 471, 473, 474, 476, 479, 481, 483, 484, 485, 489, 490, 491, 493, 494, 495, 497, 499, 500, 512, 513, 514, 515, 522, 523, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 562, 566, 567, 581, 582, 584, 586, 588, 589, 602, 603, 606, 607, 608, 613, 618, 621, 623, 624, 625, 626, 628, 630, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 652, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 684, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 703, 704, 708, 715, 725, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 782, 785, 787, 810, 819, 820, 821, 822, 824, 835, 836, 838, 840, 845, 864], "on_valu": [49, 72, 134, 137, 618], "off_valu": [49, 72, 134, 137, 618], "evenli": [49, 52, 53, 57, 60, 70, 72, 75, 76, 80, 83, 122, 133, 134, 288, 369, 411, 415, 618, 621, 625, 628, 638, 639, 640, 641, 643, 645, 647, 698], "hint": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 324, 330, 331, 333, 336, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 475, 483, 512, 515, 542, 546, 548, 550, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 808, 815, 823, 825, 827, 828, 831, 832, 836], "simplic": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 324, 330, 331, 333, 336, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 475, 483, 512, 515, 542, 546, 548, 550, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 823, 838, 844], "nestabl": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 323, 324, 330, 331, 333, 336, 363, 366, 369, 370, 372, 381, 387, 388, 389, 390, 392, 393, 394, 400, 405, 406, 407, 412, 414, 423, 475, 483, 512, 515, 519, 528, 536, 537, 542, 546, 548, 550, 552, 566, 584, 589, 613, 618, 619, 621, 623, 624, 625, 626, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 648, 649, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 727, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 808, 813, 822, 823, 831, 835, 848], "464": [49, 52, 85, 134, 223, 224, 621], "15888336": [49, 134], "2154": [49, 134], "43469003": [49, 134], "meshgrid": [49, 72, 618], "spars": [49, 53, 59, 72, 76, 82, 135, 311, 363, 370, 427, 436, 442, 618, 627, 688], "xy": [49, 72, 135, 618], "dimension": [49, 52, 53, 58, 60, 63, 66, 67, 70, 72, 75, 76, 81, 83, 89, 90, 98, 122, 128, 130, 135, 143, 288, 323, 330, 331, 363, 366, 369, 370, 372, 381, 396, 397, 401, 402, 412, 413, 420, 453, 454, 455, 459, 464, 465, 510, 522, 618, 621, 626, 628, 633, 636, 637, 657, 658, 664, 667, 670, 672, 673, 683, 684, 698, 734, 735, 737, 750, 751, 752, 753, 754, 755, 756, 757, 758, 828, 830, 835, 838, 840, 858, 861, 868], "repres": [49, 52, 53, 57, 58, 75, 76, 80, 81, 96, 121, 135, 137, 160, 218, 219, 222, 225, 234, 236, 243, 269, 282, 286, 287, 311, 325, 326, 327, 343, 360, 363, 366, 368, 369, 370, 371, 372, 375, 376, 379, 411, 415, 429, 441, 443, 448, 475, 486, 491, 492, 493, 498, 504, 511, 547, 617, 618, 619, 621, 623, 625, 626, 648, 649, 650, 664, 672, 675, 676, 768, 781, 785, 796, 809, 815, 820, 838, 842, 858, 859, 862], "coordin": [49, 52, 63, 75, 76, 86, 135, 143, 224, 286, 315, 316, 323, 343, 363, 377, 503, 618, 621, 633, 737], "conserv": [49, 135, 618], "cartesian": [49, 135, 618], "matrix": [49, 53, 54, 57, 58, 76, 77, 80, 81, 93, 94, 96, 98, 135, 141, 142, 143, 323, 324, 363, 370, 372, 381, 419, 422, 423, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 473, 512, 524, 530, 618, 623, 625, 626, 649, 656, 658, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 766, 768, 781, 782, 796, 800, 808, 820, 832, 859, 861], "ij": [49, 66, 135, 618, 636, 749, 796], "respect": [49, 52, 53, 55, 58, 75, 76, 78, 81, 93, 135, 216, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 278, 282, 285, 286, 295, 343, 358, 361, 366, 368, 370, 372, 375, 425, 440, 452, 491, 493, 547, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 618, 621, 623, 624, 625, 626, 629, 638, 645, 646, 652, 657, 674, 677, 705, 706, 707, 763, 766, 781, 796, 807, 808, 809, 810, 815, 816, 818, 819, 820, 821, 822, 827, 828, 830, 831, 832, 835, 836, 837, 857, 867], "rank": [49, 53, 58, 60, 67, 76, 81, 83, 90, 93, 94, 95, 96, 97, 102, 135, 318, 319, 320, 321, 322, 363, 370, 372, 381, 427, 428, 436, 439, 442, 475, 483, 522, 618, 626, 628, 633, 637, 657, 659, 668, 670, 674, 676, 681, 683, 684, 691, 692, 700, 703, 704, 737, 757, 758, 803, 812], "ni": [49, 135, 618], "xi": [49, 135, 618], "scatter": [49, 54, 72, 77, 137, 566, 567, 618, 623, 817, 831, 838, 868], "j": [49, 52, 53, 54, 58, 66, 72, 75, 76, 81, 93, 121, 137, 217, 218, 219, 220, 222, 225, 234, 236, 239, 241, 249, 257, 259, 263, 269, 280, 282, 283, 286, 287, 333, 366, 369, 370, 381, 396, 397, 401, 412, 413, 417, 422, 424, 433, 439, 522, 527, 617, 618, 621, 623, 626, 636, 661, 681, 749, 796, 803, 810, 813, 817, 854, 857], "unless": [49, 53, 58, 72, 76, 137, 269, 329, 345, 350, 366, 618, 621, 626, 670, 816, 821, 831, 846, 855, 856], "ones_lik": [49, 72, 618, 816, 845], "tril": [49, 72, 618], "whose": [49, 52, 53, 54, 58, 60, 64, 66, 72, 75, 76, 77, 81, 83, 87, 89, 94, 96, 98, 132, 141, 142, 218, 222, 225, 233, 234, 235, 274, 275, 281, 282, 286, 287, 288, 324, 338, 342, 346, 347, 349, 353, 363, 370, 372, 422, 441, 474, 483, 488, 529, 584, 618, 621, 623, 626, 628, 634, 636, 656, 658, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 693, 697, 739, 740, 741, 748, 749, 768, 805, 823, 835], "innermost": [49, 53, 58, 81, 141, 142, 324, 363, 370, 422, 618, 626, 656, 658, 660, 661, 662, 663, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681], "mxn": [49, 53, 58, 81, 141, 142, 324, 363, 618, 626, 660, 668, 670, 671, 673, 674, 678, 681], "matric": [49, 53, 58, 76, 81, 93, 94, 98, 135, 141, 142, 324, 363, 370, 372, 422, 427, 428, 430, 434, 435, 440, 464, 618, 625, 626, 649, 656, 658, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681, 682, 768, 806, 825, 861], "diagon": [49, 53, 58, 76, 81, 94, 128, 141, 142, 143, 308, 323, 324, 363, 370, 372, 420, 423, 431, 437, 464, 618, 626, 659, 681], "triangular": [49, 53, 58, 81, 141, 142, 143, 323, 324, 363, 370, 437, 618, 626, 656, 662, 663, 670, 674], "alloc": [49, 50, 53, 73, 141, 142, 148, 324, 363, 618, 619, 800, 808, 810, 846], "triu": [49, 72, 618], "upper": [49, 53, 58, 62, 76, 81, 85, 128, 142, 143, 308, 324, 363, 370, 381, 437, 515, 618, 626, 632, 656, 662, 663, 674, 731, 820, 831, 835], "zeros_lik": [49, 53, 72, 148, 265, 372, 483, 604, 605, 608, 610, 611, 612, 618, 619, 621, 624, 626, 628, 674, 689, 832, 838], "data_typ": [50, 53, 73, 76, 178, 619, 817, 820, 835, 836], "_arraywithdatatyp": [50, 98], "irrespect": [50, 58, 73, 81, 148, 619, 626, 677, 818, 831, 842, 868], "promot": [50, 52, 53, 58, 73, 75, 76, 81, 88, 98, 99, 148, 151, 174, 175, 176, 182, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 340, 348, 353, 366, 369, 381, 412, 512, 575, 597, 619, 621, 623, 626, 628, 636, 656, 657, 664, 665, 667, 668, 669, 670, 672, 673, 675, 676, 683, 684, 690, 700, 743, 751, 754, 766, 767, 811, 814, 823, 824, 828, 837], "nan": [50, 52, 53, 54, 64, 66, 73, 75, 76, 77, 148, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 275, 278, 279, 280, 281, 282, 283, 286, 287, 289, 295, 329, 330, 331, 341, 345, 350, 353, 361, 366, 372, 381, 483, 510, 511, 518, 519, 520, 521, 548, 602, 616, 619, 621, 623, 634, 636, 637, 739, 740, 741, 742, 750, 751, 752, 754, 755, 756, 757, 758, 766, 769, 814, 820, 823, 830, 836, 837], "infin": [50, 52, 54, 58, 73, 75, 81, 148, 216, 217, 218, 219, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 278, 279, 281, 282, 283, 286, 287, 289, 330, 331, 353, 366, 548, 616, 619, 621, 623, 626, 636, 637, 675, 684, 750, 752, 757, 758, 814, 823], "desir": [50, 51, 53, 63, 70, 73, 74, 76, 86, 93, 148, 150, 151, 210, 314, 354, 363, 366, 372, 381, 473, 518, 521, 522, 619, 620, 626, 633, 679, 736, 781, 782, 810, 816, 819, 820, 821, 832, 840, 850, 854, 861], "broadcast_arrai": [50, 73, 619], "mix": [50, 52, 73, 75, 76, 77, 82, 85, 98, 99, 149, 162, 163, 176, 195, 196, 226, 229, 230, 231, 236, 237, 243, 247, 255, 256, 266, 269, 272, 278, 371, 381, 449, 519, 538, 540, 541, 542, 543, 552, 586, 589, 619, 620, 621, 623, 625, 626, 627, 628, 631, 636, 639, 641, 644, 646, 647, 649, 655, 656, 679, 686, 688, 689, 727, 749, 751, 754, 767, 769, 808, 813, 820, 821, 822, 831, 838, 840, 848, 861, 865, 867], "broadcast_to": [50, 73, 619, 820], "can_cast": [50, 73, 619, 820, 828, 832], "accord": [50, 53, 54, 60, 66, 73, 83, 89, 151, 161, 219, 230, 236, 243, 269, 280, 314, 363, 369, 372, 413, 475, 542, 545, 566, 567, 619, 621, 623, 626, 628, 636, 683, 691, 704, 754, 756, 761, 768, 788, 795, 808, 809, 814, 820, 826, 828, 832, 835], "finfo": [50, 73, 619, 835], "resolut": [50, 73, 161, 619, 810], "4028235e": [50, 161, 619], "iinfo": [50, 73, 619], "integ": [50, 52, 53, 57, 58, 60, 62, 66, 67, 70, 75, 76, 77, 80, 81, 83, 85, 89, 90, 98, 99, 122, 131, 164, 165, 171, 175, 176, 180, 216, 226, 227, 228, 229, 230, 231, 232, 242, 243, 254, 266, 271, 274, 278, 279, 289, 290, 325, 326, 327, 330, 331, 335, 339, 340, 363, 366, 369, 372, 376, 379, 381, 396, 401, 411, 414, 415, 416, 461, 470, 475, 483, 489, 498, 499, 500, 501, 502, 504, 505, 510, 512, 513, 514, 519, 522, 545, 561, 571, 603, 618, 619, 621, 623, 625, 626, 628, 632, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 657, 659, 669, 683, 684, 698, 728, 729, 730, 731, 732, 733, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 768, 769, 774, 782, 796, 810, 818, 820, 830, 833, 835, 840, 842], "119": [50, 164], "1220": [50, 164], "int16": [50, 53, 62, 66, 73, 85, 151, 155, 157, 162, 164, 171, 186, 381, 513, 514, 619, 636, 729, 747, 748, 753, 755, 766, 767, 820, 832, 835, 840], "32768": [50, 73, 164, 582, 623], "32767": [50, 73, 164], "is_bool_dtyp": [50, 73, 619], "is_float_dtyp": [50, 73, 619, 836], "is_int_dtyp": [50, 73, 619, 833, 836], "is_uint_dtyp": [50, 73, 619, 833, 836], "result_typ": [50, 73, 619, 820], "arrays_and_dtyp": [50, 73, 176, 619], "_arraywithdevic": [51, 98], "move": [51, 53, 74, 76, 143, 206, 210, 214, 323, 363, 372, 474, 618, 620, 784, 802, 810, 821, 836], "addit": [51, 53, 54, 61, 74, 76, 77, 84, 119, 121, 210, 219, 279, 371, 375, 381, 443, 496, 511, 516, 535, 536, 537, 603, 617, 620, 621, 623, 625, 629, 631, 652, 707, 727, 782, 796, 808, 809, 810, 816, 820, 822, 823, 826, 828, 830, 831, 832, 835, 836, 838, 842, 843, 845, 854, 861, 862, 863, 867], "__dlpack__": [51, 74, 129, 210, 618, 620], "caveat": [51, 74, 210, 371, 447, 620], "portabl": [51, 74, 210, 620, 802, 859], "_arraywithelementwis": [52, 98], "ab": [52, 58, 68, 75, 91, 98, 99, 274, 329, 345, 366, 372, 482, 621, 626, 630, 668, 678, 684, 716, 719, 763, 795, 796, 806, 815, 820, 825, 829, 832, 835], "absolut": [52, 53, 58, 68, 70, 75, 76, 81, 98, 216, 280, 329, 345, 348, 354, 366, 370, 371, 423, 438, 444, 446, 621, 626, 668, 669, 670, 675, 761, 763, 766, 768, 769, 803, 809], "aco": [52, 75, 621], "invers": [52, 53, 58, 75, 76, 81, 217, 218, 221, 222, 223, 224, 225, 369, 379, 391, 400, 402, 412, 504, 621, 626, 665, 669, 673, 788, 820], "cosin": [52, 75, 217, 218, 233, 234, 307, 310, 363, 369, 390, 400, 621, 782], "acosh": [52, 75, 162, 163, 619, 621, 806, 825], "area": [52, 53, 75, 76, 80, 218, 222, 225, 369, 404, 411, 415, 621, 805, 831, 838, 851, 857], "hyperbol": [52, 75, 218, 222, 225, 234, 282, 286, 287, 299, 303, 361, 621], "sector": [52, 75, 218, 222, 225, 621, 851], "second": [52, 53, 55, 58, 60, 64, 75, 76, 77, 78, 81, 83, 87, 94, 98, 99, 119, 143, 174, 182, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 314, 323, 329, 341, 343, 344, 345, 351, 355, 356, 363, 366, 370, 371, 372, 379, 381, 421, 422, 423, 425, 429, 449, 481, 488, 499, 501, 505, 512, 515, 527, 576, 598, 604, 605, 610, 617, 618, 619, 621, 623, 624, 626, 628, 629, 630, 634, 657, 660, 661, 662, 664, 667, 672, 674, 675, 677, 679, 681, 683, 700, 701, 706, 709, 739, 740, 741, 786, 809, 814, 817, 820, 822, 826, 831, 832, 835, 837, 842, 852, 866], "multipli": [52, 53, 57, 66, 75, 76, 80, 93, 219, 285, 346, 369, 370, 404, 433, 434, 513, 514, 621, 625, 636, 648, 747, 753, 810, 815, 816, 818, 822], "angl": [52, 75, 224, 234, 282, 287, 344, 366, 621], "deg": [52, 75, 220, 621], "radian": [52, 53, 75, 76, 217, 220, 221, 223, 224, 233, 235, 275, 281, 286, 353, 366, 621, 823], "degre": [52, 53, 66, 75, 76, 89, 220, 235, 275, 317, 363, 372, 481, 621, 636, 754, 756, 860], "1j": [52, 75, 76, 220, 221, 233, 234, 239, 241, 253, 276, 281, 282, 286, 333, 581, 621, 623], "2j": [52, 53, 75, 76, 220, 249, 333, 369, 396, 401, 582, 621, 623], "3j": [52, 53, 75, 76, 220, 253, 276, 333, 366, 621], "35619449": [52, 220, 621], "78539816": [52, 220, 621], "135": [52, 220, 530, 621, 623], "asin": [52, 75, 621], "sine": [52, 75, 221, 222, 281, 282, 621], "927": [52, 75, 221], "asinh": [52, 75, 221, 621], "atan": [52, 75, 621], "tangent": [52, 75, 223, 224, 225, 286, 287, 299, 303, 359, 361, 368, 621, 823], "785": [52, 75, 223, 224, 621], "atan2": [52, 75, 621], "quotient": [52, 75, 224, 236, 243, 621], "245": [52, 80, 224, 625, 648, 649], "588": [52, 224, 621], "inf": [52, 53, 54, 58, 75, 76, 77, 81, 224, 241, 250, 251, 252, 253, 257, 258, 260, 270, 295, 348, 361, 366, 370, 381, 419, 515, 548, 602, 616, 621, 623, 625, 626, 653, 668, 684, 766, 769, 806, 820, 825, 830], "719": [52, 224, 621], "197": [52, 224, 621], "atanh": [52, 75, 621], "549": [52, 75, 80, 225, 621, 625, 649], "bitwise_and": [52, 75, 621], "bitwise_invert": [52, 75, 621], "bitiwse_invert": [52, 227], "bitwise_left_shift": [52, 75, 621], "bitwise_or": [52, 75, 621], "bitwise_right_shift": [52, 75, 98, 621], "bitwise_xor": [52, 75, 98, 621], "ceil": [52, 53, 75, 76, 93, 96, 122, 369, 387, 388, 389, 405, 406, 407, 410, 618, 621, 782, 831], "round": [52, 53, 75, 76, 93, 95, 96, 97, 219, 232, 236, 242, 243, 269, 283, 289, 290, 339, 366, 621, 806, 808, 809, 810, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 850, 851, 852], "416": [52, 233, 621], "540": [52, 233], "990": [52, 233], "cosh": [52, 75, 233, 621], "deg2rad": [52, 75, 621], "convers": [52, 53, 76, 235, 275, 568, 578, 623, 783, 784, 808, 839, 841, 845, 846, 848, 852, 860, 867], "180": [52, 75, 235, 275, 621], "270": [52, 75, 235, 275, 621], "360": [52, 75, 235, 275, 621, 819], "dividend": [52, 75, 236, 243, 278, 290, 621], "divisor": [52, 53, 55, 66, 75, 76, 78, 89, 236, 243, 246, 247, 278, 290, 369, 372, 387, 388, 389, 461, 470, 489, 604, 605, 610, 621, 624, 636, 754, 756, 782, 786], "375": [52, 237, 272], "erf": [52, 75, 338, 366, 621], "exponenti": [52, 53, 75, 76, 238, 239, 241, 261, 274, 291, 300, 361, 370, 432, 621], "gauss": [52, 75, 238, 621], "328": [52, 238, 286, 621], "677": [52, 238], "842": [52, 238, 286, 621], "71828198": [52, 75, 239], "38905573": [52, 75, 239], "08553696": [52, 75, 239, 621], "exp2": [52, 75, 621], "expm1": [52, 75, 621, 820], "244": [52, 241, 802], "918": [52, 241], "147": [52, 241, 621], "floor": [52, 53, 75, 76, 93, 96, 230, 243, 369, 387, 388, 389, 391, 405, 406, 407, 410, 621, 782, 831], "floor_divid": [52, 75, 621, 774, 820], "fmin": [52, 75, 621, 820], "gcd": [52, 75, 621, 820], "greater": [52, 53, 57, 60, 62, 75, 76, 80, 85, 98, 99, 130, 217, 218, 221, 222, 224, 225, 228, 230, 236, 242, 243, 257, 259, 274, 278, 280, 282, 283, 287, 288, 289, 332, 366, 369, 391, 396, 401, 412, 618, 621, 625, 626, 628, 632, 655, 657, 669, 699, 731, 768, 782, 810, 811, 833], "greater_equ": [52, 75, 98, 99, 261, 621], "isfinit": [52, 75, 621, 832], "out_i": [52, 75, 250, 251, 252, 253, 276, 621], "self_i": [52, 75, 250, 251, 252, 253, 276], "finit": [52, 75, 216, 217, 218, 219, 222, 224, 225, 234, 236, 237, 239, 241, 243, 250, 251, 257, 259, 269, 270, 272, 274, 278, 282, 283, 287, 621], "isinf": [52, 75, 621], "detect_posit": [52, 75, 251, 621], "detect_neg": [52, 75, 251, 621], "isnan": [52, 75, 621], "isreal": [52, 75, 621], "5j": [52, 75, 76, 253, 276, 333, 366, 621], "6j": [52, 53, 75, 249, 253, 333, 621], "lcm": [52, 75, 621, 820], "less": [52, 53, 58, 62, 66, 75, 76, 81, 85, 98, 99, 217, 218, 221, 224, 225, 232, 236, 243, 257, 258, 259, 260, 274, 278, 280, 283, 352, 366, 369, 370, 381, 390, 391, 400, 412, 436, 442, 512, 515, 621, 626, 632, 636, 668, 669, 670, 673, 684, 731, 754, 756, 782, 809, 810, 818, 820, 822, 824, 827, 832, 835, 838, 839, 840, 851, 861, 863], "less_equ": [52, 75, 98, 99, 621, 824], "log10": [52, 53, 75, 314, 363, 621], "logarithm": [52, 75, 239, 257, 258, 259, 260, 261, 337, 348, 366, 621, 626, 675], "602": [52, 258, 621], "699": [52, 258, 621], "log1p": [52, 75, 621, 830], "693": [52, 75, 113, 222, 259, 615, 621, 627, 688], "0953": [52, 75, 257, 259, 621], "log2": [52, 75, 262, 621], "logaddexp": [52, 75, 621], "logaddexp2": [52, 75, 621, 806, 825], "169925": [52, 75, 262, 621], "logical_and": [52, 75, 621, 832, 838, 868], "logical_not": [52, 75, 621, 820], "logical_or": [52, 75, 621, 868], "conform": [52, 58, 75, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 330, 331, 333, 366, 369, 372, 381, 412, 483, 512, 618, 619, 621, 626, 628, 633, 634, 635, 636, 637, 656, 657, 658, 659, 660, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 690, 692, 693, 694, 696, 697, 699, 700, 704, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 823, 826], "api_specif": [52, 53, 75, 76, 151, 239, 249, 250, 265, 330, 331, 366, 369, 372, 412, 483, 619, 621, 628, 636, 704, 754, 823], "array_api": [52, 75, 151, 239, 249, 250, 265, 369, 372, 412, 483, 619, 621, 626, 628, 636, 675, 676, 704, 754, 823], "logical_xor": [52, 75, 621], "maximum": [52, 53, 54, 55, 60, 63, 66, 70, 75, 76, 77, 78, 83, 86, 89, 99, 209, 294, 330, 331, 341, 354, 361, 366, 369, 370, 372, 381, 385, 395, 436, 439, 442, 475, 513, 515, 520, 530, 531, 539, 547, 610, 620, 621, 623, 624, 626, 628, 633, 636, 668, 689, 734, 735, 750, 752, 766, 768, 769, 774, 796, 810, 820, 822, 831, 843, 868], "use_wher": [52, 75, 267, 268, 621], "formula": [52, 53, 75, 236, 258, 260, 267, 268, 269, 314, 347, 363, 366, 375, 491, 493, 621, 800], "exce": [52, 53, 76, 268, 372, 485, 621], "product": [52, 53, 57, 58, 66, 75, 76, 80, 81, 89, 93, 94, 96, 269, 359, 360, 368, 370, 381, 418, 421, 425, 428, 429, 430, 433, 434, 435, 513, 514, 521, 621, 625, 626, 636, 652, 655, 657, 664, 667, 672, 679, 683, 747, 748, 749, 753, 754, 796, 808, 840, 861, 863], "nan_to_num": [52, 75, 621], "posinf": [52, 75, 270, 621], "neginf": [52, 75, 270, 621], "5e": [52, 55, 75, 76, 270, 351, 610, 621, 624], "not_equ": [52, 75, 98, 99, 621], "pow": [52, 75, 98, 99, 621, 814], "expon": [52, 53, 54, 76, 77, 274, 340, 342, 346, 366, 375, 496, 582, 621, 623, 626, 669], "rad2deg": [52, 75, 621], "286": [52, 76, 275], "458": [52, 275], "573": [52, 275, 621], "reciproc": [52, 75, 621], "333": [52, 75, 236, 277, 531, 621, 623], "remaind": [52, 53, 60, 70, 75, 76, 83, 245, 621, 628, 698, 814, 831], "modulu": [52, 75, 278, 621, 831], "sign": [52, 53, 58, 64, 66, 75, 76, 81, 93, 122, 216, 217, 218, 219, 222, 224, 225, 230, 234, 236, 239, 241, 243, 269, 271, 278, 282, 283, 287, 334, 366, 370, 372, 381, 438, 482, 483, 513, 514, 618, 621, 626, 634, 636, 675, 739, 740, 741, 742, 747, 748, 753, 755, 802, 809, 811, 820, 840, 845, 851], "x2_i": [52, 75, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 621, 814], "decim": [52, 75, 279, 621, 837], "678": [52, 279, 280], "np_variant": [52, 75, 280, 621], "841": [52, 69, 75, 106, 281, 615, 621], "909": [52, 75, 77, 281, 621], "141": [52, 75, 148, 281, 619, 621], "sinh": [52, 75, 281, 621], "232": [52, 75, 282, 621], "sqrt": [52, 53, 75, 76, 369, 391, 396, 397, 401, 402, 412, 621, 781, 782, 802], "squar": [52, 53, 58, 75, 76, 81, 283, 370, 371, 375, 381, 422, 432, 444, 496, 512, 606, 607, 609, 614, 621, 624, 626, 630, 656, 658, 659, 661, 662, 663, 665, 669, 675, 676, 677, 682, 714, 802], "tanh": [52, 53, 75, 76, 286, 299, 303, 361, 621, 778, 840], "762": [52, 75, 287, 621], "964": [52, 75, 287, 621], "trapz": [52, 75, 621], "dx": [52, 75, 288, 621], "apart": [52, 75, 288, 621], "trapezoid": [52, 75, 288, 621], "trunc": [52, 75, 621], "025": [52, 289, 371, 449, 621, 629, 707], "trunc_divid": [52, 75, 621], "_arraywithactivationsexperiment": [53, 98], "celu": [53, 76, 361], "formul": [53, 69, 76, 94, 106, 291, 293, 361, 778], "elu": [53, 76, 294, 361, 778], "scaler": [53, 76, 292, 361, 766, 769, 835], "hardshrink": [53, 76, 361], "lambd": [53, 76, 293, 302, 361], "hardtanh": [53, 76, 361], "max_val": [53, 76, 294, 361], "min_val": [53, 76, 294, 361], "region": [53, 76, 294, 302, 361, 809], "19722438": [53, 76, 295, 361], "38629448": [53, 76, 295, 361], "38629436": [53, 76, 295, 361], "logsigmoid": [53, 76, 361, 778], "31326175": [53, 69, 296, 361], "126928": [53, 76, 296], "01814993": [53, 296], "00004578": [53, 296], "57888985": [53, 296], "31326169": [53, 76, 296, 361], "69314718": [53, 58, 69, 76, 81, 296, 348, 361, 366, 626, 675], "01104775": [53, 296], "prelu": [53, 76, 361, 778], "unidirect": [53, 297, 361, 625, 650], "relu6": [53, 76, 361, 778], "rectifi": [53, 69, 76, 108, 110, 111, 298, 301, 306, 361, 615], "scaled_tanh": [53, 76, 303, 361], "7159": [53, 76, 299, 303, 361], "amplitud": [53, 76, 299, 303, 361], "65537548": [53, 76, 299], "49570239": [53, 76, 299], "77637792": [53, 299], "selu": [53, 76, 361, 778], "11133075": [53, 300, 361], "05070102": [53, 76, 300, 361], "10140204": [53, 300, 361], "15210295": [53, 300, 361], "20280409": [53, 300, 361], "25350523": [53, 300, 361], "30420589": [53, 300, 361], "35490704": [53, 300, 361], "silu": [53, 76, 361, 778], "26894143": [53, 301], "73105854": [53, 76, 301], "softshrink": [53, 76, 361], "bound": [53, 76, 302, 314, 361, 363, 372, 458, 483, 484, 766, 820, 824, 832, 835, 840, 867], "tanhshrink": [53, 76, 361], "23840582": [53, 76, 304, 361], "condit": [53, 63, 76, 86, 119, 305, 320, 321, 363, 370, 419, 617, 630, 633, 718, 719, 738, 768, 814, 820, 822, 824, 828, 829, 831, 835, 854], "met": [53, 76, 305, 824], "hreshold": [53, 305], "thresholded_relu": [53, 76, 361], "_arraywithconversionsexperiment": [53, 98], "_arraywithcreationexperiment": [53, 98], "blackman_window": [53, 76, 363], "period": [53, 76, 282, 286, 307, 309, 310, 312, 313, 363, 369, 403, 621, 810], "window": [53, 57, 76, 80, 307, 309, 310, 312, 313, 328, 363, 369, 375, 387, 388, 389, 391, 405, 406, 407, 408, 410, 411, 415, 416, 496, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 782, 804, 810, 817, 825, 866], "symmetr": [53, 58, 76, 81, 93, 94, 307, 309, 310, 312, 313, 363, 370, 372, 422, 475, 626, 656, 661, 662, 663, 685, 818], "38777878e": [53, 76, 307, 363], "40000000e": [53, 307, 363], "00000000e": [53, 58, 76, 77, 307, 338, 363, 369, 390, 396, 400, 401, 626, 674, 806, 825], "30000000e": [53, 76, 307, 363], "eye_lik": [53, 76, 363], "elsewher": [53, 76, 128, 308, 363, 618, 633, 738, 809], "mel_weight_matrix": [53, 76, 363], "num_mel_bin": [53, 76, 314, 363], "dft_length": [53, 76, 314, 363, 369, 391], "sample_r": [53, 76, 314, 363], "lower_edge_hertz": [53, 76, 314, 363], "upper_edge_hertz": [53, 76, 314, 363], "3000": [53, 76, 314, 363], "melweightmatrix": [53, 76, 314, 363], "linearli": [53, 54, 77, 314, 363, 539, 623, 626, 676], "frequenc": [53, 54, 76, 77, 314, 363, 381, 512, 539, 623, 810], "spectra": [53, 314, 363], "dft": [53, 76, 314, 363, 369], "stft": [53, 76, 314, 363, 369], "mel": [53, 76, 314, 363], "term": [53, 76, 307, 314, 317, 363, 371, 447, 448, 625, 650, 651, 782, 796, 802, 810, 818, 840, 848, 850, 861], "hertz": [53, 314, 363], "2595": [53, 314, 363], "700": [53, 77, 314, 363, 543], "band": [53, 54, 76, 77, 314, 363, 539, 623], "spectrum": [53, 76, 314, 363], "n_fft": [53, 76, 314, 363, 369, 391], "signal": [53, 76, 314, 363, 369, 383, 384, 385, 390, 391, 400, 416, 782, 860, 861], "8000": [53, 76, 309, 314, 363], "75694758": [53, 314, 363], "trilu": [53, 76, 363], "retain": [53, 143, 323, 324, 363, 606, 618, 624, 830, 834, 848], "unsorted_segment_mean": [53, 76, 363], "segment_id": [53, 76, 325, 326, 327, 363, 788], "num_seg": [53, 76, 325, 326, 327, 363, 788], "identifi": [53, 76, 325, 326, 327, 363, 805, 808, 814, 819, 820, 835, 838], "th": [53, 76, 94, 325, 326, 327, 336, 363, 366, 370, 371, 381, 420, 427, 443, 522], "distinct": [53, 64, 76, 325, 326, 327, 363, 634, 739, 740, 741, 742, 805, 809, 818, 823, 830, 831, 832, 839, 851, 861], "unsorted_segment_min": [53, 76, 363], "unsorted_segment_sum": [53, 76, 363], "polyv": [53, 76, 363], "coeff": [53, 76, 317, 363], "polynomi": [53, 76, 317, 363], "coeffici": [53, 76, 309, 317, 363, 370, 437, 626, 676, 786], "indetermin": [53, 76, 317, 363], "simplifi": [53, 76, 317, 363, 795, 796, 824, 832, 840, 841, 844, 851, 854, 857, 859, 860, 861, 864, 867, 868], "substitut": [53, 76, 317, 363], "_arraywithdata_typeexperiment": [53, 98], "_arraywithdeviceexperiment": [53, 98], "_arraywithelementwiseexperiment": [53, 98], "equal_nan": [53, 76, 329, 345, 366], "1e10": [53, 329, 345, 366], "00001e10": [53, 329, 345, 366], "00001e": [53, 329, 366], "amax": [53, 76, 366], "keepdim": [53, 58, 60, 63, 66, 67, 70, 76, 81, 83, 86, 89, 90, 330, 331, 335, 350, 357, 366, 367, 372, 381, 480, 517, 518, 519, 520, 521, 522, 626, 628, 633, 636, 637, 668, 684, 703, 734, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 824, 832, 840], "singleton": [53, 58, 63, 66, 67, 76, 81, 86, 89, 90, 330, 331, 366, 626, 628, 633, 636, 637, 684, 692, 699, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 840], "amin": [53, 76, 366], "binar": [53, 76, 366], "map": [53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 366, 369, 392, 393, 394, 412, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 481, 483, 484, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 603, 608, 613, 623, 630, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 715, 716, 720, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 796, 815, 818, 820, 827, 828, 832, 835, 836, 843, 846, 848, 855, 862], "conj": [53, 76, 234, 239, 241, 282, 283, 287, 366, 621], "conjug": [53, 58, 76, 81, 333, 366, 369, 370, 376, 391, 417, 423, 433, 435, 437, 500, 626, 667, 671, 679], "copysign": [53, 76, 366], "unsign": [53, 66, 76, 334, 366, 372, 381, 483, 513, 514, 636, 747, 748, 753, 755, 767, 820, 840], "count_nonzero": [53, 76, 366], "diff": [53, 70, 76, 366, 822, 831], "prepend": [53, 76, 336, 366, 626, 628, 667, 692, 809], "differenc": [53, 76, 336, 366], "prior": [53, 76, 336, 366, 376, 500, 626, 679, 824, 836], "expand": [53, 54, 60, 76, 77, 336, 366, 372, 539, 623, 628, 692, 818, 834], "discret": [53, 76, 336, 366, 369, 390, 391, 396, 397, 400, 401, 402, 412, 413, 627, 687, 782], "digamma": [53, 76, 366], "7549271": [53, 337, 366], "92278427": [53, 76, 337, 366], "9988394": [53, 337, 366], "erfc": [53, 76, 366], "complementari": [53, 76, 328, 338, 363, 366, 859, 867], "84270084e": [53, 338], "80259693e": [53, 338], "toward": [53, 60, 76, 83, 243, 290, 339, 351, 366, 372, 381, 481, 515, 621, 628, 697, 802, 806, 808, 809, 825, 840, 857, 861], "float_pow": [53, 76, 366], "fmax": [53, 76, 366], "fmod": [53, 76, 621], "divis": [53, 54, 55, 76, 77, 78, 230, 236, 243, 245, 278, 280, 290, 372, 461, 573, 581, 595, 604, 605, 610, 621, 623, 624, 625, 638, 645, 646, 786, 828, 837], "frexp": [53, 76, 366], "edge_ord": [53, 76, 343, 366], "estim": [53, 76, 343, 366, 381, 512, 800], "boundari": [53, 62, 76, 85, 96, 320, 321, 343, 363, 366, 369, 404, 632, 731, 861], "33333333": [53, 76, 277, 343, 366, 443, 621], "hypot": [53, 76, 366], "hypotenus": [53, 344, 366], "4031": [53, 344, 366], "8102": [53, 344, 366], "isclos": [53, 76, 366, 814], "ldexp": [53, 76, 366], "lerp": [53, 76, 366], "lgamma": [53, 76, 366], "45373654": [53, 348, 366], "6477685": [53, 348, 366], "modf": [53, 76, 366], "fraction": [53, 76, 349, 366, 381, 522, 625, 648], "nansum": [53, 76, 366], "accumul": [53, 76, 350, 366, 372, 480], "nextaft": [53, 76, 366], "0e": [53, 55, 76, 78, 351, 366, 610, 624], "4013e": [53, 76, 351, 366], "4028e": [53, 76, 351, 366], "signbit": [53, 76, 366], "637": [53, 76, 353, 366], "0909": [53, 76, 353, 366], "sparsify_tensor": [53, 76, 366], "sparsifi": [53, 76, 354, 366], "arang": [53, 58, 66, 76, 81, 133, 354, 366, 369, 370, 387, 388, 389, 396, 401, 405, 406, 407, 410, 419, 434, 467, 562, 603, 618, 623, 626, 629, 636, 668, 684, 706, 707, 749, 802, 820, 831, 868], "xlogi": [53, 76, 366], "0986": [53, 76, 355, 366], "3863": [53, 76, 355, 366], "0000": [53, 76, 309, 310, 313, 355, 363, 366, 370, 372, 432, 469], "zeta": [53, 76, 366], "0369": [53, 76, 356, 366], "_arraywithgeneralexperiment": [53, 98], "init_valu": [53, 76, 80, 357, 367, 369, 411], "reduct": [53, 54, 59, 67, 70, 76, 77, 80, 82, 90, 357, 367, 369, 371, 372, 411, 443, 444, 445, 446, 447, 448, 449, 450, 480, 536, 566, 567, 623, 627, 637, 686, 687, 688, 757, 758, 783, 820, 828, 831, 835, 842], "_arraywithgradientsexperiment": [53, 98], "_arraywithimageexperiment": [53, 98], "_arraywithlayersexperiment": [53, 98], "adaptive_avg_pool1d": [53, 76, 369], "1d": [53, 76, 93, 94, 369, 370, 372, 381, 383, 390, 392, 394, 400, 433, 453, 458, 480, 484, 512, 766, 782], "adapt": [53, 76, 78, 369, 383, 384, 385, 611, 624, 782, 786, 851], "pool": [53, 76, 80, 369, 383, 384, 385, 387, 388, 389, 405, 406, 407, 408, 411, 782, 809], "plane": [53, 76, 236, 239, 241, 269, 281, 282, 283, 286, 369, 372, 383, 384, 385, 481, 621], "l_in": [53, 76, 369, 383], "spatial": [53, 57, 76, 80, 369, 375, 383, 384, 385, 404, 411, 415, 491, 492, 493, 496, 625, 638, 639, 640, 641, 643, 645, 647, 785], "Will": [53, 76, 369, 383, 384, 385, 791, 846], "l_out": [53, 76, 369, 383], "nhwc": [53, 57, 76, 80, 369, 375, 384, 388, 393, 406, 410, 496, 625, 638, 641, 642, 645, 646, 647, 782], "3d": [53, 58, 76, 369, 384, 392, 393, 455, 626, 664, 782, 838], "4d": [53, 76, 369, 370, 375, 384, 393, 394, 441, 496], "s_0": [53, 76, 369, 384, 385], "s_1": [53, 76, 369, 384, 385], "adaptive_max_pool2d": [53, 76, 369], "h_in": [53, 76, 369, 385], "w_in": [53, 76, 369, 385], "avg_pool1d": [53, 76, 369], "kernel": [53, 57, 76, 80, 369, 387, 388, 389, 405, 406, 407, 408, 625, 651, 840, 846, 861, 864, 865], "nwc": [53, 57, 76, 80, 369, 387, 392, 405, 408, 625, 638, 639, 640, 645, 646, 782], "count_include_pad": [53, 76, 369, 387, 388, 389, 782], "d_in": [53, 57, 76, 80, 369, 387, 388, 389, 391, 396, 397, 401, 405, 406, 407, 408, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647], "algorithm": [53, 57, 69, 76, 80, 106, 369, 370, 387, 388, 389, 404, 405, 406, 407, 408, 436, 438, 442, 626, 639, 641, 642, 643, 644, 647, 675, 778, 782, 796, 820, 832, 838, 846, 861, 863, 865], "ncw": [53, 57, 76, 80, 369, 387, 392, 393, 405, 408, 625, 638, 639, 640, 645, 646, 782], "avg_pool2d": [53, 76, 369], "divisor_overrid": [53, 76, 369, 387, 388, 389, 782], "avg_pool3d": [53, 76, 369], "ndhwc": [53, 57, 76, 80, 369, 389, 394, 407, 625, 638, 643, 644, 645, 646, 782], "volum": [53, 57, 76, 80, 369, 389, 391, 396, 397, 401, 407, 625, 643, 644], "ncdhw": [53, 57, 76, 80, 369, 389, 394, 407, 625, 638, 643, 644, 645, 646, 782], "dct": [53, 76, 369, 782, 843], "truncat": [53, 76, 369, 370, 390, 396, 400, 401, 402, 413, 440, 569, 623, 782, 824, 843], "larger": [53, 60, 66, 76, 83, 89, 161, 369, 390, 397, 400, 402, 413, 619, 628, 636, 689, 697, 754, 756, 782, 835, 838, 868], "ortho": [53, 76, 369, 390, 391, 396, 397, 400, 401, 402, 412, 413, 782], "onesid": [53, 76, 369, 391], "fft": [53, 76, 369, 391, 397, 412, 413, 416, 782, 808, 861], "symmetri": [53, 369, 391], "rfft": [53, 76, 369, 391, 413], "invok": [53, 369, 391, 802, 826, 854, 855], "batch_idx": [53, 369, 391], "signal_dim1": [53, 369, 391], "signal_dim2": [53, 369, 391], "signal_dimn": [53, 369, 391], "signal_dim": [53, 369, 391], "embed": [53, 76, 369, 371, 443, 625, 652, 768, 782, 861], "max_norm": [53, 54, 76, 77, 369, 395, 530, 531, 623, 782], "ifft": [53, 76, 369, 396, 402, 782], "pi": [53, 76, 282, 286, 369, 371, 396, 401, 448, 616, 621], "44509285e": [53, 76, 369, 396], "14423775e": [53, 76, 369, 396], "17j": [53, 76, 369, 396, 401], "11483250e": [53, 76, 369, 396], "16j": [53, 76, 369, 396, 401], "33486982e": [53, 76, 369, 396], "22464680e": [53, 76, 369, 396], "95799250e": [53, 76, 369, 396], "66951701e": [53, 76, 369, 396], "fft2": [53, 369], "vari": [53, 64, 93, 94, 287, 397, 535, 621, 623, 626, 634, 674, 740, 741, 742, 796, 818, 822, 832, 835, 842], "20477401j": [53, 369, 397], "0614962j": [53, 369, 397], "idct": [53, 76, 369], "49862671": [53, 76, 369, 390, 400], "37691498": [53, 76, 369, 390, 400], "00390816": [53, 76, 369, 390, 400], "58938599": [53, 76, 369, 390, 400], "92713165": [53, 76, 369, 390, 400], "078475": [53, 76, 369, 390, 400], "19664812": [53, 76, 369, 390, 400], "95411837": [53, 76, 369, 390, 400], "30636606e": [53, 76, 369, 401], "43029718e": [53, 76, 369, 401], "18j": [53, 76, 369, 396, 401], "53080850e": [53, 76, 369, 401], "58689626e": [53, 76, 369, 401], "24474906e": [53, 76, 369, 401], "91858728e": [53, 76, 369, 401], "01435406e": [53, 76, 369, 401], "ifftn": [53, 76, 369], "24730653": [53, 76, 369, 402], "90832391j": [53, 76, 369, 402], "49495562": [53, 76, 369, 402], "9039565j": [53, 76, 369, 402], "98193269": [53, 76, 369, 402], "49560517j": [53, 76, 369, 402], "93280757": [53, 76, 369, 402], "48075343j": [53, 76, 369, 402], "28526384": [53, 76, 369, 402], "3351205j": [53, 76, 369, 402], "2343787": [53, 76, 369, 402], "83528011j": [53, 76, 369, 402], "18791352": [53, 76, 369, 402], "30690572j": [53, 76, 369, 402], "82115787": [53, 76, 369, 402], "96195183j": [53, 76, 369, 402], "44719226": [53, 76, 369, 402], "72654048j": [53, 76, 369, 402], "51476765": [53, 369, 402], "66160417j": [53, 369, 402], "04319742": [53, 369, 402], "05411636j": [53, 369, 402], "015561": [53, 369, 402], "04216015j": [53, 369, 402], "06310689": [53, 369, 402], "05347854j": [53, 369, 402], "13392983": [53, 369, 402], "16052352j": [53, 369, 402], "08371392": [53, 369, 402], "17252843j": [53, 369, 402], "0031429": [53, 369, 402], "05421245j": [53, 369, 402], "10446617": [53, 369, 402], "17747098j": [53, 369, 402], "05344324": [53, 369, 402], "07972424j": [53, 369, 402], "8344667": [53, 76, 369, 402], "98222595j": [53, 76, 369, 402], "48472244": [53, 76, 369, 402], "30233797j": [53, 76, 369, 402], "recompute_scale_factor": [53, 76, 369, 404, 838], "antialia": [53, 76, 369, 404, 838], "height": [53, 54, 57, 76, 77, 80, 369, 404, 535, 623, 625, 641, 642, 643, 644, 647, 811, 843], "width": [53, 54, 57, 76, 77, 80, 369, 370, 372, 375, 381, 404, 423, 475, 496, 515, 535, 623, 625, 639, 640, 641, 642, 643, 644, 647, 652], "trilinear": [53, 76, 369, 404, 838], "nearest_exact": [53, 76, 369, 404, 838], "tf_area": [53, 76, 369, 404, 838], "mitchellcub": [53, 76, 369, 404, 838], "lanczos3": [53, 76, 369, 404, 838], "lanczos5": [53, 76, 369, 404, 838], "gaussian": [53, 76, 106, 369, 404, 615, 838], "overwrit": [53, 70, 76, 209, 369, 404, 620, 810, 831, 832, 840], "thu": [53, 76, 230, 243, 278, 286, 287, 369, 370, 404, 422, 621, 626, 661, 662, 808, 819, 824, 829, 832, 836], "antialias": [53, 76, 404], "max_pool1d": [53, 76, 369], "dilaton": [53, 76, 405, 406, 407], "max_pool3d": [53, 76, 369], "max_unpool1d": [53, 76, 369], "unpool": [53, 76, 369, 408], "reduce_window": [53, 80, 369], "window_dimens": [53, 80, 369, 411], "window_strid": [53, 80, 369, 411], "base_dil": [53, 80, 369, 411], "window_dil": [53, 80, 369, 411], "trim": [53, 70, 76, 369, 372, 412, 486], "orthonorm": [53, 58, 76, 81, 369, 412, 626, 674, 677], "8660254j": [53, 76, 369, 412], "rfftn": [53, 76, 369], "sliding_window": [53, 76, 369], "window_s": [53, 76, 369, 415], "frame_length": [53, 76, 369, 416], "frame_step": [53, 76, 369, 416], "fft_length": [53, 76, 369, 416], "window_fn": [53, 76, 369, 416], "pad_end": [53, 76, 369, 416], "smallest": [53, 70, 76, 161, 164, 232, 369, 372, 416, 485, 619, 621, 626, 668, 766, 768, 769], "enclos": [53, 76, 369, 416, 862], "window_length": [53, 76, 307, 309, 312, 313, 328, 363, 369, 416], "li": [53, 76, 369, 370, 381, 416, 423, 522, 850], "past": [53, 76, 369, 416, 810, 814, 833, 835, 847, 861], "fft_unique_bin": [53, 76, 369, 416], "complex64": [53, 73, 76, 154, 168, 177, 183, 249, 276, 369, 412, 416, 619, 621, 626, 675, 677, 678, 767, 820, 825], "complex128": [53, 76, 77, 154, 155, 168, 177, 183, 369, 416, 561, 619, 623, 626, 662, 663, 668, 684, 766, 767, 806, 820, 825], "compon": [53, 76, 138, 139, 217, 218, 219, 222, 225, 234, 236, 237, 239, 241, 269, 271, 272, 279, 282, 283, 286, 287, 318, 322, 333, 363, 366, 369, 370, 375, 416, 427, 436, 496, 618, 621, 633, 737, 802, 834, 840, 851, 857, 862, 864], "linear_algebra": [53, 58, 76, 81, 626, 836], "_arraywithlinearalgebraexperiment": [53, 98], "adjoint": [53, 58, 76, 81, 370, 437, 626, 665, 676, 677, 766], "batched_out": [53, 76, 370], "j1": [53, 76, 370, 418], "jn": [53, 76, 370, 418], "k1": [53, 76, 370, 418], "km": [53, 76, 370, 418], "outer": [53, 58, 76, 81, 93, 370, 418, 626, 629, 705, 706, 707, 796, 808], "30000001": [53, 76, 370, 418, 535, 623, 634, 740], "40000001": [53, 57, 69, 76, 98, 99, 108, 111, 292, 361, 370, 418, 615, 625, 634, 655, 740], "60000002": [53, 76, 89, 99, 370, 375, 418, 495, 497, 751], "80000001": [53, 76, 370, 375, 418, 495, 497], "60000001": [53, 76, 370, 418], "90000004": [53, 76, 370, 418, 636, 751], "20000002": [53, 76, 370, 418], "20000005": [53, 55, 76, 292, 299, 302, 303, 361, 370, 418, 604], "00000012": [53, 76, 370, 418], "49999994": [53, 76, 370, 418], "00000006": [53, 76, 370, 418], "60000014": [53, 76, 370, 418], "19999993": [53, 76, 370, 418], "80000007": [53, 76, 370, 418], "20000017": [53, 76, 370, 418], "89999992": [53, 76, 370, 418], "60000008": [53, 76, 370, 418], "80000019": [53, 76, 347, 366, 370, 418], "4000001": [53, 76, 80, 370, 418, 625, 648, 655], "cond": [53, 76, 119, 370, 617, 846], "933034373659268": [53, 419], "diagflat": [53, 76, 370, 429, 432], "offset": [53, 58, 61, 72, 76, 81, 84, 130, 370, 375, 420, 491, 492, 493, 618, 626, 631, 660, 681, 727, 773], "padding_valu": [53, 76, 370, 420], "right_left": [53, 76, 370, 420], "num_row": [53, 76, 370, 420], "num_col": [53, 76, 370, 420], "dot": [53, 57, 76, 80, 93, 370, 371, 434, 443, 625, 626, 652, 655, 683, 796, 802, 809, 819], "eig": [53, 58, 76, 370, 626, 662, 663], "37228132": [53, 76, 370, 422, 424, 661], "82456484": [53, 422, 661], "41597356": [53, 422, 661], "56576746": [53, 422, 661], "90937671": [53, 422, 661], "eigh_tridiagon": [53, 76, 370], "eigvals_onli": [53, 76, 370, 423], "select_rang": [53, 76, 370, 423], "tol": [53, 76, 97, 370, 423, 436, 442], "eigenvalu": [53, 58, 76, 81, 93, 94, 370, 422, 423, 424, 626, 661, 662, 663, 670], "eigenvector": [53, 76, 370, 422, 423, 626, 661, 662], "interv": [53, 62, 67, 76, 85, 90, 122, 133, 134, 141, 370, 381, 423, 515, 618, 626, 628, 632, 637, 657, 683, 689, 692, 700, 729, 731, 757, 758], "togeth": [53, 70, 76, 329, 345, 366, 370, 423, 787, 802, 811, 815, 818, 820, 831, 832, 835, 836, 838, 844, 845, 846, 851, 859, 861, 862, 867], "cluster": [53, 76, 370, 423, 846, 861], "converg": [53, 76, 370, 423, 852], "_2": [53, 76, 370, 423], "eig_val": [53, 76, 370, 423], "decreas": [53, 76, 370, 423, 768], "eig_vector": [53, 76, 370, 423], "38196": [53, 423], "61803": [53, 423], "eigval": [53, 76, 370], "general_inner_product": [53, 81, 370], "n_mode": [53, 81, 370, 425], "tradit": [53, 81, 370, 425], "inner": [53, 58, 72, 81, 102, 137, 370, 422, 425, 618, 626, 629, 661, 662, 667, 705, 706, 707, 796, 808, 831], "higher_order_mo": [53, 76, 370], "n_featur": [53, 76, 370, 426], "d1": [53, 76, 370, 426], "dn": [53, 76, 370, 426], "initialize_tuck": [53, 76, 370], "svd": [53, 58, 76, 81, 96, 370, 427, 431, 436, 438, 439, 440, 442, 626, 678], "truncated_svd": [53, 76, 370, 427, 436, 439, 442], "non_neg": [53, 76, 322, 363, 370, 427], "mask": [53, 57, 76, 80, 93, 369, 370, 372, 414, 427, 428, 436, 442, 482, 545, 623, 625, 648, 652, 655, 838], "svd_mask_repeat": [53, 76, 370, 427, 436, 442], "tuckertensor": [53, 76, 97, 322, 363, 370, 427, 436, 442], "scheme": [53, 76, 370, 427, 436, 814, 844, 861], "tucker": [53, 76, 322, 363, 370, 427, 436], "decomposit": [53, 58, 76, 81, 93, 94, 96, 318, 319, 320, 321, 322, 363, 370, 427, 436, 439, 441, 442, 626, 656, 662, 666, 674, 677, 808, 868], "miss": [53, 76, 370, 372, 427, 436, 442, 482, 786, 808, 809, 815, 818, 819, 822, 832, 835, 838], "everywher": [53, 76, 370, 427, 436, 442], "imput": [53, 76, 370, 427, 436, 442], "kron": [53, 76, 370, 432, 868], "make_svd_non_neg": [53, 76, 370, 440], "nntype": [53, 76, 370, 431], "nndsvd": [53, 76, 370, 431], "singular": [53, 58, 76, 81, 370, 427, 431, 438, 440, 626, 668, 670, 673, 677, 678, 766, 768, 820], "nndsvda": [53, 76, 370, 431], "boutsidi": [53, 76, 370, 431], "gallopoulo": [53, 76, 370, 431], "pattern": [53, 54, 76, 77, 370, 431, 535, 536, 537, 623, 820, 823, 834, 852], "recognit": [53, 76, 370, 431, 805], "1350": [53, 76, 370, 431], "1362": [53, 76, 370, 431], "2008": [53, 76, 370, 431, 861], "matrix_exp": [53, 76, 370], "7183": [53, 76, 370, 432], "3891": [53, 76, 370, 432], "mode_dot": [53, 76, 92, 93, 97, 370], "matrix_or_vector": [53, 76, 93, 97, 370, 433], "i_1": [53, 76, 93, 94, 370, 433], "i_k": [53, 76, 93, 370, 433], "i_n": [53, 76, 93, 370, 433], "i_": [53, 76, 93, 370, 381, 433, 515], "multi_dot": [53, 76, 370], "148": [53, 75, 76, 239, 370, 434], "multi_mode_dot": [53, 76, 370], "mat_or_vec_list": [53, 76, 370, 435], "times_0": [53, 370, 435], "vec": [53, 370, 435], "times_1": [53, 370, 435], "cdot": [53, 269, 370, 435, 621], "times_n": [53, 370, 435], "partial_tuck": [53, 76, 370], "n_iter_max": [53, 76, 370, 436, 442], "verbos": [53, 76, 370, 436, 439, 442, 800, 835, 840], "return_error": [53, 76, 370, 436, 442], "variat": [53, 76, 370, 436, 442, 822, 832, 835], "reconstruct": [53, 58, 64, 76, 87, 96, 370, 372, 436, 442, 488, 626, 634, 677, 739, 741, 833], "return_erro": [53, 370, 436, 442], "svd_flip": [53, 76, 370], "u_based_decis": [53, 76, 370, 438], "basi": [53, 76, 370, 438, 810, 814, 843], "flip": [53, 60, 76, 83, 93, 227, 370, 372, 438, 466, 467, 621, 628, 831, 842, 843, 845], "decis": [53, 76, 370, 438, 802, 814, 820, 838, 840, 842, 861], "u_adjust": [53, 76, 370, 438], "v_adjust": [53, 76, 370, 438], "tensor_train": [53, 76, 370], "tt": [53, 76, 321, 363, 370, 439, 441], "kth": [53, 370, 439], "tttensor": [53, 96, 321, 363, 370, 439], "compute_uv": [53, 58, 76, 81, 370, 440, 626, 677], "n_eigenvec": [53, 76, 370, 440], "returnedv": [53, 440], "vh": [53, 58, 76, 81, 370, 440, 626, 677], "eigen": [53, 76, 370, 440], "namedtupl": [53, 58, 64, 76, 81, 87, 370, 372, 422, 440, 488, 626, 634, 661, 662, 674, 675, 677, 739, 740, 741], "tt_matrix_to_tensor": [53, 76, 370], "known": [53, 76, 280, 370, 439, 441, 621, 781, 814, 819, 820, 832, 835], "rank_k": [53, 76, 370, 441], "left_dim_k": [53, 76, 370, 441], "right_dim_k": [53, 76, 370, 441], "rank_": [53, 76, 370, 441], "49671414": [53, 76, 370, 441, 632, 730], "1382643": [53, 76, 370, 441, 632, 730], "64768857": [53, 76, 370, 441, 632, 730], "5230298": [53, 76, 370, 441, 632, 730], "23415337": [53, 76, 370, 441, 632, 730], "23413695": [53, 76, 370, 441, 632, 730], "57921278": [53, 76, 370, 441], "76743472": [53, 76, 370, 441], "1163073": [53, 76, 370, 441], "11629914": [53, 76, 370, 441], "03237505": [53, 76, 370, 441], "03237278": [53, 76, 370, 441], "78441733": [53, 76, 370, 441], "38119566": [53, 76, 370, 441], "21834874": [53, 76, 370, 441], "10610882": [53, 76, 370, 441], "15165846": [53, 76, 370, 441], "15164782": [53, 76, 370, 441], "35662258": [53, 76, 370, 441], "35659757": [53, 76, 370, 441], "02283812": [53, 76, 370, 441], "49705869": [53, 76, 370, 441], "40518808": [53, 76, 370, 441], "16882598": [53, 76, 370, 441], "fixed_factor": [53, 76, 370, 442], "tl": [53, 76, 370, 442], "kolda": [53, 76, 370, 442], "bader": [53, 76, 370, 442], "siam": [53, 76, 370, 439, 442], "review": [53, 76, 370, 442, 804, 805, 808, 810, 817, 819, 822, 832, 836], "vol": [53, 76, 370, 442], "pp": [53, 76, 370, 442], "455": [53, 76, 370, 442], "2009": [53, 76, 370, 442], "_arraywithlossesexperiment": [53, 98], "hinge_embedding_loss": [53, 76, 371], "margin": [53, 76, 371, 443, 450, 832], "measur": [53, 371, 443, 625, 652, 782], "semi": [53, 371, 443], "supervis": [53, 371, 443], "l_n": [53, 371, 443], "x_n": [53, 371, 443], "y_n": [53, 371, 443], "ell": [53, 371, 443], "operatornam": [53, 280, 282, 371, 443, 621, 626, 662], "l_1": [53, 371, 443], "Its": [53, 371, 443, 861], "hyperparamet": [53, 76, 371, 443], "aggreg": [53, 76, 371, 443, 634, 739, 819], "unreduc": [53, 76, 371, 443], "hing": [53, 76, 371, 443, 450], "input_tensor": [53, 76, 370, 371, 439, 443, 448, 832], "target_tensor": [53, 371, 443, 448], "huber_loss": [53, 76, 371], "delta": [53, 55, 76, 78, 371, 444, 604, 624], "transit": [53, 76, 371, 444, 861], "huber": [53, 76, 371, 444], "kl_div": [53, 76, 371], "log_target": [53, 76, 371, 445], "contai": [53, 445], "batchmean": [53, 371, 445], "kullback": [53, 76, 371, 445], "leibler": [53, 76, 371, 445], "0916": [53, 445], "l1_loss": [53, 76, 371, 447], "l1": [53, 58, 76, 81, 371, 375, 444, 446, 447, 449, 494, 626, 684, 818, 843], "targetict": [53, 76, 371, 446, 447, 449, 450], "20000000000000004": [53, 446], "log_poisson_loss": [53, 76, 371], "compute_full_loss": [53, 76, 371, 447, 783], "favor": [53, 76, 371, 447], "likelihood": [53, 76, 371, 447, 448], "28402555": [53, 371, 447], "03402555": [53, 371, 447], "1573164": [53, 371, 447], "poisson_nll_loss": [53, 76, 371], "log_input": [53, 76, 371, 448], "poisson": [53, 76, 371, 376, 447, 448], "assumpt": [53, 371, 447, 448], "minu": [53, 371, 447, 448], "omiss": [53, 371, 448], "stirl": [53, 76, 371, 447, 448], "describ": [53, 66, 76, 94, 219, 236, 237, 269, 272, 274, 371, 376, 379, 448, 502, 505, 621, 625, 636, 652, 749, 753, 755, 804, 808, 809, 810, 817, 819, 831, 832, 835, 840, 845, 861], "prevent": [53, 55, 76, 78, 371, 448, 547, 604, 605, 610, 623, 624, 625, 636, 648, 755, 781, 786, 808, 810, 819, 820, 824, 831, 832, 836], "1978": [53, 448], "smooth_l1_loss": [53, 76, 371], "smooth": [53, 59, 76, 82, 371, 444, 449, 627, 686, 687, 688, 830], "8125": [53, 449], "soft_margin_loss": [53, 76, 371], "soft": [53, 76, 302, 371, 372, 450, 482, 821], "35667497": [53, 450, 627, 687], "22314353": [53, 450], "60943791": [53, 450], "manipul": [53, 76, 831, 832, 836, 838, 840, 845, 850, 861], "_arraywithmanipulationexperiment": [53, 98], "as_strid": [53, 76, 372], "nativeshap": [53, 57, 60, 62, 76, 83, 85, 123, 124, 126, 131, 138, 144, 372, 376, 451, 463, 468, 476, 479, 498, 499, 500, 501, 502, 567, 580, 585, 587, 618, 623, 625, 628, 632, 638, 640, 642, 644, 646, 696, 729, 730, 731, 827, 829], "byte": [53, 54, 72, 76, 77, 98, 130, 372, 451, 561, 618, 623, 866, 867], "associative_scan": [53, 76, 372], "revers": [53, 54, 58, 66, 76, 81, 89, 98, 99, 360, 368, 369, 370, 372, 381, 414, 430, 452, 466, 467, 513, 514, 534, 623, 626, 628, 636, 682, 693, 747, 748, 808, 818, 819, 820, 822, 823, 831, 832, 838, 845, 846], "scan": [53, 76, 372, 452, 846], "atleast_1d": [53, 76, 372], "ari": [53, 76, 372, 453, 454, 455, 461, 470, 489], "a1": [53, 77, 372, 453, 454, 455, 459, 527], "a2": [53, 77, 372, 453, 454, 455, 459, 527], "atleast_2d": [53, 76, 372], "atleast_3d": [53, 76, 372], "column_stack": [53, 76, 372], "concat_from_sequ": [53, 76, 372], "input_sequ": [53, 76, 372, 460], "new_axi": [53, 76, 372, 460, 845], "dsplit": [53, 76, 372], "indices_or_sect": [53, 76, 372, 461, 470, 489], "3rd": [53, 76, 372, 461], "dstack": [53, 76, 372], "fill_diagon": [53, 76, 372], "fill_diag": [53, 464], "fortran": [53, 60, 76, 83, 372, 465, 628, 696, 861, 865], "layout": [53, 60, 76, 83, 372, 465, 628, 696, 816, 831, 832, 838], "fliplr": [53, 76, 372, 831], "diag": [53, 58, 76, 81, 94, 372, 466, 467, 626, 662, 840], "flipud": [53, 76, 372, 831], "fold": [53, 76, 372, 476, 477, 819], "unfold": [53, 76, 93, 94, 96, 370, 372, 427, 468, 476, 478], "folded_tensor": [53, 372, 468], "heavisid": [53, 76, 372], "5000": [53, 372, 469, 626, 665, 796], "hsplit": [53, 76, 372], "horizont": [53, 76, 372, 459, 470, 535, 623], "hstack": [53, 76, 372, 459], "i0": [53, 76, 372, 381, 515], "bessel": [53, 66, 76, 89, 312, 363, 372, 472, 636, 754, 756], "kind": [53, 66, 76, 161, 164, 165, 381, 472, 513, 514, 519, 619, 636, 747, 748, 753, 755, 766, 767, 807, 832, 835, 838, 840, 846], "26606588": [53, 76, 372, 472], "2795853": [53, 76, 372, 472], "88079259": [53, 76, 372, 472], "row_mod": [53, 76, 372, 473], "column_mod": [53, 76, 372, 473], "ascend": [53, 65, 76, 88, 372, 379, 473, 505, 635, 743, 745, 811], "prod": [53, 54, 66, 77, 89, 370, 372, 428, 430, 473, 521, 536, 623, 636, 766, 796, 820, 822, 840], "moveaxi": [53, 76, 372], "destin": [53, 76, 372, 474], "unstack": [53, 60, 70, 83, 474, 628, 818, 840, 843, 868], "reorder": [53, 60, 76, 83, 372, 474, 535, 623, 628, 693, 834], "stat_length": [53, 76, 372, 475], "constant_valu": [53, 76, 372, 475], "end_valu": [53, 76, 372, 475], "reflect_typ": [53, 76, 372, 475], "partial_fold": [53, 76, 372], "skip_begin": [53, 76, 372, 476, 477, 478, 479], "untouch": [53, 76, 372, 476, 477, 478, 479], "partial_tensor_to_vec": [53, 76, 372], "skip_end": [53, 76, 372, 477, 478], "vectoris": [53, 76, 93, 372, 477, 479], "partial_unfold": [53, 76, 372], "ravel_tensor": [53, 76, 372, 478], "n_1": [53, 76, 372, 478], "n_2": [53, 76, 372, 478], "n_i": [53, 76, 370, 372, 428, 478], "partial_vec_to_tensor": [53, 76, 372], "put_along_axi": [53, 76, 372], "rot90": [53, 76, 372, 831], "rotat": [53, 76, 372, 481], "soft_threshold": [53, 76, 372], "behav": [53, 76, 330, 331, 366, 370, 372, 422, 483, 626, 661, 814, 824, 829, 831, 832, 833, 842, 862], "invalid": [53, 67, 76, 90, 372, 483, 626, 628, 637, 683, 692, 757, 758, 766, 809, 820], "slice": [53, 66, 70, 76, 77, 89, 94, 143, 323, 363, 372, 458, 480, 483, 484, 542, 543, 545, 571, 618, 623, 630, 636, 717, 752, 861], "inexact": [53, 76, 340, 366, 372, 483], "largest": [53, 70, 76, 161, 164, 370, 372, 438, 483, 485, 619, 626, 668, 677], "take_along_axi": [53, 76, 372], "arr": [53, 54, 73, 76, 169, 372, 458, 480, 484, 567, 619, 820, 821], "top_k": [53, 76, 372], "sort": [53, 64, 70, 76, 87, 99, 288, 370, 372, 381, 422, 485, 505, 519, 621, 626, 634, 661, 662, 677, 678, 739, 743, 744, 745, 768, 802, 807, 819, 834, 836], "trim_zero": [53, 76, 372], "fb": [53, 76, 372, 486], "front": [53, 76, 372, 486, 832, 839, 840, 843, 850, 859, 861], "unfolded_tensor": [53, 372, 487], "unique_consecut": [53, 76, 372], "vsplit": [53, 76, 372], "vertic": [53, 76, 372, 489, 490, 535, 623, 810], "_arraywithnormsexperiment": [53, 98], "varianc": [53, 66, 76, 89, 375, 491, 493, 636, 756, 781, 785], "nsc": [53, 76, 375, 491, 492, 493, 785], "braodcast": [53, 76, 375, 491], "running_mean": [53, 76, 375, 491, 493, 785], "running_var": [53, 76, 375, 491, 493, 785], "nc": [53, 76, 375, 491, 492, 493, 785], "group_norm": [53, 76, 375], "num_group": [53, 76, 375, 492], "group": [53, 76, 372, 375, 488, 492, 625, 630, 638, 645, 646, 710, 800, 811, 814, 818, 820, 828, 832, 833, 857, 860, 866], "instance_norm": [53, 76, 375], "l1_normal": [53, 76, 375], "33333334": [53, 375, 494, 497, 606, 624, 625, 626, 647, 684], "33333337": [53, 133, 375, 494, 606, 618, 624], "28571439": [53, 375, 494], "l2_normal": [53, 76, 375, 497], "l2": [53, 58, 81, 92, 93, 375, 495, 497, 626, 684, 782, 818], "44721359": [53, 76, 375, 495, 497], "89442718": [53, 76, 375, 495, 497], "lp_normal": [53, 76, 375], "lp": [53, 375, 497], "_arraywithrandomexperiment": [53, 98], "bernoulli": [53, 76, 369, 376, 392, 393, 394], "event": [53, 76, 376, 498, 835], "entri": [53, 60, 70, 76, 83, 87, 94, 133, 370, 372, 376, 437, 464, 466, 467, 498, 618, 628, 630, 698, 721, 739, 809, 819, 835, 861], "parameter": [53, 62, 76, 85, 376, 498, 499, 501, 502, 632, 728, 730, 731], "odd": [53, 76, 274, 372, 376, 475, 498, 621, 796, 807, 814], "drawn": [53, 62, 76, 85, 376, 498, 499, 500, 501, 502, 632, 728, 729, 730, 731, 766, 767, 768, 781, 835], "dirichlet": [53, 76, 376], "10598304": [53, 376, 500], "21537054": [53, 376, 500], "67864642": [53, 376, 500], "48006698": [53, 376, 500], "07472073": [53, 376, 500], "44521229": [53, 376, 500], "55479872": [53, 376, 500], "05426367": [53, 376, 500], "39093761": [53, 376, 500], "19531053": [53, 376, 500], "51675832": [53, 376, 500], "28793114": [53, 376, 500], "12315625": [53, 376, 500], "29823365": [53, 376, 500], "5786101": [53, 376, 500], "15564976": [53, 376, 500], "50542368": [53, 376, 500], "33892656": [53, 376, 500], "1325352": [53, 376, 500], "44439589": [53, 376, 500], "42306891": [53, 376, 500], "gamma": [53, 61, 76, 84, 337, 348, 366, 376, 381, 516, 631, 727], "rate": [53, 55, 76, 78, 369, 376, 410, 502, 605, 608, 610, 611, 612, 624, 625, 629, 650, 705, 706, 707, 786, 819], "lam": [53, 76, 376, 502], "_arraywithsearchingexperiment": [53, 98], "unravel_index": [53, 76, 377], "unravel": [53, 76, 377, 503], "_arraywithsetexperiment": [53, 98], "_arraywithsortingexperiment": [53, 98], "lexsort": [53, 76, 379], "indirectli": [53, 76, 379, 505], "statist": [53, 76, 91, 372, 475, 785, 800, 808, 820, 835, 836, 861], "_arraywithstatisticalexperiment": [53, 98], "bincount": [53, 76, 381], "minlength": [53, 76, 381, 510], "corrcoef": [53, 76, 381], "rowvar": [53, 76, 381, 511, 512], "relationship": [53, 76, 511, 781, 834], "cov": [53, 76, 381], "ddof": [53, 76, 381, 512], "fweight": [53, 76, 381, 512], "aweight": [53, 76, 381, 512], "overridden": [53, 76, 381, 512, 786, 815], "unbias": [53, 66, 76, 89, 381, 512, 636, 756], "typic": [53, 76, 329, 345, 366, 381, 512, 635, 745, 782, 814, 828, 860, 868], "assign": [53, 76, 93, 381, 512, 808, 810, 816, 820, 831, 834, 842], "covari": [53, 76, 381, 512], "cummax": [53, 76, 381], "exclus": [53, 54, 66, 70, 76, 77, 89, 122, 370, 381, 436, 513, 514, 554, 555, 558, 618, 623, 632, 636, 729, 747, 748, 805, 818, 820, 828, 845, 865, 867], "cumul": [53, 66, 76, 89, 381, 513, 514, 636, 747, 748], "uint64": [53, 66, 158, 163, 165, 166, 176, 178, 181, 381, 513, 514, 619, 636, 747, 748, 753, 755, 766, 767, 820, 835, 840], "uint16": [53, 66, 153, 158, 163, 164, 173, 381, 513, 514, 619, 636, 747, 748, 753, 755, 766, 767, 820, 832, 835, 840], "bit": [53, 66, 160, 161, 164, 227, 228, 230, 381, 513, 514, 619, 621, 636, 747, 748, 753, 755, 802, 807, 808, 809, 818, 819, 820, 822, 828, 840, 842, 867], "uint32": [53, 66, 158, 163, 164, 165, 187, 381, 513, 514, 619, 636, 747, 748, 753, 755, 766, 767, 820, 835, 840], "cummin": [53, 76, 381], "histogram": [53, 76, 381], "extend_lower_interv": [53, 76, 381, 515], "extend_upper_interv": [53, 76, 381, 515], "densiti": [53, 76, 381, 515], "monoton": [53, 76, 381, 515], "rightmost": [53, 76, 381, 515], "c1": [53, 76, 381, 515, 818], "ff": [53, 76, 381, 515], "c_": [53, 76, 94, 381, 515], "igamma": [53, 76, 381], "incomplet": [53, 76, 381, 516, 810], "3614": [53, 76, 381, 516], "2085": [53, 76, 381, 516], "median": [53, 76, 372, 381, 475, 519], "nanmean": [53, 76, 381], "6666666666666665": [53, 76, 381, 518], "nanmedian": [53, 76, 381], "overwrite_input": [53, 76, 381, 519], "treat": [53, 70, 76, 99, 274, 350, 366, 372, 375, 381, 484, 496, 519, 521, 621, 763, 830, 835, 841, 845], "undefin": [53, 76, 372, 381, 382, 475, 519, 523, 820, 824, 830], "nanmin": [53, 76, 381], "nanprod": [53, 76, 381], "Not": [53, 76, 350, 366, 370, 381, 424, 521, 616, 816, 824, 833, 843, 844, 846], "quantil": [53, 76, 381], "inclus": [53, 76, 122, 381, 522, 618, 632, 729, 803, 816, 831, 838], "midpoint": [53, 76, 381, 522], "surround": [53, 76, 381, 522, 838], "whichev": [53, 76, 381, 522], "_arraywithutilityexperiment": [53, 98], "optional_get_el": [53, 76, 382], "empti": [53, 54, 66, 70, 77, 89, 122, 372, 382, 475, 523, 530, 567, 618, 623, 626, 630, 636, 637, 681, 684, 722, 752, 753, 755, 757, 758, 808, 809, 815, 817, 820, 821, 831], "_arraywithgener": [54, 98], "all_equ": [54, 77, 623], "equality_matrix": [54, 77, 524, 623], "array_equ": [54, 77, 623], "assert_supports_inplac": [54, 77, 623], "ivybackendexcept": [54, 77, 528, 552, 623, 797, 815, 821, 824, 825], "clip_matrix_norm": [54, 77, 623], "894": [54, 77, 530, 531, 623, 631, 727], "clip_vector_norm": [54, 77, 623], "default_v": [54, 534, 623], "catch_except": [54, 534, 623], "rev": [54, 534, 623], "with_cal": [54, 534, 623], "catch": [54, 534, 623, 829, 835], "einops_rearrang": [54, 77, 623], "axes_length": [54, 77, 535, 536, 537, 623], "arrang": [54, 535, 623], "rearrang": [54, 77, 535, 537, 623, 834], "einops_reduc": [54, 77, 623, 820], "einops_repeat": [54, 77, 623], "fourier_encod": [54, 77, 623], "max_freq": [54, 77, 539, 623], "oppos": [54, 77, 539, 623, 820], "geometr": [54, 77, 539, 623, 626, 682], "0000000e": [54, 77, 539, 623], "2246468e": [54, 77, 539, 623], "4492936e": [54, 539, 623], "6739404e": [54, 77, 539, 623], "batch_dim": [54, 77, 542, 543, 623, 788], "gather_nd": [54, 77, 623], "get_num_dim": [54, 77, 623], "as_arrai": [54, 77, 546, 580, 623, 788], "has_nan": [54, 77, 623], "include_inf": [54, 77, 548, 602, 623], "inplace_decr": [54, 77, 623], "val": [54, 70, 75, 77, 249, 372, 464, 550, 551, 552, 571, 572, 573, 621, 623, 820, 831, 842], "decrement": [54, 77, 550, 623], "inplace_incr": [54, 77, 623], "increment": [54, 77, 551, 623, 810, 861], "inplace_upd": [54, 77, 570, 623, 779, 831], "ensure_in_backend": [54, 77, 552, 623, 831], "keep_input_dtyp": [54, 77, 552, 623, 831], "is_arrai": [54, 77, 623, 831, 832], "is_ivy_arrai": [54, 77, 623, 831, 842], "is_ivy_contain": [54, 623], "is_native_arrai": [54, 77, 172, 555, 619, 623, 842], "isin": [54, 77, 623], "test_el": [54, 77, 559, 623], "assume_uniqu": [54, 77, 559, 623], "invert": [54, 77, 227, 559, 621, 623, 626, 669], "scatter_flat": [54, 77, 623], "occupi": [54, 161, 164, 566, 567, 619, 623], "scatter_nd": [54, 77, 623, 838, 842], "stable_divid": [54, 77, 623, 828], "denomin": [54, 61, 77, 84, 573, 581, 595, 623, 631, 727, 785, 828, 837, 846, 858], "min_denomin": [54, 77, 573, 581, 595, 623, 837], "_min_denomin": [54, 581, 623], "stable_pow": [54, 77, 623], "min_bas": [54, 77, 572, 582, 594, 623, 785, 837], "stabl": [54, 65, 77, 88, 143, 323, 330, 331, 363, 366, 379, 505, 572, 573, 581, 582, 594, 595, 618, 623, 635, 743, 746, 768, 809, 816, 820, 832, 837, 840, 846], "00004": [54, 77, 582, 623], "00008": [54, 77, 582, 623], "00004000e": [54, 582], "56002560e": [54, 582], "60001200e": [54, 582], "09602048e": [54, 582], "supports_inplace_upd": [54, 77, 623], "to_fil": 54, "fid": 54, "sep": 54, "format_": 54, "recov": [54, 824, 832], "to_scalar": [54, 77, 623], "value_is_nan": [54, 77, 623], "_arraywithgradi": [55, 98], "adam_step": [55, 78, 624], "mw": [55, 78, 604, 605, 624, 844], "vw": [55, 78, 604, 605, 624, 844], "beta1": [55, 78, 526, 604, 605, 610, 623, 624, 786, 844], "beta2": [55, 78, 526, 604, 605, 610, 623, 624, 786, 844], "epsilon": [55, 58, 59, 78, 81, 82, 526, 604, 605, 610, 623, 624, 626, 627, 670, 673, 686, 687, 688, 778, 783, 785, 786, 818, 828, 831, 844], "dc": [55, 78, 604, 605, 608, 610, 611, 612, 624], "dw": [55, 78, 604, 605, 608, 610, 611, 612, 624], "forget": [55, 78, 604, 605, 610, 624, 786, 802, 820], "dcdw": [55, 78, 604, 605, 608, 610, 611, 624], "adam_step_delta": [55, 78, 604, 624], "2020105": [55, 604, 624], "22187898": [55, 604, 624], "24144873": [55, 604, 624], "10000002": [55, 89, 292, 361, 604, 751], "00300002": [55, 604], "00800002": [55, 604], "adam_upd": [55, 78, 624, 844], "mw_tm1": [55, 78, 605, 610, 624], "vw_tm1": [55, 78, 605, 610, 624], "stop_gradi": [55, 78, 209, 526, 605, 608, 610, 611, 612, 620, 623, 624, 629, 705, 706, 707, 786, 844], "ws_new": [55, 78, 605, 610, 611, 612, 624], "updated_weight": [55, 78, 605, 624], "92558753": [55, 605], "92558873": [55, 605, 624], "92558718": [55, 605, 624], "00000063e": [55, 78, 605, 624], "00000016e": [55, 78, 605, 624], "00000086e": [55, 78, 605, 624], "gradient_descent_upd": [55, 78, 624, 629, 705, 706, 707], "descent": [55, 78, 608, 624, 786, 844, 861], "new_weight": [55, 78, 608, 610, 611, 624, 843], "lamb_upd": [55, 78, 624], "max_trust_ratio": [55, 78, 610, 624, 786], "decay_lambda": [55, 78, 610, 611, 624, 786], "trust": [55, 78, 610, 624, 786], "ratio": [55, 78, 610, 624, 786], "decai": [55, 78, 610, 611, 624, 786], "lamb": [55, 78, 610, 624, 786, 844], "784": [55, 610, 624], "lars_upd": [55, 78, 624], "lar": [55, 78, 611, 624, 786, 844], "34077978": [55, 611, 624], "78025991": [55, 611, 624], "56051969": [55, 611, 624], "78026009": [55, 611, 624], "56051981": [55, 611, 624], "12103939": [55, 611, 624], "optimizer_upd": [55, 78, 624], "effective_grad": [55, 78, 612, 624], "3e": [55, 78, 612, 624], "preserve_typ": [55, 78, 613, 624], "_arraywithimag": [56, 98], "_arraywithlay": [57, 98], "conv1d": [57, 80, 625, 782], "filter_format": [57, 80, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646], "channel_last": [57, 80, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646, 766], "x_dilat": [57, 80, 625, 638, 639, 641, 642, 643, 645], "d_out": [57, 80, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646], "channel_first": [57, 80, 625, 638, 639, 640, 641, 642, 643, 644, 645, 646], "wio": [57, 625, 638, 639, 640, 645], "conv1d_transpos": [57, 80, 625], "output_shap": [57, 80, 625, 638, 640, 642, 644, 646, 782], "iow": [57, 80, 625, 640], "woi": [57, 80, 625, 640], "fh": [57, 80, 625, 630, 638, 641, 642, 643, 644, 645, 646, 647, 720], "hwio": [57, 625, 638, 639, 641, 645], "conv2d_transpos": [57, 80, 625], "iohw": [57, 80, 625, 642], "hwoi": [57, 80, 625, 642], "conv3d": [57, 80, 625, 644, 782], "fd": [57, 80, 625, 638, 643, 644, 645, 646], "conv3d_transpos": [57, 80, 625, 646], "iodhw": [57, 80, 625, 644, 646], "dhwoi": [57, 80, 625, 644, 646], "depthwise_conv2d": [57, 80, 625], "randint": [57, 62, 64, 80, 85, 632, 634, 647, 651, 739, 820, 854], "noise_shap": [57, 80, 625, 648], "42857146": [57, 625, 648], "85714293": [57, 625, 648], "28571415": [57, 80, 625, 648], "71428585": [57, 80, 625, 648], "14285755": [57, 80, 625, 648], "5714283": [57, 625, 648], "4285717": [57, 80, 625, 648], "8571434": [57, 80, 625, 648], "2857151": [57, 625, 648], "dropout1d": [57, 80, 369], "droput1d": [57, 392, 393], "dropout2d": [57, 80, 369], "dropout3d": [57, 80, 369], "droput3d": [57, 394], "outer_batch_shap": [57, 80, 625, 649], "inner_batch_shap": [57, 80, 625, 649], "lstm_updat": [57, 80, 625, 840], "init_h": [57, 80, 625, 651, 840], "init_c": [57, 80, 625, 651, 840], "recurrent_kernel": [57, 80, 625, 651, 840], "recurrent_bia": [57, 80, 625, 651, 840], "hidden": [57, 80, 625, 650, 651, 782, 817, 824, 840, 844], "recurr": [57, 76, 80, 369, 414, 625, 651, 840, 861, 865], "timestep": [57, 76, 80, 369, 414, 625, 650, 651, 652, 782, 840], "h_i": [57, 80, 651], "c_i": [57, 80, 651], "rc": [57, 80, 651], "multi_head_attent": [57, 80, 625, 831], "num_head": [57, 80, 625, 652, 782], "in_proj_weight": [57, 80, 625, 652], "q_proj_weight": [57, 80, 625, 652], "k_proj_weight": [57, 80, 625, 652], "v_proj_weight": [57, 80, 625, 652], "out_proj_weight": [57, 80, 625, 652], "in_proj_bia": [57, 80, 625, 652], "out_proj_bia": [57, 80, 625, 652], "is_caus": [57, 80, 625, 652, 655], "key_padding_mask": [57, 80, 625, 652], "bias_k": [57, 80, 625, 652], "bias_v": [57, 80, 625, 652], "static_k": [57, 80, 625, 652], "static_v": [57, 80, 625, 652], "add_zero_attn": [57, 80, 625, 652], "return_attention_weight": [57, 80, 625, 652], "average_attention_weight": [57, 80, 625, 652], "scaled_dot_product_attent": [57, 80, 625], "dropout_p": [57, 80, 625, 655], "num_queri": [57, 80, 625, 655], "feat_dim": [57, 80, 625, 655], "num_kei": [57, 80, 625, 655], "causal": [57, 80, 625, 652, 655], "attent": [57, 80, 625, 652, 655, 782, 810, 815, 851], "29999995": [57, 292, 293, 302, 361, 625, 634, 655, 740], "19994521": [57, 625, 655], "09994531": [57, 625, 655], "30000019": [57, 372, 459, 625, 655], "_arraywithlinearalgebra": [58, 98], "choleski": [58, 81, 626, 831], "625": [58, 76, 342, 626, 656], "vif": [58, 81, 657], "det": [58, 81, 626, 675, 819], "axis1": [58, 60, 81, 83, 626, 628, 660, 681, 701], "axis2": [58, 81, 626, 660, 681], "eigh": [58, 81, 370, 422, 626, 661], "uplo": [58, 81, 626, 662, 663], "eigvalsh": [58, 81, 626], "array_lik": [58, 81, 369, 371, 372, 413, 444, 445, 449, 450, 480, 626, 664, 672, 796], "105": [58, 80, 625, 626, 627, 648, 649, 664, 672, 686], "149": [58, 626, 664], "143": [58, 75, 99, 286, 621, 626, 664, 822], "203": [58, 75, 225, 626, 631, 664, 727], "233": [58, 626, 664], "inv": [58, 81, 626], "transpose_a": [58, 81, 626, 667], "transpose_b": [58, 81, 626, 667], "adjoint_a": [58, 81, 626, 667], "adjoint_b": [58, 81, 626, 667], "matrix_norm": [58, 81, 626], "ord": [58, 81, 626, 668, 684], "fro": [58, 81, 371, 444, 626, 668], "nuc": [58, 81, 626, 668], "matrix_pow": [58, 81, 626], "matrix_rank": [58, 81, 626], "hermitian": [58, 81, 370, 422, 423, 626, 661, 662, 663, 670, 677], "largest_singular_valu": [58, 81, 626, 670, 673], "defici": [58, 626, 670], "matrix_transpos": [58, 81, 626, 842], "pinv": [58, 81, 626], "pseudo": [58, 81, 626, 673, 830], "99999988": [58, 81, 626, 673], "qr": [58, 81, 626, 833], "complet": [58, 70, 81, 626, 674, 767, 808, 809, 810, 811, 814, 815, 818, 819, 822, 824, 828, 832, 833, 835, 838, 842, 843, 851, 859], "12309149": [58, 626, 674], "90453403": [58, 626, 674], "40824829": [58, 626, 674], "49236596": [58, 626, 674], "30151134": [58, 626, 674], "81649658": [58, 626, 674], "86164044": [58, 626, 674], "12403841e": [58, 626, 674], "60113630e": [58, 626, 674], "10782342e": [58, 626, 674], "04534034e": [58, 626, 674], "80906807e": [58, 626, 674], "88178420e": [58, 81, 626, 663, 674], "slogdet": [58, 81, 626], "logabsdet": [58, 81, 626, 675], "natur": [58, 81, 239, 257, 258, 259, 260, 279, 348, 366, 621, 626, 675, 815, 822, 824, 833, 851], "098611": [58, 626, 675], "solv": [58, 81, 370, 431, 626, 766, 802, 809, 814, 825, 832, 841, 863], "full_matric": [58, 81, 626, 677], "svf": [58, 677], "reconstructed_x": [58, 626, 677], "svdval": [58, 81, 626], "tensorsolv": [58, 81, 626], "vander": [58, 81, 626], "vandermond": [58, 81, 626, 682], "vecdot": [58, 81, 626], "vector_norm": [58, 81, 626], "mathemat": [58, 81, 219, 224, 236, 241, 243, 259, 269, 616, 621, 626, 668, 684, 820, 832, 838, 861, 867], "manhattan": [58, 81, 626, 684], "euclidean": [58, 81, 93, 94, 626, 684], "7416575": [58, 81, 626, 684], "vector_to_skew_symmetric_matrix": [58, 81, 626], "_arraywithloss": [59, 98], "binary_cross_entropi": [59, 82, 627, 819], "from_logit": [59, 82, 627, 686, 783], "pos_weight": [59, 82, 627, 686], "crossentropi": [59, 82, 627, 686], "357": [59, 82, 627, 686, 688], "223": [59, 82, 627, 686, 688], "3862944": [59, 627, 687], "sparse_cross_entropi": [59, 82, 627], "_arraywithmanipul": [60, 98], "x_min": [60, 83, 628, 689, 845], "x_max": [60, 83, 628, 689, 845], "before_1": [60, 83, 372, 475, 628, 691, 704], "after_1": [60, 83, 372, 475, 628, 691, 704], "before_n": [60, 83, 372, 475, 628, 691, 704], "after_n": [60, 83, 372, 475, 628, 691, 704], "repetit": [60, 83, 628, 695, 702, 838], "flat": [60, 70, 83, 377, 503, 566, 623, 628, 695], "allowzero": [60, 83, 628, 696], "remain": [60, 63, 76, 83, 86, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 369, 392, 393, 394, 413, 621, 628, 630, 633, 696, 714, 737, 796, 809, 810, 819, 822, 824, 828, 836, 838, 846], "roll": [60, 83, 628, 827], "shift": [60, 72, 83, 99, 132, 143, 228, 230, 323, 363, 618, 621, 628, 697, 809, 810, 821, 822, 827, 834], "restor": [60, 83, 628, 697, 826], "num_or_size_split": [60, 70, 83, 628, 698, 840], "with_remaind": [60, 70, 83, 628, 698], "squeezabl": [60, 628, 699], "swapax": [60, 83, 628], "axis0": [60, 83, 628, 701], "swap_ax": [60, 701], "swap": [60, 83, 628, 701, 791, 855], "tile": [60, 77, 83, 537, 628], "unpack": [60, 83, 628, 703, 833, 835], "zero_pad": [60, 83, 628], "_arraywithnorm": [61, 98], "layer_norm": [61, 84, 631], "normalized_idx": [61, 84, 631, 727], "new_std": [61, 84, 631, 727, 785], "learnabl": [61, 84, 625, 629, 631, 650, 707, 727, 782, 785, 845], "deviat": [61, 62, 66, 84, 85, 89, 631, 632, 636, 727, 730, 754, 768, 781, 785, 814, 852], "0976": [61, 631, 727], "3452": [61, 631, 727], "2740": [61, 631, 727], "1047": [61, 631, 727], "5886": [61, 631, 727], "2732": [61, 631, 727], "7696": [61, 631, 727, 766], "7024": [61, 631, 727], "2518": [61, 631, 727], "826": [61, 631, 727], "178": [61, 631, 727], "981": [61, 631, 727], "831": [61, 631, 727], "421": [61, 631, 727], "_arraywithrandom": [62, 98], "multinomi": [62, 85, 376, 500, 632], "population_s": [62, 85, 632, 728], "num_sampl": [62, 85, 632, 728], "unnorm": [62, 85, 632, 728, 835], "popul": [62, 66, 70, 85, 89, 632, 636, 728, 754, 756, 820, 821, 831, 835, 840, 867], "draw": [62, 85, 376, 498, 500, 502, 632, 728, 730, 731, 766, 767, 768, 769, 774, 781, 808, 814, 833, 835], "half": [62, 85, 122, 283, 618, 621, 632, 729, 731, 806, 825, 838], "235": [62, 730], "float16": [62, 73, 85, 130, 153, 155, 156, 161, 163, 340, 366, 618, 619, 626, 684, 730, 731, 766, 767, 806, 820, 825, 832, 835], "807": [62, 730], "_arraywithsearch": [63, 98], "select_last_index": [63, 86, 633, 734, 735], "occurr": [63, 372, 381, 488, 510, 633, 634, 734, 735, 739], "argmin": [63, 86, 633], "output_dtyp": [63, 86, 633, 735], "argwher": [63, 86, 633], "nonzero": [63, 86, 94, 217, 218, 219, 222, 225, 234, 236, 239, 241, 243, 269, 282, 287, 621, 633], "as_tupl": [63, 86, 633, 737], "fewer": [63, 86, 633, 737], "_arraywithset": [64, 98], "unique_al": [64, 87, 634], "by_valu": [64, 87, 634, 739], "inverse_indic": [64, 87, 372, 488, 634, 739, 741], "unique_count": [64, 87, 634], "unique_invers": [64, 87, 634], "unique_valu": [64, 87, 634], "admonit": [64, 742], "dask": [64, 634, 739, 740, 741, 742, 851], "difficult": [64, 634, 739, 740, 741, 742, 810, 814, 820, 835, 846], "omit": [64, 279, 621, 634, 739, 740, 741, 742, 827, 831, 832], "x_i": [64, 66, 75, 94, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 239, 241, 242, 249, 250, 251, 252, 253, 257, 258, 259, 260, 264, 271, 276, 279, 280, 281, 282, 283, 284, 286, 287, 289, 330, 331, 333, 353, 366, 621, 634, 636, 739, 740, 741, 742, 750, 751, 752, 754, 755, 756, 781, 823], "x_j": [64, 634, 739, 740, 741, 742], "impli": [64, 634, 739, 740, 741, 742, 835], "typeerror": [64, 87, 634, 742, 842], "_arraywithsort": [65, 98], "stabil": [65, 88, 581, 582, 623, 635, 743, 746, 820, 830, 836, 838], "maintain": [65, 88, 635, 743, 746, 805, 809, 810, 814, 826, 831, 833, 834, 835, 850, 860], "msort": [65, 88, 635], "searchsort": [65, 88, 635, 767], "side": [65, 88, 344, 366, 370, 437, 635, 745, 766, 782, 795, 796, 809, 810, 817], "sorter": [65, 88, 635, 745], "ret_dtyp": [65, 88, 635, 745], "_arraywithstatist": [66, 98], "cumprod": [66, 89, 636, 832, 845], "cumsum": [66, 89, 636, 820], "einsum": [66, 89, 636], "equat": [66, 76, 89, 309, 363, 370, 437, 626, 636, 676, 749, 766, 795, 819, 861], "operand": [66, 76, 80, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 330, 331, 353, 357, 366, 367, 369, 411, 621, 626, 636, 675, 681, 749, 750, 752, 753, 755, 795, 796, 815, 818, 823, 832], "contract": [66, 626, 636, 679, 749, 796], "seq": [66, 636, 749, 766], "ii": [66, 89, 636, 749, 810], "jk": [66, 636, 749, 796], "ik": [66, 636, 749, 796], "126": [66, 106, 275, 615, 621, 626, 636, 669, 749], "510": [66, 636, 749], "special": [66, 81, 93, 94, 98, 99, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 330, 331, 353, 366, 621, 626, 636, 675, 681, 750, 751, 752, 753, 754, 755, 756, 766, 767, 768, 769, 774, 781, 808, 811, 814, 815, 817, 819, 822, 823, 824, 827, 831, 833, 834, 835, 836, 838, 861, 862, 863], "arithmet": [66, 89, 230, 236, 269, 621, 636, 751, 832], "propag": [66, 230, 330, 331, 366, 621, 636, 750, 751, 752, 754, 755, 756, 830], "04999995": [66, 751], "freedom": [66, 89, 636, 754, 756, 816], "constitut": [66, 89, 636, 754, 756, 828, 840, 862], "commonli": [66, 89, 636, 754, 756, 824, 828, 830], "81649661": [66, 636, 754], "6666665": [66, 756, 843], "667": [66, 77, 236, 531, 581, 621, 623, 756], "_arraywithutil": [67, 98], "logic": [67, 90, 200, 236, 237, 263, 264, 265, 269, 272, 620, 621, 637, 757, 758, 808, 815, 819, 820, 821, 824, 828, 829, 830, 831, 832, 834, 835, 838, 842, 855], "AND": [67, 90, 226, 237, 263, 621, 637, 757], "OR": [67, 90, 229, 265, 272, 621, 637, 758, 809, 810, 830], "_wrap_funct": [68, 91, 817, 828, 829], "function_nam": [68, 91, 808, 836], "new_funct": [68, 91, 817], "add_ivy_array_instance_method": 68, "cl": [68, 91], "moduletyp": [68, 91, 854, 855, 856], "toi": [68, 91], "arrayexampl": 68, "hasattr": [68, 91], "_containerwithactiv": [69, 99], "dict_in": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "queue": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 576, 598, 623, 837, 843], "queue_load_s": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "container_combine_method": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "list_join": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "queue_timeout": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 576, 598, 623, 837], "print_limit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "key_length_limit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "print_ind": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "print_line_spac": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "ivyh": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "default_key_color": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "keyword_color_dict": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "rebuild_child_contain": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "types_to_iteratively_nest": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "alphabetical_kei": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "dynamic_backend": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 783, 784, 816, 837], "build_cal": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "containerbas": [69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 818], "_static_gelu": 69, "key_chain": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 312, 313, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 354, 355, 356, 357, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 462, 471, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 497, 499, 504, 505, 512, 513, 514, 515, 522, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "to_appli": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 312, 313, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 354, 355, 356, 357, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 462, 471, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 497, 499, 504, 505, 512, 513, 514, 515, 522, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 630, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "prune_unappli": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 312, 313, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 354, 355, 356, 357, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 462, 471, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 497, 499, 504, 505, 512, 513, 514, 515, 522, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 630, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 721, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "map_sequ": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 312, 313, 323, 324, 328, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 354, 355, 356, 357, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 462, 471, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 497, 499, 504, 505, 512, 513, 514, 515, 522, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 639, 640, 641, 642, 643, 644, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "prune": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 305, 306, 308, 329, 330, 331, 332, 333, 335, 337, 344, 345, 351, 353, 355, 356, 357, 392, 393, 394, 412, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 459, 460, 481, 483, 484, 485, 491, 493, 494, 495, 497, 499, 512, 513, 514, 515, 524, 527, 528, 530, 531, 535, 536, 537, 538, 539, 542, 543, 546, 548, 550, 551, 552, 554, 555, 558, 566, 567, 581, 582, 584, 586, 588, 589, 602, 608, 613, 630, 639, 640, 641, 642, 648, 649, 655, 656, 657, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 681, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 703, 704, 721, 722, 723, 724, 728, 729, 730, 731, 733, 736, 739, 740, 741, 742, 743, 747, 748, 751, 753, 754, 756, 757, 758, 764, 767, 819], "static_gelu": 69, "046": 69, "_static_hardswish": 69, "_static_leaky_relu": 69, "static_leaky_relu": 69, "38999999": [69, 76, 108, 291, 292, 361], "_static_log_softmax": 69, "static_log_softmax": 69, "371": [69, 109], "_static_mish": 69, "static_mish": 69, "30883577": [69, 110, 615], "28903052": [69, 110, 615], "10714479": [69, 110, 615], "_static_relu": 69, "static_relu": 69, "_static_sigmoid": 69, "static_sigmoid": 69, "2689414": [69, 112, 113, 615], "7310586": [69, 112, 113, 615], "88079703": [69, 112, 615], "62245935": [69, 112], "4750208": [69, 112], "_static_softmax": 69, "static_softmax": 69, "72844321": [69, 113], "19852395": [69, 113], "07303288": [69, 113], "_static_softplu": 69, "revert": [69, 114, 615], "static_softplu": 69, "53499615": 69, "42036411": 69, "948": [69, 114, 630, 708], "166": [69, 106, 615], "dictionari": [70, 87, 99, 208, 590, 606, 620, 623, 624, 742, 761, 763, 796, 815, 819, 820, 828, 832, 833, 843, 846], "asynchron": [70, 99, 861], "wait": [70, 99, 576, 623, 802, 808, 810, 819, 832], "arriv": [70, 99, 576, 623, 838], "cont_list_join": [70, 99], "limit": [70, 99, 161, 164, 530, 531, 547, 619, 623, 628, 689, 766, 768, 769, 781, 788, 796, 802, 809, 810, 817, 819, 822, 824, 832, 835, 838, 843, 846, 860, 861, 862], "whitespac": [70, 99], "indent": [70, 99, 843], "newlin": [70, 99, 823], "termin": [70, 99, 809, 810, 818, 825, 826, 840, 843], "constructor": [70, 99, 526, 623, 763, 779, 787, 820, 821, 823, 842], "kept": [70, 99, 629, 705, 706, 810, 831, 836], "encount": [70, 99, 782, 806, 808, 820, 824, 825, 835], "node": [70, 77, 99, 528, 538, 584, 630, 718, 719, 781, 790, 817, 818, 832, 851, 854, 855, 862], "alphabet": [70, 99], "__setitem__": [70, 372, 483, 815, 818, 842], "_cont_at_key_chains_input_as_dict": 70, "current_chain": 70, "ignore_key_error": 70, "_cont_at_key_chains_input_as_seq": 70, "_cont_call_static_method_with_flexible_arg": 70, "static_method": 70, "kw": 70, "self_idx": 70, "_cont_concat_unifi": 70, "_cont_get_dev": 70, "_cont_get_dtyp": 70, "_cont_get_shap": 70, "_cont_ivi": 70, "_cont_mean_unifi": 70, "_1": 70, "_cont_prune_key_chains_input_as_dict": 70, "return_cont": 70, "_cont_prune_key_chains_input_as_seq": 70, "_cont_slice_kei": 70, "key_slic": 70, "_cont_sum_unifi": 70, "_get_queue_item": 70, "cont_all_fals": 70, "assert_is_bool": 70, "cont_all_key_chain": 70, "include_empti": 70, "cont_all_tru": [70, 818, 843], "cont_as_bool": 70, "cont_assert_contains_sub_contain": 70, "sub_cont": 70, "screen": [70, 808, 809, 843], "cont_assert_contains_sub_structur": 70, "check_shap": [70, 788], "cont_assert_ident": 70, "check_typ": 70, "same_arrai": [70, 843], "arrays_equ": 70, "cont_assert_identical_structur": 70, "assert_and_assign": 70, "congruent": 70, "cont_at_key_chain": 70, "ignore_non": 70, "cont_at_kei": 70, "substr": 70, "cont_combin": 70, "duplic": [70, 372, 480, 547, 623, 630, 710, 816, 823, 829, 830, 833, 844, 867], "configur": [70, 208, 620, 630, 721, 809, 810, 817, 819, 820, 825, 826], "container_rightmost": 70, "cont_common_key_chain": 70, "cont_config": 70, "cont_contains_sub_contain": 70, "cont_contains_sub_structur": 70, "cont_copi": [70, 843], "cont_create_if_abs": 70, "noth": [70, 838, 867], "cont_cutoff_at_depth": 70, "depth_cutoff": 70, "summari": [70, 165, 532, 619, 623, 809, 810, 835], "cont_cutoff_at_height": 70, "height_cutoff": 70, "cont_deep_copi": [70, 843, 854], "cont_dev": 70, "belong": [70, 808, 814, 844], "cont_dev_str": 70, "cont_diff": [70, 843], "diff_kei": 70, "detect_key_diff": 70, "detect_value_diff": 70, "detect_shape_diff": 70, "among": [70, 818, 819, 835, 838, 852, 861], "container0": 70, "cont_dtyp": 70, "cont_duplicate_array_keychain": 70, "cont_find_sub_contain": 70, "sub_cont_to_find": 70, "cont_find_sub_structur": 70, "sub_struc_to_find": 70, "cont_flatten_key_chain": [70, 843], "above_height": [70, 843], "below_depth": [70, 843], "cont_format_key_chain": 70, "format_fn": 70, "cont_from_disk_as_hdf5": [70, 843], "h5_obj_or_filepath": 70, "slice_obj": 70, "disk": [70, 784, 843, 860], "h5py": 70, "filepath": [70, 637, 759, 760, 810, 814], "cont_from_disk_as_json": [70, 843], "json_filepath": 70, "cont_from_disk_as_pickl": [70, 843], "pickle_filepath": 70, "cont_from_flat_list": 70, "flat_list": 70, "hierarchi": [70, 800, 808, 834, 843, 857, 867], "cont_handle_inplac": 70, "prime": [70, 820], "overwritten": [70, 815, 816], "cont_has_kei": 70, "query_kei": 70, "somewher": [70, 819], "cont_has_key_chain": 70, "cont_ident": [70, 843], "cont_identical_array_shap": 70, "cont_identical_config": 70, "cont_identical_structur": 70, "cont_if_exist": 70, "cont_inplace_upd": 70, "cont_ivi": 70, "cont_key_chains_contain": 70, "sub_str": 70, "cont_list_stack": [70, 843], "cont_load": 70, "cont_map": [70, 818, 843], "func": [70, 93, 209, 358, 359, 360, 368, 529, 603, 606, 607, 609, 614, 620, 623, 624, 630, 721, 763, 808, 814, 815, 822, 824, 830], "cont_map_sub_cont": 70, "include_self": 70, "possibli": [70, 586, 623, 766, 835, 846], "cont_max_depth": 70, "cont_multi_map": 70, "map_nest": 70, "assert_ident": 70, "leftmost": [70, 630, 721], "cont_multi_map_in_funct": 70, "cont_num_arrai": 70, "cont_overwrite_at_key_chain": 70, "target_dict": 70, "return_dict": 70, "cont_prune_empti": 70, "keep_non": 70, "cont_prune_key_chain": 70, "key1": [70, 802, 844], "key2": [70, 802], "key3": 70, "cont_prune_key_from_key_chain": 70, "certain": [70, 122, 133, 134, 371, 445, 618, 808, 809, 810, 814, 820, 828, 834, 835, 838, 846, 854, 855, 856, 865], "cont_prune_kei": 70, "cont_prune_keys_from_key_chain": 70, "cont_reduc": 70, "cont_remove_key_length_limit": 70, "cont_remove_print_limit": 70, "cont_reshape_lik": 70, "leading_shap": 70, "cont_restructur": 70, "keep_orig": 70, "old": [70, 809, 816, 831], "cont_restructure_key_chain": 70, "keychain_map": 70, "cont_sav": 70, "cont_set_at_key_chain": 70, "cont_set_at_kei": 70, "cont_shap": [70, 625, 643], "cont_show": 70, "cont_show_sub_contain": 70, "sub_cont_or_keychain": 70, "cont_size_ordered_arrai": 70, "keychain": [70, 76, 332, 453, 454, 455, 484], "cont_slice_kei": 70, "all_depth": 70, "cont_slice_via_kei": 70, "slice_kei": 70, "cont_sort_by_kei": 70, "cont_structural_diff": 70, "cont_to_dict": 70, "cont_to_disk_as_hdf5": [70, 843], "starting_index": 70, "max_batch_s": 70, "cont_to_disk_as_json": [70, 843], "cont_to_disk_as_pickl": [70, 843], "cont_to_flat_list": 70, "cont_to_iter": [70, 818], "leaf_keys_onli": 70, "cont_to_iterator_kei": 70, "cont_to_iterator_valu": 70, "cont_to_json": 70, "cont_to_nested_list": 70, "cont_to_raw": 70, "cont_trim_kei": 70, "cont_try_kc": 70, "cont_unifi": 70, "concatten": [70, 209, 620], "cont_unstack_cont": 70, "dim_siz": 70, "cont_update_config": 70, "cont_with_default_key_color": 70, "cont_with_entries_as_list": 70, "cont_with_ivy_backend": 70, "ivy_backend": [70, 833], "cont_with_key_length_limit": [70, 843], "cont_with_print_ind": [70, 843], "cont_with_print_limit": [70, 843], "cont_with_print_line_spac": 70, "h5_file_s": 70, "shuffle_h5_fil": 70, "split_cont": 70, "_is_json": 70, "_repr": 70, "_containerwithconvers": [71, 99], "_static_to_ivi": 71, "_static_to_n": 71, "_containerwithcr": [72, 99], "_static_arang": 72, "_static_asarrai": 72, "_static_copy_arrai": 72, "_static_empti": 72, "_static_empty_lik": 72, "_static_ey": 72, "n_row": [72, 76, 128, 143, 323, 363, 370, 430, 618], "n_col": [72, 76, 128, 143, 323, 363, 618], "_static_from_dlpack": 72, "_static_ful": 72, "_static_full_lik": 72, "static_full_lik": 72, "2324": [72, 132, 618], "234": [72, 75, 132, 155, 238, 289, 618, 619, 621, 625, 649, 766], "_static_linspac": 72, "_static_logspac": 72, "static_logspac": 72, "15443469": [72, 134], "64158883": [72, 134], "_static_meshgrid": 72, "_static_native_arrai": 72, "_static_one_hot": 72, "static_one_hot": 72, "_static_on": 72, "_static_ones_lik": 72, "_static_tril": 72, "_static_triu": 72, "_static_zero": 72, "_static_zeros_lik": 72, "frombuff": [72, 618], "expos": [72, 130, 532, 618, 623, 802, 819, 840, 844, 850], "x00": [72, 130, 618], "xf0": [72, 130, 618], "x01": [72, 130, 618], "x02": [72, 130, 618], "x03": [72, 130, 618], "x04": [72, 130, 618], "x05": [72, 130], "5443469": [72, 134, 618], "static_frombuff": 72, "static_triu_indic": 72, "triu_indic": [72, 618], "_containerwithdatatyp": [73, 99], "_static_astyp": 73, "718": [73, 75, 148, 265, 619], "618": [73, 75, 148, 265, 619], "static_astyp": 73, "_static_broadcast_arrai": 73, "static_broadcast_arrai": 73, "_static_broadcast_to": 73, "static_broadcast_to": 73, "_static_can_cast": 73, "from_": [73, 151, 619], "static_can_cast": 73, "_static_default_complex_dtyp": 73, "complex_dtyp": [73, 154, 177, 619], "_static_default_float_dtyp": 73, "float_dtyp": [73, 156, 179, 619], "_static_dtyp": 73, "_static_finfo": 73, "inquir": [73, 161, 164], "static_finfo": 73, "55040e": [73, 161, 619], "7976931348623157e": [73, 161, 619], "308": [73, 161, 619, 766, 835], "_static_function_supported_dtyp": 73, "_static_function_unsupported_dtyp": 73, "_static_iinfo": 73, "1800": [73, 164, 619], "1084": 73, "40000": 73, "static_iinfo": 73, "2147483648": [73, 76, 164, 372, 483, 619], "2147483647": [73, 164, 619], "_static_is_bool_dtyp": 73, "dtype_in": [73, 146, 147, 160, 166, 167, 168, 169, 170, 171, 172, 173, 188, 619], "_static_is_complex_dtyp": 73, "is_complex_dtyp": [73, 619, 836], "roughli": [73, 809, 814, 864], "static_is_complex_dtyp": 73, "_static_is_float_dtyp": 73, "static_is_float_dtyp": 73, "_static_is_int_dtyp": 73, "_static_is_uint_dtyp": 73, "_static_result_typ": 73, "static_result_typ": 73, "broadcats": [73, 149], "_containerwithdevic": [74, 99], "_static_dev": 74, "static_dev": 74, "_static_to_devic": 74, "static_to_devic": 74, "contaion": [74, 193], "_containerwithelementwis": [75, 99], "_static_ab": 75, "static_ab": 75, "_static_aco": 75, "static_aco": 75, "_static_acosh": 75, "static_acosh": 75, "_static_add": 75, "static_add": [75, 103], "_static_asin": 75, "static_asin": 75, "524": [75, 221, 621], "412": [75, 80, 221, 621, 630, 708], "_static_asinh": 75, "static_asinh": 75, "_static_atan": 75, "static_atan": 75, "_static_atan2": 75, "static_atan2": 75, "915": [75, 224, 621], "983": [75, 224, 621], "978": [75, 224, 621], "696": [75, 85, 224, 621, 730], "993": [75, 224, 621], "_static_atanh": 75, "static_atanh": 75, "_static_bitwise_and": 75, "static_bitwise_and": 75, "_static_bitwise_invert": 75, "static_bitwise_invert": 75, "_static_bitwise_left_shift": 75, "_static_bitwise_or": 75, "static_bitwise_or": 75, "_static_bitwise_right_shift": 75, "static_bitwise_right_shift": 75, "_static_bitwise_xor": 75, "static_bitwise_xor": 75, "_static_ceil": 75, "static_ceil": 75, "_static_co": 75, "static_co": 75, "_static_cosh": 75, "static_cosh": 75, "_static_deg2rad": 75, "static_deg2rad": 75, "0262": [75, 235, 275, 621], "873": [75, 235, 275, 621], "_static_divid": 75, "static_divid": 75, "_static_equ": 75, "static_equ": 75, "_static_erf": 75, "static_erf": 75, "27632612": [75, 238], "934008": [75, 238, 621], "99999928": [75, 238], "91903949": [75, 238], "_static_exp": 75, "static_exp": 75, "59814835": [75, 239, 621], "4131622": [75, 239], "_static_expm1": 75, "thefunct": [75, 238], "areal": 75, "static_expm1": 75, "71828175": [75, 239, 621], "38905621": [75, 239, 621], "59815216": 75, "_static_floor": 75, "static_floor": 75, "_static_floor_divid": 75, "static_floor_divid": 75, "_static_great": 75, "static_great": 75, "_static_greater_equ": 75, "static_greater_equ": 75, "_static_isfinit": 75, "999999999999": [75, 250, 621], "static_isfinit": 75, "_static_isinf": 75, "static_isinf": 75, "_static_isnan": 75, "static_isnan": 75, "_static_isr": 75, "0j": [75, 76, 138, 139, 217, 218, 219, 222, 225, 234, 239, 241, 253, 257, 259, 276, 280, 282, 283, 287, 333, 366, 618, 621, 626, 675], "23j": [75, 76], "9j": [75, 76], "static_isr": 75, "_static_lcm": 75, "1080": [75, 254], "1550": [75, 254], "130": [75, 254, 372, 480], "_static_less": 75, "static_less": 75, "_static_less_equ": 75, "static_less_equ": 75, "_static_log": 75, "static_log": 75, "_static_log10": 75, "static_log10": 75, "898": [75, 258, 621], "0414": [75, 258, 621], "_static_log1p": 75, "static_log1p": 75, "_static_log2": 75, "static_log2": 75, "_static_logaddexp": 75, "static_logaddexp": 75, "_static_logical_and": 75, "static_logical_and": 75, "_static_logical_not": 75, "static_logical_not": 75, "_static_logical_or": 75, "static_logical_or": 75, "_static_logical_xor": 75, "static_logical_xor": 75, "_static_maximum": 75, "static_maximum": 75, "_static_minimum": 75, "static_minimum": 75, "_static_multipli": 75, "static_multipli": 75, "_static_neg": 75, "static_neg": 75, "_static_not_equ": 75, "static_not_equ": 75, "_static_posit": 75, "static_posit": 75, "_static_pow": 75, "static_pow": 75, "_static_rad2deg": 75, "static_rad2deg": 75, "5160": 75, "10300": [75, 275, 621], "15500": 75, "20600": 75, "2860": [75, 275], "_static_reciproc": 75, "recirpoc": [75, 277], "static_reciproc": 75, "_static_remaind": 75, "static_remaind": 75, "_static_round": 75, "thevfunct": 75, "527": [75, 279, 621], "static_round": 75, "301": [75, 279, 621], "_static_sign": 75, "static_sign": 75, "_static_sin": 75, "static_sin": 75, "757": [75, 281, 621], "959": [75, 241, 281, 621], "279": [75, 281, 369, 390, 400, 530, 621, 623], "_static_sinh": 75, "static_sinh": 75, "835": [75, 282], "347": [75, 282], "721": [75, 282], "_static_sqrt": 75, "static_sqrt": 75, "_static_squar": 75, "static_squar": 75, "_static_subtract": 75, "static_subtract": 75, "_static_tan": 75, "static_tan": 75, "_static_tanh": 75, "static_tanh": 75, "995": [75, 287, 621], "9999": 75, "_static_trapz": 75, "static_trapz": 75, "_static_trunc": 75, "static_trunc": 75, "_static_trunc_divid": 75, "75j": [75, 220, 249], "01317055": [75, 220], "05634501": [75, 220], "115": [75, 220, 275, 621], "3461759": [75, 220], "524111": [75, 220], "644": [75, 221, 621, 844], "305": [75, 80, 221, 621], "351": [75, 235, 275], "00613": [75, 235], "0154": [75, 235], "403": [75, 239], "428772": [75, 239], "649": [75, 241], "220": [75, 241], "865": [75, 241], "metho": [75, 248, 260], "imaginari": [75, 98, 108, 111, 114, 138, 139, 217, 218, 219, 234, 236, 237, 239, 241, 249, 269, 271, 272, 279, 282, 283, 287, 333, 366, 369, 370, 412, 423, 615, 618, 621, 633, 737, 822], "4j": [75, 249, 369, 412, 582, 621, 623], "7j": [75, 76, 253, 276, 333, 366, 621], "956": [75, 259], "08746284": [75, 262], "32192809": [75, 262], "nuner": [75, 269], "413": [75, 275], "335": [75, 76, 276, 333], "345j": [75, 76, 276, 333], "static_angl": 75, "static_exp2": 75, "static_fmin": 75, "static_gcd": 75, "static_imag": 75, "static_logaddexp2": 75, "static_nan_to_num": 75, "static_r": 75, "_containerwithactivationexperiment": [76, 99], "_static_celu": 76, "formlat": 76, "static_celu": 76, "_static_elu": 76, "static_elu": 76, "_static_hardshrink": 76, "hard": [76, 293, 810, 842, 861], "shrinkag": [76, 293, 302, 372, 482], "_static_hardtanh": 76, "static_hardtanh": [76, 294], "_static_scaled_tanh": 76, "931": 76, "71587813": 76, "88367474": 76, "00376701": [76, 299], "2285642": 76, "99999881": 76, "49999905": 76, "_static_silu": 76, "static_silu": 76, "27777028": [76, 301], "23947507": [76, 301], "0900332": [76, 301], "_static_softshrink": 76, "_static_tanhshrink": 76, "36634541": [76, 304], "02005103": [76, 304], "00262468": [76, 304], "_static_threshold": 76, "19722462": [76, 295], "84729779": [76, 295], "31326163": [76, 296], "46328258": [76, 296], "51301527": [76, 296], "79813886": [76, 296], "simplywrap": [76, 299], "54939651": [76, 299], "09999998": [76, 299, 604, 624], "09999999": [76, 299], "08336546": [76, 299], "0379949": [76, 299], "22856998": [76, 300], "42028043": [76, 300], "31868932": [76, 300], "static_logit": 76, "static_logsigmoid": 76, "34115386": 76, "64439666": 76, "24115384": 76, "55435526": 76, "07888974": 76, "00741899": 76, "26328245": 76, "00012302": 76, "static_prelu": 76, "static_relu6": 76, "static_selu": 76, "static_thresholded_relu": 76, "_containerwithconversionexperiment": [76, 99], "_containerwithcreationexperiment": [76, 99], "_static_trilu": 76, "blackman": [76, 307, 363], "00770143e": [76, 307], "49229857e": [76, 307], "hamming_window": [76, 363], "ham": [76, 309, 363], "4180": [76, 309], "8180": [76, 309], "hann_window": [76, 363], "hann": [76, 310, 363], "7500": [76, 310], "3455": [76, 310], "9045": [76, 310], "kaiser_bessel_derived_window": [76, 363], "suitabl": [76, 312, 313, 363, 635, 745, 768, 809, 810, 818, 836, 861], "spectral": [76, 312, 313, 363], "analysi": [76, 312, 313, 363, 861, 862], "kaiser": [76, 307, 312, 313, 363], "70710677": [76, 312, 495, 497], "18493208": [76, 312, 363], "9827513": [76, 312, 363], "kaiser_window": [76, 363], "static_kaiser_window": [76, 313], "2049": [76, 313], "8712": [76, 313], "0367": [76, 313, 363], "7753": [76, 313], "static_blackman_window": 76, "static_eye_lik": 76, "static_hamming_window": 76, "static_hann_window": 76, "static_hann": 76, "static_kaiser_bessel_derived_window": 76, "static_mel_weight_matrix": 76, "static_polyv": 76, "static_tril_indic": 76, "static_unsorted_segment_mean": 76, "static_unsorted_segment_min": 76, "static_unsorted_segment_sum": 76, "static_vorbis_window": 76, "vorbis_window": [76, 363], "vorbi": [76, 328, 363], "38268343": [76, 328, 626, 662], "92387953": [76, 328], "14943586": [76, 328, 363], "51644717": [76, 328], "85631905": [76, 328], "98877142": [76, 328], "tril_indic": [76, 363], "_containerwithdata_typeexperiment": [76, 99], "_containerwithdeviceexperiment": [76, 99], "_containerwithelementwiseexperiment": [76, 99], "0003": [76, 329, 626, 665, 766, 769], "0006": [76, 329, 356], "2345j": [76, 333], "5772": [76, 337], "9635": [76, 337], "4228": [76, 337], "9228": [76, 337], "57299206e": [76, 338], "67773480e": [76, 338], "20904985e": [76, 338], "84270084": [76, 338, 366], "99532223": [76, 338], "99997795": [76, 338], "mantissa": [76, 342, 366, 820], "frist": [76, 343, 366], "coord": [76, 343], "6055": [76, 344], "160": [76, 346, 372, 480], "10240": [76, 346], "60000038": [76, 347, 366, 626, 683], "0707": [76, 353, 366], "0579": [76, 353, 366], "static_allclos": 76, "static_amax": 76, "static_amin": 76, "static_binar": 76, "static_conj": 76, "static_copysign": 76, "static_count_nonzero": 76, "static_diff": 76, "static_digamma": 76, "57721537": 76, "96351004": 76, "static_erfc": 76, "15729921": 76, "00467773": [76, 338, 366], "static_fix": 76, "static_float_pow": 76, "static_fmax": 76, "static_fmod": 76, "static_frexp": 76, "static_gradi": 76, "static_hypot": 76, "static_isclos": 76, "static_ldexp": 76, "static_lerp": 76, "90000057": [76, 347, 366], "70000076": [76, 347, 366], "55000019": [76, 347, 366], "05000019": [76, 347, 366], "static_modf": 76, "static_nansum": 76, "static_nextaft": 76, "static_signbit": 76, "static_sinc": 76, "636": 76, "090": 76, "070": 76, "057": 76, "static_sparsify_tensor": 76, "static_xlogi": 76, "static_zeta": 76, "0244": [76, 356], "_containerwithgeneralexperiment": [76, 99], "_static_reduc": 76, "static_reduc": 76, "_containerwithgradientsexperiment": [76, 99], "_containerwithimageexperiment": [76, 99], "_containerwithlayersexperiment": [76, 99], "_static_fft": 76, "static_fft": 76, "_static_sliding_window": 76, "673": [76, 390], "0507": [76, 390], "79711437": [76, 369, 390, 400], "94867325": [76, 369, 390, 400], "74089146": [76, 369, 390, 400], "25980937": [76, 369, 390, 400], "64958102": [76, 369, 390, 400], "2442648": [76, 369, 390, 400], "247306": [76, 402], "908323j": [76, 402], "494955": [76, 402], "90395j": [76, 402], "static_adaptive_avg_pool1d": 76, "static_adaptive_avg_pool2d": 76, "static_adaptive_max_pool2d": 76, "static_avg_pool1d": 76, "static_avg_pool2d": 76, "static_avg_pool3d": 76, "static_dct": 76, "253": [76, 282, 621], "515": [76, 632, 730], "467": 76, "static_dft": 76, "static_embed": 76, "static_idct": 76, "93732834": [76, 369, 390], "75048852": [76, 369, 390], "29723358": [76, 369, 400], "6950531": 76, "93914509": 76, "88008738": 76, "18951225": 76, "06697273": [76, 369, 400], "57439804": 76, "68861485": [76, 369, 400], "41308832": [76, 369, 400], "0700836": 76, "2449036": 76, "6711426": 76, "514": 76, "501709": 76, "4924011": 76, "static_ifft": 76, "static_ifftn": 76, "static_interpol": 76, "static_max_pool1d": 76, "static_max_pool2d": 76, "max_pool2dd": 76, "static_max_pool3d": 76, "static_max_unpool1d": 76, "static_rfft": 76, "static_rfftn": 76, "static_rnn": 76, "step_funct": [76, 369, 414], "initial_st": [76, 369, 414, 625, 650], "go_backward": [76, 369, 414], "unrol": [76, 369, 414, 625, 651, 840, 843], "input_length": [76, 369, 414], "zero_output_for_mask": [76, 369, 414], "return_all_output": [76, 369, 414], "rnn": [76, 369, 861], "tempor": [76, 369, 414], "state_s": [76, 369, 414], "while_loop": [76, 369, 414, 617], "otput": [76, 369, 414], "funciton": [76, 369, 414], "static_stft": 76, "_containerwithlinearalgebraexperiment": [76, 99], "933034": [76, 370, 419], "eigenvealu": [76, 422, 661], "xx": [76, 422, 424, 661], "37228107": [76, 422, 661], "3722816": [76, 422, 661], "8245648": [76, 422, 661], "41597357": [76, 422, 661], "56576747": [76, 422, 661], "9093767": [76, 422, 661], "56155": [76, 423], "82842": [76, 423], "450": [76, 429], "static_adjoint": 76, "static_batched_out": 76, "static_cond": 76, "static_diagflat": 76, "static_dot": 76, "static_eig": 76, "static_eigh_tridiagon": 76, "static_eigv": 76, "static_higher_order_mo": 76, "static_initialize_tuck": 76, "static_kron": 76, "kroneck": [76, 370, 428, 429], "static_make_svd_non_neg": 76, "static_matrix_exp": 76, "static_mode_dot": 76, "static_multi_dot": 76, "static_multi_mode_dot": 76, "static_partial_tuck": 76, "static_svd_flip": 76, "static_tensor_train": 76, "static_truncated_svd": 76, "static_tt_matrix_to_tensor": 76, "tt_matrix": [76, 370, 441], "output_tensor": [76, 96, 370, 441], "static_tuck": 76, "_containerwithlossesexperiment": [76, 99], "_static_hinge_embedding_loss": 76, "_static_huber_loss": 76, "static_huber_loss": 76, "0575": [76, 444], "_static_kl_div": 76, "_static_l1_loss": 76, "static_l1_loss": 76, "_static_log_poisson_loss": 76, "static_log_poisson_loss": 76, "_static_poisson_nll_loss": 76, "06446016": 76, "55611551": 76, "30244565": [76, 448], "_static_smooth_l1_loss": 76, "static_smooth_l1_loss": 76, "_static_soft_margin_loss": 76, "06429195": [76, 448], "_containerwithmanipulationexperiment": [76, 99], "_static_fill_diagon": 76, "_static_put_along_axi": 76, "_static_tak": 76, "69999981": [76, 302, 361, 372, 459, 483], "_static_trim_zero": 76, "_static_unique_consecut": 76, "ary1": [76, 372, 453, 454, 455], "ary2": [76, 372, 453, 454, 455], "broadcast_shap": [76, 102, 372, 766, 768], "static_concat_from_sequ": [76, 460], "30192195": [76, 472], "static_as_strid": 76, "static_atleast_1d": 76, "static_atleast_2d": 76, "static_atleast_3d": 76, "static_broadcast_shap": 76, "static_column_stack": 76, "static_dsplit": 76, "static_dstack": 76, "static_expand": 76, "static_flatten": 76, "static_fliplr": 76, "static_flipud": 76, "static_fold": 76, "static_heavisid": 76, "static_hsplit": 76, "static_hstack": 76, "static_i0": 76, "static_matric": 76, "static_moveaxi": 76, "static_pad": 76, "static_partial_fold": 76, "static_partial_tensor_to_vec": 76, "static_partial_unfold": 76, "static_partial_vec_to_tensor": 76, "static_rot90": 76, "static_soft_threshold": 76, "static_take_along_axi": 76, "static_top_k": 76, "static_unfold": 76, "static_vsplit": 76, "static_vstack": 76, "_containerwithnormsexperiment": [76, 99], "16903085": [76, 495, 497], "50709254": [76, 495, 497], "84515423": [76, 495, 497], "44183609": [76, 495, 497], "56807494": [76, 495, 497], "69431382": [76, 495, 497], "static_batch_norm": 76, "static_group_norm": 76, "static_instance_norm": 76, "static_l1_norm": 76, "static_l2_norm": 76, "static_lp_norm": 76, "12500000": 76, "37500000": 76, "62500000": 76, "27500000": 76, "35000000": 76, "42500000": 76, "0000000": 76, "5000000": 76, "2500000": 76, "_containerwithrandomexperiment": [76, 99], "43643127": [76, 500], "32325703": [76, 500], "24031169": [76, 500], "34251311": [76, 500], "31692529": [76, 500], "3405616": [76, 500], "5319725": [76, 500], "22458365": [76, 500], "24344385": [76, 500], "26588406": [76, 500], "61075421": [76, 500], "12336174": [76, 500], "51142915": [76, 500], "25041268": [76, 500], "23815817": [76, 500], "64042903": [76, 500], "25763214": [76, 500], "10193883": [76, 500], "31624692": [76, 500], "46567987": [76, 500], "21807321": [76, 500], "37677699": [76, 500], "39914594": [76, 500], "22407707": [76, 500], "static_bernoulli": 76, "static_beta": 76, "static_dirichlet": 76, "static_gamma": 76, "static_poisson": 76, "_containerwithsearchingexperiment": [76, 99], "static_unravel_index": 76, "_containerwithsetexperiment": [76, 99], "_containerwithsortingexperiment": [76, 99], "invert_permut": [76, 379], "static_invert_permut": 76, "static_lexsort": [76, 88], "_containerwithstatisticalexperiment": [76, 99], "_static_cummax": 76, "static_cummax": 76, "_static_cummin": 76, "static_cummin": 76, "_static_nanmin": 76, "static_nanmin": 76, "func_nam": [76, 515, 808, 822, 823, 828, 832], "static_bincount": 76, "static_corrcoef": 76, "static_cov": [76, 381, 512], "static_histogram": 76, "static_igamma": 76, "static_lgamma": 76, "static_median": 76, "static_nanmean": 76, "static_nanmedian": 76, "static_nanprod": 76, "static_quantil": 76, "_containerwithutilityexperiment": [76, 99], "static_optional_get_el": 76, "_containerwithgener": [77, 99], "_static_all_equ": 77, "static_all_equ": 77, "_static_array_equ": 77, "a0": [77, 372, 459], "static_array_equ": 77, "_static_assert_supports_inplac": 77, "_static_clip_matrix_norm": 77, "static_clip_matrix_norm": 77, "849": [77, 530, 531, 623], "_static_clip_vector_norm": 77, "static_clip_vector_norm": 77, "_static_einops_rearrang": 77, "static_einops_rearrang": 77, "_static_einops_reduc": 77, "static_einops_reduc": 77, "29333329": [77, 536, 623], "53000069": [77, 536, 623], "39666676": [77, 536, 623], "20666695": [77, 536, 623], "_static_einops_repeat": 77, "static_einops_repeat": 77, "_static_exist": 77, "_static_fourier_encod": 77, "static_fourier_encod": 77, "classivi": [77, 628, 634, 698, 740], "89858720e": 77, "79717439e": 77, "_static_gath": 77, "static_gath": 77, "_static_gather_nd": 77, "static_gather_nd": 77, "_static_get_num_dim": 77, "static_get_num_dim": 77, "_static_has_nan": 77, "leafwis": 77, "static_has_nan": 77, "_static_inplace_decr": 77, "_static_inplace_incr": 77, "_static_inplace_upd": 77, "_static_is_arrai": 77, "static_is_arrai": 77, "_static_is_ivy_arrai": 77, "static_is_ivy_arrai": 77, "_static_is_native_arrai": 77, "static_is_native_arrai": 77, "_static_scatter_flat": 77, "_static_scatter_nd": 77, "static_scatter_nd": 77, "_static_stable_divid": 77, "22222222": 77, "11111111": 77, "857": [77, 581, 623], "444": 77, "_static_stable_pow": 77, "00012": [77, 582, 623], "00016": [77, 78, 582, 610, 623, 624], "00001": [77, 582, 623, 766], "00032": [77, 582], "00256": [77, 582], "1679638": [77, 582], "395": [77, 582], "16777383": [77, 582], "_static_supports_inplace_upd": 77, "_static_to_list": 77, "static_to_list": 77, "_static_to_numpi": 77, "static_to_numpi": 77, "_static_to_scalar": 77, "static_to_scalar": 77, "_static_value_is_nan": 77, "452": 77, "static_value_is_nan": 77, "833": [77, 531], "items": [77, 98, 623], "static_isin": 77, "static_items": 77, "static_strid": 77, "425": [77, 602], "_containerwithgradi": [78, 99], "_static_stop_gradi": 78, "static_stop_gradi": 78, "976": [78, 287, 604, 621, 624], "49e": [78, 604, 624], "74e": [78, 604, 624], "95e": [78, 604, 624], "024": [78, 604, 624], "096": [78, 604, 624], "216": [78, 81, 604, 624, 682], "626": [78, 604, 624], "en": [78, 604, 605, 624, 819], "wikipedia": [78, 604, 605, 624], "wiki": [78, 604, 605, 624], "stochastic_gradient_desc": [78, 604, 605, 624], "01099": [78, 605], "01003": [78, 605, 624], "01015": [78, 605, 624], "99936122": [78, 605, 624], "99936116": [78, 605, 624], "99936128": [78, 605, 624], "99936104": [78, 605, 624], "w_new": [78, 608, 624], "708": [78, 610, 624], "445": [78, 610, 624], "6e": [78, 610, 624], "00036": [78, 610, 624], "00049": [78, 610, 624], "layerwis": [78, 611, 624], "01132035": [78, 611, 624], "22264051": [78, 611, 624], "2056601": [78, 611, 624], "1324538": [78, 611, 624], "56490755": [78, 611, 624], "96622658": [78, 611, 624], "90848625": [78, 611, 624], "93616199": [78, 611, 624], "77232409": [78, 611, 624], "_containerwithimag": [79, 99], "_containerwithlay": [80, 99], "_static_conv1d": 80, "static_conv1d": 80, "_static_conv1d_transpos": 80, "static_conv1d_transpos": 80, "112": [80, 626, 636, 640, 672, 749], "_static_conv2d": 80, "ey": [80, 618, 625, 641, 647, 838, 845], "static_conv2d": 80, "_static_conv2d_transpos": 80, "static_conv2d_transpos": 80, "_static_conv3d": 80, "fdfh": [80, 643], "static_conv3d": 80, "_static_conv3d_transpos": 80, "static_conv3d_transpos": 80, "_static_depthwise_conv2d": 80, "inp": [80, 625, 647], "static_depthwise_conv2d": 80, "_static_dropout": 80, "static_dropout": 80, "_static_dropout1d": 80, "static_dropout1d": 80, "_static_dropout2d": 80, "_static_dropout3d": 80, "_static_linear": 80, "278": [80, 625, 648, 649], "static_linear": 80, "195": 80, "_static_lstm_upd": 80, "_static_multi_head_attent": 80, "_static_reduce_window": 80, "_static_scaled_dot_product_attent": 80, "static_scaled_dot_product_attent": 80, "39999962": [80, 625, 648, 649], "19999695": [80, 649], "11600018": [80, 649], "88399887": [80, 649], "196": [80, 625, 649], "306": [80, 625, 649], "19999981": [80, 293, 305, 361, 625, 648, 655], "59249449": [80, 625, 655], "68226194": [80, 625, 655], "19603825": [80, 625, 655], "9960382": [80, 625, 655], "26894283": [80, 625, 655], "40236187": [80, 625, 655], "39999437": [80, 625, 655], "59999037": [80, 625, 655], "35046196": [80, 625, 655], "54282808": [80, 625, 655], "39989519": [80, 625, 655], "5998764": [80, 625, 655], "_containerwithlinearalgebra": [81, 99], "_static_choleski": 81, "static_choleski": 81, "577": [81, 626, 656], "707": [81, 626, 656], "static_rol": [81, 83], "_static_cross": 81, "static_cross": 81, "_static_det": 81, "_static_diag": 81, "_static_diagon": 81, "static_diagon": 81, "_static_eigh": 81, "_static_eigvalsh": 81, "static_eigvalsh": 81, "51572949": [81, 626, 663], "17091519": [81, 626, 663], "3448143": [81, 626, 663], "35898387e": [81, 626, 663], "46410179e": [81, 626, 663], "_static_inn": 81, "static_inn": 81, "_static_inv": 81, "static_inv": 81, "_static_matmul": 81, "matul": 81, "static_matmul": 81, "_static_matrix_norm": 81, "deimens": 81, "static_matrix_norm": 81, "_static_matrix_pow": 81, "_static_matrix_rank": 81, "static_matrix_rank": 81, "_static_matrix_transpos": 81, "static_matrix_transpos": 81, "_static_out": 81, "n1": [81, 135, 618], "n2": [81, 135, 618], "static_out": [81, 672], "_static_pinv": 81, "static_pinv": 81, "0426": 81, "0964": 81, "0605": 81, "1368": 81, "_static_qr": 81, "static_qr": 81, "31622777": [81, 626, 674], "9486833": [81, 626, 674], "4472136": [81, 626, 674], "89442719": [81, 626, 674], "16227766": [81, 626, 674], "42718872": [81, 626, 674], "63245553": [81, 626, 674], "47213595": [81, 626, 674], "81377674": [81, 626, 674], "_static_slogdet": 81, "static_slogdet": 81, "6931472": 81, "0986123": 81, "_static_solv": 81, "_static_svd": 81, "static_svd": 81, "au": 81, "aS": 81, "avh": 81, "bvh": 81, "_static_svdv": 81, "_static_tensordot": 81, "_static_tensorsolv": 81, "_static_trac": 81, "static_trac": 81, "_static_vand": 81, "static_vand": 81, "343": [81, 279, 621, 682], "729": [81, 682, 844], "_static_vecdot": 81, "_static_vector_norm": 81, "static_vector_norm": 81, "77359247": [81, 684], "_static_vector_to_skew_symmetric_matrix": 81, "09861231": [81, 626, 675], "static_general_inner_product": 81, "3475602": [81, 677], "93765765": [81, 677], "58776021": [81, 677], "10416126": [81, 677], "80644298": [81, 677], "87024701": [81, 677], "48127627": [81, 677], "79101127": [81, 677], "98288572": [81, 677], "68917423": [81, 677], "_containerwithloss": [82, 99], "_static_binary_cross_entropi": 82, "static_binary_cross_entropi": 82, "511": [82, 627, 686, 688], "_static_cross_entropi": 82, "static_cross_entropi": 82, "20397282": 82, "83258148": 82, "60943794": [82, 626, 675], "_static_sparse_cross_entropi": 82, "static_sparse_cross_entropi": 82, "5108256": [82, 687], "609438": [82, 687], "_containerwithmanipul": [83, 99], "_static_clip": 83, "static_clip": 83, "_static_concat": 83, "_static_constant_pad": 83, "static_constant_pad": 83, "_static_expand_dim": 83, "static_expand_dim": 83, "container_axi": [83, 628, 692], "_static_flip": 83, "static_flip": 83, "_static_permute_dim": 83, "static_permute_dim": 83, "_static_repeat": 83, "static_repeat": 83, "_static_reshap": 83, "static_reshap": 83, "_static_rol": 83, "positivclip": 83, "_static_split": 83, "static_split": 83, "_static_squeez": 83, "static_squeez": 83, "_static_stack": 83, "leavv": 83, "static_stack": 83, "_static_swapax": 83, "_static_til": 83, "static_til": 83, "_static_unstack": 83, "static_unstack": 83, "_static_zero_pad": 83, "repreat": [83, 695], "_containerwithnorm": [84, 99], "34198591": [84, 631, 727], "04274819": [84, 631, 727], "29923761": [84, 631, 727], "24053511": [84, 631, 727], "62221265": [84, 727], "20277636": [84, 727], "41943574": [84, 727], "83710337": [84, 727], "_containerwithrandom": [85, 99], "_static_multinomi": 85, "_static_randint": 85, "static_randint": 85, "_static_random_norm": 85, "static_random_norm": 85, "651": 85, "_static_random_uniform": 85, "static_random_uniform": 85, "481": 85, "0999": 85, "_static_shuffl": 85, "static_shuffl": 85, "431": [85, 730], "274": [85, 730], "_containerwithsearch": [86, 99], "_static_argmax": 86, "static_argmax": 86, "_static_argmin": 86, "static_argmin": 86, "_static_argwher": 86, "static_argwher": 86, "_static_nonzero": 86, "_static_wher": 86, "static_wher": 86, "_containerwithset": [87, 99], "_static_unique_al": 87, "static_unique_al": 87, "_static_unique_count": 87, "static_unique_count": 87, "_static_unique_invers": 87, "static_unique_invers": 87, "_static_unique_valu": 87, "_containerwithsort": [88, 99], "_static_argsort": 88, "static_argsort": 88, "_static_searchsort": 88, "_static_sort": 88, "static_sort": 88, "static_msort": 88, "_containerwithstatist": [89, 99], "_static_cumprod": 89, "static_cumprod": 89, "_static_cumsum": 89, "static_cumsum": 89, "_static_min": 89, "_static_prod": 89, "static_prod": 89, "11000001": [89, 753], "23100001": [89, 753], "30800003": [89, 636, 753], "_static_sum": 89, "_static_var": 89, "static_var": 89, "12666667": [89, 636, 756], "11555555": [89, 636, 756], "rtype": [89, 749, 795], "respectv": [89, 754], "81649649": [89, 754], "94280904": [89, 754], "509902": [89, 636, 754], "2472192": [89, 754], "44948983": [89, 754], "41421354": [89, 754], "6666667": [89, 756], "_containerwithutil": [90, 99], "_static_al": 90, "static_al": 90, "_static_ani": 90, "static_ani": 90, "add_ivy_container_instance_method": 91, "containerexampl": 91, "factorized_tensor": [92, 93, 94, 95, 96, 97], "factorizedtensor": [92, 93, 94, 95, 96, 97], "matrix_or_tensor": 92, "to_tensor": [92, 93, 94, 95, 96, 97], "to_unfold": [92, 93, 94, 95, 96, 97], "to_vec": [92, 93, 94, 95, 96, 97], "cp_tensor": [93, 94], "cptensor": [93, 94, 318, 363], "cp_copi": 93, "cp_flip_sign": 93, "s_i": [93, 94], "normalisation_weight": [93, 94], "normalised_factor": [93, 94], "cp_lstsq_grad": 93, "return_loss": 93, "nabla": 93, "mathcal": 93, "mathbf": 93, "factor_matric": 93, "cp_gradient": 93, "quantiti": 93, "cp_mode_dot": 93, "keep_dim": [93, 97], "cp_multi_mode_dot": 93, "cp_n_param": 93, "tensor_shap": [93, 95, 96, 97], "n_param": [93, 94, 95, 96, 97], "cp_norm": 93, "cp_to_tensor": 93, "khatria": 93, "rao": [93, 370, 428], "khatri": [93, 370, 428], "cp_normal": 93, "normalis": [93, 94], "u_1": [93, 94], "u_n": [93, 94], "v_1": [93, 94], "v_n": [93, 94], "v_k": [93, 94], "u_k": [93, 94], "absorb": [93, 94], "refold": [93, 372, 468, 479], "cp_to_unfold": 93, "ie": 93, "s_u_i": 93, "exploit": [93, 864], "khatri_rao": [93, 370], "cp_to_vec": 93, "ravel": [93, 838], "unfolding_dot_khatri_rao": 93, "mttkrp": 93, "validate_cp_rank": 93, "percent": [93, 96], "validate_cp_tensor": 93, "parafac2_tensor": 94, "parafac2tensor": [94, 319, 363], "apply_parafac2_project": 94, "evolv": [94, 850, 861], "b_i": 94, "ijk": [94, 796], "sum_r": 94, "a_": 94, "ir": [94, 859, 862, 867], "jr": 94, "kr": 94, "coupl": [94, 809, 815, 842, 844, 861], "factoris": 94, "i1": [94, 381, 515], "classmethod": [94, 101, 102, 771], "from_cptensor": 94, "parafac2_tensor_ok": 94, "parafac2_normalis": 94, "normalised_project": 94, "parafac2_to_slic": 94, "slice_idx": 94, "frontal": 94, "a_i": 94, "j_i": 94, "b_": 94, "reformul": 94, "p_i": 94, "orthogon": [94, 318, 322, 363, 370, 422, 436, 442, 626, 661, 662], "sum_": 94, "ijr": 94, "constraint": [94, 796, 819, 820, 830], "projection_matric": 94, "parafac2_to_tensor": 94, "construct": [94, 628, 702, 782, 785, 786, 787, 834, 840, 844, 845, 859, 861, 868], "uneven": 94, "parafac2_to_unfold": 94, "parafac2_to_vec": 94, "validate_parafac2_tensor": 94, "cp": [94, 318, 363, 810], "tr_tensor": 95, "trtensor": [95, 320, 363], "tr_n_param": 95, "tr_to_tensor": 95, "tr_to_unfold": 95, "tr_to_vec": 95, "validate_tr_rank": 95, "validate_tr_tensor": 95, "tt_tensor": 96, "_tt_n_param": 96, "mp": [96, 321, 363], "index_upd": 96, "pad_tt_rank": 96, "factor_list": 96, "n_pad": 96, "pad_boundari": 96, "ring": 96, "bond": 96, "padded_factor_list": 96, "tt_to_tensor": 96, "assembl": [96, 370, 441], "tt_to_unfold": 96, "reassembl": 96, "tt_to_vec": 96, "validate_tt_rank": 96, "constant_rank": 96, "allow_overparametr": 96, "proport": [96, 781], "realiz": [96, 861], "validate_tt_tensor": 96, "tucker_tensor": 97, "tucker_copi": 97, "tucker_mode_dot": [97, 868], "tucker_n_param": 97, "tucker_norm": 97, "tucker_to_tensor": 97, "skip_factor": 97, "transpose_factor": 97, "tucker_to_unfold": 97, "tucker_to_vec": 97, "validate_tucker_rank": 97, "fixed_mod": 97, "validate_tucker_tensor": 97, "_bisection_root_find": 97, "fun": [97, 360, 368, 603, 623, 630, 719, 819], "max_it": 97, "__abs__": [98, 99], "__add__": [98, 99, 815, 818, 822, 823, 827, 832, 833, 842], "__eq__": [98, 99], "__ge__": [98, 99], "__gt__": [98, 99, 838], "__le__": [98, 99], "__lt__": [98, 99], "__ne__": [98, 99], "__pow__": [98, 99, 842], "69678056": 98, "59876156": 98, "82660675": 98, "__radd__": [98, 99, 822, 823, 832], "__rrshift__": [98, 99], "__rshift__": [98, 99], "__rsub__": [98, 99], "__sub__": [98, 99, 815, 818, 822, 827, 842], "__truediv__": [98, 99, 815, 818, 822], "__xor__": [98, 99], "referenc": [98, 824, 831], "resid": [98, 102, 628, 692, 832, 840, 844], "mt": [98, 842], "hopefulli": [98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 850, 851, 852], "overview": [98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 802, 817, 819, 833, 835, 839], "reach": [98, 99, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 778, 779, 781, 782, 784, 785, 786, 787, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 850, 851, 852, 860, 861], "eq": 99, "ge": 99, "le": 99, "ne": 99, "75979435": 99, "52153397": 99, "13532257": 99, "rshift": 99, "truediv": 99, "66666669": [99, 375, 497, 606, 624], "nested_arrai": [101, 102, 103, 817], "nestedarrai": 101, "nested_rank": [101, 102, 103], "inner_shap": [101, 102, 103], "nestedarraybas": [101, 102, 103], "from_row_length": 101, "row_length": 101, "from_row_split": 101, "row_split": 101, "ragged_map": 102, "ragged_multi_map": 102, "ragged_arrai": 102, "ragged_multi_map_in_funct": 102, "replace_ivy_arrai": 102, "unbind": 102, "nestedarrayelementwis": 103, "strictli": [108, 111, 114, 243, 615, 621, 827, 831], "24000001": [108, 615], "703": [109, 615], "683": [109, 615], "408": [109, 615], "313": [109, 615], "437": [109, 615], "40337825": [110, 615], "56114835": [110, 615], "20788449": [110, 615], "0768": [113, 615], "231": [113, 615], "\u03b2": [114, 615], "66666667": [115, 381, 512, 615], "body_fn": [118, 119, 121, 617], "bodi": [118, 121, 617, 814, 835], "lst": [118, 617], "orelse_fn": [119, 617], "body1": [120, 617], "body2": [120, 617], "test_fn": [121, 617, 764, 802, 855, 856], "repeatedli": [121, 617, 630, 717, 819, 835], "ml_framework": [122, 618], "distanc": [122, 618], "adjac": [122, 618], "nestedsequ": [123, 124, 618], "typevar": [123, 124, 618], "supportsbufferprotocol": [123, 124, 618], "static_copy_arrai": [125, 618], "intdtyp": [128, 139, 145, 157, 168, 173, 180, 186, 618, 619], "pycapsul": [129, 140, 618], "interchang": [129, 140, 618, 628, 701], "plu": [130, 618], "x00b": [130, 618], "x00d": [130, 618], "x00e": [130, 618], "66666663": [133, 618], "41588834": [134, 618], "7827941": [134, 618], "6227766": [134, 618], "23413252": [134, 618], "n3": [135, 618], "xv": [135, 618], "yv": [135, 618], "x_nativ": [136, 618, 831], "y_nativ": [136, 618], "z_nativ": [136, 618], "d_type": [138, 618], "col": [143, 323, 363, 618], "primari": [143, 162, 163, 195, 196, 323, 363, 379, 505, 540, 541, 618, 619, 620, 623, 767, 769, 808, 813, 816, 820, 829, 831, 832, 834, 835, 838, 846, 848], "upward": [143, 323, 363, 618], "downward": [143, 323, 363, 618], "2xn": [143, 323, 363, 618], "subarrai": [143, 323, 363, 618], "incompat": [150, 619], "closest": [153, 232, 242, 243, 279, 289, 619, 621, 835, 838], "xtype": [153, 619], "ytype": [153, 619], "native_uint16": [153, 619], "complexdtyp": [154, 168, 177, 619], "set_default_complex_dtyp": [154, 183, 619], "4294": [154, 156, 619], "967346": [154, 156, 619], "set_default_dtyp": [155, 184, 619, 820, 828], "floatdtyp": [156, 179, 619], "set_default_float_dtyp": [156, 165, 177, 185, 619, 820], "int_dtyp": [157, 180, 619], "set_default_int_dtyp": [157, 165, 186, 619, 820], "4294967346": [157, 158, 619], "uint_dtyp": [158, 181, 619], "uint": [158, 173, 181, 187, 619, 820, 833], "uintdtyp": [158, 173, 181, 187, 619], "set_default_uint_dtyp": [158, 165, 187, 619], "native_bool": [160, 619], "ieee": [161, 219, 236, 241, 259, 269, 278, 283, 286, 616, 619, 621, 851], "754": [161, 219, 236, 241, 259, 269, 278, 283, 286, 616, 619, 621, 851], "smallest_norm": [161, 619], "bfloat16": [162, 619, 766, 767, 820, 832, 835, 836], "unsupport": [163, 196, 541, 619, 620, 623, 761, 764, 806, 809, 825, 832], "encapsul": [164, 619, 819], "314": [164, 276, 333, 366, 619, 621], "9223372036854775808": [164, 619], "9223372036854775807": [164, 619], "65535": [164, 619], "4294967295": [164, 619], "native_uint8": [166, 619], "hashabl": [170, 619], "type1": [174, 619], "type2": [174, 619], "array_api_promot": [174, 175, 619, 766, 767], "unexpect": [175, 243, 619, 621, 820], "default_complex_dtyp": [177, 619], "default_dtype_stack": [178, 184, 619], "unset_default_dtyp": [178, 619], "native_uint64": [178, 619], "default_float_dtyp": [179, 619, 820], "default_int_dtyp": [180, 186, 619, 820], "default_uint_dtyp": [181, 187, 619], "ret1": [182, 619], "ret2": [182, 619], "reset": [183, 184, 185, 186, 187, 213, 214, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 619, 620, 623, 821], "default_complex_dtype_stack": [183, 619], "default_float_dtype_stack": [185, 619], "native_float16": [188, 619], "unmodifi": [190, 620, 816, 820], "aliv": [197, 202, 204, 544, 564, 565, 620, 623, 821], "139740789224448": [197, 620], "physic": [200, 620], "process_specif": [203, 215, 620], "percentag": [203, 620], "ram": [203, 211, 215, 620], "alon": [203, 215, 620, 802, 826, 835], "036902561555": [203, 620], "7024003467681645": [203, 620], "as_native_dev": [203, 620], "7095597456708771": [203, 620], "attr_onli": [204, 620], "soft_device_mod": [206, 214, 620], "chunk": [207, 208, 209, 620], "split_factor": [207, 620, 824], "max_chunk_s": [209, 620], "chunk_siz": [209, 620], "input_ax": [209, 620], "output_ax": [209, 620], "usag": [209, 620, 820, 828, 831, 835, 840, 846, 851, 864], "fed": [209, 620, 844], "fist": [209, 620], "gb": [211, 215, 620, 809, 825], "66700032": [211, 620], "589934592": [211, 620], "219563008": [215, 620], "902400346": [215, 620], "525205504": [215, 620], "na": [216, 621, 835], "noqa": [216, 283, 621, 782, 791, 833], "princip": [217, 221, 223, 353, 366, 621], "domain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 353, 366, 621, 823, 859, 861], "codomain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 353, 366, 621, 823], "\u03c0": [217, 221, 223, 224, 616, 621], "3\u03c0": [217, 224, 621], "unspecifi": [217, 218, 222, 225, 234, 239, 241, 243, 278, 282, 283, 287, 370, 422, 621, 626, 628, 661, 662, 700, 831], "\u03c0j": [218, 222, 225, 257, 259, 621], "3\u03c0j": [218, 257, 259, 621], "x1_i": [219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 621, 814], "2019": [219, 236, 241, 259, 269, 621, 861, 864], "overflow": [219, 236, 243, 621, 626, 636, 675, 755, 807, 820], "commut": [219, 621], "tabl": [219, 236, 269, 575, 597, 621, 623, 766, 767, 782, 832, 837, 861], "dj": [219, 236, 269, 621], "bj": [219, 236, 269, 333, 366, 621], "z1": [219, 621], "z2": [219, 621], "yj": [220, 621], "nanj": [222, 621], "809": [222, 621], "569": [222, 621], "733": [222, 621], "notat": [224, 621, 636, 749, 819], "denot": [224, 621, 784], "quadrant": [224, 621], "rai": [224, 621, 851], "bitwis": [226, 229, 231, 266, 621], "170": [230, 621], "243": [230, 621], "xor": [231, 266, 621], "654": [233, 621], "ci": [234, 239, 241, 282, 621, 814, 820, 826, 833, 835, 846], "368": [234, 621], "670": [234, 621], "202": [234, 621, 814], "548": [234, 621], "1490": [234, 621], "57079633": [235, 621], "14159265": [235, 621], "71238898": [235, 621], "28318531": [235, 621], "02617994": [235, 621], "87266463": [235, 621], "01919862": [235, 621], "03839725": [235, 621], "05759586": [235, 621], "07679449": [235, 621], "09599311": [235, 621], "11519173": [235, 621], "35081118": [235, 621], "88139129": [235, 621], "underflow": [236, 243, 621, 626, 675, 820], "textbook": [236, 269, 621], "frac": [236, 258, 260, 280, 282, 286, 369, 375, 396, 397, 401, 402, 491, 493, 621], "ac": [236, 269, 621, 795, 796], "bd": [236, 269, 621], "bc": [236, 269, 621, 795, 796], "versu": [236, 269, 621], "riemann": [236, 269, 621], "sphere": [236, 269, 621], "c99": [236, 269, 621], "infinit": [236, 269, 283, 621], "unlik": [236, 269, 621, 814, 819, 822, 851, 866, 868], "698": [236, 621], "truth": [237, 247, 248, 255, 256, 272, 371, 444, 621, 761, 763, 774, 806, 825, 832, 835], "32862675": [238, 621], "67780113": [238, 621], "11246294": [238, 621], "42839241": [238, 621], "52050018": [238, 621], "16799599": [238, 621], "30787992": [238, 621], "43796915": [238, 621], "98667163": [238, 621], "79690808": [238, 621], "88020504": [238, 621], "91031402": [238, 621], "95228523": [238, 621], "96610528": [238, 621], "cut": [239, 241, 281, 282, 283, 286, 621, 850, 867], "08553692": [239, 621], "567": [239, 621], "00344786": [239, 621], "76297021": [239, 621], "197948": [239, 621], "53253174": [239, 621], "accur": [241, 259, 621, 626, 675, 829], "fdlibm": [241, 259, 621], "compliant": [241, 259, 264, 265, 330, 331, 366, 621, 636, 750, 751, 752, 754], "potenti": [241, 259, 621, 802, 808, 809, 819, 820, 832, 839, 864], "632": [241, 621], "20e": [241, 621], "72e": [241, 621, 766], "greatest": [242, 243, 246, 621], "pep": [243, 621, 827], "disambigu": [243, 621, 830], "former": [243, 621, 809, 820, 823, 832], "latter": [243, 621, 809, 814, 816, 820, 823, 832], "overload": [243, 621, 835], "led": [243, 621, 814, 863], "subtl": [243, 621, 820, 867], "bug": [243, 621, 802, 808, 810, 817, 825, 826, 832, 835, 847], "ambigu": [243, 621], "semant": [243, 278, 372, 483, 621, 820, 840, 845, 850, 862], "ill": [243, 621, 768], "surpris": [243, 621, 846], "arrau": [249, 621], "log_": [258, 260, 621], "742": [259, 621], "negat": [271, 333, 366, 621], "52095687": [274, 621], "92457771": [274, 621], "49372482": [274, 621], "22738838": [274, 621], "156": [274, 621, 766], "5877228": [274, 621], "189": [275, 621, 630, 708], "252": [275, 621], "378": [275, 621], "1150": [275, 621], "2890": [275, 621], "172": [275, 621], "487": [275, 621, 625, 649], "344": [275, 621], "355j": [276, 333, 366, 621], "55j": [276, 333, 366, 621], "primarili": [278, 621, 808, 818, 861], "reason": [278, 287, 621, 808, 810, 814, 815, 818, 819, 820, 822, 828, 831, 832, 835, 836, 838, 840, 842, 851, 867], "counterpart": [279, 621, 818, 829], "deliber": [279, 621, 838], "imprecis": [279, 621], "5654": [279, 621], "034": [279, 621], "433": [279, 607, 609, 621, 624], "signum": [280, 621], "textrm": [280, 621], "932": [281, 621], "746": [281, 621], "657": [281, 531, 621, 623], "indistinguish": [283, 621], "convent": [283, 621, 626, 636, 667, 749, 810, 816, 827, 836, 850, 867], "infti": [283, 621], "32455532": [283, 621], "89897949": [283, 621], "169": [283, 621], "analyt": [286, 621, 861, 863, 867], "pole": [286, 621], "546": [286, 621, 625, 649], "916": [286, 621, 627, 686], "996": [286, 621], "histor": [287, 621], "stem": [287, 621, 831], "older": [287, 621], "advis": [287, 621, 832], "462": [287, 621], "604": [287, 621], "984": [287, 621], "997": [287, 621], "0375": [289, 621], "032": [289, 621], "57258511": [292, 361], "69999999": [292, 361, 614, 624], "90928203": [292, 361], "98772264": [292, 361], "99591321": [292, 361], "99863964": [292, 361], "69880581": [292, 361], "18126924": [292, 361], "79999995": [293, 302, 305, 361], "70000005": [293, 305, 361], "hardtanhx": [294, 361], "20141329": [296, 361], "40318608": [296, 361], "48683619": [296, 361], "46328247": [296, 361], "59813893": [296, 361], "43748799": [296, 361], "parametr": [297, 361, 814, 835, 861], "71589994": [299, 303, 361], "14324772": [299, 303, 361], "70648694": [299, 303, 361], "54488957": [299, 303, 361], "10740992": [299, 303, 361], "19514863": [299, 303, 361], "6705687": [300, 361], "52016652": [300, 361], "40560818": [300, 361], "45630932": [300, 361], "2689": [301, 361], "7310": [301, 361], "7615": [301, 361], "2784": [301, 361], "7168": [301, 361], "8708": [301, 361], "4374": [301, 361], "1379": [301, 361], "0089": [301, 361], "59999991": [302, 361], "03597236": [304, 361], "43827677": [304, 361], "80100036": [304, 361], "12954807": [304, 361], "76459098": [304, 361], "20044947": [304, 361], "60000372": [304, 361], "taper": [307, 310, 363], "summat": [307, 363, 636, 749, 795, 796], "leakag": [307, 363], "wors": [307, 363, 851], "y1": [308, 363], "0800": [309, 363], "3979": [309, 363], "9121": [309, 363], "5400": [309, 363], "han": [310, 363], "ith": [311, 363], "00726415": [312, 363], "9999736": [312, 363], "2773e": [313, 363], "0172e": [313, 363], "9294e": [313, 363], "4149": [313, 363], "9138": [313, 363], "5529": [313, 363], "multidimension": [315, 316, 363, 861], "normalise_factor": [318, 319, 363], "parafac2": [319, 363], "tr": [320, 363], "context": [320, 363, 563, 623, 808, 809, 810, 816, 820, 821, 822], "38268346": [328, 363], "38268352": [328, 363], "8563191": [328, 363], "14943568": [328, 363], "paddlepaddl": [330, 331, 366, 809], "cn": [330, 331, 366], "zh": [330, 331, 366], "amax_cn": [330, 366], "sentinel": [330, 331, 366, 636, 750, 752], "amin_cn": [331, 366], "position": [340, 366], "triangl": [344, 366], "999999e": [345, 366], "65999985": [347, 366], "52000046": [347, 366], "1500001": [347, 366, 536, 623], "11259177": [348, 366], "3574118": [348, 366], "20097363": [348, 366], "suppli": [352, 366, 372, 475, 795, 815, 817, 835], "217234": [353, 366], "hurwitz": [356, 366], "custom_grad_func": [358, 368], "bind": [358, 368, 808, 830, 860, 861], "upstream": [358, 368, 809, 810, 814, 825, 830], "primal": [359, 360, 368], "jacobian": [359, 360, 368, 609, 624, 846, 861], "cotang": [360, 368], "stanh": 361, "ndenumer": 363, "ndindex": 363, "random_cp": 363, "random_parafac2": 363, "random_tr": 363, "random_tt": 363, "random_tuck": 363, "bind_custom_gradient_funct": [368, 830], "jvp": 368, "vjp": 368, "area_interpol": 369, "01823380e": [369, 390, 400], "15385818e": [369, 390, 400], "36371466e": [369, 390, 400], "38763905e": [369, 390, 400], "60722279e": [369, 390, 400], "80319249e": [369, 390, 400], "05617893e": [369, 390, 400], "21500000e": [369, 390, 400], "24000015e": [369, 390, 400], "90734863e": [369, 390, 400], "10000420e": [369, 390, 400], "15899994e": [369, 390, 400], "24000053e": [369, 390, 400], "81469727e": [369, 390, 400], "09999847e": [369, 390, 400], "4135742": [369, 390, 400], "6779785": [369, 390, 400], "3770599": [369, 390, 400], "8719864": [369, 390, 400], "72109985": [369, 390, 400], "52869415": [369, 390, 400], "79182434": [369, 390, 400], "72489166": [369, 390, 400], "container_n": [369, 390, 400], "container_typ": [369, 390, 400, 623], "container_norm": [369, 390, 400], "1580677": [369, 390], "89422607": [369, 390], "86190414": [369, 390], "00041008": [369, 390], "75149155": [369, 390], "97056389": [369, 390], "87819386": [369, 390], "89381361": [369, 390], "50000000e": [369, 390, 400, 766], "22044605e": [369, 390, 400], "ed": [369, 392, 393, 394], "rest": [369, 372, 392, 393, 394, 461, 809, 817, 819, 835, 845, 863], "5d": [369, 394, 782], "emb": [369, 395], "51285338": [369, 395], "87183261": [369, 395], "2308116": [369, 395], "02733949e": [369, 396], "00j": [369, 396], "49660576e": [369, 396], "68178638e": [369, 396], "01j": [369, 396, 401], "98912367e": [369, 396], "21802426e": [369, 396, 401], "04549134e": [369, 396, 401], "82842712e": [369, 396, 401], "86902654e": [369, 396, 401], "25501143e": [369, 396, 401], "32978028e": [369, 396, 401], "52068201e": [369, 396, 401], "71158374e": [369, 396, 401], "generate_einsum_equ": 369, "get_interpolate_kernel": 369, "27279224e": [369, 400], "44232273e": [369, 400], "70464332e": [369, 400], "73454881e": [369, 400], "00902849e": [369, 400], "10039906e": [369, 400], "07022366e": [369, 400], "69506073": [369, 400], "93914604": [369, 400], "88008881": [369, 400], "18951607": [369, 400], "57439613": [369, 400], "15318303e": [369, 401], "15148591e": [369, 401], "19j": [369, 401], "25000000e": [369, 401], "35378602e": [369, 401], "02j": [369, 401], "65404249e": [369, 401], "17611649e": [369, 401], "24320230e": [369, 401], "79344813e": [369, 401], "22374531e": [369, 401], "45929364e": [369, 401], "14208718e": [369, 401], "07177031e": [369, 401], "indexerror": [369, 402, 413, 628, 692, 797, 824], "interp": [369, 838], "xp": [369, 403, 814], "fp": [369, 403], "nd": [369, 404], "tf_bicub": [369, 404, 838], "nearest_interpol": 369, "window_shap": [369, 410], "pool_typ": [369, 410], "irfft": [369, 412], "silent": [369, 412], "discard": [369, 412, 819], "639999": [369, 412], "516063j": [369, 412], "3999999": [369, 412], "3999996": [369, 412], "99038106j": [369, 413], "33012702": [369, 413], "23205081j": [369, 413], "33012702j": [369, 413], "superdiagon": [370, 420, 626, 659], "subdiagon": [370, 420, 626, 659], "eigendecomposit": [370, 422, 626, 661, 662], "qlq\u1d40": [370, 422, 626, 661, 662], "tridiagon": [370, 423], "38196602": [370, 423], "61803389": [370, 423], "35048741": [370, 423], "56710052": [370, 423], "06693714": [370, 423], "74234426": [370, 423], "56155282": [370, 423], "56155276": [370, 423], "82842714": [370, 423], "82842731": [370, 423, 626, 662], "necessarili": [370, 424, 815, 818], "generalis": [370, 425], "skip_matrix": [370, 428, 430], "khatri_rao_product": [370, 428], "kronecker_product": [370, 430], "n_column": [370, 430], "nnmf": [370, 431], "hoi": [370, 436, 442], "solve_triangular": 370, "unit_diagon": [370, 437], "solut": [370, 437, 626, 676, 766, 802, 806, 808, 809, 810, 818, 820, 825, 833, 835, 838, 859, 863], "determinist": [370, 438], "borrow": [370, 438, 813], "extmath": [370, 438], "ivan": [370, 439], "oseledet": [370, 439], "scientif": [370, 439, 861], "2295": [370, 439], "2317": [370, 439], "2011": [370, 439], "convention": [371, 445, 864], "issu": [371, 445, 781, 803, 804, 805, 806, 807, 809, 811, 814, 816, 817, 819, 820, 821, 822, 824, 825, 832, 835, 836, 838, 840, 844, 846, 852, 854], "explicit": [371, 372, 445, 483, 809, 818, 820, 830, 831, 832, 840, 846, 861], "555969": [371, 445], "223876": [371, 445], "111938": [371, 445], "42649534": [371, 445], "68651628": [371, 445], "51119184": [371, 445], "59967244": [371, 445], "mae": [371, 446], "91097307": [371, 448], "3467": [371, 449], "0133": [371, 449], "0250": [371, 449], "0056": [371, 449], "0025": [371, 449], "0675": [371, 449], "6987": [371, 450], "1606": [371, 450], "3711": [371, 450], "4032": [371, 450], "6931": [371, 450], "whilst": [372, 453, 454, 455, 845, 848, 861], "ary3": [372, 455], "check_scalar": 372, "force_integ": [372, 457], "force_posit": [372, 457], "mod": [372, 458, 814], "tall": [372, 464], "appear": [372, 466, 467, 603, 623, 809, 810, 814, 832, 838, 854], "horizot": [372, 471], "shortcut": [372, 475, 809], "linear_ramp": [372, 475], "reflect": [372, 475, 810, 815, 831, 835], "ramp": [372, 475], "mirror": [372, 475, 805, 808, 861], "padding_func": [372, 475], "iaxis_pad_width": [372, 475], "iaxi": [372, 475], "unalt": [372, 475], "put": [372, 480, 802, 808, 835, 846, 867], "mul": [372, 480, 831, 842], "conceptu": [372, 483, 857, 862], "concern": [372, 483, 810, 813, 818, 820, 822, 831, 838, 839, 867], "regard": [372, 483, 807, 818, 832, 833, 838, 851], "mutat": [372, 483], "elimin": [372, 488, 809], "consecut": [372, 488], "batch_mean": [375, 491, 493], "batch_var": [375, 491, 493], "running_vari": [375, 491, 493], "local_response_norm": 375, "neighbour": [375, 496], "42857143": [375, 497], "5714286": [375, 497], "multivari": [376, 500], "bayesian": [376, 500], "supposedli": [379, 504], "indirect": [379, 505], "secondari": [379, 505], "is_ivy_sparse_arrai": 380, "is_native_sparse_arrai": 380, "native_sparse_arrai": 380, "coo_indic": [380, 508], "crow_indic": [380, 508], "col_indic": [380, 508], "ccol_indic": [380, 508], "row_indic": [380, 508], "dense_shap": [380, 508], "native_sparse_array_to_indices_values_and_shap": 380, "nativesparsearrai": 380, "sparsearrai": 380, "linalg": [381, 512, 626, 675, 676, 808, 831, 833], "aw": [381, 512, 851], "48447205": [381, 512], "c0": [381, 515], "ck": [381, 515], "c2": [381, 515], "nearest_jax": [381, 522], "trace_on_next_step": [526, 623, 786, 844], "recalcul": [529, 623], "my_sum": [529, 623], "val1": [529, 623], "val2": [529, 623], "cached_sum": [529, 623], "line_eq": [529, 623], "slp": [529, 623], "itc": [529, 623], "cached_line_eq": [529, 623], "0353": [530, 623], "424": [530, 623], "176": [530, 623], "339": [530, 623], "271": [530, 623], "391": [530, 623], "417": [531, 623], "583": [531, 623], "0667": [531, 623], "267": [531, 623], "131": [531, 623], "263": [531, 623], "394": [531, 623, 632, 733], "526": [531, 623], "788": [531, 623], "default_str": [534, 623], "46999979": [535, 623], "66000009": [535, 623], "93000001": [535, 623], "29000092": [535, 623], "33999991": [535, 623], "6400001": [535, 623], "96000004": [535, 623], "36000013": [535, 623], "51999998": [535, 623], "67000008": [535, 623], "suppos": [535, 623, 820, 835], "960": [535, 623], "3600": [535, 623], "h1": [535, 623], "w1": [535, 623], "40499985": [536, 623], "61000061": [536, 623], "max_depth": [547, 623], "seen_set": [547, 623], "local_set": [547, 623], "referr": [547, 623], "redund": [547, 623, 802, 820, 824, 832, 854], "example_funct": [547, 623], "ref_id_1": [547, 623], "ref_id_2": [547, 623], "ref_id_3": [547, 623], "ivyexcept": [552, 584, 623, 797, 821, 824, 829, 831, 832, 836], "allow_dupl": [562, 623], "fork": [563, 623, 803, 814, 819, 825], "forkserv": [563, 623], "mp_default": [563, 623], "defaultcontext": [563, 623], "0x7f4e3193e520": [563, 623], "mp_fork": [563, 623], "forkcontext": [563, 623], "0x7f4e3193e580": [563, 623], "mp_spawn": [563, 623], "spawncontext": [563, 623], "0x7f4e3193e5e0": [563, 623], "mp_forkserv": [563, 623], "forkservercontext": [563, 623], "0x7f4e3193e640": [563, 623], "garbag": [565, 623], "collector": [565, 623], "get_all_arrays_in_memori": [565, 623], "exception_trace_mod": [569, 592, 623, 837], "lenient": [570, 593, 623], "inplace_mod": [570, 593, 623], "break": [570, 623, 802, 816, 820, 827, 836, 846], "infus": [571, 623], "nestable_mod": [574, 596, 623, 837], "precise_mod": [575, 597, 623, 837], "shape_array_mod": [577, 599, 623, 837], "show_func_wrapper_trace_mod": [578, 600, 623, 837], "tmp_dr": [579, 623], "tmp_dir": [579, 601, 623, 837], "my_tmp": [579, 623], "49999999999975": [581, 623], "5015015015010504": [581, 623], "000444502911705e": [581, 623], "9999999999995j": [581, 623], "00000262": [582, 623], "15605032": [582, 623], "01208451j": [582, 623], "00048": [582, 623], "1296": [582, 623], "00864": [582, 623], "isn": [584, 623, 810, 829, 831, 843, 846, 863], "100000023841858": [586, 623], "200000047683716": [586, 623], "299999952316284": [586, 623], "400000095367432": [586, 623], "599999904632568": [586, 623], "hemant": [590, 623], "unset_shape_array_mod": [591, 623], "set_exception_trace_mod": [592, 623, 824], "set_min_bas": [594, 623], "set_min_denomin": [595, 623], "set_nestable_mod": [596, 623], "set_precise_mod": [597, 623], "set_queue_timeout": [598, 623], "set_shape_array_mod": [599, 623], "set_show_func_wrapper_trace_mod": [600, 623, 824], "set_tmp_dir": [601, 623], "my_dir": [601, 623], "451": [602, 623], "in_ax": [603, 623], "out_ax": [603, 623], "thereof": [603, 623], "summaris": [603, 623], "99999998": [604, 624], "19999998": [604, 624], "00000001": [604, 624], "00300001": [604, 624], "00800001": [604, 624], "0125": [604, 624], "17294501": [604, 624], "15770318": [604, 624], "20863818": [604, 624], "90000075": [605, 624], "90000164": [605, 624], "9000032": [605, 624], "50000012e": [605, 624], "92558754": [605, 624], "92558694": [605, 624], "92558682": [605, 624], "92558861": [605, 624], "60000025e": [605, 624], "01024": [605, 624], "retain_grad": [606, 624], "func_ret": [606, 624, 830], "666666": [606, 624], "333332": [606, 624], "66666675": [606, 614, 624], "argnum": [607, 624], "933": [607, 609, 624], "jac_fn": [609, 624], "639": [610, 624], "361": [610, 624], "52565837": [611, 624], "8418861": [611, 624], "68377209": [611, 624], "value_grad": [614, 624], "42333412": [614, 624], "5333333": [614, 624], "93333334": [614, 624], "43333334": [614, 624], "0666666": [614, 624], "softsign": 615, "718281828459045": 616, "euler": 616, "141592653589793": 616, "cmp_i": 617, "cmp_isnot": 617, "for_loop": 617, "if_els": 617, "try_except": 617, "to_dlpack": 618, "as_ivy_dtyp": [619, 832], "as_native_dtyp": 619, "check_float": 619, "closest_valid_dtyp": 619, "default_dtyp": [619, 820, 828], "dtype_bit": 619, "function_supported_dtyp": [619, 820, 835], "function_unsupported_dtyp": [619, 820], "infer_default_dtyp": 619, "invalid_dtyp": [619, 820], "is_hashable_dtyp": 619, "is_native_dtyp": 619, "promote_typ": [619, 820], "promote_types_of_input": [619, 820, 831], "type_promote_arrai": [619, 820], "unset_default_complex_dtyp": 619, "unset_default_float_dtyp": 619, "unset_default_int_dtyp": 619, "unset_default_uint_dtyp": 619, "valid_dtyp": 619, "defaultcomplexdtyp": 619, "defaultdtyp": 619, "defaultfloatdtyp": 619, "defaultintdtyp": 619, "defaultuintdtyp": 619, "as_ivy_dev": [620, 842], "clear_cached_mem_on_dev": 620, "dev_util": [620, 821], "function_supported_devic": 620, "function_unsupported_devic": 620, "get_all_ivy_arrays_on_dev": [620, 821], "handle_soft_device_vari": [620, 821], "num_cpu_cor": [620, 821], "num_gpu": [620, 821, 835], "num_ivy_arrays_on_dev": 620, "percent_used_mem_on_dev": 620, "print_all_ivy_arrays_on_dev": 620, "set_split_factor": [620, 824], "split_func_cal": 620, "total_mem_on_dev": [620, 821], "tpu_is_avail": 620, "unset_default_devic": [620, 821], "unset_soft_device_mod": [620, 821], "used_mem_on_dev": 620, "defaultdevic": [620, 821], "profil": 620, "save_dir": 620, "arg_info": 623, "arg_nam": 623, "cache_fn": [623, 828], "current_backend_str": [623, 835, 840, 842], "function_supported_devices_and_dtyp": 623, "function_unsupported_devices_and_dtyp": 623, "get_item": [623, 831], "get_referrers_recurs": 623, "inplace_arrays_support": 623, "inplace_variables_support": 623, "is_ivy_nested_arrai": 623, "isscalar": 623, "match_kwarg": 623, "num_arrays_in_memori": 623, "print_all_arrays_in_memori": 623, "set_item": 623, "to_ivy_shap": 623, "to_native_shap": 623, "try_else_non": 623, "unset_array_mod": [623, 837], "unset_exception_trace_mod": 623, "unset_inplace_mod": 623, "unset_min_bas": 623, "unset_min_denomin": 623, "unset_nestable_mod": 623, "unset_precise_mod": 623, "unset_queue_timeout": 623, "unset_show_func_wrapper_trace_mod": 623, "unset_tmp_dir": 623, "vmap": [623, 846, 861], "arraymod": 623, "precisemod": [623, 820], "jac": 624, "value_and_grad": [624, 830], "neural": [625, 778, 782, 802, 855, 857, 859, 860, 861, 865, 867, 868], "feature_group_count": [625, 638, 645, 646], "oiw": [625, 638, 639, 645], "oihw": [625, 638, 641, 645], "oidhw": [625, 638, 643, 645], "dhwio": [625, 638, 639, 643, 645], "conv_general_dil": [625, 832], "conv_general_transpos": 625, "depthwis": [625, 647, 768, 782], "overfit": [625, 648], "overal": [625, 648, 796, 818, 820, 821, 823, 845, 854, 857, 859, 860, 861], "1428566": [625, 648], "49000001": [625, 648], "55599999": [625, 648], "21000004": [625, 648], "incom": [625, 649], "666": [625, 626, 649, 668], "4269": [625, 649], "911": [625, 649, 824], "157": [625, 649], "753": [625, 649], "545": [625, 632, 649, 731], "547": [625, 649, 821], "124": [625, 649], "963": [625, 649], "98495483": [625, 649], "0293808": [625, 649], "0159359": [625, 649], "74752808": [625, 649], "20942307": [625, 649], "3205719": [625, 649], "all_weight": [625, 650], "has_bias": [625, 650], "num_lay": [625, 650, 782], "batch_first": [625, 650, 652], "multi": [625, 626, 650, 652, 657, 768, 782, 822, 839, 846, 857, 859, 861, 865], "long": [625, 650, 651, 809, 810, 819, 820, 822, 824, 825, 832, 840, 861], "seq_len": [625, 650], "input_s": [625, 650], "h_0": [625, 650], "c_0": [625, 650], "num_direct": [625, 650], "hidden_s": [625, 650], "four": [625, 650, 805, 815, 820, 822, 827, 828, 835, 838, 843], "w_ih": [625, 650], "w_hh": [625, 650], "b_ih": [625, 650], "b_hh": [625, 650], "bias": [625, 650], "pack": [625, 650], "h_out": [625, 650], "c_out": [625, 650], "paper": [625, 652, 802, 852], "vaswani": [625, 652], "al": [625, 652], "num_attention_head": [625, 652], "key_dim": [625, 652, 782], "value_dim": [625, 652, 782], "attention_weight": [625, 652], "unbatch": [625, 652], "nm": 625, "box": [625, 653, 654, 809], "iou_threshold": [625, 653], "max_output_s": [625, 653], "score_threshold": [625, 653], "roi_align": 625, "spatial_scal": [625, 654], "sampling_ratio": [625, 654], "23333359": [625, 655], "03946018": [625, 655], "0280633": [625, 655], "29981947": [625, 655], "29981089": [625, 655], "06345534": [625, 655], "9634552": [625, 655], "19336844": [625, 655], "09336829": [625, 655], "axisa": [626, 657], "axisb": [626, 657], "axisc": [626, 657], "293": [626, 658], "46997": [626, 658], "explicitli": [626, 662, 663, 679, 763, 782, 783, 784, 806, 814, 815, 816, 818, 820, 823, 824, 825, 828, 829, 830, 831, 833, 835, 840, 846, 855, 861], "17157288": [626, 662], "9238795": [626, 662], "78930789": [626, 662], "59803128": [626, 662], "19127655": [626, 662], "31213903": [626, 662], "63418275": [626, 662], "84632206": [626, 662], "70548367": [626, 662], "70223427": [626, 662], "09570674": [626, 662], "63116378": [626, 662], "56109613": [626, 662], "53554028": [626, 662], "32237405": [626, 662], "43822157": [626, 662], "83906901": [626, 662], "50766778": [626, 662], "71475857": [626, 662], "48103389": [626, 662], "3676433": [626, 662], "68466955": [626, 662], "62933773": [626, 662], "77917379": [626, 662], "14264561": [626, 662], "61036086": [626, 662], "45033181e": [626, 663], "02829754e": [626, 663], "54220343e": [626, 663], "12647155e": [626, 663], "38447177e": [626, 663], "56155300e": [626, 663], "26794919": [626, 663], "7320509": [626, 663], "0012": [626, 665], "00342": [626, 665], "000565": [626, 665], "0104": [626, 665], "000981": [626, 665], "00282": [626, 665], "000766": [626, 665], "0322": [626, 665], "00237": [626, 665], "000151": [626, 665], "00101": [626, 665], "00019": [626, 665], "0214": [626, 665], "00171": [626, 665], "0107": [626, 665], "0167": [626, 665], "0472": [626, 665], "0536": [626, 665], "0177": [626, 665], "000429": [626, 665], "00762": [626, 665], "lu_factor": 626, "pivot": [626, 666], "lu": [626, 666], "frobeniu": [626, 668], "nuclear": [626, 668], "induc": [626, 668], "ranl": [626, 668], "47722558": [626, 668], "776": [626, 668], "6000004": [626, 668], "118": [626, 669], "moor": [626, 673], "penros": [626, 673], "31622776": [626, 674], "94868332": [626, 674], "1622777": [626, 674], "42718887": [626, 674], "deteremin": [626, 675], "logsabsdet": [626, 675], "subject": [626, 675], "ordin": [626, 676], "b2": [626, 676], "usvh": [626, 677], "cetera": [626, 677], "driver": [626, 678, 846], "cusolv": [626, 678], "gesvd": [626, 678], "gesvdj": [626, 678], "gesvda": [626, 678], "86217213": [626, 678], "31816804": [626, 678], "615": [626, 678], "ss": [626, 678], "25994301": [626, 678], "16403675": [626, 678], "61529762": [626, 678], "51231241": [626, 678], "39777088": [626, 678], "15413129": [626, 678], "1029852": [626, 678], "01383495": [626, 678], "86647356": [626, 678], "7786541": [626, 678], "55970621": [626, 678], "16857576": [626, 678], "86412698": [626, 678], "37566757": [626, 678], "88477993": [626, 678], "95925522": [626, 678], "6444726": [626, 678], "54687881": [626, 678], "16134834": [626, 678], "35037804": [626, 678], "31025076": [626, 678], "35769391": [626, 678], "transposit": [626, 679], "success": [626, 636, 681, 753, 755, 805, 809, 819, 851], "0x": [626, 682], "Such": [626, 682, 828, 835], "progress": [626, 682, 805, 809, 810, 845], "alexandr": [626, 682], "theophil": [626, 682], "dot_product": [626, 683], "9000001": [626, 684], "64158917": [626, 684], "skew": [626, 685], "6666193": [627, 686], "67164493e": [627, 686], "05471958e": [627, 686], "32684899e": [627, 686], "30496836e": [627, 686], "05393649": [627, 686], "49992943": [627, 686], "83330965": [627, 686], "35667494": [627, 688], "79329094": [627, 688], "512926": [627, 688], "outsid": [628, 689, 700, 820, 821, 828, 842, 866], "honor": [628, 696], "beyond": [628, 697, 823, 832, 867], "famili": [628, 700], "intxx": [628, 700], "floatxx": [628, 700], "rep": [628, 702], "fomaml_step": 629, "inner_cost_fn": [629, 705, 706, 707], "outer_cost_fn": [629, 705, 706], "inner_grad_step": [629, 705, 706, 707], "inner_learning_r": [629, 705, 706, 707], "inner_optimization_step": [629, 705, 706, 707], "inner_batch_fn": [629, 705, 706], "outer_batch_fn": [629, 705, 706], "average_across_step": [629, 705, 706], "inner_v": [629, 705, 706], "keep_inner_v": [629, 705, 706], "outer_v": [629, 705, 706], "keep_outer_v": [629, 705, 706], "return_inner_v": [629, 705, 706, 707], "num_task": [629, 705, 706, 707], "maml": [629, 705, 706], "0x7f223eedf2e0": [629, 705, 706, 707], "maml_step": 629, "vanilla": [629, 706, 844, 861], "_variabl": [629, 706, 707], "sub_batch": [629, 706], "40069818": [629, 706], "13723135": [629, 706], "reptile_step": 629, "cost_fn": [629, 707], "reptil": [629, 707], "batch_in": [629, 707], "4485182": [629, 707], "139": [629, 707], "9569855": [629, 707], "9880483": [629, 707], "01766968": [629, 707], "02197957": [629, 707], "02197981": [629, 707], "all_nested_indic": 630, "include_nest": [630, 708], "_index": [630, 708, 719], "_base": [630, 708, 718, 719, 831], "themselv": [630, 708, 818, 820, 821, 823, 828, 832, 844, 858, 867], "863": [630, 708, 821], "672": [630, 708], "482": [630, 708], "674": [630, 708], "341": [630, 708], "copy_nest": 630, "to_mut": [630, 709, 720], "deepli": [630, 709, 811, 846, 861], "copied_nest": [630, 709], "1337": [630, 709, 720], "duplicate_array_index_chain": 630, "index_nest": [630, 828], "insert_into_nest_at_index": 630, "insert_into_nest_at_indic": 630, "onto": [630, 714, 720, 849, 850, 861], "special_squar": [630, 714], "6666666666666667": [630, 714], "special_pow": [630, 714], "linear_model": [630, 714], "map_nest_at_index": 630, "_result": [630, 715, 725], "hh": [630, 715, 720], "map_nest_at_indic": 630, "ub": [630, 716], "tb": [630, 716], "multi_index_nest": 630, "nested_ani": 630, "check_nest": [630, 718, 719], "nested_argwher": 630, "stop_after_n_found": [630, 719], "nested_indic": [630, 719], "nested_map": [630, 821, 828], "_tuple_check_fn": [630, 720], "_list_check_fn": [630, 720], "_dict_check_fn": [630, 720], "wherebi": [630, 720, 808, 858], "ah": [630, 720], "bh": [630, 720], "ch": [630, 720], "dh": [630, 720, 814], "eh": [630, 720], "gh": [630, 720, 809, 825], "ih": [630, 720], "1338": [630, 720], "nested_multi_map": 630, "index_chain": [630, 721], "nest0": [630, 721], "ivy_arrai": [630, 721, 815, 832], "unappli": [630, 721], "prune_empti": 630, "prune_nest_at_index": 630, "prune_nest_at_indic": 630, "set_nest_at_index": 630, "set_nest_at_indic": 630, "xyz": [630, 726], "pqr": [630, 726], "mini": [631, 727, 782, 785], "uniformli": [632, 729, 731], "22346112": [632, 730], "0922": [632, 730], "9213753": [632, 730], "12818667": [632, 730], "799": [632, 730], "469": [632, 730], "287": [632, 730], "0366": [632, 730], "26431865": [632, 731], "475": [632, 731], "878": [632, 731], "861": [632, 731], "929": [632, 731], "789": [632, 731], "519": [632, 731], "0435": [632, 731], "381": [632, 731], "4608004": [632, 731], "8458502": [632, 731], "67270088": [632, 731], "31128597": [632, 731], "zeroel": [633, 737], "guarante": [634, 739, 741, 800, 815, 820, 831, 846, 852], "fourth": [634, 739], "1141": [634, 739], "8101": [634, 739], "9298": [634, 739], "8460": [634, 739], "2119": [634, 739], "3519": [634, 739], "6252": [634, 739], "4033": [634, 739], "7443": [634, 739], "2577": [634, 739], "3707": [634, 739], "0545": [634, 739], "3238": [634, 739], "5944": [634, 739], "0775": [634, 739], "4327": [634, 739], "62519997": [634, 739], "40329999": [634, 739], "59439999": [634, 739], "74430001": [634, 739], "81010002": [634, 739], "84600002": [634, 739], "92979997": [634, 739], "einstein": [636, 749, 795], "117": [636, 749], "intend": [636, 755, 764, 781, 814, 827, 830, 859, 861, 865, 866], "07472222": [636, 756], "00666667": [636, 756], "08966666": [636, 756], "simplicit": [637, 757, 758], "ivy_test": [761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 808, 809, 810, 814, 817, 819, 825, 833], "test_ivi": [761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 808, 809, 810, 817, 819, 825, 833, 835], "assert_all_clos": [761, 833], "ret_np": [761, 763, 833], "ret_from_gt_np": [761, 833], "ground_truth_backend": [761, 763, 764, 773, 774, 806, 825, 833], "mark": [761, 808, 810, 814, 835, 840], "assert_same_typ": 761, "ret_from_target": 761, "ret_from_gt": 761, "backend_to_test": [761, 763, 806, 825, 833], "gt_backend": 761, "with_backend": [761, 791], "assert_same_type_and_shap": 761, "this_key_chain": 761, "check_unsupported_devic": 761, "input_devic": 761, "all_as_kwargs_np": [761, 763], "presenc": [761, 818, 831], "check_unsupported_device_and_dtyp": 761, "input_dtyp": [761, 763, 773, 806, 825, 833, 835], "check_unsupported_dtyp": 761, "test_unsupported_funct": 761, "value_test": 761, "ret_np_flat": 761, "ret_np_from_gt_flat": 761, "specific_tolerance_dict": 761, "ret_from_np_gt_flat": 761, "function_test": 763, "args_to_contain": 763, "array_arg": [763, 828], "args_to_frontend": 763, "frontend_array_fn": 763, "arrays_to_frontend": 763, "as_list": 763, "convtru": 763, "nativeclass": 763, "counter": [763, 844], "create_args_kwarg": 763, "args_np": 763, "arg_np_val": 763, "args_idx": 763, "kwargs_np": 763, "kwarg_np_val": 763, "kwargs_idx": 763, "test_flag": [763, 806, 825, 833, 835], "on_devic": [763, 773, 806, 825, 833], "flatten_and_to_np": 763, "flatten_frontend": 763, "flatten_frontend_fw_to_np": 763, "frontend_ret": [763, 833], "isscalar_func": 763, "is_native_array_func": 763, "to_numpy_func": 763, "flatten_frontend_to_np": 763, "get_frontend_ret": 763, "frontend_fn": 763, "frontend_array_funct": 763, "precision_mod": [763, 773, 774, 825], "test_trac": [763, 773, 774, 806, 814, 825], "get_ret_and_flattened_np_arrai": 763, "gradient_incompatible_funct": 763, "gradient_test": [763, 835], "rtol_": [763, 806, 825], "atol_": [763, 806, 825, 833], "tolerance_dict": 763, "gradient_unsupported_dtyp": 763, "kwargs_to_args_n_kwarg": 763, "num_positional_arg": [763, 773, 774, 806, 825, 833, 835], "port": [763, 852], "test_frontend_funct": [763, 833], "fn_tree": [763, 764, 774, 806, 825, 832, 833, 835], "gt_fn_tree": [763, 774], "test_valu": [763, 833, 835], "frontend_function_flag": [763, 773], "functiontestflag": [763, 773, 806, 825], "with_out": [763, 773, 806, 825, 833, 835], "instance_method": [763, 773, 806, 825, 835], "as_vari": [763, 773, 806, 825, 833, 835], "namespac": [763, 808, 820, 829, 832, 833, 836, 840, 845], "test_frontend_method": [763, 833], "init_input_dtyp": [763, 833], "method_input_dtyp": [763, 833], "init_flag": [763, 833, 835], "method_flag": [763, 773, 833, 835], "init_all_as_kwargs_np": [763, 833], "method_all_as_kwargs_np": [763, 833], "frontend_method_data": [763, 833], "init_as_variable_flag": [763, 774], "dictat": [763, 815, 822, 827, 831], "init_num_positional_arg": [763, 774], "init_native_array_flag": 763, "with_v": 763, "ret_gt": 763, "test_funct": [763, 806, 809, 810, 819, 825, 833, 835], "fn_name": [763, 764, 774, 806, 816, 825, 833, 835], "return_flat_np_arrai": 763, "as_variable_flag": [763, 774, 835], "native_array_flag": [763, 774, 835], "container_flag": [763, 773, 774, 835], "test_function_backend_comput": 763, "test_function_ground_truth_comput": 763, "arg_np_arrai": 763, "arrays_args_indic": 763, "arrays_kwargs_indic": 763, "kwarg_np_arrai": 763, "test_gradient_backend_comput": 763, "test_gradient_ground_truth_comput": 763, "test_method": 763, "method_nam": [763, 772, 774, 833], "init_with_v": 763, "method_with_v": 763, "test_gradi": [763, 773, 774, 806, 825, 835], "method_as_variable_flag": [763, 774], "method_num_positional_arg": [763, 774], "method_native_array_flag": 763, "method_container_flag": [763, 774], "test_method_backend_comput": 763, "test_method_ground_truth_comput": 763, "org_con_data": 763, "args_np_method": 763, "met_arg_np_v": 763, "met_args_idx": 763, "kwargs_np_method": 763, "met_kwarg_np_v": 763, "met_kwargs_idx": 763, "v_np": 763, "traced_if_requir": 763, "wrap_frontend_function_arg": 763, "holder": 764, "current_frontend_config": 764, "0x7f223242dd90": 764, "interruptedtest": 764, "test_interrupt": 764, "baseexcept": 764, "tri": [764, 820], "testdata": 764, "supported_device_dtyp": 764, "is_method": 764, "setup_api_test": 764, "test_data": 764, "setup_frontend_test": 764, "teardown_api_test": 764, "teardown_frontend_test": 764, "hypothesis_help": [766, 767, 768, 769], "array_help": 766, "array_and_broadcastable_shap": 766, "searchstrategi": [766, 767, 768, 769, 773, 774, 835], "array_bool": [766, 835], "min_valu": [766, 767, 768, 769, 806, 825, 833, 835], "max_valu": [766, 767, 768, 769, 833, 835], "ex": [766, 767, 768, 769, 774, 819, 855], "strategi": [766, 767, 768, 769, 773, 774, 808, 833], "array_helpers_dtype_info_help": 766, "kind_dtyp": [766, 768], "array_indices_axi": 766, "array_dtyp": [766, 767, 835], "indices_dtyp": 766, "get_dtyp": [766, 767, 806, 825, 833, 835], "disable_random_axi": 766, "axis_zero": 766, "allow_inf": [766, 769, 833, 835], "min_num_dim": [766, 768, 833, 835], "max_num_dim": [766, 768, 833, 835], "min_dim_s": [766, 768, 833, 835], "max_dim_s": [766, 768, 833], "first_dimension_onli": 766, "indices_same_dim": 766, "valid_bound": 766, "hypothesi": [766, 768, 774, 808, 810, 814, 819, 829], "65536": 766, "44758124e": [766, 835], "array_indices_put_along_axi": 766, "values_dtyp": 766, "array_valu": [766, 835], "abs_smallest_v": [766, 768, 769], "allow_nan": [766, 769, 835], "allow_subnorm": [766, 769, 835], "exclude_min": [766, 769, 835], "exclude_max": [766, 769], "large_abs_safety_factor": [766, 768, 769, 806, 825, 833, 835], "small_abs_safety_factor": [766, 768, 769, 806, 825, 833], "safety_factor_scal": [766, 768, 769, 833, 835], "subnorm": [766, 769], "safeti": [766, 768, 769, 861], "0002": [766, 769], "get_shap": [766, 768, 833, 835], "1806": 766, "36912": 766, "6955": 766, "59576": 766, "1025": 766, "arrays_and_ax": 766, "available_dtyp": [766, 767, 806, 825, 833, 835], "allow_non": [766, 768, 833, 835], "return_dtyp": 766, "force_int_axi": 766, "26e": 766, "10e": 766, "24322108": 766, "26446279e": 766, "96046448e": 766, "008": 766, "17549435e": 766, "038": 766, "06541027e": 766, "13725760e": 766, "07143888": 766, "arrays_for_pool": 766, "min_dim": 766, "max_dim": 766, "min_sid": 766, "max_sid": 766, "explicit_or_str_pad": 766, "only_explicit_pad": 766, "return_dil": 766, "mixed_fn_compo": [766, 767, 768, 769, 835], "return_data_format": 766, "cond_data_gen_help": 766, "create_concatenable_arrays_dtyp": 766, "min_num_arrai": 766, "max_num_arrai": 766, "concat_dim": 766, "common_shap": [766, 835], "stackabl": 766, "given_common_shap": 766, "create_nested_input": 766, "leaf_valu": 766, "dtype_and_valu": [766, 806, 825, 833, 835], "num_arrai": [766, 767, 833, 835], "shared_dtyp": [766, 767, 833], "ret_shap": 766, "array_api_dtyp": [766, 767], "shape_kei": 766, "37915": 766, "6322": 766, "26765": 766, "12413": 766, "26986": 766, "34665": 766, "000e": 766, "711e": 766, "100e": 766, "955e": [766, 835], "40817": 766, "56193": 766, "29200": 766, "5851": 766, "9746": 766, "9604645e": 766, "103": 766, "41795": 766, "1170789994": 766, "44251": 766, "44209": 766, "433075925": 766, "24791": 766, "24691": 766, "24892": 766, "16711": 766, "972": 766, "15357": 766, "72057594037927936": 766, "dtype_array_queri": 766, "allow_mask": 766, "allow_neg_step": 766, "dtype_array_query_v": 766, "dtype_values_axi": [766, 835], "min_axi": 766, "max_axi": 766, "valid_axi": 766, "allow_neg_ax": 766, "min_axes_s": 766, "max_axes_s": 766, "force_tuple_axi": 766, "29788": 766, "62222885e": 766, "68281172e": 766, "257j": 766, "40129846e": 766, "90000000e": 766, "63426649e": 766, "91931887e": 766, "29488e": 766, "14361019e": 766, "12445": 766, "einsum_help": 766, "get_first_solve_batch_matrix": 766, "choose_adjoint": 766, "get_second_solve_batch_matrix": 766, "get_first_solve_matrix": 766, "allow_simplifi": 766, "choose_sid": 766, "xa": 766, "get_second_solve_matrix": 766, "list_of_s": 766, "sampled_from": [766, 833, 835], "min_siz": [766, 768, 774, 835], "max_siz": [766, 768, 774, 835], "size_bound": [766, 835], "999999999999999": 766, "9394938006792373": 766, "mutually_broadcastable_shap": 766, "num_shap": 766, "base_shap": 766, "dtype_help": 767, "univers": [767, 832, 850], "cast_filt": 767, "cast_filter_help": 767, "current_backend": [767, 791, 808, 816, 824, 828, 833, 836, 840], "get_castable_dtyp": 767, "castabl": 767, "prune_funct": 767, "intersect": [767, 819, 835], "signed_integ": 767, "real_and_complex": 767, "float_and_complex": 767, "general_help": 768, "broadcasterror": 768, "apply_safety_factor": 768, "embedding_help": 768, "general_helpers_dtype_info_help": 768, "get_axi": [768, 835], "allow_neg": 768, "sort_valu": 768, "force_tupl": 768, "force_int": 768, "assertionerror": [768, 806, 814, 824, 825, 833, 835], "get_bound": [768, 835], "get_mean_std": 768, "matrix_is_st": 768, "cond_limit": 768, "instabl": [768, 806, 820, 825], "computation": [768, 809], "prone": [768, 820], "thumb": 768, "gradual": 768, "strong": [768, 846, 851, 861], "collinear": 768, "reshape_shap": [768, 835], "two_broadcastable_shap": 768, "x_and_filt": 768, "number_help": 769, "arbitrarili": [769, 843], "safety_factor": 769, "backend_proc": 770, "input_queu": 770, "output_queu": 770, "frontend_proc": 770, "pipeline_help": 771, "backendhandl": 771, "update_backend": [771, 833], "backendhandlermod": 771, "enum": 771, "setbackend": 771, "withbackend": 771, "withbackendcontext": 771, "get_frontend_config": 771, "frontendmethoddata": 772, "ivy_init_modul": 772, "framework_init_modul": 772, "init_nam": 772, "test_parameter_flag": 773, "dynamicflag": [773, 774], "frontendfunctiontestflag": [773, 825], "with_copi": 773, "generate_frontend_arrai": [773, 774, 825], "testflag": 773, "apply_flag": 773, "args_to_iter": 773, "frontendinittestflag": 773, "frontendmethodtestflag": 773, "test_cython_wrapp": [773, 774], "initmethodtestflag": 773, "methodtestflag": 773, "build_flag": 773, "frontend_init_flag": 773, "frontend_method_flag": 773, "function_flag": 773, "init_method_flag": 773, "testing_help": 774, "handle_frontend_method": [774, 833, 835], "class_tre": [774, 833], "init_tre": [774, 833], "init_native_arrai": 774, "_as_varaible_strategi": 774, "method_native_arrai": 774, "test_inplac": [774, 835], "_given_kwarg": 774, "test_compil": 774, "handle_frontend_test": [774, 833, 835], "alias": [774, 808, 832, 833], "number_positional_arg": [774, 833], "test_with_out": [774, 833, 835], "test_with_copi": 774, "handle_method": [774, 835], "method_tre": [774, 833, 835], "_gradient_strategi": 774, "handle_test": [774, 806, 825, 835], "test_instance_method": [774, 835], "num_positional_args_help": 774, "num_positional_args_method": 774, "geglu": 778, "leakyrelu": 778, "logsoftmax": 778, "from_flax_modul": 779, "native_modul": 779, "params_fx": 779, "rng_seed": 779, "constructor_arg": 779, "constructor_kwarg": 779, "instance_arg": 779, "instance_kwarg": 779, "flax": [779, 845, 846, 852, 861], "from_haiku_modul": 779, "params_hk": 779, "from_paddle_modul": 779, "from_torch_modul": 779, "dedic": [779, 811, 827, 838, 842, 844], "to_keras_modul": 779, "native_module_class": 779, "modulehelp": [780, 784], "create_vari": [781, 844], "var_shap": [781, 844], "fan_out": [781, 844], "fan_in": [781, 844], "rectangular": 781, "firstlayersiren": 781, "siren": 781, "glorotuniform": [781, 782, 844], "glorot": 781, "xavier": 781, "neuron": 781, "w_1x_1": 781, "w_2x_2": 781, "w_nx_n": 781, "w_i": 781, "vanish": 781, "explod": [781, 849, 850], "kaimingnorm": 781, "fan_mod": [781, 844], "kaim": 781, "he": 781, "negative_slop": 781, "fan": 781, "propog": 781, "fan_sum": [781, 844], "Ones": 781, "randomnorm": 781, "stddev": 781, "w0": 781, "wlim": 781, "predefin": 781, "fan_avg": 781, "adaptiveavgpool1d": 782, "avgpool1d": 782, "implicit": [782, 818, 823, 832, 835, 840, 861], "avgpool2d": 782, "avgpool3d": 782, "e501": 782, "filter_s": 782, "weight_initi": [782, 844], "bias_initi": [782, 844], "0x7f223f1aca90": 782, "0x7f223f1ad0f0": 782, "conv1dtranspos": 782, "0x7f223f1ad0c0": 782, "0x7f223f1acac0": 782, "filter_shap": 782, "0x7f223f1aee90": 782, "0x7f223f1ac9d0": 782, "0x7f223f1aee30": 782, "0x7f223f1afee0": 782, "0x7f223f1ac370": 782, "0x7f223f1ac3d0": 782, "conv3dtranspos": 782, "0x7f223f1ac850": 782, "0x7f223f1ae1d0": 782, "depthwiseconv2d": 782, "num_channel": 782, "0x7f223f1afe80": 782, "0x7f223f1adcc0": 782, "bernoul": 782, "num_embed": 782, "embedding_dim": 782, "padding_idx": 782, "lookup": 782, "num_embeddingss": 782, "renorm": 782, "insensit": 782, "return_st": 782, "0x7f223f1add80": 782, "get_initial_st": 782, "0x7f223f1ad060": 782, "0x7f223f1af8e0": 782, "maxpool1d": 782, "maxpool3d": 782, "multiheadattent": 782, "embed_dim": 782, "head_dim": 782, "dropout_r": 782, "use_proj_bia": 782, "attention_ax": 782, "build_mod": [782, 783, 784], "on_init": [782, 784], "parallel": [782, 817, 861, 865, 866], "binarycrossentropyloss": 783, "store_var": [783, 784], "with_partial_v": [783, 784], "logpoissonloss": 783, "modulemeta": 784, "temporarili": [784, 806, 814, 825], "from_cal": 784, "module_dict": 784, "register_buff": 784, "register_paramet": 784, "weights_path": 784, "randomness_factor": 784, "with_edge_label": 784, "with_arg_label": 784, "with_output_label": 784, "output_connected_onli": 784, "highlight_subgraph": 784, "trace_kwarg": 784, "_unified_ivy_graph": 784, "_call": 784, "num_featur": 785, "trail": 785, "layernorm": 785, "normalized_shap": 785, "elementwise_affin": 785, "set_stat": [786, 844], "adamw": 786, "weight_decai": 786, "init_on_first_step": 786, "fallback_to_non_trac": 786, "ignore_miss": 786, "privat": [786, 832, 835], "_step": [786, 844], "stochast": [786, 861], "sub_modul": 787, "check_al": 788, "messag": [788, 797, 801, 809, 810, 819, 822, 824, 826, 832, 840, 842, 851], "check_all_or_any_fn": 788, "check_ani": 788, "check_dev_correct_format": 788, "check_dimens": 788, "check_elem_in_list": [788, 828, 831, 832], "elem": 788, "check_equ": [788, 832], "check_exist": 788, "check_fals": 788, "check_gather_input_valid": 788, "check_gather_nd_input_valid": 788, "check_great": 788, "allow_equ": [788, 824], "check_inplace_sizes_valid": [788, 831], "check_isinst": 788, "allowed_typ": 788, "check_kernel_padding_s": 788, "padding_s": 788, "check_less": [788, 824], "check_one_way_broadcast": 788, "check_same_dtyp": 788, "check_shapes_broadcast": 788, "check_tru": 788, "check_unsorted_segment_valid_param": 788, "ast_help": 790, "importtransform": 790, "nodetransform": 790, "impersonate_import": 790, "tree": [790, 820], "local_ivy_id": 790, "visit_import": 790, "visit_importfrom": 790, "ivyload": 790, "loader": [790, 843, 846], "exec_modul": 790, "ivypathfind": 790, "metapathfind": 790, "find_spec": 790, "fullnam": 790, "contextmanag": 791, "choose_random_backend": 791, "global_backend": 791, "dynamic_backend_convert": 791, "backend_stack": [791, 840], "prevent_access_loc": 791, "previous_backend": [791, 816], "unset": [791, 816, 840], "Or": [791, 802, 804, 809, 831, 843], "set_backend_to_specific_vers": 791, "set_jax_backend": 791, "set_mxnet_backend": 791, "mx": 791, "set_numpy_backend": 791, "set_paddle_backend": 791, "set_tensorflow_backend": 791, "set_torch_backend": 791, "unset_backend": [791, 816], "sub_backend_handl": 792, "clear_sub_backend": 792, "find_available_sub_backend": 792, "sub_backends_loc": 792, "fn_name_from_version_specific_fn_nam": 792, "fn_name_from_version_specific_fn_name_sub_backend": 792, "sub_backend_vers": 792, "backend_vers": [792, 806, 820, 825], "set_sub_backend": 792, "sub_backend_str": 792, "set_sub_backend_to_specific_vers": 792, "sub_backend": 792, "unset_sub_backend": 792, "check_for_binari": 793, "cleanup_and_fetch_binari": [793, 809], "clean": [793, 810, 836, 840, 841, 843], "dynamic_import": 794, "import_modul": [794, 840], "einsum_pars": 795, "convert_interleaved_input": 795, "interleav": 795, "convert_subscript": 795, "old_sub": 795, "symbol_map": 795, "subscript": [795, 796], "oe": 795, "ellipsi": [795, 796], "find_output_shap": 795, "find_output_str": 795, "canon": 795, "gen_unused_symbol": 795, "abd": [795, 796], "get_symbol": 795, "letter": 795, "resort": 795, "unicod": 795, "charact": [795, 832, 851], "chr": 795, "surrog": 795, "\u0155": 795, "20000": 795, "\u4eac": 795, "has_valid_einsum_chars_onli": 795, "einsum_str": 795, "abaz": 795, "\u00f6ver": 795, "is_valid_einsum_char": 795, "\u01f5": 795, "legalise_einsum_expr": 795, "reproduct": [795, 796], "pars": [795, 796, 817, 822, 846], "intak": 795, "contract_path": 795, "parse_einsum_input": [795, 796], "einsum_eqn": 795, "legalis": 795, "legalise_einsum_eqn": 795, "za": [795, 796], "xza": [795, 796], "xz": [795, 796], "possibly_convert_to_numpi": 795, "myshap": 795, "__main__": 795, "0x10f850710": 795, "einsum_path_help": 796, "can_dot": 796, "idx_remov": 796, "bla": 796, "benefici": 796, "movement": 796, "costli": 796, "gemm": 796, "ijj": 796, "ddot": 796, "ikj": 796, "compute_size_by_dict": 796, "idx_dict": 796, "abbc": 796, "find_contract": 796, "input_set": 796, "output_set": 796, "lh": 796, "rh": 796, "new_result": 796, "idx_contract": 796, "iset": 796, "oset": 796, "bdc": 796, "flop_count": 796, "num_term": 796, "size_dictionari": 796, "flop": [796, 800], "greedy_path": 796, "memory_limit": 796, "exhaust": [796, 831, 835, 858, 867], "indices_remov": 796, "priorit": [796, 808, 834, 838], "hadamard": 796, "cubic": 796, "greedi": 796, "idx_siz": 796, "optimal_path": 796, "siev": 796, "input_str": 796, "output_str": 796, "parse_possible_contract": 796, "path_cost": 796, "naive_cost": 796, "propos": [796, 810, 832, 838, 861], "intermediari": [796, 816], "unoptim": 796, "new_input_set": 796, "update_other_result": 796, "provision": 796, "_parse_possible_contract": 796, "mod_result": 796, "inplaceupdateexcept": 797, "include_backend": [797, 824], "ivyattributeerror": [797, 824], "attributeerror": [797, 824, 842], "ivybroadcastshapeerror": [797, 824], "ivydeviceerror": 797, "ivydtypepromotionerror": [797, 824], "ivyindexerror": [797, 824], "ivyinvalidbackendexcept": 797, "ivynotimplementedexcept": [797, 824], "notimplementederror": 797, "ivyvalueerror": [797, 824], "handle_except": [797, 827, 829], "add_array_spec": 798, "fn_array_spec": 798, "set_logging_mod": 799, "debug": [799, 805, 809, 810, 812, 818, 819, 830, 835, 838, 843, 861], "unset_logging_mod": 799, "print_stat": 800, "viz": 800, "snakeviz": 800, "bonu": 800, "cprofil": 800, "tensorflow_profile_start": 800, "logdir": 800, "host_tracer_level": 800, "python_tracer_level": 800, "device_tracer_level": 800, "delay_m": 800, "toggl": [800, 810], "host": [800, 804, 819, 846, 851, 866], "timestamp": 800, "awai": [800, 802, 859, 861], "millisecond": 800, "guess": 800, "tensorflow_profile_stop": 800, "torch_profiler_init": 800, "schedul": [800, 819, 846, 861, 868], "on_trace_readi": 800, "record_shap": 800, "profile_memori": 800, "with_stack": 800, "with_flop": 800, "with_modul": 800, "experimental_config": 800, "profileract": 800, "record_and_sav": 800, "dealloc": 800, "record": [800, 809, 846, 862], "callstack": 800, "aten": 800, "torchscript": [800, 840, 848, 868], "_experimentalconfig": 800, "kineto": 800, "torch_profiler_start": 800, "torch_profiler_stop": 800, "cprint": [801, 840], "grant": 802, "autotun": [802, 865], "grow": [802, 805, 811, 812, 861], "peopl": [802, 807, 809, 810, 813, 861, 863], "wip": [802, 854], "docker": [802, 806, 807, 825], "pull": [802, 803, 805, 808, 809, 814, 822, 826, 836, 838, 846, 847, 852], "sweat_smil": 802, "setting_up": 802, "jax_fn": 802, "jax_x": 802, "torch_x": 802, "torch_fn": 802, "motiv": [802, 842, 851], "contextu": 802, "problem": [802, 805, 808, 810, 814, 815, 821, 832, 842, 851, 857, 863, 867], "explos": [802, 849, 851], "adher": [802, 814, 820, 823, 827, 838, 840, 845, 850, 851, 857, 858, 867], "focus": [802, 820, 836, 859, 860, 861, 867, 868], "orient": 802, "contributor": [802, 803, 806, 808, 809, 810, 825, 832, 839, 861], "shorter": [802, 842], "ensp": 802, "customiz": [802, 817], "deepmind_perceiver_io": 802, "sm_framework": 802, "segmentation_model": 802, "sm": 802, "torch_sm": 802, "metric": [802, 846], "iou_scor": 802, "rax": 802, "torch_rax": 802, "poly1_softmax_loss": 802, "madmom": 802, "madmon": 802, "torch_madmom": 802, "freq": 802, "audio": 802, "hz2midi": 802, "torch_loss": 802, "maxpooling1d": 802, "pool_siz": 802, "tf_kornia": 802, "tf_rax": 802, "tf_madmom": 802, "tf_loss": 802, "_forward_classifi": [802, 855], "forward_classifi": [802, 855], "hk_eff_encod": 802, "dummy_x": 802, "jax_sm": 802, "jax_madmom": 802, "jax_loss": 802, "np_kornia": 802, "np_sm": 802, "np_rax": 802, "np_loss": 802, "yourself": [802, 808, 810, 826, 835, 838], "favourit": [802, 809], "pipelin": [802, 804, 813, 814, 815, 833, 836, 845, 848, 850, 855, 861, 862, 867], "hyperparam": 802, "idea": [802, 808, 834, 836, 841, 852, 860], "instantli": [802, 855], "essenti": [802, 805, 808, 816, 818, 821, 822, 828, 831, 832, 833, 850, 851, 867], "mainli": [802, 808, 813, 830, 832, 835, 841, 843, 848, 861], "handler": [802, 839, 841, 845, 848], "scene": [802, 813, 839, 841, 849, 850, 861], "facilit": [802, 811], "mse_loss": 802, "jax_ms": 802, "tf_mse": 802, "np_mse": 802, "torch_ms": 802, "someth": [802, 806, 810, 816, 825, 826, 836, 843, 844, 846, 847, 867], "favorit": 802, "flexibl": [802, 818, 820, 827, 830, 836, 838, 861], "everyon": [802, 803, 808, 809, 810, 846, 852], "plan": [802, 847], "interoper": [802, 851, 858, 859, 861, 864], "believ": [802, 810, 851], "feedback": [802, 808, 819], "appreci": [802, 811], "amaz": [802, 812], "journei": [802, 803, 811], "ambiti": 802, "season": 802, "perfect": 802, "ask": [802, 808, 809, 822, 840, 842, 846, 847, 852], "fellow": 802, "twitter": 802, "sneak": 802, "peek": 802, "stai": [802, 819], "proper": [802, 808, 832, 855], "credit": 802, "accompani": 802, "lenton2021ivi": 802, "inter": 802, "author": [802, 808, 810, 859, 863], "lenton": 802, "daniel": 802, "pardo": 802, "fabio": 802, "falck": 802, "fabian": 802, "jame": 802, "stephen": 802, "clark": 802, "ronald": 802, "journal": 802, "arxiv": 802, "preprint": 802, "2102": 802, "02886": 802, "year": [802, 814, 846, 850, 852, 861], "strongli": [803, 809, 832, 867, 868], "engag": [803, 810, 811, 851], "skill": [803, 805, 811, 863], "veteran": 803, "effort": [803, 808, 846, 851, 857, 861, 867], "board": [803, 817], "stage": [803, 810, 813, 814, 817, 835, 851, 861], "excit": [803, 813, 851], "reward": [803, 811], "badg": [803, 811, 812, 819], "program": [803, 831, 858, 859, 861, 864, 865, 868], "climb": [803, 807], "leaderboard": 803, "stand": [803, 834, 835], "Be": [804, 817], "awar": [804, 817, 824, 826], "linux": [804, 809, 810, 817, 864, 866], "regularli": [804, 817, 819], "internet": [804, 817], "codespac": [804, 817, 825], "make_doc": 804, "sh": [804, 809, 810, 814, 819], "pwd": 804, "ssh": [804, 819], "make_docs_without_dock": [804, 817], "award": 805, "formal": 805, "dynamo": [805, 812], "crucial": [805, 821, 830], "pinpoint": 805, "merg": [805, 808, 810, 812, 814, 819, 832, 861], "meet": [805, 811, 832], "qualiti": [805, 810], "wizard": 805, "impact": [805, 819, 835, 844, 863], "inspector": 805, "acknowledg": [805, 811], "honour": 805, "dilig": 805, "bronz": [805, 811, 812], "silver": [805, 811, 812], "gold": [805, 811, 846], "expertis": [805, 811, 863], "assist": [806, 825], "runtimeerror": [806, 825], "logaddexp2_cpu": [806, 825], "falsifi": [806, 814, 825, 835], "test_logaddexp2": [806, 825], "backend_fw": [806, 825, 833], "dtype_and_x": [806, 825, 833, 835], "reproduce_failur": [806, 814, 825, 829, 835], "axicy2bkaamobaar2waaaacvaai": [806, 825], "decoartor": [806, 825], "with_unsupported_dtyp": [806, 820, 825, 832], "25830078125": [806, 825], "258544921875": [806, 825], "test_acosh": [806, 825], "axicy2baabyqwqgiaabdaai": [806, 825], "quit": [806, 810, 815, 822, 823, 825, 828, 829, 835, 838, 861, 867], "41421356": [806, 825], "41421356e": [806, 825], "34078079e": [806, 825], "154": [806, 825], "test_ab": [806, 809, 825, 835], "000j": [806, 825], "154j": [806, 825], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [806, 825], "thread": [806, 808, 809, 810, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 843, 861], "pycharm": [806, 833, 835], "few": [807, 808, 810, 818, 820, 821, 827, 828, 830, 831, 833, 835, 838, 840, 841, 842, 843, 844, 852, 861, 863], "steep": 807, "curv": 807, "realpython": 807, "pyn": 807, "exchang": [807, 851, 857, 859], "pilot": [807, 847], "stuck": [807, 808], "spell": 807, "sound": [807, 819, 839], "frequent": [808, 810, 816, 861], "outlin": [808, 809, 810, 813, 818, 820, 823, 828, 831, 832, 835], "broad": [808, 863], "individu": [808, 810, 814, 816, 820, 828, 832, 861, 864, 867, 868], "clearli": [808, 810, 822, 833, 835, 851, 865], "straightforward": [808, 811, 843], "lie": 808, "urgent": 808, "encourag": [808, 811, 826, 846, 851], "tackl": [808, 811, 832], "challeng": [808, 816, 867], "categoris": [808, 814, 832], "comfort": [808, 809, 824], "valuabl": [808, 810], "linkag": 808, "pr": [808, 810, 811, 814, 826, 832, 833, 835], "confid": 808, "submit": [808, 826], "scipi": [808, 851, 863, 868], "mindspor": 808, "simpler": [808, 810, 826, 854, 862, 868], "member": [808, 810, 832, 847, 851], "comment": [808, 809, 810, 814, 820, 826, 832, 834, 838], "composition": 808, "feasibl": [808, 819, 851, 854], "pend": 808, "helpfulli": [808, 838, 859], "problemat": [808, 809], "unimpl": 808, "issue_link": 808, "alias_nam": 808, "notic": [808, 815, 819, 825, 826, 835, 838, 854], "push": [808, 810, 811, 814, 833, 835, 867], "liner": 808, "meanwhil": [808, 819], "reselect": 808, "faithfulli": 808, "creation_routin": [808, 833], "indexing_routin": 808, "ma": 808, "manipulation_routin": 808, "mathematical_funct": [808, 832], "sorting_searching_count": 808, "ufunc": [808, 832], "matrix_and_vector_product": 808, "matrix_eigenvalu": 808, "norms_and_other_numb": 808, "solving_equations_and_inverting_matric": 808, "gleam": 808, "uncom": 808, "test_numpy_inn": 808, "test_frontend": [808, 819, 825, 833], "unsur": [808, 835], "statu": [808, 811, 819, 826, 852], "refrain": 808, "checkbox": [808, 809], "aforement": 808, "parent": [808, 819, 842], "arraywithelementwis": [808, 815, 842], "containerwithmanipul": 808, "thorough": [808, 823, 827, 835], "add_reformatting_checklist_": 808, "category_nam": [808, 820, 821, 823, 827, 828], "autom": [808, 819, 826, 835, 848, 863], "bot": [808, 826], "markdown": [808, 817], "patient": [808, 809], "elabor": 808, "struggl": 808, "assigne": 808, "status": 808, "central": [808, 826, 838, 851, 867], "analyz": [808, 848], "relevant_submodul": 808, "roadmap": [808, 819], "soon": [808, 810, 819, 820, 846, 854], "deem": [808, 832], "subtask": 808, "clearer": [808, 824, 833, 843], "backend_nam": [808, 816, 820, 821, 823, 827, 828, 829], "sometim": [808, 809, 810, 814, 820, 828, 832, 835, 838], "rare": [808, 821, 846, 866], "button": [808, 809, 810, 825], "centr": 808, "predetermin": 808, "superset": [808, 813, 828, 831, 846], "reserv": 808, "happi": [809, 825, 846, 852], "your_usernam": [809, 825], "your_fold": [809, 825], "enter": [809, 810, 815, 820, 821, 825, 827, 829], "sync": [809, 814, 825], "remot": [809, 814, 825, 826], "nutshel": [809, 827], "hook": [809, 826, 834], "lint": [809, 813], "succe": [809, 854], "whatev": [809, 818, 846], "elig": [809, 811], "student": 809, "licens": [809, 864], "remind": 809, "expir": 809, "won": [809, 810, 818, 820, 845, 847, 851, 852, 854, 855, 856], "profession": 809, "trial": 809, "jetbrain": 809, "month": [809, 850], "bui": [809, 867], "paid": 809, "rapid": [809, 850, 851, 861], "pace": 809, "person": [809, 810], "abil": [809, 838, 841, 846, 861], "perhap": [809, 842, 843, 844, 846, 867], "conda": [809, 851, 863], "ivy_dev": [809, 810], "icon": [809, 810, 825], "panel": 809, "vscode": [809, 825], "palett": 809, "ctrl": [809, 810], "mac": [809, 810], "intel": [809, 851, 859, 866], "m1": 809, "optional_apple_silicon_1": 809, "optional_apple_silicon_2": 809, "array_api_test": [809, 810, 814, 825], "test_array_api": [809, 810, 814, 825, 835], "suit": [809, 813, 814, 819, 825, 834, 835, 843, 851, 861, 867], "cmd": 809, "bat": [809, 810], "virtualenv": 809, "tick": [809, 810, 819], "nz2": 809, "openssl": 809, "libssl1": 809, "1_1": 809, "1f": 809, "1ubuntu2": 809, "19_amd64": 809, "deb": 809, "dpkg": 809, "mitig": [809, 867], "desktop": [809, 825], "powershel": 809, "admin": 809, "deploy": [809, 855, 860, 863, 864, 867, 868], "menu": [809, 825], "introspect": 809, "dialog": 809, "persist": 809, "earlier": [809, 810, 820, 836], "virtualis": 809, "bio": [809, 851], "dropdown": [809, 819], "dockerfil": 809, "ca": 809, "certif": 809, "gnupg": 809, "lsb": 809, "keyr": 809, "fssl": 809, "gpg": 809, "dearmor": 809, "echo": [809, 819, 847], "arch": 809, "lsb_releas": 809, "null": [809, 825], "ce": 809, "cli": 809, "containerd": 809, "systemctl": 809, "softwar": [809, 810, 850, 851, 859, 864, 865, 866], "press": [809, 810, 843], "4a": 809, "socket": 809, "rwx": 809, "sock": 809, "pid": 809, "editor": 809, "pytest": [809, 810, 814, 819, 825, 829, 835], "keyboard": 809, "screenshot": 809, "pop": [809, 825, 851], "test_elementwis": 809, "bar": [809, 825], "shell": [809, 810, 814, 819], "setup_test": 809, "run_ivy_core_test": 809, "run_ivy_nn_test": 809, "run_ivy_stateful_test": 809, "run_test": [809, 819], "test_depend": 809, "test_ivy_cor": 809, "test_ivy_nn": 809, "test_ivy_st": 809, "unix": 809, "test_": [809, 833], "test_cor": [809, 810, 833], "offici": [809, 820, 840], "wish": [809, 832], "ivy_nn": 809, "ivy_st": 809, "header": [809, 810, 834], "arrow": 809, "test_stat": 809, "test_submodule_nam": 809, "test_function_nam": 809, "debugg": 809, "studio": [809, 825, 835], "especi": [809, 816, 826, 850, 861], "afterward": [809, 843], "background": [809, 817, 825, 861, 863], "overlap": [809, 819, 825, 836, 838, 862], "test_file_path": [809, 825], "test_fn_nam": [809, 825], "engin": [809, 861, 863, 864], "devcontain": 809, "comma": 809, "postcreatecommand": 809, "post_create_command": 809, "poststartcommand": 809, "safe": [809, 832], "containerworkspacefold": 809, "reopen": 809, "test_fle_path": 809, "slash": 809, "isol": [809, 810, 862, 867], "container": 809, "intens": 809, "headach": 809, "arm": [809, 810], "vm": [809, 819], "azur": 809, "cloud": [809, 819, 863], "theme": [809, 817], "ipad": 809, "browser": [809, 817], "quota": 809, "requisit": 809, "pane": [809, 810, 819], "dockerfilegpu": 809, "ivv": 809, "multiv": 809, "multivers": [809, 836], "dockerfilemultivers": 809, "dockerhub": 809, "upto": [809, 810], "minut": [809, 819], "launch": 809, "quickli": [809, 810, 819, 843, 844, 850, 852, 861, 868], "kindli": [809, 834], "guidelin": 809, "colour": 809, "chanc": 809, "troubleshoot": 809, "ever": 809, "flask": [809, 825], "toolbar": [809, 810, 825], "_array_modul": [809, 814, 825], "refresh": [809, 825], "pytestarg": [809, 825], "unittesten": [809, 825], "pytesten": [809, 825], "autotestdiscoveronsaveen": [809, 825], "conftest": 809, "serv": [809, 810, 815, 818, 827, 828, 832, 833, 835, 838, 839, 848, 859], "aren": [809, 820], "available_config": 809, "cp310": 809, "x86": [809, 866], "newer": [809, 835], "_compil": 809, "meantim": 809, "suffici": [809, 822, 832, 835], "bear": [809, 815, 818, 820, 832], "tendenc": 810, "land": 810, "unrel": [810, 851], "fly": [810, 861], "internship": 810, "suspect": 810, "iii": 810, "issue_numb": 810, "12345": 810, "rememb": 810, "respond": 810, "dai": [810, 826], "freed": 810, "situat": [810, 819, 845], "obvious": [810, 819], "hypothet": 810, "frustrat": 810, "delai": [810, 854], "busi": 810, "inact": 810, "unfairli": 810, "investig": 810, "name_of_your_branch": 810, "date": [810, 814], "complic": [810, 833, 840], "merge_with_upstream": 810, "abort": 810, "tediou": [810, 822, 838], "stash": [810, 826], "reinstat": 810, "uncommit": 810, "unstag": [810, 826], "untrack": 810, "atlassian": 810, "wrote": 810, "piec": [810, 815, 828, 829, 840, 854, 857, 859], "blame": 810, "eg": 810, "week": [810, 852], "grep": 810, "commit_id": 810, "handi": 810, "histori": 810, "highlight": [810, 819, 822, 832, 834], "approv": 810, "someon": [810, 846], "hash": [810, 843], "cancel": 810, "speedup": 810, "unavail": 810, "tickbox": 810, "span": [810, 859, 867], "intent": [810, 831], "discourag": 810, "adopt": [810, 815, 827, 838, 851, 860, 861, 866], "philosophi": 810, "infrequ": 810, "earli": [810, 861], "wast": [810, 819], "spot": [810, 822, 828], "mistak": 810, "mountain": 810, "advoc": [810, 846], "session": [810, 861], "beauti": 810, "particularli": [810, 843, 846, 854, 859], "care": [810, 821, 832, 838, 845, 851], "undo": 810, "stress": 810, "nifti": 810, "reassur": 810, "local_path_to_ivi": 810, "subfold": [810, 833, 835, 836], "dep": 810, "fresh": 810, "arsen": 810, "exec": 810, "ivy_contain": 810, "test_imag": 810, "test_random_crop": 810, "test_creation_funct": 810, "test_arang": 810, "cursor": 810, "alt": 810, "blog": 810, "breakpoint": 810, "gutter": 810, "caret": 810, "f8": 810, "f9": 810, "Into": 810, "f7": 810, "smart": 810, "fragment": [810, 857, 859, 863], "wherein": [810, 828, 835], "failur": [810, 819, 833, 835], "embark": 811, "innov": [811, 851], "earn": 811, "door": [811, 846], "elev": 811, "mission": [811, 851, 863], "opportun": 811, "testament": [811, 834], "stone": 811, "gift": 811, "acquir": 811, "peak": 811, "privileg": [811, 863], "bounti": 811, "cash": 811, "delight": 811, "grate": [812, 846], "suraj": 812, "samund": 812, "singh": 812, "samthakur587": 812, "weed": [813, 839], "tour": 813, "formatt": [813, 826], "conjunct": 814, "establish": [814, 863], "popular": [814, 861], "sens": [814, 820, 822, 832, 834, 842], "unconnect": 814, "initialis": [814, 832, 835], "strang": [814, 842], "thoroughli": 814, "test_linalg": [814, 833], "test_set_funct": 814, "test_signatur": 814, "excess": [814, 816, 822], "array_modul": 814, "vv": 814, "test_manipulation_funct": 814, "test_concat": [814, 835], "nb": 814, "liber": 814, "______________________": 814, "test_remaind": 814, "_______________________": 814, "test_operators_and_elementwise_funct": 814, "1264": 814, "1277": 814, "binary_param_assert_against_refimpl": 814, "ctx": 814, "620": 814, "binary_assert_against_refimpl": 814, "324": 814, "scalar_o": 814, "17304064": 814, "binaryparamcontext": 814, "axic42baaowcnp": 814, "rumwmabaear0": 814, "make_binary_param": 814, "numeric_dtyp": 814, "left_strat": 814, "left_sym": 814, "right_strat": 814, "right_sym": 814, "right_is_scalar": 814, "binary_param_assert_dtyp": 814, "binary_param_assert_shap": 814, "recreat": 814, "unexpectedli": 814, "discrep": [814, 833], "test_asarray_arrai": 814, "test_floor_divid": 814, "health": 814, "test_iop": 814, "__imod__": 814, "isequ": 814, "test_matrix_norm": 814, "alter": 814, "tweak": 814, "array_api_methods_to_test": 814, "test_special_cas": 814, "__ipow__": 814, "is_integ": 814, "easier": [814, 815, 816, 820, 833, 836, 848, 861, 863], "revisit": [814, 827], "_data": [815, 831, 832, 842], "organiz": [815, 818, 832], "underpin": [815, 818, 840], "programmat": [815, 818, 862], "backup": [815, 817, 818], "accident": [815, 818, 832], "absent": [815, 818], "auto": [815, 817, 818, 826, 843], "__mul__": [815, 818, 822, 827, 838, 842], "throw": [815, 820, 821, 824, 825, 842, 861], "imposs": 815, "inputs_to_native_arrai": [815, 828, 829], "outputs_to_ivy_arrai": [815, 820, 821, 827, 828, 829], "secondli": [815, 820], "__ivy_array_function__": 815, "inspir": 815, "__torch_function__": 815, "myarrai": 815, "handled_funct": 815, "notimpl": 815, "issubclass": 815, "enough": [815, 819, 820, 821, 835, 842, 843, 844], "ivy_funct": 815, "my_ab": 815, "my_arrai": 815, "implicit_backend": [816, 840], "__dict__": [816, 831, 840], "ivy_original_dict": [816, 840], "fallback": 816, "live": [816, 817, 820, 851, 852, 857, 859], "scope": [816, 862, 866], "dlpack": 816, "set_dynamic_backend": 816, "unset_dynamic_backend": 816, "dynamic_backend_a": 816, "set_": 816, "unset_": 816, "backend_handl": 816, "requires_grad": 816, "memory_format": 816, "preserve_format": 816, "weren": 816, "vast": [816, 820, 861], "minor": [816, 838, 846], "fn_name_v_1p12_and_abov": 816, "fn_name_v_1p01_to_1p1": 816, "heavili": [817, 829, 846], "characterist": 817, "conf": 817, "cleanup": 817, "readm": [817, 846], "maxdepth": 817, "caption": 817, "related_work": 817, "deep_div": 817, "faq": 817, "glossari": 817, "autosummari": 817, "top_functional_toc": 817, "restructuredtext": 817, "discov": [817, 820], "ivy_toctree_caption_map": 817, "stub": 817, "unfortun": [817, 826], "linker": 817, "foo": 817, "discussion_channel_map": 817, "1000043690254946374": 817, "1000043749088436315": 817, "forum": [817, 847], "seri": [817, 820, 832, 835, 861, 863], "discussion_paragraph": 817, "discord_link": 817, "channel_link": 817, "gg": 817, "zvqdvbznqj": 817, "799879767196958751": 817, "channel_id": 817, "autoskippablemethod": 817, "skippable_method_attribut": 817, "__qualname__": 817, "autodoc": 817, "__doc__": 817, "autoivydata": 817, "mutual": [818, 828], "containerwithelementwis": 818, "__repr__": 818, "__getattr__": [818, 854], "__setattr__": [818, 854], "__contains__": 818, "__getstate__": 818, "__setstate__": 818, "unpickl": 818, "num_dim": [818, 845], "restrict": [818, 819, 832, 840, 854, 858], "enforc": [818, 842], "lefthand": 818, "righthand": 818, "handle_nest": [818, 827, 828, 829, 840], "absenc": [818, 827, 861], "implicitli": [818, 830, 835, 840], "log_pr": [818, 828, 831], "intuit": [818, 835, 843, 844, 857], "chronolog": 818, "concurr": [818, 819, 828, 861], "despit": [818, 820, 821, 833, 840, 851, 858, 861], "__list__": 818, "whatsoev": [818, 828, 848, 867], "children": 818, "shallowest": 818, "deepest": 818, "rollback": 819, "incorpor": [819, 833, 843, 861], "techniqu": 819, "triplet": 819, "test_torch": [819, 833], "test_tensor": [819, 833], "test_torch_instance_arctan_": 819, "12500": 819, "daili": 819, "huge": [819, 843, 849, 851, 861, 867], "shoot": 819, "_reduce_loss": [819, 828, 831], "test_nn": 819, "test_loss": 819, "test_binary_cross_entropy_with_logit": 819, "test_cross_entropi": 819, "test_binary_cross_entropi": 819, "test_sparse_cross_entropi": 819, "test_loss_funct": 819, "test_torch_binary_cross_entropi": 819, "test_torch_cross_entropi": 819, "binary_cross_entropy_with_logit": 819, "torch_binary_cross_entropi": 819, "torch_cross_entropi": 819, "magic": 819, "readthedoc": 819, "pedagog": 819, "f_1": 819, "t_1": 819, "t_3": 819, "t_7": 819, "t_": 819, "f_m": 819, "cyclic": 819, "intellig": [819, 835, 863], "tests_fil": 819, "file_nam": [819, 835, 836], "tests_lin": 819, "correspondingli": 819, "tests_to_run": 819, "determine_tests_lin": 819, "mongodb": 819, "databas": [819, 835], "mechan": [819, 846], "secret": 819, "db": 819, "ssh_deploy_kei": 819, "suffic": [819, 829, 835], "massiv": 819, "yml": 819, "felicit": 819, "clone_map": 819, "deploy_kei": 819, "user_email": 819, "user_nam": 819, "target_branch": 819, "github_serv": 819, "deploy_key_fil": 819, "ssh_known_hosts_fil": 819, "known_host": 819, "keyscan": 819, "git_ssh_command": 819, "userknownhostsfil": 819, "email": [819, 851], "methodologi": 819, "master1": 819, "restructur": 819, "_map": 819, "t_2": 819, "t_n": 819, "index_map": 819, "test_map": 819, "snowbal": 819, "recalibr": 819, "workflow_dispatch": 819, "cron": 819, "saturdai": 819, "night": 819, "pm": 819, "gut": 819, "lesser": [819, 824], "lol": 819, "hour": [819, 852], "cater": [819, 834], "master2": 819, "master32": 819, "synchron": 819, "runner2": 819, "corrupt": 819, "decoupl": [819, 844], "150": 819, "cycl": [819, 835], "yellow": 819, "queu": 819, "redirect": 819, "book": 819, "onrend": 819, "jo": 819, "ran": 819, "clickabl": 819, "all_dtyp": 820, "all_numeric_dtyp": 820, "all_int_dtyp": 820, "all_float_dtyp": 820, "replic": [820, 830, 831, 832], "thirdli": 820, "native_float32": 820, "importantli": [820, 842, 845], "arguabl": [820, 821, 832], "jaxarrai": [820, 821, 824, 827, 831, 836, 840], "_handle_0_dim_output": 820, "subtli": [820, 831], "promote_types_frontend_nam": 820, "promote_types_of_frontend_name_input": 820, "frontend_nam": 820, "upcast": 820, "nearli": [820, 827, 829, 861], "downcast": 820, "footprint": 820, "concret": 820, "aris": [820, 826, 846, 851], "utterli": 820, "meant": [820, 822, 831], "twice": 820, "disadvantag": 820, "relax": 820, "f64": 820, "unwant": 820, "primaci": 820, "resembl": 820, "compound": 820, "infer_dtyp": [820, 821, 827, 829], "settabl": [820, 821], "handle_out_argu": [820, 821, 827, 828, 829, 831, 840], "infer_devic": [820, 821, 827, 829], "deleg": [820, 868], "shape_to_tupl": 820, "with_supported_dtyp": 820, "unment": 820, "_cast_for_unary_op": [820, 828, 831], "target_typ": 820, "syntax": [820, 850, 851, 861], "unsupported_dtyp": 820, "supported_dtypes_and_devic": 820, "with_unsupported_device_and_dtyp": 820, "globals_getter_func": 820, "f2": 820, "lack": [820, 831, 861, 868], "mandat": [820, 831, 835, 836, 851], "confus": [820, 824, 831, 838, 848, 852], "inconsist": [820, 824, 830], "is_nan": 820, "supported_dtyp": 820, "anytim": 820, "84530": 820, "unwarr": 820, "risk": [820, 867], "needlessli": 820, "bloat": 820, "undergo": [820, 846], "unsupported_devic": 820, "supported_devic": 820, "downsid": 820, "coverag": [820, 835], "undesir": 820, "accomplish": 820, "upcast_data_typ": 820, "downcast_data_typ": 820, "crosscast_data_typ": 820, "cast_data_typ": 820, "downcast_data_dtyp": 820, "vice": 820, "versa": 820, "till": 820, "crosscast": 820, "exmp1": 820, "watch": [820, 832], "handle_numpy_arrays_in_specific_backend": [820, 827], "cate": 820, "understood": 820, "consumpt": [820, 865], "dual": 821, "categor": [821, 828, 832], "210": 821, "_handle_except": [821, 824], "1013": 821, "_handle_nest": [821, 824], "905": 821, "_handle_out_argu": [821, 824], "441": 821, "_inputs_to_native_arrai": [821, 824], "new_arg": [821, 824], "new_kwarg": [821, 824], "_outputs_to_ivy_arrai": [821, 824], "358": 821, "_handle_array_funct": [821, 824], "_handle_device_shift": 821, "handle_device_shift": [821, 829], "device_shifting_dev": 821, "__enter__": 821, "__exit__": 821, "mostli": [821, 831, 835], "soft_devic": 821, "eight": [822, 839], "op_nam": 822, "__r": 822, "unsurprisingli": [822, 850], "recap": [822, 844], "combinatori": 822, "okai": [822, 838, 840], "spec": [822, 823], "my_func": [822, 836], "some_flag": 822, "another_flag": 822, "jointli": 822, "5574077": 822, "1850398": 822, "5463025": 822, "8422884": 822, "91601413": 822, "9647598": 822, "3738229": 822, "1597457": 822, "0963247": 822, "9955841": 822, "3278579": 822, "asid": 822, "increasingli": [822, 854], "14254655": 822, "1578213": 822, "380515": 822, "trivial": [822, 831], "failing_fn_nam": 822, "onlin": [822, 823], "minutest": 822, "fault": [822, 861], "contrast": [823, 827, 832, 867], "preview": 823, "incorrectli": [823, 854], "needless": [823, 833], "renam": [823, 832], "judgment": 823, "operator_nam": 823, "succinct": 823, "docst": 823, "native_error": 824, "_combine_messag": 824, "truli": [824, 842], "wrong": [824, 826, 829, 832, 838], "198": 824, "392": 824, "_handle_array_like_without_promot": 824, "805": 824, "432": 824, "349": 824, "other_test": 824, "523": 824, "_handle_numpy_out": 824, "396": [824, 844], "_outputs_to_numpy_arrai": 824, "_inputs_to_ivy_arrays_np": 824, "ivy_arg": 824, "ivy_kwarg": 824, "453": 824, "_from_zero_dim_arrays_to_scalar": 824, "truth_value_test": 824, "visibl": 824, "unwieldi": 824, "squash": 824, "hide": [824, 854], "cleaner": [824, 843], "caught": [824, 826], "rethrow": 824, "_print_traceback_histori": 824, "error_stack": 824, "axiserror": 824, "polici": [824, 829, 835, 837], "moreov": 824, "submoodul": 825, "test_jax_transpos": 825, "manipulaiton": 825, "test_jax": [825, 833], "test_numpi": [825, 833], "test_manipul": [825, 833, 835], "preconditionnotmet": 825, "densetensor": 825, "holder_": 825, "phi": 825, "dense_tensor_impl": 825, "array_and_ax": 825, "aaegbaegaqaaaaaaaaaaaaab": 825, "black": 826, "flake8": 826, "linter": 826, "autoflak": 826, "docformatt": 826, "pydocstyl": 826, "yaml": 826, "patch1687898304": 826, "8072": 826, "3516aed563": 826, "reformat": 826, "akshai": 826, "jain": 826, "gui": 826, "cryptic": 826, "garden": 826, "utc": 826, "didn": 826, "human": 826, "intervent": 826, "typo": 826, "ui": 826, "handle_array_like_without_promot": [827, 829], "to_native_arrays_and_back": [827, 829, 840], "handle_array_funct": [827, 829], "inputs_to_native_shap": [827, 829], "rational": [827, 831, 838], "__div__": [827, 838], "484": 827, "annot": 827, "brittl": 827, "freeli": 827, "inde": [827, 838, 846, 859], "technic": [827, 831, 846, 861, 863], "original_typ": 827, "cumbersom": 827, "hinder": [827, 850], "venn": 828, "diagram": [828, 867], "light": [828, 836, 846, 848, 862, 867], "maximis": 828, "encompass": 828, "partial_mixed_handl": [828, 829, 838], "handle_partial_mixed_funct": [828, 829, 838], "fn_decor": 828, "mixed_backend_wrapp": [828, 831], "to_add": 828, "to_skip": 828, "inputs_to_ivy_arrai": [828, 829], "modif": [828, 861], "briefli": [828, 835, 843], "get_all_arrays_on_dev": 828, "outputs_to_ivy_shap": 829, "outputs_to_native_arrai": 829, "handle_view_index": [829, 831], "handle_view": [829, 831], "handle_rag": 829, "handle_backend_invalid": 829, "handle_nan": 829, "to_native_shapes_and_back": 829, "modern": [830, 850, 851, 866], "inter_func": 830, "custom_grad_fn": 830, "args1": 830, "eas": [830, 861], "speak": 831, "val_n": 831, "base_idx": 831, "_manipulation_stack": 831, "base_flat": 831, "_view_ref": 831, "_update_view": 831, "contigu": 831, "c_contigu": 831, "ascontiguousarrai": 831, "copyto": 831, "_is_vari": 831, "tensor_scatter_nd_upd": 831, "is_vari": 831, "_update_torch_view": 831, "predominantli": [831, 836], "support_native_out": [831, 840], "_scalar_output_to_0d_arrai": 831, "_wrap_fn": 831, "dim0": 831, "dim1": 831, "res_floor": 831, "extent": [831, 832], "to_out_fn": 831, "add_wrapp": 831, "paradigm": [831, 846, 861], "expans": 831, "brief": [831, 835], "weak": 831, "_torch_bas": 831, "_torch_view_ref": 831, "_torch_manipul": 831, "weakli": 831, "adequ": 831, "tf_frontend": 832, "lax": [832, 833, 838, 845, 846], "torch_frontend": [832, 833], "numpy_frontend": 832, "jax_frontend": 832, "to_ivy_arrays_and_back": [832, 833], "fidel": 832, "algebra": [832, 859, 860, 861, 864, 868], "dynamic": 832, "mimic": 832, "arithmetic_oper": 832, "handle_numpy_out": 832, "handle_numpy_dtyp": 832, "handle_numpy_cast": 832, "from_zero_dim_arrays_to_scalar": 832, "_add": 832, "same_kind": 832, "subok": [832, 833, 838], "promote_types_of_numpy_input": 832, "underscor": 832, "unhandl": 832, "trigonometric_funct": 832, "_tan": 832, "check_tensorflow_cast": 832, "raw_op": [832, 833], "map_raw_ops_alia": 832, "output_typ": 832, "kwargs_to_upd": 832, "pointwise_op": 832, "sensibl": 832, "ahead": [832, 836, 861], "reduce_logsumexp": 832, "logsumexp": 832, "trick": 832, "max_input_tensor": 832, "preferred_element_typ": 832, "languag": [832, 840, 848, 850, 852, 859, 862, 864, 865, 866, 867], "offer": [832, 844, 852, 861, 867, 868], "finer": 832, "logicaland": 832, "np_frontend": 832, "_ivy_arrai": 832, "radd": 832, "_init_data": 832, "_process_str_data": 832, "_dtype": [832, 833, 842], "_shape": [832, 842], "govern": 832, "promote_types_of_": 832, "_input": 832, "promote_types_of_torch_input": [832, 833], "handle_numpy_casting_speci": 832, "new_fn": 832, "equiv": 832, "unsaf": 832, "array_type_test": 832, "_isfinit": 832, "organis": 832, "grasp": 832, "youtub": 832, "knowledg": 833, "np_frontend_help": 833, "open_task": 833, "test_lax": 833, "test_oper": 833, "test_jax_tan": 833, "test_mathematical_funct": 833, "test_trigonometric_funct": 833, "dtypes_values_cast": 833, "dtypes_values_casting_dtyp": 833, "arr_func": 833, "get_num_positional_args_ufunc": 833, "test_numpy_tan": 833, "handle_where_and_array_bool": 833, "test_tensorflow": 833, "test_math": 833, "test_tensorflow_tan": 833, "test_pointwise_op": 833, "test_torch_tan": 833, "_fill_valu": 833, "test_glob": 833, "test_jax_ful": 833, "test_from_shape_or_valu": 833, "_input_fill_and_dtyp": 833, "dtype_and_input": 833, "dtype_to_cast": 833, "input_fill_dtyp": 833, "test_numpy_ful": 833, "test_raw_op": 833, "test_tensorflow_fil": 833, "test_creation_op": 833, "with_arrai": 833, "test_torch_ful": 833, "add_nois": 833, "all_clos": 833, "_get_dtype_and_matrix": 833, "test_torch_qr": 833, "frontend_q": 833, "frontend_r": 833, "walkthrough": 833, "comparison_op": 833, "test_comparison_op": 833, "test_torch_great": 833, "all_alias": 833, "test_ndarrai": 833, "test_numpy_instance_add__": 833, "test_tensorflow_instance_add": 833, "1e04": 833, "allow_infin": 833, "test_torch_instance_add": 833, "_arrays_idx_n_dtyp": 833, "surprisingli": 833, "closest_relevant_group": 833, "strive": [833, 835, 838, 846, 863], "craft": [834, 835], "tailor": 834, "clariti": [834, 835, 838, 861], "weav": 834, "thrill": 834, "brim": 834, "landscap": 834, "forese": 834, "refin": 834, "inquiri": 834, "fixtur": 835, "hit": [835, 840, 854], "eleg": [835, 861], "unexplor": 835, "artifact": 835, "bespok": 835, "_array_or_typ": 835, "rigor": [835, 850], "test_default_int_dtyp": 835, "print_hypothesis_exampl": 835, "custom_strategi": 835, "randomis": 835, "simplist": 835, "intricaci": 835, "glanc": 835, "one_of": 835, "datum": 835, "pipe": 835, "array_or_scal": 835, "len_of_arrai": 835, "test_add": 835, "test_gpu_is_avail": 835, "pretest": 835, "snippet": [835, 855], "criterion": 835, "valid_ax": 835, "hoc": 835, "11228": 835, "268": 835, "wherev": 835, "9622": 835, "28136": 835, "6375": 835, "12720": 835, "21354": 835, "900e": 835, "57384": 835, "25687": 835, "248": 835, "test_devic": 835, "array_shap": 835, "test_lay": 835, "some_sequ": 835, "arrays_valu": 835, "36418": 835, "213": 835, "21716926": 835, "none_or_list_of_float": 835, "get_prob": 835, "103515625e": 835, "099609375": 835, "probabilist": 835, "number_positional_argu": 835, "unreproduc": 835, "x_and_linear": 835, "is_torch_backend": 835, "x_shape": [835, 840], "weight_shap": 835, "bias_shap": 835, "ivy_np": 835, "valid_float_dtyp": 835, "test_demo": 835, "failing_test": 835, "traceback": 835, "shrink": 835, "prescrib": 835, "scratch": 835, "therebi": 835, "test_gelu": 835, "test_fil": 835, "phase": [835, 846, 861], "notabl": [835, 861], "max_exampl": 835, "deadlin": 835, "weird": 835, "systemat": 835, "safeguard": 835, "inabl": 835, "test_result_typ": 835, "9090909090909091": 835, "judgement": 836, "some_namespac": 836, "some_backend": 836, "another_backend": 836, "refactor": 836, "ongo": 836, "check_fill_value_and_dtype_are_compat": 836, "_to_devic": 836, "shouldn": [836, 854], "pin": 836, "unpinn": 836, "culmin": 836, "unsett": 837, "array_significant_figur": 837, "array_decimal_valu": 837, "warning_level": 837, "nan_polici": 837, "stablest": 837, "constantli": [838, 850], "answer": [838, 842, 846], "contradict": 838, "entail": 838, "sacrif": 838, "jacfwd": 838, "jacrev": 838, "banner": 838, "expens": 838, "incredibli": [838, 843, 846, 864], "price": 838, "pai": 838, "intrus": 838, "x_beta": 838, "equip": 838, "simplif": 838, "allevi": 838, "ineffici": [838, 846, 861], "fuse": 838, "hybrid": 838, "workaround": 838, "slip": 838, "radar": 838, "stumbl": 838, "gone": [839, 851], "fulfil": 839, "syntact": [840, 845], "power_seq": 840, "_determine_backend_from_arg": 840, "importlib": 840, "_backend_dict": 840, "x_flat": 840, "wi": 840, "wi_x": 840, "wii_x": 840, "wif_x": 840, "wig_x": 840, "wio_x": 840, "wh": 840, "ht": 840, "ct": 840, "hts_list": 840, "wii_xt": 840, "wif_xt": 840, "wig_xt": 840, "wio_xt": 840, "htm1": 840, "ctm1": 840, "wh_htm1": 840, "whi_htm1": 840, "whf_htm1": 840, "whg_htm1": 840, "who_htm1": 840, "ft": 840, "ot": 840, "reliabl": 840, "scalabl": [840, 850, 866, 867], "sacrific": 840, "hear": 840, "virtu": [840, 858], "pure_ivi": 840, "pure_torch": 840, "unclean": 840, "wx": 840, "temp": 840, "ivy_func": 840, "emphas": 840, "example_input": 840, "static_argnum": [840, 854], "static_argnam": [840, 854], "primit": [841, 846, 859, 861], "upcom": 841, "hierarch": [841, 843, 844, 861], "arraywithactiv": 842, "arraywithcr": 842, "arraywithdatatyp": 842, "arraywithdevic": 842, "arraywithgener": 842, "arraywithgradi": 842, "arraywithimag": 842, "arraywithlay": 842, "arraywithlinearalgebra": 842, "arraywithloss": 842, "arraywithmanipul": 842, "arraywithnorm": 842, "arraywithrandom": 842, "arraywithsearch": 842, "arraywithset": 842, "arraywithsort": 842, "arraywithstatist": 842, "arraywithutil": 842, "_init": 842, "_size": 842, "_devic": 842, "_dev_str": 842, "_pre_repr": 842, "_post_repr": 842, "framework_str": 842, "pypep8nam": 842, "immut": 842, "claim": 842, "_native_wrapp": 842, "genuin": 842, "some_method": 842, "rewritten": 842, "littl": [842, 850, 863], "wonder": [842, 850, 852], "compartment": 842, "newshap": 842, "new_shap": 842, "tidi": 842, "crystal": 842, "ton": 843, "ado": [843, 844], "soup": 843, "walk": [843, 844], "cnt": 843, "3333335": 843, "autocomplet": 843, "midwai": 843, "agent": 843, "total_spe": 843, "total_height": 843, "total_width": 843, "ag": 843, "tot": 843, "total_": 843, "total_h": 843, "cnt0": 843, "cnt1": 843, "diff_0": 843, "diff_1": 843, "config0": 843, "config1": 843, "l0": 843, "decoder__l0": 843, "decoder__l1": 843, "encoder__l0": 843, "encoder__l1": 843, "l0__b": 843, "l0__w": 843, "l1__b": 843, "l1__w": 843, "printabl": 843, "foresight": 843, "untidili": 843, "update_ag": 843, "normalize_img": 843, "img_max": 843, "reduce_max": 843, "img_min": 843, "reduce_min": 843, "img_rang": 843, "agent_posit": 843, "agent_veloc": 843, "agent_cam_front_rgb": 843, "agent_cam_front_depth": 843, "agent_cam_rear_rgb": 843, "agent_cam_rear_depth": 843, "agent_cam_lidar": 843, "camera": 843, "front_rgb": 843, "front_depth": 843, "rear_rgb": 843, "rear_depth": 843, "lidar": 843, "rgb": 843, "rear": 843, "veloc": 843, "cam": 843, "cam_max": 843, "cam_min": 843, "cam_rang": 843, "five": 843, "allud": [843, 851], "perman": 843, "dataload": 843, "_cnt": 843, "img_": 843, "_dataset_s": 843, "_batch_siz": 843, "_count": [843, 844], "__next__": 843, "img_fnam": 843, "loaded_img": 843, "batch_slic": 843, "0145": 843, "addbackward0": 843, "_create_vari": 844, "_input_channel": 844, "_output_channel": 844, "_w_shape": 844, "_b_shape": 844, "_with_bia": 844, "764": 844, "872": 844, "211": 844, "439": 844, "nightmar": 844, "overcom": 844, "v1": 844, "key0": 844, "linear3": 844, "v2": 844, "preced": [844, 851], "_w_init": 844, "_b_init": 844, "misnom": 844, "saw": 844, "_beta1": 844, "_beta2": 844, "_epsilon": 844, "_mw": 844, "_vw": 844, "_first_pass": 844, "_should_trac": 844, "new_v": 844, "_lr": 844, "_inplac": 844, "_stop_gradi": 844, "sparse_funct": 845, "vital": [845, 850], "_linear": 845, "jax_graph": 845, "to_backend": 845, "thinli": 845, "to_haiku_modul": 845, "loss_fn_t": 845, "without_apply_rng": 845, "update_rul": 845, "tree_multimap": 845, "trax": [845, 852], "objax": [845, 852], "matur": [846, 851, 861], "doubt": 846, "probe": 846, "lock": 846, "dex": 846, "tricki": [846, 848], "predictor": 846, "tight": 846, "dispatch": [846, 861, 864], "ast": 846, "autodiff": 846, "shine": 846, "merci": 846, "compet": [846, 861], "parallelis": 846, "spmd": 846, "mixtur": 846, "expert": 846, "sophist": 846, "depart": 846, "hundr": 846, "thousand": 846, "broadli": [846, 867], "supplementari": 846, "reusabl": [846, 859, 861], "fanci": [846, 861], "fusion": [846, 865], "lose": 846, "pmap": 846, "eventu": 846, "supplement": 846, "backdoor": 846, "callback": 846, "somewhat": [846, 861], "outsourc": 846, "ivy_root": 847, "pem": 847, "api_kei": 847, "asap": 847, "nail": 848, "scientist": 848, "correl": 848, "collabor": [849, 850, 851], "consortium": [849, 851], "grown": 850, "rapidli": 850, "shareabl": 850, "outdat": 850, "newest": 850, "prototyp": [850, 861], "obsolet": [850, 852], "invent": 850, "simultan": [850, 852], "runner": 850, "principl": [850, 859, 861, 864], "2006": 850, "cloth": 850, "forgiven": 851, "eyebrow": 851, "somehow": 851, "industri": [851, 861, 863], "funni": 851, "comic": 851, "charger": 851, "instant": 851, "contrari": 851, "bumpi": 851, "road": 851, "technologi": [851, 859, 863], "motherboard": 851, "raid": 851, "bluetooth": 851, "wireless": 851, "btx": 851, "sata": 851, "tcp": 851, "ip": 851, "smtp": 851, "send": [851, 866], "gmail": 851, "outlook": 851, "growth": [851, 864], "necess": 851, "2015": [851, 861], "aros": 851, "ourselv": [851, 867], "quansight": [851, 867], "compani": [851, 857], "apach": [851, 863, 867], "onnx": [851, 859, 867], "cupi": [851, 861, 868], "modin": 851, "spyder": 851, "octoml": [851, 867], "sponsor": 851, "lg": 851, "electron": 851, "shaw": 851, "pursuit": 851, "complianc": 851, "convinc": 851, "celebr": 851, "abund": 852, "streamlin": [852, 864], "awesom": 852, "love": 852, "slew": 852, "inevit": [852, 862], "erron": 852, "poor": 852, "spin": 852, "sake": 852, "wouldn": 852, "frantic": 852, "lucid": 852, "honk": 852, "hasn": 852, "spend": [852, 861], "sonnet": 852, "trainer": [852, 868], "quo": 852, "dopamin": 852, "ignit": 852, "catalyst": 852, "lightn": 852, "fastai": 852, "publicli": [854, 855, 856], "logger": 854, "arg_stateful_idx": 854, "kwarg_stateful_idx": 854, "include_gener": 854, "array_cach": 854, "return_backend_traced_fn": 854, "lazygraph": [854, 855, 856], "sum_j": 854, "traced_fn": 854, "impos": 854, "comp_func": 854, "trade": 854, "bake": 854, "cont": 854, "new_attribut": 854, "resnet50": 854, "breed": 854, "autoimageprocessor": [854, 855], "resnetforimageclassif": [854, 855], "traced_graph": 854, "predicted_label": 854, "debug_mod": 855, "rough": 855, "transformed_with_st": 855, "bigger": 855, "hf": 855, "tf_model": 855, "tf_input": 855, "transpile_kwarg": 856, "transpiled_func": 856, "unified_func": 856, "rwork": 857, "vendor": [857, 863], "complimentari": [857, 867], "acycl": [857, 862], "insert_numb": 858, "insert_t": 858, "scaffold": [859, 867], "heart": 859, "toolchain": [859, 864], "assembli": [859, 866, 867], "idl": 859, "middl": 859, "emit": 859, "gnu": [859, 864], "broader": 859, "heterogen": 859, "aid": 859, "coprocessor": 859, "programm": [859, 866], "gate": 859, "onednn": 859, "sit": [859, 862, 867], "tandem": 859, "possess": 859, "khrono": [860, 866], "appl": 860, "coremltool": 860, "albeit": 860, "promin": 861, "abbrevi": 861, "laboratori": 861, "proprietari": [861, 865, 866], "mathwork": 861, "commerci": 861, "1984": 861, "toolbox": 861, "mupad": 861, "simulink": 861, "graphic": [861, 865, 866], "simul": 861, "million": [861, 864], "worldwid": 861, "scienc": [861, 863], "econom": 861, "2001": 861, "od": 861, "solver": 861, "cython": 861, "friendli": 861, "2002": 861, "lua": 861, "luajit": 861, "idiap": 861, "epfl": 861, "2005": 861, "numarrai": 861, "cpython": 861, "partli": 861, "2007": 861, "forest": 861, "boost": 861, "dbscan": 861, "inbuilt": 861, "esqu": 861, "aesara": 861, "datafram": 861, "2012": 861, "polymorph": 861, "mpi": 861, "openmp": 861, "glue": 861, "jaot": 861, "nasa": 861, "cern": 861, "climat": 861, "allianc": 861, "influenti": 861, "2014": 861, "scala": 861, "ship": 861, "forgiv": 861, "decemb": 861, "announc": 861, "mainten": 861, "v7": 861, "meaning": 861, "2016": 861, "imper": 861, "amazon": 861, "traction": 861, "cognit": [861, 868], "grade": 861, "dnn": 861, "backpropag": 861, "succumb": 861, "came": 861, "monitor": 861, "practition": [861, 865, 866, 867], "hobbyist": 861, "tremend": 861, "ecosystem": 861, "gear": 861, "batteri": 861, "zygot": 861, "jl": 861, "workload": 861, "daggerflux": 861, "frontier": 861, "hessian": 861, "2018": 861, "lightweight": [861, 868], "shortcom": 861, "barrier": 861, "inexperienc": 861, "underdevelop": 861, "fanat": 861, "ounc": 861, "infanc": 861, "emerg": 861, "nich": 861, "mobil": 861, "lite": 861, "enterpris": 861, "reinvent": [861, 863], "inertia": 861, "creator": [861, 863], "paszk": 861, "hi": 861, "bulk": 861, "haskel": 861, "dataflow": 862, "trace_modul": 862, "scriptfunct": 862, "scriptmodul": 862, "fake": 862, "proxi": 862, "graphmodul": 862, "travi": 863, "oliph": 863, "leader": 863, "cornerston": 863, "numba": 863, "numfocu": 863, "pydata": 863, "confer": 863, "consult": 863, "servic": 863, "devop": 863, "mlop": 863, "dashboard": 863, "startup": 863, "mlir": [863, 864, 867], "Their": 863, "held": 863, "presum": 863, "llvm": [863, 866], "founder": 863, "tvm": [863, 867], "sustain": 863, "empow": 863, "har": 863, "burden": 863, "precompil": 864, "executor": 864, "julia": [864, 867], "fsf": 864, "gpl": 864, "biggest": [864, 867], "throughput": 865, "gpgpu": 865, "classic": 866, "sycl": 866, "dpc": 866, "processor": 866, "maco": 866, "oneapi": 866, "ia": 866, "aka": 866, "xeon": 866, "gen9": 866, "xe": 866, "arria": 866, "gx": 866, "fpga": 866, "lofti": 867, "ambit": 867, "realm": 867, "bedrock": 867, "flux": 867, "bite": 867, "chew": 867, "eagerpi": 867, "tensorli": 867, "thinc": 867, "neuropod": 867, "fx": 867, "retrain": 867, "closer": 867, "greatli": 867, "modular": 867, "anywher": 867, "theano": 868, "plaidml": 868, "partial_svd": 868, "excel": 868, "subsystem": 868}, "objects": {"ivy.Array": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [604, 0, 1, "", "adam_step"], [605, 0, 1, "", "adam_update"], [383, 0, 1, "", "adaptive_avg_pool1d"], [384, 0, 1, "", "adaptive_avg_pool2d"], [385, 0, 1, "", "adaptive_max_pool2d"], [219, 0, 1, "", "add"], [417, 0, 1, "", "adjoint"], [757, 0, 1, "", "all"], [524, 0, 1, "", "all_equal"], [329, 0, 1, "", "allclose"], [330, 0, 1, "", "amax"], [331, 0, 1, "", "amin"], [220, 0, 1, "", "angle"], [758, 0, 1, "", "any"], [734, 0, 1, "", "argmax"], [735, 0, 1, "", "argmin"], [743, 0, 1, "", "argsort"], [736, 0, 1, "", "argwhere"], [527, 0, 1, "", "array_equal"], [451, 0, 1, "", "as_strided"], [124, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [528, 0, 1, "", "assert_supports_inplace"], [452, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [453, 0, 1, "", "atleast_1d"], [454, 0, 1, "", "atleast_2d"], [455, 0, 1, "", "atleast_3d"], [387, 0, 1, "", "avg_pool1d"], [388, 0, 1, "", "avg_pool2d"], [389, 0, 1, "", "avg_pool3d"], [491, 0, 1, "", "batch_norm"], [418, 0, 1, "", "batched_outer"], [498, 0, 1, "", "bernoulli"], [499, 0, 1, "", "beta"], [332, 0, 1, "", "binarizer"], [686, 0, 1, "", "binary_cross_entropy"], [510, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [307, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [291, 0, 1, "", "celu"], [656, 0, 1, "", "cholesky"], [689, 0, 1, "", "clip"], [530, 0, 1, "", "clip_matrix_norm"], [531, 0, 1, "", "clip_vector_norm"], [459, 0, 1, "", "column_stack"], [690, 0, 1, "", "concat"], [460, 0, 1, "", "concat_from_sequence"], [419, 0, 1, "", "cond"], [333, 0, 1, "", "conj"], [691, 0, 1, "", "constant_pad"], [639, 0, 1, "", "conv1d"], [640, 0, 1, "", "conv1d_transpose"], [641, 0, 1, "", "conv2d"], [642, 0, 1, "", "conv2d_transpose"], [643, 0, 1, "", "conv3d"], [644, 0, 1, "", "conv3d_transpose"], [125, 0, 1, "", "copy_array"], [334, 0, 1, "", "copysign"], [511, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [335, 0, 1, "", "count_nonzero"], [512, 0, 1, "", "cov"], [657, 0, 1, "", "cross"], [687, 0, 1, "", "cross_entropy"], [513, 0, 1, "", "cummax"], [514, 0, 1, "", "cummin"], [747, 0, 1, "", "cumprod"], [748, 0, 1, "", "cumsum"], [390, 0, 1, "", "dct"], [534, 0, 1, "", "default"], [235, 0, 1, "", "deg2rad"], [647, 0, 1, "", "depthwise_conv2d"], [658, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [391, 0, 1, "", "dft"], [659, 0, 1, "", "diag"], [420, 0, 1, "", "diagflat"], [660, 0, 1, "", "diagonal"], [336, 0, 1, "", "diff"], [337, 0, 1, "", "digamma"], [500, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [421, 0, 1, "", "dot"], [648, 0, 1, "", "dropout"], [392, 0, 1, "", "dropout1d"], [393, 0, 1, "", "dropout2d"], [394, 0, 1, "", "dropout3d"], [461, 0, 1, "", "dsplit"], [462, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [422, 0, 1, "", "eig"], [662, 0, 1, "", "eigh"], [423, 0, 1, "", "eigh_tridiagonal"], [424, 0, 1, "", "eigvals"], [663, 0, 1, "", "eigvalsh"], [535, 0, 1, "", "einops_rearrange"], [536, 0, 1, "", "einops_reduce"], [537, 0, 1, "", "einops_repeat"], [749, 0, 1, "", "einsum"], [292, 0, 1, "", "elu"], [395, 0, 1, "", "embedding"], [127, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [338, 0, 1, "", "erfc"], [538, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [463, 0, 1, "", "expand"], [692, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [308, 0, 1, "", "eye_like"], [396, 0, 1, "", "fft"], [397, 0, 1, "", "fft2"], [464, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [339, 0, 1, "", "fix"], [465, 0, 1, "", "flatten"], [693, 0, 1, "", "flip"], [466, 0, 1, "", "fliplr"], [467, 0, 1, "", "flipud"], [340, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [341, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [468, 0, 1, "", "fold"], [539, 0, 1, "", "fourier_encode"], [342, 0, 1, "", "frexp"], [129, 0, 1, "", "from_dlpack"], [132, 0, 1, "", "full_like"], [501, 0, 1, "", "gamma"], [542, 0, 1, "", "gather"], [543, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [106, 0, 1, "", "gelu"], [425, 0, 1, "", "general_inner_product"], [546, 0, 1, "", "get_num_dims"], [343, 0, 1, "", "gradient"], [608, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [492, 0, 1, "", "group_norm"], [293, 0, 1, "", "hardshrink"], [107, 0, 1, "", "hardswish"], [294, 0, 1, "", "hardtanh"], [548, 0, 1, "", "has_nans"], [469, 0, 1, "", "heaviside"], [426, 0, 1, "", "higher_order_moment"], [443, 0, 1, "", "hinge_embedding_loss"], [515, 0, 1, "", "histogram"], [470, 0, 1, "", "hsplit"], [471, 0, 1, "", "hstack"], [444, 0, 1, "", "huber_loss"], [344, 0, 1, "", "hypot"], [472, 0, 1, "", "i0"], [400, 0, 1, "", "idct"], [401, 0, 1, "", "ifft"], [402, 0, 1, "", "ifftn"], [516, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [427, 0, 1, "", "initialize_tucker"], [664, 0, 1, "", "inner"], [550, 0, 1, "", "inplace_decrement"], [551, 0, 1, "", "inplace_increment"], [552, 0, 1, "", "inplace_update"], [493, 0, 1, "", "instance_norm"], [404, 0, 1, "", "interpolate"], [665, 0, 1, "", "inv"], [554, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [555, 0, 1, "", "is_ivy_array"], [556, 0, 1, "", "is_ivy_container"], [558, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [345, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [559, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [561, 0, 1, "", "itemsize"], [445, 0, 1, "", "kl_div"], [429, 0, 1, "", "kron"], [446, 0, 1, "", "l1_loss"], [494, 0, 1, "", "l1_normalize"], [495, 0, 1, "", "l2_normalize"], [610, 0, 1, "", "lamb_update"], [611, 0, 1, "", "lars_update"], [727, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [346, 0, 1, "", "ldexp"], [108, 0, 1, "", "leaky_relu"], [347, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [505, 0, 1, "", "lexsort"], [348, 0, 1, "", "lgamma"], [649, 0, 1, "", "linear"], [133, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [447, 0, 1, "", "log_poisson_loss"], [109, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [134, 0, 1, "", "logspace"], [497, 0, 1, "", "lp_normalize"], [651, 0, 1, "", "lstm_update"], [431, 0, 1, "", "make_svd_non_negative"], [667, 0, 1, "", "matmul"], [473, 0, 1, "", "matricize"], [432, 0, 1, "", "matrix_exp"], [668, 0, 1, "", "matrix_norm"], [669, 0, 1, "", "matrix_power"], [670, 0, 1, "", "matrix_rank"], [671, 0, 1, "", "matrix_transpose"], [750, 0, 1, "", "max"], [405, 0, 1, "", "max_pool1d"], [406, 0, 1, "", "max_pool2d"], [407, 0, 1, "", "max_pool3d"], [408, 0, 1, "", "max_unpool1d"], [267, 0, 1, "", "maximum"], [751, 0, 1, "", "mean"], [517, 0, 1, "", "median"], [314, 0, 1, "", "mel_weight_matrix"], [135, 0, 1, "", "meshgrid"], [752, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [110, 0, 1, "", "mish"], [433, 0, 1, "", "mode_dot"], [349, 0, 1, "", "modf"], [474, 0, 1, "", "moveaxis"], [744, 0, 1, "", "msort"], [434, 0, 1, "", "multi_dot"], [652, 0, 1, "", "multi_head_attention"], [435, 0, 1, "", "multi_mode_dot"], [728, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [518, 0, 1, "", "nanmean"], [519, 0, 1, "", "nanmedian"], [520, 0, 1, "", "nanmin"], [521, 0, 1, "", "nanprod"], [350, 0, 1, "", "nansum"], [136, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [351, 0, 1, "", "nextafter"], [737, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [137, 0, 1, "", "one_hot"], [139, 0, 1, "", "ones_like"], [612, 0, 1, "", "optimizer_update"], [523, 0, 1, "", "optional_get_element"], [672, 0, 1, "", "outer"], [475, 0, 1, "", "pad"], [476, 0, 1, "", "partial_fold"], [477, 0, 1, "", "partial_tensor_to_vec"], [436, 0, 1, "", "partial_tucker"], [478, 0, 1, "", "partial_unfold"], [479, 0, 1, "", "partial_vec_to_tensor"], [694, 0, 1, "", "permute_dims"], [673, 0, 1, "", "pinv"], [502, 0, 1, "", "poisson"], [448, 0, 1, "", "poisson_nll_loss"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [753, 0, 1, "", "prod"], [480, 0, 1, "", "put_along_axis"], [674, 0, 1, "", "qr"], [522, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [729, 0, 1, "", "randint"], [730, 0, 1, "", "random_normal"], [731, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [357, 0, 1, "", "reduce"], [411, 0, 1, "", "reduce_window"], [111, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [695, 0, 1, "", "repeat"], [696, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [412, 0, 1, "", "rfft"], [413, 0, 1, "", "rfftn"], [697, 0, 1, "", "roll"], [481, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [655, 0, 1, "", "scaled_dot_product_attention"], [299, 0, 1, "", "scaled_tanh"], [566, 0, 1, "", "scatter_flat"], [567, 0, 1, "", "scatter_nd"], [745, 0, 1, "", "searchsorted"], [300, 0, 1, "", "selu"], [580, 0, 1, "", "shape"], [733, 0, 1, "", "shuffle"], [112, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [352, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [353, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [415, 0, 1, "", "sliding_window"], [675, 0, 1, "", "slogdet"], [449, 0, 1, "", "smooth_l1_loss"], [450, 0, 1, "", "soft_margin_loss"], [482, 0, 1, "", "soft_thresholding"], [113, 0, 1, "", "softmax"], [114, 0, 1, "", "softplus"], [302, 0, 1, "", "softshrink"], [676, 0, 1, "", "solve"], [746, 0, 1, "", "sort"], [688, 0, 1, "", "sparse_cross_entropy"], [354, 0, 1, "", "sparsify_tensor"], [698, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [699, 0, 1, "", "squeeze"], [581, 0, 1, "", "stable_divide"], [582, 0, 1, "", "stable_pow"], [700, 0, 1, "", "stack"], [754, 0, 1, "", "std"], [416, 0, 1, "", "stft"], [613, 0, 1, "", "stop_gradient"], [583, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [755, 0, 1, "", "sum"], [584, 0, 1, "", "supports_inplace_updates"], [677, 0, 1, "", "svd"], [438, 0, 1, "", "svd_flip"], [678, 0, 1, "", "svdvals"], [701, 0, 1, "", "swapaxes"], [483, 0, 1, "", "take"], [484, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [304, 0, 1, "", "tanhshrink"], [439, 0, 1, "", "tensor_train"], [679, 0, 1, "", "tensordot"], [680, 0, 1, "", "tensorsolve"], [305, 0, 1, "", "threshold"], [306, 0, 1, "", "thresholded_relu"], [702, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [586, 0, 1, "", "to_list"], [588, 0, 1, "", "to_numpy"], [589, 0, 1, "", "to_scalar"], [485, 0, 1, "", "top_k"], [681, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [324, 0, 1, "", "trilu"], [486, 0, 1, "", "trim_zeros"], [142, 0, 1, "", "triu"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [440, 0, 1, "", "truncated_svd"], [441, 0, 1, "", "tt_matrix_to_tensor"], [442, 0, 1, "", "tucker"], [487, 0, 1, "", "unfold"], [739, 0, 1, "", "unique_all"], [488, 0, 1, "", "unique_consecutive"], [740, 0, 1, "", "unique_counts"], [741, 0, 1, "", "unique_inverse"], [742, 0, 1, "", "unique_values"], [503, 0, 1, "", "unravel_index"], [325, 0, 1, "", "unsorted_segment_mean"], [326, 0, 1, "", "unsorted_segment_min"], [327, 0, 1, "", "unsorted_segment_sum"], [703, 0, 1, "", "unstack"], [602, 0, 1, "", "value_is_nan"], [682, 0, 1, "", "vander"], [756, 0, 1, "", "var"], [683, 0, 1, "", "vecdot"], [684, 0, 1, "", "vector_norm"], [685, 0, 1, "", "vector_to_skew_symmetric_matrix"], [489, 0, 1, "", "vsplit"], [490, 0, 1, "", "vstack"], [738, 0, 1, "", "where"], [355, 0, 1, "", "xlogy"], [704, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [356, 0, 1, "", "zeta"]], "ivy": [[623, 1, 1, "", "ArrayMode"], [619, 1, 1, "", "DefaultComplexDtype"], [620, 1, 1, "", "DefaultDevice"], [619, 1, 1, "", "DefaultDtype"], [619, 1, 1, "", "DefaultFloatDtype"], [619, 1, 1, "", "DefaultIntDtype"], [619, 1, 1, "", "DefaultUintDtype"], [380, 1, 1, "", "NativeSparseArray"], [618, 1, 1, "", "NestedSequence"], [623, 1, 1, "", "PreciseMode"], [620, 1, 1, "", "Profiler"], [380, 1, 1, "", "SparseArray"], [216, 2, 1, "", "abs"], [217, 2, 1, "", "acos"], [218, 2, 1, "", "acosh"], [624, 2, 1, "", "adam_step"], [624, 2, 1, "", "adam_update"], [383, 2, 1, "", "adaptive_avg_pool1d"], [384, 2, 1, "", "adaptive_avg_pool2d"], [385, 2, 1, "", "adaptive_max_pool2d"], [219, 2, 1, "", "add"], [370, 2, 1, "", "adjoint"], [637, 2, 1, "", "all"], [623, 2, 1, "", "all_equal"], [630, 2, 1, "", "all_nested_indices"], [366, 2, 1, "", "allclose"], [366, 2, 1, "", "amax"], [366, 2, 1, "", "amin"], [220, 2, 1, "", "angle"], [637, 2, 1, "", "any"], [618, 2, 1, "", "arange"], [386, 2, 1, "", "area_interpolate"], [623, 2, 1, "", "arg_info"], [623, 2, 1, "", "arg_names"], [633, 2, 1, "", "argmax"], [633, 2, 1, "", "argmin"], [635, 2, 1, "", "argsort"], [633, 2, 1, "", "argwhere"], [618, 2, 1, "", "array"], [623, 2, 1, "", "array_equal"], [189, 2, 1, "", "as_ivy_dev"], [619, 2, 1, "", "as_ivy_dtype"], [190, 2, 1, "", "as_native_dev"], [619, 2, 1, "", "as_native_dtype"], [372, 2, 1, "", "as_strided"], [618, 2, 1, "", "asarray"], [221, 2, 1, "", "asin"], [222, 2, 1, "", "asinh"], [623, 2, 1, "", "assert_supports_inplace"], [372, 2, 1, "", "associative_scan"], [619, 2, 1, "", "astype"], [223, 2, 1, "", "atan"], [224, 2, 1, "", "atan2"], [225, 2, 1, "", "atanh"], [372, 2, 1, "", "atleast_1d"], [372, 2, 1, "", "atleast_2d"], [372, 2, 1, "", "atleast_3d"], [387, 2, 1, "", "avg_pool1d"], [388, 2, 1, "", "avg_pool2d"], [389, 2, 1, "", "avg_pool3d"], [375, 2, 1, "", "batch_norm"], [370, 2, 1, "", "batched_outer"], [376, 2, 1, "", "bernoulli"], [376, 2, 1, "", "beta"], [366, 2, 1, "", "binarizer"], [627, 2, 1, "", "binary_cross_entropy"], [381, 2, 1, "", "bincount"], [368, 2, 1, "", "bind_custom_gradient_function"], [226, 2, 1, "", "bitwise_and"], [227, 2, 1, "", "bitwise_invert"], [228, 2, 1, "", "bitwise_left_shift"], [229, 2, 1, "", "bitwise_or"], [230, 2, 1, "", "bitwise_right_shift"], [231, 2, 1, "", "bitwise_xor"], [307, 2, 1, "", "blackman_window"], [619, 2, 1, "", "broadcast_arrays"], [372, 2, 1, "", "broadcast_shapes"], [619, 2, 1, "", "broadcast_to"], [623, 2, 1, "", "cache_fn"], [619, 2, 1, "", "can_cast"], [232, 2, 1, "", "ceil"], [291, 2, 1, "", "celu"], [619, 2, 1, "", "check_float"], [372, 2, 1, "", "check_scalar"], [626, 2, 1, "", "cholesky"], [372, 2, 1, "", "choose"], [191, 2, 1, "", "clear_cached_mem_on_dev"], [628, 2, 1, "", "clip"], [623, 2, 1, "", "clip_matrix_norm"], [623, 2, 1, "", "clip_vector_norm"], [619, 2, 1, "", "closest_valid_dtype"], [617, 2, 1, "", "cmp_is"], [617, 2, 1, "", "cmp_isnot"], [372, 2, 1, "", "column_stack"], [628, 2, 1, "", "concat"], [372, 2, 1, "", "concat_from_sequence"], [370, 2, 1, "", "cond"], [366, 2, 1, "", "conj"], [628, 2, 1, "", "constant_pad"], [623, 2, 1, "", "container_types"], [638, 2, 1, "", "conv"], [639, 2, 1, "", "conv1d"], [640, 2, 1, "", "conv1d_transpose"], [641, 2, 1, "", "conv2d"], [642, 2, 1, "", "conv2d_transpose"], [643, 2, 1, "", "conv3d"], [625, 2, 1, "", "conv3d_transpose"], [625, 2, 1, "", "conv_general_dilated"], [625, 2, 1, "", "conv_general_transpose"], [618, 2, 1, "", "copy_array"], [630, 2, 1, "", "copy_nest"], [366, 2, 1, "", "copysign"], [381, 2, 1, "", "corrcoef"], [233, 2, 1, "", "cos"], [234, 2, 1, "", "cosh"], [366, 2, 1, "", "count_nonzero"], [381, 2, 1, "", "cov"], [626, 2, 1, "", "cross"], [627, 2, 1, "", "cross_entropy"], [381, 2, 1, "", "cummax"], [381, 2, 1, "", "cummin"], [636, 2, 1, "", "cumprod"], [636, 2, 1, "", "cumsum"], [623, 2, 1, "", "current_backend_str"], [390, 2, 1, "", "dct"], [623, 2, 1, "", "default"], [619, 2, 1, "", "default_complex_dtype"], [192, 2, 1, "", "default_device"], [619, 2, 1, "", "default_dtype"], [619, 2, 1, "", "default_float_dtype"], [619, 2, 1, "", "default_int_dtype"], [619, 2, 1, "", "default_uint_dtype"], [235, 2, 1, "", "deg2rad"], [625, 2, 1, "", "depthwise_conv2d"], [626, 2, 1, "", "det"], [193, 2, 1, "", "dev"], [194, 2, 1, "", "dev_util"], [391, 2, 1, "", "dft"], [626, 2, 1, "", "diag"], [370, 2, 1, "", "diagflat"], [626, 2, 1, "", "diagonal"], [366, 2, 1, "", "diff"], [366, 2, 1, "", "digamma"], [376, 2, 1, "", "dirichlet"], [236, 2, 1, "", "divide"], [370, 2, 1, "", "dot"], [625, 2, 1, "", "dropout"], [392, 2, 1, "", "dropout1d"], [393, 2, 1, "", "dropout2d"], [394, 2, 1, "", "dropout3d"], [372, 2, 1, "", "dsplit"], [372, 2, 1, "", "dstack"], [619, 2, 1, "", "dtype"], [619, 2, 1, "", "dtype_bits"], [630, 2, 1, "", "duplicate_array_index_chains"], [616, 6, 1, "", "e"], [370, 2, 1, "", "eig"], [626, 2, 1, "", "eigh"], [370, 2, 1, "", "eigh_tridiagonal"], [370, 2, 1, "", "eigvals"], [626, 2, 1, "", "eigvalsh"], [623, 2, 1, "", "einops_rearrange"], [623, 2, 1, "", "einops_reduce"], [623, 2, 1, "", "einops_repeat"], [636, 2, 1, "", "einsum"], [292, 2, 1, "", "elu"], [395, 2, 1, "", "embedding"], [618, 2, 1, "", "empty"], [618, 2, 1, "", "empty_like"], [237, 2, 1, "", "equal"], [238, 2, 1, "", "erf"], [366, 2, 1, "", "erfc"], [624, 2, 1, "", "execute_with_gradients"], [623, 2, 1, "", "exists"], [239, 2, 1, "", "exp"], [240, 2, 1, "", "exp2"], [372, 2, 1, "", "expand"], [628, 2, 1, "", "expand_dims"], [241, 2, 1, "", "expm1"], [618, 2, 1, "", "eye"], [308, 2, 1, "", "eye_like"], [396, 2, 1, "", "fft"], [397, 2, 1, "", "fft2"], [372, 2, 1, "", "fill_diagonal"], [619, 2, 1, "", "finfo"], [366, 2, 1, "", "fix"], [372, 2, 1, "", "flatten"], [628, 2, 1, "", "flip"], [372, 2, 1, "", "fliplr"], [372, 2, 1, "", "flipud"], [366, 2, 1, "", "float_power"], [242, 2, 1, "", "floor"], [243, 2, 1, "", "floor_divide"], [366, 2, 1, "", "fmax"], [244, 2, 1, "", "fmin"], [245, 2, 1, "", "fmod"], [372, 2, 1, "", "fold"], [629, 2, 1, "", "fomaml_step"], [617, 2, 1, "", "for_loop"], [623, 2, 1, "", "fourier_encode"], [366, 2, 1, "", "frexp"], [618, 2, 1, "", "from_dlpack"], [618, 2, 1, "", "frombuffer"], [618, 2, 1, "", "full"], [618, 2, 1, "", "full_like"], [195, 2, 1, "", "function_supported_devices"], [623, 2, 1, "", "function_supported_devices_and_dtypes"], [619, 2, 1, "", "function_supported_dtypes"], [196, 2, 1, "", "function_unsupported_devices"], [623, 2, 1, "", "function_unsupported_devices_and_dtypes"], [619, 2, 1, "", "function_unsupported_dtypes"], [376, 2, 1, "", "gamma"], [623, 2, 1, "", "gather"], [623, 2, 1, "", "gather_nd"], [246, 2, 1, "", "gcd"], [615, 2, 1, "", "gelu"], [370, 2, 1, "", "general_inner_product"], [398, 2, 1, "", "generate_einsum_equation"], [623, 2, 1, "", "get_all_arrays_in_memory"], [197, 2, 1, "", "get_all_ivy_arrays_on_dev"], [399, 2, 1, "", "get_interpolate_kernel"], [623, 2, 1, "", "get_item"], [623, 2, 1, "", "get_num_dims"], [623, 2, 1, "", "get_referrers_recursive"], [198, 2, 1, "", "gpu_is_available"], [624, 2, 1, "", "grad"], [366, 2, 1, "", "gradient"], [624, 2, 1, "", "gradient_descent_update"], [247, 2, 1, "", "greater"], [248, 2, 1, "", "greater_equal"], [375, 2, 1, "", "group_norm"], [309, 2, 1, "", "hamming_window"], [199, 2, 1, "", "handle_soft_device_variable"], [310, 2, 1, "", "hann_window"], [293, 2, 1, "", "hardshrink"], [615, 2, 1, "", "hardswish"], [294, 2, 1, "", "hardtanh"], [623, 2, 1, "", "has_nans"], [372, 2, 1, "", "heaviside"], [370, 2, 1, "", "higher_order_moment"], [371, 2, 1, "", "hinge_embedding_loss"], [381, 2, 1, "", "histogram"], [372, 2, 1, "", "hsplit"], [372, 2, 1, "", "hstack"], [371, 2, 1, "", "huber_loss"], [366, 2, 1, "", "hypot"], [372, 2, 1, "", "i0"], [400, 2, 1, "", "idct"], [617, 2, 1, "", "if_else"], [401, 2, 1, "", "ifft"], [402, 2, 1, "", "ifftn"], [381, 2, 1, "", "igamma"], [619, 2, 1, "", "iinfo"], [249, 2, 1, "", "imag"], [630, 2, 1, "", "index_nest"], [311, 2, 1, "", "indices"], [616, 6, 1, "", "inf"], [619, 2, 1, "", "infer_default_dtype"], [370, 2, 1, "", "initialize_tucker"], [626, 2, 1, "", "inner"], [623, 2, 1, "", "inplace_arrays_supported"], [623, 2, 1, "", "inplace_decrement"], [623, 2, 1, "", "inplace_increment"], [623, 2, 1, "", "inplace_update"], [623, 2, 1, "", "inplace_variables_supported"], [630, 2, 1, "", "insert_into_nest_at_index"], [630, 2, 1, "", "insert_into_nest_at_indices"], [375, 2, 1, "", "instance_norm"], [403, 2, 1, "", "interp"], [404, 2, 1, "", "interpolate"], [626, 2, 1, "", "inv"], [619, 2, 1, "", "invalid_dtype"], [379, 2, 1, "", "invert_permutation"], [623, 2, 1, "", "is_array"], [619, 2, 1, "", "is_bool_dtype"], [619, 2, 1, "", "is_complex_dtype"], [619, 2, 1, "", "is_float_dtype"], [619, 2, 1, "", "is_hashable_dtype"], [619, 2, 1, "", "is_int_dtype"], [623, 2, 1, "", "is_ivy_array"], [623, 2, 1, "", "is_ivy_container"], [623, 2, 1, "", "is_ivy_nested_array"], [380, 2, 1, "", "is_ivy_sparse_array"], [623, 2, 1, "", "is_native_array"], [619, 2, 1, "", "is_native_dtype"], [380, 2, 1, "", "is_native_sparse_array"], [619, 2, 1, "", "is_uint_dtype"], [366, 2, 1, "", "isclose"], [250, 2, 1, "", "isfinite"], [623, 2, 1, "", "isin"], [251, 2, 1, "", "isinf"], [252, 2, 1, "", "isnan"], [253, 2, 1, "", "isreal"], [623, 2, 1, "", "isscalar"], [623, 2, 1, "", "itemsize"], [624, 2, 1, "", "jac"], [368, 2, 1, "", "jvp"], [312, 2, 1, "", "kaiser_bessel_derived_window"], [313, 2, 1, "", "kaiser_window"], [370, 2, 1, "", "khatri_rao"], [371, 2, 1, "", "kl_div"], [370, 2, 1, "", "kron"], [370, 2, 1, "", "kronecker"], [371, 2, 1, "", "l1_loss"], [375, 2, 1, "", "l1_normalize"], [375, 2, 1, "", "l2_normalize"], [624, 2, 1, "", "lamb_update"], [624, 2, 1, "", "lars_update"], [631, 2, 1, "", "layer_norm"], [254, 2, 1, "", "lcm"], [366, 2, 1, "", "ldexp"], [615, 2, 1, "", "leaky_relu"], [366, 2, 1, "", "lerp"], [255, 2, 1, "", "less"], [256, 2, 1, "", "less_equal"], [379, 2, 1, "", "lexsort"], [366, 2, 1, "", "lgamma"], [625, 2, 1, "", "linear"], [618, 2, 1, "", "linspace"], [637, 2, 1, "", "load"], [375, 2, 1, "", "local_response_norm"], [257, 2, 1, "", "log"], [258, 2, 1, "", "log10"], [259, 2, 1, "", "log1p"], [260, 2, 1, "", "log2"], [371, 2, 1, "", "log_poisson_loss"], [615, 2, 1, "", "log_softmax"], [261, 2, 1, "", "logaddexp"], [262, 2, 1, "", "logaddexp2"], [263, 2, 1, "", "logical_and"], [264, 2, 1, "", "logical_not"], [265, 2, 1, "", "logical_or"], [266, 2, 1, "", "logical_xor"], [295, 2, 1, "", "logit"], [296, 2, 1, "", "logsigmoid"], [618, 2, 1, "", "logspace"], [375, 2, 1, "", "lp_normalize"], [625, 2, 1, "", "lstm"], [625, 2, 1, "", "lstm_update"], [626, 2, 1, "", "lu_factor"], [370, 2, 1, "", "make_svd_non_negative"], [629, 2, 1, "", "maml_step"], [630, 2, 1, "", "map"], [630, 2, 1, "", "map_nest_at_index"], [630, 2, 1, "", "map_nest_at_indices"], [623, 2, 1, "", "match_kwargs"], [626, 2, 1, "", "matmul"], [372, 2, 1, "", "matricize"], [370, 2, 1, "", "matrix_exp"], [626, 2, 1, "", "matrix_norm"], [626, 2, 1, "", "matrix_power"], [626, 2, 1, "", "matrix_rank"], [626, 2, 1, "", "matrix_transpose"], [636, 2, 1, "", "max"], [405, 2, 1, "", "max_pool1d"], [406, 2, 1, "", "max_pool2d"], [407, 2, 1, "", "max_pool3d"], [408, 2, 1, "", "max_unpool1d"], [267, 2, 1, "", "maximum"], [636, 2, 1, "", "mean"], [381, 2, 1, "", "median"], [314, 2, 1, "", "mel_weight_matrix"], [618, 2, 1, "", "meshgrid"], [636, 2, 1, "", "min"], [268, 2, 1, "", "minimum"], [615, 2, 1, "", "mish"], [370, 2, 1, "", "mode_dot"], [366, 2, 1, "", "modf"], [372, 2, 1, "", "moveaxis"], [635, 2, 1, "", "msort"], [370, 2, 1, "", "multi_dot"], [625, 2, 1, "", "multi_head_attention"], [630, 2, 1, "", "multi_index_nest"], [370, 2, 1, "", "multi_mode_dot"], [632, 2, 1, "", "multinomial"], [269, 2, 1, "", "multiply"], [623, 2, 1, "", "multiprocessing"], [616, 6, 1, "", "nan"], [270, 2, 1, "", "nan_to_num"], [381, 2, 1, "", "nanmean"], [381, 2, 1, "", "nanmedian"], [381, 2, 1, "", "nanmin"], [381, 2, 1, "", "nanprod"], [366, 2, 1, "", "nansum"], [618, 2, 1, "", "native_array"], [380, 2, 1, "", "native_sparse_array"], [380, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [315, 2, 1, "", "ndenumerate"], [316, 2, 1, "", "ndindex"], [409, 2, 1, "", "nearest_interpolate"], [271, 2, 1, "", "negative"], [630, 2, 1, "", "nested_any"], [630, 2, 1, "", "nested_argwhere"], [630, 2, 1, "", "nested_map"], [630, 2, 1, "", "nested_multi_map"], [616, 6, 1, "", "newaxis"], [366, 2, 1, "", "nextafter"], [625, 2, 1, "", "nms"], [633, 2, 1, "", "nonzero"], [272, 2, 1, "", "not_equal"], [623, 2, 1, "", "num_arrays_in_memory"], [200, 2, 1, "", "num_cpu_cores"], [201, 2, 1, "", "num_gpus"], [202, 2, 1, "", "num_ivy_arrays_on_dev"], [618, 2, 1, "", "one_hot"], [618, 2, 1, "", "ones"], [618, 2, 1, "", "ones_like"], [624, 2, 1, "", "optimizer_update"], [382, 2, 1, "", "optional_get_element"], [626, 2, 1, "", "outer"], [372, 2, 1, "", "pad"], [372, 2, 1, "", "partial_fold"], [372, 2, 1, "", "partial_tensor_to_vec"], [370, 2, 1, "", "partial_tucker"], [372, 2, 1, "", "partial_unfold"], [372, 2, 1, "", "partial_vec_to_tensor"], [203, 2, 1, "", "percent_used_mem_on_dev"], [628, 2, 1, "", "permute_dims"], [616, 6, 1, "", "pi"], [626, 2, 1, "", "pinv"], [376, 2, 1, "", "poisson"], [371, 2, 1, "", "poisson_nll_loss"], [317, 2, 1, "", "polyval"], [410, 2, 1, "", "pool"], [273, 2, 1, "", "positive"], [274, 2, 1, "", "pow"], [297, 2, 1, "", "prelu"], [623, 2, 1, "", "print_all_arrays_in_memory"], [204, 2, 1, "", "print_all_ivy_arrays_on_dev"], [636, 2, 1, "", "prod"], [619, 2, 1, "", "promote_types"], [619, 2, 1, "", "promote_types_of_inputs"], [630, 2, 1, "", "prune_empty"], [630, 2, 1, "", "prune_nest_at_index"], [630, 2, 1, "", "prune_nest_at_indices"], [372, 2, 1, "", "put_along_axis"], [626, 2, 1, "", "qr"], [381, 2, 1, "", "quantile"], [275, 2, 1, "", "rad2deg"], [632, 2, 1, "", "randint"], [318, 2, 1, "", "random_cp"], [632, 2, 1, "", "random_normal"], [319, 2, 1, "", "random_parafac2"], [320, 2, 1, "", "random_tr"], [321, 2, 1, "", "random_tt"], [363, 2, 1, "", "random_tucker"], [632, 2, 1, "", "random_uniform"], [276, 2, 1, "", "real"], [277, 2, 1, "", "reciprocal"], [367, 2, 1, "", "reduce"], [411, 2, 1, "", "reduce_window"], [615, 2, 1, "", "relu"], [298, 2, 1, "", "relu6"], [278, 2, 1, "", "remainder"], [628, 2, 1, "", "repeat"], [629, 2, 1, "", "reptile_step"], [628, 2, 1, "", "reshape"], [619, 2, 1, "", "result_type"], [412, 2, 1, "", "rfft"], [413, 2, 1, "", "rfftn"], [369, 2, 1, "", "rnn"], [625, 2, 1, "", "roi_align"], [628, 2, 1, "", "roll"], [372, 2, 1, "", "rot90"], [279, 2, 1, "", "round"], [637, 2, 1, "", "save"], [625, 2, 1, "", "scaled_dot_product_attention"], [299, 2, 1, "", "scaled_tanh"], [623, 2, 1, "", "scatter_flat"], [623, 2, 1, "", "scatter_nd"], [635, 2, 1, "", "searchsorted"], [632, 2, 1, "", "seed"], [300, 2, 1, "", "selu"], [623, 2, 1, "", "set_array_mode"], [619, 2, 1, "", "set_default_complex_dtype"], [205, 2, 1, "", "set_default_device"], [619, 2, 1, "", "set_default_dtype"], [619, 2, 1, "", "set_default_float_dtype"], [619, 2, 1, "", "set_default_int_dtype"], [619, 2, 1, "", "set_default_uint_dtype"], [623, 2, 1, "", "set_exception_trace_mode"], [623, 2, 1, "", "set_inplace_mode"], [623, 2, 1, "", "set_item"], [623, 2, 1, "", "set_min_base"], [623, 2, 1, "", "set_min_denominator"], [630, 2, 1, "", "set_nest_at_index"], [630, 2, 1, "", "set_nest_at_indices"], [623, 2, 1, "", "set_nestable_mode"], [623, 2, 1, "", "set_precise_mode"], [623, 2, 1, "", "set_queue_timeout"], [623, 2, 1, "", "set_shape_array_mode"], [623, 2, 1, "", "set_show_func_wrapper_trace_mode"], [206, 2, 1, "", "set_soft_device_mode"], [207, 2, 1, "", "set_split_factor"], [623, 2, 1, "", "set_tmp_dir"], [623, 2, 1, "", "shape"], [632, 2, 1, "", "shuffle"], [615, 2, 1, "", "sigmoid"], [280, 2, 1, "", "sign"], [366, 2, 1, "", "signbit"], [301, 2, 1, "", "silu"], [281, 2, 1, "", "sin"], [366, 2, 1, "", "sinc"], [282, 2, 1, "", "sinh"], [369, 2, 1, "", "sliding_window"], [626, 2, 1, "", "slogdet"], [371, 2, 1, "", "smooth_l1_loss"], [371, 2, 1, "", "soft_margin_loss"], [372, 2, 1, "", "soft_thresholding"], [615, 2, 1, "", "softmax"], [615, 2, 1, "", "softplus"], [302, 2, 1, "", "softshrink"], [615, 2, 1, "", "softsign"], [626, 2, 1, "", "solve"], [370, 2, 1, "", "solve_triangular"], [635, 2, 1, "", "sort"], [627, 2, 1, "", "sparse_cross_entropy"], [366, 2, 1, "", "sparsify_tensor"], [628, 2, 1, "", "split"], [208, 2, 1, "", "split_factor"], [209, 2, 1, "", "split_func_call"], [283, 2, 1, "", "sqrt"], [284, 2, 1, "", "square"], [628, 2, 1, "", "squeeze"], [623, 2, 1, "", "stable_divide"], [623, 2, 1, "", "stable_pow"], [628, 2, 1, "", "stack"], [303, 2, 1, "", "stanh"], [636, 2, 1, "", "std"], [369, 2, 1, "", "stft"], [624, 2, 1, "", "stop_gradient"], [623, 2, 1, "", "strides"], [285, 2, 1, "", "subtract"], [636, 2, 1, "", "sum"], [623, 2, 1, "", "supports_inplace_updates"], [626, 2, 1, "", "svd"], [370, 2, 1, "", "svd_flip"], [626, 2, 1, "", "svdvals"], [628, 2, 1, "", "swapaxes"], [372, 2, 1, "", "take"], [372, 2, 1, "", "take_along_axis"], [286, 2, 1, "", "tan"], [287, 2, 1, "", "tanh"], [304, 2, 1, "", "tanhshrink"], [370, 2, 1, "", "tensor_train"], [626, 2, 1, "", "tensordot"], [626, 2, 1, "", "tensorsolve"], [305, 2, 1, "", "threshold"], [306, 2, 1, "", "thresholded_relu"], [628, 2, 1, "", "tile"], [210, 2, 1, "", "to_device"], [618, 2, 1, "", "to_dlpack"], [623, 2, 1, "", "to_ivy_shape"], [623, 2, 1, "", "to_list"], [623, 2, 1, "", "to_native_shape"], [623, 2, 1, "", "to_numpy"], [623, 2, 1, "", "to_scalar"], [372, 2, 1, "", "top_k"], [211, 2, 1, "", "total_mem_on_dev"], [212, 2, 1, "", "tpu_is_available"], [626, 2, 1, "", "trace"], [854, 2, 1, "", "trace_graph"], [855, 2, 1, "", "transpile"], [288, 2, 1, "", "trapz"], [618, 2, 1, "", "tril"], [363, 2, 1, "", "tril_indices"], [363, 2, 1, "", "trilu"], [372, 2, 1, "", "trim_zeros"], [618, 2, 1, "", "triu"], [618, 2, 1, "", "triu_indices"], [289, 2, 1, "", "trunc"], [290, 2, 1, "", "trunc_divide"], [370, 2, 1, "", "truncated_svd"], [623, 2, 1, "", "try_else_none"], [617, 2, 1, "", "try_except"], [370, 2, 1, "", "tt_matrix_to_tensor"], [370, 2, 1, "", "tucker"], [619, 2, 1, "", "type_promote_arrays"], [372, 2, 1, "", "unfold"], [856, 2, 1, "", "unify"], [634, 2, 1, "", "unique_all"], [372, 2, 1, "", "unique_consecutive"], [634, 2, 1, "", "unique_counts"], [634, 2, 1, "", "unique_inverse"], [634, 2, 1, "", "unique_values"], [377, 2, 1, "", "unravel_index"], [623, 2, 1, "", "unset_array_mode"], [619, 2, 1, "", "unset_default_complex_dtype"], [213, 2, 1, "", "unset_default_device"], [184, 2, 1, "", "unset_default_dtype"], [185, 2, 1, "", "unset_default_float_dtype"], [186, 2, 1, "", "unset_default_int_dtype"], [187, 2, 1, "", "unset_default_uint_dtype"], [623, 2, 1, "", "unset_exception_trace_mode"], [623, 2, 1, "", "unset_inplace_mode"], [623, 2, 1, "", "unset_min_base"], [623, 2, 1, "", "unset_min_denominator"], [623, 2, 1, "", "unset_nestable_mode"], [623, 2, 1, "", "unset_precise_mode"], [623, 2, 1, "", "unset_queue_timeout"], [623, 2, 1, "", "unset_shape_array_mode"], [623, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [214, 2, 1, "", "unset_soft_device_mode"], [623, 2, 1, "", "unset_tmp_dir"], [363, 2, 1, "", "unsorted_segment_mean"], [363, 2, 1, "", "unsorted_segment_min"], [363, 2, 1, "", "unsorted_segment_sum"], [628, 2, 1, "", "unstack"], [215, 2, 1, "", "used_mem_on_dev"], [188, 2, 1, "", "valid_dtype"], [624, 2, 1, "", "value_and_grad"], [623, 2, 1, "", "value_is_nan"], [626, 2, 1, "", "vander"], [636, 2, 1, "", "var"], [626, 2, 1, "", "vecdot"], [626, 2, 1, "", "vector_norm"], [626, 2, 1, "", "vector_to_skew_symmetric_matrix"], [368, 2, 1, "", "vjp"], [623, 2, 1, "", "vmap"], [363, 2, 1, "", "vorbis_window"], [372, 2, 1, "", "vsplit"], [372, 2, 1, "", "vstack"], [633, 2, 1, "", "where"], [617, 2, 1, "", "while_loop"], [366, 2, 1, "", "xlogy"], [628, 2, 1, "", "zero_pad"], [618, 2, 1, "", "zeros"], [618, 2, 1, "", "zeros_like"], [366, 2, 1, "", "zeta"]], "ivy.Container": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [604, 0, 1, "", "adam_step"], [605, 0, 1, "", "adam_update"], [383, 0, 1, "", "adaptive_avg_pool1d"], [384, 0, 1, "", "adaptive_avg_pool2d"], [385, 0, 1, "", "adaptive_max_pool2d"], [219, 0, 1, "", "add"], [417, 0, 1, "", "adjoint"], [757, 0, 1, "", "all"], [524, 0, 1, "", "all_equal"], [329, 0, 1, "", "allclose"], [330, 0, 1, "", "amax"], [331, 0, 1, "", "amin"], [220, 0, 1, "", "angle"], [758, 0, 1, "", "any"], [734, 0, 1, "", "argmax"], [735, 0, 1, "", "argmin"], [743, 0, 1, "", "argsort"], [736, 0, 1, "", "argwhere"], [527, 0, 1, "", "array_equal"], [451, 0, 1, "", "as_strided"], [124, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [528, 0, 1, "", "assert_supports_inplace"], [452, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [453, 0, 1, "", "atleast_1d"], [454, 0, 1, "", "atleast_2d"], [455, 0, 1, "", "atleast_3d"], [387, 0, 1, "", "avg_pool1d"], [388, 0, 1, "", "avg_pool2d"], [389, 0, 1, "", "avg_pool3d"], [491, 0, 1, "", "batch_norm"], [418, 0, 1, "", "batched_outer"], [498, 0, 1, "", "bernoulli"], [499, 0, 1, "", "beta"], [332, 0, 1, "", "binarizer"], [686, 0, 1, "", "binary_cross_entropy"], [510, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [307, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [456, 0, 1, "", "broadcast_shapes"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [291, 0, 1, "", "celu"], [656, 0, 1, "", "cholesky"], [689, 0, 1, "", "clip"], [530, 0, 1, "", "clip_matrix_norm"], [531, 0, 1, "", "clip_vector_norm"], [459, 0, 1, "", "column_stack"], [690, 0, 1, "", "concat"], [460, 0, 1, "", "concat_from_sequence"], [419, 0, 1, "", "cond"], [333, 0, 1, "", "conj"], [691, 0, 1, "", "constant_pad"], [639, 0, 1, "", "conv1d"], [640, 0, 1, "", "conv1d_transpose"], [641, 0, 1, "", "conv2d"], [642, 0, 1, "", "conv2d_transpose"], [643, 0, 1, "", "conv3d"], [644, 0, 1, "", "conv3d_transpose"], [125, 0, 1, "", "copy_array"], [334, 0, 1, "", "copysign"], [511, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [335, 0, 1, "", "count_nonzero"], [512, 0, 1, "", "cov"], [657, 0, 1, "", "cross"], [687, 0, 1, "", "cross_entropy"], [513, 0, 1, "", "cummax"], [514, 0, 1, "", "cummin"], [747, 0, 1, "", "cumprod"], [748, 0, 1, "", "cumsum"], [390, 0, 1, "", "dct"], [235, 0, 1, "", "deg2rad"], [647, 0, 1, "", "depthwise_conv2d"], [658, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [391, 0, 1, "", "dft"], [659, 0, 1, "", "diag"], [420, 0, 1, "", "diagflat"], [660, 0, 1, "", "diagonal"], [336, 0, 1, "", "diff"], [337, 0, 1, "", "digamma"], [500, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [421, 0, 1, "", "dot"], [648, 0, 1, "", "dropout"], [392, 0, 1, "", "dropout1d"], [393, 0, 1, "", "dropout2d"], [394, 0, 1, "", "dropout3d"], [461, 0, 1, "", "dsplit"], [462, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [422, 0, 1, "", "eig"], [662, 0, 1, "", "eigh"], [423, 0, 1, "", "eigh_tridiagonal"], [424, 0, 1, "", "eigvals"], [663, 0, 1, "", "eigvalsh"], [535, 0, 1, "", "einops_rearrange"], [536, 0, 1, "", "einops_reduce"], [537, 0, 1, "", "einops_repeat"], [749, 0, 1, "", "einsum"], [292, 0, 1, "", "elu"], [395, 0, 1, "", "embedding"], [127, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [338, 0, 1, "", "erfc"], [538, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [463, 0, 1, "", "expand"], [692, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [308, 0, 1, "", "eye_like"], [396, 0, 1, "", "fft"], [464, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [339, 0, 1, "", "fix"], [465, 0, 1, "", "flatten"], [693, 0, 1, "", "flip"], [466, 0, 1, "", "fliplr"], [467, 0, 1, "", "flipud"], [340, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [341, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [468, 0, 1, "", "fold"], [539, 0, 1, "", "fourier_encode"], [342, 0, 1, "", "frexp"], [129, 0, 1, "", "from_dlpack"], [130, 0, 1, "", "frombuffer"], [132, 0, 1, "", "full_like"], [501, 0, 1, "", "gamma"], [542, 0, 1, "", "gather"], [543, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [106, 0, 1, "", "gelu"], [425, 0, 1, "", "general_inner_product"], [546, 0, 1, "", "get_num_dims"], [343, 0, 1, "", "gradient"], [608, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [492, 0, 1, "", "group_norm"], [309, 0, 1, "", "hamming_window"], [310, 0, 1, "", "hann_window"], [293, 0, 1, "", "hardshrink"], [107, 0, 1, "", "hardswish"], [294, 0, 1, "", "hardtanh"], [548, 0, 1, "", "has_nans"], [469, 0, 1, "", "heaviside"], [426, 0, 1, "", "higher_order_moment"], [443, 0, 1, "", "hinge_embedding_loss"], [515, 0, 1, "", "histogram"], [470, 0, 1, "", "hsplit"], [471, 0, 1, "", "hstack"], [444, 0, 1, "", "huber_loss"], [344, 0, 1, "", "hypot"], [472, 0, 1, "", "i0"], [400, 0, 1, "", "idct"], [401, 0, 1, "", "ifft"], [402, 0, 1, "", "ifftn"], [516, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [427, 0, 1, "", "initialize_tucker"], [664, 0, 1, "", "inner"], [550, 0, 1, "", "inplace_decrement"], [551, 0, 1, "", "inplace_increment"], [552, 0, 1, "", "inplace_update"], [493, 0, 1, "", "instance_norm"], [404, 0, 1, "", "interpolate"], [665, 0, 1, "", "inv"], [504, 0, 1, "", "invert_permutation"], [554, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [168, 0, 1, "", "is_complex_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [555, 0, 1, "", "is_ivy_array"], [558, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [345, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [559, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [561, 0, 1, "", "itemsize"], [312, 0, 1, "", "kaiser_bessel_derived_window"], [313, 0, 1, "", "kaiser_window"], [445, 0, 1, "", "kl_div"], [429, 0, 1, "", "kron"], [446, 0, 1, "", "l1_loss"], [494, 0, 1, "", "l1_normalize"], [495, 0, 1, "", "l2_normalize"], [610, 0, 1, "", "lamb_update"], [611, 0, 1, "", "lars_update"], [727, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [346, 0, 1, "", "ldexp"], [108, 0, 1, "", "leaky_relu"], [347, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [505, 0, 1, "", "lexsort"], [348, 0, 1, "", "lgamma"], [649, 0, 1, "", "linear"], [133, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [447, 0, 1, "", "log_poisson_loss"], [109, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [134, 0, 1, "", "logspace"], [497, 0, 1, "", "lp_normalize"], [651, 0, 1, "", "lstm_update"], [431, 0, 1, "", "make_svd_non_negative"], [667, 0, 1, "", "matmul"], [473, 0, 1, "", "matricize"], [432, 0, 1, "", "matrix_exp"], [668, 0, 1, "", "matrix_norm"], [669, 0, 1, "", "matrix_power"], [670, 0, 1, "", "matrix_rank"], [671, 0, 1, "", "matrix_transpose"], [750, 0, 1, "", "max"], [405, 0, 1, "", "max_pool1d"], [406, 0, 1, "", "max_pool2d"], [407, 0, 1, "", "max_pool3d"], [408, 0, 1, "", "max_unpool1d"], [267, 0, 1, "", "maximum"], [751, 0, 1, "", "mean"], [517, 0, 1, "", "median"], [314, 0, 1, "", "mel_weight_matrix"], [135, 0, 1, "", "meshgrid"], [752, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [110, 0, 1, "", "mish"], [433, 0, 1, "", "mode_dot"], [349, 0, 1, "", "modf"], [474, 0, 1, "", "moveaxis"], [744, 0, 1, "", "msort"], [434, 0, 1, "", "multi_dot"], [652, 0, 1, "", "multi_head_attention"], [435, 0, 1, "", "multi_mode_dot"], [728, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [518, 0, 1, "", "nanmean"], [519, 0, 1, "", "nanmedian"], [520, 0, 1, "", "nanmin"], [521, 0, 1, "", "nanprod"], [350, 0, 1, "", "nansum"], [136, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [351, 0, 1, "", "nextafter"], [737, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [137, 0, 1, "", "one_hot"], [139, 0, 1, "", "ones_like"], [612, 0, 1, "", "optimizer_update"], [523, 0, 1, "", "optional_get_element"], [672, 0, 1, "", "outer"], [475, 0, 1, "", "pad"], [476, 0, 1, "", "partial_fold"], [477, 0, 1, "", "partial_tensor_to_vec"], [436, 0, 1, "", "partial_tucker"], [478, 0, 1, "", "partial_unfold"], [479, 0, 1, "", "partial_vec_to_tensor"], [694, 0, 1, "", "permute_dims"], [673, 0, 1, "", "pinv"], [502, 0, 1, "", "poisson"], [448, 0, 1, "", "poisson_nll_loss"], [317, 0, 1, "", "polyval"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [753, 0, 1, "", "prod"], [480, 0, 1, "", "put_along_axis"], [674, 0, 1, "", "qr"], [522, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [729, 0, 1, "", "randint"], [730, 0, 1, "", "random_normal"], [731, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [357, 0, 1, "", "reduce"], [411, 0, 1, "", "reduce_window"], [111, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [695, 0, 1, "", "repeat"], [696, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [412, 0, 1, "", "rfft"], [413, 0, 1, "", "rfftn"], [697, 0, 1, "", "roll"], [481, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [655, 0, 1, "", "scaled_dot_product_attention"], [299, 0, 1, "", "scaled_tanh"], [566, 0, 1, "", "scatter_flat"], [567, 0, 1, "", "scatter_nd"], [745, 0, 1, "", "searchsorted"], [300, 0, 1, "", "selu"], [733, 0, 1, "", "shuffle"], [112, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [352, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [353, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [415, 0, 1, "", "sliding_window"], [675, 0, 1, "", "slogdet"], [449, 0, 1, "", "smooth_l1_loss"], [450, 0, 1, "", "soft_margin_loss"], [482, 0, 1, "", "soft_thresholding"], [113, 0, 1, "", "softmax"], [114, 0, 1, "", "softplus"], [302, 0, 1, "", "softshrink"], [676, 0, 1, "", "solve"], [746, 0, 1, "", "sort"], [688, 0, 1, "", "sparse_cross_entropy"], [354, 0, 1, "", "sparsify_tensor"], [698, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [699, 0, 1, "", "squeeze"], [581, 0, 1, "", "stable_divide"], [582, 0, 1, "", "stable_pow"], [700, 0, 1, "", "stack"], [754, 0, 1, "", "std"], [416, 0, 1, "", "stft"], [613, 0, 1, "", "stop_gradient"], [583, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [755, 0, 1, "", "sum"], [584, 0, 1, "", "supports_inplace_updates"], [677, 0, 1, "", "svd"], [438, 0, 1, "", "svd_flip"], [678, 0, 1, "", "svdvals"], [701, 0, 1, "", "swapaxes"], [483, 0, 1, "", "take"], [484, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [304, 0, 1, "", "tanhshrink"], [439, 0, 1, "", "tensor_train"], [679, 0, 1, "", "tensordot"], [680, 0, 1, "", "tensorsolve"], [305, 0, 1, "", "threshold"], [306, 0, 1, "", "thresholded_relu"], [702, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [586, 0, 1, "", "to_list"], [588, 0, 1, "", "to_numpy"], [589, 0, 1, "", "to_scalar"], [485, 0, 1, "", "top_k"], [681, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [323, 0, 1, "", "tril_indices"], [324, 0, 1, "", "trilu"], [486, 0, 1, "", "trim_zeros"], [142, 0, 1, "", "triu"], [143, 0, 1, "", "triu_indices"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [440, 0, 1, "", "truncated_svd"], [441, 0, 1, "", "tt_matrix_to_tensor"], [442, 0, 1, "", "tucker"], [487, 0, 1, "", "unfold"], [739, 0, 1, "", "unique_all"], [488, 0, 1, "", "unique_consecutive"], [740, 0, 1, "", "unique_counts"], [741, 0, 1, "", "unique_inverse"], [742, 0, 1, "", "unique_values"], [503, 0, 1, "", "unravel_index"], [325, 0, 1, "", "unsorted_segment_mean"], [326, 0, 1, "", "unsorted_segment_min"], [327, 0, 1, "", "unsorted_segment_sum"], [703, 0, 1, "", "unstack"], [602, 0, 1, "", "value_is_nan"], [682, 0, 1, "", "vander"], [756, 0, 1, "", "var"], [683, 0, 1, "", "vecdot"], [684, 0, 1, "", "vector_norm"], [685, 0, 1, "", "vector_to_skew_symmetric_matrix"], [328, 0, 1, "", "vorbis_window"], [489, 0, 1, "", "vsplit"], [490, 0, 1, "", "vstack"], [738, 0, 1, "", "where"], [355, 0, 1, "", "xlogy"], [704, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [356, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[47, 3, 0, "-", "activations"], [98, 3, 0, "-", "array"], [48, 3, 0, "-", "conversions"], [49, 3, 0, "-", "creation"], [50, 3, 0, "-", "data_type"], [51, 3, 0, "-", "device"], [52, 3, 0, "-", "elementwise"], [53, 3, 0, "-", "experimental"], [54, 3, 0, "-", "general"], [55, 3, 0, "-", "gradients"], [56, 3, 0, "-", "image"], [57, 3, 0, "-", "layers"], [58, 3, 0, "-", "linear_algebra"], [59, 3, 0, "-", "losses"], [60, 3, 0, "-", "manipulation"], [61, 3, 0, "-", "norms"], [62, 3, 0, "-", "random"], [63, 3, 0, "-", "searching"], [64, 3, 0, "-", "set"], [65, 3, 0, "-", "sorting"], [66, 3, 0, "-", "statistical"], [67, 3, 0, "-", "utility"], [68, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[47, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "gelu"], [47, 0, 1, "", "hardswish"], [47, 0, 1, "", "leaky_relu"], [47, 0, 1, "", "log_softmax"], [47, 0, 1, "", "mish"], [47, 0, 1, "", "relu"], [47, 0, 1, "", "sigmoid"], [47, 0, 1, "", "softmax"], [47, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[98, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[98, 5, 1, "", "T"], [98, 0, 1, "", "__abs__"], [98, 0, 1, "", "__add__"], [98, 0, 1, "", "__eq__"], [98, 0, 1, "", "__ge__"], [98, 0, 1, "", "__gt__"], [98, 0, 1, "", "__init__"], [98, 0, 1, "", "__le__"], [98, 0, 1, "", "__lt__"], [98, 0, 1, "", "__ne__"], [98, 0, 1, "", "__pow__"], [98, 0, 1, "", "__radd__"], [98, 0, 1, "", "__rrshift__"], [98, 0, 1, "", "__rshift__"], [98, 0, 1, "", "__rsub__"], [98, 0, 1, "", "__sub__"], [98, 0, 1, "", "__truediv__"], [98, 0, 1, "", "__xor__"], [98, 5, 1, "", "backend"], [98, 5, 1, "", "base"], [98, 5, 1, "", "data"], [98, 5, 1, "", "device"], [98, 5, 1, "", "dtype"], [98, 5, 1, "", "dynamic_backend"], [98, 5, 1, "", "imag"], [98, 5, 1, "", "itemsize"], [98, 5, 1, "", "mT"], [98, 5, 1, "", "ndim"], [98, 5, 1, "", "real"], [98, 5, 1, "", "shape"], [98, 5, 1, "", "size"], [98, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[48, 2, 1, "", "_array_to_new_backend"], [48, 2, 1, "", "_to_ivy"], [48, 2, 1, "", "_to_native"], [48, 2, 1, "", "_to_new_backend"], [48, 2, 1, "", "args_to_ivy"], [48, 2, 1, "", "args_to_native"], [48, 2, 1, "", "args_to_new_backend"], [48, 2, 1, "", "to_ivy"], [48, 2, 1, "", "to_native"], [48, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[49, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "asarray"], [49, 0, 1, "", "copy_array"], [49, 0, 1, "", "empty_like"], [49, 0, 1, "", "from_dlpack"], [49, 0, 1, "", "full_like"], [49, 0, 1, "", "linspace"], [49, 0, 1, "", "logspace"], [49, 0, 1, "", "meshgrid"], [49, 0, 1, "", "native_array"], [49, 0, 1, "", "one_hot"], [49, 0, 1, "", "ones_like"], [49, 0, 1, "", "tril"], [49, 0, 1, "", "triu"], [49, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[50, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "astype"], [50, 0, 1, "", "broadcast_arrays"], [50, 0, 1, "", "broadcast_to"], [50, 0, 1, "", "can_cast"], [50, 0, 1, "", "dtype"], [50, 0, 1, "", "finfo"], [50, 0, 1, "", "iinfo"], [50, 0, 1, "", "is_bool_dtype"], [50, 0, 1, "", "is_float_dtype"], [50, 0, 1, "", "is_int_dtype"], [50, 0, 1, "", "is_uint_dtype"], [50, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[51, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "dev"], [51, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[52, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "abs"], [52, 0, 1, "", "acos"], [52, 0, 1, "", "acosh"], [52, 0, 1, "", "add"], [52, 0, 1, "", "angle"], [52, 0, 1, "", "asin"], [52, 0, 1, "", "asinh"], [52, 0, 1, "", "atan"], [52, 0, 1, "", "atan2"], [52, 0, 1, "", "atanh"], [52, 0, 1, "", "bitwise_and"], [52, 0, 1, "", "bitwise_invert"], [52, 0, 1, "", "bitwise_left_shift"], [52, 0, 1, "", "bitwise_or"], [52, 0, 1, "", "bitwise_right_shift"], [52, 0, 1, "", "bitwise_xor"], [52, 0, 1, "", "ceil"], [52, 0, 1, "", "cos"], [52, 0, 1, "", "cosh"], [52, 0, 1, "", "deg2rad"], [52, 0, 1, "", "divide"], [52, 0, 1, "", "equal"], [52, 0, 1, "", "erf"], [52, 0, 1, "", "exp"], [52, 0, 1, "", "exp2"], [52, 0, 1, "", "expm1"], [52, 0, 1, "", "floor"], [52, 0, 1, "", "floor_divide"], [52, 0, 1, "", "fmin"], [52, 0, 1, "", "gcd"], [52, 0, 1, "", "greater"], [52, 0, 1, "", "greater_equal"], [52, 0, 1, "", "isfinite"], [52, 0, 1, "", "isinf"], [52, 0, 1, "", "isnan"], [52, 0, 1, "", "isreal"], [52, 0, 1, "", "lcm"], [52, 0, 1, "", "less"], [52, 0, 1, "", "less_equal"], [52, 0, 1, "", "log"], [52, 0, 1, "", "log10"], [52, 0, 1, "", "log1p"], [52, 0, 1, "", "log2"], [52, 0, 1, "", "logaddexp"], [52, 0, 1, "", "logaddexp2"], [52, 0, 1, "", "logical_and"], [52, 0, 1, "", "logical_not"], [52, 0, 1, "", "logical_or"], [52, 0, 1, "", "logical_xor"], [52, 0, 1, "", "maximum"], [52, 0, 1, "", "minimum"], [52, 0, 1, "", "multiply"], [52, 0, 1, "", "nan_to_num"], [52, 0, 1, "", "negative"], [52, 0, 1, "", "not_equal"], [52, 0, 1, "", "positive"], [52, 0, 1, "", "pow"], [52, 0, 1, "", "rad2deg"], [52, 0, 1, "", "real"], [52, 0, 1, "", "reciprocal"], [52, 0, 1, "", "remainder"], [52, 0, 1, "", "round"], [52, 0, 1, "", "sign"], [52, 0, 1, "", "sin"], [52, 0, 1, "", "sinh"], [52, 0, 1, "", "sqrt"], [52, 0, 1, "", "square"], [52, 0, 1, "", "subtract"], [52, 0, 1, "", "tan"], [52, 0, 1, "", "tanh"], [52, 0, 1, "", "trapz"], [52, 0, 1, "", "trunc"], [52, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[53, 3, 0, "-", "activations"], [53, 3, 0, "-", "conversions"], [53, 3, 0, "-", "creation"], [53, 3, 0, "-", "data_type"], [53, 3, 0, "-", "device"], [53, 3, 0, "-", "elementwise"], [53, 3, 0, "-", "general"], [53, 3, 0, "-", "gradients"], [53, 3, 0, "-", "image"], [53, 3, 0, "-", "layers"], [53, 3, 0, "-", "linear_algebra"], [53, 3, 0, "-", "losses"], [53, 3, 0, "-", "manipulation"], [53, 3, 0, "-", "norms"], [53, 3, 0, "-", "random"], [53, 3, 0, "-", "searching"], [53, 3, 0, "-", "set"], [53, 3, 0, "-", "sorting"], [53, 3, 0, "-", "statistical"], [53, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[53, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "celu"], [53, 0, 1, "", "elu"], [53, 0, 1, "", "hardshrink"], [53, 0, 1, "", "hardtanh"], [53, 0, 1, "", "logit"], [53, 0, 1, "", "logsigmoid"], [53, 0, 1, "", "prelu"], [53, 0, 1, "", "relu6"], [53, 0, 1, "", "scaled_tanh"], [53, 0, 1, "", "selu"], [53, 0, 1, "", "silu"], [53, 0, 1, "", "softshrink"], [53, 0, 1, "", "tanhshrink"], [53, 0, 1, "", "threshold"], [53, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[53, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[53, 1, 1, "", "_ArrayWithCreationExperimental"], [53, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "blackman_window"], [53, 0, 1, "", "eye_like"], [53, 0, 1, "", "mel_weight_matrix"], [53, 0, 1, "", "trilu"], [53, 0, 1, "", "unsorted_segment_mean"], [53, 0, 1, "", "unsorted_segment_min"], [53, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[53, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[53, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[53, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "allclose"], [53, 0, 1, "", "amax"], [53, 0, 1, "", "amin"], [53, 0, 1, "", "binarizer"], [53, 0, 1, "", "conj"], [53, 0, 1, "", "copysign"], [53, 0, 1, "", "count_nonzero"], [53, 0, 1, "", "diff"], [53, 0, 1, "", "digamma"], [53, 0, 1, "", "erfc"], [53, 0, 1, "", "fix"], [53, 0, 1, "", "float_power"], [53, 0, 1, "", "fmax"], [53, 0, 1, "", "fmod"], [53, 0, 1, "", "frexp"], [53, 0, 1, "", "gradient"], [53, 0, 1, "", "hypot"], [53, 0, 1, "", "isclose"], [53, 0, 1, "", "ldexp"], [53, 0, 1, "", "lerp"], [53, 0, 1, "", "lgamma"], [53, 0, 1, "", "modf"], [53, 0, 1, "", "nansum"], [53, 0, 1, "", "nextafter"], [53, 0, 1, "", "signbit"], [53, 0, 1, "", "sinc"], [53, 0, 1, "", "sparsify_tensor"], [53, 0, 1, "", "xlogy"], [53, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[53, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[53, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[53, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[53, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adaptive_avg_pool1d"], [53, 0, 1, "", "adaptive_avg_pool2d"], [53, 0, 1, "", "adaptive_max_pool2d"], [53, 0, 1, "", "avg_pool1d"], [53, 0, 1, "", "avg_pool2d"], [53, 0, 1, "", "avg_pool3d"], [53, 0, 1, "", "dct"], [53, 0, 1, "", "dft"], [53, 0, 1, "", "embedding"], [53, 0, 1, "", "fft"], [53, 0, 1, "", "fft2"], [53, 0, 1, "", "idct"], [53, 0, 1, "", "ifft"], [53, 0, 1, "", "ifftn"], [53, 0, 1, "", "interpolate"], [53, 0, 1, "", "max_pool1d"], [53, 0, 1, "", "max_pool2d"], [53, 0, 1, "", "max_pool3d"], [53, 0, 1, "", "max_unpool1d"], [53, 0, 1, "", "reduce_window"], [53, 0, 1, "", "rfft"], [53, 0, 1, "", "rfftn"], [53, 0, 1, "", "sliding_window"], [53, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[53, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adjoint"], [53, 0, 1, "", "batched_outer"], [53, 0, 1, "", "cond"], [53, 0, 1, "", "diagflat"], [53, 0, 1, "", "dot"], [53, 0, 1, "", "eig"], [53, 0, 1, "", "eigh_tridiagonal"], [53, 0, 1, "", "eigvals"], [53, 0, 1, "", "general_inner_product"], [53, 0, 1, "", "higher_order_moment"], [53, 0, 1, "", "initialize_tucker"], [53, 0, 1, "", "kron"], [53, 0, 1, "", "make_svd_non_negative"], [53, 0, 1, "", "matrix_exp"], [53, 0, 1, "", "mode_dot"], [53, 0, 1, "", "multi_dot"], [53, 0, 1, "", "multi_mode_dot"], [53, 0, 1, "", "partial_tucker"], [53, 0, 1, "", "svd_flip"], [53, 0, 1, "", "tensor_train"], [53, 0, 1, "", "truncated_svd"], [53, 0, 1, "", "tt_matrix_to_tensor"], [53, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[53, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "hinge_embedding_loss"], [53, 0, 1, "", "huber_loss"], [53, 0, 1, "", "kl_div"], [53, 0, 1, "", "l1_loss"], [53, 0, 1, "", "log_poisson_loss"], [53, 0, 1, "", "poisson_nll_loss"], [53, 0, 1, "", "smooth_l1_loss"], [53, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[53, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "as_strided"], [53, 0, 1, "", "associative_scan"], [53, 0, 1, "", "atleast_1d"], [53, 0, 1, "", "atleast_2d"], [53, 0, 1, "", "atleast_3d"], [53, 0, 1, "", "column_stack"], [53, 0, 1, "", "concat_from_sequence"], [53, 0, 1, "", "dsplit"], [53, 0, 1, "", "dstack"], [53, 0, 1, "", "expand"], [53, 0, 1, "", "fill_diagonal"], [53, 0, 1, "", "flatten"], [53, 0, 1, "", "fliplr"], [53, 0, 1, "", "flipud"], [53, 0, 1, "", "fold"], [53, 0, 1, "", "heaviside"], [53, 0, 1, "", "hsplit"], [53, 0, 1, "", "hstack"], [53, 0, 1, "", "i0"], [53, 0, 1, "", "matricize"], [53, 0, 1, "", "moveaxis"], [53, 0, 1, "", "pad"], [53, 0, 1, "", "partial_fold"], [53, 0, 1, "", "partial_tensor_to_vec"], [53, 0, 1, "", "partial_unfold"], [53, 0, 1, "", "partial_vec_to_tensor"], [53, 0, 1, "", "put_along_axis"], [53, 0, 1, "", "rot90"], [53, 0, 1, "", "soft_thresholding"], [53, 0, 1, "", "take"], [53, 0, 1, "", "take_along_axis"], [53, 0, 1, "", "top_k"], [53, 0, 1, "", "trim_zeros"], [53, 0, 1, "", "unfold"], [53, 0, 1, "", "unique_consecutive"], [53, 0, 1, "", "vsplit"], [53, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[53, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "batch_norm"], [53, 0, 1, "", "group_norm"], [53, 0, 1, "", "instance_norm"], [53, 0, 1, "", "l1_normalize"], [53, 0, 1, "", "l2_normalize"], [53, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[53, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "bernoulli"], [53, 0, 1, "", "beta"], [53, 0, 1, "", "dirichlet"], [53, 0, 1, "", "gamma"], [53, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[53, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[53, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[53, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[53, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "bincount"], [53, 0, 1, "", "corrcoef"], [53, 0, 1, "", "cov"], [53, 0, 1, "", "cummax"], [53, 0, 1, "", "cummin"], [53, 0, 1, "", "histogram"], [53, 0, 1, "", "igamma"], [53, 0, 1, "", "median"], [53, 0, 1, "", "nanmean"], [53, 0, 1, "", "nanmedian"], [53, 0, 1, "", "nanmin"], [53, 0, 1, "", "nanprod"], [53, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[53, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[54, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "all_equal"], [54, 0, 1, "", "array_equal"], [54, 0, 1, "", "assert_supports_inplace"], [54, 0, 1, "", "clip_matrix_norm"], [54, 0, 1, "", "clip_vector_norm"], [54, 0, 1, "", "default"], [54, 0, 1, "", "einops_rearrange"], [54, 0, 1, "", "einops_reduce"], [54, 0, 1, "", "einops_repeat"], [54, 0, 1, "", "exists"], [54, 0, 1, "", "fourier_encode"], [54, 0, 1, "", "gather"], [54, 0, 1, "", "gather_nd"], [54, 0, 1, "", "get_num_dims"], [54, 0, 1, "", "has_nans"], [54, 0, 1, "", "inplace_decrement"], [54, 0, 1, "", "inplace_increment"], [54, 0, 1, "", "inplace_update"], [54, 0, 1, "", "is_array"], [54, 0, 1, "", "is_ivy_array"], [54, 0, 1, "", "is_ivy_container"], [54, 0, 1, "", "is_native_array"], [54, 0, 1, "", "isin"], [54, 0, 1, "", "scatter_flat"], [54, 0, 1, "", "scatter_nd"], [54, 0, 1, "", "stable_divide"], [54, 0, 1, "", "stable_pow"], [54, 0, 1, "", "supports_inplace_updates"], [54, 0, 1, "", "to_file"], [54, 0, 1, "", "to_list"], [54, 0, 1, "", "to_numpy"], [54, 0, 1, "", "to_scalar"], [54, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[55, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "adam_step"], [55, 0, 1, "", "adam_update"], [55, 0, 1, "", "gradient_descent_update"], [55, 0, 1, "", "lamb_update"], [55, 0, 1, "", "lars_update"], [55, 0, 1, "", "optimizer_update"], [55, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[56, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[57, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "conv1d"], [57, 0, 1, "", "conv1d_transpose"], [57, 0, 1, "", "conv2d"], [57, 0, 1, "", "conv2d_transpose"], [57, 0, 1, "", "conv3d"], [57, 0, 1, "", "conv3d_transpose"], [57, 0, 1, "", "depthwise_conv2d"], [57, 0, 1, "", "dropout"], [57, 0, 1, "", "dropout1d"], [57, 0, 1, "", "dropout2d"], [57, 0, 1, "", "dropout3d"], [57, 0, 1, "", "linear"], [57, 0, 1, "", "lstm_update"], [57, 0, 1, "", "multi_head_attention"], [57, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[58, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "cholesky"], [58, 0, 1, "", "cross"], [58, 0, 1, "", "det"], [58, 0, 1, "", "diag"], [58, 0, 1, "", "diagonal"], [58, 0, 1, "", "eig"], [58, 0, 1, "", "eigh"], [58, 0, 1, "", "eigvalsh"], [58, 0, 1, "", "inner"], [58, 0, 1, "", "inv"], [58, 0, 1, "", "matmul"], [58, 0, 1, "", "matrix_norm"], [58, 0, 1, "", "matrix_power"], [58, 0, 1, "", "matrix_rank"], [58, 0, 1, "", "matrix_transpose"], [58, 0, 1, "", "outer"], [58, 0, 1, "", "pinv"], [58, 0, 1, "", "qr"], [58, 0, 1, "", "slogdet"], [58, 0, 1, "", "solve"], [58, 0, 1, "", "svd"], [58, 0, 1, "", "svdvals"], [58, 0, 1, "", "tensordot"], [58, 0, 1, "", "tensorsolve"], [58, 0, 1, "", "trace"], [58, 0, 1, "", "vander"], [58, 0, 1, "", "vecdot"], [58, 0, 1, "", "vector_norm"], [58, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[59, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "binary_cross_entropy"], [59, 0, 1, "", "cross_entropy"], [59, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[60, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "clip"], [60, 0, 1, "", "concat"], [60, 0, 1, "", "constant_pad"], [60, 0, 1, "", "expand_dims"], [60, 0, 1, "", "flip"], [60, 0, 1, "", "permute_dims"], [60, 0, 1, "", "repeat"], [60, 0, 1, "", "reshape"], [60, 0, 1, "", "roll"], [60, 0, 1, "", "split"], [60, 0, 1, "", "squeeze"], [60, 0, 1, "", "stack"], [60, 0, 1, "", "swapaxes"], [60, 0, 1, "", "tile"], [60, 0, 1, "", "unstack"], [60, 0, 1, "", "view"], [60, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[61, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[62, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "multinomial"], [62, 0, 1, "", "randint"], [62, 0, 1, "", "random_normal"], [62, 0, 1, "", "random_uniform"], [62, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[63, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "argmax"], [63, 0, 1, "", "argmin"], [63, 0, 1, "", "argwhere"], [63, 0, 1, "", "nonzero"], [63, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[64, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "unique_all"], [64, 0, 1, "", "unique_counts"], [64, 0, 1, "", "unique_inverse"], [64, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[65, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "argsort"], [65, 0, 1, "", "msort"], [65, 0, 1, "", "searchsorted"], [65, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[66, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "cumprod"], [66, 0, 1, "", "cumsum"], [66, 0, 1, "", "einsum"], [66, 0, 1, "", "max"], [66, 0, 1, "", "mean"], [66, 0, 1, "", "min"], [66, 0, 1, "", "prod"], [66, 0, 1, "", "std"], [66, 0, 1, "", "sum"], [66, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[67, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "all"], [67, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[68, 2, 1, "", "_wrap_function"], [68, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[69, 3, 0, "-", "activations"], [70, 3, 0, "-", "base"], [99, 3, 0, "-", "container"], [71, 3, 0, "-", "conversions"], [72, 3, 0, "-", "creation"], [73, 3, 0, "-", "data_type"], [74, 3, 0, "-", "device"], [75, 3, 0, "-", "elementwise"], [76, 3, 0, "-", "experimental"], [77, 3, 0, "-", "general"], [78, 3, 0, "-", "gradients"], [79, 3, 0, "-", "image"], [80, 3, 0, "-", "layers"], [81, 3, 0, "-", "linear_algebra"], [82, 3, 0, "-", "losses"], [83, 3, 0, "-", "manipulation"], [84, 3, 0, "-", "norms"], [85, 3, 0, "-", "random"], [86, 3, 0, "-", "searching"], [87, 3, 0, "-", "set"], [88, 3, 0, "-", "sorting"], [89, 3, 0, "-", "statistical"], [90, 3, 0, "-", "utility"], [91, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[69, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_static_gelu"], [69, 0, 1, "", "_static_hardswish"], [69, 0, 1, "", "_static_leaky_relu"], [69, 0, 1, "", "_static_log_softmax"], [69, 0, 1, "", "_static_mish"], [69, 0, 1, "", "_static_relu"], [69, 0, 1, "", "_static_sigmoid"], [69, 0, 1, "", "_static_softmax"], [69, 0, 1, "", "_static_softplus"], [69, 0, 1, "", "gelu"], [69, 0, 1, "", "hardswish"], [69, 0, 1, "", "leaky_relu"], [69, 0, 1, "", "log_softmax"], [69, 0, 1, "", "mish"], [69, 0, 1, "", "relu"], [69, 0, 1, "", "sigmoid"], [69, 0, 1, "", "softmax"], [69, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[70, 1, 1, "", "ContainerBase"], [70, 2, 1, "", "_is_jsonable"], [70, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[70, 0, 1, "", "__getitem__"], [70, 0, 1, "", "__init__"], [70, 0, 1, "", "__setitem__"], [70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [70, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [70, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [70, 0, 1, "", "_cont_concat_unify"], [70, 0, 1, "", "_cont_get_dev"], [70, 0, 1, "", "_cont_get_dtype"], [70, 0, 1, "", "_cont_get_shape"], [70, 0, 1, "", "_cont_get_shapes"], [70, 5, 1, "", "_cont_ivy"], [70, 0, 1, "", "_cont_mean_unify"], [70, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [70, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [70, 0, 1, "", "_cont_slice_keys"], [70, 0, 1, "", "_cont_sum_unify"], [70, 0, 1, "", "_get_queue_item"], [70, 0, 1, "", "cont_all_false"], [70, 0, 1, "", "cont_all_key_chains"], [70, 0, 1, "", "cont_all_true"], [70, 0, 1, "", "cont_as_bools"], [70, 0, 1, "", "cont_assert_contains_sub_container"], [70, 0, 1, "", "cont_assert_contains_sub_structure"], [70, 0, 1, "", "cont_assert_identical"], [70, 0, 1, "", "cont_assert_identical_structure"], [70, 0, 1, "", "cont_at_key_chain"], [70, 0, 1, "", "cont_at_key_chains"], [70, 0, 1, "", "cont_at_keys"], [70, 0, 1, "", "cont_combine"], [70, 0, 1, "", "cont_common_key_chains"], [70, 5, 1, "", "cont_config"], [70, 0, 1, "", "cont_contains_sub_container"], [70, 0, 1, "", "cont_contains_sub_structure"], [70, 0, 1, "", "cont_copy"], [70, 0, 1, "", "cont_create_if_absent"], [70, 0, 1, "", "cont_cutoff_at_depth"], [70, 0, 1, "", "cont_cutoff_at_height"], [70, 0, 1, "", "cont_deep_copy"], [70, 5, 1, "", "cont_dev"], [70, 5, 1, "", "cont_dev_str"], [70, 0, 1, "", "cont_diff"], [70, 5, 1, "", "cont_dtype"], [70, 0, 1, "", "cont_duplicate_array_keychains"], [70, 0, 1, "", "cont_find_sub_container"], [70, 0, 1, "", "cont_find_sub_structure"], [70, 0, 1, "", "cont_flatten_key_chain"], [70, 0, 1, "", "cont_flatten_key_chains"], [70, 0, 1, "", "cont_format_key_chains"], [70, 0, 1, "", "cont_from_disk_as_hdf5"], [70, 0, 1, "", "cont_from_disk_as_json"], [70, 0, 1, "", "cont_from_disk_as_pickled"], [70, 0, 1, "", "cont_from_flat_list"], [70, 0, 1, "", "cont_handle_inplace"], [70, 0, 1, "", "cont_has_key"], [70, 0, 1, "", "cont_has_key_chain"], [70, 0, 1, "", "cont_identical"], [70, 0, 1, "", "cont_identical_array_shapes"], [70, 0, 1, "", "cont_identical_configs"], [70, 0, 1, "", "cont_identical_structure"], [70, 0, 1, "", "cont_if_exists"], [70, 0, 1, "", "cont_inplace_update"], [70, 5, 1, "", "cont_ivy"], [70, 0, 1, "", "cont_key_chains_containing"], [70, 0, 1, "", "cont_list_join"], [70, 0, 1, "", "cont_list_stack"], [70, 0, 1, "", "cont_load"], [70, 0, 1, "", "cont_map"], [70, 0, 1, "", "cont_map_sub_conts"], [70, 5, 1, "", "cont_max_depth"], [70, 0, 1, "", "cont_multi_map"], [70, 0, 1, "", "cont_multi_map_in_function"], [70, 0, 1, "", "cont_num_arrays"], [70, 0, 1, "", "cont_overwrite_at_key_chain"], [70, 0, 1, "", "cont_overwrite_at_key_chains"], [70, 0, 1, "", "cont_prune_empty"], [70, 0, 1, "", "cont_prune_key_chain"], [70, 0, 1, "", "cont_prune_key_chains"], [70, 0, 1, "", "cont_prune_key_from_key_chains"], [70, 0, 1, "", "cont_prune_keys"], [70, 0, 1, "", "cont_prune_keys_from_key_chains"], [70, 0, 1, "", "cont_reduce"], [70, 0, 1, "", "cont_remove_key_length_limit"], [70, 0, 1, "", "cont_remove_print_limit"], [70, 0, 1, "", "cont_reshape_like"], [70, 0, 1, "", "cont_restructure"], [70, 0, 1, "", "cont_restructure_key_chains"], [70, 0, 1, "", "cont_save"], [70, 0, 1, "", "cont_set_at_key_chain"], [70, 0, 1, "", "cont_set_at_key_chains"], [70, 0, 1, "", "cont_set_at_keys"], [70, 5, 1, "", "cont_shape"], [70, 5, 1, "", "cont_shapes"], [70, 0, 1, "", "cont_show"], [70, 0, 1, "", "cont_show_sub_container"], [70, 0, 1, "", "cont_size_ordered_arrays"], [70, 0, 1, "", "cont_slice_keys"], [70, 0, 1, "", "cont_slice_via_key"], [70, 0, 1, "", "cont_sort_by_key"], [70, 0, 1, "", "cont_structural_diff"], [70, 0, 1, "", "cont_to_dict"], [70, 0, 1, "", "cont_to_disk_as_hdf5"], [70, 0, 1, "", "cont_to_disk_as_json"], [70, 0, 1, "", "cont_to_disk_as_pickled"], [70, 0, 1, "", "cont_to_flat_list"], [70, 0, 1, "", "cont_to_iterator"], [70, 0, 1, "", "cont_to_iterator_keys"], [70, 0, 1, "", "cont_to_iterator_values"], [70, 0, 1, "", "cont_to_jsonable"], [70, 0, 1, "", "cont_to_nested_list"], [70, 0, 1, "", "cont_to_raw"], [70, 0, 1, "", "cont_trim_key"], [70, 0, 1, "", "cont_try_kc"], [70, 0, 1, "", "cont_unify"], [70, 0, 1, "", "cont_unstack_conts"], [70, 0, 1, "", "cont_update_config"], [70, 0, 1, "", "cont_with_default_key_color"], [70, 0, 1, "", "cont_with_entries_as_lists"], [70, 0, 1, "", "cont_with_ivy_backend"], [70, 0, 1, "", "cont_with_key_length_limit"], [70, 0, 1, "", "cont_with_print_indent"], [70, 0, 1, "", "cont_with_print_limit"], [70, 0, 1, "", "cont_with_print_line_spacing"], [70, 5, 1, "", "dynamic_backend"], [70, 0, 1, "", "h5_file_size"], [70, 0, 1, "", "shuffle_h5_file"], [70, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[99, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[99, 0, 1, "", "__abs__"], [99, 0, 1, "", "__add__"], [99, 0, 1, "", "__eq__"], [99, 0, 1, "", "__ge__"], [99, 0, 1, "", "__gt__"], [99, 0, 1, "", "__init__"], [99, 0, 1, "", "__le__"], [99, 0, 1, "", "__lt__"], [99, 0, 1, "", "__ne__"], [99, 0, 1, "", "__pow__"], [99, 0, 1, "", "__radd__"], [99, 0, 1, "", "__rrshift__"], [99, 0, 1, "", "__rshift__"], [99, 0, 1, "", "__rsub__"], [99, 0, 1, "", "__sub__"], [99, 0, 1, "", "__truediv__"], [99, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[71, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_to_ivy"], [71, 0, 1, "", "_static_to_native"], [71, 0, 1, "", "to_ivy"], [71, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[72, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_arange"], [72, 0, 1, "", "_static_asarray"], [72, 0, 1, "", "_static_copy_array"], [72, 0, 1, "", "_static_empty"], [72, 0, 1, "", "_static_empty_like"], [72, 0, 1, "", "_static_eye"], [72, 0, 1, "", "_static_from_dlpack"], [72, 0, 1, "", "_static_full"], [72, 0, 1, "", "_static_full_like"], [72, 0, 1, "", "_static_linspace"], [72, 0, 1, "", "_static_logspace"], [72, 0, 1, "", "_static_meshgrid"], [72, 0, 1, "", "_static_native_array"], [72, 0, 1, "", "_static_one_hot"], [72, 0, 1, "", "_static_ones"], [72, 0, 1, "", "_static_ones_like"], [72, 0, 1, "", "_static_tril"], [72, 0, 1, "", "_static_triu"], [72, 0, 1, "", "_static_zeros"], [72, 0, 1, "", "_static_zeros_like"], [72, 0, 1, "", "asarray"], [72, 0, 1, "", "copy_array"], [72, 0, 1, "", "empty_like"], [72, 0, 1, "", "from_dlpack"], [72, 0, 1, "", "frombuffer"], [72, 0, 1, "", "full_like"], [72, 0, 1, "", "linspace"], [72, 0, 1, "", "logspace"], [72, 0, 1, "", "meshgrid"], [72, 0, 1, "", "native_array"], [72, 0, 1, "", "one_hot"], [72, 0, 1, "", "ones_like"], [72, 0, 1, "", "static_frombuffer"], [72, 0, 1, "", "static_triu_indices"], [72, 0, 1, "", "tril"], [72, 0, 1, "", "triu"], [72, 0, 1, "", "triu_indices"], [72, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[73, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_astype"], [73, 0, 1, "", "_static_broadcast_arrays"], [73, 0, 1, "", "_static_broadcast_to"], [73, 0, 1, "", "_static_can_cast"], [73, 0, 1, "", "_static_default_complex_dtype"], [73, 0, 1, "", "_static_default_float_dtype"], [73, 0, 1, "", "_static_dtype"], [73, 0, 1, "", "_static_finfo"], [73, 0, 1, "", "_static_function_supported_dtypes"], [73, 0, 1, "", "_static_function_unsupported_dtypes"], [73, 0, 1, "", "_static_iinfo"], [73, 0, 1, "", "_static_is_bool_dtype"], [73, 0, 1, "", "_static_is_complex_dtype"], [73, 0, 1, "", "_static_is_float_dtype"], [73, 0, 1, "", "_static_is_int_dtype"], [73, 0, 1, "", "_static_is_uint_dtype"], [73, 0, 1, "", "_static_result_type"], [73, 0, 1, "", "astype"], [73, 0, 1, "", "broadcast_arrays"], [73, 0, 1, "", "broadcast_to"], [73, 0, 1, "", "can_cast"], [73, 0, 1, "", "dtype"], [73, 0, 1, "", "finfo"], [73, 0, 1, "", "iinfo"], [73, 0, 1, "", "is_bool_dtype"], [73, 0, 1, "", "is_complex_dtype"], [73, 0, 1, "", "is_float_dtype"], [73, 0, 1, "", "is_int_dtype"], [73, 0, 1, "", "is_uint_dtype"], [73, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[74, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_dev"], [74, 0, 1, "", "_static_to_device"], [74, 0, 1, "", "dev"], [74, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[75, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_abs"], [75, 0, 1, "", "_static_acos"], [75, 0, 1, "", "_static_acosh"], [75, 0, 1, "", "_static_add"], [75, 0, 1, "", "_static_asin"], [75, 0, 1, "", "_static_asinh"], [75, 0, 1, "", "_static_atan"], [75, 0, 1, "", "_static_atan2"], [75, 0, 1, "", "_static_atanh"], [75, 0, 1, "", "_static_bitwise_and"], [75, 0, 1, "", "_static_bitwise_invert"], [75, 0, 1, "", "_static_bitwise_left_shift"], [75, 0, 1, "", "_static_bitwise_or"], [75, 0, 1, "", "_static_bitwise_right_shift"], [75, 0, 1, "", "_static_bitwise_xor"], [75, 0, 1, "", "_static_ceil"], [75, 0, 1, "", "_static_cos"], [75, 0, 1, "", "_static_cosh"], [75, 0, 1, "", "_static_deg2rad"], [75, 0, 1, "", "_static_divide"], [75, 0, 1, "", "_static_equal"], [75, 0, 1, "", "_static_erf"], [75, 0, 1, "", "_static_exp"], [75, 0, 1, "", "_static_expm1"], [75, 0, 1, "", "_static_floor"], [75, 0, 1, "", "_static_floor_divide"], [75, 0, 1, "", "_static_greater"], [75, 0, 1, "", "_static_greater_equal"], [75, 0, 1, "", "_static_isfinite"], [75, 0, 1, "", "_static_isinf"], [75, 0, 1, "", "_static_isnan"], [75, 0, 1, "", "_static_isreal"], [75, 0, 1, "", "_static_lcm"], [75, 0, 1, "", "_static_less"], [75, 0, 1, "", "_static_less_equal"], [75, 0, 1, "", "_static_log"], [75, 0, 1, "", "_static_log10"], [75, 0, 1, "", "_static_log1p"], [75, 0, 1, "", "_static_log2"], [75, 0, 1, "", "_static_logaddexp"], [75, 0, 1, "", "_static_logical_and"], [75, 0, 1, "", "_static_logical_not"], [75, 0, 1, "", "_static_logical_or"], [75, 0, 1, "", "_static_logical_xor"], [75, 0, 1, "", "_static_maximum"], [75, 0, 1, "", "_static_minimum"], [75, 0, 1, "", "_static_multiply"], [75, 0, 1, "", "_static_negative"], [75, 0, 1, "", "_static_not_equal"], [75, 0, 1, "", "_static_positive"], [75, 0, 1, "", "_static_pow"], [75, 0, 1, "", "_static_rad2deg"], [75, 0, 1, "", "_static_reciprocal"], [75, 0, 1, "", "_static_remainder"], [75, 0, 1, "", "_static_round"], [75, 0, 1, "", "_static_sign"], [75, 0, 1, "", "_static_sin"], [75, 0, 1, "", "_static_sinh"], [75, 0, 1, "", "_static_sqrt"], [75, 0, 1, "", "_static_square"], [75, 0, 1, "", "_static_subtract"], [75, 0, 1, "", "_static_tan"], [75, 0, 1, "", "_static_tanh"], [75, 0, 1, "", "_static_trapz"], [75, 0, 1, "", "_static_trunc"], [75, 0, 1, "", "_static_trunc_divide"], [75, 0, 1, "", "abs"], [75, 0, 1, "", "acos"], [75, 0, 1, "", "acosh"], [75, 0, 1, "", "add"], [75, 0, 1, "", "angle"], [75, 0, 1, "", "asin"], [75, 0, 1, "", "asinh"], [75, 0, 1, "", "atan"], [75, 0, 1, "", "atan2"], [75, 0, 1, "", "atanh"], [75, 0, 1, "", "bitwise_and"], [75, 0, 1, "", "bitwise_invert"], [75, 0, 1, "", "bitwise_left_shift"], [75, 0, 1, "", "bitwise_or"], [75, 0, 1, "", "bitwise_right_shift"], [75, 0, 1, "", "bitwise_xor"], [75, 0, 1, "", "ceil"], [75, 0, 1, "", "cos"], [75, 0, 1, "", "cosh"], [75, 0, 1, "", "deg2rad"], [75, 0, 1, "", "divide"], [75, 0, 1, "", "equal"], [75, 0, 1, "", "erf"], [75, 0, 1, "", "exp"], [75, 0, 1, "", "exp2"], [75, 0, 1, "", "expm1"], [75, 0, 1, "", "floor"], [75, 0, 1, "", "floor_divide"], [75, 0, 1, "", "fmin"], [75, 0, 1, "", "gcd"], [75, 0, 1, "", "greater"], [75, 0, 1, "", "greater_equal"], [75, 0, 1, "", "imag"], [75, 0, 1, "", "isfinite"], [75, 0, 1, "", "isinf"], [75, 0, 1, "", "isnan"], [75, 0, 1, "", "isreal"], [75, 0, 1, "", "lcm"], [75, 0, 1, "", "less"], [75, 0, 1, "", "less_equal"], [75, 0, 1, "", "log"], [75, 0, 1, "", "log10"], [75, 0, 1, "", "log1p"], [75, 0, 1, "", "log2"], [75, 0, 1, "", "logaddexp"], [75, 0, 1, "", "logaddexp2"], [75, 0, 1, "", "logical_and"], [75, 0, 1, "", "logical_not"], [75, 0, 1, "", "logical_or"], [75, 0, 1, "", "logical_xor"], [75, 0, 1, "", "maximum"], [75, 0, 1, "", "minimum"], [75, 0, 1, "", "multiply"], [75, 0, 1, "", "nan_to_num"], [75, 0, 1, "", "negative"], [75, 0, 1, "", "not_equal"], [75, 0, 1, "", "positive"], [75, 0, 1, "", "pow"], [75, 0, 1, "", "rad2deg"], [75, 0, 1, "", "real"], [75, 0, 1, "", "reciprocal"], [75, 0, 1, "", "remainder"], [75, 0, 1, "", "round"], [75, 0, 1, "", "sign"], [75, 0, 1, "", "sin"], [75, 0, 1, "", "sinh"], [75, 0, 1, "", "sqrt"], [75, 0, 1, "", "square"], [75, 0, 1, "", "static_angle"], [75, 0, 1, "", "static_exp2"], [75, 0, 1, "", "static_fmin"], [75, 0, 1, "", "static_gcd"], [75, 0, 1, "", "static_imag"], [75, 0, 1, "", "static_logaddexp2"], [75, 0, 1, "", "static_nan_to_num"], [75, 0, 1, "", "static_real"], [75, 0, 1, "", "subtract"], [75, 0, 1, "", "tan"], [75, 0, 1, "", "tanh"], [75, 0, 1, "", "trapz"], [75, 0, 1, "", "trunc"], [75, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[76, 3, 0, "-", "activations"], [76, 3, 0, "-", "conversions"], [76, 3, 0, "-", "creation"], [76, 3, 0, "-", "data_type"], [76, 3, 0, "-", "device"], [76, 3, 0, "-", "elementwise"], [76, 3, 0, "-", "general"], [76, 3, 0, "-", "gradients"], [76, 3, 0, "-", "image"], [76, 3, 0, "-", "layers"], [76, 3, 0, "-", "linear_algebra"], [76, 3, 0, "-", "losses"], [76, 3, 0, "-", "manipulation"], [76, 3, 0, "-", "norms"], [76, 3, 0, "-", "random"], [76, 3, 0, "-", "searching"], [76, 3, 0, "-", "set"], [76, 3, 0, "-", "sorting"], [76, 3, 0, "-", "statistical"], [76, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[76, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_celu"], [76, 0, 1, "", "_static_elu"], [76, 0, 1, "", "_static_hardshrink"], [76, 0, 1, "", "_static_hardtanh"], [76, 0, 1, "", "_static_scaled_tanh"], [76, 0, 1, "", "_static_silu"], [76, 0, 1, "", "_static_softshrink"], [76, 0, 1, "", "_static_tanhshrink"], [76, 0, 1, "", "_static_threshold"], [76, 0, 1, "", "celu"], [76, 0, 1, "", "elu"], [76, 0, 1, "", "hardshrink"], [76, 0, 1, "", "hardtanh"], [76, 0, 1, "", "logit"], [76, 0, 1, "", "logsigmoid"], [76, 0, 1, "", "prelu"], [76, 0, 1, "", "relu6"], [76, 0, 1, "", "scaled_tanh"], [76, 0, 1, "", "selu"], [76, 0, 1, "", "silu"], [76, 0, 1, "", "softshrink"], [76, 0, 1, "", "static_logit"], [76, 0, 1, "", "static_logsigmoid"], [76, 0, 1, "", "static_prelu"], [76, 0, 1, "", "static_relu6"], [76, 0, 1, "", "static_selu"], [76, 0, 1, "", "static_thresholded_relu"], [76, 0, 1, "", "tanhshrink"], [76, 0, 1, "", "threshold"], [76, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[76, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[76, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_trilu"], [76, 0, 1, "", "blackman_window"], [76, 0, 1, "", "eye_like"], [76, 0, 1, "", "hamming_window"], [76, 0, 1, "", "hann_window"], [76, 0, 1, "", "kaiser_bessel_derived_window"], [76, 0, 1, "", "kaiser_window"], [76, 0, 1, "", "mel_weight_matrix"], [76, 0, 1, "", "polyval"], [76, 0, 1, "", "static_blackman_window"], [76, 0, 1, "", "static_eye_like"], [76, 0, 1, "", "static_hamming_window"], [76, 0, 1, "", "static_hann_window"], [76, 0, 1, "", "static_kaiser_bessel_derived_window"], [76, 0, 1, "", "static_kaiser_window"], [76, 0, 1, "", "static_mel_weight_matrix"], [76, 0, 1, "", "static_polyval"], [76, 0, 1, "", "static_tril_indices"], [76, 0, 1, "", "static_unsorted_segment_mean"], [76, 0, 1, "", "static_unsorted_segment_min"], [76, 0, 1, "", "static_unsorted_segment_sum"], [76, 0, 1, "", "static_vorbis_window"], [76, 0, 1, "", "tril_indices"], [76, 0, 1, "", "trilu"], [76, 0, 1, "", "unsorted_segment_mean"], [76, 0, 1, "", "unsorted_segment_min"], [76, 0, 1, "", "unsorted_segment_sum"], [76, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[76, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[76, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[76, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "allclose"], [76, 0, 1, "", "amax"], [76, 0, 1, "", "amin"], [76, 0, 1, "", "binarizer"], [76, 0, 1, "", "conj"], [76, 0, 1, "", "copysign"], [76, 0, 1, "", "count_nonzero"], [76, 0, 1, "", "diff"], [76, 0, 1, "", "digamma"], [76, 0, 1, "", "erfc"], [76, 0, 1, "", "fix"], [76, 0, 1, "", "float_power"], [76, 0, 1, "", "fmax"], [76, 0, 1, "", "fmod"], [76, 0, 1, "", "frexp"], [76, 0, 1, "", "gradient"], [76, 0, 1, "", "hypot"], [76, 0, 1, "", "isclose"], [76, 0, 1, "", "ldexp"], [76, 0, 1, "", "lerp"], [76, 0, 1, "", "modf"], [76, 0, 1, "", "nansum"], [76, 0, 1, "", "nextafter"], [76, 0, 1, "", "signbit"], [76, 0, 1, "", "sinc"], [76, 0, 1, "", "sparsify_tensor"], [76, 0, 1, "", "static_allclose"], [76, 0, 1, "", "static_amax"], [76, 0, 1, "", "static_amin"], [76, 0, 1, "", "static_binarizer"], [76, 0, 1, "", "static_conj"], [76, 0, 1, "", "static_copysign"], [76, 0, 1, "", "static_count_nonzero"], [76, 0, 1, "", "static_diff"], [76, 0, 1, "", "static_digamma"], [76, 0, 1, "", "static_erfc"], [76, 0, 1, "", "static_fix"], [76, 0, 1, "", "static_float_power"], [76, 0, 1, "", "static_fmax"], [76, 0, 1, "", "static_fmod"], [76, 0, 1, "", "static_frexp"], [76, 0, 1, "", "static_gradient"], [76, 0, 1, "", "static_hypot"], [76, 0, 1, "", "static_isclose"], [76, 0, 1, "", "static_ldexp"], [76, 0, 1, "", "static_lerp"], [76, 0, 1, "", "static_modf"], [76, 0, 1, "", "static_nansum"], [76, 0, 1, "", "static_nextafter"], [76, 0, 1, "", "static_signbit"], [76, 0, 1, "", "static_sinc"], [76, 0, 1, "", "static_sparsify_tensor"], [76, 0, 1, "", "static_xlogy"], [76, 0, 1, "", "static_zeta"], [76, 0, 1, "", "xlogy"], [76, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[76, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_reduce"], [76, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[76, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[76, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[76, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_fft"], [76, 0, 1, "", "_static_sliding_window"], [76, 0, 1, "", "adaptive_avg_pool1d"], [76, 0, 1, "", "adaptive_avg_pool2d"], [76, 0, 1, "", "adaptive_max_pool2d"], [76, 0, 1, "", "avg_pool1d"], [76, 0, 1, "", "avg_pool2d"], [76, 0, 1, "", "avg_pool3d"], [76, 0, 1, "", "dct"], [76, 0, 1, "", "dft"], [76, 0, 1, "", "embedding"], [76, 0, 1, "", "fft"], [76, 0, 1, "", "idct"], [76, 0, 1, "", "ifft"], [76, 0, 1, "", "ifftn"], [76, 0, 1, "", "interpolate"], [76, 0, 1, "", "max_pool1d"], [76, 0, 1, "", "max_pool2d"], [76, 0, 1, "", "max_pool3d"], [76, 0, 1, "", "max_unpool1d"], [76, 0, 1, "", "rfft"], [76, 0, 1, "", "rfftn"], [76, 0, 1, "", "sliding_window"], [76, 0, 1, "", "static_adaptive_avg_pool1d"], [76, 0, 1, "", "static_adaptive_avg_pool2d"], [76, 0, 1, "", "static_adaptive_max_pool2d"], [76, 0, 1, "", "static_avg_pool1d"], [76, 0, 1, "", "static_avg_pool2d"], [76, 0, 1, "", "static_avg_pool3d"], [76, 0, 1, "", "static_dct"], [76, 0, 1, "", "static_dft"], [76, 0, 1, "", "static_embedding"], [76, 0, 1, "", "static_idct"], [76, 0, 1, "", "static_ifft"], [76, 0, 1, "", "static_ifftn"], [76, 0, 1, "", "static_interpolate"], [76, 0, 1, "", "static_max_pool1d"], [76, 0, 1, "", "static_max_pool2d"], [76, 0, 1, "", "static_max_pool3d"], [76, 0, 1, "", "static_max_unpool1d"], [76, 0, 1, "", "static_rfft"], [76, 0, 1, "", "static_rfftn"], [76, 0, 1, "", "static_rnn"], [76, 0, 1, "", "static_stft"], [76, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[76, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "adjoint"], [76, 0, 1, "", "batched_outer"], [76, 0, 1, "", "cond"], [76, 0, 1, "", "diagflat"], [76, 0, 1, "", "dot"], [76, 0, 1, "", "eig"], [76, 0, 1, "", "eigh_tridiagonal"], [76, 0, 1, "", "eigvals"], [76, 0, 1, "", "higher_order_moment"], [76, 0, 1, "", "initialize_tucker"], [76, 0, 1, "", "kron"], [76, 0, 1, "", "make_svd_non_negative"], [76, 0, 1, "", "matrix_exp"], [76, 0, 1, "", "mode_dot"], [76, 0, 1, "", "multi_dot"], [76, 0, 1, "", "multi_mode_dot"], [76, 0, 1, "", "partial_tucker"], [76, 0, 1, "", "static_adjoint"], [76, 0, 1, "", "static_batched_outer"], [76, 0, 1, "", "static_cond"], [76, 0, 1, "", "static_diagflat"], [76, 0, 1, "", "static_dot"], [76, 0, 1, "", "static_eig"], [76, 0, 1, "", "static_eigh_tridiagonal"], [76, 0, 1, "", "static_eigvals"], [76, 0, 1, "", "static_higher_order_moment"], [76, 0, 1, "", "static_initialize_tucker"], [76, 0, 1, "", "static_kron"], [76, 0, 1, "", "static_make_svd_non_negative"], [76, 0, 1, "", "static_matrix_exp"], [76, 0, 1, "", "static_mode_dot"], [76, 0, 1, "", "static_multi_dot"], [76, 0, 1, "", "static_multi_mode_dot"], [76, 0, 1, "", "static_partial_tucker"], [76, 0, 1, "", "static_svd_flip"], [76, 0, 1, "", "static_tensor_train"], [76, 0, 1, "", "static_truncated_svd"], [76, 0, 1, "", "static_tt_matrix_to_tensor"], [76, 0, 1, "", "static_tucker"], [76, 0, 1, "", "svd_flip"], [76, 0, 1, "", "tensor_train"], [76, 0, 1, "", "truncated_svd"], [76, 0, 1, "", "tt_matrix_to_tensor"], [76, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[76, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_hinge_embedding_loss"], [76, 0, 1, "", "_static_huber_loss"], [76, 0, 1, "", "_static_kl_div"], [76, 0, 1, "", "_static_l1_loss"], [76, 0, 1, "", "_static_log_poisson_loss"], [76, 0, 1, "", "_static_poisson_nll_loss"], [76, 0, 1, "", "_static_smooth_l1_loss"], [76, 0, 1, "", "_static_soft_margin_loss"], [76, 0, 1, "", "hinge_embedding_loss"], [76, 0, 1, "", "huber_loss"], [76, 0, 1, "", "kl_div"], [76, 0, 1, "", "l1_loss"], [76, 0, 1, "", "log_poisson_loss"], [76, 0, 1, "", "poisson_nll_loss"], [76, 0, 1, "", "smooth_l1_loss"], [76, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[76, 1, 1, "", "_ContainerWithManipulationExperimental"], [76, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_fill_diagonal"], [76, 0, 1, "", "_static_put_along_axis"], [76, 0, 1, "", "_static_take"], [76, 0, 1, "", "_static_trim_zeros"], [76, 0, 1, "", "_static_unique_consecutive"], [76, 0, 1, "", "as_strided"], [76, 0, 1, "", "associative_scan"], [76, 0, 1, "", "atleast_1d"], [76, 0, 1, "", "atleast_2d"], [76, 0, 1, "", "atleast_3d"], [76, 0, 1, "", "broadcast_shapes"], [76, 0, 1, "", "column_stack"], [76, 0, 1, "", "concat_from_sequence"], [76, 0, 1, "", "dsplit"], [76, 0, 1, "", "dstack"], [76, 0, 1, "", "expand"], [76, 0, 1, "", "fill_diagonal"], [76, 0, 1, "", "flatten"], [76, 0, 1, "", "fliplr"], [76, 0, 1, "", "flipud"], [76, 0, 1, "", "fold"], [76, 0, 1, "", "heaviside"], [76, 0, 1, "", "hsplit"], [76, 0, 1, "", "hstack"], [76, 0, 1, "", "i0"], [76, 0, 1, "", "matricize"], [76, 0, 1, "", "moveaxis"], [76, 0, 1, "", "pad"], [76, 0, 1, "", "partial_fold"], [76, 0, 1, "", "partial_tensor_to_vec"], [76, 0, 1, "", "partial_unfold"], [76, 0, 1, "", "partial_vec_to_tensor"], [76, 0, 1, "", "put_along_axis"], [76, 0, 1, "", "rot90"], [76, 0, 1, "", "soft_thresholding"], [76, 0, 1, "", "static_as_strided"], [76, 0, 1, "", "static_atleast_1d"], [76, 0, 1, "", "static_atleast_2d"], [76, 0, 1, "", "static_atleast_3d"], [76, 0, 1, "", "static_broadcast_shapes"], [76, 0, 1, "", "static_column_stack"], [76, 0, 1, "", "static_concat_from_sequence"], [76, 0, 1, "", "static_dsplit"], [76, 0, 1, "", "static_dstack"], [76, 0, 1, "", "static_expand"], [76, 0, 1, "", "static_flatten"], [76, 0, 1, "", "static_fliplr"], [76, 0, 1, "", "static_flipud"], [76, 0, 1, "", "static_fold"], [76, 0, 1, "", "static_heaviside"], [76, 0, 1, "", "static_hsplit"], [76, 0, 1, "", "static_hstack"], [76, 0, 1, "", "static_i0"], [76, 0, 1, "", "static_matricize"], [76, 0, 1, "", "static_moveaxis"], [76, 0, 1, "", "static_pad"], [76, 0, 1, "", "static_partial_fold"], [76, 0, 1, "", "static_partial_tensor_to_vec"], [76, 0, 1, "", "static_partial_unfold"], [76, 0, 1, "", "static_partial_vec_to_tensor"], [76, 0, 1, "", "static_rot90"], [76, 0, 1, "", "static_soft_thresholding"], [76, 0, 1, "", "static_take_along_axis"], [76, 0, 1, "", "static_top_k"], [76, 0, 1, "", "static_unfold"], [76, 0, 1, "", "static_vsplit"], [76, 0, 1, "", "static_vstack"], [76, 0, 1, "", "take"], [76, 0, 1, "", "take_along_axis"], [76, 0, 1, "", "top_k"], [76, 0, 1, "", "trim_zeros"], [76, 0, 1, "", "unfold"], [76, 0, 1, "", "unique_consecutive"], [76, 0, 1, "", "vsplit"], [76, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[76, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "batch_norm"], [76, 0, 1, "", "group_norm"], [76, 0, 1, "", "instance_norm"], [76, 0, 1, "", "l1_normalize"], [76, 0, 1, "", "l2_normalize"], [76, 0, 1, "", "lp_normalize"], [76, 0, 1, "", "static_batch_norm"], [76, 0, 1, "", "static_group_norm"], [76, 0, 1, "", "static_instance_norm"], [76, 0, 1, "", "static_l1_normalize"], [76, 0, 1, "", "static_l2_normalize"], [76, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[76, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "bernoulli"], [76, 0, 1, "", "beta"], [76, 0, 1, "", "dirichlet"], [76, 0, 1, "", "gamma"], [76, 0, 1, "", "poisson"], [76, 0, 1, "", "static_bernoulli"], [76, 0, 1, "", "static_beta"], [76, 0, 1, "", "static_dirichlet"], [76, 0, 1, "", "static_gamma"], [76, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[76, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "static_unravel_index"], [76, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[76, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[76, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "invert_permutation"], [76, 0, 1, "", "lexsort"], [76, 0, 1, "", "static_invert_permutation"], [76, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[76, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_cummax"], [76, 0, 1, "", "_static_cummin"], [76, 0, 1, "", "_static_nanmin"], [76, 0, 1, "", "bincount"], [76, 0, 1, "", "corrcoef"], [76, 0, 1, "", "cov"], [76, 0, 1, "", "cummax"], [76, 0, 1, "", "cummin"], [76, 0, 1, "", "histogram"], [76, 0, 1, "", "igamma"], [76, 0, 1, "", "lgamma"], [76, 0, 1, "", "median"], [76, 0, 1, "", "nanmean"], [76, 0, 1, "", "nanmedian"], [76, 0, 1, "", "nanmin"], [76, 0, 1, "", "nanprod"], [76, 0, 1, "", "quantile"], [76, 0, 1, "", "static_bincount"], [76, 0, 1, "", "static_corrcoef"], [76, 0, 1, "", "static_cov"], [76, 0, 1, "", "static_histogram"], [76, 0, 1, "", "static_igamma"], [76, 0, 1, "", "static_lgamma"], [76, 0, 1, "", "static_median"], [76, 0, 1, "", "static_nanmean"], [76, 0, 1, "", "static_nanmedian"], [76, 0, 1, "", "static_nanprod"], [76, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[76, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "optional_get_element"], [76, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[77, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_all_equal"], [77, 0, 1, "", "_static_array_equal"], [77, 0, 1, "", "_static_assert_supports_inplace"], [77, 0, 1, "", "_static_clip_matrix_norm"], [77, 0, 1, "", "_static_clip_vector_norm"], [77, 0, 1, "", "_static_einops_rearrange"], [77, 0, 1, "", "_static_einops_reduce"], [77, 0, 1, "", "_static_einops_repeat"], [77, 0, 1, "", "_static_exists"], [77, 0, 1, "", "_static_fourier_encode"], [77, 0, 1, "", "_static_gather"], [77, 0, 1, "", "_static_gather_nd"], [77, 0, 1, "", "_static_get_num_dims"], [77, 0, 1, "", "_static_has_nans"], [77, 0, 1, "", "_static_inplace_decrement"], [77, 0, 1, "", "_static_inplace_increment"], [77, 0, 1, "", "_static_inplace_update"], [77, 0, 1, "", "_static_is_array"], [77, 0, 1, "", "_static_is_ivy_array"], [77, 0, 1, "", "_static_is_native_array"], [77, 0, 1, "", "_static_scatter_flat"], [77, 0, 1, "", "_static_scatter_nd"], [77, 0, 1, "", "_static_stable_divide"], [77, 0, 1, "", "_static_stable_pow"], [77, 0, 1, "", "_static_supports_inplace_updates"], [77, 0, 1, "", "_static_to_list"], [77, 0, 1, "", "_static_to_numpy"], [77, 0, 1, "", "_static_to_scalar"], [77, 0, 1, "", "_static_value_is_nan"], [77, 0, 1, "", "all_equal"], [77, 0, 1, "", "array_equal"], [77, 0, 1, "", "assert_supports_inplace"], [77, 0, 1, "", "clip_matrix_norm"], [77, 0, 1, "", "clip_vector_norm"], [77, 0, 1, "", "einops_rearrange"], [77, 0, 1, "", "einops_reduce"], [77, 0, 1, "", "einops_repeat"], [77, 0, 1, "", "exists"], [77, 0, 1, "", "fourier_encode"], [77, 0, 1, "", "gather"], [77, 0, 1, "", "gather_nd"], [77, 0, 1, "", "get_num_dims"], [77, 0, 1, "", "has_nans"], [77, 0, 1, "", "inplace_decrement"], [77, 0, 1, "", "inplace_increment"], [77, 0, 1, "", "inplace_update"], [77, 0, 1, "", "is_array"], [77, 0, 1, "", "is_ivy_array"], [77, 0, 1, "", "is_native_array"], [77, 0, 1, "", "isin"], [77, 0, 1, "", "itemsize"], [77, 0, 1, "", "scatter_flat"], [77, 0, 1, "", "scatter_nd"], [77, 0, 1, "", "stable_divide"], [77, 0, 1, "", "stable_pow"], [77, 0, 1, "", "static_isin"], [77, 0, 1, "", "static_itemsize"], [77, 0, 1, "", "static_strides"], [77, 0, 1, "", "strides"], [77, 0, 1, "", "supports_inplace_updates"], [77, 0, 1, "", "to_list"], [77, 0, 1, "", "to_numpy"], [77, 0, 1, "", "to_scalar"], [77, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[78, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_stop_gradient"], [78, 0, 1, "", "adam_step"], [78, 0, 1, "", "adam_update"], [78, 0, 1, "", "gradient_descent_update"], [78, 0, 1, "", "lamb_update"], [78, 0, 1, "", "lars_update"], [78, 0, 1, "", "optimizer_update"], [78, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[79, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[80, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_conv1d"], [80, 0, 1, "", "_static_conv1d_transpose"], [80, 0, 1, "", "_static_conv2d"], [80, 0, 1, "", "_static_conv2d_transpose"], [80, 0, 1, "", "_static_conv3d"], [80, 0, 1, "", "_static_conv3d_transpose"], [80, 0, 1, "", "_static_depthwise_conv2d"], [80, 0, 1, "", "_static_dropout"], [80, 0, 1, "", "_static_dropout1d"], [80, 0, 1, "", "_static_dropout2d"], [80, 0, 1, "", "_static_dropout3d"], [80, 0, 1, "", "_static_linear"], [80, 0, 1, "", "_static_lstm_update"], [80, 0, 1, "", "_static_multi_head_attention"], [80, 0, 1, "", "_static_reduce_window"], [80, 0, 1, "", "_static_scaled_dot_product_attention"], [80, 0, 1, "", "conv1d"], [80, 0, 1, "", "conv1d_transpose"], [80, 0, 1, "", "conv2d"], [80, 0, 1, "", "conv2d_transpose"], [80, 0, 1, "", "conv3d"], [80, 0, 1, "", "conv3d_transpose"], [80, 0, 1, "", "depthwise_conv2d"], [80, 0, 1, "", "dropout"], [80, 0, 1, "", "dropout1d"], [80, 0, 1, "", "dropout2d"], [80, 0, 1, "", "dropout3d"], [80, 0, 1, "", "linear"], [80, 0, 1, "", "lstm_update"], [80, 0, 1, "", "multi_head_attention"], [80, 0, 1, "", "reduce_window"], [80, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[81, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_cholesky"], [81, 0, 1, "", "_static_cross"], [81, 0, 1, "", "_static_det"], [81, 0, 1, "", "_static_diag"], [81, 0, 1, "", "_static_diagonal"], [81, 0, 1, "", "_static_eigh"], [81, 0, 1, "", "_static_eigvalsh"], [81, 0, 1, "", "_static_inner"], [81, 0, 1, "", "_static_inv"], [81, 0, 1, "", "_static_matmul"], [81, 0, 1, "", "_static_matrix_norm"], [81, 0, 1, "", "_static_matrix_power"], [81, 0, 1, "", "_static_matrix_rank"], [81, 0, 1, "", "_static_matrix_transpose"], [81, 0, 1, "", "_static_outer"], [81, 0, 1, "", "_static_pinv"], [81, 0, 1, "", "_static_qr"], [81, 0, 1, "", "_static_slogdet"], [81, 0, 1, "", "_static_solve"], [81, 0, 1, "", "_static_svd"], [81, 0, 1, "", "_static_svdvals"], [81, 0, 1, "", "_static_tensordot"], [81, 0, 1, "", "_static_tensorsolve"], [81, 0, 1, "", "_static_trace"], [81, 0, 1, "", "_static_vander"], [81, 0, 1, "", "_static_vecdot"], [81, 0, 1, "", "_static_vector_norm"], [81, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [81, 0, 1, "", "cholesky"], [81, 0, 1, "", "cross"], [81, 0, 1, "", "det"], [81, 0, 1, "", "diag"], [81, 0, 1, "", "diagonal"], [81, 0, 1, "", "eigh"], [81, 0, 1, "", "eigvalsh"], [81, 0, 1, "", "general_inner_product"], [81, 0, 1, "", "inner"], [81, 0, 1, "", "inv"], [81, 0, 1, "", "matmul"], [81, 0, 1, "", "matrix_norm"], [81, 0, 1, "", "matrix_power"], [81, 0, 1, "", "matrix_rank"], [81, 0, 1, "", "matrix_transpose"], [81, 0, 1, "", "outer"], [81, 0, 1, "", "pinv"], [81, 0, 1, "", "qr"], [81, 0, 1, "", "slogdet"], [81, 0, 1, "", "solve"], [81, 0, 1, "", "static_general_inner_product"], [81, 0, 1, "", "svd"], [81, 0, 1, "", "svdvals"], [81, 0, 1, "", "tensordot"], [81, 0, 1, "", "tensorsolve"], [81, 0, 1, "", "trace"], [81, 0, 1, "", "vander"], [81, 0, 1, "", "vecdot"], [81, 0, 1, "", "vector_norm"], [81, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[82, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_binary_cross_entropy"], [82, 0, 1, "", "_static_cross_entropy"], [82, 0, 1, "", "_static_sparse_cross_entropy"], [82, 0, 1, "", "binary_cross_entropy"], [82, 0, 1, "", "cross_entropy"], [82, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[83, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_clip"], [83, 0, 1, "", "_static_concat"], [83, 0, 1, "", "_static_constant_pad"], [83, 0, 1, "", "_static_expand_dims"], [83, 0, 1, "", "_static_flip"], [83, 0, 1, "", "_static_permute_dims"], [83, 0, 1, "", "_static_repeat"], [83, 0, 1, "", "_static_reshape"], [83, 0, 1, "", "_static_roll"], [83, 0, 1, "", "_static_split"], [83, 0, 1, "", "_static_squeeze"], [83, 0, 1, "", "_static_stack"], [83, 0, 1, "", "_static_swapaxes"], [83, 0, 1, "", "_static_tile"], [83, 0, 1, "", "_static_unstack"], [83, 0, 1, "", "_static_zero_pad"], [83, 0, 1, "", "clip"], [83, 0, 1, "", "concat"], [83, 0, 1, "", "constant_pad"], [83, 0, 1, "", "expand_dims"], [83, 0, 1, "", "flip"], [83, 0, 1, "", "permute_dims"], [83, 0, 1, "", "repeat"], [83, 0, 1, "", "reshape"], [83, 0, 1, "", "roll"], [83, 0, 1, "", "split"], [83, 0, 1, "", "squeeze"], [83, 0, 1, "", "stack"], [83, 0, 1, "", "swapaxes"], [83, 0, 1, "", "tile"], [83, 0, 1, "", "unstack"], [83, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[84, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[85, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_multinomial"], [85, 0, 1, "", "_static_randint"], [85, 0, 1, "", "_static_random_normal"], [85, 0, 1, "", "_static_random_uniform"], [85, 0, 1, "", "_static_shuffle"], [85, 0, 1, "", "multinomial"], [85, 0, 1, "", "randint"], [85, 0, 1, "", "random_normal"], [85, 0, 1, "", "random_uniform"], [85, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[86, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_argmax"], [86, 0, 1, "", "_static_argmin"], [86, 0, 1, "", "_static_argwhere"], [86, 0, 1, "", "_static_nonzero"], [86, 0, 1, "", "_static_where"], [86, 0, 1, "", "argmax"], [86, 0, 1, "", "argmin"], [86, 0, 1, "", "argwhere"], [86, 0, 1, "", "nonzero"], [86, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[87, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_unique_all"], [87, 0, 1, "", "_static_unique_counts"], [87, 0, 1, "", "_static_unique_inverse"], [87, 0, 1, "", "_static_unique_values"], [87, 0, 1, "", "unique_all"], [87, 0, 1, "", "unique_counts"], [87, 0, 1, "", "unique_inverse"], [87, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[88, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_argsort"], [88, 0, 1, "", "_static_searchsorted"], [88, 0, 1, "", "_static_sort"], [88, 0, 1, "", "argsort"], [88, 0, 1, "", "msort"], [88, 0, 1, "", "searchsorted"], [88, 0, 1, "", "sort"], [88, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[89, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_cumprod"], [89, 0, 1, "", "_static_cumsum"], [89, 0, 1, "", "_static_min"], [89, 0, 1, "", "_static_prod"], [89, 0, 1, "", "_static_sum"], [89, 0, 1, "", "_static_var"], [89, 0, 1, "", "cumprod"], [89, 0, 1, "", "cumsum"], [89, 0, 1, "", "einsum"], [89, 0, 1, "", "max"], [89, 0, 1, "", "mean"], [89, 0, 1, "", "min"], [89, 0, 1, "", "prod"], [89, 0, 1, "", "std"], [89, 0, 1, "", "sum"], [89, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[90, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_all"], [90, 0, 1, "", "_static_any"], [90, 0, 1, "", "all"], [90, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[91, 2, 1, "", "_wrap_function"], [91, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[92, 3, 0, "-", "base"], [93, 3, 0, "-", "cp_tensor"], [94, 3, 0, "-", "parafac2_tensor"], [95, 3, 0, "-", "tr_tensor"], [96, 3, 0, "-", "tt_tensor"], [97, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[92, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "mode_dot"], [92, 0, 1, "", "norm"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[93, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "cp_copy"], [93, 0, 1, "", "cp_flip_sign"], [93, 0, 1, "", "cp_lstsq_grad"], [93, 0, 1, "", "cp_mode_dot"], [93, 0, 1, "", "cp_n_param"], [93, 0, 1, "", "cp_norm"], [93, 0, 1, "", "cp_normalize"], [93, 0, 1, "", "cp_to_tensor"], [93, 0, 1, "", "cp_to_unfolded"], [93, 0, 1, "", "cp_to_vec"], [93, 0, 1, "", "mode_dot"], [93, 5, 1, "", "n_param"], [93, 0, 1, "", "norm"], [93, 0, 1, "", "normalize"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"], [93, 0, 1, "", "unfolding_dot_khatri_rao"], [93, 0, 1, "", "validate_cp_rank"], [93, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[94, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "apply_parafac2_projections"], [94, 0, 1, "", "from_CPTensor"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "parafac2_normalise"], [94, 0, 1, "", "parafac2_to_slice"], [94, 0, 1, "", "parafac2_to_slices"], [94, 0, 1, "", "parafac2_to_tensor"], [94, 0, 1, "", "parafac2_to_unfolded"], [94, 0, 1, "", "parafac2_to_vec"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[95, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tr_n_param"], [95, 0, 1, "", "tr_to_tensor"], [95, 0, 1, "", "tr_to_unfolded"], [95, 0, 1, "", "tr_to_vec"], [95, 0, 1, "", "validate_tr_rank"], [95, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[96, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_tt_n_param"], [96, 0, 1, "", "index_update"], [96, 5, 1, "", "n_param"], [96, 0, 1, "", "pad_tt_rank"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolding"], [96, 0, 1, "", "to_vec"], [96, 0, 1, "", "tt_to_tensor"], [96, 0, 1, "", "tt_to_unfolded"], [96, 0, 1, "", "tt_to_vec"], [96, 0, 1, "", "validate_tt_rank"], [96, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[97, 1, 1, "", "TuckerTensor"], [97, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "mode_dot"], [97, 5, 1, "", "n_param"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolded"], [97, 0, 1, "", "to_vec"], [97, 0, 1, "", "tucker_copy"], [97, 0, 1, "", "tucker_mode_dot"], [97, 0, 1, "", "tucker_n_param"], [97, 0, 1, "", "tucker_normalize"], [97, 0, 1, "", "tucker_to_tensor"], [97, 0, 1, "", "tucker_to_unfolded"], [97, 0, 1, "", "tucker_to_vec"], [97, 0, 1, "", "validate_tucker_rank"], [97, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[102, 3, 0, "-", "base"], [103, 3, 0, "-", "elementwise"], [101, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[102, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[102, 0, 1, "", "__init__"], [102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "broadcast_shapes"], [102, 5, 1, "", "data"], [102, 5, 1, "", "device"], [102, 5, 1, "", "dtype"], [102, 5, 1, "", "inner_shape"], [102, 5, 1, "", "ndim"], [102, 0, 1, "", "nested_array"], [102, 5, 1, "", "nested_rank"], [102, 0, 1, "", "ragged_map"], [102, 0, 1, "", "ragged_multi_map"], [102, 0, 1, "", "ragged_multi_map_in_function"], [102, 0, 1, "", "replace_ivy_arrays"], [102, 5, 1, "", "shape"], [102, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[103, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[101, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[101, 0, 1, "", "__init__"], [101, 0, 1, "", "from_row_lengths"], [101, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[615, 3, 0, "-", "activations"], [616, 3, 0, "-", "constants"], [617, 3, 0, "-", "control_flow_ops"], [618, 3, 0, "-", "creation"], [619, 3, 0, "-", "data_type"], [620, 3, 0, "-", "device"], [621, 3, 0, "-", "elementwise"], [622, 3, 0, "-", "experimental"], [623, 3, 0, "-", "general"], [624, 3, 0, "-", "gradients"], [625, 3, 0, "-", "layers"], [626, 3, 0, "-", "linear_algebra"], [627, 3, 0, "-", "losses"], [628, 3, 0, "-", "manipulation"], [629, 3, 0, "-", "meta"], [630, 3, 0, "-", "nest"], [631, 3, 0, "-", "norms"], [632, 3, 0, "-", "random"], [633, 3, 0, "-", "searching"], [634, 3, 0, "-", "set"], [635, 3, 0, "-", "sorting"], [636, 3, 0, "-", "statistical"], [637, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[361, 3, 0, "-", "activations"], [362, 3, 0, "-", "constants"], [363, 3, 0, "-", "creation"], [364, 3, 0, "-", "data_type"], [365, 3, 0, "-", "device"], [366, 3, 0, "-", "elementwise"], [367, 3, 0, "-", "general"], [368, 3, 0, "-", "gradients"], [369, 3, 0, "-", "layers"], [370, 3, 0, "-", "linear_algebra"], [371, 3, 0, "-", "losses"], [372, 3, 0, "-", "manipulation"], [373, 3, 0, "-", "meta"], [374, 3, 0, "-", "nest"], [375, 3, 0, "-", "norms"], [376, 3, 0, "-", "random"], [377, 3, 0, "-", "searching"], [378, 3, 0, "-", "set"], [379, 3, 0, "-", "sorting"], [380, 3, 0, "-", "sparse_array"], [381, 3, 0, "-", "statistical"], [382, 3, 0, "-", "utility"]], "ivy.stateful": [[778, 3, 0, "-", "activations"], [779, 3, 0, "-", "converters"], [780, 3, 0, "-", "helpers"], [781, 3, 0, "-", "initializers"], [782, 3, 0, "-", "layers"], [783, 3, 0, "-", "losses"], [784, 3, 0, "-", "module"], [785, 3, 0, "-", "norms"], [786, 3, 0, "-", "optimizers"], [787, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[778, 1, 1, "", "ELU"], [778, 1, 1, "", "GEGLU"], [778, 1, 1, "", "GELU"], [778, 1, 1, "", "Hardswish"], [778, 1, 1, "", "LeakyReLU"], [778, 1, 1, "", "LogSigmoid"], [778, 1, 1, "", "LogSoftmax"], [778, 1, 1, "", "Logit"], [778, 1, 1, "", "Mish"], [778, 1, 1, "", "PReLU"], [778, 1, 1, "", "ReLU"], [778, 1, 1, "", "ReLU6"], [778, 1, 1, "", "SeLU"], [778, 1, 1, "", "SiLU"], [778, 1, 1, "", "Sigmoid"], [778, 1, 1, "", "Softmax"], [778, 1, 1, "", "Softplus"], [778, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[778, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[778, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[779, 1, 1, "", "ModuleConverters"], [779, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[779, 0, 1, "", "from_flax_module"], [779, 0, 1, "", "from_haiku_module"], [779, 0, 1, "", "from_keras_module"], [779, 0, 1, "", "from_paddle_module"], [779, 0, 1, "", "from_torch_module"], [779, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[780, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[781, 1, 1, "", "Constant"], [781, 1, 1, "", "FirstLayerSiren"], [781, 1, 1, "", "GlorotUniform"], [781, 1, 1, "", "Initializer"], [781, 1, 1, "", "KaimingNormal"], [781, 1, 1, "", "Ones"], [781, 1, 1, "", "RandomNormal"], [781, 1, 1, "", "Siren"], [781, 1, 1, "", "Uniform"], [781, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[781, 0, 1, "", "__init__"], [781, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[781, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[781, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[781, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[781, 0, 1, "", "__init__"], [781, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[781, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[781, 0, 1, "", "__init__"], [781, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[781, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[781, 0, 1, "", "__init__"], [781, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[781, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[782, 1, 1, "", "AdaptiveAvgPool1d"], [782, 1, 1, "", "AdaptiveAvgPool2d"], [782, 1, 1, "", "AvgPool1D"], [782, 1, 1, "", "AvgPool2D"], [782, 1, 1, "", "AvgPool3D"], [782, 1, 1, "", "Conv1D"], [782, 1, 1, "", "Conv1DTranspose"], [782, 1, 1, "", "Conv2D"], [782, 1, 1, "", "Conv2DTranspose"], [782, 1, 1, "", "Conv3D"], [782, 1, 1, "", "Conv3DTranspose"], [782, 1, 1, "", "Dct"], [782, 1, 1, "", "DepthwiseConv2D"], [782, 1, 1, "", "Dropout"], [782, 1, 1, "", "Embedding"], [782, 1, 1, "", "FFT"], [782, 1, 1, "", "IFFT"], [782, 1, 1, "", "Identity"], [782, 1, 1, "", "LSTM"], [782, 1, 1, "", "Linear"], [782, 1, 1, "", "MaxPool1D"], [782, 1, 1, "", "MaxPool2D"], [782, 1, 1, "", "MaxPool3D"], [782, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[782, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[782, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[783, 1, 1, "", "BinaryCrossEntropyLoss"], [783, 1, 1, "", "CrossEntropyLoss"], [783, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[783, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[783, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[783, 0, 1, "", "__init__"]], "ivy.stateful.module": [[784, 1, 1, "", "Module"], [784, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[784, 0, 1, "", "__call__"], [784, 0, 1, "", "__init__"], [784, 5, 1, "", "buffers"], [784, 0, 1, "", "build"], [784, 5, 1, "", "build_mode"], [784, 5, 1, "", "built"], [784, 5, 1, "", "device"], [784, 5, 1, "", "dtype"], [784, 0, 1, "", "eval"], [784, 0, 1, "", "load"], [784, 5, 1, "", "module_dict"], [784, 0, 1, "", "register_buffer"], [784, 0, 1, "", "register_parameter"], [784, 0, 1, "", "save"], [784, 0, 1, "", "save_weights"], [784, 0, 1, "", "show_graph"], [784, 5, 1, "", "state_dict"], [784, 0, 1, "", "to_device"], [784, 0, 1, "", "trace_graph"], [784, 0, 1, "", "train"], [784, 5, 1, "", "training"], [784, 5, 1, "", "v"]], "ivy.stateful.norms": [[785, 1, 1, "", "BatchNorm2D"], [785, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[785, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[785, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[786, 1, 1, "", "Adam"], [786, 1, 1, "", "AdamW"], [786, 1, 1, "", "LAMB"], [786, 1, 1, "", "LARS"], [786, 1, 1, "", "Optimizer"], [786, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[786, 0, 1, "", "__init__"], [786, 0, 1, "", "set_state"], [786, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[786, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[786, 0, 1, "", "__init__"], [786, 0, 1, "", "set_state"], [786, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[786, 0, 1, "", "__init__"], [786, 0, 1, "", "set_state"], [786, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[786, 0, 1, "", "__init__"], [786, 0, 1, "", "set_state"], [786, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[786, 0, 1, "", "__init__"], [786, 0, 1, "", "set_state"], [786, 5, 1, "", "state"]], "ivy.stateful.sequential": [[787, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[787, 0, 1, "", "__init__"]], "ivy.utils": [[788, 3, 0, "-", "assertions"], [789, 3, 0, "-", "backend"], [793, 3, 0, "-", "binaries"], [794, 3, 0, "-", "dynamic_import"], [795, 3, 0, "-", "einsum_parser"], [796, 3, 0, "-", "einsum_path_helpers"], [797, 3, 0, "-", "exceptions"], [798, 3, 0, "-", "inspection"], [799, 3, 0, "-", "logging"], [800, 3, 0, "-", "profiler"], [801, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[788, 2, 1, "", "check_all"], [788, 2, 1, "", "check_all_or_any_fn"], [788, 2, 1, "", "check_any"], [788, 2, 1, "", "check_dev_correct_formatting"], [788, 2, 1, "", "check_dimensions"], [788, 2, 1, "", "check_elem_in_list"], [788, 2, 1, "", "check_equal"], [788, 2, 1, "", "check_exists"], [788, 2, 1, "", "check_false"], [788, 2, 1, "", "check_gather_input_valid"], [788, 2, 1, "", "check_gather_nd_input_valid"], [788, 2, 1, "", "check_greater"], [788, 2, 1, "", "check_inplace_sizes_valid"], [788, 2, 1, "", "check_isinstance"], [788, 2, 1, "", "check_kernel_padding_size"], [788, 2, 1, "", "check_less"], [788, 2, 1, "", "check_one_way_broadcastable"], [788, 2, 1, "", "check_same_dtype"], [788, 2, 1, "", "check_shape"], [788, 2, 1, "", "check_shapes_broadcastable"], [788, 2, 1, "", "check_true"], [788, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[790, 3, 0, "-", "ast_helpers"], [791, 3, 0, "-", "handler"], [792, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[790, 1, 1, "", "ImportTransformer"], [790, 1, 1, "", "IvyLoader"], [790, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "impersonate_import"], [790, 0, 1, "", "visit_Import"], [790, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[790, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[791, 1, 1, "", "ContextManager"], [791, 2, 1, "", "choose_random_backend"], [791, 2, 1, "", "current_backend"], [791, 2, 1, "", "dynamic_backend_converter"], [791, 2, 1, "", "prevent_access_locally"], [791, 2, 1, "", "previous_backend"], [791, 2, 1, "", "set_backend"], [791, 2, 1, "", "set_backend_to_specific_version"], [791, 2, 1, "", "set_jax_backend"], [791, 2, 1, "", "set_mxnet_backend"], [791, 2, 1, "", "set_numpy_backend"], [791, 2, 1, "", "set_paddle_backend"], [791, 2, 1, "", "set_tensorflow_backend"], [791, 2, 1, "", "set_torch_backend"], [791, 2, 1, "", "unset_backend"], [791, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[791, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[792, 2, 1, "", "clear_sub_backends"], [792, 2, 1, "", "find_available_sub_backends"], [792, 2, 1, "", "fn_name_from_version_specific_fn_name"], [792, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [792, 2, 1, "", "set_sub_backend"], [792, 2, 1, "", "set_sub_backend_to_specific_version"], [792, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[793, 2, 1, "", "check_for_binaries"], [793, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[794, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[795, 2, 1, "", "convert_interleaved_input"], [795, 2, 1, "", "convert_subscripts"], [795, 2, 1, "", "find_output_shape"], [795, 2, 1, "", "find_output_str"], [795, 2, 1, "", "gen_unused_symbols"], [795, 2, 1, "", "get_symbol"], [795, 2, 1, "", "has_valid_einsum_chars_only"], [795, 2, 1, "", "is_valid_einsum_char"], [795, 2, 1, "", "legalise_einsum_expr"], [795, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[796, 2, 1, "", "can_dot"], [796, 2, 1, "", "compute_size_by_dict"], [796, 2, 1, "", "find_contraction"], [796, 2, 1, "", "flop_count"], [796, 2, 1, "", "greedy_path"], [796, 2, 1, "", "optimal_path"], [796, 2, 1, "", "parse_einsum_input"], [796, 2, 1, "", "parse_possible_contraction"], [796, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[797, 7, 1, "", "InplaceUpdateException"], [797, 7, 1, "", "IvyAttributeError"], [797, 7, 1, "", "IvyBackendException"], [797, 7, 1, "", "IvyBroadcastShapeError"], [797, 7, 1, "", "IvyDeviceError"], [797, 7, 1, "", "IvyDtypePromotionError"], [797, 7, 1, "", "IvyError"], [797, 7, 1, "", "IvyException"], [797, 7, 1, "", "IvyIndexError"], [797, 7, 1, "", "IvyInvalidBackendException"], [797, 7, 1, "", "IvyNotImplementedException"], [797, 7, 1, "", "IvyValueError"], [797, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[797, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[797, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[798, 2, 1, "", "add_array_specs"], [798, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[799, 2, 1, "", "set_logging_mode"], [799, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[800, 1, 1, "", "Profiler"], [800, 2, 1, "", "tensorflow_profile_start"], [800, 2, 1, "", "tensorflow_profile_stop"], [800, 2, 1, "", "torch_profiler_init"], [800, 2, 1, "", "torch_profiler_start"], [800, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[800, 0, 1, "", "__init__"], [800, 4, 1, "", "print_stats"], [800, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[801, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[761, 3, 0, "-", "assertions"], [762, 3, 0, "-", "available_frameworks"], [763, 3, 0, "-", "function_testing"], [764, 3, 0, "-", "globals"], [765, 3, 0, "-", "hypothesis_helpers"], [770, 3, 0, "-", "multiprocessing"], [771, 3, 0, "-", "pipeline_helper"], [772, 3, 0, "-", "structs"], [773, 3, 0, "-", "test_parameter_flags"], [774, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[761, 2, 1, "", "assert_all_close"], [761, 2, 1, "", "assert_same_type"], [761, 2, 1, "", "assert_same_type_and_shape"], [761, 2, 1, "", "check_unsupported_device"], [761, 2, 1, "", "check_unsupported_device_and_dtype"], [761, 2, 1, "", "check_unsupported_dtype"], [761, 2, 1, "", "test_unsupported_function"], [761, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[763, 2, 1, "", "args_to_container"], [763, 2, 1, "", "args_to_frontend"], [763, 2, 1, "", "arrays_to_frontend"], [763, 2, 1, "", "as_lists"], [763, 2, 1, "", "convtrue"], [763, 2, 1, "", "create_args_kwargs"], [763, 2, 1, "", "flatten"], [763, 2, 1, "", "flatten_and_to_np"], [763, 2, 1, "", "flatten_frontend"], [763, 2, 1, "", "flatten_frontend_fw_to_np"], [763, 2, 1, "", "flatten_frontend_to_np"], [763, 2, 1, "", "get_frontend_ret"], [763, 2, 1, "", "get_ret_and_flattened_np_array"], [763, 2, 1, "", "gradient_incompatible_function"], [763, 2, 1, "", "gradient_test"], [763, 2, 1, "", "gradient_unsupported_dtypes"], [763, 2, 1, "", "kwargs_to_args_n_kwargs"], [763, 2, 1, "", "test_frontend_function"], [763, 2, 1, "", "test_frontend_method"], [763, 2, 1, "", "test_function"], [763, 2, 1, "", "test_function_backend_computation"], [763, 2, 1, "", "test_function_ground_truth_computation"], [763, 2, 1, "", "test_gradient_backend_computation"], [763, 2, 1, "", "test_gradient_ground_truth_computation"], [763, 2, 1, "", "test_method"], [763, 2, 1, "", "test_method_backend_computation"], [763, 2, 1, "", "test_method_ground_truth_computation"], [763, 2, 1, "", "traced_if_required"], [763, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[764, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [764, 7, 1, "", "InterruptedTest"], [764, 1, 1, "", "TestData"], [764, 2, 1, "", "setup_api_test"], [764, 2, 1, "", "setup_frontend_test"], [764, 2, 1, "", "teardown_api_test"], [764, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[764, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[764, 0, 1, "", "__init__"], [764, 4, 1, "", "fn_name"], [764, 4, 1, "", "fn_tree"], [764, 4, 1, "", "is_method"], [764, 4, 1, "", "supported_device_dtypes"], [764, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[766, 3, 0, "-", "array_helpers"], [767, 3, 0, "-", "dtype_helpers"], [768, 3, 0, "-", "general_helpers"], [769, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[766, 2, 1, "", "array_and_broadcastable_shape"], [766, 2, 1, "", "array_bools"], [766, 2, 1, "", "array_helpers_dtype_info_helper"], [766, 2, 1, "", "array_indices_axis"], [766, 2, 1, "", "array_indices_put_along_axis"], [766, 2, 1, "", "array_values"], [766, 2, 1, "", "arrays_and_axes"], [766, 2, 1, "", "arrays_for_pooling"], [766, 2, 1, "", "broadcast_shapes"], [766, 2, 1, "", "cond_data_gen_helper"], [766, 2, 1, "", "create_concatenable_arrays_dtypes"], [766, 2, 1, "", "create_nested_input"], [766, 2, 1, "", "dtype_and_values"], [766, 2, 1, "", "dtype_array_query"], [766, 2, 1, "", "dtype_array_query_val"], [766, 2, 1, "", "dtype_values_axis"], [766, 2, 1, "", "einsum_helper"], [766, 2, 1, "", "get_first_solve_batch_matrix"], [766, 2, 1, "", "get_first_solve_matrix"], [766, 2, 1, "", "get_second_solve_batch_matrix"], [766, 2, 1, "", "get_second_solve_matrix"], [766, 2, 1, "", "list_of_size"], [766, 2, 1, "", "lists"], [766, 2, 1, "", "mutually_broadcastable_shapes"], [766, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[767, 2, 1, "", "array_dtypes"], [767, 2, 1, "", "cast_filter"], [767, 2, 1, "", "cast_filter_helper"], [767, 2, 1, "", "get_castable_dtype"], [767, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[768, 7, 1, "", "BroadcastError"], [768, 2, 1, "", "apply_safety_factor"], [768, 2, 1, "", "broadcast_shapes"], [768, 2, 1, "", "embedding_helper"], [768, 2, 1, "", "general_helpers_dtype_info_helper"], [768, 2, 1, "", "get_axis"], [768, 2, 1, "", "get_bounds"], [768, 2, 1, "", "get_mean_std"], [768, 2, 1, "", "get_shape"], [768, 2, 1, "", "matrix_is_stable"], [768, 2, 1, "", "reshape_shapes"], [768, 2, 1, "", "subsets"], [768, 2, 1, "", "two_broadcastable_shapes"], [768, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[769, 2, 1, "", "floats"], [769, 2, 1, "", "ints"], [769, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[770, 2, 1, "", "backend_proc"], [770, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[771, 1, 1, "", "BackendHandler"], [771, 1, 1, "", "BackendHandlerMode"], [771, 1, 1, "", "WithBackendContext"], [771, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[771, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[771, 4, 1, "", "SetBackend"], [771, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[771, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[772, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[772, 0, 1, "", "__init__"], [772, 4, 1, "", "framework_init_module"], [772, 4, 1, "", "init_name"], [772, 4, 1, "", "ivy_init_module"], [772, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[773, 1, 1, "", "DynamicFlag"], [773, 1, 1, "", "FrontendFunctionTestFlags"], [773, 1, 1, "", "FrontendInitTestFlags"], [773, 1, 1, "", "FrontendMethodTestFlags"], [773, 1, 1, "", "FunctionTestFlags"], [773, 1, 1, "", "InitMethodTestFlags"], [773, 1, 1, "", "MethodTestFlags"], [773, 1, 1, "", "TestFlags"], [773, 2, 1, "", "build_flag"], [773, 2, 1, "", "frontend_function_flags"], [773, 2, 1, "", "frontend_init_flags"], [773, 2, 1, "", "frontend_method_flags"], [773, 2, 1, "", "function_flags"], [773, 2, 1, "", "init_method_flags"], [773, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[773, 0, 1, "", "__init__"], [773, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[773, 0, 1, "", "__init__"], [773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[773, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[774, 2, 1, "", "handle_frontend_method"], [774, 2, 1, "", "handle_frontend_test"], [774, 2, 1, "", "handle_method"], [774, 2, 1, "", "handle_test"], [774, 2, 1, "", "num_positional_args"], [774, 2, 1, "", "num_positional_args_helper"], [774, 2, 1, "", "num_positional_args_method"], [774, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 16, 27, 41, 42], "creat": [0, 39, 40, 808], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 8, 10, 16, 35, 802, 822, 827, 830, 833, 838, 854, 855, 856], "ivi": [3, 4, 5, 8, 15, 18, 26, 27, 28, 39, 40, 42, 43, 45, 802, 808, 810, 815, 817, 819, 822, 824, 830, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 847, 854, 855, 856, 867], "alexnet": 3, "instal": [3, 4, 8, 18, 39, 40, 42, 802, 847], "data": [3, 4, 5, 8, 10, 18, 27, 39, 50, 73, 104, 364, 619, 634, 739, 740, 741, 742, 820, 832, 835, 843, 846], "prepar": [3, 4, 5, 8], "infer": [3, 4, 5, 8, 829], "torch": [3, 4, 5, 8, 35, 42, 861, 862], "tensorflow": [3, 4, 5, 10, 14, 35, 42, 43, 44, 861], "jax": [3, 4, 5, 7, 9, 10, 35, 42, 861], "appendix": [3, 5], "code": [3, 18, 19, 20, 21, 28, 39, 826, 834, 836], "implement": [3, 5, 819, 830, 832, 852], "bert": 4, "dependeci": 4, "import": [4, 5, 8, 10, 18, 39, 40, 43, 794], "modul": [4, 784, 820, 821, 844, 855], "sequenc": [4, 827], "classif": 4, "model": [4, 5, 7, 8, 9, 12, 13, 14, 25, 26, 27, 28, 39, 40, 41, 42, 43, 45, 845, 846], "imag": [5, 8, 56, 79, 249, 804, 817], "segment": 5, "unet": 5, "custom": [5, 815, 817, 830, 834, 843, 846], "preprocess": 5, "load": [5, 8, 10, 759, 843], "visualis": [5, 8], "initi": [5, 8, 781, 844], "nativ": [5, 8, 815, 838], "pretrain": [5, 8], "weight": [5, 8, 843], "mask": 5, "function": [5, 18, 27, 28, 39, 40, 41, 43, 45, 105, 763, 808, 818, 820, 821, 824, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 840, 845, 846, 855], "us": [5, 8, 15, 23, 26, 43, 45, 802, 804, 808, 809, 814, 830, 833, 843, 847, 854, 855], "your": [5, 8, 810, 835], "backend": [5, 10, 18, 27, 39, 40, 42, 43, 789, 792, 808, 816, 820, 830, 836, 840, 846], "acceler": [7, 9, 10], "mmpretrain": 7, "resnet": [8, 46], "set": [8, 35, 39, 40, 64, 87, 378, 634, 809, 816, 825, 837, 847], "label": 8, "resnet34": 8, "classifi": 8, "resnet50": 8, "pytorch": [9, 10, 12, 41, 861], "xgboost": 10, "test": [10, 41, 763, 773, 774, 777, 808, 809, 810, 814, 819, 825, 833, 835], "compar": 10, "xgb_frontend": 10, "xgbclassifi": 10, "xgb": 10, "more": [10, 809, 838, 852], "exhaust": 10, "evalu": 10, "train": [10, 39, 41, 43], "time": 10, "v": [10, 22, 32, 35, 826, 846, 851, 854], "number": [10, 769, 827], "boost": 10, "round": [10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 41, 279, 834], "fraction": 10, "comparison": [10, 843], "metric": [10, 43], "guid": [11, 16], "transpil": [12, 13, 14, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 41, 45, 802, 845, 847, 855], "build": [12, 13, 14, 43, 804, 817, 840], "top": [12, 13, 14, 811, 819], "up": [12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 41, 809, 825, 834, 847], "haiku": 13, "develop": 15, "convolut": 15, "network": [15, 40, 43, 843, 845], "tutori": [16, 43], "And": 16, "learn": [16, 17, 861], "basic": [16, 17, 39, 40, 810, 832], "write": [18, 26, 832, 835], "content": [18, 41], "handler": [18, 27, 791, 792, 840], "structur": [18, 27, 817, 830, 846], "api": [18, 27, 28, 808, 814, 818, 819, 830, 836, 840, 842, 844, 845, 847, 851, 854, 855, 856, 858, 865, 867], "state": [18, 27, 28, 844, 846, 854], "unifi": [19, 22, 23, 29, 32, 33, 34, 39, 802, 842, 852, 856, 863, 867], "trace": [20, 22, 23, 28, 681, 824], "lazi": [22, 32, 854], "eager": [22, 32, 854], "how": [23, 808, 817, 825, 834, 835], "decor": [23, 34, 824, 829, 835], "ani": [24, 25, 27, 28, 758], "librari": [24, 27, 28, 43, 45, 855], "odsc": 27, "framework": [27, 33, 39, 762, 775, 830, 833, 841, 861, 864, 867, 868], "graph": [27, 44, 862, 867], "tracer": [27, 840, 845, 847, 854, 862, 867], "quickstart": 28, "get": [28, 802, 810, 847], "familiar": 28, "0": [29, 30, 31, 32, 36, 37], "1": [30, 32, 33, 34, 35, 38, 45, 861], "compil": [30, 32, 33, 34, 40, 854, 859, 864, 866, 867], "2": [31, 34, 36, 45, 861], "select": 33, "As": 34, "3": [35, 37, 38, 45], "dynam": [35, 43, 794, 816, 846], "static": 35, "todo": [35, 810], "explain": 35, "via": 35, "why": [35, 835, 852], "mode": [35, 820, 824, 837], "i": [35, 802, 817, 838], "true": 35, "default": [35, 534], "when": [35, 802], "from": [35, 42, 847], "numpi": [35, 42, 832, 861], "fals": 35, "kornia": 36, "perceiv": 37, "stabl": 38, "diffus": 38, "oper": [39, 827, 837, 842, 846], "ml": [39, 850, 863, 867], "chang": 39, "one": 39, "line": [39, 810], "No": [39, 809, 852], "need": [39, 835], "worri": 39, "about": 39, "type": [39, 50, 73, 364, 619, 820, 828, 832, 846], "differ": 39, "them": 39, "all": [39, 757], "standalon": [39, 828], "defin": [39, 40, 41, 43], "optim": [39, 786, 844], "input": [39, 40, 827], "target": 39, "loss": [39, 59, 82, 371, 627, 783], "loop": [39, 43], "sampl": 40, "check": [40, 826, 846], "result": 40, "simpl": 40, "neural": 40, "deepmind": [41, 42], "": [41, 43, 808, 817, 834, 847], "perceiverio": [41, 42], "tabl": [41, 817, 820], "construct": [41, 843], "some": 41, "helper": [41, 765, 766, 767, 768, 769, 771, 774, 780, 790, 796, 833, 835, 836], "pipelin": [41, 43, 771, 817, 819, 835, 846], "dataset": [41, 43], "download": 41, "dataload": 41, "gpu": [42, 846], "introduct": [42, 45, 832, 833], "python3": 42, "8": 42, "setup": [42, 826], "kernel": 42, "clone": [42, 809, 819], "repo": [42, 809], "ivy_model": 42, "run": [42, 810, 814, 817, 825, 835], "end": 43, "let": 43, "we": [43, 835], "ar": 43, "mnist": 43, "thi": 43, "temporari": 43, "loader": 43, "util": [43, 67, 90, 382, 637, 776], "plot": 43, "save": [43, 760, 843], "huggingfac": 44, "deit": 44, "can": 44, "visual": 44, "displai": 44, "html": 44, "file": 44, "browser": [44, 810], "To": [45, 810], "interfac": 45, "telemetri": 45, "18": 46, "activ": [47, 69, 361, 615, 778], "convers": [48, 71, 829], "creation": [49, 72, 363, 618], "devic": [51, 74, 365, 620, 821, 827, 832], "elementwis": [52, 75, 103, 366, 621], "experiment": [53, 76, 622, 808], "gener": [54, 77, 367, 623, 768, 830, 835, 838, 854], "gradient": [55, 78, 343, 368, 624, 830], "layer": [57, 80, 369, 625, 782], "linear": [58, 81, 370, 626, 649], "algebra": [58, 81, 370, 626], "manipul": [60, 83, 372, 628], "norm": [61, 84, 375, 631, 785], "random": [62, 85, 376, 632], "search": [63, 86, 377, 633], "sort": [65, 88, 379, 635, 746], "statist": [66, 89, 381, 636], "wrap": [68, 91, 829], "base": [70, 92, 102], "cp": 93, "tensor": [93, 94, 95, 96, 97, 100], "parafac2": 94, "tr": 95, "tt": 96, "tucker": [97, 442], "arrai": [98, 101, 123, 380, 766, 814, 815, 819, 827, 842, 851, 854, 858], "contain": [99, 810, 818, 843], "factor": 100, "nest": [101, 374, 630], "class": [104, 775, 815, 824, 832, 842], "gelu": 106, "hardswish": 107, "leaky_relu": 108, "log_softmax": 109, "mish": 110, "relu": 111, "sigmoid": 112, "softmax": 113, "softplu": 114, "softsign": 115, "cmp_i": 116, "cmp_isnot": 117, "for_loop": 118, "if_els": 119, "try_except": 120, "while_loop": 121, "arang": 122, "asarrai": 124, "copy_arrai": 125, "empti": 126, "empty_lik": 127, "ey": 128, "from_dlpack": 129, "note": [129, 140, 618], "frombuff": 130, "full": [131, 833], "full_lik": 132, "linspac": 133, "logspac": 134, "meshgrid": 135, "native_arrai": 136, "one_hot": 137, "ones": 138, "ones_lik": 139, "to_dlpack": 140, "tril": 141, "triu": 142, "triu_indic": 143, "zero": 144, "zeros_lik": 145, "as_ivy_dtyp": 146, "as_native_dtyp": 147, "astyp": 148, "broadcast_arrai": 149, "broadcast_to": 150, "can_cast": 151, "check_float": 152, "closest_valid_dtyp": 153, "default_complex_dtyp": 154, "default_dtyp": 155, "default_float_dtyp": 156, "default_int_dtyp": 157, "default_uint_dtyp": 158, "dtype": [159, 767, 827], "dtype_bit": 160, "finfo": 161, "function_supported_dtyp": 162, "function_unsupported_dtyp": 163, "iinfo": 164, "infer_default_dtyp": 165, "invalid_dtyp": 166, "is_bool_dtyp": 167, "is_complex_dtyp": 168, "is_float_dtyp": 169, "is_hashable_dtyp": 170, "is_int_dtyp": 171, "is_native_dtyp": 172, "is_uint_dtyp": 173, "promote_typ": 174, "promote_types_of_input": 175, "result_typ": 176, "set_default_complex_dtyp": 177, "set_default_dtyp": 178, "set_default_float_dtyp": 179, "set_default_int_dtyp": 180, "set_default_uint_dtyp": 181, "type_promote_arrai": 182, "unset_default_complex_dtyp": 183, "unset_default_dtyp": 184, "unset_default_float_dtyp": 185, "unset_default_int_dtyp": 186, "unset_default_uint_dtyp": 187, "valid_dtyp": 188, "as_ivy_dev": 189, "as_native_dev": 190, "clear_cached_mem_on_dev": 191, "default_devic": 192, "dev": 193, "dev_util": 194, "function_supported_devic": 195, "function_unsupported_devic": 196, "get_all_ivy_arrays_on_dev": 197, "gpu_is_avail": 198, "handle_soft_device_vari": 199, "num_cpu_cor": 200, "num_gpu": 201, "num_ivy_arrays_on_dev": 202, "percent_used_mem_on_dev": 203, "print_all_ivy_arrays_on_dev": 204, "set_default_devic": 205, "set_soft_device_mod": 206, "paramet": [206, 568, 569, 574, 575, 577, 578, 620, 623, 773, 778, 837], "set_split_factor": 207, "split_factor": 208, "split_func_cal": 209, "to_devic": 210, "total_mem_on_dev": 211, "tpu_is_avail": 212, "unset_default_devic": 213, "unset_soft_device_mod": 214, "used_mem_on_dev": 215, "ab": 216, "aco": 217, "acosh": 218, "add": [219, 822, 833, 867], "angl": 220, "asin": 221, "asinh": 222, "atan": 223, "atan2": 224, "atanh": 225, "bitwise_and": 226, "bitwise_invert": 227, "bitwise_left_shift": 228, "bitwise_or": 229, "bitwise_right_shift": 230, "bitwise_xor": 231, "ceil": 232, "co": 233, "cosh": 234, "deg2rad": 235, "divid": 236, "equal": 237, "erf": 238, "exp": 239, "exp2": 240, "expm1": 241, "floor": 242, "floor_divid": 243, "fmin": 244, "fmod": 245, "gcd": 246, "greater": 247, "greater_equ": 248, "isfinit": 250, "isinf": 251, "isnan": 252, "isreal": 253, "lcm": 254, "less": 255, "less_equ": 256, "log": [257, 799, 809], "log10": 258, "log1p": 259, "log2": 260, "logaddexp": 261, "logaddexp2": 262, "logical_and": 263, "logical_not": 264, "logical_or": 265, "logical_xor": 266, "maximum": 267, "minimum": 268, "multipli": 269, "nan_to_num": 270, "neg": 271, "not_equ": 272, "posit": [273, 827], "pow": 274, "rad2deg": 275, "real": 276, "reciproc": 277, "remaind": 278, "sign": 280, "sin": 281, "sinh": 282, "sqrt": 283, "squar": 284, "subtract": 285, "tan": [286, 822, 833], "tanh": 287, "trapz": 288, "trunc": 289, "trunc_divid": 290, "celu": 291, "elu": 292, "hardshrink": 293, "hardtanh": 294, "logit": 295, "logsigmoid": 296, "prelu": 297, "relu6": 298, "scaled_tanh": 299, "selu": 300, "silu": 301, "softshrink": 302, "stanh": 303, "tanhshrink": 304, "threshold": 305, "thresholded_relu": 306, "blackman_window": 307, "eye_lik": 308, "hamming_window": 309, "hann_window": 310, "indic": 311, "kaiser_bessel_derived_window": 312, "kaiser_window": 313, "mel_weight_matrix": 314, "ndenumer": 315, "ndindex": 316, "polyv": 317, "random_cp": 318, "random_parafac2": 319, "random_tr": 320, "random_tt": 321, "random_tuck": 322, "tril_indic": 323, "trilu": 324, "unsorted_segment_mean": 325, "unsorted_segment_min": 326, "unsorted_segment_sum": 327, "vorbis_window": 328, "allclos": 329, "amax": 330, "amin": 331, "binar": 332, "conj": 333, "copysign": 334, "count_nonzero": 335, "diff": 336, "digamma": 337, "erfc": 338, "fix": [339, 808, 825], "float_pow": 340, "fmax": 341, "frexp": 342, "hypot": 344, "isclos": 345, "ldexp": 346, "lerp": 347, "lgamma": 348, "modf": 349, "nansum": 350, "nextaft": 351, "signbit": 352, "sinc": 353, "sparsify_tensor": 354, "xlogi": 355, "zeta": 356, "reduc": 357, "bind_custom_gradient_funct": 358, "jvp": 359, "vjp": 360, "constant": [362, 616], "meta": [373, 629], "spars": 380, "adaptive_avg_pool1d": 383, "adaptive_avg_pool2d": 384, "adaptive_max_pool2d": 385, "area_interpol": 386, "avg_pool1d": 387, "avg_pool2d": 388, "avg_pool3d": 389, "dct": 390, "dft": 391, "dropout1d": 392, "dropout2d": 393, "dropout3d": 394, "embed": 395, "fft": 396, "fft2": 397, "generate_einsum_equ": 398, "get_interpolate_kernel": 399, "idct": 400, "ifft": 401, "ifftn": 402, "interp": 403, "interpol": 404, "max_pool1d": 405, "max_pool2d": 406, "max_pool3d": 407, "max_unpool1d": 408, "nearest_interpol": 409, "pool": 410, "reduce_window": 411, "rfft": 412, "rfftn": 413, "rnn": 414, "sliding_window": 415, "stft": 416, "adjoint": 417, "batched_out": 418, "cond": 419, "diagflat": 420, "dot": 421, "eig": [422, 661], "eigh_tridiagon": 423, "eigval": 424, "general_inner_product": 425, "higher_order_mo": 426, "initialize_tuck": 427, "khatri_rao": 428, "kron": 429, "kroneck": 430, "make_svd_non_neg": 431, "matrix_exp": 432, "mode_dot": 433, "multi_dot": 434, "multi_mode_dot": 435, "partial_tuck": 436, "solve_triangular": 437, "svd_flip": 438, "tensor_train": 439, "truncated_svd": 440, "tt_matrix_to_tensor": 441, "hinge_embedding_loss": 443, "huber_loss": 444, "kl_div": 445, "l1_loss": 446, "log_poisson_loss": 447, "poisson_nll_loss": 448, "smooth_l1_loss": 449, "soft_margin_loss": 450, "as_strid": 451, "associative_scan": 452, "atleast_1d": 453, "atleast_2d": 454, "atleast_3d": 455, "broadcast_shap": 456, "check_scalar": 457, "choos": 458, "column_stack": 459, "concat_from_sequ": 460, "dsplit": 461, "dstack": 462, "expand": 463, "fill_diagon": 464, "flatten": 465, "fliplr": 466, "flipud": 467, "fold": 468, "heavisid": 469, "hsplit": 470, "hstack": 471, "i0": 472, "matric": 473, "moveaxi": 474, "pad": 475, "partial_fold": 476, "partial_tensor_to_vec": 477, "partial_unfold": 478, "partial_vec_to_tensor": 479, "put_along_axi": 480, "rot90": 481, "soft_threshold": 482, "take": 483, "take_along_axi": 484, "top_k": 485, "trim_zero": 486, "unfold": 487, "unique_consecut": 488, "vsplit": 489, "vstack": 490, "batch_norm": 491, "group_norm": 492, "instance_norm": 493, "l1_normal": 494, "l2_normal": 495, "local_response_norm": 496, "lp_normal": 497, "bernoulli": 498, "beta": 499, "dirichlet": 500, "gamma": 501, "poisson": 502, "unravel_index": 503, "invert_permut": 504, "lexsort": 505, "is_ivy_sparse_arrai": 506, "is_native_sparse_arrai": 507, "native_sparse_arrai": 508, "native_sparse_array_to_indices_values_and_shap": 509, "bincount": 510, "corrcoef": 511, "cov": 512, "cummax": 513, "cummin": 514, "histogram": 515, "igamma": 516, "median": 517, "nanmean": 518, "nanmedian": 519, "nanmin": 520, "nanprod": 521, "quantil": 522, "optional_get_el": 523, "all_equ": 524, "arg_info": 525, "arg_nam": 526, "array_equ": 527, "assert_supports_inplac": 528, "cache_fn": 529, "clip_matrix_norm": 530, "clip_vector_norm": 531, "container_typ": 532, "current_backend_str": 533, "einops_rearrang": 535, "einops_reduc": 536, "einops_repeat": 537, "exist": [538, 804, 834], "fourier_encod": 539, "function_supported_devices_and_dtyp": 540, "function_unsupported_devices_and_dtyp": 541, "gather": 542, "gather_nd": 543, "get_all_arrays_in_memori": 544, "get_item": 545, "get_num_dim": 546, "get_referrers_recurs": 547, "has_nan": 548, "inplace_arrays_support": 549, "inplace_decr": 550, "inplace_incr": 551, "inplace_upd": 552, "inplace_variables_support": 553, "is_arrai": 554, "is_ivy_arrai": 555, "is_ivy_contain": 556, "is_ivy_nested_arrai": 557, "is_native_arrai": 558, "isin": 559, "isscalar": 560, "items": 561, "match_kwarg": 562, "multiprocess": [563, 770], "num_arrays_in_memori": 564, "print_all_arrays_in_memori": 565, "scatter_flat": 566, "scatter_nd": 567, "set_array_mod": 568, "set_exception_trace_mod": 569, "set_inplace_mod": 570, "set_item": 571, "set_min_bas": 572, "set_min_denomin": 573, "set_nestable_mod": 574, "set_precise_mod": 575, "set_queue_timeout": 576, "set_shape_array_mod": 577, "set_show_func_wrapper_trace_mod": 578, "set_tmp_dir": 579, "shape": [580, 634, 739, 740, 741, 742, 829, 846], "stable_divid": 581, "stable_pow": 582, "stride": 583, "supports_inplace_upd": 584, "to_ivy_shap": 585, "to_list": 586, "to_native_shap": 587, "to_numpi": 588, "to_scalar": 589, "try_else_non": 590, "unset_array_mod": 591, "unset_exception_trace_mod": 592, "unset_inplace_mod": 593, "unset_min_bas": 594, "unset_min_denomin": 595, "unset_nestable_mod": 596, "unset_precise_mod": 597, "unset_queue_timeout": 598, "unset_shape_array_mod": 599, "unset_show_func_wrapper_trace_mod": 600, "unset_tmp_dir": 601, "value_is_nan": 602, "vmap": 603, "adam_step": 604, "adam_upd": 605, "execute_with_gradi": [606, 830], "grad": 607, "gradient_descent_upd": 608, "jac": 609, "lamb_upd": 610, "lars_upd": 611, "optimizer_upd": 612, "stop_gradi": 613, "value_and_grad": 614, "control": [617, 846], "flow": [617, 846], "op": 617, "depend": [634, 739, 740, 741, 742], "output": [634, 739, 740, 741, 742], "conv": 638, "conv1d": 639, "conv1d_transpos": 640, "conv2d": 641, "conv2d_transpos": 642, "conv3d": 643, "conv3d_transpos": 644, "conv_general_dil": 645, "conv_general_transpos": 646, "depthwise_conv2d": 647, "dropout": 648, "lstm": 650, "lstm_updat": 651, "multi_head_attent": 652, "nm": 653, "roi_align": 654, "scaled_dot_product_attent": 655, "choleski": 656, "cross": 657, "det": 658, "diag": 659, "diagon": 660, "eigh": 662, "eigvalsh": 663, "inner": 664, "inv": 665, "lu_factor": 666, "matmul": 667, "matrix_norm": 668, "matrix_pow": 669, "matrix_rank": 670, "matrix_transpos": 671, "outer": 672, "pinv": 673, "qr": 674, "slogdet": 675, "solv": 676, "svd": 677, "svdval": 678, "tensordot": 679, "tensorsolv": 680, "vander": 682, "vecdot": 683, "vector_norm": 684, "vector_to_skew_symmetric_matrix": 685, "binary_cross_entropi": 686, "cross_entropi": 687, "sparse_cross_entropi": 688, "clip": 689, "concat": 690, "constant_pad": 691, "expand_dim": 692, "flip": 693, "permute_dim": 694, "repeat": 695, "reshap": 696, "roll": [697, 822], "split": 698, "squeez": 699, "stack": [700, 824], "swapax": 701, "tile": 702, "unstack": 703, "zero_pad": 704, "fomaml_step": 705, "maml_step": 706, "reptile_step": 707, "all_nested_indic": 708, "copy_nest": 709, "duplicate_array_index_chain": 710, "index_nest": 711, "insert_into_nest_at_index": 712, "insert_into_nest_at_indic": 713, "map": [714, 819], "map_nest_at_index": 715, "map_nest_at_indic": 716, "multi_index_nest": 717, "nested_ani": 718, "nested_argwher": 719, "nested_map": 720, "nested_multi_map": 721, "prune_empti": 722, "prune_nest_at_index": 723, "prune_nest_at_indic": 724, "set_nest_at_index": 725, "set_nest_at_indic": 726, "layer_norm": 727, "multinomi": 728, "randint": 729, "random_norm": 730, "random_uniform": 731, "seed": 732, "shuffl": 733, "argmax": 734, "argmin": 735, "argwher": 736, "nonzero": 737, "where": [738, 808, 825], "unique_al": 739, "unique_count": 740, "unique_invers": 741, "unique_valu": 742, "argsort": 743, "msort": 744, "searchsort": 745, "cumprod": 747, "cumsum": 748, "einsum": [749, 795, 796], "max": 750, "mean": 751, "min": 752, "prod": 753, "std": 754, "sum": 755, "var": 756, "assert": [761, 788, 824], "avail": 762, "global": [764, 837], "hypothesi": [765, 809, 833, 835], "struct": 772, "flag": 773, "convert": [779, 845], "sequenti": 787, "ast": 790, "sub": 792, "binari": [793, 809], "parser": 795, "path": 796, "except": [797, 824, 829], "inspect": 798, "profil": 800, "verbos": 801, "statu": 802, "ai": 802, "start": [802, 847], "pip": [802, 847], "document": 802, "dive": [802, 813], "deeper": 802, "should": 802, "contribut": [802, 803, 808, 834], "commun": 802, "citat": 802, "doc": [804, 817], "docker": [804, 809, 810, 817, 847], "conveni": [804, 817, 828], "script": [804, 817], "hub": 804, "local": [804, 810, 826], "without": [804, 833], "contributor": [805, 811, 812], "reward": 805, "badg": 805, "tier": 805, "error": [806, 824, 825], "handl": [806, 815, 821, 824, 829, 846], "help": [807, 810, 825], "resourc": 807, "open": 808, "task": 808, "fail": [808, 825, 835], "frontend": [808, 816, 832, 833, 845], "place": 808, "checklist": 808, "format": [808, 826, 860, 867], "extend": [808, 835, 838], "an": [808, 830], "issu": [808, 810, 826, 847], "github": [808, 809], "templat": 808, "fork": [809, 810], "pre": [809, 826], "commit": [809, 810, 819, 826], "pycharm": [809, 810, 826], "virtual": 809, "environ": 809, "miniconda": 809, "venv": 809, "interpret": 809, "window": 809, "maco": 809, "ubuntu": 809, "detail": 809, "free": 809, "wsl": 809, "codespac": 809, "The": [809, 810, 817, 830, 832, 842, 846, 851], "list": 810, "manag": 810, "who": 810, "ask": [810, 825], "With": 810, "command": 810, "pull": [810, 819], "request": [810, 819], "small": 810, "often": 810, "interact": 810, "most": 810, "out": [810, 827, 829, 831], "id": [810, 814], "program": 811, "core": 811, "rise": [811, 812], "leaderboard": 812, "deep": 813, "termin": 814, "regener": 814, "failur": 814, "skip": 814, "integr": [815, 819, 826, 834, 835], "version": [816, 836, 846], "support": [816, 820, 829, 832, 846], "builder": 817, "being": 817, "option": 817, "index": 817, "rst": 817, "partial_conf": 817, "py": 817, "prebuild": 817, "sh": 817, "extens": 817, "custom_autosummari": 817, "hide": 817, "discussion_link": 817, "skippable_funct": 817, "ivy_data": 817, "instanc": [818, 832, 833, 842], "method": [818, 832, 833, 842, 843], "special": [818, 820, 832], "nestabl": [818, 827, 828, 829], "continu": [819, 826], "push": 819, "pr": 819, "trigger": 819, "A": [819, 838], "down": 819, "view": [819, 829, 831], "store": 819, "retriev": 819, "repositori": 819, "nitti": 819, "gritti": 819, "storag": 819, "space": 819, "unifyai": 819, "determin": 819, "coverag": 819, "workflow": 819, "multipl": 819, "runner": 819, "race": 819, "condit": 819, "period": 819, "manual": 819, "dispatch": 819, "ci": 819, "dashboard": 819, "promot": [820, 832], "precis": 820, "non": [820, 838], "argument": [820, 821, 827, 829, 831, 832], "other": [820, 821], "unsupport": 820, "attribut": [820, 837], "case": [820, 843], "bug": 820, "cast": [820, 832], "superset": [820, 838], "docstr": [822, 823], "configur": [824, 833, 843], "func_wrapp": 824, "prune": 824, "handle_except": 824, "consist": [824, 835], "prerequir": 825, "common": [825, 826], "lint": [826, 834], "keyword": 827, "integ": 827, "primari": 828, "composit": 828, "mix": [828, 829, 835], "partial": [828, 829, 835], "order": 829, "wrapper": [829, 867, 868], "miscellan": 829, "overview": [830, 834], "usag": [830, 834, 838, 856], "signatur": 830, "design": [830, 836, 839], "our": 830, "polici": [830, 832], "specif": [830, 865, 866, 867], "consider": 830, "inplac": 831, "updat": 831, "copi": 831, "short": 832, "unus": 832, "rule": 832, "duplic": [832, 838], "valu": 833, "alia": 833, "formatt": 834, "functionorderingformatt": 834, "work": [834, 851, 857], "own": 835, "strategi": 835, "do": [835, 851], "effect": 835, "bonu": 835, "featur": 835, "self": 835, "explicit": 835, "test_array_funct": 835, "re": [835, 852], "navig": 836, "categor": 836, "submodul": 836, "unpin": 836, "properti": 837, "getter": 837, "setter": 837, "set_": 837, "unset_": 837, "behaviour": 838, "standard": [838, 851, 858, 867], "what": [838, 867], "balanc": 838, "effici": 838, "maxim": 838, "block": 840, "monkei": 842, "patch": 842, "represent": 843, "recurs": 843, "built": 843, "ins": 843, "access": 843, "compartment": 843, "role": 845, "faq": 846, "maintain": 846, "size": 846, "deploy": 846, "auto": 846, "differenti": 846, "replica": 846, "parallel": 846, "altern": 846, "sourc": 847, "folder": 847, "kei": 847, "question": 847, "glossari": 848, "motiv": 849, "explos": 850, "skeptic": 851, "complimentari": 851, "competit": 851, "infinit": 852, "shelf": 852, "life": 852, "One": 853, "liner": 853, "trace_graph": 854, "cach": 854, "sharp": [854, 855, 856], "bit": [854, 855, 856], "relat": 857, "infrastructur": [859, 867], "llvm": 859, "mlir": 859, "oneapi": 859, "exchang": [860, 867], "onnx": 860, "nnef": 860, "coreml": 860, "matlab": 861, "scipi": 861, "scikit": 861, "theano": 861, "panda": 861, "julia": 861, "apach": [861, 864], "spark": 861, "mllib": 861, "caff": 861, "chainer": 861, "mxnet": 861, "cntk": 861, "flux": 861, "dex": 861, "languag": 861, "tf": 862, "jaxpr": 862, "jit": 862, "fx": 862, "compani": [863, 867], "quansight": 863, "modular": 863, "octoml": 863, "multi": [864, 867], "vendor": [864, 865, 866, 867], "tvm": 864, "xla": 864, "gcc": 864, "tensorrt": 865, "cuda": 865, "icc": 866, "icx": 866, "nvcc": 866, "doe": 867, "eagerpi": 868, "kera": 868, "thinc": 868, "tensorli": 868, "neuropod": 868}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"promote_types": [[174, "promote-types"]], "as_native_dtype": [[147, "as-native-dtype"]], "set_default_float_dtype": [[179, "set-default-float-dtype"]], "is_complex_dtype": [[168, "is-complex-dtype"]], "to_dlpack": [[140, "to-dlpack"]], "Note": [[140, null], [129, null], [618, null], [618, null]], "dtype_bits": [[160, "dtype-bits"]], "result_type": [[176, "result-type"]], "can_cast": [[151, "can-cast"]], "closest_valid_dtype": [[153, "closest-valid-dtype"]], "is_uint_dtype": [[173, "is-uint-dtype"]], "astype": [[148, "astype"]], "tril": [[141, "tril"]], "default_int_dtype": [[157, "default-int-dtype"]], "set_default_int_dtype": [[180, "set-default-int-dtype"]], "set_default_complex_dtype": [[177, "set-default-complex-dtype"]], "as_ivy_dtype": [[146, "as-ivy-dtype"]], "triu_indices": [[143, "triu-indices"]], "invalid_dtype": [[166, "invalid-dtype"]], "default_dtype": [[155, "default-dtype"]], "iinfo": [[164, "iinfo"]], "default_uint_dtype": [[158, "default-uint-dtype"]], "is_hashable_dtype": [[170, "is-hashable-dtype"]], "infer_default_dtype": [[165, "infer-default-dtype"]], "broadcast_arrays": [[149, "broadcast-arrays"]], "default_float_dtype": [[156, "default-float-dtype"]], "default_complex_dtype": [[154, "default-complex-dtype"]], "function_supported_dtypes": [[162, "function-supported-dtypes"]], "set_default_uint_dtype": [[181, "set-default-uint-dtype"]], "promote_types_of_inputs": [[175, "promote-types-of-inputs"]], "ones_like": [[139, "ones-like"]], "finfo": [[161, "finfo"]], "is_float_dtype": [[169, "is-float-dtype"]], "set_default_dtype": [[178, "set-default-dtype"]], "zeros": [[144, "zeros"]], "is_int_dtype": [[171, "is-int-dtype"]], "is_bool_dtype": [[167, "is-bool-dtype"]], "unset_default_complex_dtype": [[183, "unset-default-complex-dtype"]], "broadcast_to": [[150, "broadcast-to"]], "ones": [[138, "ones"]], "is_native_dtype": [[172, "is-native-dtype"]], "dtype": [[159, "dtype"]], "type_promote_arrays": [[182, "type-promote-arrays"]], "check_float": [[152, "check-float"]], "triu": [[142, "triu"]], "zeros_like": [[145, "zeros-like"]], "function_unsupported_dtypes": [[163, "function-unsupported-dtypes"]], "Compiler Infrastructure": [[859, "compiler-infrastructure"], [867, "compiler-infrastructure"]], "LLVM": [[859, "id1"]], "MLIR": [[859, "id2"]], "OneAPI": [[859, "id3"]], "Vendor-Specific APIs": [[865, "vendor-specific-apis"], [867, "vendor-specific-apis"]], "TensorRT tensorrt": [[865, "tensorrt-tensorrt"]], "CUDA cuda": [[865, "cuda-cuda"]], "Inplace Updates": [[831, "inplace-updates"]], "out argument": [[831, "out-argument"]], "copy argument": [[831, "copy-argument"]], "Views": [[831, "views"]], "Ivy Tests": [[835, "ivy-tests"], [819, "ivy-tests"]], "Testing Pipeline": [[835, "testing-pipeline"]], "Hypothesis": [[835, "id1"]], "Data Generation": [[835, "id2"]], "Writing your own strategy": [[835, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[835, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[835, "ivy-test-decorators"]], "Writing Ivy Tests": [[835, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[835, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[835, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[835, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[835, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[835, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[835, "self-consistent-and-explicit-testing"]], "test_array_function": [[835, "id4"]], "Running Ivy Tests": [[835, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[835, "re-running-failed-ivy-tests"]], "Ivy as a Framework": [[841, "ivy-as-a-framework"], [27, "Ivy-as-a-Framework"]], "Operating Modes": [[837, "operating-modes"]], "Global Parameter Properties": [[837, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[837, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[837, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "ivy.unify()": [[856, "ivy-unify"]], "Unify API": [[856, "unify-api"]], "Usage": [[856, "usage"]], "Sharp bits": [[856, "sharp-bits"], [854, "sharp-bits"], [855, "sharp-bits"]], "Examples": [[856, "examples"], [854, "examples"], [855, "examples"], [802, "examples"], [827, "examples"]], "Frameworks": [[861, "frameworks"], [867, "frameworks"]], "MATLAB matlab": [[861, "matlab-matlab"]], "SciPy scipy": [[861, "scipy-scipy"]], "Torch torch": [[861, "torch-torch"]], "NumPy numpy": [[861, "numpy-numpy"]], "SciKit Learn scikit-learn": [[861, "scikit-learn-scikit-learn"]], "Theano theano": [[861, "theano-theano"]], "Pandas pandas": [[861, "pandas-pandas"]], "Julia julia": [[861, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[861, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[861, "caffe-caffe"]], "Chainer chainer": [[861, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[861, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[861, "mxnet-mxnet"]], "CNTK cntk": [[861, "cntk-cntk"]], "PyTorch pytorch": [[861, "pytorch-pytorch"]], "Flux flux": [[861, "flux-flux"]], "JAX jax": [[861, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[861, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[861, "dex-language-dex-language"]], "ML-Unifying Companies": [[863, "ml-unifying-companies"], [867, "ml-unifying-companies"]], "Quansight": [[863, "id1"]], "Modular": [[863, "id2"]], "OctoML": [[863, "id3"]], "Motivation": [[849, "motivation"]], "Graph Tracers": [[862, "graph-tracers"], [867, "graph-tracers"]], "tf.Graph": [[862, "tf-graph"]], "Jaxpr": [[862, "jaxpr"]], "torch.jit": [[862, "torch-jit"]], "torch.fx": [[862, "torch-fx"]], "Building Blocks": [[840, "building-blocks"]], "Backend Functional APIs \u2705": [[840, "backend-functional-apis"]], "Ivy Functional API \u2705": [[840, "ivy-functional-api"]], "Backend Handler \u2705": [[840, "backend-handler"]], "Tracer \ud83d\udea7": [[840, "tracer"]], "API Standards": [[858, "api-standards"], [867, "api-standards"]], "Array API Standard": [[858, "id1"]], "Superset Behaviour": [[838, "superset-behaviour"]], "Extending the Standard": [[838, "extending-the-standard"]], "What is the Superset?": [[838, "what-is-the-superset"]], "A Non-Duplicate Superset": [[838, "a-non-duplicate-superset"]], "What is not the Superset?": [[838, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[838, "balancing-generalization-with-efficiency"]], "More Examples": [[838, "more-examples"]], "Maximizing Usage of Native Functionality": [[838, "maximizing-usage-of-native-functionality"]], "Ivy Frontend Tests": [[833, "ivy-frontend-tests"]], "Introduction": [[833, "introduction"], [832, "introduction"], [42, "Introduction"]], "Frontend Test Examples": [[833, "frontend-test-examples"]], "ivy.tan()": [[833, "ivy-tan"]], "ivy.full()": [[833, "ivy-full"]], "Testing Without Using Tests Values": [[833, "testing-without-using-tests-values"]], "Alias functions": [[833, "alias-functions"]], "Frontend Instance Method Tests": [[833, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[833, "frontend-instance-method-test-examples"]], "ivy.add()": [[833, "ivy-add"]], "Hypothesis Helpers": [[833, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[833, "frontend-framework-testing-configuration"]], "Gradients": [[830, "gradients"], [624, "gradients"], [368, "gradients"], [78, "module-ivy.data_classes.container.gradients"], [55, "module-ivy.data_classes.array.gradients"]], "Overview": [[830, "overview"], [834, "overview"]], "Example Usage of the Gradient API": [[830, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[830, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[830, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[830, "custom-gradient-functions"]], "Design of the Gradient API": [[830, "design-of-the-gradient-api"]], "Our policy on gradients": [[830, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[830, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[830, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[830, "framework-specific-considerations"]], "ML Explosion": [[850, "ml-explosion"]], "Design": [[839, "design"]], "Glossary": [[848, "glossary"]], "Ivy Container": [[843, "ivy-container"]], "Construction": [[843, "construction"]], "Representation": [[843, "representation"]], "Recursive Methods": [[843, "recursive-methods"]], "Built-ins": [[843, "built-ins"]], "Access": [[843, "access"]], "Saving and Loading": [[843, "saving-and-loading"]], "Comparisons": [[843, "comparisons"]], "Customized Representations": [[843, "customized-representations"]], "Use Cases": [[843, "use-cases"]], "Compartmentalization": [[843, "compartmentalization"]], "Configuration": [[843, "configuration"]], "Data loading": [[843, "data-loading"]], "Network weights": [[843, "network-weights"]], "What does Ivy Add?": [[867, "what-does-ivy-add"]], "Wrapper Frameworks": [[867, "wrapper-frameworks"], [868, "wrapper-frameworks"]], "Exchange Formats": [[867, "exchange-formats"], [860, "exchange-formats"]], "Multi-Vendor Compiler Frameworks": [[867, "multi-vendor-compiler-frameworks"], [864, "multi-vendor-compiler-frameworks"]], "Vendor-Specific Compilers": [[867, "vendor-specific-compilers"], [866, "vendor-specific-compilers"]], "One liners": [[853, "one-liners"]], "ivy.trace_graph()": [[854, "ivy-trace-graph"]], "Tracer API": [[854, "tracer-api"]], "Using the tracer": [[854, "using-the-tracer"]], "Eager vs lazy Compilation": [[854, "eager-vs-lazy-compilation"]], "Array caching": [[854, "array-caching"]], "Generators": [[854, "generators"]], "Stateful": [[854, "stateful"]], "Ivy Frontends": [[832, "ivy-frontends"]], "The Frontend Basics": [[832, "the-frontend-basics"]], "Writing Frontend Functions": [[832, "writing-frontend-functions"]], "Short Frontend Implementations": [[832, "short-frontend-implementations"]], "Unused Arguments": [[832, "unused-arguments"]], "Supported Data Types and Devices": [[832, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[832, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[832, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[832, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[832, "frontends-duplicate-policy"]], "FAQ": [[846, "faq"]], "Maintaining Backend Versions": [[846, "maintaining-backend-versions"]], "Dynamic Sizes": [[846, "dynamic-sizes"]], "Type and Shape Checking": [[846, "type-and-shape-checking"]], "GPU handling": [[846, "gpu-handling"]], "Model Deployment": [[846, "model-deployment"]], "Dynamic Control Flow": [[846, "dynamic-control-flow"]], "Auto-Differentiation": [[846, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[846, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[846, "support-for-functions"]], "Alternative Data Structures": [[846, "alternative-data-structures"]], "Custom Operations": [[846, "custom-operations"]], "The Pipeline": [[846, "the-pipeline"]], "State": [[846, "state"]], "Function Wrapping": [[829, "function-wrapping"]], "Decorator order": [[829, "decorator-order"]], "Conversion Wrappers": [[829, "conversion-wrappers"]], "Inference Wrappers": [[829, "inference-wrappers"]], "Out Argument Support": [[829, "out-argument-support"]], "Nestable Support": [[829, "nestable-support"]], "Partial Mixed Function Support": [[829, "partial-mixed-function-support"]], "Shape Conversion": [[829, "shape-conversion"]], "View Handling": [[829, "view-handling"]], "Exception Handling": [[829, "exception-handling"], [824, "exception-handling"]], "Miscellaneous Wrappers": [[829, "miscellaneous-wrappers"]], "Related Work": [[857, "related-work"]], "ICC": [[866, "id1"]], "ICX": [[866, "icx"]], "NVCC": [[866, "nvcc"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[834, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[834, "existing-formatters"]], "FunctionOrderingFormatter": [[834, "functionorderingformatter"]], "How the Formatter Works:": [[834, "how-the-formatter-works"]], "Integration and Usage": [[834, "integration-and-usage"]], "Contribution": [[834, "contribution"]], "Round Up": [[834, "round-up"], [22, "Round-Up"], [34, "Round-Up"], [21, "Round-Up"], [19, "Round-Up"], [28, "Round-Up"], [23, "Round-Up"], [20, "Round-Up"], [31, "Round-Up"], [14, "Round-Up"], [32, "Round-Up"], [41, "Round-Up"], [30, "Round-Up"], [12, "Round-Up"], [29, "Round-Up"], [33, "Round-Up"], [18, "Round-Up"], [24, "Round-Up"]], "EagerPy eagerpy": [[868, "eagerpy-eagerpy"]], "Keras keras": [[868, "keras-keras"]], "Thinc thinc": [[868, "thinc-thinc"]], "TensorLy tensorly": [[868, "tensorly-tensorly"]], "NeuroPod": [[868, "id1"]], "Why Unify?": [[852, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[852, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[852, "infinite-shelf-life"]], "Apache TVM": [[864, "apache-tvm"]], "XLA": [[864, "xla"]], "GCC": [[864, "gcc"]], "Function Types": [[828, "function-types"]], "Primary Functions": [[828, "primary-functions"]], "Compositional Functions": [[828, "compositional-functions"]], "Mixed Functions": [[828, "mixed-functions"]], "Partial Mixed Functions": [[828, "partial-mixed-functions"]], "Standalone Functions": [[828, "standalone-functions"]], "Nestable Functions": [[828, "nestable-functions"], [818, "nestable-functions"], [827, "nestable-functions"]], "Convenience Functions": [[828, "convenience-functions"]], "Navigating the Code": [[836, "navigating-the-code"]], "Categorization": [[836, "categorization"]], "Submodule Design": [[836, "submodule-design"]], "Ivy API": [[836, "ivy-api"]], "Backend API": [[836, "backend-api"]], "Submodule Helper Functions": [[836, "submodule-helper-functions"]], "Version Unpinning": [[836, "version-unpinning"]], "Ivy Array": [[842, "ivy-array"], [815, "ivy-array"]], "The Array Class": [[842, "the-array-class"]], "Unifying Operators": [[842, "unifying-operators"]], "API Monkey Patching": [[842, "api-monkey-patching"]], "Instance Methods": [[842, "instance-methods"]], "ONNX onnx": [[860, "onnx-onnx"]], "NNEF nnef": [[860, "nnef-nnef"]], "CoreML coreml": [[860, "coreml-coreml"]], "Standardization": [[851, "standardization"]], "Skepticism": [[851, "skepticism"]], "Complimentary vs Competitive": [[851, "complimentary-vs-competitive"]], "Do Standards Work?": [[851, "do-standards-work"]], "The Array API Standard": [[851, "the-array-api-standard"]], "Ivy Stateful API": [[844, "ivy-stateful-api"], [27, "Ivy-Stateful-API"], [18, "Ivy-Stateful-API"]], "Modules": [[844, "modules"]], "Initializers": [[844, "initializers"], [781, "module-ivy.stateful.initializers"]], "Optimizers": [[844, "optimizers"], [786, "module-ivy.stateful.optimizers"]], "ivy.transpile()": [[855, "ivy-transpile"]], "Transpiler API": [[855, "transpiler-api"]], "Using the transpiler": [[855, "using-the-transpiler"]], "Transpiling functions": [[855, "transpiling-functions"]], "Transpiling Libraries": [[855, "transpiling-libraries"]], "Transpiling Modules": [[855, "transpiling-modules"]], "Get Started": [[847, "get-started"]], "Installing using pip": [[847, "installing-using-pip"], [802, "installing-using-pip"]], "Docker": [[847, "docker"]], "Installing from source": [[847, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[847, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[847, "ivy-folder"]], "Setting Up the API key": [[847, "setting-up-the-api-key"]], "Issues and Questions": [[847, "issues-and-questions"]], "Ivy as a Transpiler": [[845, "ivy-as-a-transpiler"], [27, "Ivy-as-a-Transpiler"], [28, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[845, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[845, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[845, "converting-network-models"]], "Base": [[92, "module-ivy.data_classes.factorized_tensor.base"], [102, "module-ivy.data_classes.nested_array.base"], [70, "module-ivy.data_classes.container.base"]], "meshgrid": [[135, "meshgrid"]], "for_loop": [[118, "for-loop"]], "Container": [[99, "container"]], "array": [[123, "array"]], "log_softmax": [[109, "log-softmax"]], "empty": [[126, "empty"]], "Parafac2 tensor": [[94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "sigmoid": [[112, "sigmoid"]], "if_else": [[119, "if-else"]], "from_dlpack": [[129, "from-dlpack"]], "Factorized tensor": [[100, "factorized-tensor"]], "empty_like": [[127, "empty-like"]], "full": [[131, "full"]], "native_array": [[136, "native-array"]], "mish": [[110, "mish"]], "Array": [[98, "array"]], "eye": [[128, "eye"]], "one_hot": [[137, "one-hot"]], "leaky_relu": [[108, "leaky-relu"]], "Tt tensor": [[96, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "cmp_isnot": [[117, "cmp-isnot"]], "Elementwise": [[103, "module-ivy.data_classes.nested_array.elementwise"], [621, "elementwise"], [366, "elementwise"], [75, "module-ivy.data_classes.container.elementwise"], [52, "module-ivy.data_classes.array.elementwise"]], "copy_array": [[125, "copy-array"]], "Nested array": [[101, "nested-array"]], "try_except": [[120, "try-except"]], "frombuffer": [[130, "frombuffer"]], "linspace": [[133, "linspace"]], "Data classes": [[104, "data-classes"]], "full_like": [[132, "full-like"]], "hardswish": [[107, "hardswish"]], "softsign": [[115, "softsign"]], "Tr tensor": [[95, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "arange": [[122, "arange"]], "relu": [[111, "relu"]], "logspace": [[134, "logspace"]], "Tucker tensor": [[97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "while_loop": [[121, "while-loop"]], "softmax": [[113, "softmax"]], "asarray": [[124, "asarray"]], "softplus": [[114, "softplus"]], "Cp tensor": [[93, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "gelu": [[106, "gelu"]], "cmp_is": [[116, "cmp-is"]], "Functions": [[105, "functions"]], "Handler": [[791, "module-ivy.utils.backend.handler"]], "Error Handling": [[806, "error-handling"]], "Sequential": [[787, "module-ivy.stateful.sequential"]], "Layers": [[782, "module-ivy.stateful.layers"], [625, "layers"], [369, "layers"], [80, "module-ivy.data_classes.container.layers"], [57, "module-ivy.data_classes.array.layers"]], "Profiler": [[800, "module-ivy.utils.profiler"]], "Norms": [[785, "module-ivy.stateful.norms"], [631, "norms"], [375, "norms"], [61, "module-ivy.data_classes.array.norms"], [84, "module-ivy.data_classes.container.norms"]], "Contributor Leaderboard": [[812, "contributor-leaderboard"]], "Rising Contributors": [[812, "rising-contributors"]], "Formatting": [[826, "formatting"]], "Lint Checks": [[826, "lint-checks"], [826, "id2"]], "Setup Formatting Locally": [[826, "setup-formatting-locally"]], "Pre-commit": [[826, "pre-commit"]], "VS Code": [[826, "vs-code"]], "PyCharm": [[826, "pycharm"], [809, "pycharm"]], "Common Issues with Pre-Commit": [[826, "common-issues-with-pre-commit"]], "Continuous Integration": [[826, "continuous-integration"], [819, "continuous-integration"]], "Lint Formatting": [[826, "lint-formatting"]], "Inspection": [[798, "module-ivy.utils.inspection"]], "Exceptions": [[797, "module-ivy.utils.exceptions"]], "Arrays": [[815, "arrays"]], "Native Array": [[815, "native-array"]], "Array Handling": [[815, "array-handling"]], "Integrating custom classes with Ivy": [[815, "integrating-custom-classes-with-ivy"]], "Open Tasks": [[808, "open-tasks"]], "Fixing Failing Tests": [[808, "fixing-failing-tests"]], "How to Contribute": [[808, "how-to-contribute"]], "Frontend APIs": [[808, "frontend-apis"]], "Where to place a frontend function": [[808, "where-to-place-a-frontend-function"]], "Frontend checklist": [[808, "frontend-checklist"]], "Function Formatting": [[808, "function-formatting"]], "Formatting checklist": [[808, "formatting-checklist"]], "Ivy Experimental API": [[808, "ivy-experimental-api"]], "Extending the Ivy API": [[808, "extending-the-ivy-api"]], "Where to place a backend function": [[808, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[808, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Ast helpers": [[790, "module-ivy.utils.backend.ast_helpers"]], "Contributor Rewards": [[805, "contributor-rewards"]], "Badges": [[805, "badges"]], "Badge Tiers": [[805, "badge-tiers"]], "Dynamic import": [[794, "module-ivy.utils.dynamic_import"]], "Setting Up": [[809, "setting-up"], [825, "setting-up"]], "Forking and cloning the repo": [[809, "forking-and-cloning-the-repo"]], "Pre-Commit": [[809, "pre-commit"]], "Virtual environments - No Docker": [[809, "virtual-environments-no-docker"]], "Using miniconda": [[809, "using-miniconda"]], "Using venv": [[809, "using-venv"]], "Docker Interpreter with PyCharm": [[809, "docker-interpreter-with-pycharm"]], "Windows": [[809, "windows"], [809, "id6"]], "MacOS": [[809, "macos"]], "Ubuntu": [[809, "ubuntu"], [809, "id8"]], "Setting Up Testing in PyCharm": [[809, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[809, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[809, "setting-up-for-free"]], "WSL": [[809, "wsl"]], "GitHub Codespaces": [[809, "github-codespaces"]], "The Binaries": [[809, "the-binaries"]], "Binaries": [[793, "module-ivy.utils.binaries"]], "Backend": [[789, "backend"]], "Einsum parser": [[795, "module-ivy.utils.einsum_parser"]], "Docstring Examples": [[822, "docstring-examples"]], "ivy.tan": [[822, "ivy-tan"]], "ivy.roll": [[822, "ivy-roll"]], "ivy.add": [[822, "ivy-add"]], "Docstrings": [[823, "docstrings"]], "Fix Failing Tests:": [[825, "fix-failing-tests"]], "Prerequirement:": [[825, "prerequirement"]], "How to run tests": [[825, "how-to-run-tests"]], "Common Errors": [[825, "common-errors"]], "Where to ask for Help": [[825, "where-to-ask-for-help"]], "Assertions": [[788, "module-ivy.utils.assertions"], [761, "module-ivy_tests.test_ivy.helpers.assertions"]], "Sub backend handler": [[792, "module-ivy.utils.backend.sub_backend_handler"]], "Contributing": [[803, "contributing"], [802, "contributing"]], "Einsum path helpers": [[796, "module-ivy.utils.einsum_path_helpers"]], "Containers": [[818, "containers"]], "Container Instance Methods": [[818, "container-instance-methods"]], "API Instance Methods": [[818, "api-instance-methods"]], "API Special Methods": [[818, "api-special-methods"]], "Verbosity": [[801, "module-ivy.utils.verbosity"]], "Ivy Exception Class": [[824, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[824, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[824, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[824, "handle-exceptions-decorator"]], "Consistency in Errors": [[824, "consistency-in-errors"]], "Assertion Function": [[824, "assertion-function"]], "Helpful Resources": [[807, "helpful-resources"]], "Status": [[802, "status"]], "Unified AI": [[802, "unified-ai"]], "Getting started": [[802, "getting-started"]], "Installing ivy": [[802, "installing-ivy"]], "Using Ivy": [[802, "using-ivy"]], "Documentation": [[802, "documentation"]], "Diving deeper": [[802, "diving-deeper"]], "When should I use Ivy as a transpiler?": [[802, "when-should-i-use-ivy-as-a-transpiler"]], "Community": [[802, "community"]], "Citation": [[802, "citation"]], "Module": [[784, "module-ivy.stateful.module"]], "Devices": [[821, "devices"]], "Device Module": [[821, "device-module"]], "Arguments in other Functions": [[821, "arguments-in-other-functions"], [820, "arguments-in-other-functions"]], "Device handling": [[821, "device-handling"]], "Building the Docs": [[804, "building-the-docs"]], "Building the Docs using Docker": [[804, "building-the-docs-using-docker"]], "Using convenience script": [[804, "using-convenience-script"]], "Using existing image on Docker Hub": [[804, "using-existing-image-on-docker-hub"]], "Building the image locally": [[804, "building-the-image-locally"]], "Building the Docs without Docker": [[804, "building-the-docs-without-docker"]], "Losses": [[783, "module-ivy.stateful.losses"], [627, "losses"], [371, "losses"], [82, "module-ivy.data_classes.container.losses"], [59, "module-ivy.data_classes.array.losses"]], "Commit (Push/PR) Triggered Testing": [[819, "commit-push-pr-triggered-testing"]], "Implementation": [[819, "implementation"]], "A Top-Down View": [[819, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[819, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[819, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[819, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[819, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[819, "determine-test-coverage-workflow"]], "Multiple Runners": [[819, "multiple-runners"]], "Race Condition": [[819, "race-condition"]], "Array API Tests": [[819, "array-api-tests"], [814, "array-api-tests"]], "Periodic Testing": [[819, "periodic-testing"]], "Manually Dispatched Workflows": [[819, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[819, "ci-pipeline"]], "Push": [[819, "push"]], "Pull Request": [[819, "pull-request"]], "Dashboard": [[819, "dashboard"]], "Deep Dive": [[813, "deep-dive"]], "Running the Tests": [[814, "running-the-tests"]], "Using Terminal": [[814, "using-terminal"]], "Using the IDE": [[814, "using-the-ide"]], "Regenerating Test Failures": [[814, "regenerating-test-failures"]], "Test Skipping": [[814, "test-skipping"]], "Backend Setting": [[816, "backend-setting"]], "Dynamic Backend Setting": [[816, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[816, "backend-and-frontend-version-support"]], "Function Arguments": [[827, "function-arguments"]], "Positional and Keyword Arguments": [[827, "positional-and-keyword-arguments"]], "Input Arrays": [[827, "input-arrays"]], "out Argument": [[827, "out-argument"]], "dtype and device arguments": [[827, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[827, "numbers-in-operator-functions"]], "Integer Sequences": [[827, "integer-sequences"]], "Data Types": [[820, "data-types"]], "Data Type Module": [[820, "data-type-module"]], "Data Type Promotion": [[820, "data-type-promotion"]], "Precise Mode": [[820, "precise-mode"]], "Precise Promotion Table": [[820, "precise-promotion-table"]], "Non-Precise Promotion Table": [[820, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[820, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[820, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[820, "special-case"]], "Backend Data Type Bugs": [[820, "backend-data-type-bugs"]], "Data Type Casting Modes": [[820, "data-type-casting-modes"]], "Superset Data Type Support": [[820, "superset-data-type-support"]], "Contributor Program": [[811, "contributor-program"]], "Contributor": [[811, "contributor"]], "Core Contributor": [[811, "core-contributor"]], "Rising Contributor": [[811, "rising-contributor"]], "Top Contributor": [[811, "top-contributor"]], "Logging": [[799, "module-ivy.utils.logging"]], "The Basics": [[810, "the-basics"]], "Getting Help": [[810, "getting-help"]], "ToDo List Issues": [[810, "todo-list-issues"]], "Managing Your Fork": [[810, "managing-your-fork"]], "Who To Ask": [[810, "who-to-ask"]], "With Command Line:": [[810, "with-command-line"]], "With Browser:": [[810, "with-browser"]], "Pull Requests": [[810, "pull-requests"]], "Small Commits Often": [[810, "small-commits-often"]], "Interactive Ivy Docker Container": [[810, "interactive-ivy-docker-container"]], "Running Tests Locally": [[810, "running-tests-locally"]], "With Docker": [[810, "with-docker"]], "Getting the most out of IDE": [[810, "getting-the-most-out-of-ide"]], "with PyCharm": [[810, "with-pycharm"]], "Building the Docs Pipeline": [[817, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[817, "how-the-doc-builder-is-being-run"]], "The convenience script": [[817, "the-convenience-script"]], "Options": [[817, "options"]], "The Docker image": [[817, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[817, "how-ivy-s-docs-is-structured"]], "index.rst": [[817, "index-rst"]], "partial_conf.py": [[817, "partial-conf-py"]], "prebuild.sh": [[817, "prebuild-sh"]], "Custom Extensions": [[817, "custom-extensions"]], "custom_autosummary": [[817, "custom-autosummary"]], ":hide-table:": [[817, "hide-table"]], "discussion_linker": [[817, "discussion-linker"]], "skippable_function": [[817, "skippable-function"]], "ivy_data": [[817, "ivy-data"]], "Testing": [[777, "testing"], [41, "Testing"]], "Converters": [[779, "module-ivy.stateful.converters"]], "Test parameter flags": [[773, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "General helpers": [[768, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "unique_values": [[742, "unique-values"]], "Data-dependent output shape": [[742, null], [741, null], [739, null], [740, null], [634, null], [634, null], [634, null], [634, null]], "searchsorted": [[745, "searchsorted"]], "sort": [[746, "sort"]], "cumsum": [[748, "cumsum"]], "prod": [[753, "prod"]], "Number helpers": [[769, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Dtype helpers": [[767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "where": [[738, "where"]], "argsort": [[743, "argsort"]], "var": [[756, "var"]], "Helpers": [[780, "module-ivy.stateful.helpers"]], "Array helpers": [[766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Testing helpers": [[774, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Hypothesis helpers": [[765, "hypothesis-helpers"]], "cumprod": [[747, "cumprod"]], "Pipeline helper": [[771, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Function testing": [[763, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Available frameworks": [[762, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "all": [[757, "all"]], "unique_inverse": [[741, "unique-inverse"]], "mean": [[751, "mean"]], "argwhere": [[736, "argwhere"]], "any": [[758, "any"]], "Multiprocessing": [[770, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "unique_all": [[739, "unique-all"]], "sum": [[755, "sum"]], "Globals": [[764, "module-ivy_tests.test_ivy.helpers.globals"]], "einsum": [[749, "einsum"]], "save": [[760, "save"]], "Utils": [[776, "utils"]], "std": [[754, "std"]], "unique_counts": [[740, "unique-counts"]], "Structs": [[772, "module-ivy_tests.test_ivy.helpers.structs"]], "Framework classes": [[775, "framework-classes"]], "nonzero": [[737, "nonzero"]], "min": [[752, "min"]], "Activations": [[778, "module-ivy.stateful.activations"], [615, "activations"], [361, "activations"], [47, "module-ivy.data_classes.array.activations"], [69, "module-ivy.data_classes.container.activations"]], "Parameter": [[778, "parameter"], [778, "id1"], [575, "parameter"], [574, "parameter"], [568, "parameter"], [569, "parameter"], [578, "parameter"], [577, "parameter"], [623, "parameter"], [623, "id1"], [623, "id2"], [623, "id3"], [623, "id4"], [623, "id5"], [620, "parameter"], [206, "parameter"]], "load": [[759, "load"]], "msort": [[744, "msort"]], "max": [[750, "max"]], "index_nest": [[711, "index-nest"]], "multi_index_nest": [[717, "multi-index-nest"]], "prune_empty": [[722, "prune-empty"]], "copy_nest": [[709, "copy-nest"]], "unstack": [[703, "unstack"]], "prune_nest_at_indices": [[724, "prune-nest-at-indices"]], "random_normal": [[730, "random-normal"]], "swapaxes": [[701, "swapaxes"]], "argmax": [[734, "argmax"]], "nested_multi_map": [[721, "nested-multi-map"]], "tile": [[702, "tile"]], "squeeze": [[699, "squeeze"]], "nested_map": [[720, "nested-map"]], "concat": [[690, "concat"]], "permute_dims": [[694, "permute-dims"]], "reshape": [[696, "reshape"]], "duplicate_array_index_chains": [[710, "duplicate-array-index-chains"]], "insert_into_nest_at_index": [[712, "insert-into-nest-at-index"]], "constant_pad": [[691, "constant-pad"]], "stack": [[700, "stack"]], "nested_any": [[718, "nested-any"]], "insert_into_nest_at_indices": [[713, "insert-into-nest-at-indices"]], "randint": [[729, "randint"]], "zero_pad": [[704, "zero-pad"]], "layer_norm": [[727, "layer-norm"]], "nested_argwhere": [[719, "nested-argwhere"]], "roll": [[697, "roll"]], "map_nest_at_indices": [[716, "map-nest-at-indices"]], "flip": [[693, "flip"]], "seed": [[732, "seed"]], "fomaml_step": [[705, "fomaml-step"]], "argmin": [[735, "argmin"]], "map_nest_at_index": [[715, "map-nest-at-index"]], "shuffle": [[733, "shuffle"]], "prune_nest_at_index": [[723, "prune-nest-at-index"]], "expand_dims": [[692, "expand-dims"]], "random_uniform": [[731, "random-uniform"]], "reptile_step": [[707, "reptile-step"]], "set_nest_at_indices": [[726, "set-nest-at-indices"]], "repeat": [[695, "repeat"]], "split": [[698, "split"]], "all_nested_indices": [[708, "all-nested-indices"]], "maml_step": [[706, "maml-step"]], "set_nest_at_index": [[725, "set-nest-at-index"]], "map": [[714, "map"]], "multinomial": [[728, "multinomial"]], "svdvals": [[678, "svdvals"]], "pinv": [[673, "pinv"]], "cross_entropy": [[687, "cross-entropy"]], "matmul": [[667, "matmul"]], "scaled_dot_product_attention": [[655, "scaled-dot-product-attention"]], "eigvalsh": [[663, "eigvalsh"]], "inv": [[665, "inv"]], "tensorsolve": [[680, "tensorsolve"]], "trace": [[681, "trace"]], "tensordot": [[679, "tensordot"]], "qr": [[674, "qr"]], "matrix_norm": [[668, "matrix-norm"]], "vector_to_skew_symmetric_matrix": [[685, "vector-to-skew-symmetric-matrix"]], "linear": [[649, "linear"]], "lu_factor": [[666, "lu-factor"]], "matrix_power": [[669, "matrix-power"]], "solve": [[676, "solve"]], "diagonal": [[660, "diagonal"]], "clip": [[689, "clip"]], "roi_align": [[654, "roi-align"]], "slogdet": [[675, "slogdet"]], "lstm": [[650, "lstm"]], "vander": [[682, "vander"]], "eigh": [[662, "eigh"]], "binary_cross_entropy": [[686, "binary-cross-entropy"]], "conv3d_transpose": [[644, "conv3d-transpose"]], "matrix_rank": [[670, "matrix-rank"]], "matrix_transpose": [[671, "matrix-transpose"]], "diag": [[659, "diag"]], "multi_head_attention": [[652, "multi-head-attention"]], "cross": [[657, "cross"]], "vecdot": [[683, "vecdot"]], "conv_general_dilated": [[645, "conv-general-dilated"]], "vector_norm": [[684, "vector-norm"]], "depthwise_conv2d": [[647, "depthwise-conv2d"]], "lstm_update": [[651, "lstm-update"]], "dropout": [[648, "dropout"]], "cholesky": [[656, "cholesky"]], "svd": [[677, "svd"]], "conv_general_transpose": [[646, "conv-general-transpose"]], "sparse_cross_entropy": [[688, "sparse-cross-entropy"]], "inner": [[664, "inner"]], "outer": [[672, "outer"]], "eig": [[661, "eig"], [422, "eig"]], "det": [[658, "det"]], "nms": [[653, "nms"]], "set_min_base": [[572, "set-min-base"]], "try_else_none": [[590, "try-else-none"]], "is_array": [[554, "is-array"]], "match_kwargs": [[562, "match-kwargs"]], "is_ivy_container": [[556, "is-ivy-container"]], "isin": [[559, "isin"]], "inplace_variables_supported": [[553, "inplace-variables-supported"]], "stable_pow": [[582, "stable-pow"]], "to_scalar": [[589, "to-scalar"]], "unset_min_denominator": [[595, "unset-min-denominator"]], "unset_min_base": [[594, "unset-min-base"]], "set_tmp_dir": [[579, "set-tmp-dir"]], "scatter_nd": [[567, "scatter-nd"]], "to_native_shape": [[587, "to-native-shape"]], "shape": [[580, "shape"]], "stable_divide": [[581, "stable-divide"]], "to_ivy_shape": [[585, "to-ivy-shape"]], "scatter_flat": [[566, "scatter-flat"]], "supports_inplace_updates": [[584, "supports-inplace-updates"]], "set_inplace_mode": [[570, "set-inplace-mode"]], "set_precise_mode": [[575, "set-precise-mode"]], "unset_precise_mode": [[597, "unset-precise-mode"]], "to_numpy": [[588, "to-numpy"]], "set_item": [[571, "set-item"]], "multiprocessing": [[563, "multiprocessing"]], "set_queue_timeout": [[576, "set-queue-timeout"]], "inplace_update": [[552, "inplace-update"]], "num_arrays_in_memory": [[564, "num-arrays-in-memory"]], "set_nestable_mode": [[574, "set-nestable-mode"]], "set_array_mode": [[568, "set-array-mode"]], "unset_exception_trace_mode": [[592, "unset-exception-trace-mode"]], "set_exception_trace_mode": [[569, "set-exception-trace-mode"]], "set_min_denominator": [[573, "set-min-denominator"]], "to_list": [[586, "to-list"]], "unset_array_mode": [[591, "unset-array-mode"]], "unset_nestable_mode": [[596, "unset-nestable-mode"]], "is_native_array": [[558, "is-native-array"]], "itemsize": [[561, "itemsize"]], "print_all_arrays_in_memory": [[565, "print-all-arrays-in-memory"]], "unset_inplace_mode": [[593, "unset-inplace-mode"]], "set_show_func_wrapper_trace_mode": [[578, "set-show-func-wrapper-trace-mode"]], "set_shape_array_mode": [[577, "set-shape-array-mode"]], "is_ivy_array": [[555, "is-ivy-array"]], "strides": [[583, "strides"]], "is_ivy_nested_array": [[557, "is-ivy-nested-array"]], "isscalar": [[560, "isscalar"]], "igamma": [[516, "igamma"]], "clip_vector_norm": [[531, "clip-vector-norm"]], "inplace_arrays_supported": [[549, "inplace-arrays-supported"]], "nanmedian": [[519, "nanmedian"]], "quantile": [[522, "quantile"]], "all_equal": [[524, "all-equal"]], "current_backend_str": [[533, "current-backend-str"]], "get_referrers_recursive": [[547, "get-referrers-recursive"]], "einops_rearrange": [[535, "einops-rearrange"]], "function_unsupported_devices_and_dtypes": [[541, "function-unsupported-devices-and-dtypes"]], "array_equal": [[527, "array-equal"]], "function_supported_devices_and_dtypes": [[540, "function-supported-devices-and-dtypes"]], "gather": [[542, "gather"]], "assert_supports_inplace": [[528, "assert-supports-inplace"]], "optional_get_element": [[523, "optional-get-element"]], "inplace_decrement": [[550, "inplace-decrement"]], "is_native_sparse_array": [[507, "is-native-sparse-array"]], "clip_matrix_norm": [[530, "clip-matrix-norm"]], "get_all_arrays_in_memory": [[544, "get-all-arrays-in-memory"]], "get_num_dims": [[546, "get-num-dims"]], "bincount": [[510, "bincount"]], "einops_reduce": [[536, "einops-reduce"]], "is_ivy_sparse_array": [[506, "is-ivy-sparse-array"]], "native_sparse_array_to_indices_values_and_shape": [[509, "native-sparse-array-to-indices-values-and-shape"]], "corrcoef": [[511, "corrcoef"]], "get_item": [[545, "get-item"]], "cache_fn": [[529, "cache-fn"]], "fourier_encode": [[539, "fourier-encode"]], "nanmin": [[520, "nanmin"]], "native_sparse_array": [[508, "native-sparse-array"]], "nanprod": [[521, "nanprod"]], "gather_nd": [[543, "gather-nd"]], "arg_info": [[525, "arg-info"]], "container_types": [[532, "container-types"]], "einops_repeat": [[537, "einops-repeat"]], "histogram": [[515, "histogram"]], "has_nans": [[548, "has-nans"]], "default": [[534, "default"]], "median": [[517, "median"]], "arg_names": [[526, "arg-names"]], "exists": [[538, "exists"]], "cummax": [[513, "cummax"]], "cov": [[512, "cov"]], "cummin": [[514, "cummin"]], "nanmean": [[518, "nanmean"]], "inplace_increment": [[551, "inplace-increment"]], "matricize": [[473, "matricize"]], "partial_unfold": [[478, "partial-unfold"]], "take": [[483, "take"]], "trim_zeros": [[486, "trim-zeros"]], "local_response_norm": [[496, "local-response-norm"]], "beta": [[499, "beta"]], "unfold": [[487, "unfold"]], "expand": [[463, "expand"]], "flatten": [[465, "flatten"]], "l2_normalize": [[495, "l2-normalize"]], "dstack": [[462, "dstack"]], "group_norm": [[492, "group-norm"]], "partial_fold": [[476, "partial-fold"]], "vsplit": [[489, "vsplit"]], "i0": [[472, "i0"]], "fliplr": [[466, "fliplr"]], "bernoulli": [[498, "bernoulli"]], "vstack": [[490, "vstack"]], "unique_consecutive": [[488, "unique-consecutive"]], "rot90": [[481, "rot90"]], "moveaxis": [[474, "moveaxis"]], "gamma": [[501, "gamma"]], "concat_from_sequence": [[460, "concat-from-sequence"]], "partial_vec_to_tensor": [[479, "partial-vec-to-tensor"]], "lexsort": [[505, "lexsort"]], "batch_norm": [[491, "batch-norm"]], "dirichlet": [[500, "dirichlet"]], "l1_normalize": [[494, "l1-normalize"]], "take_along_axis": [[484, "take-along-axis"]], "fold": [[468, "fold"]], "fill_diagonal": [[464, "fill-diagonal"]], "dsplit": [[461, "dsplit"]], "pad": [[475, "pad"]], "poisson": [[502, "poisson"]], "instance_norm": [[493, "instance-norm"]], "lp_normalize": [[497, "lp-normalize"]], "hstack": [[471, "hstack"]], "partial_tensor_to_vec": [[477, "partial-tensor-to-vec"]], "unravel_index": [[503, "unravel-index"]], "flipud": [[467, "flipud"]], "top_k": [[485, "top-k"]], "hsplit": [[470, "hsplit"]], "heaviside": [[469, "heaviside"]], "soft_thresholding": [[482, "soft-thresholding"]], "invert_permutation": [[504, "invert-permutation"]], "put_along_axis": [[480, "put-along-axis"]], "lamb_update": [[610, "lamb-update"]], "value_and_grad": [[614, "value-and-grad"]], "conv2d_transpose": [[642, "conv2d-transpose"]], "Experimental": [[622, "experimental"], [76, "module-ivy.data_classes.container.experimental"], [53, "module-ivy.data_classes.array.experimental"]], "Linear algebra": [[626, "linear-algebra"], [370, "linear-algebra"], [58, "module-ivy.data_classes.array.linear_algebra"], [81, "module-ivy.data_classes.container.linear_algebra"]], "conv3d": [[643, "conv3d"]], "unset_show_func_wrapper_trace_mode": [[600, "unset-show-func-wrapper-trace-mode"]], "vmap": [[603, "vmap"]], "optimizer_update": [[612, "optimizer-update"]], "unset_shape_array_mode": [[599, "unset-shape-array-mode"]], "conv": [[638, "conv"]], "Random": [[632, "random"], [376, "random"], [85, "module-ivy.data_classes.container.random"], [62, "module-ivy.data_classes.array.random"]], "Manipulation": [[628, "manipulation"], [372, "manipulation"], [83, "module-ivy.data_classes.container.manipulation"], [60, "module-ivy.data_classes.array.manipulation"]], "conv2d": [[641, "conv2d"]], "conv1d": [[639, "conv1d"]], "Utility": [[637, "utility"], [382, "utility"], [90, "module-ivy.data_classes.container.utility"], [67, "module-ivy.data_classes.array.utility"]], "value_is_nan": [[602, "value-is-nan"]], "Sorting": [[635, "sorting"], [379, "sorting"], [65, "module-ivy.data_classes.array.sorting"], [88, "module-ivy.data_classes.container.sorting"]], "grad": [[607, "grad"]], "unset_tmp_dir": [[601, "unset-tmp-dir"]], "conv1d_transpose": [[640, "conv1d-transpose"]], "Control flow ops": [[617, "control-flow-ops"]], "Set": [[634, "set"], [378, "module-ivy.functional.ivy.experimental.set"], [64, "module-ivy.data_classes.array.set"], [87, "module-ivy.data_classes.container.set"]], "Nest": [[630, "nest"], [374, "module-ivy.functional.ivy.experimental.nest"]], "jac": [[609, "jac"]], "unset_queue_timeout": [[598, "unset-queue-timeout"]], "Meta": [[629, "meta"], [373, "module-ivy.functional.ivy.experimental.meta"]], "stop_gradient": [[613, "stop-gradient"]], "Constants": [[616, "module-ivy.functional.ivy.constants"], [362, "module-ivy.functional.ivy.experimental.constants"]], "adam_step": [[604, "adam-step"]], "execute_with_gradients": [[606, "execute-with-gradients"]], "General": [[623, "general"], [367, "general"], [77, "module-ivy.data_classes.container.general"], [54, "module-ivy.data_classes.array.general"]], "Creation": [[618, "creation"], [363, "creation"], [72, "module-ivy.data_classes.container.creation"], [49, "module-ivy.data_classes.array.creation"]], "lars_update": [[611, "lars-update"]], "Searching": [[633, "searching"], [377, "searching"], [63, "module-ivy.data_classes.array.searching"], [86, "module-ivy.data_classes.container.searching"]], "gradient_descent_update": [[608, "gradient-descent-update"]], "Statistical": [[636, "statistical"], [381, "statistical"], [66, "module-ivy.data_classes.array.statistical"], [89, "module-ivy.data_classes.container.statistical"]], "Device": [[620, "device"], [365, "module-ivy.functional.ivy.experimental.device"], [74, "module-ivy.data_classes.container.device"], [51, "module-ivy.data_classes.array.device"]], "Data type": [[619, "data-type"], [364, "module-ivy.functional.ivy.experimental.data_type"], [73, "module-ivy.data_classes.container.data_type"], [50, "module-ivy.data_classes.array.data_type"]], "adam_update": [[605, "adam-update"]], "tt_matrix_to_tensor": [[441, "tt-matrix-to-tensor"]], "as_strided": [[451, "as-strided"]], "stft": [[416, "stft"]], "broadcast_shapes": [[456, "broadcast-shapes"]], "solve_triangular": [[437, "solve-triangular"]], "choose": [[458, "choose"]], "kron": [[429, "kron"]], "eigh_tridiagonal": [[423, "eigh-tridiagonal"]], "eigvals": [[424, "eigvals"]], "make_svd_non_negative": [[431, "make-svd-non-negative"]], "partial_tucker": [[436, "partial-tucker"]], "general_inner_product": [[425, "general-inner-product"]], "kronecker": [[430, "kronecker"]], "tensor_train": [[439, "tensor-train"]], "check_scalar": [[457, "check-scalar"]], "matrix_exp": [[432, "matrix-exp"]], "log_poisson_loss": [[447, "log-poisson-loss"]], "mode_dot": [[433, "mode-dot"]], "higher_order_moment": [[426, "higher-order-moment"]], "huber_loss": [[444, "huber-loss"]], "multi_mode_dot": [[435, "multi-mode-dot"]], "associative_scan": [[452, "associative-scan"]], "column_stack": [[459, "column-stack"]], "truncated_svd": [[440, "truncated-svd"]], "dot": [[421, "dot"]], "rnn": [[414, "rnn"]], "cond": [[419, "cond"]], "poisson_nll_loss": [[448, "poisson-nll-loss"]], "kl_div": [[445, "kl-div"]], "diagflat": [[420, "diagflat"]], "hinge_embedding_loss": [[443, "hinge-embedding-loss"]], "initialize_tucker": [[427, "initialize-tucker"]], "l1_loss": [[446, "l1-loss"]], "tucker": [[442, "tucker"]], "soft_margin_loss": [[450, "soft-margin-loss"]], "atleast_3d": [[455, "atleast-3d"]], "adjoint": [[417, "adjoint"]], "batched_outer": [[418, "batched-outer"]], "multi_dot": [[434, "multi-dot"]], "sliding_window": [[415, "sliding-window"]], "atleast_2d": [[454, "atleast-2d"]], "khatri_rao": [[428, "khatri-rao"]], "atleast_1d": [[453, "atleast-1d"]], "smooth_l1_loss": [[449, "smooth-l1-loss"]], "svd_flip": [[438, "svd-flip"]], "erfc": [[338, "erfc"]], "isclose": [[345, "isclose"]], "lgamma": [[348, "lgamma"]], "zeta": [[356, "zeta"]], "random_tucker": [[322, "random-tucker"]], "lerp": [[347, "lerp"]], "float_power": [[340, "float-power"]], "amin": [[331, "amin"]], "hypot": [[344, "hypot"]], "signbit": [[352, "signbit"]], "ldexp": [[346, "ldexp"]], "fmax": [[341, "fmax"]], "vjp": [[360, "vjp"]], "bind_custom_gradient_function": [[358, "bind-custom-gradient-function"]], "nansum": [[350, "nansum"]], "vorbis_window": [[328, "vorbis-window"]], "unsorted_segment_sum": [[327, "unsorted-segment-sum"]], "tril_indices": [[323, "tril-indices"]], "fix": [[339, "fix"]], "xlogy": [[355, "xlogy"]], "trilu": [[324, "trilu"]], "gradient": [[343, "gradient"]], "unsorted_segment_min": [[326, "unsorted-segment-min"]], "jvp": [[359, "jvp"]], "diff": [[336, "diff"]], "amax": [[330, "amax"]], "reduce": [[357, "reduce"]], "conj": [[333, "conj"]], "count_nonzero": [[335, "count-nonzero"]], "digamma": [[337, "digamma"]], "copysign": [[334, "copysign"]], "binarizer": [[332, "binarizer"]], "modf": [[349, "modf"]], "sinc": [[353, "sinc"]], "allclose": [[329, "allclose"]], "unsorted_segment_mean": [[325, "unsorted-segment-mean"]], "nextafter": [[351, "nextafter"]], "sparsify_tensor": [[354, "sparsify-tensor"]], "frexp": [[342, "frexp"]], "adaptive_avg_pool1d": [[383, "adaptive-avg-pool1d"]], "reduce_window": [[411, "reduce-window"]], "avg_pool3d": [[389, "avg-pool3d"]], "rfftn": [[413, "rfftn"]], "area_interpolate": [[386, "area-interpolate"]], "embedding": [[395, "embedding"]], "avg_pool1d": [[387, "avg-pool1d"]], "fft": [[396, "fft"]], "ifft": [[401, "ifft"]], "ifftn": [[402, "ifftn"]], "interp": [[403, "interp"]], "interpolate": [[404, "interpolate"]], "Sparse array": [[380, "sparse-array"]], "dropout3d": [[394, "dropout3d"]], "dropout2d": [[393, "dropout2d"]], "max_pool2d": [[406, "max-pool2d"]], "avg_pool2d": [[388, "avg-pool2d"]], "max_unpool1d": [[408, "max-unpool1d"]], "max_pool1d": [[405, "max-pool1d"]], "dropout1d": [[392, "dropout1d"]], "adaptive_max_pool2d": [[385, "adaptive-max-pool2d"]], "pool": [[410, "pool"]], "dft": [[391, "dft"]], "dct": [[390, "dct"]], "adaptive_avg_pool2d": [[384, "adaptive-avg-pool2d"]], "idct": [[400, "idct"]], "nearest_interpolate": [[409, "nearest-interpolate"]], "fft2": [[397, "fft2"]], "get_interpolate_kernel": [[399, "get-interpolate-kernel"]], "generate_einsum_equation": [[398, "generate-einsum-equation"]], "rfft": [[412, "rfft"]], "max_pool3d": [[407, "max-pool3d"]], "subtract": [[285, "subtract"]], "reciprocal": [[277, "reciprocal"]], "hann_window": [[310, "hann-window"]], "trapz": [[288, "trapz"]], "mel_weight_matrix": [[314, "mel-weight-matrix"]], "square": [[284, "square"]], "random_cp": [[318, "random-cp"]], "sin": [[281, "sin"]], "thresholded_relu": [[306, "thresholded-relu"]], "trunc": [[289, "trunc"]], "random_parafac2": [[319, "random-parafac2"]], "threshold": [[305, "threshold"]], "tan": [[286, "tan"]], "stanh": [[303, "stanh"]], "tanh": [[287, "tanh"]], "trunc_divide": [[290, "trunc-divide"]], "sign": [[280, "sign"]], "prelu": [[297, "prelu"]], "random_tt": [[321, "random-tt"]], "remainder": [[278, "remainder"]], "silu": [[301, "silu"]], "elu": [[292, "elu"]], "random_tr": [[320, "random-tr"]], "kaiser_bessel_derived_window": [[312, "kaiser-bessel-derived-window"]], "hardshrink": [[293, "hardshrink"]], "ndenumerate": [[315, "ndenumerate"]], "real": [[276, "real"]], "logit": [[295, "logit"]], "celu": [[291, "celu"]], "hardtanh": [[294, "hardtanh"]], "sqrt": [[283, "sqrt"]], "hamming_window": [[309, "hamming-window"]], "ndindex": [[316, "ndindex"]], "softshrink": [[302, "softshrink"]], "scaled_tanh": [[299, "scaled-tanh"]], "eye_like": [[308, "eye-like"]], "indices": [[311, "indices"]], "kaiser_window": [[313, "kaiser-window"]], "blackman_window": [[307, "blackman-window"]], "polyval": [[317, "polyval"]], "tanhshrink": [[304, "tanhshrink"]], "selu": [[300, "selu"]], "logsigmoid": [[296, "logsigmoid"]], "sinh": [[282, "sinh"]], "relu6": [[298, "relu6"]], "round": [[279, "round"]], "add": [[219, "add"]], "valid_dtype": [[188, "valid-dtype"]], "gpu_is_available": [[198, "gpu-is-available"]], "unset_soft_device_mode": [[214, "unset-soft-device-mode"]], "clear_cached_mem_on_dev": [[191, "clear-cached-mem-on-dev"]], "set_soft_device_mode": [[206, "set-soft-device-mode"]], "bitwise_or": [[229, "bitwise-or"]], "split_func_call": [[209, "split-func-call"]], "angle": [[220, "angle"]], "tpu_is_available": [[212, "tpu-is-available"]], "num_gpus": [[201, "num-gpus"]], "set_split_factor": [[207, "set-split-factor"]], "function_unsupported_devices": [[196, "function-unsupported-devices"]], "bitwise_invert": [[227, "bitwise-invert"]], "atan": [[223, "atan"]], "asinh": [[222, "asinh"]], "as_ivy_dev": [[189, "as-ivy-dev"]], "atanh": [[225, "atanh"]], "default_device": [[192, "default-device"]], "print_all_ivy_arrays_on_dev": [[204, "print-all-ivy-arrays-on-dev"]], "dev_util": [[194, "dev-util"]], "atan2": [[224, "atan2"]], "as_native_dev": [[190, "as-native-dev"]], "handle_soft_device_variable": [[199, "handle-soft-device-variable"]], "split_factor": [[208, "split-factor"]], "unset_default_float_dtype": [[185, "unset-default-float-dtype"]], "acosh": [[218, "acosh"]], "unset_default_dtype": [[184, "unset-default-dtype"]], "num_ivy_arrays_on_dev": [[202, "num-ivy-arrays-on-dev"]], "dev": [[193, "dev"]], "asin": [[221, "asin"]], "unset_default_uint_dtype": [[187, "unset-default-uint-dtype"]], "get_all_ivy_arrays_on_dev": [[197, "get-all-ivy-arrays-on-dev"]], "acos": [[217, "acos"]], "bitwise_left_shift": [[228, "bitwise-left-shift"]], "num_cpu_cores": [[200, "num-cpu-cores"]], "percent_used_mem_on_dev": [[203, "percent-used-mem-on-dev"]], "bitwise_and": [[226, "bitwise-and"]], "abs": [[216, "abs"]], "unset_default_int_dtype": [[186, "unset-default-int-dtype"]], "set_default_device": [[205, "set-default-device"]], "function_supported_devices": [[195, "function-supported-devices"]], "used_mem_on_dev": [[215, "used-mem-on-dev"]], "unset_default_device": [[213, "unset-default-device"]], "to_device": [[210, "to-device"]], "total_mem_on_dev": [[211, "total-mem-on-dev"]], "bitwise_right_shift": [[230, "bitwise-right-shift"]], "logical_or": [[265, "logical-or"]], "isreal": [[253, "isreal"]], "floor_divide": [[243, "floor-divide"]], "greater_equal": [[248, "greater-equal"]], "less": [[255, "less"]], "fmin": [[244, "fmin"]], "logaddexp2": [[262, "logaddexp2"]], "bitwise_xor": [[231, "bitwise-xor"]], "lcm": [[254, "lcm"]], "deg2rad": [[235, "deg2rad"]], "cos": [[233, "cos"]], "positive": [[273, "positive"]], "logical_not": [[264, "logical-not"]], "rad2deg": [[275, "rad2deg"]], "less_equal": [[256, "less-equal"]], "equal": [[237, "equal"]], "isnan": [[252, "isnan"]], "negative": [[271, "negative"]], "gcd": [[246, "gcd"]], "minimum": [[268, "minimum"]], "nan_to_num": [[270, "nan-to-num"]], "divide": [[236, "divide"]], "logical_xor": [[266, "logical-xor"]], "isfinite": [[250, "isfinite"]], "not_equal": [[272, "not-equal"]], "pow": [[274, "pow"]], "floor": [[242, "floor"]], "log1p": [[259, "log1p"]], "multiply": [[269, "multiply"]], "expm1": [[241, "expm1"]], "cosh": [[234, "cosh"]], "exp": [[239, "exp"]], "log": [[257, "log"]], "greater": [[247, "greater"]], "log10": [[258, "log10"]], "logical_and": [[263, "logical-and"]], "imag": [[249, "imag"]], "erf": [[238, "erf"]], "isinf": [[251, "isinf"]], "fmod": [[245, "fmod"]], "log2": [[260, "log2"]], "ceil": [[232, "ceil"]], "exp2": [[240, "exp2"]], "logaddexp": [[261, "logaddexp"]], "maximum": [[267, "maximum"]], "Image": [[56, "module-ivy.data_classes.array.image"], [79, "module-ivy.data_classes.container.image"]], "Wrapping": [[68, "module-ivy.data_classes.array.wrapping"], [91, "module-ivy.data_classes.container.wrapping"]], "Conversions": [[48, "module-ivy.data_classes.array.conversions"], [71, "module-ivy.data_classes.container.conversions"]], "Resnet 18": [[46, "Resnet-18"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "Ivy as a Transpiler Introduction": [[45, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[45, "To-use-the-transpiler:"]], "Transpiler Interface": [[45, "Transpiler-Interface"]], "Telemetry": [[45, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[45, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[45, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[45, "3.-Transpile-Models-\ud83c\udf10"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Data Preparation": [[4, "Data-Preparation"], [3, "Data-Preparation"], [8, "Data-Preparation"], [5, "Data-Preparation"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "Lazy vs Eager": [[22, "Lazy-vs-Eager"]], "Unify": [[22, "Unify"], [34, "Unify"], [23, "Unify"], [32, "Unify"], [33, "Unify"]], "Trace": [[22, "Trace"], [23, "Trace"]], "Transpile": [[22, "Transpile"], [34, "Transpile"], [23, "Transpile"], [32, "Transpile"], [33, "Transpile"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Installation": [[3, "Installation"], [8, "Installation"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Examples and Demos": [[2, "examples-and-demos"], [16, "examples-and-demos"]], "Transpile any model": [[25, "Transpile-any-model"]], "Round up": [[25, "Round-up"]], "Deepmind PerceiverIO on GPU": [[42, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[42, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[42, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[42, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[42, "Run-the-demo..."]], "\u2026with torch backend": [[42, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[42, "....with-tensorflow-backend"]], "\u2026with jax backend": [[42, "...with-jax-backend"]], "\u2026with numpy backend": [[42, "...with-numpy-backend"]], "1.2: As a Decorator": [[34, "1.2:-As-a-Decorator"]], "Compile": [[34, "Compile"], [32, "Compile"], [33, "Compile"]], "Transpile code": [[21, "Transpile-code"]], "Write a model using Ivy": [[26, "Write-a-model-using-Ivy"]], "Transpiling a haiku model to build on top": [[13, "Transpiling-a-haiku-model-to-build-on-top"]], "Guides": [[11, "guides"], [16, "guides"]], "Basic Operations with Ivy": [[39, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[39, "Installs-\ud83d\udcbe"], [40, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[39, "Imports-\ud83d\udec3"], [40, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[39, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[39, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[39, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[39, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[39, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[39, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[39, "Set-Backend-Framework"]], "Define Model": [[39, "Define-Model"], [40, "Define-Model"]], "Create Model": [[39, "Create-Model"]], "Create Optimizer": [[39, "Create-Optimizer"]], "Input and Target": [[39, "Input-and-Target"]], "Loss Function": [[39, "Loss-Function"]], "Training Loop": [[39, "Training-Loop"]], "End-to-End Training Pipeline in Ivy": [[43, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[43, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[43, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[43, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[43, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[43, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[43, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[43, "Plotting-the-training-metrics"]], "Save the trained Model": [[43, "Save-the-trained-Model"]], "2.0: Kornia": [[36, "2.0:-Kornia"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "Unify code": [[19, "Unify-code"]], "ODSC Ivy Demo": [[27, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[27, "Ivy-Backend-Handler"], [18, "Ivy-Backend-Handler"]], "Data Structures": [[27, "Data-Structures"], [18, "Data-Structures"]], "Ivy Functional API": [[27, "Ivy-Functional-API"], [18, "Ivy-Functional-API"]], "Graph Tracer": [[27, "Graph-Tracer"]], "Any function": [[27, "Any-function"], [28, "Any-function"]], "Any library": [[27, "Any-library"], [28, "Any-library"]], "Any model": [[27, "Any-model"], [28, "Any-model"]], "Learn the basics": [[17, "learn-the-basics"], [16, "learn-the-basics"]], "Quickstart": [[28, "Quickstart"]], "Get familiar with Ivy": [[28, "Get-familiar-with-Ivy"]], "Functional API": [[28, "Functional-API"]], "Stateful API": [[28, "Stateful-API"]], "Tracing code": [[28, "Tracing-code"]], "How to use decorators": [[23, "How-to-use-decorators"]], "Using Ivy ResNet": [[8, "Using-Ivy-ResNet"]], "Imports": [[8, "Imports"], [5, "Imports"], [10, "Imports"]], "Prepare the set of labels": [[8, "Prepare-the-set-of-labels"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [5, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [5, "Visualise-image"]], "Model Inference ResNet34": [[8, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[8, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[8, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [8, "id1"]], "Model Inference ResNet50": [[8, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[8, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Accelerating PyTorch models with JAX": [[9, "Accelerating-PyTorch-models-with-JAX"]], "HuggingFace Tensorflow DeiT": [[44, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[44, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Trace code": [[20, "Trace-code"]], "0.2: Transpile": [[31, "0.2:-Transpile"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Transpiling a Tensorflow model to build on top": [[14, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "3.0: Perceiver": [[37, "3.0:-Perceiver"]], "1.0: Lazy vs Eager": [[32, "1.0:-Lazy-vs-Eager"]], "Accelerating MMPreTrain models with JAX": [[7, "Accelerating-MMPreTrain-models-with-JAX"]], "1.3: Dynamic vs Static": [[35, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[35, "Dynamic"]], "Static": [[35, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[35, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[41, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[41, "Table-of-Contents"]], "Defining the model": [[41, "Defining-the-model"]], "Model construction": [[41, "Model-construction"]], "Some helper functions": [[41, "Some-helper-functions"]], "Transpiling the model": [[41, "Transpiling-the-model"]], "PyTorch pipeline": [[41, "PyTorch-pipeline"]], "Dataset download": [[41, "Dataset-download"]], "DataLoader": [[41, "DataLoader"]], "Training": [[41, "Training"]], "0.1: Compile": [[30, "0.1:-Compile"]], "Developing a convolutional network using Ivy": [[15, "Developing-a-convolutional-network-using-Ivy"]], "3.1: Stable Diffusion": [[38, "3.1:-Stable-Diffusion"]], "Transpiling a PyTorch model to build on top": [[12, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Tutorials And Examples": [[16, "tutorials-and-examples"]], "Accelerating XGBoost with JAX": [[10, "Accelerating-XGBoost-with-JAX"]], "Tests": [[10, "Tests"]], "Loading the Data": [[10, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[10, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[10, "JAX-backend"]], "Tensorflow backend": [[10, "Tensorflow-backend"]], "PyTorch backend": [[10, "PyTorch-backend"]], "More exhaustive example": [[10, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[10, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[10, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[10, "Comparison-of-Metrics"]], "0.0: Unify": [[29, "0.0:-Unify"]], "1.1: Framework Selection": [[33, "1.1:-Framework-Selection"]], "Compilation of a Basic Function": [[40, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[40, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[40, "Function-compilation-\ud83d\udee0"]], "Set backend": [[40, "Set-backend"]], "Sample input": [[40, "Sample-input"]], "Define function to compile": [[40, "Define-function-to-compile"]], "Compile the function": [[40, "Compile-the-function"]], "Check results": [[40, "Check-results"], [40, "id1"]], "Compiling simple neural network \ud83e\udde0": [[40, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[40, "Create-model"]], "Define input": [[40, "Define-input"]], "Compile network": [[40, "Compile-network"]], "Write Ivy code": [[18, "Write-Ivy-code"]], "Contents": [[18, "Contents"]], "Installing Ivy": [[18, "Installing-Ivy"]], "Importing Ivy": [[18, "Importing-Ivy"]], "Transpile any library": [[24, "Transpile-any-library"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[47, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[47, "module-ivy.data_classes.array.activations"], [48, "module-ivy.data_classes.array.conversions"], [49, "module-ivy.data_classes.array.creation"], [50, "module-ivy.data_classes.array.data_type"], [51, "module-ivy.data_classes.array.device"], [52, "module-ivy.data_classes.array.elementwise"], [53, "module-ivy.data_classes.array.experimental"], [53, "module-ivy.data_classes.array.experimental.activations"], [53, "module-ivy.data_classes.array.experimental.conversions"], [53, "module-ivy.data_classes.array.experimental.creation"], [53, "module-ivy.data_classes.array.experimental.data_type"], [53, "module-ivy.data_classes.array.experimental.device"], [53, "module-ivy.data_classes.array.experimental.elementwise"], [53, "module-ivy.data_classes.array.experimental.general"], [53, "module-ivy.data_classes.array.experimental.gradients"], [53, "module-ivy.data_classes.array.experimental.image"], [53, "module-ivy.data_classes.array.experimental.layers"], [53, "module-ivy.data_classes.array.experimental.linear_algebra"], [53, "module-ivy.data_classes.array.experimental.losses"], [53, "module-ivy.data_classes.array.experimental.manipulation"], [53, "module-ivy.data_classes.array.experimental.norms"], [53, "module-ivy.data_classes.array.experimental.random"], [53, "module-ivy.data_classes.array.experimental.searching"], [53, "module-ivy.data_classes.array.experimental.set"], [53, "module-ivy.data_classes.array.experimental.sorting"], [53, "module-ivy.data_classes.array.experimental.statistical"], [53, "module-ivy.data_classes.array.experimental.utility"], [54, "module-ivy.data_classes.array.general"], [55, "module-ivy.data_classes.array.gradients"], [56, "module-ivy.data_classes.array.image"], [57, "module-ivy.data_classes.array.layers"], [58, "module-ivy.data_classes.array.linear_algebra"], [59, "module-ivy.data_classes.array.losses"], [60, "module-ivy.data_classes.array.manipulation"], [61, "module-ivy.data_classes.array.norms"], [62, "module-ivy.data_classes.array.random"], [63, "module-ivy.data_classes.array.searching"], [64, "module-ivy.data_classes.array.set"], [65, "module-ivy.data_classes.array.sorting"], [66, "module-ivy.data_classes.array.statistical"], [67, "module-ivy.data_classes.array.utility"], [68, "module-ivy.data_classes.array.wrapping"], [69, "module-ivy.data_classes.container.activations"], [70, "module-ivy.data_classes.container.base"], [71, "module-ivy.data_classes.container.conversions"], [72, "module-ivy.data_classes.container.creation"], [73, "module-ivy.data_classes.container.data_type"], [74, "module-ivy.data_classes.container.device"], [75, "module-ivy.data_classes.container.elementwise"], [76, "module-ivy.data_classes.container.experimental"], [76, "module-ivy.data_classes.container.experimental.activations"], [76, "module-ivy.data_classes.container.experimental.conversions"], [76, "module-ivy.data_classes.container.experimental.creation"], [76, "module-ivy.data_classes.container.experimental.data_type"], [76, "module-ivy.data_classes.container.experimental.device"], [76, "module-ivy.data_classes.container.experimental.elementwise"], [76, "module-ivy.data_classes.container.experimental.general"], [76, "module-ivy.data_classes.container.experimental.gradients"], [76, "module-ivy.data_classes.container.experimental.image"], [76, "module-ivy.data_classes.container.experimental.layers"], [76, "module-ivy.data_classes.container.experimental.linear_algebra"], [76, "module-ivy.data_classes.container.experimental.losses"], [76, "module-ivy.data_classes.container.experimental.manipulation"], [76, "module-ivy.data_classes.container.experimental.norms"], [76, "module-ivy.data_classes.container.experimental.random"], [76, "module-ivy.data_classes.container.experimental.searching"], [76, "module-ivy.data_classes.container.experimental.set"], [76, "module-ivy.data_classes.container.experimental.sorting"], [76, "module-ivy.data_classes.container.experimental.statistical"], [76, "module-ivy.data_classes.container.experimental.utility"], [77, "module-ivy.data_classes.container.general"], [78, "module-ivy.data_classes.container.gradients"], [79, "module-ivy.data_classes.container.image"], [80, "module-ivy.data_classes.container.layers"], [81, "module-ivy.data_classes.container.linear_algebra"], [82, "module-ivy.data_classes.container.losses"], [83, "module-ivy.data_classes.container.manipulation"], [84, "module-ivy.data_classes.container.norms"], [85, "module-ivy.data_classes.container.random"], [86, "module-ivy.data_classes.container.searching"], [87, "module-ivy.data_classes.container.set"], [88, "module-ivy.data_classes.container.sorting"], [89, "module-ivy.data_classes.container.statistical"], [90, "module-ivy.data_classes.container.utility"], [91, "module-ivy.data_classes.container.wrapping"], [92, "module-ivy.data_classes.factorized_tensor.base"], [93, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [96, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [98, "module-ivy.data_classes.array.array"], [99, "module-ivy.data_classes.container.container"], [101, "module-ivy.data_classes.nested_array.nested_array"], [102, "module-ivy.data_classes.nested_array.base"], [103, "module-ivy.data_classes.nested_array.elementwise"], [361, "module-ivy.functional.ivy.experimental.activations"], [362, "module-ivy.functional.ivy.experimental.constants"], [363, "module-ivy.functional.ivy.experimental.creation"], [364, "module-ivy.functional.ivy.experimental.data_type"], [365, "module-ivy.functional.ivy.experimental.device"], [366, "module-ivy.functional.ivy.experimental.elementwise"], [367, "module-ivy.functional.ivy.experimental.general"], [368, "module-ivy.functional.ivy.experimental.gradients"], [369, "module-ivy.functional.ivy.experimental.layers"], [370, "module-ivy.functional.ivy.experimental.linear_algebra"], [371, "module-ivy.functional.ivy.experimental.losses"], [372, "module-ivy.functional.ivy.experimental.manipulation"], [373, "module-ivy.functional.ivy.experimental.meta"], [374, "module-ivy.functional.ivy.experimental.nest"], [375, "module-ivy.functional.ivy.experimental.norms"], [376, "module-ivy.functional.ivy.experimental.random"], [377, "module-ivy.functional.ivy.experimental.searching"], [378, "module-ivy.functional.ivy.experimental.set"], [379, "module-ivy.functional.ivy.experimental.sorting"], [380, "module-ivy.functional.ivy.experimental.sparse_array"], [381, "module-ivy.functional.ivy.experimental.statistical"], [382, "module-ivy.functional.ivy.experimental.utility"], [615, "module-ivy.functional.ivy.activations"], [616, "module-ivy.functional.ivy.constants"], [617, "module-ivy.functional.ivy.control_flow_ops"], [618, "module-ivy.functional.ivy.creation"], [619, "module-ivy.functional.ivy.data_type"], [620, "module-ivy.functional.ivy.device"], [621, "module-ivy.functional.ivy.elementwise"], [622, "module-ivy.functional.ivy.experimental"], [623, "module-ivy.functional.ivy.general"], [624, "module-ivy.functional.ivy.gradients"], [625, "module-ivy.functional.ivy.layers"], [626, "module-ivy.functional.ivy.linear_algebra"], [627, "module-ivy.functional.ivy.losses"], [628, "module-ivy.functional.ivy.manipulation"], [629, "module-ivy.functional.ivy.meta"], [630, "module-ivy.functional.ivy.nest"], [631, "module-ivy.functional.ivy.norms"], [632, "module-ivy.functional.ivy.random"], [633, "module-ivy.functional.ivy.searching"], [634, "module-ivy.functional.ivy.set"], [635, "module-ivy.functional.ivy.sorting"], [636, "module-ivy.functional.ivy.statistical"], [637, "module-ivy.functional.ivy.utility"], [761, "module-ivy_tests.test_ivy.helpers.assertions"], [762, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [763, "module-ivy_tests.test_ivy.helpers.function_testing"], [764, "module-ivy_tests.test_ivy.helpers.globals"], [765, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [768, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [769, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [770, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [771, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [772, "module-ivy_tests.test_ivy.helpers.structs"], [773, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [774, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [778, "module-ivy.stateful.activations"], [779, "module-ivy.stateful.converters"], [780, "module-ivy.stateful.helpers"], [781, "module-ivy.stateful.initializers"], [782, "module-ivy.stateful.layers"], [783, "module-ivy.stateful.losses"], [784, "module-ivy.stateful.module"], [785, "module-ivy.stateful.norms"], [786, "module-ivy.stateful.optimizers"], [787, "module-ivy.stateful.sequential"], [788, "module-ivy.utils.assertions"], [789, "module-ivy.utils.backend"], [790, "module-ivy.utils.backend.ast_helpers"], [791, "module-ivy.utils.backend.handler"], [792, "module-ivy.utils.backend.sub_backend_handler"], [793, "module-ivy.utils.binaries"], [794, "module-ivy.utils.dynamic_import"], [795, "module-ivy.utils.einsum_parser"], [796, "module-ivy.utils.einsum_path_helpers"], [797, "module-ivy.utils.exceptions"], [798, "module-ivy.utils.inspection"], [799, "module-ivy.utils.logging"], [800, "module-ivy.utils.profiler"], [801, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[48, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[49, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[50, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[51, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[51, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[51, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[51, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[51, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[52, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[53, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[53, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[53, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[53, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[53, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[53, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[53, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[53, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[53, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[53, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[53, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[53, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[53, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[53, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[53, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[53, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[53, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[53, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[53, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[53, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[53, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[53, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[53, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[53, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[53, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[53, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[53, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[53, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[53, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[53, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[53, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[53, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[54, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[55, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[56, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[56, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[56, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[57, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[58, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[59, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[60, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[61, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[62, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[62, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[62, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[63, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[64, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[64, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[64, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[65, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[66, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[67, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[68, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[68, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[68, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[69, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[70, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[70, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[71, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[72, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[73, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[74, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[74, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[75, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[76, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[76, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[76, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[76, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[76, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[76, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[76, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[76, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[76, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[76, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[76, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[76, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[76, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[76, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[76, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[76, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[76, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[76, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[76, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[76, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[76, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[76, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[76, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[76, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[76, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[76, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[76, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[76, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[76, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[76, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[76, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[76, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[76, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[76, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[77, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[78, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[79, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[79, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[79, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[80, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[81, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[82, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[83, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[84, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[85, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[85, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[86, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[87, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[87, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[87, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[88, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[89, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[90, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[91, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[91, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[91, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[92, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[93, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[96, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[98, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[98, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[99, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[99, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[101, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[102, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[103, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[106, "ivy.gelu"], [615, "ivy.gelu"]], "gelu() (ivy.array method)": [[106, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[106, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[107, "ivy.hardswish"], [615, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[107, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[107, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[108, "ivy.leaky_relu"], [615, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[108, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[108, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[109, "ivy.log_softmax"], [615, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[109, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[109, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[110, "ivy.mish"], [615, "ivy.mish"]], "mish() (ivy.array method)": [[110, "ivy.Array.mish"]], "mish() (ivy.container method)": [[110, "ivy.Container.mish"]], "relu() (in module ivy)": [[111, "ivy.relu"], [615, "ivy.relu"]], "relu() (ivy.array method)": [[111, "ivy.Array.relu"]], "relu() (ivy.container method)": [[111, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[112, "ivy.sigmoid"], [615, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[112, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[112, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[113, "ivy.softmax"], [615, "ivy.softmax"]], "softmax() (ivy.array method)": [[113, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[113, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[114, "ivy.softplus"], [615, "ivy.softplus"]], "softplus() (ivy.array method)": [[114, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[114, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[115, "ivy.softsign"], [615, "ivy.softsign"]], "cmp_is() (in module ivy)": [[116, "ivy.cmp_is"], [617, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[117, "ivy.cmp_isnot"], [617, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[118, "ivy.for_loop"], [617, "ivy.for_loop"]], "if_else() (in module ivy)": [[119, "ivy.if_else"], [617, "ivy.if_else"]], "try_except() (in module ivy)": [[120, "ivy.try_except"], [617, "ivy.try_except"]], "while_loop() (in module ivy)": [[121, "ivy.while_loop"], [617, "ivy.while_loop"]], "arange() (in module ivy)": [[122, "ivy.arange"], [618, "ivy.arange"]], "array() (in module ivy)": [[123, "ivy.array"], [618, "ivy.array"]], "asarray() (in module ivy)": [[124, "ivy.asarray"], [618, "ivy.asarray"]], "asarray() (ivy.array method)": [[124, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[124, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[125, "ivy.copy_array"], [618, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[125, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[125, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[126, "ivy.empty"], [618, "ivy.empty"]], "empty_like() (in module ivy)": [[127, "ivy.empty_like"], [618, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[127, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[127, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[128, "ivy.eye"], [618, "ivy.eye"]], "from_dlpack() (in module ivy)": [[129, "ivy.from_dlpack"], [618, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[129, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[129, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[130, "ivy.frombuffer"], [618, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[130, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[131, "ivy.full"], [618, "ivy.full"]], "full_like() (in module ivy)": [[132, "ivy.full_like"], [618, "ivy.full_like"]], "full_like() (ivy.array method)": [[132, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[132, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[133, "ivy.linspace"], [618, "ivy.linspace"]], "linspace() (ivy.array method)": [[133, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[133, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[134, "ivy.logspace"], [618, "ivy.logspace"]], "logspace() (ivy.array method)": [[134, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[134, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[135, "ivy.meshgrid"], [618, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[135, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[135, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[136, "ivy.native_array"], [618, "ivy.native_array"]], "native_array() (ivy.array method)": [[136, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[136, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[137, "ivy.one_hot"], [618, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[137, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[137, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[138, "ivy.ones"], [618, "ivy.ones"]], "ones_like() (in module ivy)": [[139, "ivy.ones_like"], [618, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[139, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[139, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[140, "ivy.to_dlpack"], [618, "ivy.to_dlpack"]], "tril() (in module ivy)": [[141, "ivy.tril"], [618, "ivy.tril"]], "tril() (ivy.array method)": [[141, "ivy.Array.tril"]], "tril() (ivy.container method)": [[141, "ivy.Container.tril"]], "triu() (in module ivy)": [[142, "ivy.triu"], [618, "ivy.triu"]], "triu() (ivy.array method)": [[142, "ivy.Array.triu"]], "triu() (ivy.container method)": [[142, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[143, "ivy.triu_indices"], [618, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[143, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[144, "ivy.zeros"], [618, "ivy.zeros"]], "zeros_like() (in module ivy)": [[145, "ivy.zeros_like"], [618, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[145, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[145, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[146, "ivy.as_ivy_dtype"], [619, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[147, "ivy.as_native_dtype"], [619, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[148, "ivy.astype"], [619, "ivy.astype"]], "astype() (ivy.array method)": [[148, "ivy.Array.astype"]], "astype() (ivy.container method)": [[148, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[149, "ivy.broadcast_arrays"], [619, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[149, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[149, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[150, "ivy.broadcast_to"], [619, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[150, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[150, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[151, "ivy.can_cast"], [619, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[151, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[151, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[152, "ivy.check_float"], [619, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[153, "ivy.closest_valid_dtype"], [619, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[154, "ivy.default_complex_dtype"], [619, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[155, "ivy.default_dtype"], [619, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[156, "ivy.default_float_dtype"], [619, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[157, "ivy.default_int_dtype"], [619, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[158, "ivy.default_uint_dtype"], [619, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[159, "ivy.dtype"], [619, "ivy.dtype"]], "dtype() (ivy.array method)": [[159, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[159, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[160, "ivy.dtype_bits"], [619, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[161, "ivy.finfo"], [619, "ivy.finfo"]], "finfo() (ivy.array method)": [[161, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[161, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[162, "ivy.function_supported_dtypes"], [619, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[163, "ivy.function_unsupported_dtypes"], [619, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[164, "ivy.iinfo"], [619, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[164, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[164, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[165, "ivy.infer_default_dtype"], [619, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[166, "ivy.invalid_dtype"], [619, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[167, "ivy.is_bool_dtype"], [619, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[167, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[167, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[168, "ivy.is_complex_dtype"], [619, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[168, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[169, "ivy.is_float_dtype"], [619, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[169, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[169, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[170, "ivy.is_hashable_dtype"], [619, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[171, "ivy.is_int_dtype"], [619, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[171, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[171, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[172, "ivy.is_native_dtype"], [619, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[173, "ivy.is_uint_dtype"], [619, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[173, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[173, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[174, "ivy.promote_types"], [619, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[175, "ivy.promote_types_of_inputs"], [619, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[176, "ivy.result_type"], [619, "ivy.result_type"]], "result_type() (ivy.array method)": [[176, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[176, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[177, "ivy.set_default_complex_dtype"], [619, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[178, "ivy.set_default_dtype"], [619, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[179, "ivy.set_default_float_dtype"], [619, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[180, "ivy.set_default_int_dtype"], [619, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[181, "ivy.set_default_uint_dtype"], [619, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[182, "ivy.type_promote_arrays"], [619, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[183, "ivy.unset_default_complex_dtype"], [619, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[184, "ivy.unset_default_dtype"], [619, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[185, "ivy.unset_default_float_dtype"], [619, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[186, "ivy.unset_default_int_dtype"], [619, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[187, "ivy.unset_default_uint_dtype"], [619, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[188, "ivy.valid_dtype"], [619, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[189, "ivy.as_ivy_dev"], [620, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[190, "ivy.as_native_dev"], [620, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[191, "ivy.clear_cached_mem_on_dev"], [620, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[192, "ivy.default_device"], [620, "ivy.default_device"]], "dev() (in module ivy)": [[193, "ivy.dev"], [620, "ivy.dev"]], "dev() (ivy.array method)": [[193, "ivy.Array.dev"]], "dev() (ivy.container method)": [[193, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[194, "ivy.dev_util"], [620, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[195, "ivy.function_supported_devices"], [620, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[196, "ivy.function_unsupported_devices"], [620, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[197, "ivy.get_all_ivy_arrays_on_dev"], [620, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[198, "ivy.gpu_is_available"], [620, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[199, "ivy.handle_soft_device_variable"], [620, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[200, "ivy.num_cpu_cores"], [620, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[201, "ivy.num_gpus"], [620, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[202, "ivy.num_ivy_arrays_on_dev"], [620, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[203, "ivy.percent_used_mem_on_dev"], [620, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[204, "ivy.print_all_ivy_arrays_on_dev"], [620, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[205, "ivy.set_default_device"], [620, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[206, "ivy.set_soft_device_mode"], [620, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[207, "ivy.set_split_factor"], [620, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[208, "ivy.split_factor"], [620, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[209, "ivy.split_func_call"], [620, "ivy.split_func_call"]], "to_device() (in module ivy)": [[210, "ivy.to_device"], [620, "ivy.to_device"]], "to_device() (ivy.array method)": [[210, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[210, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[211, "ivy.total_mem_on_dev"], [620, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[212, "ivy.tpu_is_available"], [620, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[213, "ivy.unset_default_device"], [620, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[214, "ivy.unset_soft_device_mode"], [620, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[215, "ivy.used_mem_on_dev"], [620, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[216, "ivy.abs"], [621, "ivy.abs"]], "abs() (ivy.array method)": [[216, "ivy.Array.abs"]], "abs() (ivy.container method)": [[216, "ivy.Container.abs"]], "acos() (in module ivy)": [[217, "ivy.acos"], [621, "ivy.acos"]], "acos() (ivy.array method)": [[217, "ivy.Array.acos"]], "acos() (ivy.container method)": [[217, "ivy.Container.acos"]], "acosh() (in module ivy)": [[218, "ivy.acosh"], [621, "ivy.acosh"]], "acosh() (ivy.array method)": [[218, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[218, "ivy.Container.acosh"]], "add() (in module ivy)": [[219, "ivy.add"], [621, "ivy.add"]], "add() (ivy.array method)": [[219, "ivy.Array.add"]], "add() (ivy.container method)": [[219, "ivy.Container.add"]], "angle() (in module ivy)": [[220, "ivy.angle"], [621, "ivy.angle"]], "angle() (ivy.array method)": [[220, "ivy.Array.angle"]], "angle() (ivy.container method)": [[220, "ivy.Container.angle"]], "asin() (in module ivy)": [[221, "ivy.asin"], [621, "ivy.asin"]], "asin() (ivy.array method)": [[221, "ivy.Array.asin"]], "asin() (ivy.container method)": [[221, "ivy.Container.asin"]], "asinh() (in module ivy)": [[222, "ivy.asinh"], [621, "ivy.asinh"]], "asinh() (ivy.array method)": [[222, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[222, "ivy.Container.asinh"]], "atan() (in module ivy)": [[223, "ivy.atan"], [621, "ivy.atan"]], "atan() (ivy.array method)": [[223, "ivy.Array.atan"]], "atan() (ivy.container method)": [[223, "ivy.Container.atan"]], "atan2() (in module ivy)": [[224, "ivy.atan2"], [621, "ivy.atan2"]], "atan2() (ivy.array method)": [[224, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[224, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[225, "ivy.atanh"], [621, "ivy.atanh"]], "atanh() (ivy.array method)": [[225, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[225, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[226, "ivy.bitwise_and"], [621, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[226, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[226, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[227, "ivy.bitwise_invert"], [621, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[227, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[227, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[228, "ivy.bitwise_left_shift"], [621, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[228, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[228, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[229, "ivy.bitwise_or"], [621, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[229, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[229, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[230, "ivy.bitwise_right_shift"], [621, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[230, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[230, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[231, "ivy.bitwise_xor"], [621, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[231, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[231, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[232, "ivy.ceil"], [621, "ivy.ceil"]], "ceil() (ivy.array method)": [[232, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[232, "ivy.Container.ceil"]], "cos() (in module ivy)": [[233, "ivy.cos"], [621, "ivy.cos"]], "cos() (ivy.array method)": [[233, "ivy.Array.cos"]], "cos() (ivy.container method)": [[233, "ivy.Container.cos"]], "cosh() (in module ivy)": [[234, "ivy.cosh"], [621, "ivy.cosh"]], "cosh() (ivy.array method)": [[234, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[234, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[235, "ivy.deg2rad"], [621, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[235, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[235, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[236, "ivy.divide"], [621, "ivy.divide"]], "divide() (ivy.array method)": [[236, "ivy.Array.divide"]], "divide() (ivy.container method)": [[236, "ivy.Container.divide"]], "equal() (in module ivy)": [[237, "ivy.equal"], [621, "ivy.equal"]], "equal() (ivy.array method)": [[237, "ivy.Array.equal"]], "equal() (ivy.container method)": [[237, "ivy.Container.equal"]], "erf() (in module ivy)": [[238, "ivy.erf"], [621, "ivy.erf"]], "erf() (ivy.array method)": [[238, "ivy.Array.erf"]], "erf() (ivy.container method)": [[238, "ivy.Container.erf"]], "exp() (in module ivy)": [[239, "ivy.exp"], [621, "ivy.exp"]], "exp() (ivy.array method)": [[239, "ivy.Array.exp"]], "exp() (ivy.container method)": [[239, "ivy.Container.exp"]], "exp2() (in module ivy)": [[240, "ivy.exp2"], [621, "ivy.exp2"]], "exp2() (ivy.array method)": [[240, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[240, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[241, "ivy.expm1"], [621, "ivy.expm1"]], "expm1() (ivy.array method)": [[241, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[241, "ivy.Container.expm1"]], "floor() (in module ivy)": [[242, "ivy.floor"], [621, "ivy.floor"]], "floor() (ivy.array method)": [[242, "ivy.Array.floor"]], "floor() (ivy.container method)": [[242, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[243, "ivy.floor_divide"], [621, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[243, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[243, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[244, "ivy.fmin"], [621, "ivy.fmin"]], "fmin() (ivy.array method)": [[244, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[244, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[245, "ivy.fmod"], [621, "ivy.fmod"]], "fmod() (ivy.array method)": [[245, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[245, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[246, "ivy.gcd"], [621, "ivy.gcd"]], "gcd() (ivy.array method)": [[246, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[246, "ivy.Container.gcd"]], "greater() (in module ivy)": [[247, "ivy.greater"], [621, "ivy.greater"]], "greater() (ivy.array method)": [[247, "ivy.Array.greater"]], "greater() (ivy.container method)": [[247, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[248, "ivy.greater_equal"], [621, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[248, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[248, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[249, "ivy.imag"], [621, "ivy.imag"]], "imag() (ivy.array method)": [[249, "ivy.Array.imag"]], "imag() (ivy.container method)": [[249, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[250, "ivy.isfinite"], [621, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[250, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[250, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[251, "ivy.isinf"], [621, "ivy.isinf"]], "isinf() (ivy.array method)": [[251, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[251, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[252, "ivy.isnan"], [621, "ivy.isnan"]], "isnan() (ivy.array method)": [[252, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[252, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[253, "ivy.isreal"], [621, "ivy.isreal"]], "isreal() (ivy.array method)": [[253, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[253, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[254, "ivy.lcm"], [621, "ivy.lcm"]], "lcm() (ivy.array method)": [[254, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[254, "ivy.Container.lcm"]], "less() (in module ivy)": [[255, "ivy.less"], [621, "ivy.less"]], "less() (ivy.array method)": [[255, "ivy.Array.less"]], "less() (ivy.container method)": [[255, "ivy.Container.less"]], "less_equal() (in module ivy)": [[256, "ivy.less_equal"], [621, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[256, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[256, "ivy.Container.less_equal"]], "log() (in module ivy)": [[257, "ivy.log"], [621, "ivy.log"]], "log() (ivy.array method)": [[257, "ivy.Array.log"]], "log() (ivy.container method)": [[257, "ivy.Container.log"]], "log10() (in module ivy)": [[258, "ivy.log10"], [621, "ivy.log10"]], "log10() (ivy.array method)": [[258, "ivy.Array.log10"]], "log10() (ivy.container method)": [[258, "ivy.Container.log10"]], "log1p() (in module ivy)": [[259, "ivy.log1p"], [621, "ivy.log1p"]], "log1p() (ivy.array method)": [[259, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[259, "ivy.Container.log1p"]], "log2() (in module ivy)": [[260, "ivy.log2"], [621, "ivy.log2"]], "log2() (ivy.array method)": [[260, "ivy.Array.log2"]], "log2() (ivy.container method)": [[260, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[261, "ivy.logaddexp"], [621, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[261, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[261, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[262, "ivy.logaddexp2"], [621, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[262, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[262, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[263, "ivy.logical_and"], [621, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[263, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[263, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[264, "ivy.logical_not"], [621, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[264, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[264, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[265, "ivy.logical_or"], [621, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[265, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[265, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[266, "ivy.logical_xor"], [621, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[266, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[266, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[267, "ivy.maximum"], [621, "ivy.maximum"]], "maximum() (ivy.array method)": [[267, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[267, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[268, "ivy.minimum"], [621, "ivy.minimum"]], "minimum() (ivy.array method)": [[268, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[268, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[269, "ivy.multiply"], [621, "ivy.multiply"]], "multiply() (ivy.array method)": [[269, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[269, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[270, "ivy.nan_to_num"], [621, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[270, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[270, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[271, "ivy.negative"], [621, "ivy.negative"]], "negative() (ivy.array method)": [[271, "ivy.Array.negative"]], "negative() (ivy.container method)": [[271, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[272, "ivy.not_equal"], [621, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[272, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[272, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[273, "ivy.positive"], [621, "ivy.positive"]], "positive() (ivy.array method)": [[273, "ivy.Array.positive"]], "positive() (ivy.container method)": [[273, "ivy.Container.positive"]], "pow() (in module ivy)": [[274, "ivy.pow"], [621, "ivy.pow"]], "pow() (ivy.array method)": [[274, "ivy.Array.pow"]], "pow() (ivy.container method)": [[274, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[275, "ivy.rad2deg"], [621, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[275, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[275, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[276, "ivy.real"], [621, "ivy.real"]], "real() (ivy.array method)": [[276, "ivy.Array.real"]], "real() (ivy.container method)": [[276, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[277, "ivy.reciprocal"], [621, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[277, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[277, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[278, "ivy.remainder"], [621, "ivy.remainder"]], "remainder() (ivy.array method)": [[278, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[278, "ivy.Container.remainder"]], "round() (in module ivy)": [[279, "ivy.round"], [621, "ivy.round"]], "round() (ivy.array method)": [[279, "ivy.Array.round"]], "round() (ivy.container method)": [[279, "ivy.Container.round"]], "sign() (in module ivy)": [[280, "ivy.sign"], [621, "ivy.sign"]], "sign() (ivy.array method)": [[280, "ivy.Array.sign"]], "sign() (ivy.container method)": [[280, "ivy.Container.sign"]], "sin() (in module ivy)": [[281, "ivy.sin"], [621, "ivy.sin"]], "sin() (ivy.array method)": [[281, "ivy.Array.sin"]], "sin() (ivy.container method)": [[281, "ivy.Container.sin"]], "sinh() (in module ivy)": [[282, "ivy.sinh"], [621, "ivy.sinh"]], "sinh() (ivy.array method)": [[282, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[282, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[283, "ivy.sqrt"], [621, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[283, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[283, "ivy.Container.sqrt"]], "square() (in module ivy)": [[284, "ivy.square"], [621, "ivy.square"]], "square() (ivy.array method)": [[284, "ivy.Array.square"]], "square() (ivy.container method)": [[284, "ivy.Container.square"]], "subtract() (in module ivy)": [[285, "ivy.subtract"], [621, "ivy.subtract"]], "subtract() (ivy.array method)": [[285, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[285, "ivy.Container.subtract"]], "tan() (in module ivy)": [[286, "ivy.tan"], [621, "ivy.tan"]], "tan() (ivy.array method)": [[286, "ivy.Array.tan"]], "tan() (ivy.container method)": [[286, "ivy.Container.tan"]], "tanh() (in module ivy)": [[287, "ivy.tanh"], [621, "ivy.tanh"]], "tanh() (ivy.array method)": [[287, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[287, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[288, "ivy.trapz"], [621, "ivy.trapz"]], "trapz() (ivy.array method)": [[288, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[288, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[289, "ivy.trunc"], [621, "ivy.trunc"]], "trunc() (ivy.array method)": [[289, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[289, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[290, "ivy.trunc_divide"], [621, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[290, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[290, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[291, "ivy.celu"], [361, "ivy.celu"]], "celu() (ivy.array method)": [[291, "ivy.Array.celu"]], "celu() (ivy.container method)": [[291, "ivy.Container.celu"]], "elu() (in module ivy)": [[292, "ivy.elu"], [361, "ivy.elu"]], "elu() (ivy.array method)": [[292, "ivy.Array.elu"]], "elu() (ivy.container method)": [[292, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[293, "ivy.hardshrink"], [361, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[293, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[293, "ivy.Container.hardshrink"]], "hardtanh() (in module ivy)": [[294, "ivy.hardtanh"], [361, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[294, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[294, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[295, "ivy.logit"], [361, "ivy.logit"]], "logit() (ivy.array method)": [[295, "ivy.Array.logit"]], "logit() (ivy.container method)": [[295, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[296, "ivy.logsigmoid"], [361, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[296, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[296, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[297, "ivy.prelu"], [361, "ivy.prelu"]], "prelu() (ivy.array method)": [[297, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[297, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[298, "ivy.relu6"], [361, "ivy.relu6"]], "relu6() (ivy.array method)": [[298, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[298, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[299, "ivy.scaled_tanh"], [361, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[299, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[299, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[300, "ivy.selu"], [361, "ivy.selu"]], "selu() (ivy.array method)": [[300, "ivy.Array.selu"]], "selu() (ivy.container method)": [[300, "ivy.Container.selu"]], "silu() (in module ivy)": [[301, "ivy.silu"], [361, "ivy.silu"]], "silu() (ivy.array method)": [[301, "ivy.Array.silu"]], "silu() (ivy.container method)": [[301, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[302, "ivy.softshrink"], [361, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[302, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[302, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[303, "ivy.stanh"], [361, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[304, "ivy.tanhshrink"], [361, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[304, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[304, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[305, "ivy.threshold"], [361, "ivy.threshold"]], "threshold() (ivy.array method)": [[305, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[305, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[306, "ivy.thresholded_relu"], [361, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[306, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[306, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[307, "ivy.blackman_window"], [363, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[307, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[307, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[308, "ivy.eye_like"], [363, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[308, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[308, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[309, "ivy.hamming_window"], [363, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[309, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[310, "ivy.hann_window"], [363, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[310, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[311, "ivy.indices"], [363, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[312, "ivy.kaiser_bessel_derived_window"], [363, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[312, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[313, "ivy.kaiser_window"], [363, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[313, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[314, "ivy.mel_weight_matrix"], [363, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[314, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[314, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[315, "ivy.ndenumerate"], [363, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[316, "ivy.ndindex"], [363, "ivy.ndindex"]], "polyval() (in module ivy)": [[317, "ivy.polyval"], [363, "ivy.polyval"]], "polyval() (ivy.container method)": [[317, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[318, "ivy.random_cp"], [363, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[319, "ivy.random_parafac2"], [363, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[320, "ivy.random_tr"], [363, "ivy.random_tr"]], "random_tt() (in module ivy)": [[321, "ivy.random_tt"], [363, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[322, "ivy.random_tucker"], [363, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[323, "ivy.tril_indices"], [363, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[323, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[324, "ivy.trilu"], [363, "ivy.trilu"]], "trilu() (ivy.array method)": [[324, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[324, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[325, "ivy.unsorted_segment_mean"], [363, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[325, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[325, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[326, "ivy.unsorted_segment_min"], [363, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[326, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[326, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[327, "ivy.unsorted_segment_sum"], [363, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[327, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[327, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[328, "ivy.vorbis_window"], [363, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[328, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[329, "ivy.allclose"], [366, "ivy.allclose"]], "allclose() (ivy.array method)": [[329, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[329, "ivy.Container.allclose"]], "amax() (in module ivy)": [[330, "ivy.amax"], [366, "ivy.amax"]], "amax() (ivy.array method)": [[330, "ivy.Array.amax"]], "amax() (ivy.container method)": [[330, "ivy.Container.amax"]], "amin() (in module ivy)": [[331, "ivy.amin"], [366, "ivy.amin"]], "amin() (ivy.array method)": [[331, "ivy.Array.amin"]], "amin() (ivy.container method)": [[331, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[332, "ivy.binarizer"], [366, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[332, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[332, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[333, "ivy.conj"], [366, "ivy.conj"]], "conj() (ivy.array method)": [[333, "ivy.Array.conj"]], "conj() (ivy.container method)": [[333, "ivy.Container.conj"]], "copysign() (in module ivy)": [[334, "ivy.copysign"], [366, "ivy.copysign"]], "copysign() (ivy.array method)": [[334, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[334, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[335, "ivy.count_nonzero"], [366, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[335, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[335, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[336, "ivy.diff"], [366, "ivy.diff"]], "diff() (ivy.array method)": [[336, "ivy.Array.diff"]], "diff() (ivy.container method)": [[336, "ivy.Container.diff"]], "digamma() (in module ivy)": [[337, "ivy.digamma"], [366, "ivy.digamma"]], "digamma() (ivy.array method)": [[337, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[337, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[338, "ivy.erfc"], [366, "ivy.erfc"]], "erfc() (ivy.array method)": [[338, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[338, "ivy.Container.erfc"]], "fix() (in module ivy)": [[339, "ivy.fix"], [366, "ivy.fix"]], "fix() (ivy.array method)": [[339, "ivy.Array.fix"]], "fix() (ivy.container method)": [[339, "ivy.Container.fix"]], "float_power() (in module ivy)": [[340, "ivy.float_power"], [366, "ivy.float_power"]], "float_power() (ivy.array method)": [[340, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[340, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[341, "ivy.fmax"], [366, "ivy.fmax"]], "fmax() (ivy.array method)": [[341, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[341, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[342, "ivy.frexp"], [366, "ivy.frexp"]], "frexp() (ivy.array method)": [[342, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[342, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[343, "ivy.gradient"], [366, "ivy.gradient"]], "gradient() (ivy.array method)": [[343, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[343, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[344, "ivy.hypot"], [366, "ivy.hypot"]], "hypot() (ivy.array method)": [[344, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[344, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[345, "ivy.isclose"], [366, "ivy.isclose"]], "isclose() (ivy.array method)": [[345, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[345, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[346, "ivy.ldexp"], [366, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[346, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[346, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[347, "ivy.lerp"], [366, "ivy.lerp"]], "lerp() (ivy.array method)": [[347, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[347, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[348, "ivy.lgamma"], [366, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[348, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[348, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[349, "ivy.modf"], [366, "ivy.modf"]], "modf() (ivy.array method)": [[349, "ivy.Array.modf"]], "modf() (ivy.container method)": [[349, "ivy.Container.modf"]], "nansum() (in module ivy)": [[350, "ivy.nansum"], [366, "ivy.nansum"]], "nansum() (ivy.array method)": [[350, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[350, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[351, "ivy.nextafter"], [366, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[351, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[351, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[352, "ivy.signbit"], [366, "ivy.signbit"]], "signbit() (ivy.array method)": [[352, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[352, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[353, "ivy.sinc"], [366, "ivy.sinc"]], "sinc() (ivy.array method)": [[353, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[353, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[354, "ivy.sparsify_tensor"], [366, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[354, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[354, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[355, "ivy.xlogy"], [366, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[355, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[355, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[356, "ivy.zeta"], [366, "ivy.zeta"]], "zeta() (ivy.array method)": [[356, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[356, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[357, "ivy.reduce"], [367, "ivy.reduce"]], "reduce() (ivy.array method)": [[357, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[357, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[358, "ivy.bind_custom_gradient_function"], [368, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[359, "ivy.jvp"], [368, "ivy.jvp"]], "vjp() (in module ivy)": [[360, "ivy.vjp"], [368, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[361, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[362, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[363, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[364, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[365, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[366, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[367, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[368, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[369, "ivy.adaptive_avg_pool1d"], [383, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[369, "ivy.adaptive_avg_pool2d"], [384, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[369, "ivy.adaptive_max_pool2d"], [385, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[369, "ivy.area_interpolate"], [386, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[369, "ivy.avg_pool1d"], [387, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[369, "ivy.avg_pool2d"], [388, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[369, "ivy.avg_pool3d"], [389, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[369, "ivy.dct"], [390, "ivy.dct"]], "dft() (in module ivy)": [[369, "ivy.dft"], [391, "ivy.dft"]], "dropout1d() (in module ivy)": [[369, "ivy.dropout1d"], [392, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[369, "ivy.dropout2d"], [393, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[369, "ivy.dropout3d"], [394, "ivy.dropout3d"]], "embedding() (in module ivy)": [[369, "ivy.embedding"], [395, "ivy.embedding"]], "fft() (in module ivy)": [[369, "ivy.fft"], [396, "ivy.fft"]], "fft2() (in module ivy)": [[369, "ivy.fft2"], [397, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[369, "ivy.generate_einsum_equation"], [398, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[369, "ivy.get_interpolate_kernel"], [399, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[369, "ivy.idct"], [400, "ivy.idct"]], "ifft() (in module ivy)": [[369, "ivy.ifft"], [401, "ivy.ifft"]], "ifftn() (in module ivy)": [[369, "ivy.ifftn"], [402, "ivy.ifftn"]], "interp() (in module ivy)": [[369, "ivy.interp"], [403, "ivy.interp"]], "interpolate() (in module ivy)": [[369, "ivy.interpolate"], [404, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[369, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[369, "ivy.max_pool1d"], [405, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[369, "ivy.max_pool2d"], [406, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[369, "ivy.max_pool3d"], [407, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[369, "ivy.max_unpool1d"], [408, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[369, "ivy.nearest_interpolate"], [409, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[369, "ivy.pool"], [410, "ivy.pool"]], "reduce_window() (in module ivy)": [[369, "ivy.reduce_window"], [411, "ivy.reduce_window"]], "rfft() (in module ivy)": [[369, "ivy.rfft"], [412, "ivy.rfft"]], "rfftn() (in module ivy)": [[369, "ivy.rfftn"], [413, "ivy.rfftn"]], "rnn() (in module ivy)": [[369, "ivy.rnn"], [414, "ivy.rnn"]], "sliding_window() (in module ivy)": [[369, "ivy.sliding_window"], [415, "ivy.sliding_window"]], "stft() (in module ivy)": [[369, "ivy.stft"], [416, "ivy.stft"]], "adjoint() (in module ivy)": [[370, "ivy.adjoint"], [417, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[370, "ivy.batched_outer"], [418, "ivy.batched_outer"]], "cond() (in module ivy)": [[370, "ivy.cond"], [419, "ivy.cond"]], "diagflat() (in module ivy)": [[370, "ivy.diagflat"], [420, "ivy.diagflat"]], "dot() (in module ivy)": [[370, "ivy.dot"], [421, "ivy.dot"]], "eig() (in module ivy)": [[370, "ivy.eig"], [422, "ivy.eig"], [626, "ivy.eig"], [661, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[370, "ivy.eigh_tridiagonal"], [423, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[370, "ivy.eigvals"], [424, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[370, "ivy.general_inner_product"], [425, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[370, "ivy.higher_order_moment"], [426, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[370, "ivy.initialize_tucker"], [427, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[370, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[370, "ivy.khatri_rao"], [428, "ivy.khatri_rao"]], "kron() (in module ivy)": [[370, "ivy.kron"], [429, "ivy.kron"]], "kronecker() (in module ivy)": [[370, "ivy.kronecker"], [430, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[370, "ivy.make_svd_non_negative"], [431, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[370, "ivy.matrix_exp"], [432, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[370, "ivy.mode_dot"], [433, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[370, "ivy.multi_dot"], [434, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[370, "ivy.multi_mode_dot"], [435, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[370, "ivy.partial_tucker"], [436, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[370, "ivy.solve_triangular"], [437, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[370, "ivy.svd_flip"], [438, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[370, "ivy.tensor_train"], [439, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[370, "ivy.truncated_svd"], [440, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[370, "ivy.tt_matrix_to_tensor"], [441, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[370, "ivy.tucker"], [442, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[371, "ivy.hinge_embedding_loss"], [443, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[371, "ivy.huber_loss"], [444, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[371, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[371, "ivy.kl_div"], [445, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[371, "ivy.l1_loss"], [446, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[371, "ivy.log_poisson_loss"], [447, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[371, "ivy.poisson_nll_loss"], [448, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[371, "ivy.smooth_l1_loss"], [449, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[371, "ivy.soft_margin_loss"], [450, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[372, "ivy.as_strided"], [451, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[372, "ivy.associative_scan"], [452, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[372, "ivy.atleast_1d"], [453, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[372, "ivy.atleast_2d"], [454, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[372, "ivy.atleast_3d"], [455, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[372, "ivy.broadcast_shapes"], [456, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[372, "ivy.check_scalar"], [457, "ivy.check_scalar"]], "choose() (in module ivy)": [[372, "ivy.choose"], [458, "ivy.choose"]], "column_stack() (in module ivy)": [[372, "ivy.column_stack"], [459, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[372, "ivy.concat_from_sequence"], [460, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[372, "ivy.dsplit"], [461, "ivy.dsplit"]], "dstack() (in module ivy)": [[372, "ivy.dstack"], [462, "ivy.dstack"]], "expand() (in module ivy)": [[372, "ivy.expand"], [463, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[372, "ivy.fill_diagonal"], [464, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[372, "ivy.flatten"], [465, "ivy.flatten"]], "fliplr() (in module ivy)": [[372, "ivy.fliplr"], [466, "ivy.fliplr"]], "flipud() (in module ivy)": [[372, "ivy.flipud"], [467, "ivy.flipud"]], "fold() (in module ivy)": [[372, "ivy.fold"], [468, "ivy.fold"]], "heaviside() (in module ivy)": [[372, "ivy.heaviside"], [469, "ivy.heaviside"]], "hsplit() (in module ivy)": [[372, "ivy.hsplit"], [470, "ivy.hsplit"]], "hstack() (in module ivy)": [[372, "ivy.hstack"], [471, "ivy.hstack"]], "i0() (in module ivy)": [[372, "ivy.i0"], [472, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[372, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[372, "ivy.matricize"], [473, "ivy.matricize"]], "moveaxis() (in module ivy)": [[372, "ivy.moveaxis"], [474, "ivy.moveaxis"]], "pad() (in module ivy)": [[372, "ivy.pad"], [475, "ivy.pad"]], "partial_fold() (in module ivy)": [[372, "ivy.partial_fold"], [476, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[372, "ivy.partial_tensor_to_vec"], [477, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[372, "ivy.partial_unfold"], [478, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[372, "ivy.partial_vec_to_tensor"], [479, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[372, "ivy.put_along_axis"], [480, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[372, "ivy.rot90"], [481, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[372, "ivy.soft_thresholding"], [482, "ivy.soft_thresholding"]], "take() (in module ivy)": [[372, "ivy.take"], [483, "ivy.take"]], "take_along_axis() (in module ivy)": [[372, "ivy.take_along_axis"], [484, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[372, "ivy.top_k"], [485, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[372, "ivy.trim_zeros"], [486, "ivy.trim_zeros"]], "unfold() (in module ivy)": [[372, "ivy.unfold"], [487, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[372, "ivy.unique_consecutive"], [488, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[372, "ivy.vsplit"], [489, "ivy.vsplit"]], "vstack() (in module ivy)": [[372, "ivy.vstack"], [490, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[373, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[374, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[375, "ivy.batch_norm"], [491, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[375, "ivy.group_norm"], [492, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[375, "ivy.instance_norm"], [493, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[375, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[375, "ivy.l1_normalize"], [494, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[375, "ivy.l2_normalize"], [495, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[375, "ivy.local_response_norm"], [496, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[375, "ivy.lp_normalize"], [497, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[376, "ivy.bernoulli"], [498, "ivy.bernoulli"]], "beta() (in module ivy)": [[376, "ivy.beta"], [499, "ivy.beta"]], "dirichlet() (in module ivy)": [[376, "ivy.dirichlet"], [500, "ivy.dirichlet"]], "gamma() (in module ivy)": [[376, "ivy.gamma"], [501, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[376, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[376, "ivy.poisson"], [502, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[377, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[377, "ivy.unravel_index"], [503, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[378, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[379, "ivy.invert_permutation"], [504, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[379, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[379, "ivy.lexsort"], [505, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[380, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[380, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[380, "ivy.is_ivy_sparse_array"], [506, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[380, "ivy.is_native_sparse_array"], [507, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[380, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[380, "ivy.native_sparse_array"], [508, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[380, "ivy.native_sparse_array_to_indices_values_and_shape"], [509, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[381, "ivy.bincount"], [510, "ivy.bincount"]], "corrcoef() (in module ivy)": [[381, "ivy.corrcoef"], [511, "ivy.corrcoef"]], "cov() (in module ivy)": [[381, "ivy.cov"], [512, "ivy.cov"]], "cummax() (in module ivy)": [[381, "ivy.cummax"], [513, "ivy.cummax"]], "cummin() (in module ivy)": [[381, "ivy.cummin"], [514, "ivy.cummin"]], "histogram() (in module ivy)": [[381, "ivy.histogram"], [515, "ivy.histogram"]], "igamma() (in module ivy)": [[381, "ivy.igamma"], [516, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[381, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[381, "ivy.median"], [517, "ivy.median"]], "nanmean() (in module ivy)": [[381, "ivy.nanmean"], [518, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[381, "ivy.nanmedian"], [519, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[381, "ivy.nanmin"], [520, "ivy.nanmin"]], "nanprod() (in module ivy)": [[381, "ivy.nanprod"], [521, "ivy.nanprod"]], "quantile() (in module ivy)": [[381, "ivy.quantile"], [522, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[382, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[382, "ivy.optional_get_element"], [523, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[383, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[383, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[384, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[384, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[385, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[385, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[387, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[387, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[388, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[388, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[389, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[389, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[390, "ivy.Array.dct"]], "dct() (ivy.container method)": [[390, "ivy.Container.dct"]], "dft() (ivy.array method)": [[391, "ivy.Array.dft"]], "dft() (ivy.container method)": [[391, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[392, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[392, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[393, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[393, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[394, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[394, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[395, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[395, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[396, "ivy.Array.fft"]], "fft() (ivy.container method)": [[396, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[397, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[400, "ivy.Array.idct"]], "idct() (ivy.container method)": [[400, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[401, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[401, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[402, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[402, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[404, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[404, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[405, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[405, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[406, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[406, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[407, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[407, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[408, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[408, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[411, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[411, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[412, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[412, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[413, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[413, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[415, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[415, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[416, "ivy.Array.stft"]], "stft() (ivy.container method)": [[416, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[417, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[417, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[418, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[418, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[419, "ivy.Array.cond"]], "cond() (ivy.container method)": [[419, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[420, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[420, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[421, "ivy.Array.dot"]], "dot() (ivy.container method)": [[421, "ivy.Container.dot"]], "eig() (ivy.array method)": [[422, "ivy.Array.eig"], [661, "ivy.Array.eig"]], "eig() (ivy.container method)": [[422, "ivy.Container.eig"], [661, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[423, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[423, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[424, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[424, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[425, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[425, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[426, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[426, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[427, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[427, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[429, "ivy.Array.kron"]], "kron() (ivy.container method)": [[429, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[431, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[431, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[432, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[432, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[433, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[433, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[434, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[434, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[435, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[435, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[436, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[436, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[438, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[438, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[439, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[439, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[440, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[440, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[441, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[441, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[442, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[442, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[443, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[443, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[444, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[444, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[445, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[445, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[446, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[446, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[447, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[447, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[448, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[448, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[449, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[449, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[450, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[450, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[451, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[451, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[452, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[452, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[453, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[453, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[454, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[454, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[455, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[455, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[456, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[459, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[459, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[460, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[460, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[461, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[461, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[462, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[462, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[463, "ivy.Array.expand"]], "expand() (ivy.container method)": [[463, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[464, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[464, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[465, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[465, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[466, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[466, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[467, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[467, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[468, "ivy.Array.fold"]], "fold() (ivy.container method)": [[468, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[469, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[469, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[470, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[470, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[471, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[471, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[472, "ivy.Array.i0"]], "i0() (ivy.container method)": [[472, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[473, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[473, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[474, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[474, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[475, "ivy.Array.pad"]], "pad() (ivy.container method)": [[475, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[476, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[476, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[477, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[477, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[478, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[478, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[479, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[479, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[480, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[480, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[481, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[481, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[482, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[482, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[483, "ivy.Array.take"]], "take() (ivy.container method)": [[483, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[484, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[484, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[485, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[485, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[486, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[486, "ivy.Container.trim_zeros"]], "unfold() (ivy.array method)": [[487, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[487, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[488, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[488, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[489, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[489, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[490, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[490, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[491, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[491, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[492, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[492, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[493, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[493, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[494, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[494, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[495, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[495, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[497, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[497, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[498, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[498, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[499, "ivy.Array.beta"]], "beta() (ivy.container method)": [[499, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[500, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[500, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[501, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[501, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[502, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[502, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[503, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[503, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[504, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[505, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[505, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[510, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[510, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[511, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[511, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[512, "ivy.Array.cov"]], "cov() (ivy.container method)": [[512, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[513, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[513, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[514, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[514, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[515, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[515, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[516, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[516, "ivy.Container.igamma"]], "median() (ivy.array method)": [[517, "ivy.Array.median"]], "median() (ivy.container method)": [[517, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[518, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[518, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[519, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[519, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[520, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[520, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[521, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[521, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[522, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[522, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[523, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[523, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[524, "ivy.all_equal"], [623, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[524, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[524, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[525, "ivy.arg_info"], [623, "ivy.arg_info"]], "arg_names() (in module ivy)": [[526, "ivy.arg_names"], [623, "ivy.arg_names"]], "array_equal() (in module ivy)": [[527, "ivy.array_equal"], [623, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[527, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[527, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[528, "ivy.assert_supports_inplace"], [623, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[528, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[528, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[529, "ivy.cache_fn"], [623, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[530, "ivy.clip_matrix_norm"], [623, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[530, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[530, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[531, "ivy.clip_vector_norm"], [623, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[531, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[531, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[532, "ivy.container_types"], [623, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[533, "ivy.current_backend_str"], [623, "ivy.current_backend_str"]], "default() (in module ivy)": [[534, "ivy.default"], [623, "ivy.default"]], "default() (ivy.array method)": [[534, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[535, "ivy.einops_rearrange"], [623, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[535, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[535, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[536, "ivy.einops_reduce"], [623, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[536, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[536, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[537, "ivy.einops_repeat"], [623, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[537, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[537, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[538, "ivy.exists"], [623, "ivy.exists"]], "exists() (ivy.array method)": [[538, "ivy.Array.exists"]], "exists() (ivy.container method)": [[538, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[539, "ivy.fourier_encode"], [623, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[539, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[539, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[540, "ivy.function_supported_devices_and_dtypes"], [623, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[541, "ivy.function_unsupported_devices_and_dtypes"], [623, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[542, "ivy.gather"], [623, "ivy.gather"]], "gather() (ivy.array method)": [[542, "ivy.Array.gather"]], "gather() (ivy.container method)": [[542, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[543, "ivy.gather_nd"], [623, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[543, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[543, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[544, "ivy.get_all_arrays_in_memory"], [623, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[545, "ivy.get_item"], [623, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[546, "ivy.get_num_dims"], [623, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[546, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[546, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[547, "ivy.get_referrers_recursive"], [623, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[548, "ivy.has_nans"], [623, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[548, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[548, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[549, "ivy.inplace_arrays_supported"], [623, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[550, "ivy.inplace_decrement"], [623, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[550, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[550, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[551, "ivy.inplace_increment"], [623, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[551, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[551, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[552, "ivy.inplace_update"], [623, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[552, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[552, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[553, "ivy.inplace_variables_supported"], [623, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[554, "ivy.is_array"], [623, "ivy.is_array"]], "is_array() (ivy.array method)": [[554, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[554, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[555, "ivy.is_ivy_array"], [623, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[555, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[555, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[556, "ivy.is_ivy_container"], [623, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[556, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[557, "ivy.is_ivy_nested_array"], [623, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[558, "ivy.is_native_array"], [623, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[558, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[558, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[559, "ivy.isin"], [623, "ivy.isin"]], "isin() (ivy.array method)": [[559, "ivy.Array.isin"]], "isin() (ivy.container method)": [[559, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[560, "ivy.isscalar"], [623, "ivy.isscalar"]], "itemsize() (in module ivy)": [[561, "ivy.itemsize"], [623, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[561, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[561, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[562, "ivy.match_kwargs"], [623, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[563, "ivy.multiprocessing"], [623, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[564, "ivy.num_arrays_in_memory"], [623, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[565, "ivy.print_all_arrays_in_memory"], [623, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[566, "ivy.scatter_flat"], [623, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[566, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[566, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[567, "ivy.scatter_nd"], [623, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[567, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[567, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[568, "ivy.set_array_mode"], [623, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[569, "ivy.set_exception_trace_mode"], [623, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[570, "ivy.set_inplace_mode"], [623, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[571, "ivy.set_item"], [623, "ivy.set_item"]], "set_min_base() (in module ivy)": [[572, "ivy.set_min_base"], [623, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[573, "ivy.set_min_denominator"], [623, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[574, "ivy.set_nestable_mode"], [623, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[575, "ivy.set_precise_mode"], [623, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[576, "ivy.set_queue_timeout"], [623, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[577, "ivy.set_shape_array_mode"], [623, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[578, "ivy.set_show_func_wrapper_trace_mode"], [623, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[579, "ivy.set_tmp_dir"], [623, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[580, "ivy.shape"], [623, "ivy.shape"]], "shape() (ivy.array method)": [[580, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[581, "ivy.stable_divide"], [623, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[581, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[581, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[582, "ivy.stable_pow"], [623, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[582, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[582, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[583, "ivy.strides"], [623, "ivy.strides"]], "strides() (ivy.array method)": [[583, "ivy.Array.strides"]], "strides() (ivy.container method)": [[583, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[584, "ivy.supports_inplace_updates"], [623, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[584, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[584, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[585, "ivy.to_ivy_shape"], [623, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[586, "ivy.to_list"], [623, "ivy.to_list"]], "to_list() (ivy.array method)": [[586, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[586, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[587, "ivy.to_native_shape"], [623, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[588, "ivy.to_numpy"], [623, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[588, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[588, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[589, "ivy.to_scalar"], [623, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[589, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[589, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[590, "ivy.try_else_none"], [623, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[591, "ivy.unset_array_mode"], [623, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[592, "ivy.unset_exception_trace_mode"], [623, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[593, "ivy.unset_inplace_mode"], [623, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[594, "ivy.unset_min_base"], [623, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[595, "ivy.unset_min_denominator"], [623, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[596, "ivy.unset_nestable_mode"], [623, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[597, "ivy.unset_precise_mode"], [623, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[598, "ivy.unset_queue_timeout"], [623, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[599, "ivy.unset_shape_array_mode"], [623, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[600, "ivy.unset_show_func_wrapper_trace_mode"], [623, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[601, "ivy.unset_tmp_dir"], [623, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[602, "ivy.value_is_nan"], [623, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[602, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[602, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[603, "ivy.vmap"], [623, "ivy.vmap"]], "adam_step() (in module ivy)": [[604, "ivy.adam_step"], [624, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[604, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[604, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[605, "ivy.adam_update"], [624, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[605, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[605, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[606, "ivy.execute_with_gradients"], [624, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[607, "ivy.grad"], [624, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[608, "ivy.gradient_descent_update"], [624, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[608, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[608, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[609, "ivy.jac"], [624, "ivy.jac"]], "lamb_update() (in module ivy)": [[610, "ivy.lamb_update"], [624, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[610, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[610, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[611, "ivy.lars_update"], [624, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[611, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[611, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[612, "ivy.optimizer_update"], [624, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[612, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[612, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[613, "ivy.stop_gradient"], [624, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[613, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[613, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[614, "ivy.value_and_grad"], [624, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[615, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[616, "ivy.e"]], "inf (in module ivy)": [[616, "ivy.inf"]], "ivy.functional.ivy.constants": [[616, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[616, "ivy.nan"]], "newaxis (in module ivy)": [[616, "ivy.newaxis"]], "pi (in module ivy)": [[616, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[617, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[618, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[618, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[619, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[619, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[619, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[619, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[619, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[619, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[620, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[620, "ivy.Profiler"]], "ivy.functional.ivy.device": [[620, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[621, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[622, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[623, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[623, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[623, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[624, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[625, "ivy.conv"], [638, "ivy.conv"]], "conv1d() (in module ivy)": [[625, "ivy.conv1d"], [639, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[625, "ivy.conv1d_transpose"], [640, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[625, "ivy.conv2d"], [641, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[625, "ivy.conv2d_transpose"], [642, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[625, "ivy.conv3d"], [643, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[625, "ivy.conv3d_transpose"], [644, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[625, "ivy.conv_general_dilated"], [645, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[625, "ivy.conv_general_transpose"], [646, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[625, "ivy.depthwise_conv2d"], [647, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[625, "ivy.dropout"], [648, "ivy.dropout"]], "ivy.functional.ivy.layers": [[625, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[625, "ivy.linear"], [649, "ivy.linear"]], "lstm() (in module ivy)": [[625, "ivy.lstm"], [650, "ivy.lstm"]], "lstm_update() (in module ivy)": [[625, "ivy.lstm_update"], [651, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[625, "ivy.multi_head_attention"], [652, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[625, "ivy.nms"], [653, "ivy.nms"]], "roi_align() (in module ivy)": [[625, "ivy.roi_align"], [654, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[625, "ivy.scaled_dot_product_attention"], [655, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[626, "ivy.cholesky"], [656, "ivy.cholesky"]], "cross() (in module ivy)": [[626, "ivy.cross"], [657, "ivy.cross"]], "det() (in module ivy)": [[626, "ivy.det"], [658, "ivy.det"]], "diag() (in module ivy)": [[626, "ivy.diag"], [659, "ivy.diag"]], "diagonal() (in module ivy)": [[626, "ivy.diagonal"], [660, "ivy.diagonal"]], "eigh() (in module ivy)": [[626, "ivy.eigh"], [662, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[626, "ivy.eigvalsh"], [663, "ivy.eigvalsh"]], "inner() (in module ivy)": [[626, "ivy.inner"], [664, "ivy.inner"]], "inv() (in module ivy)": [[626, "ivy.inv"], [665, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[626, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[626, "ivy.lu_factor"], [666, "ivy.lu_factor"]], "matmul() (in module ivy)": [[626, "ivy.matmul"], [667, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[626, "ivy.matrix_norm"], [668, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[626, "ivy.matrix_power"], [669, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[626, "ivy.matrix_rank"], [670, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[626, "ivy.matrix_transpose"], [671, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[626, "ivy.outer"], [672, "ivy.outer"]], "pinv() (in module ivy)": [[626, "ivy.pinv"], [673, "ivy.pinv"]], "qr() (in module ivy)": [[626, "ivy.qr"], [674, "ivy.qr"]], "slogdet() (in module ivy)": [[626, "ivy.slogdet"], [675, "ivy.slogdet"]], "solve() (in module ivy)": [[626, "ivy.solve"], [676, "ivy.solve"]], "svd() (in module ivy)": [[626, "ivy.svd"], [677, "ivy.svd"]], "svdvals() (in module ivy)": [[626, "ivy.svdvals"], [678, "ivy.svdvals"]], "tensordot() (in module ivy)": [[626, "ivy.tensordot"], [679, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[626, "ivy.tensorsolve"], [680, "ivy.tensorsolve"]], "trace() (in module ivy)": [[626, "ivy.trace"], [681, "ivy.trace"]], "vander() (in module ivy)": [[626, "ivy.vander"], [682, "ivy.vander"]], "vecdot() (in module ivy)": [[626, "ivy.vecdot"], [683, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[626, "ivy.vector_norm"], [684, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[626, "ivy.vector_to_skew_symmetric_matrix"], [685, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[627, "ivy.binary_cross_entropy"], [686, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[627, "ivy.cross_entropy"], [687, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[627, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[627, "ivy.sparse_cross_entropy"], [688, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[628, "ivy.clip"], [689, "ivy.clip"]], "concat() (in module ivy)": [[628, "ivy.concat"], [690, "ivy.concat"]], "constant_pad() (in module ivy)": [[628, "ivy.constant_pad"], [691, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[628, "ivy.expand_dims"], [692, "ivy.expand_dims"]], "flip() (in module ivy)": [[628, "ivy.flip"], [693, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[628, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[628, "ivy.permute_dims"], [694, "ivy.permute_dims"]], "repeat() (in module ivy)": [[628, "ivy.repeat"], [695, "ivy.repeat"]], "reshape() (in module ivy)": [[628, "ivy.reshape"], [696, "ivy.reshape"]], "roll() (in module ivy)": [[628, "ivy.roll"], [697, "ivy.roll"]], "split() (in module ivy)": [[628, "ivy.split"], [698, "ivy.split"]], "squeeze() (in module ivy)": [[628, "ivy.squeeze"], [699, "ivy.squeeze"]], "stack() (in module ivy)": [[628, "ivy.stack"], [700, "ivy.stack"]], "swapaxes() (in module ivy)": [[628, "ivy.swapaxes"], [701, "ivy.swapaxes"]], "tile() (in module ivy)": [[628, "ivy.tile"], [702, "ivy.tile"]], "unstack() (in module ivy)": [[628, "ivy.unstack"], [703, "ivy.unstack"]], "zero_pad() (in module ivy)": [[628, "ivy.zero_pad"], [704, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[629, "ivy.fomaml_step"], [705, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[629, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[629, "ivy.maml_step"], [706, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[629, "ivy.reptile_step"], [707, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[630, "ivy.all_nested_indices"], [708, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[630, "ivy.copy_nest"], [709, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[630, "ivy.duplicate_array_index_chains"], [710, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[630, "ivy.index_nest"], [711, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[630, "ivy.insert_into_nest_at_index"], [712, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[630, "ivy.insert_into_nest_at_indices"], [713, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[630, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[630, "ivy.map"], [714, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[630, "ivy.map_nest_at_index"], [715, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[630, "ivy.map_nest_at_indices"], [716, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[630, "ivy.multi_index_nest"], [717, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[630, "ivy.nested_any"], [718, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[630, "ivy.nested_argwhere"], [719, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[630, "ivy.nested_map"], [720, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[630, "ivy.nested_multi_map"], [721, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[630, "ivy.prune_empty"], [722, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[630, "ivy.prune_nest_at_index"], [723, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[630, "ivy.prune_nest_at_indices"], [724, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[630, "ivy.set_nest_at_index"], [725, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[630, "ivy.set_nest_at_indices"], [726, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[631, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[631, "ivy.layer_norm"], [727, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[632, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[632, "ivy.multinomial"], [728, "ivy.multinomial"]], "randint() (in module ivy)": [[632, "ivy.randint"], [729, "ivy.randint"]], "random_normal() (in module ivy)": [[632, "ivy.random_normal"], [730, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[632, "ivy.random_uniform"], [731, "ivy.random_uniform"]], "seed() (in module ivy)": [[632, "ivy.seed"], [732, "ivy.seed"]], "shuffle() (in module ivy)": [[632, "ivy.shuffle"], [733, "ivy.shuffle"]], "argmax() (in module ivy)": [[633, "ivy.argmax"], [734, "ivy.argmax"]], "argmin() (in module ivy)": [[633, "ivy.argmin"], [735, "ivy.argmin"]], "argwhere() (in module ivy)": [[633, "ivy.argwhere"], [736, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[633, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[633, "ivy.nonzero"], [737, "ivy.nonzero"]], "where() (in module ivy)": [[633, "ivy.where"], [738, "ivy.where"]], "ivy.functional.ivy.set": [[634, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[634, "ivy.unique_all"], [739, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[634, "ivy.unique_counts"], [740, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[634, "ivy.unique_inverse"], [741, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[634, "ivy.unique_values"], [742, "ivy.unique_values"]], "argsort() (in module ivy)": [[635, "ivy.argsort"], [743, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[635, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[635, "ivy.msort"], [744, "ivy.msort"]], "searchsorted() (in module ivy)": [[635, "ivy.searchsorted"], [745, "ivy.searchsorted"]], "sort() (in module ivy)": [[635, "ivy.sort"], [746, "ivy.sort"]], "cumprod() (in module ivy)": [[636, "ivy.cumprod"], [747, "ivy.cumprod"]], "cumsum() (in module ivy)": [[636, "ivy.cumsum"], [748, "ivy.cumsum"]], "einsum() (in module ivy)": [[636, "ivy.einsum"], [749, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[636, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[636, "ivy.max"], [750, "ivy.max"]], "mean() (in module ivy)": [[636, "ivy.mean"], [751, "ivy.mean"]], "min() (in module ivy)": [[636, "ivy.min"], [752, "ivy.min"]], "prod() (in module ivy)": [[636, "ivy.prod"], [753, "ivy.prod"]], "std() (in module ivy)": [[636, "ivy.std"], [754, "ivy.std"]], "sum() (in module ivy)": [[636, "ivy.sum"], [755, "ivy.sum"]], "var() (in module ivy)": [[636, "ivy.var"], [756, "ivy.var"]], "all() (in module ivy)": [[637, "ivy.all"], [757, "ivy.all"]], "any() (in module ivy)": [[637, "ivy.any"], [758, "ivy.any"]], "ivy.functional.ivy.utility": [[637, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[637, "ivy.load"], [759, "ivy.load"]], "save() (in module ivy)": [[637, "ivy.save"], [760, "ivy.save"]], "conv1d() (ivy.array method)": [[639, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[639, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[640, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[640, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[641, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[641, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[642, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[642, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[643, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[643, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[644, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[644, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[647, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[647, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[648, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[648, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[649, "ivy.Array.linear"]], "linear() (ivy.container method)": [[649, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[651, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[651, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[652, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[652, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[655, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[655, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[656, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[656, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[657, "ivy.Array.cross"]], "cross() (ivy.container method)": [[657, "ivy.Container.cross"]], "det() (ivy.array method)": [[658, "ivy.Array.det"]], "det() (ivy.container method)": [[658, "ivy.Container.det"]], "diag() (ivy.array method)": [[659, "ivy.Array.diag"]], "diag() (ivy.container method)": [[659, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[660, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[660, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[662, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[662, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[663, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[663, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[664, "ivy.Array.inner"]], "inner() (ivy.container method)": [[664, "ivy.Container.inner"]], "inv() (ivy.array method)": [[665, "ivy.Array.inv"]], "inv() (ivy.container method)": [[665, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[667, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[667, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[668, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[668, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[669, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[669, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[670, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[670, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[671, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[671, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[672, "ivy.Array.outer"]], "outer() (ivy.container method)": [[672, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[673, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[673, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[674, "ivy.Array.qr"]], "qr() (ivy.container method)": [[674, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[675, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[675, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[676, "ivy.Array.solve"]], "solve() (ivy.container method)": [[676, "ivy.Container.solve"]], "svd() (ivy.array method)": [[677, "ivy.Array.svd"]], "svd() (ivy.container method)": [[677, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[678, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[678, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[679, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[679, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[680, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[680, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[681, "ivy.Array.trace"]], "trace() (ivy.container method)": [[681, "ivy.Container.trace"]], "vander() (ivy.array method)": [[682, "ivy.Array.vander"]], "vander() (ivy.container method)": [[682, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[683, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[683, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[684, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[684, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[685, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[685, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[686, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[686, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[687, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[687, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[688, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[688, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[689, "ivy.Array.clip"]], "clip() (ivy.container method)": [[689, "ivy.Container.clip"]], "concat() (ivy.array method)": [[690, "ivy.Array.concat"]], "concat() (ivy.container method)": [[690, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[691, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[691, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[692, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[692, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[693, "ivy.Array.flip"]], "flip() (ivy.container method)": [[693, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[694, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[694, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[695, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[695, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[696, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[696, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[697, "ivy.Array.roll"]], "roll() (ivy.container method)": [[697, "ivy.Container.roll"]], "split() (ivy.array method)": [[698, "ivy.Array.split"]], "split() (ivy.container method)": [[698, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[699, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[699, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[700, "ivy.Array.stack"]], "stack() (ivy.container method)": [[700, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[701, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[701, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[702, "ivy.Array.tile"]], "tile() (ivy.container method)": [[702, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[703, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[703, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[704, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[704, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[727, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[727, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[728, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[728, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[729, "ivy.Array.randint"]], "randint() (ivy.container method)": [[729, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[730, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[730, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[731, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[731, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[733, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[733, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[734, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[734, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[735, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[735, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[736, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[736, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[737, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[737, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[738, "ivy.Array.where"]], "where() (ivy.container method)": [[738, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[739, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[739, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[740, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[740, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[741, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[741, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[742, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[742, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[743, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[743, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[744, "ivy.Array.msort"]], "msort() (ivy.container method)": [[744, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[745, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[745, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[746, "ivy.Array.sort"]], "sort() (ivy.container method)": [[746, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[747, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[747, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[748, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[748, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[749, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[749, "ivy.Container.einsum"]], "max() (ivy.array method)": [[750, "ivy.Array.max"]], "max() (ivy.container method)": [[750, "ivy.Container.max"]], "mean() (ivy.array method)": [[751, "ivy.Array.mean"]], "mean() (ivy.container method)": [[751, "ivy.Container.mean"]], "min() (ivy.array method)": [[752, "ivy.Array.min"]], "min() (ivy.container method)": [[752, "ivy.Container.min"]], "prod() (ivy.array method)": [[753, "ivy.Array.prod"]], "prod() (ivy.container method)": [[753, "ivy.Container.prod"]], "std() (ivy.array method)": [[754, "ivy.Array.std"]], "std() (ivy.container method)": [[754, "ivy.Container.std"]], "sum() (ivy.array method)": [[755, "ivy.Array.sum"]], "sum() (ivy.container method)": [[755, "ivy.Container.sum"]], "var() (ivy.array method)": [[756, "ivy.Array.var"]], "var() (ivy.container method)": [[756, "ivy.Container.var"]], "all() (ivy.array method)": [[757, "ivy.Array.all"]], "all() (ivy.container method)": [[757, "ivy.Container.all"]], "any() (ivy.array method)": [[758, "ivy.Array.any"]], "any() (ivy.container method)": [[758, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[761, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[761, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[762, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[763, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[763, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[764, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[764, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[764, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[764, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[764, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[765, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[766, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[766, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[767, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[767, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[768, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[768, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[769, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[769, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[769, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[769, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[770, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[770, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[770, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[771, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[771, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[772, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[772, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[773, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[773, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[774, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[774, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[778, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[778, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[778, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[778, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[778, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[778, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[778, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[778, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[778, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[778, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[778, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[778, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[778, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[778, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[778, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[778, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[778, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[778, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[778, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[778, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[779, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[779, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[779, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[779, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[779, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[779, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[779, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[779, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[779, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[780, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[780, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[781, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[781, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[781, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[781, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[781, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[781, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[781, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[781, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[781, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[781, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[781, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[781, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[781, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[781, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[781, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[781, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[782, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[782, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[782, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[782, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[782, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[782, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[782, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[782, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[782, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[782, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[782, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[782, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[782, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[782, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[782, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[782, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[782, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[782, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[782, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[782, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[782, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[782, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[782, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[782, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[782, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[782, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[782, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[783, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[783, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[783, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[783, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[783, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[783, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[783, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[784, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[784, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[784, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[784, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[784, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[784, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[785, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[785, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[785, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[785, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[785, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[786, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[786, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[786, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[786, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[786, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[786, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[786, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[786, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[786, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[786, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[786, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[786, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[786, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[786, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[786, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[786, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[786, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[786, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[787, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[787, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[787, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[788, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[788, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[789, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[790, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[790, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[790, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[790, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[790, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[790, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[790, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[790, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[790, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[790, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[790, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[791, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[791, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[791, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[792, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[792, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[793, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[793, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[793, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[794, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[794, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[795, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[795, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[796, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[796, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[797, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[797, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[797, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[797, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[797, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[797, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[797, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[797, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[797, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[797, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[797, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[797, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[797, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[797, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[797, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[797, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[797, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[797, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[797, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[797, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[797, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[797, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[797, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[797, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[797, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[797, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[798, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[798, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[798, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[799, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[799, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[799, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[800, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[800, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[800, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[800, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[800, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[800, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[800, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[800, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[800, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[800, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[801, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[801, "module-ivy.utils.verbosity"]], "automatic code conversions": [[848, "term-Automatic-Code-Conversions"]], "backend handler": [[848, "term-Backend-Handler"]], "compositional functions": [[848, "term-Compositional-Functions"]], "convenience functions": [[848, "term-Convenience-Functions"]], "framework": [[848, "term-Framework"]], "framework handler": [[848, "term-Framework-Handler"]], "graph compiler": [[848, "term-Graph-Compiler"]], "ivy array": [[848, "term-Ivy-Array"]], "ivy backends": [[848, "term-Ivy-Backends"]], "ivy compiler": [[848, "term-Ivy-Compiler"]], "ivy container": [[848, "term-Ivy-Container"]], "ivy frontends": [[848, "term-Ivy-Frontends"]], "ivy functional api": [[848, "term-Ivy-Functional-API"]], "ivy tracer": [[848, "term-Ivy-Tracer"]], "ivy transpiler": [[848, "term-Ivy-Transpiler"]], "mixed functions": [[848, "term-Mixed-Functions"]], "native array": [[848, "term-Native-Array"]], "nestable functions": [[848, "term-Nestable-Functions"]], "pipeline": [[848, "term-Pipeline"]], "primary functions": [[848, "term-Primary-Functions"]], "standalone functions": [[848, "term-Standalone-Functions"]], "submodule helper functions": [[848, "term-Submodule-Helper-Functions"]], "built-in function": [[854, "ivy.trace_graph"], [855, "ivy.transpile"], [856, "ivy.unify"]], "ivy.trace_graph()": [[854, "ivy.trace_graph"]], "ivy.transpile()": [[855, "ivy.transpile"]], "ivy.unify()": [[856, "ivy.unify"]]}})