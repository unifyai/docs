{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unify code"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unify a simple `torch` function and use it alongside any ML framework!"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "‚ö†Ô∏è If you are running this notebook in Colab, you will have to install `Ivy` and some dependencies manually. You can do so by running the cell below ‚¨áÔ∏è\n",
    "\n",
    "If you want to run the notebook locally but don't have Ivy installed just yet, you can check out the [Get Started section of the docs.](https://unify.ai/docs/ivy/overview/get_started.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install ivy"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, let's import the dependencies and define a `torch` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ivy\n",
    "import torch\n",
    "\n",
    "def normalize(x):\n",
    "    mean = torch.mean(x)\n",
    "    std = torch.std(x)\n",
    "    return torch.div(torch.sub(x, mean), std)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By using `ivy.unify()`, you can convert any code from any framework into Ivy code, which as we have already seen, can be executed using any framework as the backend. \n",
    "\n",
    "Let's unify the function!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "normalize = ivy.unify(normalize, source=\"torch\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And that's it! The `normalize` function can now be used with **any ML framework**. It's as simple as that!"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, let's give it a try!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the frameworks\n",
    "import numpy as np\n",
    "import jax.numpy as jnp\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ivy.array([ 0.82997245,  0.44733784, -0.32163444, -1.93330479, -0.52438271,\n",
      "       -0.20438017,  1.252316  ,  0.0827222 ,  1.26017165, -0.88881904])\n",
      "ivy.array([ 0.82997245,  0.44733784, -0.32163444, -1.93330479, -0.52438271,\n",
      "       -0.20438017,  1.252316  ,  0.0827222 ,  1.26017165, -0.88881904])\n",
      "ivy.array([ 0.82997245,  0.44733784, -0.32163444, -1.93330479, -0.52438271,\n",
      "       -0.20438017,  1.252316  ,  0.0827222 ,  1.26017165, -0.88881904])\n",
      "ivy.array([ 0.82997245,  0.44733784, -0.32163444, -1.93330479, -0.52438271,\n",
      "       -0.20438017,  1.252316  ,  0.0827222 ,  1.26017165, -0.88881904])\n"
     ]
    }
   ],
   "source": [
    "# create random numpy arrays for testing\n",
    "x = np.random.uniform(size=10).astype(np.float32)\n",
    "ivy.set_backend(\"numpy\")\n",
    "print(normalize(x))\n",
    "\n",
    "# jax\n",
    "x_ = jnp.array(x)\n",
    "ivy.set_backend(\"jax\")\n",
    "print(normalize(x_))\n",
    "\n",
    "# tensorflow\n",
    "x_ = tf.constant(x)\n",
    "ivy.set_backend(\"tensorflow\")\n",
    "print(normalize(x_))\n",
    "\n",
    "# torch\n",
    "x_ = torch.tensor(x)\n",
    "ivy.set_backend(\"torch\")\n",
    "print(normalize(x_))"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the new `normalize` function can operate with any ML framework. `ivy.unify` converts the framework-specific `torch` implementation into a framework-agnostic `ivy` implementation, which is compatible with all frameworks."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Round Up"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it, you can now unify ML code! However, there are several other important topics to master before you're ready to unify ML code like a pro ü•∑. Next, we'll be learning how to make our unified Ivy code [run much more efficiently](03_compile_code.ipynb)! ‚ö°"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
